// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DeploymentStacksOperations
    /// </summary>
    public static partial class DeploymentStacksOperationsExtensions
    {
        /// <summary>
        /// Lists all the Deployment stacks within the specified Resource Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentStack> ListAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName)
        {
                return ((IDeploymentStacksOperations)operations).ListAtResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified Resource Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentStack>> ListAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the Deployment stacks within the specified Subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentStack> ListAtSubscription(this IDeploymentStacksOperations operations)
        {
                return ((IDeploymentStacksOperations)operations).ListAtSubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified Subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentStack>> ListAtSubscriptionAsync(this IDeploymentStacksOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtSubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the Deployment stacks within the specified Management Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentStack> ListAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId)
        {
                return ((IDeploymentStacksOperations)operations).ListAtManagementGroupAsync(managementGroupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified Management Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentStack>> ListAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtManagementGroupWithHttpMessagesAsync(managementGroupId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a Deployment stack at Resource Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack CreateOrUpdateAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).CreateOrUpdateAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Deployment stack at Resource Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> CreateOrUpdateAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Deployment stack with a given name at Resource Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack GetAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName)
        {
                return ((IDeploymentStacksOperations)operations).GetAtResourceGroupAsync(resourceGroupName, deploymentStackName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Deployment stack with a given name at Resource Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> GetAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Deployment stack by name at Resource Group scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        public static DeploymentStacksDeleteAtResourceGroupHeaders DeleteAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?))
        {
                return ((IDeploymentStacksOperations)operations).DeleteAtResourceGroupAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Deployment stack by name at Resource Group scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStacksDeleteAtResourceGroupHeaders> DeleteAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Creates or updates a Deployment stack at Subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack CreateOrUpdateAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).CreateOrUpdateAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Deployment stack at Subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> CreateOrUpdateAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Deployment stack with a given name at Subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack GetAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName)
        {
                return ((IDeploymentStacksOperations)operations).GetAtSubscriptionAsync(deploymentStackName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Deployment stack with a given name at Subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> GetAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtSubscriptionWithHttpMessagesAsync(deploymentStackName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Deployment stack by name at Subscription scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        public static DeploymentStacksDeleteAtSubscriptionHeaders DeleteAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?))
        {
                return ((IDeploymentStacksOperations)operations).DeleteAtSubscriptionAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Deployment stack by name at Subscription scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStacksDeleteAtSubscriptionHeaders> DeleteAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtSubscriptionWithHttpMessagesAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Creates or updates a Deployment stack at Management Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack CreateOrUpdateAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).CreateOrUpdateAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Deployment stack at Management Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> CreateOrUpdateAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Deployment stack with a given name at Management Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack GetAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName)
        {
                return ((IDeploymentStacksOperations)operations).GetAtManagementGroupAsync(managementGroupId, deploymentStackName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Deployment stack with a given name at Management Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> GetAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Deployment stack by name at Management Group scope. When
        /// operation completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        public static DeploymentStacksDeleteAtManagementGroupHeaders DeleteAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?))
        {
                return ((IDeploymentStacksOperations)operations).DeleteAtManagementGroupAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Deployment stack by name at Management Group scope. When
        /// operation completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStacksDeleteAtManagementGroupHeaders> DeleteAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Exports the template used to create the Deployment stack at Resource Group
        /// scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackTemplateDefinition ExportTemplateAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName)
        {
                return ((IDeploymentStacksOperations)operations).ExportTemplateAtResourceGroupAsync(resourceGroupName, deploymentStackName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used to create the Deployment stack at Resource Group
        /// scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackTemplateDefinition> ExportTemplateAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used to create the Deployment stack at Subscription
        /// scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackTemplateDefinition ExportTemplateAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName)
        {
                return ((IDeploymentStacksOperations)operations).ExportTemplateAtSubscriptionAsync(deploymentStackName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used to create the Deployment stack at Subscription
        /// scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackTemplateDefinition> ExportTemplateAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtSubscriptionWithHttpMessagesAsync(deploymentStackName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used to create the Deployment stack at Management
        /// Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackTemplateDefinition ExportTemplateAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName)
        {
                return ((IDeploymentStacksOperations)operations).ExportTemplateAtManagementGroupAsync(managementGroupId, deploymentStackName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used to create the Deployment stack at Management
        /// Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackTemplateDefinition> ExportTemplateAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Runs preflight validation on the Resource Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackValidateResult ValidateStackAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).ValidateStackAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs preflight validation on the Resource Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackValidateResult> ValidateStackAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateStackAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Runs preflight validation on the Subscription scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackValidateResult ValidateStackAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).ValidateStackAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs preflight validation on the Subscription scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackValidateResult> ValidateStackAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateStackAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Runs preflight validation on the Management Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackValidateResult ValidateStackAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).ValidateStackAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs preflight validation on the Management Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackValidateResult> ValidateStackAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateStackAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a Deployment stack at Resource Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack BeginCreateOrUpdateAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).BeginCreateOrUpdateAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Deployment stack at Resource Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> BeginCreateOrUpdateAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Deployment stack by name at Resource Group scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        public static DeploymentStacksDeleteAtResourceGroupHeaders BeginDeleteAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?))
        {
                return ((IDeploymentStacksOperations)operations).BeginDeleteAtResourceGroupAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Deployment stack by name at Resource Group scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStacksDeleteAtResourceGroupHeaders> BeginDeleteAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Creates or updates a Deployment stack at Subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack BeginCreateOrUpdateAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).BeginCreateOrUpdateAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Deployment stack at Subscription scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> BeginCreateOrUpdateAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Deployment stack by name at Subscription scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        public static DeploymentStacksDeleteAtSubscriptionHeaders BeginDeleteAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?))
        {
                return ((IDeploymentStacksOperations)operations).BeginDeleteAtSubscriptionAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Deployment stack by name at Subscription scope. When operation
        /// completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStacksDeleteAtSubscriptionHeaders> BeginDeleteAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteAtSubscriptionWithHttpMessagesAsync(deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Creates or updates a Deployment stack at Management Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStack BeginCreateOrUpdateAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).BeginCreateOrUpdateAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a Deployment stack at Management Group scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStack> BeginCreateOrUpdateAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Deployment stack by name at Management Group scope. When
        /// operation completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        public static DeploymentStacksDeleteAtManagementGroupHeaders BeginDeleteAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?))
        {
                return ((IDeploymentStacksOperations)operations).BeginDeleteAtManagementGroupAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Deployment stack by name at Management Group scope. When
        /// operation completes, status code 200 returned without content.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='unmanageActionResources'>
        /// Flag to indicate delete rather than detach for unmanaged resources.
        /// </param>
        /// <param name='unmanageActionResourceGroups'>
        /// Flag to indicate delete rather than detach for unmanaged resource groups.
        /// </param>
        /// <param name='unmanageActionManagementGroups'>
        /// Flag to indicate delete rather than detach for unmanaged management groups.
        /// </param>
        /// <param name='bypassStackOutOfSyncError'>
        /// Flag to bypass service errors that indicate the stack resource list is not
        /// correctly synchronized.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStacksDeleteAtManagementGroupHeaders> BeginDeleteAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, string unmanageActionResources = default(string), string unmanageActionResourceGroups = default(string), string unmanageActionManagementGroups = default(string), bool? bypassStackOutOfSyncError = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, unmanageActionResources, unmanageActionResourceGroups, unmanageActionManagementGroups, bypassStackOutOfSyncError, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Runs preflight validation on the Resource Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackValidateResult BeginValidateStackAtResourceGroup(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).BeginValidateStackAtResourceGroupAsync(resourceGroupName, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs preflight validation on the Resource Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackValidateResult> BeginValidateStackAtResourceGroupAsync(this IDeploymentStacksOperations operations, string resourceGroupName, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateStackAtResourceGroupWithHttpMessagesAsync(resourceGroupName, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Runs preflight validation on the Subscription scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackValidateResult BeginValidateStackAtSubscription(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).BeginValidateStackAtSubscriptionAsync(deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs preflight validation on the Subscription scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackValidateResult> BeginValidateStackAtSubscriptionAsync(this IDeploymentStacksOperations operations, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateStackAtSubscriptionWithHttpMessagesAsync(deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Runs preflight validation on the Management Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        public static DeploymentStackValidateResult BeginValidateStackAtManagementGroup(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack)
        {
                return ((IDeploymentStacksOperations)operations).BeginValidateStackAtManagementGroupAsync(managementGroupId, deploymentStackName, deploymentStack).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Runs preflight validation on the Management Group scoped Deployment stack
        /// template to verify its acceptance to Azure Resource Manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// Management Group id.
        /// </param>
        /// <param name='deploymentStackName'>
        /// Name of the deployment stack.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentStackValidateResult> BeginValidateStackAtManagementGroupAsync(this IDeploymentStacksOperations operations, string managementGroupId, string deploymentStackName, DeploymentStack deploymentStack, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateStackAtManagementGroupWithHttpMessagesAsync(managementGroupId, deploymentStackName, deploymentStack, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the Deployment stacks within the specified Resource Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentStack> ListAtResourceGroupNext(this IDeploymentStacksOperations operations, string nextPageLink)
        {
                return ((IDeploymentStacksOperations)operations).ListAtResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified Resource Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentStack>> ListAtResourceGroupNextAsync(this IDeploymentStacksOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the Deployment stacks within the specified Subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentStack> ListAtSubscriptionNext(this IDeploymentStacksOperations operations, string nextPageLink)
        {
                return ((IDeploymentStacksOperations)operations).ListAtSubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified Subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentStack>> ListAtSubscriptionNextAsync(this IDeploymentStacksOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtSubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the Deployment stacks within the specified Management Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentStack> ListAtManagementGroupNext(this IDeploymentStacksOperations operations, string nextPageLink)
        {
                return ((IDeploymentStacksOperations)operations).ListAtManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the Deployment stacks within the specified Management Group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentStack>> ListAtManagementGroupNextAsync(this IDeploymentStacksOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
