// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for DeploymentsOperations
    /// </summary>
    public static partial class DeploymentsOperationsExtensions
    {
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void DeleteAtScope(this IDeploymentsOperations operations, string scope, string deploymentName)
        {
                ((IDeploymentsOperations)operations).DeleteAtScopeAsync(scope, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtScopeWithHttpMessagesAsync(scope, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static bool CheckExistenceAtScope(this IDeploymentsOperations operations, string scope, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).CheckExistenceAtScopeAsync(scope, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckExistenceAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckExistenceAtScopeWithHttpMessagesAsync(scope, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended CreateOrUpdateAtScope(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).CreateOrUpdateAtScopeAsync(scope, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> CreateOrUpdateAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtScopeWithHttpMessagesAsync(scope, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended GetAtScope(this IDeploymentsOperations operations, string scope, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).GetAtScopeAsync(scope, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> GetAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtScopeWithHttpMessagesAsync(scope, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void CancelAtScope(this IDeploymentsOperations operations, string scope, string deploymentName)
        {
                ((IDeploymentsOperations)operations).CancelAtScopeAsync(scope, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CancelAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CancelAtScopeWithHttpMessagesAsync(scope, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult ValidateAtScope(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).ValidateAtScopeAsync(scope, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> ValidateAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateAtScopeWithHttpMessagesAsync(scope, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExportResult ExportTemplateAtScope(this IDeploymentsOperations operations, string scope, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).ExportTemplateAtScopeAsync(scope, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExportResult> ExportTemplateAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtScopeWithHttpMessagesAsync(scope, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments at the given scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtScope(this IDeploymentsOperations operations, string scope, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>))
        {
                return ((IDeploymentsOperations)operations).ListAtScopeAsync(scope, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments at the given scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtScopeAsync(this IDeploymentsOperations operations, string scope, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtScopeWithHttpMessagesAsync(scope, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void DeleteAtTenantScope(this IDeploymentsOperations operations, string deploymentName)
        {
                ((IDeploymentsOperations)operations).DeleteAtTenantScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtTenantScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static bool CheckExistenceAtTenantScope(this IDeploymentsOperations operations, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).CheckExistenceAtTenantScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckExistenceAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckExistenceAtTenantScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended CreateOrUpdateAtTenantScope(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).CreateOrUpdateAtTenantScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> CreateOrUpdateAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtTenantScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended GetAtTenantScope(this IDeploymentsOperations operations, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).GetAtTenantScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> GetAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtTenantScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void CancelAtTenantScope(this IDeploymentsOperations operations, string deploymentName)
        {
                ((IDeploymentsOperations)operations).CancelAtTenantScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CancelAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CancelAtTenantScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult ValidateAtTenantScope(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).ValidateAtTenantScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> ValidateAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateAtTenantScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the tenant group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult WhatIfAtTenantScope(this IDeploymentsOperations operations, string deploymentName, ScopedDeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).WhatIfAtTenantScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the tenant group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> WhatIfAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, ScopedDeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.WhatIfAtTenantScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExportResult ExportTemplateAtTenantScope(this IDeploymentsOperations operations, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).ExportTemplateAtTenantScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExportResult> ExportTemplateAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtTenantScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments at the tenant scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtTenantScope(this IDeploymentsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>))
        {
                return ((IDeploymentsOperations)operations).ListAtTenantScopeAsync(odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments at the tenant scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtTenantScopeAsync(this IDeploymentsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtTenantScopeWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void DeleteAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName)
        {
                ((IDeploymentsOperations)operations).DeleteAtManagementGroupScopeAsync(groupId, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static bool CheckExistenceAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).CheckExistenceAtManagementGroupScopeAsync(groupId, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckExistenceAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckExistenceAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended CreateOrUpdateAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).CreateOrUpdateAtManagementGroupScopeAsync(groupId, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> CreateOrUpdateAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended GetAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).GetAtManagementGroupScopeAsync(groupId, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> GetAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void CancelAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName)
        {
                ((IDeploymentsOperations)operations).CancelAtManagementGroupScopeAsync(groupId, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CancelAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CancelAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult ValidateAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).ValidateAtManagementGroupScopeAsync(groupId, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> ValidateAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult WhatIfAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).WhatIfAtManagementGroupScopeAsync(groupId, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> WhatIfAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.WhatIfAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExportResult ExportTemplateAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).ExportTemplateAtManagementGroupScopeAsync(groupId, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExportResult> ExportTemplateAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments for a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>))
        {
                return ((IDeploymentsOperations)operations).ListAtManagementGroupScopeAsync(groupId, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments for a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtManagementGroupScopeWithHttpMessagesAsync(groupId, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void DeleteAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName)
        {
                ((IDeploymentsOperations)operations).DeleteAtSubscriptionScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static bool CheckExistenceAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).CheckExistenceAtSubscriptionScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckExistenceAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckExistenceAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended CreateOrUpdateAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).CreateOrUpdateAtSubscriptionScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> CreateOrUpdateAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended GetAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).GetAtSubscriptionScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> GetAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void CancelAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName)
        {
                ((IDeploymentsOperations)operations).CancelAtSubscriptionScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resources partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CancelAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CancelAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult ValidateAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).ValidateAtSubscriptionScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> ValidateAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult WhatIfAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName, DeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).WhatIfAtSubscriptionScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> WhatIfAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, DeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.WhatIfAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExportResult ExportTemplateAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).ExportTemplateAtSubscriptionScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExportResult> ExportTemplateAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtSubscriptionScope(this IDeploymentsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>))
        {
                return ((IDeploymentsOperations)operations).ListAtSubscriptionScopeAsync(odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtSubscriptionScopeAsync(this IDeploymentsOperations operations, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtSubscriptionScopeWithHttpMessagesAsync(odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations.
        /// Deleting a template deployment does not affect the state of the resource
        /// group. This is an asynchronous operation that returns a status of 202 until
        /// the template deployment is successfully deleted. The Location response
        /// header contains the URI that is used to obtain the status of the process.
        /// While the process is running, a call to the URI in the Location header
        /// returns a status of 202. When the process finishes, the URI in the Location
        /// header returns a status of 204 on success. If the asynchronous request
        /// failed, the URI in the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployment to delete. The name is
        /// case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void Delete(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName)
        {
                ((IDeploymentsOperations)operations).DeleteAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations.
        /// Deleting a template deployment does not affect the state of the resource
        /// group. This is an asynchronous operation that returns a status of 202 until
        /// the template deployment is successfully deleted. The Location response
        /// header contains the URI that is used to obtain the status of the process.
        /// While the process is running, a call to the URI in the Location header
        /// returns a status of 202. When the process finishes, the URI in the Location
        /// header returns a status of 204 on success. If the asynchronous request
        /// failed, the URI in the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployment to delete. The name is
        /// case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployment to check. The name is
        /// case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static bool CheckExistence(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).CheckExistenceAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks whether the deployment exists.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployment to check. The name is
        /// case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<bool> CheckExistenceAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckExistenceWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group to deploy the resources to. The name is case
        /// insensitive. The resource group must already exist.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended CreateOrUpdate(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).CreateOrUpdateAsync(resourceGroupName, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group to deploy the resources to. The name is case
        /// insensitive. The resource group must already exist.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> CreateOrUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended Get(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).GetAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> GetAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resource group partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void Cancel(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName)
        {
                ((IDeploymentsOperations)operations).CancelAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can cancel a deployment only if the provisioningState is Accepted or
        /// Running. After the deployment is canceled, the provisioningState is set to
        /// Canceled. Canceling a template deployment stops the currently running
        /// template deployment and leaves the resource group partially deployed.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CancelAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CancelWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult Validate(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).ValidateAsync(resourceGroupName, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> ValidateAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ValidateWithHttpMessagesAsync(resourceGroupName, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult WhatIf(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, DeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).WhatIfAsync(resourceGroupName, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> WhatIfAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, DeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.WhatIfWithHttpMessagesAsync(resourceGroupName, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExportResult ExportTemplate(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName)
        {
                return ((IDeploymentsOperations)operations).ExportTemplateAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Exports the template used for specified deployment.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExportResult> ExportTemplateAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExportTemplateWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments for a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployments to get. The name is
        /// case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListByResourceGroup(this IDeploymentsOperations operations, string resourceGroupName, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>))
        {
                return ((IDeploymentsOperations)operations).ListByResourceGroupAsync(resourceGroupName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments for a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployments to get. The name is
        /// case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListByResourceGroupAsync(this IDeploymentsOperations operations, string resourceGroupName, Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<DeploymentExtendedFilter>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Calculate the hash of the given template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static TemplateHashResult CalculateTemplateHash(this IDeploymentsOperations operations, object template)
        {
                return ((IDeploymentsOperations)operations).CalculateTemplateHashAsync(template).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Calculate the hash of the given template.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TemplateHashResult> CalculateTemplateHashAsync(this IDeploymentsOperations operations, object template, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CalculateTemplateHashWithHttpMessagesAsync(template, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void BeginDeleteAtScope(this IDeploymentsOperations operations, string scope, string deploymentName)
        {
                ((IDeploymentsOperations)operations).BeginDeleteAtScopeAsync(scope, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteAtScopeWithHttpMessagesAsync(scope, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended BeginCreateOrUpdateAtScope(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginCreateOrUpdateAtScopeAsync(scope, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> BeginCreateOrUpdateAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtScopeWithHttpMessagesAsync(scope, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult BeginValidateAtScope(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginValidateAtScopeAsync(scope, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> BeginValidateAtScopeAsync(this IDeploymentsOperations operations, string scope, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateAtScopeWithHttpMessagesAsync(scope, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void BeginDeleteAtTenantScope(this IDeploymentsOperations operations, string deploymentName)
        {
                ((IDeploymentsOperations)operations).BeginDeleteAtTenantScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteAtTenantScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended BeginCreateOrUpdateAtTenantScope(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginCreateOrUpdateAtTenantScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> BeginCreateOrUpdateAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtTenantScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult BeginValidateAtTenantScope(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginValidateAtTenantScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> BeginValidateAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateAtTenantScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the tenant group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult BeginWhatIfAtTenantScope(this IDeploymentsOperations operations, string deploymentName, ScopedDeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).BeginWhatIfAtTenantScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the tenant group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> BeginWhatIfAtTenantScopeAsync(this IDeploymentsOperations operations, string deploymentName, ScopedDeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginWhatIfAtTenantScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void BeginDeleteAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName)
        {
                ((IDeploymentsOperations)operations).BeginDeleteAtManagementGroupScopeAsync(groupId, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended BeginCreateOrUpdateAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginCreateOrUpdateAtManagementGroupScopeAsync(groupId, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> BeginCreateOrUpdateAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult BeginValidateAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginValidateAtManagementGroupScopeAsync(groupId, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> BeginValidateAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult BeginWhatIfAtManagementGroupScope(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).BeginWhatIfAtManagementGroupScopeAsync(groupId, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> BeginWhatIfAtManagementGroupScopeAsync(this IDeploymentsOperations operations, string groupId, string deploymentName, ScopedDeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginWhatIfAtManagementGroupScopeWithHttpMessagesAsync(groupId, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void BeginDeleteAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName)
        {
                ((IDeploymentsOperations)operations).BeginDeleteAtSubscriptionScopeAsync(deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations. This is
        /// an asynchronous operation that returns a status of 202 until the template
        /// deployment is successfully deleted. The Location response header contains
        /// the URI that is used to obtain the status of the process. While the process
        /// is running, a call to the URI in the Location header returns a status of
        /// 202. When the process finishes, the URI in the Location header returns a
        /// status of 204 on success. If the asynchronous request failed, the URI in
        /// the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended BeginCreateOrUpdateAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginCreateOrUpdateAtSubscriptionScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> BeginCreateOrUpdateAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult BeginValidateAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginValidateAtSubscriptionScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> BeginValidateAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult BeginWhatIfAtSubscriptionScope(this IDeploymentsOperations operations, string deploymentName, DeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).BeginWhatIfAtSubscriptionScopeAsync(deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> BeginWhatIfAtSubscriptionScopeAsync(this IDeploymentsOperations operations, string deploymentName, DeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginWhatIfAtSubscriptionScopeWithHttpMessagesAsync(deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations.
        /// Deleting a template deployment does not affect the state of the resource
        /// group. This is an asynchronous operation that returns a status of 202 until
        /// the template deployment is successfully deleted. The Location response
        /// header contains the URI that is used to obtain the status of the process.
        /// While the process is running, a call to the URI in the Location header
        /// returns a status of 202. When the process finishes, the URI in the Location
        /// header returns a status of 204 on success. If the asynchronous request
        /// failed, the URI in the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployment to delete. The name is
        /// case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static void BeginDelete(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName)
        {
                ((IDeploymentsOperations)operations).BeginDeleteAsync(resourceGroupName, deploymentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// A template deployment that is currently running cannot be deleted. Deleting
        /// a template deployment removes the associated deployment operations.
        /// Deleting a template deployment does not affect the state of the resource
        /// group. This is an asynchronous operation that returns a status of 202 until
        /// the template deployment is successfully deleted. The Location response
        /// header contains the URI that is used to obtain the status of the process.
        /// While the process is running, a call to the URI in the Location header
        /// returns a status of 202. When the process finishes, the URI in the Location
        /// header returns a status of 204 on success. If the asynchronous request
        /// failed, the URI in the Location header returns an error-level status code.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group with the deployment to delete. The name is
        /// case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, deploymentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group to deploy the resources to. The name is case
        /// insensitive. The resource group must already exist.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentExtended BeginCreateOrUpdate(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// You can provide the template and parameters directly in the request or link
        /// to JSON files.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group to deploy the resources to. The name is case
        /// insensitive. The resource group must already exist.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentExtended> BeginCreateOrUpdateAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static DeploymentValidateResult BeginValidate(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters)
        {
                return ((IDeploymentsOperations)operations).BeginValidateAsync(resourceGroupName, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Validates whether the specified template is syntactically correct and will
        /// be accepted by Azure Resource Manager..
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeploymentValidateResult> BeginValidateAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, Deployment parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginValidateWithHttpMessagesAsync(resourceGroupName, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        public static WhatIfOperationResult BeginWhatIf(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, DeploymentWhatIf parameters)
        {
                return ((IDeploymentsOperations)operations).BeginWhatIfAsync(resourceGroupName, deploymentName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns changes that will be made by the deployment if executed at the
        /// scope of the resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group the template will be deployed to. The name
        /// is case insensitive.
        /// </param>
        /// <param name='deploymentName'>
        /// The name of the deployment.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WhatIfOperationResult> BeginWhatIfAsync(this IDeploymentsOperations operations, string resourceGroupName, string deploymentName, DeploymentWhatIf parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginWhatIfWithHttpMessagesAsync(resourceGroupName, deploymentName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments at the given scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtScopeNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListAtScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments at the given scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtScopeNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments at the tenant scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtTenantScopeNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListAtTenantScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments at the tenant scope.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtTenantScopeNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtTenantScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments for a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtManagementGroupScopeNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListAtManagementGroupScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments for a management group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtManagementGroupScopeNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtManagementGroupScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListAtSubscriptionScopeNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListAtSubscriptionScopeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments for a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListAtSubscriptionScopeNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAtSubscriptionScopeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all the deployments for a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<DeploymentExtended> ListByResourceGroupNext(this IDeploymentsOperations operations, string nextPageLink)
        {
                return ((IDeploymentsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all the deployments for a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<DeploymentExtended>> ListByResourceGroupNextAsync(this IDeploymentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
