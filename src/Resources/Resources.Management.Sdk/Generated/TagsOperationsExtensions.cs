// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for TagsOperations
    /// </summary>
    public static partial class TagsOperationsExtensions
    {
        /// <summary>
        /// This operation allows deleting a value from the list of predefined values
        /// for an existing predefined tag name. The value being deleted must not be in
        /// use as a tag value for the given tag name for any resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='tagValue'>
        /// The value of the tag to delete.
        /// </param>
        public static void DeleteValue(this ITagsOperations operations, string tagName, string tagValue)
        {
                ((ITagsOperations)operations).DeleteValueAsync(tagName, tagValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation allows deleting a value from the list of predefined values
        /// for an existing predefined tag name. The value being deleted must not be in
        /// use as a tag value for the given tag name for any resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='tagValue'>
        /// The value of the tag to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteValueAsync(this ITagsOperations operations, string tagName, string tagValue, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteValueWithHttpMessagesAsync(tagName, tagValue, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation allows adding a value to the list of predefined values for
        /// an existing predefined tag name. A tag value can have a maximum of 256
        /// characters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='tagValue'>
        /// The value of the tag to create.
        /// </param>
        public static TagValue CreateOrUpdateValue(this ITagsOperations operations, string tagName, string tagValue)
        {
                return ((ITagsOperations)operations).CreateOrUpdateValueAsync(tagName, tagValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation allows adding a value to the list of predefined values for
        /// an existing predefined tag name. A tag value can have a maximum of 256
        /// characters.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='tagValue'>
        /// The value of the tag to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagValue> CreateOrUpdateValueAsync(this ITagsOperations operations, string tagName, string tagValue, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateValueWithHttpMessagesAsync(tagName, tagValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation allows adding a name to the list of predefined tag names for
        /// the given subscription. A tag name can have a maximum of 512 characters and
        /// is case-insensitive. Tag names cannot have the following prefixes which are
        /// reserved for Azure use: &#39;microsoft&#39;, &#39;azure&#39;, &#39;windows&#39;.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag to create.
        /// </param>
        public static TagDetails CreateOrUpdate(this ITagsOperations operations, string tagName)
        {
                return ((ITagsOperations)operations).CreateOrUpdateAsync(tagName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation allows adding a name to the list of predefined tag names for
        /// the given subscription. A tag name can have a maximum of 512 characters and
        /// is case-insensitive. Tag names cannot have the following prefixes which are
        /// reserved for Azure use: &#39;microsoft&#39;, &#39;azure&#39;, &#39;windows&#39;.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagDetails> CreateOrUpdateAsync(this ITagsOperations operations, string tagName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(tagName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation allows deleting a name from the list of predefined tag names
        /// for the given subscription. The name being deleted must not be in use as a
        /// tag name for any resource. All predefined values for the given name must
        /// have already been deleted.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        public static void Delete(this ITagsOperations operations, string tagName)
        {
                ((ITagsOperations)operations).DeleteAsync(tagName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation allows deleting a name from the list of predefined tag names
        /// for the given subscription. The name being deleted must not be in use as a
        /// tag name for any resource. All predefined values for the given name must
        /// have already been deleted.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='tagName'>
        /// The name of the tag.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ITagsOperations operations, string tagName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(tagName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagDetails> List(this ITagsOperations operations)
        {
                return ((ITagsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagDetails>> ListAsync(this ITagsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation allows adding or replacing the entire set of tags on the
        /// specified resource or subscription. The specified entity can have a maximum
        /// of 50 tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        public static TagsResource CreateOrUpdateAtScope(this ITagsOperations operations, string scope, TagsResource parameters)
        {
                return ((ITagsOperations)operations).CreateOrUpdateAtScopeAsync(scope, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation allows adding or replacing the entire set of tags on the
        /// specified resource or subscription. The specified entity can have a maximum
        /// of 50 tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagsResource> CreateOrUpdateAtScopeAsync(this ITagsOperations operations, string scope, TagsResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtScopeWithHttpMessagesAsync(scope, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation allows replacing, merging or selectively deleting tags on
        /// the specified resource or subscription. The specified entity can have a
        /// maximum of 50 tags at the end of the operation. The &#39;replace&#39; option
        /// replaces the entire set of existing tags with a new set. The &#39;merge&#39; option
        /// allows adding tags with new names and updating the values of tags with
        /// existing names. The &#39;delete&#39; option allows selectively deleting tags based
        /// on given names or name/value pairs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        public static TagsResource UpdateAtScope(this ITagsOperations operations, string scope, TagsPatchResource parameters)
        {
                return ((ITagsOperations)operations).UpdateAtScopeAsync(scope, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation allows replacing, merging or selectively deleting tags on
        /// the specified resource or subscription. The specified entity can have a
        /// maximum of 50 tags at the end of the operation. The &#39;replace&#39; option
        /// replaces the entire set of existing tags with a new set. The &#39;merge&#39; option
        /// allows adding tags with new names and updating the values of tags with
        /// existing names. The &#39;delete&#39; option allows selectively deleting tags based
        /// on given names or name/value pairs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagsResource> UpdateAtScopeAsync(this ITagsOperations operations, string scope, TagsPatchResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateAtScopeWithHttpMessagesAsync(scope, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the entire set of tags on a resource or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        public static TagsResource GetAtScope(this ITagsOperations operations, string scope)
        {
                return ((ITagsOperations)operations).GetAtScopeAsync(scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the entire set of tags on a resource or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<TagsResource> GetAtScopeAsync(this ITagsOperations operations, string scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtScopeWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the entire set of tags on a resource or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        public static void DeleteAtScope(this ITagsOperations operations, string scope)
        {
                ((ITagsOperations)operations).DeleteAtScopeAsync(scope).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the entire set of tags on a resource or subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='scope'>
        /// The resource scope.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtScopeAsync(this ITagsOperations operations, string scope, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtScopeWithHttpMessagesAsync(scope, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<TagDetails> ListNext(this ITagsOperations operations, string nextPageLink)
        {
                return ((ITagsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation performs a union of predefined tags, resource tags, resource
        /// group tags and subscription tags, and returns a summary of usage for each
        /// tag name and value under the given subscription. In case of a large number
        /// of tags, this operation may return a previously cached result.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<TagDetails>> ListNextAsync(this ITagsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
