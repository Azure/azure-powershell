// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PolicySetDefinitionsOperations
    /// </summary>
    public static partial class PolicySetDefinitionsOperationsExtensions
    {
        /// <summary>
        /// This operation creates or updates a policy set definition in the given
        /// subscription with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        public static PolicySetDefinition CreateOrUpdate(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, PolicySetDefinition parameters)
        {
                return ((IPolicySetDefinitionsOperations)operations).CreateOrUpdateAsync(policySetDefinitionName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation creates or updates a policy set definition in the given
        /// subscription with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicySetDefinition> CreateOrUpdateAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, PolicySetDefinition parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(policySetDefinitionName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation deletes the policy set definition in the given subscription
        /// with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        public static void Delete(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName)
        {
                ((IPolicySetDefinitionsOperations)operations).DeleteAsync(policySetDefinitionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation deletes the policy set definition in the given subscription
        /// with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(policySetDefinitionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation retrieves the policy set definition in the given
        /// subscription with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        public static PolicySetDefinition Get(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName)
        {
                return ((IPolicySetDefinitionsOperations)operations).GetAsync(policySetDefinitionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the policy set definition in the given
        /// subscription with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicySetDefinition> GetAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(policySetDefinitionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves the built-in policy set definition with the given
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        public static PolicySetDefinition GetBuiltIn(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName)
        {
                return ((IPolicySetDefinitionsOperations)operations).GetBuiltInAsync(policySetDefinitionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the built-in policy set definition with the given
        /// name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicySetDefinition> GetBuiltInAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBuiltInWithHttpMessagesAsync(policySetDefinitionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicySetDefinition> List(this IPolicySetDefinitionsOperations operations, string filter = default(string), int? top = default(int?))
        {
                return ((IPolicySetDefinitionsOperations)operations).ListAsync(filter, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicySetDefinition>> ListAsync(this IPolicySetDefinitionsOperations operations, string filter = default(string), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(filter, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicySetDefinition> ListBuiltIn(this IPolicySetDefinitionsOperations operations, string filter = default(string), int? top = default(int?))
        {
                return ((IPolicySetDefinitionsOperations)operations).ListBuiltInAsync(filter, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicySetDefinition>> ListBuiltInAsync(this IPolicySetDefinitionsOperations operations, string filter = default(string), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBuiltInWithHttpMessagesAsync(filter, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation creates or updates a policy set definition in the given
        /// management group with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        public static PolicySetDefinition CreateOrUpdateAtManagementGroup(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, string managementGroupId, PolicySetDefinition parameters)
        {
                return ((IPolicySetDefinitionsOperations)operations).CreateOrUpdateAtManagementGroupAsync(policySetDefinitionName, managementGroupId, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation creates or updates a policy set definition in the given
        /// management group with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to create.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicySetDefinition> CreateOrUpdateAtManagementGroupAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, string managementGroupId, PolicySetDefinition parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateAtManagementGroupWithHttpMessagesAsync(policySetDefinitionName, managementGroupId, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation deletes the policy set definition in the given management
        /// group with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        public static void DeleteAtManagementGroup(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, string managementGroupId)
        {
                ((IPolicySetDefinitionsOperations)operations).DeleteAtManagementGroupAsync(policySetDefinitionName, managementGroupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation deletes the policy set definition in the given management
        /// group with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to delete.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAtManagementGroupAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, string managementGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteAtManagementGroupWithHttpMessagesAsync(policySetDefinitionName, managementGroupId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// This operation retrieves the policy set definition in the given management
        /// group with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        public static PolicySetDefinition GetAtManagementGroup(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, string managementGroupId)
        {
                return ((IPolicySetDefinitionsOperations)operations).GetAtManagementGroupAsync(policySetDefinitionName, managementGroupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves the policy set definition in the given management
        /// group with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='policySetDefinitionName'>
        /// The name of the policy set definition to get.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PolicySetDefinition> GetAtManagementGroupAsync(this IPolicySetDefinitionsOperations operations, string policySetDefinitionName, string managementGroupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetAtManagementGroupWithHttpMessagesAsync(policySetDefinitionName, managementGroupId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicySetDefinition> ListByManagementGroup(this IPolicySetDefinitionsOperations operations, string managementGroupId, string filter = default(string), int? top = default(int?))
        {
                return ((IPolicySetDefinitionsOperations)operations).ListByManagementGroupAsync(managementGroupId, filter, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy set definitions that at the given scope. If $filter=&#39;policyType -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose type match the {value}. Possible policyType values are
        /// NotSpecified, BuiltIn, Custom, and Static. If $filter=&#39;category -eq
        /// {value}&#39; is provided, the returned list only includes all policy set
        /// definitions whose category match the {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicySetDefinition>> ListByManagementGroupAsync(this IPolicySetDefinitionsOperations operations, string managementGroupId, string filter = default(string), int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByManagementGroupWithHttpMessagesAsync(managementGroupId, filter, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicySetDefinition> ListNext(this IPolicySetDefinitionsOperations operations, string nextPageLink)
        {
                return ((IPolicySetDefinitionsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given subscription that match the optional given $filter. Valid values for
        /// $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the subscription, including those
        /// that apply directly or from management groups that contain the given
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy set definitions that at the given subscription. If
        /// $filter=&#39;policyType -eq {value}&#39; is provided, the returned list only
        /// includes all policy set definitions whose type match the {value}. Possible
        /// policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicySetDefinition>> ListNextAsync(this IPolicySetDefinitionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicySetDefinition> ListBuiltInNext(this IPolicySetDefinitionsOperations operations, string nextPageLink)
        {
                return ((IPolicySetDefinitionsOperations)operations).ListBuiltInNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the built-in policy set definitions
        /// that match the optional given $filter. If $filter=&#39;category -eq {value}&#39; is
        /// provided, the returned list only includes all built-in policy set
        /// definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicySetDefinition>> ListBuiltInNextAsync(this IPolicySetDefinitionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBuiltInNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PolicySetDefinition> ListByManagementGroupNext(this IPolicySetDefinitionsOperations operations, string nextPageLink)
        {
                return ((IPolicySetDefinitionsOperations)operations).ListByManagementGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// This operation retrieves a list of all the policy set definitions in a
        /// given management group that match the optional given $filter. Valid values
        /// for $filter are: &#39;atExactScope()&#39;, &#39;policyType -eq {value}&#39; or &#39;category eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy set definitions associated with the management group, including
        /// those that apply directly or from management groups that contain the given
        /// management group. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy set definitions that at the given management
        /// group. If $filter=&#39;policyType -eq {value}&#39; is provided, the returned list
        /// only includes all policy set definitions whose type match the {value}.
        /// Possible policyType values are NotSpecified, BuiltIn and Custom. If
        /// $filter=&#39;category -eq {value}&#39; is provided, the returned list only includes
        /// all policy set definitions whose category match the {value}.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PolicySetDefinition>> ListByManagementGroupNextAsync(this IPolicySetDefinitionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByManagementGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
