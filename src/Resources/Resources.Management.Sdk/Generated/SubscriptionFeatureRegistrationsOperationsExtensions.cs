// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SubscriptionFeatureRegistrationsOperations
    /// </summary>
    public static partial class SubscriptionFeatureRegistrationsOperationsExtensions
    {
        /// <summary>
        /// Returns a feature registration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='featureName'>
        /// The feature name.
        /// </param>
        public static SubscriptionFeatureRegistration Get(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, string featureName)
        {
                return ((ISubscriptionFeatureRegistrationsOperations)operations).GetAsync(providerNamespace, featureName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a feature registration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='featureName'>
        /// The feature name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionFeatureRegistration> GetAsync(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, string featureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(providerNamespace, featureName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a feature registration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='featureName'>
        /// The feature name.
        /// </param>
        public static SubscriptionFeatureRegistration CreateOrUpdate(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, string featureName, SubscriptionFeatureRegistration subscriptionFeatureRegistrationType = default(SubscriptionFeatureRegistration))
        {
                return ((ISubscriptionFeatureRegistrationsOperations)operations).CreateOrUpdateAsync(providerNamespace, featureName, subscriptionFeatureRegistrationType).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a feature registration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='featureName'>
        /// The feature name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubscriptionFeatureRegistration> CreateOrUpdateAsync(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, string featureName, SubscriptionFeatureRegistration subscriptionFeatureRegistrationType = default(SubscriptionFeatureRegistration), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(providerNamespace, featureName, subscriptionFeatureRegistrationType, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a feature registration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='featureName'>
        /// The feature name.
        /// </param>
        public static void Delete(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, string featureName)
        {
                ((ISubscriptionFeatureRegistrationsOperations)operations).DeleteAsync(providerNamespace, featureName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a feature registration
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='featureName'>
        /// The feature name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, string featureName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(providerNamespace, featureName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Returns subscription feature registrations for given subscription and
        /// provider namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration> ListBySubscription(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace)
        {
                return ((ISubscriptionFeatureRegistrationsOperations)operations).ListBySubscriptionAsync(providerNamespace).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns subscription feature registrations for given subscription and
        /// provider namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerNamespace'>
        /// The provider namespace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration>> ListBySubscriptionAsync(this ISubscriptionFeatureRegistrationsOperations operations, string providerNamespace, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(providerNamespace, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns subscription feature registrations for given subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration> ListAllBySubscription(this ISubscriptionFeatureRegistrationsOperations operations)
        {
                return ((ISubscriptionFeatureRegistrationsOperations)operations).ListAllBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns subscription feature registrations for given subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration>> ListAllBySubscriptionAsync(this ISubscriptionFeatureRegistrationsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAllBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns subscription feature registrations for given subscription and
        /// provider namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration> ListBySubscriptionNext(this ISubscriptionFeatureRegistrationsOperations operations, string nextPageLink)
        {
                return ((ISubscriptionFeatureRegistrationsOperations)operations).ListBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns subscription feature registrations for given subscription and
        /// provider namespace.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration>> ListBySubscriptionNextAsync(this ISubscriptionFeatureRegistrationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns subscription feature registrations for given subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration> ListAllBySubscriptionNext(this ISubscriptionFeatureRegistrationsOperations operations, string nextPageLink)
        {
                return ((ISubscriptionFeatureRegistrationsOperations)operations).ListAllBySubscriptionNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns subscription feature registrations for given subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubscriptionFeatureRegistration>> ListAllBySubscriptionNextAsync(this ISubscriptionFeatureRegistrationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAllBySubscriptionNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
