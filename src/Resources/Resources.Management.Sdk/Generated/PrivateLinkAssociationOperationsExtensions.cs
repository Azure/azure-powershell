// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Resources
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateLinkAssociationOperations
    /// </summary>
    public static partial class PrivateLinkAssociationOperationsExtensions
    {
        /// <summary>
        /// Create a PrivateLinkAssociation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='plaId'>
        /// The ID of the PLA
        /// </param>
        public static PrivateLinkAssociation Put(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, PrivateLinkAssociationObject parameters)
        {
                return ((IPrivateLinkAssociationOperations)operations).PutAsync(groupId, plaId, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a PrivateLinkAssociation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='plaId'>
        /// The ID of the PLA
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkAssociation> PutAsync(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, PrivateLinkAssociationObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutWithHttpMessagesAsync(groupId, plaId, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a single private link association
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='plaId'>
        /// The ID of the PLA
        /// </param>
        public static PrivateLinkAssociation Get(this IPrivateLinkAssociationOperations operations, string groupId, string plaId)
        {
                return ((IPrivateLinkAssociationOperations)operations).GetAsync(groupId, plaId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a single private link association
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='plaId'>
        /// The ID of the PLA
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkAssociation> GetAsync(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(groupId, plaId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete a PrivateLinkAssociation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='plaId'>
        /// The ID of the PLA
        /// </param>
        public static void Delete(this IPrivateLinkAssociationOperations operations, string groupId, string plaId)
        {
                ((IPrivateLinkAssociationOperations)operations).DeleteAsync(groupId, plaId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a PrivateLinkAssociation
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='plaId'>
        /// The ID of the PLA
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPrivateLinkAssociationOperations operations, string groupId, string plaId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(groupId, plaId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get a private link association for a management group scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        public static PrivateLinkAssociationGetResult List(this IPrivateLinkAssociationOperations operations, string groupId)
        {
                return ((IPrivateLinkAssociationOperations)operations).ListAsync(groupId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a private link association for a management group scope
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupId'>
        /// The management group ID.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkAssociationGetResult> ListAsync(this IPrivateLinkAssociationOperations operations, string groupId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(groupId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
