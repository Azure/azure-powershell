// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// PolicyAssignmentsOperations operations.
    /// </summary>
    public partial interface IPolicyAssignmentsOperations
    {
        /// <summary>
        /// This operation deletes a policy assignment, given its name and the scope it
        /// was created in. The scope of a policy assignment is the part of its ID
        /// preceding
        /// &#39;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// </summary>
        /// <remarks>
        /// This operation deletes a policy assignment, given its name and the scope it
        /// was created in. The scope of a policy assignment is the part of its ID
        /// preceding
        /// &#39;/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the policy assignment. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyAssignmentName'>
        /// The name of the policy assignment to delete.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> DeleteWithHttpMessagesAsync(string scope, string policyAssignmentName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation creates or updates a policy assignment with the given scope
        /// and name. Policy assignments apply to all resources contained within their
        /// scope. For example, when you assign a policy at resource group scope, that
        /// policy applies to all resources in the group.
        /// </summary>
        /// <remarks>
        /// This operation creates or updates a policy assignment with the given scope
        /// and name. Policy assignments apply to all resources contained within their
        /// scope. For example, when you assign a policy at resource group scope, that
        /// policy applies to all resources in the group.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the policy assignment. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyAssignmentName'>
        /// The name of the policy assignment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for the policy assignment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> CreateWithHttpMessagesAsync(string scope, string policyAssignmentName, PolicyAssignment parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves a single policy assignment, given its name and the
        /// scope it was created at.
        /// </summary>
        /// <remarks>
        /// This operation retrieves a single policy assignment, given its name and the
        /// scope it was created at.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the policy assignment. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyAssignmentName'>
        /// The name of the policy assignment to get.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> GetWithHttpMessagesAsync(string scope, string policyAssignmentName, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation updates a policy assignment with the given scope and name.
        /// Policy assignments apply to all resources contained within their scope. For
        /// example, when you assign a policy at resource group scope, that policy
        /// applies to all resources in the group.
        /// </summary>
        /// <remarks>
        /// This operation updates a policy assignment with the given scope and name.
        /// Policy assignments apply to all resources contained within their scope. For
        /// example, when you assign a policy at resource group scope, that policy
        /// applies to all resources in the group.
        /// </remarks>
        /// <param name='scope'>
        /// The scope of the policy assignment. Valid scopes are: management group
        /// (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// </param>
        /// <param name='policyAssignmentName'>
        /// The name of the policy assignment.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for policy assignment patch request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> UpdateWithHttpMessagesAsync(string scope, string policyAssignmentName, PolicyAssignmentUpdate parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;
        /// or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy assignments associated with the
        /// resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group. If $filter=atScope() is provided, the returned list
        /// includes all policy assignments that apply to the resource group, which is
        /// everything in the unfiltered list except those applied to resources
        /// contained within the resource group. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy assignments that at the resource
        /// group. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned
        /// list includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the resource group.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;
        /// or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy assignments associated with the
        /// resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group. If $filter=atScope() is provided, the returned list
        /// includes all policy assignments that apply to the resource group, which is
        /// everything in the unfiltered list except those applied to resources
        /// contained within the resource group. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy assignments that at the resource
        /// group. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned
        /// list includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the resource group.
        /// </remarks>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains policy assignments.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If $filter=atScope() is
        /// provided, the returned list only includes all policy assignments that apply
        /// to the scope, which is everything in the unfiltered list except those
        /// applied to sub scopes contained within the given scope. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy assignments that at the given scope. If $filter=policyDefinitionId
        /// eq &#39;{value}&#39; is provided, the returned list includes all policy assignments
        /// of the policy definition whose id is {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListForResourceGroupWithHttpMessagesAsync(string resourceGroupName, string filter = default(string), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, the unfiltered list includes all policy
        /// assignments associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. If $filter=atScope() is provided, the
        /// returned list includes all policy assignments that apply to the resource,
        /// which is everything in the unfiltered list except those applied to
        /// resources contained within the resource. If $filter=atExactScope() is
        /// provided, the returned list only includes all policy assignments that at
        /// the resource level. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided,
        /// the returned list includes all policy assignments of the policy definition
        /// whose id is {value} that apply to the resource. Three parameters plus the
        /// resource name are used to identify a specific resource. If the resource is
        /// not part of a parent resource (the more common case), the parent resource
        /// path should not be provided (or provided as &#39;&#39;). For example a web app
        /// could be specified as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} ==
        /// &#39;MyWebApp&#39;). If the resource is part of a parent resource, then all
        /// parameters should be provided. For example a virtual machine DNS name could
        /// be specified as ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;,
        /// {parentResourcePath} == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType}
        /// == &#39;domainNames&#39;, {resourceName} == &#39;MyComputerName&#39;). A convenient
        /// alternative to providing the namespace and type name separately is to
        /// provide both in the {resourceType} parameter, format:
        /// ({resourceProviderNamespace} == &#39;&#39;, {parentResourcePath} == &#39;&#39;,
        /// {resourceType} == &#39;Microsoft.Web/sites&#39;, {resourceName} == &#39;MyWebApp&#39;).
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, the unfiltered list includes all policy
        /// assignments associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. If $filter=atScope() is provided, the
        /// returned list includes all policy assignments that apply to the resource,
        /// which is everything in the unfiltered list except those applied to
        /// resources contained within the resource. If $filter=atExactScope() is
        /// provided, the returned list only includes all policy assignments that at
        /// the resource level. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided,
        /// the returned list includes all policy assignments of the policy definition
        /// whose id is {value} that apply to the resource. Three parameters plus the
        /// resource name are used to identify a specific resource. If the resource is
        /// not part of a parent resource (the more common case), the parent resource
        /// path should not be provided (or provided as &#39;&#39;). For example a web app
        /// could be specified as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} ==
        /// &#39;MyWebApp&#39;). If the resource is part of a parent resource, then all
        /// parameters should be provided. For example a virtual machine DNS name could
        /// be specified as ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;,
        /// {parentResourcePath} == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType}
        /// == &#39;domainNames&#39;, {resourceName} == &#39;MyComputerName&#39;). A convenient
        /// alternative to providing the namespace and type name separately is to
        /// provide both in the {resourceType} parameter, format:
        /// ({resourceProviderNamespace} == &#39;&#39;, {parentResourcePath} == &#39;&#39;,
        /// {resourceType} == &#39;Microsoft.Web/sites&#39;, {resourceName} == &#39;MyWebApp&#39;).
        /// </remarks>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group containing the resource.
        /// </param>
        /// <param name='resourceProviderNamespace'>
        /// The namespace of the resource provider. For example, the namespace of a
        /// virtual machine is Microsoft.Compute (from
        /// Microsoft.Compute/virtualMachines)
        /// </param>
        /// <param name='parentResourcePath'>
        /// The parent resource path. Use empty string if there is none.
        /// </param>
        /// <param name='resourceType'>
        /// The resource type name. For example the type name of a web app is &#39;sites&#39;
        /// (from Microsoft.Web/sites).
        /// </param>
        /// <param name='resourceName'>
        /// The name of the resource.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListForResourceWithHttpMessagesAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, Microsoft.Rest.Azure.OData.ODataQuery<PolicyAssignment> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<PolicyAssignment>), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter=atScope() is provided, the returned list includes all policy
        /// assignments that are assigned to the management group or the management
        /// group&#39;s ancestors. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy assignments that at the management group. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the management group.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter=atScope() is provided, the returned list includes all policy
        /// assignments that are assigned to the management group or the management
        /// group&#39;s ancestors. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy assignments that at the management group. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the management group.
        /// </remarks>
        /// <param name='managementGroupId'>
        /// The ID of the management group.
        /// </param>
        /// <param name='filter'>
        /// The filter to apply on the operation. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, no filtering is performed. If $filter=atScope() is
        /// provided, the returned list only includes all policy assignments that apply
        /// to the scope, which is everything in the unfiltered list except those
        /// applied to sub scopes contained within the given scope. If
        /// $filter=atExactScope() is provided, the returned list only includes all
        /// policy assignments that at the given scope. If $filter=policyDefinitionId
        /// eq &#39;{value}&#39; is provided, the returned list includes all policy assignments
        /// of the policy definition whose id is {value}.
        /// </param>
        /// <param name='top'>
        /// Maximum number of records to return. When the $top filter is not provided,
        /// it will return 500 records.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListForManagementGroupWithHttpMessagesAsync(string managementGroupId, string filter = default(string), int? top = default(int?), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy assignments associated with the subscription, including those that
        /// apply directly or from management groups that contain the given
        /// subscription, as well as any applied to objects contained within the
        /// subscription. If $filter=atScope() is provided, the returned list includes
        /// all policy assignments that apply to the subscription, which is everything
        /// in the unfiltered list except those applied to objects contained within the
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy assignments that at the subscription. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy assignments associated with the subscription, including those that
        /// apply directly or from management groups that contain the given
        /// subscription, as well as any applied to objects contained within the
        /// subscription. If $filter=atScope() is provided, the returned list includes
        /// all policy assignments that apply to the subscription, which is everything
        /// in the unfiltered list except those applied to objects contained within the
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy assignments that at the subscription. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value}.
        /// </remarks>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListWithHttpMessagesAsync(Microsoft.Rest.Azure.OData.ODataQuery<PolicyAssignment> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<PolicyAssignment>), System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation deletes the policy with the given ID. Policy assignment IDs
        /// have this format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid formats for {scope} are:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;
        /// (management group), &#39;/subscriptions/{subscriptionId}&#39; (subscription),
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;
        /// (resource group), or
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// (resource).
        /// </summary>
        /// <remarks>
        /// This operation deletes the policy with the given ID. Policy assignment IDs
        /// have this format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid formats for {scope} are:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;
        /// (management group), &#39;/subscriptions/{subscriptionId}&#39; (subscription),
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;
        /// (resource group), or
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;
        /// (resource).
        /// </remarks>
        /// <param name='policyAssignmentId'>
        /// The ID of the policy assignment to delete. Use the format
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> DeleteByIdWithHttpMessagesAsync(string policyAssignmentId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation creates or updates the policy assignment with the given ID.
        /// Policy assignments made on a scope apply to all resources contained in that
        /// scope. For example, when you assign a policy to a resource group that
        /// policy applies to all resources in the group. Policy assignment IDs have
        /// this format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
        /// </summary>
        /// <remarks>
        /// This operation creates or updates the policy assignment with the given ID.
        /// Policy assignments made on a scope apply to all resources contained in that
        /// scope. For example, when you assign a policy to a resource group that
        /// policy applies to all resources in the group. Policy assignment IDs have
        /// this format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
        /// </remarks>
        /// <param name='policyAssignmentId'>
        /// The ID of the policy assignment to create. Use the format
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for policy assignment.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> CreateByIdWithHttpMessagesAsync(string policyAssignmentId, PolicyAssignment parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The operation retrieves the policy assignment with the given ID. Policy
        /// assignment IDs have this format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
        /// </summary>
        /// <remarks>
        /// The operation retrieves the policy assignment with the given ID. Policy
        /// assignment IDs have this format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
        /// </remarks>
        /// <param name='policyAssignmentId'>
        /// The ID of the policy assignment to get. Use the format
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> GetByIdWithHttpMessagesAsync(string policyAssignmentId, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation updates the policy assignment with the given ID. Policy
        /// assignments made on a scope apply to all resources contained in that scope.
        /// For example, when you assign a policy to a resource group that policy
        /// applies to all resources in the group. Policy assignment IDs have this
        /// format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
        /// </summary>
        /// <remarks>
        /// This operation updates the policy assignment with the given ID. Policy
        /// assignments made on a scope apply to all resources contained in that scope.
        /// For example, when you assign a policy to a resource group that policy
        /// applies to all resources in the group. Policy assignment IDs have this
        /// format:
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// Valid scopes are: management group (format:
        /// &#39;/providers/Microsoft.Management/managementGroups/{managementGroup}&#39;),
        /// subscription (format: &#39;/subscriptions/{subscriptionId}&#39;), resource group
        /// (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}&#39;, or
        /// resource (format:
        /// &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}&#39;.
        /// </remarks>
        /// <param name='policyAssignmentId'>
        /// The ID of the policy assignment to update. Use the format
        /// &#39;{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}&#39;.
        /// </param>
        /// <param name='parameters'>
        /// Parameters for policy assignment patch request.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<PolicyAssignment>> UpdateByIdWithHttpMessagesAsync(string policyAssignmentId, PolicyAssignmentUpdate parameters, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;
        /// or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy assignments associated with the
        /// resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group. If $filter=atScope() is provided, the returned list
        /// includes all policy assignments that apply to the resource group, which is
        /// everything in the unfiltered list except those applied to resources
        /// contained within the resource group. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy assignments that at the resource
        /// group. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned
        /// list includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the resource group.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given resource group in the given subscription that match the optional
        /// given $filter. Valid values for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39;
        /// or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If $filter is not provided, the
        /// unfiltered list includes all policy assignments associated with the
        /// resource group, including those that apply directly or apply from
        /// containing scopes, as well as any applied to resources contained within the
        /// resource group. If $filter=atScope() is provided, the returned list
        /// includes all policy assignments that apply to the resource group, which is
        /// everything in the unfiltered list except those applied to resources
        /// contained within the resource group. If $filter=atExactScope() is provided,
        /// the returned list only includes all policy assignments that at the resource
        /// group. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned
        /// list includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the resource group.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListForResourceGroupNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, the unfiltered list includes all policy
        /// assignments associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. If $filter=atScope() is provided, the
        /// returned list includes all policy assignments that apply to the resource,
        /// which is everything in the unfiltered list except those applied to
        /// resources contained within the resource. If $filter=atExactScope() is
        /// provided, the returned list only includes all policy assignments that at
        /// the resource level. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided,
        /// the returned list includes all policy assignments of the policy definition
        /// whose id is {value} that apply to the resource. Three parameters plus the
        /// resource name are used to identify a specific resource. If the resource is
        /// not part of a parent resource (the more common case), the parent resource
        /// path should not be provided (or provided as &#39;&#39;). For example a web app
        /// could be specified as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} ==
        /// &#39;MyWebApp&#39;). If the resource is part of a parent resource, then all
        /// parameters should be provided. For example a virtual machine DNS name could
        /// be specified as ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;,
        /// {parentResourcePath} == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType}
        /// == &#39;domainNames&#39;, {resourceName} == &#39;MyComputerName&#39;). A convenient
        /// alternative to providing the namespace and type name separately is to
        /// provide both in the {resourceType} parameter, format:
        /// ({resourceProviderNamespace} == &#39;&#39;, {parentResourcePath} == &#39;&#39;,
        /// {resourceType} == &#39;Microsoft.Web/sites&#39;, {resourceName} == &#39;MyWebApp&#39;).
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments associated with
        /// the specified resource in the given resource group and subscription that
        /// match the optional given $filter. Valid values for $filter are:
        /// &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter is not provided, the unfiltered list includes all policy
        /// assignments associated with the resource, including those that apply
        /// directly or from all containing scopes, as well as any applied to resources
        /// contained within the resource. If $filter=atScope() is provided, the
        /// returned list includes all policy assignments that apply to the resource,
        /// which is everything in the unfiltered list except those applied to
        /// resources contained within the resource. If $filter=atExactScope() is
        /// provided, the returned list only includes all policy assignments that at
        /// the resource level. If $filter=policyDefinitionId eq &#39;{value}&#39; is provided,
        /// the returned list includes all policy assignments of the policy definition
        /// whose id is {value} that apply to the resource. Three parameters plus the
        /// resource name are used to identify a specific resource. If the resource is
        /// not part of a parent resource (the more common case), the parent resource
        /// path should not be provided (or provided as &#39;&#39;). For example a web app
        /// could be specified as ({resourceProviderNamespace} == &#39;Microsoft.Web&#39;,
        /// {parentResourcePath} == &#39;&#39;, {resourceType} == &#39;sites&#39;, {resourceName} ==
        /// &#39;MyWebApp&#39;). If the resource is part of a parent resource, then all
        /// parameters should be provided. For example a virtual machine DNS name could
        /// be specified as ({resourceProviderNamespace} == &#39;Microsoft.Compute&#39;,
        /// {parentResourcePath} == &#39;virtualMachines/MyVirtualMachine&#39;, {resourceType}
        /// == &#39;domainNames&#39;, {resourceName} == &#39;MyComputerName&#39;). A convenient
        /// alternative to providing the namespace and type name separately is to
        /// provide both in the {resourceType} parameter, format:
        /// ({resourceProviderNamespace} == &#39;&#39;, {parentResourcePath} == &#39;&#39;,
        /// {resourceType} == &#39;Microsoft.Web/sites&#39;, {resourceName} == &#39;MyWebApp&#39;).
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListForResourceNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter=atScope() is provided, the returned list includes all policy
        /// assignments that are assigned to the management group or the management
        /// group&#39;s ancestors. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy assignments that at the management group. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the management group.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments applicable to
        /// the management group that match the given $filter. Valid values for $filter
        /// are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq &#39;{value}&#39;&#39;. If
        /// $filter=atScope() is provided, the returned list includes all policy
        /// assignments that are assigned to the management group or the management
        /// group&#39;s ancestors. If $filter=atExactScope() is provided, the returned list
        /// only includes all policy assignments that at the management group. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value} that apply to the management group.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListForManagementGroupNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy assignments associated with the subscription, including those that
        /// apply directly or from management groups that contain the given
        /// subscription, as well as any applied to objects contained within the
        /// subscription. If $filter=atScope() is provided, the returned list includes
        /// all policy assignments that apply to the subscription, which is everything
        /// in the unfiltered list except those applied to objects contained within the
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy assignments that at the subscription. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value}.
        /// </summary>
        /// <remarks>
        /// This operation retrieves the list of all policy assignments associated with
        /// the given subscription that match the optional given $filter. Valid values
        /// for $filter are: &#39;atScope()&#39;, &#39;atExactScope()&#39; or &#39;policyDefinitionId eq
        /// &#39;{value}&#39;&#39;. If $filter is not provided, the unfiltered list includes all
        /// policy assignments associated with the subscription, including those that
        /// apply directly or from management groups that contain the given
        /// subscription, as well as any applied to objects contained within the
        /// subscription. If $filter=atScope() is provided, the returned list includes
        /// all policy assignments that apply to the subscription, which is everything
        /// in the unfiltered list except those applied to objects contained within the
        /// subscription. If $filter=atExactScope() is provided, the returned list only
        /// includes all policy assignments that at the subscription. If
        /// $filter=policyDefinitionId eq &#39;{value}&#39; is provided, the returned list
        /// includes all policy assignments of the policy definition whose id is
        /// {value}.
        /// </remarks>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="Microsoft.Rest.Azure.CloudException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        System.Threading.Tasks.Task<Microsoft.Rest.Azure.AzureOperationResponse<Microsoft.Rest.Azure.IPage<PolicyAssignment>>> ListNextWithHttpMessagesAsync(string nextPageLink, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>> customHeaders = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }
}