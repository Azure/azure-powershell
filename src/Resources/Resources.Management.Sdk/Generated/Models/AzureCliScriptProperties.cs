// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the Azure CLI script object.
    /// </summary>
    public partial class AzureCliScriptProperties
    {
        /// <summary>
        /// Initializes a new instance of the AzureCliScriptProperties class.
        /// </summary>
        public AzureCliScriptProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureCliScriptProperties class.
        /// </summary>

        /// <param name="containerSettings">Container settings.
        /// </param>

        /// <param name="storageAccountSettings">Storage Account settings.
        /// </param>

        /// <param name="cleanupPreference">The clean up preference when the script execution gets in a terminal state.
        /// Default setting is &#39;Always&#39;.
        /// Possible values include: &#39;Always&#39;, &#39;OnSuccess&#39;, &#39;OnExpiration&#39;</param>

        /// <param name="provisioningState">State of the script execution. This only appears in the response.
        /// Possible values include: &#39;Creating&#39;, &#39;ProvisioningResources&#39;, &#39;Running&#39;,
        /// &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;</param>

        /// <param name="status">Contains the results of script execution.
        /// </param>

        /// <param name="outputs">List of script outputs.
        /// </param>

        /// <param name="primaryScriptUri">Uri for the script. This is the entry point for the external script.
        /// </param>

        /// <param name="supportingScriptUris">Supporting files for the external script.
        /// </param>

        /// <param name="scriptContent">Script body.
        /// </param>

        /// <param name="arguments">Command line arguments to pass to the script. Arguments are separated by
        /// spaces. ex: -Name blue* -Location &#39;West US 2&#39;
        /// </param>

        /// <param name="environmentVariables">The environment variables to pass over to the script.
        /// </param>

        /// <param name="forceUpdateTag">Gets or sets how the deployment script should be forced to execute even if
        /// the script resource has not changed. Can be current time stamp or a GUID.
        /// </param>

        /// <param name="retentionInterval">Interval for which the service retains the script resource after it reaches
        /// a terminal state. Resource will be deleted when this duration expires.
        /// Duration is based on ISO 8601 pattern (for example P1D means one day).
        /// </param>

        /// <param name="timeout">Maximum allowed script execution time specified in ISO 8601 format. Default
        /// value is P1D
        /// </param>

        /// <param name="azCliVersion">Azure CLI module version to be used.
        /// </param>
        public AzureCliScriptProperties(System.TimeSpan retentionInterval, string azCliVersion, ContainerConfiguration containerSettings = default(ContainerConfiguration), StorageAccountConfiguration storageAccountSettings = default(StorageAccountConfiguration), string cleanupPreference = default(string), string provisioningState = default(string), ScriptStatus status = default(ScriptStatus), System.Collections.Generic.IDictionary<string, object> outputs = default(System.Collections.Generic.IDictionary<string, object>), string primaryScriptUri = default(string), System.Collections.Generic.IList<string> supportingScriptUris = default(System.Collections.Generic.IList<string>), string scriptContent = default(string), string arguments = default(string), System.Collections.Generic.IList<EnvironmentVariable> environmentVariables = default(System.Collections.Generic.IList<EnvironmentVariable>), string forceUpdateTag = default(string), System.TimeSpan? timeout = default(System.TimeSpan?))

        {
            this.ContainerSettings = containerSettings;
            this.StorageAccountSettings = storageAccountSettings;
            this.CleanupPreference = cleanupPreference;
            this.ProvisioningState = provisioningState;
            this.Status = status;
            this.Outputs = outputs;
            this.PrimaryScriptUri = primaryScriptUri;
            this.SupportingScriptUris = supportingScriptUris;
            this.ScriptContent = scriptContent;
            this.Arguments = arguments;
            this.EnvironmentVariables = environmentVariables;
            this.ForceUpdateTag = forceUpdateTag;
            this.RetentionInterval = retentionInterval;
            this.Timeout = timeout;
            this.AzCliVersion = azCliVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets container settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerSettings")]
        public ContainerConfiguration ContainerSettings {get; set; }

        /// <summary>
        /// Gets or sets storage Account settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountSettings")]
        public StorageAccountConfiguration StorageAccountSettings {get; set; }

        /// <summary>
        /// Gets or sets the clean up preference when the script execution gets in a
        /// terminal state. Default setting is &#39;Always&#39;. Possible values include: &#39;Always&#39;, &#39;OnSuccess&#39;, &#39;OnExpiration&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cleanupPreference")]
        public string CleanupPreference {get; set; }

        /// <summary>
        /// Gets state of the script execution. This only appears in the response. Possible values include: &#39;Creating&#39;, &#39;ProvisioningResources&#39;, &#39;Running&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets contains the results of script execution.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public ScriptStatus Status {get; private set; }

        /// <summary>
        /// Gets list of script outputs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outputs")]
        public System.Collections.Generic.IDictionary<string, object> Outputs {get; private set; }

        /// <summary>
        /// Gets or sets uri for the script. This is the entry point for the external
        /// script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryScriptUri")]
        public string PrimaryScriptUri {get; set; }

        /// <summary>
        /// Gets or sets supporting files for the external script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportingScriptUris")]
        public System.Collections.Generic.IList<string> SupportingScriptUris {get; set; }

        /// <summary>
        /// Gets or sets script body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scriptContent")]
        public string ScriptContent {get; set; }

        /// <summary>
        /// Gets or sets command line arguments to pass to the script. Arguments are
        /// separated by spaces. ex: -Name blue* -Location &#39;West US 2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "arguments")]
        public string Arguments {get; set; }

        /// <summary>
        /// Gets or sets the environment variables to pass over to the script.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "environmentVariables")]
        public System.Collections.Generic.IList<EnvironmentVariable> EnvironmentVariables {get; set; }

        /// <summary>
        /// Gets or sets gets or sets how the deployment script should be forced to
        /// execute even if the script resource has not changed. Can be current time
        /// stamp or a GUID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "forceUpdateTag")]
        public string ForceUpdateTag {get; set; }

        /// <summary>
        /// Gets or sets interval for which the service retains the script resource
        /// after it reaches a terminal state. Resource will be deleted when this
        /// duration expires. Duration is based on ISO 8601 pattern (for example P1D
        /// means one day).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retentionInterval")]
        public System.TimeSpan RetentionInterval {get; set; }

        /// <summary>
        /// Gets or sets maximum allowed script execution time specified in ISO 8601
        /// format. Default value is P1D
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeout")]
        public System.TimeSpan? Timeout {get; set; }

        /// <summary>
        /// Gets or sets azure CLI module version to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azCliVersion")]
        public string AzCliVersion {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AzCliVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AzCliVersion");
            }
            if (this.ContainerSettings != null)
            {
                this.ContainerSettings.Validate();
            }









            if (this.EnvironmentVariables != null)
            {
                foreach (var element in this.EnvironmentVariables)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}