// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    public partial class SubscriptionFeatureRegistrationProperties
    {
        /// <summary>
        /// Initializes a new instance of the SubscriptionFeatureRegistrationProperties class.
        /// </summary>
        public SubscriptionFeatureRegistrationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubscriptionFeatureRegistrationProperties class.
        /// </summary>

        /// <param name="tenantId">The tenantId.
        /// </param>

        /// <param name="subscriptionId">The subscriptionId.
        /// </param>

        /// <param name="featureName">The featureName.
        /// </param>

        /// <param name="displayName">The featureDisplayName.
        /// </param>

        /// <param name="providerNamespace">The providerNamespace.
        /// </param>

        /// <param name="state">The state.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;NotRegistered&#39;, &#39;Pending&#39;,
        /// &#39;Registering&#39;, &#39;Registered&#39;, &#39;Unregistering&#39;, &#39;Unregistered&#39;</param>

        /// <param name="authorizationProfile">Authorization Profile
        /// </param>

        /// <param name="metadata">Key-value pairs for meta data.
        /// </param>

        /// <param name="releaseDate">The feature release date.
        /// </param>

        /// <param name="registrationDate">The feature registration date.
        /// </param>

        /// <param name="documentationLink">The feature documentation link.
        /// </param>

        /// <param name="approvalType">The feature approval type.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;ApprovalRequired&#39;, &#39;AutoApproval&#39;</param>

        /// <param name="shouldFeatureDisplayInPortal">Indicates whether feature should be displayed in Portal.
        /// </param>

        /// <param name="description">The feature description.
        /// </param>
        public SubscriptionFeatureRegistrationProperties(string tenantId = default(string), string subscriptionId = default(string), string featureName = default(string), string displayName = default(string), string providerNamespace = default(string), string state = default(string), AuthorizationProfile authorizationProfile = default(AuthorizationProfile), System.Collections.Generic.IDictionary<string, string> metadata = default(System.Collections.Generic.IDictionary<string, string>), System.DateTime? releaseDate = default(System.DateTime?), System.DateTime? registrationDate = default(System.DateTime?), string documentationLink = default(string), string approvalType = default(string), bool? shouldFeatureDisplayInPortal = default(bool?), string description = default(string))

        {
            this.TenantId = tenantId;
            this.SubscriptionId = subscriptionId;
            this.FeatureName = featureName;
            this.DisplayName = displayName;
            this.ProviderNamespace = providerNamespace;
            this.State = state;
            this.AuthorizationProfile = authorizationProfile;
            this.Metadata = metadata;
            this.ReleaseDate = releaseDate;
            this.RegistrationDate = registrationDate;
            this.DocumentationLink = documentationLink;
            this.ApprovalType = approvalType;
            this.ShouldFeatureDisplayInPortal = shouldFeatureDisplayInPortal;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the tenantId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; private set; }

        /// <summary>
        /// Gets the subscriptionId.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subscriptionId")]
        public string SubscriptionId {get; private set; }

        /// <summary>
        /// Gets the featureName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "featureName")]
        public string FeatureName {get; private set; }

        /// <summary>
        /// Gets the featureDisplayName.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; private set; }

        /// <summary>
        /// Gets the providerNamespace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "providerNamespace")]
        public string ProviderNamespace {get; private set; }

        /// <summary>
        /// Gets or sets the state. Possible values include: &#39;NotSpecified&#39;, &#39;NotRegistered&#39;, &#39;Pending&#39;, &#39;Registering&#39;, &#39;Registered&#39;, &#39;Unregistering&#39;, &#39;Unregistered&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets authorization Profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationProfile")]
        public AuthorizationProfile AuthorizationProfile {get; set; }

        /// <summary>
        /// Gets or sets key-value pairs for meta data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.IDictionary<string, string> Metadata {get; set; }

        /// <summary>
        /// Gets the feature release date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "releaseDate")]
        public System.DateTime? ReleaseDate {get; private set; }

        /// <summary>
        /// Gets the feature registration date.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "registrationDate")]
        public System.DateTime? RegistrationDate {get; private set; }

        /// <summary>
        /// Gets the feature documentation link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "documentationLink")]
        public string DocumentationLink {get; private set; }

        /// <summary>
        /// Gets the feature approval type. Possible values include: &#39;NotSpecified&#39;, &#39;ApprovalRequired&#39;, &#39;AutoApproval&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "approvalType")]
        public string ApprovalType {get; private set; }

        /// <summary>
        /// Gets or sets indicates whether feature should be displayed in Portal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shouldFeatureDisplayInPortal")]
        public bool? ShouldFeatureDisplayInPortal {get; set; }

        /// <summary>
        /// Gets or sets the feature description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {








            if (this.DocumentationLink != null)
            {
                if (this.DocumentationLink.Length > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DocumentationLink", 1000);
                }
            }

            if (this.Description != null)
            {
                if (this.Description.Length > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 1000);
                }
            }
        }
    }
}