// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// The data policy manifest.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DataPolicyManifest : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the DataPolicyManifest class.
        /// </summary>
        public DataPolicyManifest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataPolicyManifest class.
        /// </summary>

        /// <param name="id">The ID of the data policy manifest.
        /// </param>

        /// <param name="name">The name of the data policy manifest (it&#39;s the same as the Policy Mode).
        /// </param>

        /// <param name="type">The type of the resource (Microsoft.Authorization/dataPolicyManifests).
        /// </param>

        /// <param name="namespaces">The list of namespaces for the data policy manifest.
        /// </param>

        /// <param name="policyMode">The policy mode of the data policy manifest.
        /// </param>

        /// <param name="isBuiltInOnly">A value indicating whether policy mode is allowed only in built-in
        /// definitions.
        /// </param>

        /// <param name="resourceTypeAliases">An array of resource type aliases.
        /// </param>

        /// <param name="effects">The effect definition.
        /// </param>

        /// <param name="fieldValues">The non-alias field accessor values that can be used in the policy rule.
        /// </param>

        /// <param name="standard">The standard resource functions (subscription and/or resourceGroup).
        /// </param>

        /// <param name="custom">An array of data manifest custom resource definition.
        /// </param>
        public DataPolicyManifest(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IList<string> namespaces = default(System.Collections.Generic.IList<string>), string policyMode = default(string), bool? isBuiltInOnly = default(bool?), System.Collections.Generic.IList<ResourceTypeAliases> resourceTypeAliases = default(System.Collections.Generic.IList<ResourceTypeAliases>), System.Collections.Generic.IList<DataEffect> effects = default(System.Collections.Generic.IList<DataEffect>), System.Collections.Generic.IList<string> fieldValues = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> standard = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<DataManifestCustomResourceFunctionDefinition> custom = default(System.Collections.Generic.IList<DataManifestCustomResourceFunctionDefinition>))

        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Namespaces = namespaces;
            this.PolicyMode = policyMode;
            this.IsBuiltInOnly = isBuiltInOnly;
            this.ResourceTypeAliases = resourceTypeAliases;
            this.Effects = effects;
            this.FieldValues = fieldValues;
            this.Standard = standard;
            this.Custom = custom;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the data policy manifest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the name of the data policy manifest (it&#39;s the same as the Policy
        /// Mode).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the type of the resource
        /// (Microsoft.Authorization/dataPolicyManifests).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets the list of namespaces for the data policy manifest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.namespaces")]
        public System.Collections.Generic.IList<string> Namespaces {get; set; }

        /// <summary>
        /// Gets or sets the policy mode of the data policy manifest.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.policyMode")]
        public string PolicyMode {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether policy mode is allowed only in
        /// built-in definitions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isBuiltInOnly")]
        public bool? IsBuiltInOnly {get; set; }

        /// <summary>
        /// Gets or sets an array of resource type aliases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceTypeAliases")]
        public System.Collections.Generic.IList<ResourceTypeAliases> ResourceTypeAliases {get; set; }

        /// <summary>
        /// Gets or sets the effect definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.effects")]
        public System.Collections.Generic.IList<DataEffect> Effects {get; set; }

        /// <summary>
        /// Gets or sets the non-alias field accessor values that can be used in the
        /// policy rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fieldValues")]
        public System.Collections.Generic.IList<string> FieldValues {get; set; }

        /// <summary>
        /// Gets or sets the standard resource functions (subscription and/or
        /// resourceGroup).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceFunctions.standard")]
        public System.Collections.Generic.IList<string> Standard {get; set; }

        /// <summary>
        /// Gets or sets an array of data manifest custom resource definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceFunctions.custom")]
        public System.Collections.Generic.IList<DataManifestCustomResourceFunctionDefinition> Custom {get; set; }
    }
}