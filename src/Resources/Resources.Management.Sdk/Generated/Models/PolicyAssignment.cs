// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// The policy assignment.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class PolicyAssignment : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the PolicyAssignment class.
        /// </summary>
        public PolicyAssignment()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyAssignment class.
        /// </summary>

        /// <param name="id">The ID of the policy assignment.
        /// </param>

        /// <param name="type">The type of the policy assignment.
        /// </param>

        /// <param name="name">The name of the policy assignment.
        /// </param>

        /// <param name="location">The location of the policy assignment. Only required when utilizing managed
        /// identity.
        /// </param>

        /// <param name="identity">The managed identity associated with the policy assignment.
        /// </param>

        /// <param name="systemData">The system metadata relating to this resource.
        /// </param>

        /// <param name="enforcementMode">The policy assignment enforcement mode. Possible values are Default and
        /// DoNotEnforce.
        /// Possible values include: &#39;Default&#39;, &#39;DoNotEnforce&#39;</param>

        /// <param name="displayName">The display name of the policy assignment.
        /// </param>

        /// <param name="policyDefinitionId">The ID of the policy definition or policy set definition being assigned.
        /// </param>

        /// <param name="scope">The scope for the policy assignment.
        /// </param>

        /// <param name="notScopes">The policy&#39;s excluded scopes.
        /// </param>

        /// <param name="parameters">The parameter values for the assigned policy rule. The keys are the
        /// parameter names.
        /// </param>

        /// <param name="description">This message will be part of response in case of policy violation.
        /// </param>

        /// <param name="metadata">The policy assignment metadata. Metadata is an open ended object and is
        /// typically a collection of key value pairs.
        /// </param>

        /// <param name="nonComplianceMessages">The messages that describe why a resource is non-compliant with the policy.
        /// </param>
        public PolicyAssignment(string id = default(string), string type = default(string), string name = default(string), string location = default(string), Identity identity = default(Identity), SystemData systemData = default(SystemData), string enforcementMode = default(string), string displayName = default(string), string policyDefinitionId = default(string), string scope = default(string), System.Collections.Generic.IList<string> notScopes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IDictionary<string, ParameterValuesValue> parameters = default(System.Collections.Generic.IDictionary<string, ParameterValuesValue>), string description = default(string), object metadata = default(object), System.Collections.Generic.IList<NonComplianceMessage> nonComplianceMessages = default(System.Collections.Generic.IList<NonComplianceMessage>))

        {
            this.Id = id;
            this.Type = type;
            this.Name = name;
            this.Location = location;
            this.Identity = identity;
            this.SystemData = systemData;
            this.EnforcementMode = enforcementMode;
            this.DisplayName = displayName;
            this.PolicyDefinitionId = policyDefinitionId;
            this.Scope = scope;
            this.NotScopes = notScopes;
            this.Parameters = parameters;
            this.Description = description;
            this.Metadata = metadata;
            this.NonComplianceMessages = nonComplianceMessages;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the type of the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the name of the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets or sets the location of the policy assignment. Only required when
        /// utilizing managed identity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets the managed identity associated with the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public Identity Identity {get; set; }

        /// <summary>
        /// Gets the system metadata relating to this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets the policy assignment enforcement mode. Possible values are
        /// Default and DoNotEnforce. Possible values include: &#39;Default&#39;, &#39;DoNotEnforce&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enforcementMode")]
        public string EnforcementMode {get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the ID of the policy definition or policy set definition being
        /// assigned.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.policyDefinitionId")]
        public string PolicyDefinitionId {get; set; }

        /// <summary>
        /// Gets the scope for the policy assignment.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public string Scope {get; private set; }

        /// <summary>
        /// Gets or sets the policy&#39;s excluded scopes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notScopes")]
        public System.Collections.Generic.IList<string> NotScopes {get; set; }

        /// <summary>
        /// Gets or sets the parameter values for the assigned policy rule. The keys
        /// are the parameter names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterValuesValue> Parameters {get; set; }

        /// <summary>
        /// Gets or sets this message will be part of response in case of policy
        /// violation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the policy assignment metadata. Metadata is an open ended
        /// object and is typically a collection of key value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata {get; set; }

        /// <summary>
        /// Gets or sets the messages that describe why a resource is non-compliant
        /// with the policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nonComplianceMessages")]
        public System.Collections.Generic.IList<NonComplianceMessage> NonComplianceMessages {get; set; }
    }
}