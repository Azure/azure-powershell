// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Location metadata information
    /// </summary>
    public partial class LocationMetadata
    {
        /// <summary>
        /// Initializes a new instance of the LocationMetadata class.
        /// </summary>
        public LocationMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocationMetadata class.
        /// </summary>

        /// <param name="regionType">The type of the region.
        /// Possible values include: &#39;Physical&#39;, &#39;Logical&#39;</param>

        /// <param name="regionCategory">The category of the region.
        /// Possible values include: &#39;Recommended&#39;, &#39;Extended&#39;, &#39;Other&#39;</param>

        /// <param name="geographyGroup">The geography group of the location.
        /// </param>

        /// <param name="longitude">The longitude of the location.
        /// </param>

        /// <param name="latitude">The latitude of the location.
        /// </param>

        /// <param name="physicalLocation">The physical location of the Azure location.
        /// </param>

        /// <param name="pairedRegion">The regions paired to this region.
        /// </param>

        /// <param name="homeLocation">The home location of an edge zone.
        /// </param>
        public LocationMetadata(string regionType = default(string), string regionCategory = default(string), string geographyGroup = default(string), string longitude = default(string), string latitude = default(string), string physicalLocation = default(string), System.Collections.Generic.IList<PairedRegion> pairedRegion = default(System.Collections.Generic.IList<PairedRegion>), string homeLocation = default(string))

        {
            this.RegionType = regionType;
            this.RegionCategory = regionCategory;
            this.GeographyGroup = geographyGroup;
            this.Longitude = longitude;
            this.Latitude = latitude;
            this.PhysicalLocation = physicalLocation;
            this.PairedRegion = pairedRegion;
            this.HomeLocation = homeLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the type of the region. Possible values include: &#39;Physical&#39;, &#39;Logical&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "regionType")]
        public string RegionType {get; private set; }

        /// <summary>
        /// Gets the category of the region. Possible values include: &#39;Recommended&#39;, &#39;Extended&#39;, &#39;Other&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "regionCategory")]
        public string RegionCategory {get; private set; }

        /// <summary>
        /// Gets the geography group of the location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "geographyGroup")]
        public string GeographyGroup {get; private set; }

        /// <summary>
        /// Gets the longitude of the location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "longitude")]
        public string Longitude {get; private set; }

        /// <summary>
        /// Gets the latitude of the location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "latitude")]
        public string Latitude {get; private set; }

        /// <summary>
        /// Gets the physical location of the Azure location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "physicalLocation")]
        public string PhysicalLocation {get; private set; }

        /// <summary>
        /// Gets or sets the regions paired to this region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pairedRegion")]
        public System.Collections.Generic.IList<PairedRegion> PairedRegion {get; set; }

        /// <summary>
        /// Gets the home location of an edge zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "homeLocation")]
        public string HomeLocation {get; private set; }
    }
}