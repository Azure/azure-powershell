// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// General metadata for the parameter.
    /// </summary>
    public partial class ParameterDefinitionsValueMetadata
    {
        /// <summary>
        /// Initializes a new instance of the ParameterDefinitionsValueMetadata class.
        /// </summary>
        public ParameterDefinitionsValueMetadata()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ParameterDefinitionsValueMetadata class.
        /// </summary>

        /// <param name="additionalProperties">General metadata for the parameter.
        /// </param>

        /// <param name="displayName">The display name for the parameter.
        /// </param>

        /// <param name="description">The description of the parameter.
        /// </param>

        /// <param name="strongType">Used when assigning the policy definition through the portal. Provides a
        /// context aware list of values for the user to choose from.
        /// </param>

        /// <param name="assignPermissions">Set to true to have Azure portal create role assignments on the resource ID
        /// or resource scope value of this parameter during policy assignment. This
        /// property is useful in case you wish to assign permissions outside the
        /// assignment scope.
        /// </param>
        public ParameterDefinitionsValueMetadata(System.Collections.Generic.IDictionary<string, object> additionalProperties = default(System.Collections.Generic.IDictionary<string, object>), string displayName = default(string), string description = default(string), string strongType = default(string), bool? assignPermissions = default(bool?))

        {
            this.AdditionalProperties = additionalProperties;
            this.DisplayName = displayName;
            this.Description = description;
            this.StrongType = strongType;
            this.AssignPermissions = assignPermissions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets general metadata for the parameter.
        /// </summary>
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {get; set; }

        /// <summary>
        /// Gets or sets the display name for the parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the description of the parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets used when assigning the policy definition through the portal.
        /// Provides a context aware list of values for the user to choose from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "strongType")]
        public string StrongType {get; set; }

        /// <summary>
        /// Gets or sets set to true to have Azure portal create role assignments on
        /// the resource ID or resource scope value of this parameter during policy
        /// assignment. This property is useful in case you wish to assign permissions
        /// outside the assignment scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "assignPermissions")]
        public bool? AssignPermissions {get; set; }
    }
}