// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Template Spec properties.
    /// </summary>
    public partial class TemplateSpecProperties
    {
        /// <summary>
        /// Initializes a new instance of the TemplateSpecProperties class.
        /// </summary>
        public TemplateSpecProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TemplateSpecProperties class.
        /// </summary>

        /// <param name="description">Template Spec description.
        /// </param>

        /// <param name="displayName">Template Spec display name.
        /// </param>

        /// <param name="metadata">The Template Spec metadata. Metadata is an open-ended object and is
        /// typically a collection of key-value pairs.
        /// </param>

        /// <param name="versions">High-level information about the versions within this Template Spec. The
        /// keys are the version names. Only populated if the $expand query parameter
        /// is set to &#39;versions&#39;.
        /// </param>
        public TemplateSpecProperties(string description = default(string), string displayName = default(string), object metadata = default(object), System.Collections.Generic.IDictionary<string, TemplateSpecVersionInfo> versions = default(System.Collections.Generic.IDictionary<string, TemplateSpecVersionInfo>))

        {
            this.Description = description;
            this.DisplayName = displayName;
            this.Metadata = metadata;
            this.Versions = versions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets template Spec description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets template Spec display name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the Template Spec metadata. Metadata is an open-ended object
        /// and is typically a collection of key-value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public object Metadata {get; set; }

        /// <summary>
        /// Gets high-level information about the versions within this Template Spec.
        /// The keys are the version names. Only populated if the $expand query
        /// parameter is set to &#39;versions&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "versions")]
        public System.Collections.Generic.IDictionary<string, TemplateSpecVersionInfo> Versions {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Description != null)
            {
                if (this.Description.Length > 4096)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 4096);
                }
            }
            if (this.DisplayName != null)
            {
                if (this.DisplayName.Length > 64)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "DisplayName", 64);
                }
            }


        }
    }
}