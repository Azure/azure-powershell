// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// The policy definition.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class PolicyDefinition : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the PolicyDefinition class.
        /// </summary>
        public PolicyDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyDefinition class.
        /// </summary>

        /// <param name="id">The ID of the policy definition.
        /// </param>

        /// <param name="name">The name of the policy definition.
        /// </param>

        /// <param name="type">The type of the resource (Microsoft.Authorization/policyDefinitions).
        /// </param>

        /// <param name="systemData">The system metadata relating to this resource.
        /// </param>

        /// <param name="policyType">The type of policy definition. Possible values are NotSpecified, BuiltIn,
        /// Custom, and Static.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;BuiltIn&#39;, &#39;Custom&#39;, &#39;Static&#39;</param>

        /// <param name="mode">The policy definition mode. Some examples are All, Indexed,
        /// Microsoft.KeyVault.Data.
        /// </param>

        /// <param name="displayName">The display name of the policy definition.
        /// </param>

        /// <param name="description">The policy definition description.
        /// </param>

        /// <param name="policyRule">The policy rule.
        /// </param>

        /// <param name="metadata">The policy definition metadata.  Metadata is an open ended object and is
        /// typically a collection of key value pairs.
        /// </param>

        /// <param name="parameters">The parameter definitions for parameters used in the policy rule. The keys
        /// are the parameter names.
        /// </param>
        public PolicyDefinition(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string policyType = default(string), string mode = default(string), string displayName = default(string), string description = default(string), object policyRule = default(object), object metadata = default(object), System.Collections.Generic.IDictionary<string, ParameterDefinitionsValue> parameters = default(System.Collections.Generic.IDictionary<string, ParameterDefinitionsValue>))

        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.SystemData = systemData;
            this.PolicyType = policyType;
            this.Mode = mode;
            this.DisplayName = displayName;
            this.Description = description;
            this.PolicyRule = policyRule;
            this.Metadata = metadata;
            this.Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the policy definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the name of the policy definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the type of the resource (Microsoft.Authorization/policyDefinitions).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the system metadata relating to this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData {get; private set; }

        /// <summary>
        /// Gets or sets the type of policy definition. Possible values are
        /// NotSpecified, BuiltIn, Custom, and Static. Possible values include: &#39;NotSpecified&#39;, &#39;BuiltIn&#39;, &#39;Custom&#39;, &#39;Static&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.policyType")]
        public string PolicyType {get; set; }

        /// <summary>
        /// Gets or sets the policy definition mode. Some examples are All, Indexed,
        /// Microsoft.KeyVault.Data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the policy definition description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the policy rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.policyRule")]
        public object PolicyRule {get; set; }

        /// <summary>
        /// Gets or sets the policy definition metadata.  Metadata is an open ended
        /// object and is typically a collection of key value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.metadata")]
        public object Metadata {get; set; }

        /// <summary>
        /// Gets or sets the parameter definitions for parameters used in the policy
        /// rule. The keys are the parameter names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterDefinitionsValue> Parameters {get; set; }
    }
}