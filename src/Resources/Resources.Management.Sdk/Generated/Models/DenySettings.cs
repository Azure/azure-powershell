// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Defines how resources deployed by the deployment stack are locked.
    /// </summary>
    public partial class DenySettings
    {
        /// <summary>
        /// Initializes a new instance of the DenySettings class.
        /// </summary>
        public DenySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DenySettings class.
        /// </summary>

        /// <param name="mode">denySettings Mode.
        /// Possible values include: &#39;denyDelete&#39;, &#39;denyWriteAndDelete&#39;, &#39;none&#39;</param>

        /// <param name="excludedPrincipals">List of AAD principal IDs excluded from the lock. Up to 5 principals are
        /// permitted.
        /// </param>

        /// <param name="excludedActions">List of role-based management operations that are excluded from the
        /// denySettings. Up to 200 actions are permitted. If the denySetting mode is
        /// set to &#39;denyWriteAndDelete&#39;, then the following actions are automatically
        /// appended to &#39;excludedActions&#39;: &#39;*/read&#39; and
        /// &#39;Microsoft.Authorization/locks/delete&#39;. If the denySetting mode is set to
        /// &#39;denyDelete&#39;, then the following actions are automatically appended to
        /// &#39;excludedActions&#39;: &#39;Microsoft.Authorization/locks/delete&#39;. Duplicate
        /// actions will be removed.
        /// </param>

        /// <param name="applyToChildScopes">DenySettings will be applied to child scopes.
        /// </param>
        public DenySettings(string mode, System.Collections.Generic.IList<string> excludedPrincipals = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> excludedActions = default(System.Collections.Generic.IList<string>), bool? applyToChildScopes = default(bool?))

        {
            this.Mode = mode;
            this.ExcludedPrincipals = excludedPrincipals;
            this.ExcludedActions = excludedActions;
            this.ApplyToChildScopes = applyToChildScopes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets denySettings Mode. Possible values include: &#39;denyDelete&#39;, &#39;denyWriteAndDelete&#39;, &#39;none&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets list of AAD principal IDs excluded from the lock. Up to 5
        /// principals are permitted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedPrincipals")]
        public System.Collections.Generic.IList<string> ExcludedPrincipals {get; set; }

        /// <summary>
        /// Gets or sets list of role-based management operations that are excluded
        /// from the denySettings. Up to 200 actions are permitted. If the denySetting
        /// mode is set to &#39;denyWriteAndDelete&#39;, then the following actions are
        /// automatically appended to &#39;excludedActions&#39;: &#39;*/read&#39; and
        /// &#39;Microsoft.Authorization/locks/delete&#39;. If the denySetting mode is set to
        /// &#39;denyDelete&#39;, then the following actions are automatically appended to
        /// &#39;excludedActions&#39;: &#39;Microsoft.Authorization/locks/delete&#39;. Duplicate
        /// actions will be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedActions")]
        public System.Collections.Generic.IList<string> ExcludedActions {get; set; }

        /// <summary>
        /// Gets or sets denySettings will be applied to child scopes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applyToChildScopes")]
        public bool? ApplyToChildScopes {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Mode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Mode");
            }



        }
    }
}