// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// The policy exemption properties.
    /// </summary>
    public partial class PolicyExemptionProperties
    {
        /// <summary>
        /// Initializes a new instance of the PolicyExemptionProperties class.
        /// </summary>
        public PolicyExemptionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicyExemptionProperties class.
        /// </summary>

        /// <param name="policyAssignmentId">The ID of the policy assignment that is being exempted.
        /// </param>

        /// <param name="policyDefinitionReferenceIds">The policy definition reference ID list when the associated policy
        /// assignment is an assignment of a policy set definition.
        /// </param>

        /// <param name="exemptionCategory">The policy exemption category. Possible values are Waiver and Mitigated.
        /// Possible values include: &#39;Waiver&#39;, &#39;Mitigated&#39;</param>

        /// <param name="expiresOn">The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ)
        /// of the policy exemption.
        /// </param>

        /// <param name="displayName">The display name of the policy exemption.
        /// </param>

        /// <param name="description">The description of the policy exemption.
        /// </param>

        /// <param name="metadata">The policy exemption metadata. Metadata is an open ended object and is
        /// typically a collection of key value pairs.
        /// </param>
        public PolicyExemptionProperties(string policyAssignmentId, string exemptionCategory, System.Collections.Generic.IList<string> policyDefinitionReferenceIds = default(System.Collections.Generic.IList<string>), System.DateTime? expiresOn = default(System.DateTime?), string displayName = default(string), string description = default(string), object metadata = default(object))

        {
            this.PolicyAssignmentId = policyAssignmentId;
            this.PolicyDefinitionReferenceIds = policyDefinitionReferenceIds;
            this.ExemptionCategory = exemptionCategory;
            this.ExpiresOn = expiresOn;
            this.DisplayName = displayName;
            this.Description = description;
            this.Metadata = metadata;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ID of the policy assignment that is being exempted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyAssignmentId")]
        public string PolicyAssignmentId {get; set; }

        /// <summary>
        /// Gets or sets the policy definition reference ID list when the associated
        /// policy assignment is an assignment of a policy set definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionReferenceIds")]
        public System.Collections.Generic.IList<string> PolicyDefinitionReferenceIds {get; set; }

        /// <summary>
        /// Gets or sets the policy exemption category. Possible values are Waiver and
        /// Mitigated. Possible values include: &#39;Waiver&#39;, &#39;Mitigated&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exemptionCategory")]
        public string ExemptionCategory {get; set; }

        /// <summary>
        /// Gets or sets the expiration date and time (in UTC ISO 8601 format
        /// yyyy-MM-ddTHH:mm:ssZ) of the policy exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expiresOn")]
        public System.DateTime? ExpiresOn {get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the description of the policy exemption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the policy exemption metadata. Metadata is an open ended
        /// object and is typically a collection of key value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public object Metadata {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PolicyAssignmentId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PolicyAssignmentId");
            }
            if (this.ExemptionCategory == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ExemptionCategory");
            }






        }
    }
}