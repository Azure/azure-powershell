// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// The policy set definition properties.
    /// </summary>
    public partial class PolicySetDefinitionProperties
    {
        /// <summary>
        /// Initializes a new instance of the PolicySetDefinitionProperties class.
        /// </summary>
        public PolicySetDefinitionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicySetDefinitionProperties class.
        /// </summary>

        /// <param name="policyType">The type of policy definition. Possible values are NotSpecified, BuiltIn,
        /// Custom, and Static.
        /// Possible values include: &#39;NotSpecified&#39;, &#39;BuiltIn&#39;, &#39;Custom&#39;, &#39;Static&#39;</param>

        /// <param name="displayName">The display name of the policy set definition.
        /// </param>

        /// <param name="description">The policy set definition description.
        /// </param>

        /// <param name="metadata">The policy set definition metadata.  Metadata is an open ended object and
        /// is typically a collection of key value pairs.
        /// </param>

        /// <param name="parameters">The policy set definition parameters that can be used in policy definition
        /// references.
        /// </param>

        /// <param name="policyDefinitions">An array of policy definition references.
        /// </param>

        /// <param name="policyDefinitionGroups">The metadata describing groups of policy definition references within the
        /// policy set definition.
        /// </param>
        public PolicySetDefinitionProperties(System.Collections.Generic.IList<PolicyDefinitionReference> policyDefinitions, string policyType = default(string), string displayName = default(string), string description = default(string), object metadata = default(object), System.Collections.Generic.IDictionary<string, ParameterDefinitionsValue> parameters = default(System.Collections.Generic.IDictionary<string, ParameterDefinitionsValue>), System.Collections.Generic.IList<PolicyDefinitionGroup> policyDefinitionGroups = default(System.Collections.Generic.IList<PolicyDefinitionGroup>))

        {
            this.PolicyType = policyType;
            this.DisplayName = displayName;
            this.Description = description;
            this.Metadata = metadata;
            this.Parameters = parameters;
            this.PolicyDefinitions = policyDefinitions;
            this.PolicyDefinitionGroups = policyDefinitionGroups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the type of policy definition. Possible values are
        /// NotSpecified, BuiltIn, Custom, and Static. Possible values include: &#39;NotSpecified&#39;, &#39;BuiltIn&#39;, &#39;Custom&#39;, &#39;Static&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyType")]
        public string PolicyType {get; set; }

        /// <summary>
        /// Gets or sets the display name of the policy set definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets or sets the policy set definition description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the policy set definition metadata.  Metadata is an open ended
        /// object and is typically a collection of key value pairs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public object Metadata {get; set; }

        /// <summary>
        /// Gets or sets the policy set definition parameters that can be used in
        /// policy definition references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IDictionary<string, ParameterDefinitionsValue> Parameters {get; set; }

        /// <summary>
        /// Gets or sets an array of policy definition references.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitions")]
        public System.Collections.Generic.IList<PolicyDefinitionReference> PolicyDefinitions {get; set; }

        /// <summary>
        /// Gets or sets the metadata describing groups of policy definition references
        /// within the policy set definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policyDefinitionGroups")]
        public System.Collections.Generic.IList<PolicyDefinitionGroup> PolicyDefinitionGroups {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PolicyDefinitions == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PolicyDefinitions");
            }





            if (this.PolicyDefinitions != null)
            {
                foreach (var element in this.PolicyDefinitions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.PolicyDefinitionGroups != null)
            {
                foreach (var element in this.PolicyDefinitionGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}