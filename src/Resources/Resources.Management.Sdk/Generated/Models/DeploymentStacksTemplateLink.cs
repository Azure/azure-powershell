// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Entity representing the reference to the template.
    /// </summary>
    public partial class DeploymentStacksTemplateLink
    {
        /// <summary>
        /// Initializes a new instance of the DeploymentStacksTemplateLink class.
        /// </summary>
        public DeploymentStacksTemplateLink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DeploymentStacksTemplateLink class.
        /// </summary>

        /// <param name="uri">The URI of the template to deploy. Use either the uri or id property, but
        /// not both.
        /// </param>

        /// <param name="id">The resourceId of a Template Spec. Use either the id or uri property, but
        /// not both.
        /// </param>

        /// <param name="relativePath">The relativePath property can be used to deploy a linked template at a
        /// location relative to the parent. If the parent template was linked with a
        /// TemplateSpec, this will reference an artifact in the TemplateSpec.  If the
        /// parent was linked with a URI, the child deployment will be a combination of
        /// the parent and relativePath URIs.
        /// </param>

        /// <param name="queryString">The query string (for example, a SAS token) to be used with the
        /// templateLink URI.
        /// </param>

        /// <param name="contentVersion">If included, must match the ContentVersion in the template.
        /// </param>
        public DeploymentStacksTemplateLink(string uri = default(string), string id = default(string), string relativePath = default(string), string queryString = default(string), string contentVersion = default(string))

        {
            this.Uri = uri;
            this.Id = id;
            this.RelativePath = relativePath;
            this.QueryString = queryString;
            this.ContentVersion = contentVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the URI of the template to deploy. Use either the uri or id
        /// property, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uri")]
        public string Uri {get; set; }

        /// <summary>
        /// Gets or sets the resourceId of a Template Spec. Use either the id or uri
        /// property, but not both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets the relativePath property can be used to deploy a linked
        /// template at a location relative to the parent. If the parent template was
        /// linked with a TemplateSpec, this will reference an artifact in the
        /// TemplateSpec.  If the parent was linked with a URI, the child deployment
        /// will be a combination of the parent and relativePath URIs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relativePath")]
        public string RelativePath {get; set; }

        /// <summary>
        /// Gets or sets the query string (for example, a SAS token) to be used with
        /// the templateLink URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "queryString")]
        public string QueryString {get; set; }

        /// <summary>
        /// Gets or sets if included, must match the ContentVersion in the template.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contentVersion")]
        public string ContentVersion {get; set; }
    }
}