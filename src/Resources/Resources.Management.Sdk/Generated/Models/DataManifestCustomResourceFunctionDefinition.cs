// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.ResourceManager.Models
{
    using System.Linq;

    /// <summary>
    /// The custom resource function definition.
    /// </summary>
    public partial class DataManifestCustomResourceFunctionDefinition
    {
        /// <summary>
        /// Initializes a new instance of the DataManifestCustomResourceFunctionDefinition class.
        /// </summary>
        public DataManifestCustomResourceFunctionDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataManifestCustomResourceFunctionDefinition class.
        /// </summary>

        /// <param name="name">The function name as it will appear in the policy rule. eg - &#39;vault&#39;.
        /// </param>

        /// <param name="fullyQualifiedResourceType">The fully qualified control plane resource type that this function
        /// represents. eg - &#39;Microsoft.KeyVault/vaults&#39;.
        /// </param>

        /// <param name="defaultProperties">The top-level properties that can be selected on the function&#39;s output. eg
        /// - [ &#34;name&#34;, &#34;location&#34; ] if vault().name and vault().location are supported
        /// </param>

        /// <param name="allowCustomProperties">A value indicating whether the custom properties within the property bag
        /// are allowed. Needs api-version to be specified in the policy rule eg -
        /// vault(&#39;2019-06-01&#39;).
        /// </param>
        public DataManifestCustomResourceFunctionDefinition(string name = default(string), string fullyQualifiedResourceType = default(string), System.Collections.Generic.IList<string> defaultProperties = default(System.Collections.Generic.IList<string>), bool? allowCustomProperties = default(bool?))

        {
            this.Name = name;
            this.FullyQualifiedResourceType = fullyQualifiedResourceType;
            this.DefaultProperties = defaultProperties;
            this.AllowCustomProperties = allowCustomProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the function name as it will appear in the policy rule. eg -
        /// &#39;vault&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the fully qualified control plane resource type that this
        /// function represents. eg - &#39;Microsoft.KeyVault/vaults&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullyQualifiedResourceType")]
        public string FullyQualifiedResourceType {get; set; }

        /// <summary>
        /// Gets or sets the top-level properties that can be selected on the
        /// function&#39;s output. eg - [ &#34;name&#34;, &#34;location&#34; ] if vault().name and
        /// vault().location are supported
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultProperties")]
        public System.Collections.Generic.IList<string> DefaultProperties {get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the custom properties within the
        /// property bag are allowed. Needs api-version to be specified in the policy
        /// rule eg - vault(&#39;2019-06-01&#39;).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowCustomProperties")]
        public bool? AllowCustomProperties {get; set; }
    }
}