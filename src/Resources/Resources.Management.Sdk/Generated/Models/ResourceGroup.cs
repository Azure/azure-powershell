// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Resources.Models
{
    using System.Linq;

    /// <summary>
    /// Resource group information.
    /// </summary>
    public partial class ResourceGroup : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the ResourceGroup class.
        /// </summary>
        public ResourceGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResourceGroup class.
        /// </summary>

        /// <param name="id">The ID of the resource group.
        /// </param>

        /// <param name="name">The name of the resource group.
        /// </param>

        /// <param name="type">The type of the resource group.
        /// </param>

        /// <param name="properties">The resource group properties.
        /// </param>

        /// <param name="location">The location of the resource group. It cannot be changed after the resource
        /// group has been created. It must be one of the supported Azure locations.
        /// </param>

        /// <param name="managedBy">The ID of the resource that manages this resource group.
        /// </param>

        /// <param name="tags">The tags attached to the resource group.
        /// </param>
        public ResourceGroup(string location, string id = default(string), string name = default(string), string type = default(string), ResourceGroupProperties properties = default(ResourceGroupProperties), string managedBy = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Properties = properties;
            this.Location = location;
            this.ManagedBy = managedBy;
            this.Tags = tags;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the name of the resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the type of the resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets the resource group properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties")]
        public ResourceGroupProperties Properties {get; set; }

        /// <summary>
        /// Gets or sets the location of the resource group. It cannot be changed after
        /// the resource group has been created. It must be one of the supported Azure
        /// locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets the ID of the resource that manages this resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedBy")]
        public string ManagedBy {get; set; }

        /// <summary>
        /// Gets or sets the tags attached to the resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }







        }
    }
}