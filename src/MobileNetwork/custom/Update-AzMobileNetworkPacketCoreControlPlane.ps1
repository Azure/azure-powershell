
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates packet core control planes.
.Description
Updates packet core control planes.
.Example
Update-AzMobileNetworkPacketCoreControlPlane -PacketCoreControlPlaneName azps-mn-pccp -ResourceGroupName azps_test_group -Tag @{"abc"="123"}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IMobileNetworkIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPacketCoreControlPlane
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IMobileNetworkIdentity>: Identity Parameter
  [AttachedDataNetworkName <String>]: The name of the attached data network.
  [DataNetworkName <String>]: The name of the data network.
  [Id <String>]: Resource identity path
  [MobileNetworkName <String>]: The name of the mobile network.
  [PacketCoreControlPlaneName <String>]: The name of the packet core control plane.
  [PacketCoreDataPlaneName <String>]: The name of the packet core data plane.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [ServiceName <String>]: The name of the service. You must not use any of the following reserved strings - 'default', 'requested' or 'service'
  [SimGroupName <String>]: The name of the SIM Group.
  [SimName <String>]: The name of the SIM.
  [SimPolicyName <String>]: The name of the SIM policy.
  [SiteName <String>]: The name of the mobile network site.
  [SliceName <String>]: The name of the network slice.
  [SubscriptionId <String>]: The ID of the target subscription.
  [VersionName <String>]: The name of the packet core control plane version.
.Link
https://learn.microsoft.com/powershell/module/az.mobilenetwork/update-azmobilenetworkpacketcorecontrolplane
#>
function Update-AzMobileNetworkPacketCoreControlPlane {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPacketCoreControlPlane])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [System.String]
    # The name of the packet core control plane.
    ${PacketCoreControlPlaneName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType]
    # How to authenticate users who access local diagnostics APIs.
    ${LocalDiagnosticAccessAuthenticationType},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType]
    # The platform type where packet core is deployed.
    ${PlatformType},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.ISiteResourceId[]]
    # Site(s) under which this packet core control plane should be deployed.
    # The sites must be in the same location as the packet core control plane.
    # To construct, see NOTES section for SITE properties and create a hash table.
    ${Site},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku])]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku]
    # The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
    ${Sku},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # Azure Stack Edge device resource ID.
    ${AzureStackEdgeDeviceId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # Azure Stack HCI cluster resource ID.
    ${AzureStackHciClusterId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # Azure Arc connected cluster resource ID.
    ${ConnectedClusterId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The IPv4 address.
    ${ControlPlaneAccessInterfaceIpv4Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The default IPv4 gateway (router).
    ${ControlPlaneAccessInterfaceIpv4Gateway},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The IPv4 subnet.
    ${ControlPlaneAccessInterfaceIpv4Subnet},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The logical name for this interface.
    # This should match one of the interfaces configured on your Azure Stack Edge device.
    ${ControlPlaneAccessInterfaceName},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType]
    # The core network technology generation (5G core or EPC / 4G core).
    ${CoreNetworkTechnology},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # Azure Arc custom location resource ID.
    ${CustomLocationId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The certificate URL, unversioned.
    # For example: https://contosovault.vault.azure.net/certificates/ingress.
    ${HttpsServerCertificateUrl},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ManagedServiceIdentityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ManagedServiceIdentityType]
    # Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    ${IdentityType},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The set of user assigned identities associated with the resource.
    # The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
    # The dictionary values can be empty objects ({}) in requests.
    ${IdentityUserAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPacketCoreControlPlanePropertiesFormatInteropSettings]))]
    [System.Collections.Hashtable]
    # Settings to allow interoperability with third party components e.g.
    # RANs and UEs.
    ${InteropSetting},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # The MTU (in bytes) signaled to the UE.
    # The same MTU is set on the user plane data links for all data networks.
    # The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
    ${UeMtu},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The version of the packet core software that is deployed.
    ${Version},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.ITagsObjectTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

    process {
        try {
            $packetCoreControlPlane = Get-AzMobileNetworkPacketCoreControlPlane -ResourceGroupName $PSBoundParameters.ResourceGroupName -Name $PSBoundParameters.PacketCoreControlPlaneName
            $PSBoundParameters.Add('Location', $packetCoreControlPlane.Location)

            if (!$PSBoundParameters.ContainsKey('LocalDiagnosticAccessAuthenticationType') -and $packetCoreControlPlane.LocalDiagnosticAccessAuthenticationType) {
                $PSBoundParameters.LocalDiagnosticAccessAuthenticationType = $packetCoreControlPlane.LocalDiagnosticAccessAuthenticationType
            }
            if (!$PSBoundParameters.ContainsKey('PlatformType') -and $packetCoreControlPlane.PlatformType) {
                $PSBoundParameters.PlatformType = $packetCoreControlPlane.PlatformType
            }
            if (!$PSBoundParameters.ContainsKey('Site') -and $packetCoreControlPlane.Site) {
                $PSBoundParameters.Site = $packetCoreControlPlane.Site
            }
            if (!$PSBoundParameters.ContainsKey('Sku') -and $packetCoreControlPlane.Sku) {
                $PSBoundParameters.Sku = $packetCoreControlPlane.Sku
            }
            if (!$PSBoundParameters.ContainsKey('AzureStackEdgeDeviceId') -and $packetCoreControlPlane.AzureStackEdgeDeviceId) {
                $PSBoundParameters.AzureStackEdgeDeviceId = $packetCoreControlPlane.AzureStackEdgeDeviceId
            }
            if (!$PSBoundParameters.ContainsKey('AzureStackHciClusterId') -and $packetCoreControlPlane.AzureStackHciClusterId) {
                $PSBoundParameters.AzureStackHciClusterId = $packetCoreControlPlane.AzureStackHciClusterId
            }
            if (!$PSBoundParameters.ContainsKey('ConnectedClusterId') -and $packetCoreControlPlane.ConnectedClusterId) {
                $PSBoundParameters.ConnectedClusterId = $packetCoreControlPlane.ConnectedClusterId
            }
            if (!$PSBoundParameters.ContainsKey('ControlPlaneAccessInterfaceIpv4Address') -and $packetCoreControlPlane.ControlPlaneAccessInterfaceIpv4Address) {
                $PSBoundParameters.ControlPlaneAccessInterfaceIpv4Address = $packetCoreControlPlane.ControlPlaneAccessInterfaceIpv4Address
            }
            if (!$PSBoundParameters.ContainsKey('ControlPlaneAccessInterfaceIpv4Gateway') -and $packetCoreControlPlane.ControlPlaneAccessInterfaceIpv4Gateway) {
                $PSBoundParameters.ControlPlaneAccessInterfaceIpv4Gateway = $packetCoreControlPlane.ControlPlaneAccessInterfaceIpv4Gateway
            }
            if (!$PSBoundParameters.ContainsKey('ControlPlaneAccessInterfaceIpv4Subnet') -and $packetCoreControlPlane.ControlPlaneAccessInterfaceIpv4Subnet) {
                $PSBoundParameters.ControlPlaneAccessInterfaceIpv4Subnet = $packetCoreControlPlane.ControlPlaneAccessInterfaceIpv4Subnet
            }
            if (!$PSBoundParameters.ContainsKey('ControlPlaneAccessInterfaceName') -and $packetCoreControlPlane.ControlPlaneAccessInterfaceName) {
                $PSBoundParameters.ControlPlaneAccessInterfaceName = $packetCoreControlPlane.ControlPlaneAccessInterfaceName
            }
            if (!$PSBoundParameters.ContainsKey('CoreNetworkTechnology') -and $packetCoreControlPlane.CoreNetworkTechnology) {
                $PSBoundParameters.CoreNetworkTechnology = $packetCoreControlPlane.CoreNetworkTechnology
            }
            if (!$PSBoundParameters.ContainsKey('CustomLocationId') -and $packetCoreControlPlane.CustomLocationId) {
                $PSBoundParameters.CustomLocationId = $packetCoreControlPlane.CustomLocationId
            }
            if (!$PSBoundParameters.ContainsKey('HttpsServerCertificateUrl') -and $packetCoreControlPlane.HttpsServerCertificateUrl) {
                $PSBoundParameters.HttpsServerCertificateUrl = $packetCoreControlPlane.HttpsServerCertificateUrl
            }
            if (!$PSBoundParameters.ContainsKey('UeMtu') -and $packetCoreControlPlane.UeMtu) {
                $PSBoundParameters.UeMtu = $packetCoreControlPlane.UeMtu
            }
            if (!$PSBoundParameters.ContainsKey('Version') -and $packetCoreControlPlane.Version) {
                $PSBoundParameters.Version = $packetCoreControlPlane.Version
            }

            if ('NONE' -ieq $IdentityType.ToString()) {
                $PSBoundParameters.IdentityType = 'None'
                $null = $PSBoundParameters.Remove('IdentityUserAssignedIdentity')
            } else {
                if (!$PSBoundParameters.ContainsKey('IdentityType') -and $packetCoreControlPlane.IdentityType) {
                    $PSBoundParameters.IdentityType = $packetCoreControlPlane.IdentityType
                }
                if (!$PSBoundParameters.ContainsKey('IdentityUserAssignedIdentity')) {
                    $PSBoundParameters.IdentityUserAssignedIdentity = $packetCoreControlPlane.IdentityUserAssignedIdentity
                }
            }

            if (!$PSBoundParameters.ContainsKey('InteropSetting')) {
                $PSBoundParameters.InteropSetting = $packetCoreControlPlane.InteropSetting
            }
            if (!$PSBoundParameters.ContainsKey('Tag')) {
                $PSBoundParameters.Tag = $packetCoreControlPlane.Tag
            }

            Az.MobileNetwork.private\New-AzMobileNetworkPacketCoreControlPlane_CreateExpanded @PSBoundParameters
        }
        catch {
            throw
        }
    }
}
