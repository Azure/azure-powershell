
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Creates or updates a mobile network site.
Must be created in the same location as its parent mobile network.
.Description
Creates or updates a mobile network site.
Must be created in the same location as its parent mobile network.
.Example
New-AzMobileNetworkSite -MobileNetworkName azps-mn -Name azps-mn-site -ResourceGroupName azps_test_group -Location eastus -Tag @{"site"="123"}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.ISite
.Link
https://learn.microsoft.com/powershell/module/az.mobilenetwork/new-azmobilenetworksite
#>
function New-AzMobileNetworkSite {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.ISite])]
    [CmdletBinding(DefaultParameterSetName = 'CreateExpanded', PositionalBinding = $false, SupportsShouldProcess, ConfirmImpact = 'Medium')]
    param(
        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
        [System.String]
        # The name of the mobile network.
        ${MobileNetworkName},

        [Parameter(Mandatory)]
        [Alias('SiteName')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
        [System.String]
        # The name of the mobile network site.
        ${Name},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        ${SubscriptionId},

        [Parameter(Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The geo-location where the resource lives
        ${Location},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(PossibleTypes = ([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceTags]))]
        [System.Collections.Hashtable]
        # Resource tags.
        ${Tag},

        # New-AzMobileNetworkPacketCoreControlPlane
        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType])]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.PlatformType]
        # The platform type where packet core is deployed.
        ${PlatformType},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The logical name for this interface.
        # This should match one of the interfaces configured on your Azure Stack Edge device.
        ${ControlPlaneAccessInterfaceName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The IPv4 address.
        ${ControlPlaneAccessInterfaceIpv4Address},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The default IPv4 gateway (router).
        ${ControlPlaneAccessInterfaceIpv4Gateway},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The IPv4 subnet.
        ${ControlPlaneAccessInterfaceIpv4Subnet},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # Azure Arc custom location resource ID.
        ${CustomLocationId},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # Azure Stack Edge device resource ID.
        ${AzureStackEdgeDeviceId},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType])]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.AuthenticationType]
        # How to authenticate users who access local diagnostics APIs.
        ${LocalDiagnosticAccessAuthenticationType},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType])]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CoreNetworkType]
        # The core network technology generation (5G core or EPC / 4G core).
        ${CoreNetworkTechnology},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku])]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.BillingSku]
        # The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        ${Sku},

        # New-AzMobileNetworkPacketCoreDataPlane
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The IPv4 address.
        ${UserPlaneAccessInterfaceIpv4Address},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The default IPv4 gateway (router).
        ${UserPlaneAccessInterfaceIpv4Gateway},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The IPv4 subnet.
        ${UserPlaneAccessInterfaceIpv4Subnet},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The logical name for this interface.
        # This should match one of the interfaces configured on your Azure Stack Edge device.
        ${UserPlaneAccessInterfaceName},

        # New-AzMobileNetworkAttachedDataNetwork
        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String[]]
        # The DNS servers to signal to UEs to use for this attached data network.
        # This configuration is mandatory - if you don't want DNS servers, you must provide an empty array.
        ${DnsAddress},

        [Parameter()]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled])]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled]
        # Whether NAPT is enabled for connections to this attached data network.
        ${NaptConfigurationEnabled},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The IPv4 address.
        ${UserPlaneDataInterfaceIpv4Address},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The default IPv4 gateway (router).
        ${UserPlaneDataInterfaceIpv4Gateway},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The IPv4 subnet.
        ${UserPlaneDataInterfaceIpv4Subnet},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String]
        # The logical name for this interface.
        # This should match one of the interfaces configured on your Azure Stack Edge device.
        ${UserPlaneDataInterfaceName},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String[]]
        # The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
        # You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix.
        # If you define both, they must be of the same size.
        ${UserEquipmentAddressPoolPrefix},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
        [System.String[]]
        # The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
        # The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined.
        # If both are defined, they must be of the same size.
        ${UserEquipmentStaticAddressPoolPrefix},

        # New-AzMobileNetworkDataNetwork
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
        [System.String]
        # The name of the data network.
        ${DataNetworkName},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        try {
            # Remove all user input parameters.
            $hasDataNetworkName = $PSBoundParameters.Remove('DataNetworkName')

            $hasPlatformType = $PSBoundParameters.Remove('PlatformType')
            $hasControlPlaneAccessInterfaceName = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceName')
            $hasControlPlaneAccessInterfaceIpv4Address = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceIpv4Address')
            $hasControlPlaneAccessInterfaceIpv4Gateway = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceIpv4Gateway')
            $hasControlPlaneAccessInterfaceIpv4Subnet = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceIpv4Subnet')
            $hasCustomLocationId = $PSBoundParameters.Remove('CustomLocationId')
            $hasAzureStackEdgeDeviceId = $PSBoundParameters.Remove('AzureStackEdgeDeviceId')
            $hasLocalDiagnosticAccessAuthenticationType = $PSBoundParameters.Remove('LocalDiagnosticAccessAuthenticationType')
            $hasCoreNetworkTechnology = $PSBoundParameters.Remove('CoreNetworkTechnology')
            $hasSku = $PSBoundParameters.Remove('Sku')

            $hasUserPlaneAccessInterfaceIpv4Address = $PSBoundParameters.Remove('UserPlaneAccessInterfaceIpv4Address')
            $hasUserPlaneAccessInterfaceIpv4Gateway = $PSBoundParameters.Remove('UserPlaneAccessInterfaceIpv4Gateway')
            $hasUserPlaneAccessInterfaceIpv4Subnet = $PSBoundParameters.Remove('UserPlaneAccessInterfaceIpv4Subnet')
            $hasUserPlaneAccessInterfaceName = $PSBoundParameters.Remove('UserPlaneAccessInterfaceName')

            $hasDnsAddress = $PSBoundParameters.Remove('DnsAddress')
            $hasNaptConfigurationEnabled = $PSBoundParameters.Remove('NaptConfigurationEnabled')
            $hasUserPlaneDataInterfaceIpv4Address = $PSBoundParameters.Remove('UserPlaneDataInterfaceIpv4Address')
            $hasUserPlaneDataInterfaceIpv4Gateway = $PSBoundParameters.Remove('UserPlaneDataInterfaceIpv4Gateway')
            $hasUserPlaneDataInterfaceIpv4Subnet = $PSBoundParameters.Remove('UserPlaneDataInterfaceIpv4Subnet')
            $hasUserPlaneDataInterfaceName = $PSBoundParameters.Remove('UserPlaneDataInterfaceName')
            $hasUserEquipmentAddressPoolPrefix = $PSBoundParameters.Remove('UserEquipmentAddressPoolPrefix')
            $hasUserEquipmentStaticAddressPoolPrefix = $PSBoundParameters.Remove('UserEquipmentStaticAddressPoolPrefix')

            # Create Azure MobileNetwork Site
            Az.MobileNetwork.private\New-AzMobileNetworkSite_CreateExpanded @PSBoundParameters

            # New-AzMobileNetworkDataNetwork
            $null = $PSBoundParameters.Remove('Name')
            if ($hasDataNetworkName) {

                $PSBoundParameters.Add('Name', $DataNetworkName)

                Az.MobileNetwork.private\New-AzMobileNetworkDataNetwork_CreateExpanded @PSBoundParameters
            }

            # New-AzMobileNetworkPacketCoreControlPlane
            $null = $PSBoundParameters.Remove('MobileNetworkName')
            $null = $PSBoundParameters.Remove('DataNetworkName')
            $null = $PSBoundParameters.Remove('Name')
            if ($hasPlatformType -And $hasControlPlaneAccessInterfaceName `
                    -And $hasControlPlaneAccessInterfaceIpv4Address -And (($hasControlPlaneAccessInterfaceIpv4Gateway `
                    -And $hasControlPlaneAccessInterfaceIpv4Subnet) -Or $hasAzureStackEdgeDeviceId) `
                    -And $hasLocalDiagnosticAccessAuthenticationType -And $hasCoreNetworkTechnology -And $hasSku) {

                $SiteResourceId = New-AzMobileNetworkSiteResourceIdObject -Id "/subscriptions/$SubscriptionId/resourceGroups/$ResourceGroupName/providers/Microsoft.MobileNetwork/mobileNetworks/$MobileNetworkName/sites/$Name"
                $PSBoundParameters.Add('Site', $SiteResourceId)
                $PSBoundParameters.Add('Name', $Name + '-PacketCoreControlPlane')

                $PSBoundParameters.Add('PlatformType', $PlatformType)
                $PSBoundParameters.Add('ControlPlaneAccessInterfaceName', $ControlPlaneAccessInterfaceName)
                $PSBoundParameters.Add('ControlPlaneAccessInterfaceIpv4Address', $ControlPlaneAccessInterfaceIpv4Address)

                if ($hasControlPlaneAccessInterfaceIpv4Gateway) {
                    $PSBoundParameters.Add('ControlPlaneAccessInterfaceIpv4Gateway', $ControlPlaneAccessInterfaceIpv4Gateway)
                }

                if ($hasControlPlaneAccessInterfaceIpv4Subnet) {
                    $PSBoundParameters.Add('ControlPlaneAccessInterfaceIpv4Subnet', $ControlPlaneAccessInterfaceIpv4Subnet)
                }

                if ($hasAzureStackEdgeDeviceId) {
                    $PSBoundParameters.Add('AzureStackEdgeDeviceId', $AzureStackEdgeDeviceId)
                }

                $PSBoundParameters.Add('LocalDiagnosticAccessAuthenticationType', $LocalDiagnosticAccessAuthenticationType)
                $PSBoundParameters.Add('CoreNetworkTechnology', $CoreNetworkTechnology)
                $PSBoundParameters.Add('Sku', $Sku)

                if ($hasCustomLocationId) {
                    $PSBoundParameters.Add('CustomLocationId', $CustomLocationId)
                }

                Az.MobileNetwork.private\New-AzMobileNetworkPacketCoreControlPlane_CreateExpanded @PSBoundParameters

                # New-AzMobileNetworkPacketCoreDataPlane
                $null = $PSBoundParameters.Remove('Site')
                $null = $PSBoundParameters.Remove('Name')
                $null = $PSBoundParameters.Remove('PlatformType')
                $null = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceName')
                $null = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceIpv4Address')
                $null = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceIpv4Gateway')
                $null = $PSBoundParameters.Remove('ControlPlaneAccessInterfaceIpv4Subnet')
                $null = $PSBoundParameters.Remove('CustomLocationId')
                $null = $PSBoundParameters.Remove('AzureStackEdgeDeviceId')
                $null = $PSBoundParameters.Remove('LocalDiagnosticAccessAuthenticationType')
                $null = $PSBoundParameters.Remove('CoreNetworkTechnology')
                $null = $PSBoundParameters.Remove('Sku')
                if ((($hasUserPlaneAccessInterfaceIpv4Address -And $hasUserPlaneAccessInterfaceIpv4Gateway `
                        -And $hasUserPlaneAccessInterfaceIpv4Subnet) -Or $hasAzureStackEdgeDeviceId) -And $hasUserPlaneAccessInterfaceName) {

                    if ($hasUserPlaneAccessInterfaceIpv4Address) {
                        $PSBoundParameters.Add('UserPlaneAccessInterfaceIpv4Address', $UserPlaneAccessInterfaceIpv4Address)
                    }

                    if ($hasUserPlaneAccessInterfaceIpv4Gateway) {
                        $PSBoundParameters.Add('UserPlaneAccessInterfaceIpv4Gateway', $UserPlaneAccessInterfaceIpv4Gateway)
                    }

                    if ($hasUserPlaneAccessInterfaceIpv4Subnet) {
                        $PSBoundParameters.Add('UserPlaneAccessInterfaceIpv4Subnet', $UserPlaneAccessInterfaceIpv4Subnet)
                    }

                    $PSBoundParameters.Add('UserPlaneAccessInterfaceName', $UserPlaneAccessInterfaceName)
                    $PSBoundParameters.Add('PacketCoreControlPlane', $Name + '-PacketCoreControlPlane')
                    $PSBoundParameters.Add('Name', $Name + '-PacketCoreDataPlane')

                    Az.MobileNetwork.private\New-AzMobileNetworkPacketCoreDataPlane_CreateExpanded @PSBoundParameters

                    # New-AzMobileNetworkAttachedDataNetwork
                    $null = $PSBoundParameters.Remove('UserPlaneAccessInterfaceIpv4Address')
                    $null = $PSBoundParameters.Remove('UserPlaneAccessInterfaceIpv4Gateway')
                    $null = $PSBoundParameters.Remove('UserPlaneAccessInterfaceIpv4Subnet')
                    $null = $PSBoundParameters.Remove('UserPlaneAccessInterfaceName')
                    $null = $PSBoundParameters.Remove('PacketCoreControlPlane')
                    $null = $PSBoundParameters.Remove('Name')
                    if ($hasDnsAddress -And (($hasUserPlaneDataInterfaceIpv4Address -And $hasUserPlaneDataInterfaceIpv4Gateway `
                            -And $hasUserPlaneDataInterfaceIpv4Subnet) -Or $hasAzureStackEdgeDeviceId) -And $hasUserPlaneDataInterfaceName `
                            -And ($hasUserEquipmentStaticAddressPoolPrefix -Or $hasUserEquipmentAddressPoolPrefix)) {

                        $PSBoundParameters.Add('DnsAddress', $DnsAddress)

                        if ($hasUserPlaneDataInterfaceIpv4Address) {
                            $PSBoundParameters.Add('UserPlaneDataInterfaceIpv4Address', $UserPlaneDataInterfaceIpv4Address)
                        }

                        if ($hasUserPlaneDataInterfaceIpv4Gateway) {
                            $PSBoundParameters.Add('UserPlaneDataInterfaceIpv4Gateway', $UserPlaneDataInterfaceIpv4Gateway)
                        }

                        if ($hasUserPlaneDataInterfaceIpv4Subnet) {
                            $PSBoundParameters.Add('UserPlaneDataInterfaceIpv4Subnet', $UserPlaneDataInterfaceIpv4Subnet)
                        }

                        $PSBoundParameters.Add('UserPlaneDataInterfaceName', $UserPlaneDataInterfaceName)
                        $PSBoundParameters.Add('PacketCoreControlPlaneName', $Name + '-PacketCoreControlPlane')
                        $PSBoundParameters.Add('PacketCoreDataPlaneName', $Name + '-PacketCoreDataPlane')
                        $PSBoundParameters.Add('Name', $DataNetworkName)

                        if ($hasNaptConfigurationEnabled) {
                            $PSBoundParameters.Add('NaptConfigurationEnabled', $NaptConfigurationEnabled)
                        }
                        if ($hasUserEquipmentStaticAddressPoolPrefix) {
                            $PSBoundParameters.Add('UserEquipmentStaticAddressPoolPrefix', $UserEquipmentStaticAddressPoolPrefix)
                        }
                        if ($hasUserEquipmentAddressPoolPrefix) {
                            $PSBoundParameters.Add('UserEquipmentAddressPoolPrefix', $UserEquipmentAddressPoolPrefix)
                        }

                        Az.MobileNetwork.private\New-AzMobileNetworkAttachedDataNetwork_CreateExpanded @PSBoundParameters
                    }
                    elseif ($hasDnsAddress -Or $hasUserPlaneDataInterfaceIpv4Address -Or $hasUserPlaneDataInterfaceIpv4Gateway `
                            -Or $hasUserPlaneDataInterfaceIpv4Subnet -Or $hasUserPlaneDataInterfaceName `
                            -Or $hasUserEquipmentStaticAddressPoolPrefix -Or $hasUserEquipmentAddressPoolPrefix) {
                        Write-Warning "In order to create a Mobile Network Attached Data Network successfully, please ensure that parameters [-DnsAddress] and [-UserPlaneDataInterfaceName] is correctly filled, at least one of [-UserEquipmentStaticAddressPoolPrefix] or [-UserEquipmentAddressPoolPrefix], and either all of [-UserPlaneDataInterfaceIpv4Address], [-UserPlaneDataInterfaceIpv4Gateway] and [-UserPlaneDataInterfaceIpv4Subnet], or [-AzureStackEdgeDeviceId]."
                    }
                }
                elseif ($hasUserPlaneAccessInterfaceIpv4Address -Or $hasUserPlaneAccessInterfaceIpv4Gateway `
                        -Or $hasUserPlaneAccessInterfaceIpv4Subnet -Or $hasUserPlaneAccessInterfaceName) {
                    Write-Warning "In order to create a Mobile Network Packet Core Data Plane successfully, please ensure that parameters [-UserPlaneAccessInterfaceName] is correctly filled, and either all of [-UserPlaneAccessInterfaceIpv4Address], [-UserPlaneAccessInterfaceIpv4Gateway] and [-UserPlaneAccessInterfaceIpv4Subnet], or [-AzureStackEdgeDeviceId]."
                }
            }
            elseif ($hasPlatformType -Or $hasControlPlaneAccessInterfaceName `
                    -Or $hasControlPlaneAccessInterfaceIpv4Address -Or $hasControlPlaneAccessInterfaceIpv4Gateway `
                    -Or $hasControlPlaneAccessInterfaceIpv4Subnet -Or $hasAzureStackEdgeDeviceId `
                    -Or $hasLocalDiagnosticAccessAuthenticationType -Or $hasCoreNetworkTechnology -Or $hasSku) {
                Write-Warning "In order to create a Mobile Network Packet Core Control Plane successfully, please ensure that parameters [-PlatformType], [-ControlPlaneAccessInterfaceName], [-ControlPlaneAccessInterfaceIpv4Address], [-AzureStackEdgeDeviceId], [-LocalDiagnosticAccessAuthenticationType], [-CoreNetworkTechnology], [-Sku] are correctly filled, and either [-ControlPlaneAccessInterfaceIpv4Gateway] and [-ControlPlaneAccessInterfaceIpv4Subnet], or [-AzureStackEdgeDeviceId]."
            }
        }
        catch {
            throw
        }
    }
}
