
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Updates an attached data network.
.Description
Updates an attached data network.
.Example
Update-AzMobileNetworkAttachedDataNetwork -AttachedDataNetworkName azps-mn-adn -PacketCoreControlPlaneName azps-mn-pccp -PacketCoreDataPlaneName azps_test_group -ResourceGroupName -Tag @{"abc"="123"}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IMobileNetworkIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetwork
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IMobileNetworkIdentity>: Identity Parameter
  [AttachedDataNetworkName <String>]: The name of the attached data network.
  [DataNetworkName <String>]: The name of the data network.
  [Id <String>]: Resource identity path
  [MobileNetworkName <String>]: The name of the mobile network.
  [PacketCoreControlPlaneName <String>]: The name of the packet core control plane.
  [PacketCoreDataPlaneName <String>]: The name of the packet core data plane.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [ServiceName <String>]: The name of the service. You must not use any of the following reserved strings - 'default', 'requested' or 'service'
  [SimGroupName <String>]: The name of the SIM Group.
  [SimName <String>]: The name of the SIM.
  [SimPolicyName <String>]: The name of the SIM policy.
  [SiteName <String>]: The name of the mobile network site.
  [SliceName <String>]: The name of the network slice.
  [SubscriptionId <String>]: The ID of the target subscription.
  [VersionName <String>]: The name of the packet core control plane version.
.Link
https://learn.microsoft.com/powershell/module/az.mobilenetwork/update-azmobilenetworkattacheddatanetwork
#>
function Update-AzMobileNetworkAttachedDataNetwork {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetwork])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [System.String]
    # The name of the attached data network.
    ${AttachedDataNetworkName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [System.String]
    # The name of the packet core control plane.
    ${PacketCoreControlPlaneName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [System.String]
    # The name of the packet core data plane.
    ${PacketCoreDataPlaneName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String[]]
    # The DNS servers to signal to UEs to use for this attached data network.
    # This configuration is mandatory - if you don't want DNS servers, you must provide an empty array.
    ${DnsAddress},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled])]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled]
    # Whether NAPT is enabled for connections to this attached data network.
    ${NaptConfigurationEnabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface.
    # For 5G networks, this is the N6 interface.
    # For 4G networks, this is the SGi interface.
    ${NaptConfigurationPinholeLimit},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # Pinhole timeout for ICMP pinholes in seconds.
    # Default for ICMP Echo is 30 seconds.
    ${PinholeTimeoutIcmp},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # Pinhole timeout for TCP pinholes in seconds.
    # Default for TCP is 3 minutes.
    ${PinholeTimeoutTcp},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # Pinhole timeout for UDP pinholes in seconds.
    # Default for UDP is 30 seconds.
    ${PinholeTimeoutUdp},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # The maximum port number
    ${PortRangeMaxPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # The minimum port number
    ${PortRangeMinPort},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused.
    # Default for TCP is 2 minutes.
    ${PortReuseHoldTimeTcp},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.Int32]
    # Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused.
    # Default for UDP is 1 minute.
    ${PortReuseHoldTimeUdp},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String[]]
    # The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
    # You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix.
    # If you define both, they must be of the same size.
    ${UserEquipmentAddressPoolPrefix},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String[]]
    # The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
    # The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined.
    # If both are defined, they must be of the same size.
    ${UserEquipmentStaticAddressPoolPrefix},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The IPv4 address.
    ${UserPlaneDataInterfaceIpv4Address},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The default IPv4 gateway (router).
    ${UserPlaneDataInterfaceIpv4Gateway},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The IPv4 subnet.
    ${UserPlaneDataInterfaceIpv4Subnet},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [System.String]
    # The logical name for this interface.
    # This should match one of the interfaces configured on your Azure Stack Edge device.
    ${UserPlaneDataInterfaceName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.ITagsObjectTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

    process {
        try {
            $attachedDataNetwork = Get-AzMobileNetworkAttachedDataNetwork -PacketCoreControlPlaneName $PSBoundParameters.PacketCoreControlPlaneName -PacketCoreDataPlaneName $PSBoundParameters.PacketCoreDataPlaneName -ResourceGroupName $PSBoundParameters.ResourceGroupName -Name $PSBoundParameters.AttachedDataNetworkName 
            $PSBoundParameters.Add('Location', $attachedDataNetwork.Location)

            if (!$PSBoundParameters.ContainsKey('DnsAddress') -and $attachedDataNetwork.DnsAddress) {
                $PSBoundParameters.DnsAddress = $attachedDataNetwork.DnsAddress
            }
            if (!$PSBoundParameters.ContainsKey('NaptConfigurationEnabled') -and $attachedDataNetwork.NaptConfigurationEnabled) {
                $PSBoundParameters.NaptConfigurationEnabled = $attachedDataNetwork.NaptConfigurationEnabled
            }
            if (!$PSBoundParameters.ContainsKey('NaptConfigurationPinholeLimit') -and $attachedDataNetwork.NaptConfigurationPinholeLimit) {
                $PSBoundParameters.NaptConfigurationPinholeLimit = $attachedDataNetwork.NaptConfigurationPinholeLimit
            }
            if (!$PSBoundParameters.ContainsKey('PinholeTimeoutIcmp') -and $attachedDataNetwork.PinholeTimeoutIcmp) {
                $PSBoundParameters.PinholeTimeoutIcmp = $attachedDataNetwork.PinholeTimeoutIcmp
            }
            if (!$PSBoundParameters.ContainsKey('PinholeTimeoutTcp') -and $attachedDataNetwork.PinholeTimeoutTcp) {
                $PSBoundParameters.PinholeTimeoutTcp = $attachedDataNetwork.PinholeTimeoutTcp
            }
            if (!$PSBoundParameters.ContainsKey('PinholeTimeoutUdp') -and $attachedDataNetwork.PinholeTimeoutUdp) {
                $PSBoundParameters.PinholeTimeoutUdp = $attachedDataNetwork.PinholeTimeoutUdp
            }
            if (!$PSBoundParameters.ContainsKey('PortRangeMaxPort') -and $attachedDataNetwork.PortRangeMaxPort) {
                $PSBoundParameters.PortRangeMaxPort = $attachedDataNetwork.PortRangeMaxPort
            }
            if (!$PSBoundParameters.ContainsKey('PortRangeMinPort') -and $attachedDataNetwork.PortRangeMinPort) {
                $PSBoundParameters.PortRangeMinPort = $attachedDataNetwork.PortRangeMinPort
            }
            if (!$PSBoundParameters.ContainsKey('PortReuseHoldTimeTcp') -and $attachedDataNetwork.PortReuseHoldTimeTcp) {
                $PSBoundParameters.PortReuseHoldTimeTcp = $attachedDataNetwork.PortReuseHoldTimeTcp
            }
            if (!$PSBoundParameters.ContainsKey('PortReuseHoldTimeUdp') -and $attachedDataNetwork.PortReuseHoldTimeUdp) {
                $PSBoundParameters.PortReuseHoldTimeUdp = $attachedDataNetwork.PortReuseHoldTimeUdp
            }
            if (!$PSBoundParameters.ContainsKey('UserEquipmentAddressPoolPrefix') -and $attachedDataNetwork.UserEquipmentAddressPoolPrefix) {
                $PSBoundParameters.UserEquipmentAddressPoolPrefix = $attachedDataNetwork.UserEquipmentAddressPoolPrefix
            }
            if (!$PSBoundParameters.ContainsKey('UserEquipmentStaticAddressPoolPrefix') -and $attachedDataNetwork.UserEquipmentStaticAddressPoolPrefix) {
                $PSBoundParameters.UserEquipmentStaticAddressPoolPrefix = $attachedDataNetwork.UserEquipmentStaticAddressPoolPrefix
            }
            if (!$PSBoundParameters.ContainsKey('UserPlaneDataInterfaceIpv4Address') -and $attachedDataNetwork.UserPlaneDataInterfaceIpv4Address) {
                $PSBoundParameters.UserPlaneDataInterfaceIpv4Address = $attachedDataNetwork.UserPlaneDataInterfaceIpv4Address
            }
            if (!$PSBoundParameters.ContainsKey('UserPlaneDataInterfaceIpv4Gateway') -and $attachedDataNetwork.UserPlaneDataInterfaceIpv4Gateway) {
                $PSBoundParameters.UserPlaneDataInterfaceIpv4Gateway = $attachedDataNetwork.UserPlaneDataInterfaceIpv4Gateway
            }
            if (!$PSBoundParameters.ContainsKey('UserPlaneDataInterfaceIpv4Subnet') -and $attachedDataNetwork.UserPlaneDataInterfaceIpv4Subnet) {
                $PSBoundParameters.UserPlaneDataInterfaceIpv4Subnet = $attachedDataNetwork.UserPlaneDataInterfaceIpv4Subnet
            }
            if (!$PSBoundParameters.ContainsKey('UserPlaneDataInterfaceName') -and $attachedDataNetwork.UserPlaneDataInterfaceName) {
                $PSBoundParameters.UserPlaneDataInterfaceName = $attachedDataNetwork.UserPlaneDataInterfaceName
            }

            if (!$PSBoundParameters.ContainsKey('Tag')) {
                $PSBoundParameters.Tag = $attachedDataNetwork.Tag
            }

            Az.MobileNetwork.private\New-AzMobileNetworkAttachedDataNetwork_CreateExpanded @PSBoundParameters
        }
        catch {
            throw
        }
    }
}
