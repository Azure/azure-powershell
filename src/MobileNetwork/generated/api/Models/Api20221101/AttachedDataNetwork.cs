// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Extensions;

    /// <summary>
    /// Attached data network resource. Must be created in the same location as its parent packet core data plane.
    /// </summary>
    public partial class AttachedDataNetwork :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetwork,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.TrackedResource();

        /// <summary>
        /// The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't
        /// want DNS servers, you must provide an empty array.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string[] DnsAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).DnsAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).DnsAddress = value ; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Id; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 0)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for NaptConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.NaptConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfiguration = value; }

        /// <summary>Internal Acessors for NaptConfigurationPinholeTimeout</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeouts Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.NaptConfigurationPinholeTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPinholeTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPinholeTimeout = value; }

        /// <summary>Internal Acessors for NaptConfigurationPortRange</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRange Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.NaptConfigurationPortRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPortRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPortRange = value; }

        /// <summary>Internal Acessors for NaptConfigurationPortReuseHoldTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimes Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.NaptConfigurationPortReuseHoldTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPortReuseHoldTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPortReuseHoldTime = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormat Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.AttachedDataNetworkPropertiesFormat()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for UserPlaneDataInterface</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IInterfaceProperties Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkInternal.UserPlaneDataInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterface = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 1)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Name; }

        /// <summary>Whether NAPT is enabled for connections to this attached data network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? NaptConfigurationEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationEnabled = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled)""); }

        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is
        /// the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? NaptConfigurationPinholeLimit { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPinholeLimit; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).NaptConfigurationPinholeLimit = value ?? default(int); }

        /// <summary>
        /// Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PinholeTimeoutIcmp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PinholeTimeoutIcmp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PinholeTimeoutIcmp = value ?? default(int); }

        /// <summary>Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PinholeTimeoutTcp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PinholeTimeoutTcp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PinholeTimeoutTcp = value ?? default(int); }

        /// <summary>Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PinholeTimeoutUdp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PinholeTimeoutUdp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PinholeTimeoutUdp = value ?? default(int); }

        /// <summary>The maximum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PortRangeMaxPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortRangeMaxPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortRangeMaxPort = value ?? default(int); }

        /// <summary>The minimum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PortRangeMinPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortRangeMinPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortRangeMinPort = value ?? default(int); }

        /// <summary>
        /// Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for
        /// TCP is 2 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PortReuseHoldTimeTcp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortReuseHoldTimeTcp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortReuseHoldTimeTcp = value ?? default(int); }

        /// <summary>
        /// Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for
        /// UDP is 1 minute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? PortReuseHoldTimeUdp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortReuseHoldTimeUdp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).PortReuseHoldTimeUdp = value ?? default(int); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormat _property;

        /// <summary>Attached data network properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormat Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.AttachedDataNetworkPropertiesFormat()); set => this._property = value; }

        /// <summary>The provisioning state of the attached data network resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 3)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 2)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.IResourceInternal)__trackedResource).Type; }

        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically
        /// assign IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
        /// You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define
        /// both, they must be of the same size.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string[] UserEquipmentAddressPoolPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserEquipmentAddressPoolPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserEquipmentAddressPoolPrefix = value ?? null /* arrayOf */; }

        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign
        /// static IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a
        /// specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
        /// At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined,
        /// they must be of the same size.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string[] UserEquipmentStaticAddressPoolPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserEquipmentStaticAddressPoolPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserEquipmentStaticAddressPoolPrefix = value ?? null /* arrayOf */; }

        /// <summary>The IPv4 address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string UserPlaneDataInterfaceIpv4Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceIpv4Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceIpv4Address = value ?? null; }

        /// <summary>The default IPv4 gateway (router).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string UserPlaneDataInterfaceIpv4Gateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceIpv4Gateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceIpv4Gateway = value ?? null; }

        /// <summary>The IPv4 subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string UserPlaneDataInterfaceIpv4Subnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceIpv4Subnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceIpv4Subnet = value ?? null; }

        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string UserPlaneDataInterfaceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormatInternal)Property).UserPlaneDataInterfaceName = value ?? null; }

        /// <summary>Creates an new <see cref="AttachedDataNetwork" /> instance.</summary>
        public AttachedDataNetwork()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// Attached data network resource. Must be created in the same location as its parent packet core data plane.
    public partial interface IAttachedDataNetwork :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResource
    {
        /// <summary>
        /// The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't
        /// want DNS servers, you must provide an empty array.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't want DNS servers, you must provide an empty array.",
        SerializedName = @"dnsAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] DnsAddress { get; set; }
        /// <summary>Whether NAPT is enabled for connections to this attached data network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether NAPT is enabled for connections to this attached data network.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? NaptConfigurationEnabled { get; set; }
        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is
        /// the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface.",
        SerializedName = @"pinholeLimits",
        PossibleTypes = new [] { typeof(int) })]
        int? NaptConfigurationPinholeLimit { get; set; }
        /// <summary>
        /// Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.",
        SerializedName = @"icmp",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeTimeoutIcmp { get; set; }
        /// <summary>Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.",
        SerializedName = @"tcp",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeTimeoutTcp { get; set; }
        /// <summary>Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.",
        SerializedName = @"udp",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeTimeoutUdp { get; set; }
        /// <summary>The maximum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum port number",
        SerializedName = @"maxPort",
        PossibleTypes = new [] { typeof(int) })]
        int? PortRangeMaxPort { get; set; }
        /// <summary>The minimum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum port number",
        SerializedName = @"minPort",
        PossibleTypes = new [] { typeof(int) })]
        int? PortRangeMinPort { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for
        /// TCP is 2 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes.",
        SerializedName = @"tcp",
        PossibleTypes = new [] { typeof(int) })]
        int? PortReuseHoldTimeTcp { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for
        /// UDP is 1 minute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute.",
        SerializedName = @"udp",
        PossibleTypes = new [] { typeof(int) })]
        int? PortReuseHoldTimeUdp { get; set; }
        /// <summary>The provisioning state of the attached data network resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the attached data network resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically
        /// assign IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
        /// You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define
        /// both, they must be of the same size.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically assign IP addresses to UEs.
        The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
         You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define both, they must be of the same size.",
        SerializedName = @"userEquipmentAddressPoolPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string[] UserEquipmentAddressPoolPrefix { get; set; }
        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign
        /// static IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a
        /// specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
        /// At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined,
        /// they must be of the same size.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign static IP addresses to UEs.
        The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
        At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined, they must be of the same size.",
        SerializedName = @"userEquipmentStaticAddressPoolPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string[] UserEquipmentStaticAddressPoolPrefix { get; set; }
        /// <summary>The IPv4 address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 address.",
        SerializedName = @"ipv4Address",
        PossibleTypes = new [] { typeof(string) })]
        string UserPlaneDataInterfaceIpv4Address { get; set; }
        /// <summary>The default IPv4 gateway (router).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default IPv4 gateway (router).",
        SerializedName = @"ipv4Gateway",
        PossibleTypes = new [] { typeof(string) })]
        string UserPlaneDataInterfaceIpv4Gateway { get; set; }
        /// <summary>The IPv4 subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 subnet.",
        SerializedName = @"ipv4Subnet",
        PossibleTypes = new [] { typeof(string) })]
        string UserPlaneDataInterfaceIpv4Subnet { get; set; }
        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string UserPlaneDataInterfaceName { get; set; }

    }
    /// Attached data network resource. Must be created in the same location as its parent packet core data plane.
    internal partial interface IAttachedDataNetworkInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api30.ITrackedResourceInternal
    {
        /// <summary>
        /// The DNS servers to signal to UEs to use for this attached data network. This configuration is mandatory - if you don't
        /// want DNS servers, you must provide an empty array.
        /// </summary>
        string[] DnsAddress { get; set; }
        /// <summary>
        /// The network address and port translation (NAPT) configuration.
        /// If this is not specified, the attached data network will use a default NAPT configuration with NAPT enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfiguration NaptConfiguration { get; set; }
        /// <summary>Whether NAPT is enabled for connections to this attached data network.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? NaptConfigurationEnabled { get; set; }
        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is
        /// the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        int? NaptConfigurationPinholeLimit { get; set; }
        /// <summary>
        /// Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeouts NaptConfigurationPinholeTimeout { get; set; }
        /// <summary>
        /// Range of port numbers to use as translated ports on each translated address.
        /// If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
        /// (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above
        /// are reserved for non-NAPT use.)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRange NaptConfigurationPortRange { get; set; }
        /// <summary>
        /// The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by
        /// another pinhole. All hold times must be at least 1 second.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimes NaptConfigurationPortReuseHoldTime { get; set; }
        /// <summary>
        /// Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        /// </summary>
        int? PinholeTimeoutIcmp { get; set; }
        /// <summary>Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.</summary>
        int? PinholeTimeoutTcp { get; set; }
        /// <summary>Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.</summary>
        int? PinholeTimeoutUdp { get; set; }
        /// <summary>The maximum port number</summary>
        int? PortRangeMaxPort { get; set; }
        /// <summary>The minimum port number</summary>
        int? PortRangeMinPort { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for
        /// TCP is 2 minutes.
        /// </summary>
        int? PortReuseHoldTimeTcp { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for
        /// UDP is 1 minute.
        /// </summary>
        int? PortReuseHoldTimeUdp { get; set; }
        /// <summary>Attached data network properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IAttachedDataNetworkPropertiesFormat Property { get; set; }
        /// <summary>The provisioning state of the attached data network resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will dynamically
        /// assign IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session.
        /// You must define at least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix. If you define
        /// both, they must be of the same size.
        /// </summary>
        string[] UserEquipmentAddressPoolPrefix { get; set; }
        /// <summary>
        /// The user equipment (UE) address pool prefixes for the attached data network from which the packet core instance will assign
        /// static IP addresses to UEs.
        /// The packet core instance assigns an IP address to a UE when the UE sets up a PDU session. The static IP address for a
        /// specific UE is set in StaticIPConfiguration on the corresponding SIM resource.
        /// At least one of userEquipmentAddressPoolPrefix and userEquipmentStaticAddressPoolPrefix must be defined. If both are defined,
        /// they must be of the same size.
        /// </summary>
        string[] UserEquipmentStaticAddressPoolPrefix { get; set; }
        /// <summary>
        /// The user plane interface on the data network. For 5G networks, this is the N6 interface. For 4G networks, this is the
        /// SGi interface.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IInterfaceProperties UserPlaneDataInterface { get; set; }
        /// <summary>The IPv4 address.</summary>
        string UserPlaneDataInterfaceIpv4Address { get; set; }
        /// <summary>The default IPv4 gateway (router).</summary>
        string UserPlaneDataInterfaceIpv4Gateway { get; set; }
        /// <summary>The IPv4 subnet.</summary>
        string UserPlaneDataInterfaceIpv4Subnet { get; set; }
        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        string UserPlaneDataInterfaceName { get; set; }

    }
}