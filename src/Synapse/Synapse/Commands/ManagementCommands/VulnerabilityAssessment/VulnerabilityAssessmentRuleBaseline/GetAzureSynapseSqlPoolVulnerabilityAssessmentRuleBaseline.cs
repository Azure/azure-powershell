// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using System.Management.Automation;
using Microsoft.Azure.Commands.Synapse.Models;
using Microsoft.Azure.Commands.Synapse.Models.VulnerabilityAssessment;

namespace Microsoft.Azure.Commands.Synapse
{
    /// <summary>
    /// Returns the Vulnerability Assessment Rule Baseline of a specific SQL pool.
    /// </summary>
    [Cmdlet(VerbsCommon.Get,
        ResourceManager.Common.AzureRMConstants.AzureRMPrefix + SynapseConstants.SynapsePrefix + VulnerabilityAssessmentCommon.SqlPoolVulnerabilityAssessmentRuleBaseline),
        OutputType(typeof(SqlPoolVulnerabilityAssessmentRuleBaselineModel))]
    public class GetAzureSynapseSqlPoolVulnerabilityAssessmentRuleBaseline : GetAzureSynapseSqlVulnerabilityAssessmentRuleBaselineBase
    {
        /// <summary>
        /// Gets or sets the name of the workspace to use.
        /// </summary>
        [Parameter(Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 1,
            HelpMessage = VulnerabilityAssessmentCommon.WorkspaceNameHelpMessage)]
        [ValidateNotNullOrEmpty]
        public string WorkspaceName { get; set; }

        /// <summary>
        /// Gets or sets the name of the SQL pool to use.
        /// </summary>
        [Parameter(Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 2,
            HelpMessage = VulnerabilityAssessmentCommon.SqlPoolNameHelpMessage)]
        [Alias(nameof(SynapseConstants.SqlPoolName))]
        [ValidateNotNullOrEmpty]
        public string Name { get; set; }

        /// <summary>
        /// SQL pool resource
        /// </summary>
        [Parameter(ParameterSetName = VulnerabilityAssessmentCommon.GetByParentResourceParameterSet,
            Mandatory = false,
            ValueFromPipeline = true,
            HelpMessage = VulnerabilityAssessmentCommon.SqlPoolObjectHelpMessage)]
        [ValidateNotNullOrEmpty]
        public PSSynapseSqlPool InputObject { get; set; }

        protected override string GetResourceGroupName()
        {
            return base.GetResourceGroupName();
        }

        protected override string GetWorkspaceName()
        {
            return this.WorkspaceName;
        }

        protected override string GetSqlPoolName()
        {
            return this.Name;
        }

        protected override ApplyToType GetResourceTypeVaAppliesTo()
        {
            return ApplyToType.SqlPool;
        }

        protected override VulnerabilityAssessmentRuleBaselineModel GetEntity()
        {
            if (InputObject != null)
            {
                this.ResourceGroupName = this.InputObject.ResourceGroupName;
                this.WorkspaceName = this.InputObject.WorkspaceName;
                this.Name = this.InputObject.SqlPoolName;
            }

            return base.GetEntity();
        }

        /// <summary>
        /// Transforms the given model object to be an object that is written out
        /// </summary>
        /// <param name="model">The about to be written model object</param>
        /// <returns>The prepared object to be written out</returns>
        protected override object TransformModelToOutputObject(VulnerabilityAssessmentRuleBaselineModel model)
        {
            return new SqlPoolVulnerabilityAssessmentRuleBaselineModel(model, GetWorkspaceName(), GetSqlPoolName());
        }
    }
}
