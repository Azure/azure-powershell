using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Commands.Synapse.Models;
using Microsoft.Azure.Commands.Synapse.Properties;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using Microsoft.WindowsAzure.Commands.Utilities.Common;
using System;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Synapse
{
    [Cmdlet(VerbsData.Update, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + SynapseConstants.SynapsePrefix + SynapseConstants.SqlPool + SynapseConstants.VulnerabilityAssessmentSetting,
        DefaultParameterSetName = UpdateByStorageAccountNameAndNameParameterSet, SupportsShouldProcess = true)]
    [OutputType(typeof(SqlPoolVulnerabilityAssessmentSettingsModel))]
    public class UpdateAzureSynapseSqlPoolVulnerabilityAssessmentSetting : SynapseManagementCmdletBase
    {
        private const string UpdateByStorageAccountNameAndNameParameterSet = "UpdateByStorageAccountNameAndNameParameterSet";
        private const string UpdateByStorageAccountNameAndParentObjectParameterSet = "UpdateByStorageAccountNameAndParentObjectParameterSet";
        private const string UpdateByStorageAccountNameAndInputObjectParameterSet = "UpdateByStorageAccountNameAndInputObjectParameterSet";
        private const string UpdateByStorageAccountNameAndResourceIdParameterSet = "UpdateByStorageAccountNameAndResourceIdParameterSet";
        private const string UpdateByBlobStorageSasUriAndNameParameterSet = "UpdateByBlobStorageSasUriAndNameParameterSet";
        private const string UpdateByBlobStorageSasUriAndParentObjectParameterSet = "UpdateByBlobStorageSasUriAndParentObjectParameterSet";
        private const string UpdateByBlobStorageSasUriAndInputObjectParameterSet = "UpdateByBlobStorageSasUriAndInputObjectParameterSet";
        private const string UpdateByBlobStorageSasUriAndResourceIdParameterSet = "UpdateByBlobStorageSasUriAndResourceIdParameterSet";

        [Parameter(Mandatory = false, ParameterSetName = UpdateByStorageAccountNameAndNameParameterSet, HelpMessage = HelpMessages.ResourceGroupName)]
        [Parameter(Mandatory = false, ParameterSetName = UpdateByBlobStorageSasUriAndNameParameterSet, HelpMessage = HelpMessages.ResourceGroupName)]
        [ResourceGroupCompleter]
        [ValidateNotNullOrEmpty]
        public string ResourceGroupName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = UpdateByStorageAccountNameAndNameParameterSet, HelpMessage = HelpMessages.WorkspaceName)]
        [Parameter(Mandatory = true, ParameterSetName = UpdateByBlobStorageSasUriAndNameParameterSet, HelpMessage = HelpMessages.WorkspaceName)]
        [ResourceNameCompleter(ResourceTypes.Workspace, nameof(ResourceGroupName))]
        [ValidateNotNullOrEmpty]
        public string WorkspaceName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = UpdateByStorageAccountNameAndNameParameterSet, HelpMessage = HelpMessages.SqlPoolName)]
        [Parameter(Mandatory = true, ParameterSetName = UpdateByStorageAccountNameAndParentObjectParameterSet, HelpMessage = HelpMessages.SqlPoolName)]
        [Parameter(Mandatory = true, ParameterSetName = UpdateByBlobStorageSasUriAndNameParameterSet, HelpMessage = HelpMessages.SqlPoolName)]
        [Parameter(Mandatory = true, ParameterSetName = UpdateByBlobStorageSasUriAndParentObjectParameterSet, HelpMessage = HelpMessages.SqlPoolName)]
        [ResourceNameCompleter(
            ResourceTypes.SqlPool,
            nameof(ResourceGroupName),
            nameof(WorkspaceName))]
        [Alias(nameof(SynapseConstants.SqlPoolName))]
        [ValidateNotNullOrEmpty]
        public string Name { get; set; }

        [Parameter(ValueFromPipeline = true, ParameterSetName = UpdateByStorageAccountNameAndParentObjectParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.WorkspaceObject)]
        [Parameter(ValueFromPipeline = true, ParameterSetName = UpdateByBlobStorageSasUriAndParentObjectParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.WorkspaceObject)]
        [ValidateNotNull]
        public PSSynapseWorkspace WorkspaceObject { get; set; }

        [Parameter(ValueFromPipeline = true, ParameterSetName = UpdateByStorageAccountNameAndInputObjectParameterSet, Mandatory = true,
            HelpMessage = HelpMessages.SqlPoolObject)]
        [Parameter(ValueFromPipeline = true, ParameterSetName = UpdateByBlobStorageSasUriAndInputObjectParameterSet, Mandatory = true,
            HelpMessage = HelpMessages.SqlPoolObject)]
        [ValidateNotNull]
        public PSSynapseSqlPool InputObject { get; set; }

        [Parameter(ValueFromPipelineByPropertyName = false, ParameterSetName = UpdateByStorageAccountNameAndResourceIdParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.SqlPoolResourceId)]
        [Parameter(ValueFromPipelineByPropertyName = false, ParameterSetName = UpdateByBlobStorageSasUriAndResourceIdParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.SqlPoolResourceId)]
        [ValidateNotNullOrEmpty]
        public string ResourceId { get; set; }

        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndNameParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsStorageAccountName)]
        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndParentObjectParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsStorageAccountName)]
        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndInputObjectParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsStorageAccountName)]
        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndResourceIdParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsStorageAccountName)]
        [ValidateNotNullOrEmpty]
        public string StorageAccountName { get; set; }

        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndNameParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsContainerName)]
        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndParentObjectParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsStorageAccountName)]
        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndInputObjectParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsContainerName)]
        [Parameter(ParameterSetName = UpdateByStorageAccountNameAndResourceIdParameterSet,
            Mandatory = false, HelpMessage = HelpMessages.ScanResultsContainerName)]
        [ValidateNotNullOrEmpty]
        public string ScanResultsContainerName { get; set; } = "vulnerability-assessment";

        [Parameter(ParameterSetName = UpdateByBlobStorageSasUriAndNameParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.BlobStorageSasUri)]
        [Parameter(ParameterSetName = UpdateByBlobStorageSasUriAndParentObjectParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.BlobStorageSasUri)]
        [Parameter(ParameterSetName = UpdateByBlobStorageSasUriAndInputObjectParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.BlobStorageSasUri)]
        [Parameter(ParameterSetName = UpdateByBlobStorageSasUriAndResourceIdParameterSet,
            Mandatory = true, HelpMessage = HelpMessages.BlobStorageSasUri)]
        [ValidateNotNullOrEmpty]
        public Uri BlobStorageSasUri { get; set; }

        [Parameter(Mandatory = false, HelpMessage = HelpMessages.RecurringScansInterval)]
        [ValidateNotNullOrEmpty]
        public RecurringScansInterval RecurringScansInterval { get; set; }

        [Parameter(Mandatory = false, HelpMessage = HelpMessages.ScanEmailAdmins)]
        [Alias("EmailAdmins")]
        [ValidateNotNullOrEmpty]
        public bool EmailAdmin { get; set; }

        [Parameter(Mandatory = false, HelpMessage = HelpMessages.NotificationEmail)]
        public string[] NotificationEmail { get; set; }

        [Parameter(Mandatory = false, HelpMessage = HelpMessages.AsJob)]
        public SwitchParameter AsJob { get; set; }

        public override void ExecuteCmdlet()
        {
            if (this.IsParameterBound(c => c.WorkspaceObject))
            {
                this.ResourceGroupName = new ResourceIdentifier(this.WorkspaceObject.Id).ResourceGroupName;
                this.WorkspaceName = this.WorkspaceObject.Name;
            }

            if (this.IsParameterBound(c => c.InputObject))
            {
                var resourceIdentifier = new ResourceIdentifier(this.InputObject.Id);
                this.ResourceGroupName = resourceIdentifier.ResourceGroupName;
                this.WorkspaceName = resourceIdentifier.ParentResource;
                this.WorkspaceName = this.WorkspaceName.Substring(this.WorkspaceName.LastIndexOf('/') + 1);
                this.Name = resourceIdentifier.ResourceName;
            }

            if (this.IsParameterBound(c => c.ResourceId))
            {
                var resourceIdentifier = new ResourceIdentifier(this.ResourceId);
                this.ResourceGroupName = resourceIdentifier.ResourceGroupName;
                this.WorkspaceName = resourceIdentifier.ParentResource;
                this.WorkspaceName = this.WorkspaceName.Substring(this.WorkspaceName.LastIndexOf('/') + 1);
                this.Name = resourceIdentifier.ResourceName;
            }

            if (string.IsNullOrEmpty(this.ResourceGroupName))
            {
                this.ResourceGroupName = this.SynapseAnalyticsClient.GetResourceGroupByWorkspaceName(this.WorkspaceName);
            }

            var parameters = SynapseAnalyticsClient.GetSqlPoolVulnerabilityAssessmentSettings(this.ResourceGroupName, this.WorkspaceName, this.Name);

            if (this.IsParameterBound(c => c.BlobStorageSasUri))
            {
                // In this case the user provided a full BlobStorageSasUri (e.g. "https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX" )
                var storageContainerArgs = BlobStorageSasUri.AbsoluteUri.ToString().Split('?');
                if (storageContainerArgs.Length < 2)
                {
                    throw new Exception(Resources.InvalidBlobStorageSasUri);
                }
                parameters.StorageContainerPath = storageContainerArgs[0];
                parameters.StorageContainerSasKey = storageContainerArgs[1];
            }
            else
            {
                if (this.IsParameterBound(c => c.StorageAccountName))
                {
                    var storageResourceGroupName = SynapseAnalyticsClient.GetStorageResourceGroup(this.StorageAccountName);
                    var storageContainerInfo = SynapseAnalyticsClient.GetStorageContainerInfo(storageResourceGroupName, this.StorageAccountName, this.ScanResultsContainerName);
                    parameters.StorageContainerPath = storageContainerInfo.StorageContainerPath;
                    parameters.StorageAccountAccessKey = storageContainerInfo.StorageAccountAccessKey;
                }

                if (string.IsNullOrEmpty(parameters.StorageContainerPath))
                {
                    throw new Exception(Resources.NoStorageAccountSpecified);
                }
            }

            if (this.IsParameterBound(c => c.NotificationEmail))
            {
                if (!Utils.AreEmailAddressesInCorrectFormat(this.NotificationEmail))
                {
                    throw new Exception(Resources.EmailsAreNotValid);
                }
                parameters.RecurringScans.Emails = this.NotificationEmail;
            }

            if (this.IsParameterBound(c => c.RecurringScansInterval))
            {
                parameters.RecurringScans.IsEnabled = this.RecurringScansInterval != RecurringScansInterval.None;
            }

            if (this.IsParameterBound(c => c.EmailAdmin))
            {
                parameters.RecurringScans.EmailSubscriptionAdmins = this.EmailAdmin;
            }

            if (this.ShouldProcess(this.Name, string.Format(Resources.UpdatingSqlPoolVulnerabilityAssessmentSetting, this.Name, this.WorkspaceName)))
            {
                var result = new SqlPoolVulnerabilityAssessmentSettingsModel(SynapseAnalyticsClient.CreateOrUpdateSqlPoolVulnerabilityAssessmentSettings(this.ResourceGroupName, this.WorkspaceName, this.Name, parameters),
                    this.ResourceGroupName, this.WorkspaceName, this.Name);
                WriteObject(result);
            }
        }
    }
}
