using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Commands.Synapse.Models;
using Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Synapse
{
    [Cmdlet(VerbsCommon.Get, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + SynapseConstants.SynapsePrefix + SynapseConstants.SqlPool+ SynapseConstants.VulnerabilityAssessmentScanRecord,
        DefaultParameterSetName = GetBySqlPoolObjectParameterSet)]
    [OutputType(typeof(PSVulnerabilityAssessmentScanRecordModel))]
    public class GetAzureSynapseSqlPoolVulnerabilityAssessmentScanRecord : SynapseManagementCmdletBase
    {
        private const string GetByNameParameterSet = "GetByNameParameterSet";
        private const string GetBySqlPoolObjectParameterSet = "GetBySqlPoolObjectParameterSet";

        [Parameter(Mandatory = false, ParameterSetName = GetByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.ResourceGroupName)]
        [ResourceGroupCompleter]
        [ValidateNotNullOrEmpty]
        public string ResourceGroupName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = GetByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.WorkspaceName)]
        [ResourceNameCompleter(ResourceTypes.Workspace, nameof(ResourceGroupName))]
        [ValidateNotNullOrEmpty]
        public string WorkspaceName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = GetByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.SqlPoolName)]
        [ResourceNameCompleter(
            ResourceTypes.SqlPool,
            nameof(ResourceGroupName),
            nameof(WorkspaceName))]
        [ValidateNotNullOrEmpty]
        public string Name { get; set; }

        [Parameter(Mandatory = false, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.ScanId)]
        [ValidateNotNullOrEmpty]
        public string ScanId { get; set; }

        [Parameter(Mandatory = false, ParameterSetName = GetBySqlPoolObjectParameterSet, ValueFromPipeline = true, 
            HelpMessage = HelpMessages.SqlPoolObject)]
        [ValidateNotNull]
        public PSSynapseSqlPool SqlPoolObject { get; set; }

        public override void ExecuteCmdlet()
        {
            if (SqlPoolObject != null)
            {
                var resourceIdentifier = new ResourceIdentifier(SqlPoolObject.Id);
                this.ResourceGroupName = resourceIdentifier.ResourceGroupName;
                this.WorkspaceName = resourceIdentifier.ParentResource;
                this.WorkspaceName = this.WorkspaceName.Substring(this.WorkspaceName.LastIndexOf('/') + 1);
                this.Name = resourceIdentifier.ResourceName;
            }

            if (string.IsNullOrEmpty(this.ResourceGroupName))
            {
                this.ResourceGroupName = this.SynapseAnalyticsClient.GetResourceGroupByWorkspaceName(this.WorkspaceName);
            }

            bool getScanRecordBySpecificScanId = MyInvocation.BoundParameters.ContainsKey(nameof(ScanId));
            string scanId = ScanId;

            if (getScanRecordBySpecificScanId)
            {
                var results = this.SynapseAnalyticsClient.GetVulnerabilityAssessmentScanRecord(this.ResourceGroupName, this.WorkspaceName, this.Name, scanId);
                WriteObject(results);
            }
            else
            {
                var results = SynapseAnalyticsClient.ListVulnerabilityAssessmentScanRecords(this.ResourceGroupName, this.WorkspaceName, this.Name);
                WriteObject(results, true);
            }
        }
    }
}