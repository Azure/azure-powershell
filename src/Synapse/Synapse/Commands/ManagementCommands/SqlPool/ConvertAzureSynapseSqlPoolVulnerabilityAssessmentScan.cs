// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Commands.Synapse.Models;
using Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model;
using System;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Synapse
{
    [Cmdlet("Convert", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + SynapseConstants.SynapsePrefix + SynapseConstants.SqlPool + SynapseConstants.VulnerabilityAssessmentScan, DefaultParameterSetName = ConvertByInputObjectParameterSet,
        SupportsShouldProcess = true)]
    [OutputType(typeof(PSVulnerabilityAssessmentScanExportModel))]
    public class ConvertAzureSynapseSqlPoolVulnerabilityAssessmentScan : SynapseManagementCmdletBase
    {
        private const string ConvertByInputObjectParameterSet = "ConvertByInputObjectParameterSet";
        private const string ConvertByNameParameterSet = "ConvertByNameParameterSet";
 
        [Parameter(Mandatory = false, ParameterSetName = ConvertByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.ResourceGroupName)]
        [ResourceGroupCompleter]
        [ValidateNotNullOrEmpty]
        public string ResourceGroupName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = ConvertByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.WorkspaceName)]
        [ResourceNameCompleter(ResourceTypes.Workspace, nameof(ResourceGroupName))]
        [ValidateNotNullOrEmpty]
        public string WorkspaceName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = ConvertByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.SqlPoolName)]
        [ResourceNameCompleter(
            ResourceTypes.SqlPool,
            nameof(ResourceGroupName),
            nameof(WorkspaceName))]
        [ValidateNotNullOrEmpty]
        public string Name { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = ConvertByNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.ScanId)]
        [ValidateNotNullOrEmpty]
        public string ScanId { get; set; }

        [Parameter(ParameterSetName = ConvertByInputObjectParameterSet,
           Mandatory = false,
           ValueFromPipeline = true,
           HelpMessage = HelpMessages.scanRecordObject)]
        [ValidateNotNullOrEmpty]
        public PSVulnerabilityAssessmentScanRecordModel InputObject { get; set; }

        public override void ExecuteCmdlet()
        {
            if (InputObject != null)
            {
                this.ResourceGroupName = InputObject.ResourceGroupName;
                this.WorkspaceName = InputObject.workspaceName;
                this.Name = InputObject.sqlPoolName;
                this.ScanId = InputObject.ScanId;
            }

            if (string.IsNullOrEmpty(this.ResourceGroupName))
            {
                this.ResourceGroupName = this.SynapseAnalyticsClient.GetResourceGroupByWorkspaceName(this.WorkspaceName);
            }

            if (string.IsNullOrEmpty(ScanId))
            {
                throw new Exception(Properties.Resources.ScanIdParameterIsRequired);
            }

            var results = this.SynapseAnalyticsClient.ConvertSqlPoolVulnerabilityAssessmentScan(ResourceGroupName, WorkspaceName, Name, ScanId);
            WriteObject(results);
        }
    }
}