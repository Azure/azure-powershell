using Microsoft.Azure.Commands.ResourceManager.Common.ArgumentCompleters;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Commands.Synapse.Models;
using Microsoft.Azure.Commands.Synapse.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using System;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Synapse
{
    [Cmdlet("Start", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + SynapseConstants.SynapsePrefix + SynapseConstants.SqlPool + SynapseConstants.VulnerabilityAssessmentScan, DefaultParameterSetName = StartSqlPoolObjectParameterSet
, SupportsShouldProcess = true),OutputType(typeof(PSVulnerabilityAssessmentScanRecordModel))]
    [OutputType(typeof(PSVulnerabilityAssessmentScanRecordModel))]
    public class StartAzureSynapseSqlPoolVulnerabilityAssessmentScan : SynapseManagementCmdletBase
    {
        protected const string StartSqlPoolObjectParameterSet = "StartSqlPoolObjectParameterSet";
        protected const string StartSqlPoolNameParameterSet = "StartSqlPoolNameParameterSet";

        [Parameter(Mandatory = false, ParameterSetName = StartSqlPoolNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.ResourceGroupName)]
        [ResourceGroupCompleter]
        [ValidateNotNullOrEmpty]
        public string ResourceGroupName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = StartSqlPoolNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.WorkspaceName)]
        [ResourceNameCompleter(ResourceTypes.Workspace, nameof(ResourceGroupName))]
        [ValidateNotNullOrEmpty]
        public string WorkspaceName { get; set; }

        [Parameter(Mandatory = true, ParameterSetName = StartSqlPoolNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.SqlPoolName)]
        [ResourceNameCompleter(
            ResourceTypes.SqlPool,
            nameof(ResourceGroupName),
            nameof(WorkspaceName))]
        [ValidateNotNullOrEmpty]
        public string Name { get; set; }

        [Parameter(Mandatory = false, ParameterSetName = StartSqlPoolNameParameterSet, ValueFromPipelineByPropertyName = true, HelpMessage = HelpMessages.ScanId)]
        [ValidateNotNullOrEmpty]
        public string ScanId { get; set; }

        [Parameter(ValueFromPipeline = true, ParameterSetName = StartSqlPoolObjectParameterSet, Mandatory = false,
            HelpMessage = HelpMessages.SqlPoolObject)]
        [ValidateNotNull]
        public PSSynapseSqlPool SqlPoolObject { get; set; }

        /// <summary>
        /// Gets or sets whether or not to run this cmdlet in the background as a job
        /// </summary>
        [Parameter(Mandatory = false, HelpMessage = HelpMessages.AsJob)]
        public SwitchParameter AsJob { get; set; }

        public override void ExecuteCmdlet()
        {
            if (SqlPoolObject != null)
            {
                var resourceIdentifier = new ResourceIdentifier(SqlPoolObject.Id);
                this.ResourceGroupName = resourceIdentifier.ResourceGroupName;
                this.WorkspaceName = resourceIdentifier.ParentResource;
                this.WorkspaceName = this.WorkspaceName.Substring(this.WorkspaceName.LastIndexOf('/') + 1);
                this.Name = resourceIdentifier.ResourceName;
            }

            string scanId = ScanId;

            if (!MyInvocation.BoundParameters.ContainsKey(nameof(ScanId)))
            {
                // If the user didn't provide any scan ID for the new scan, we will generate one in the format of 20170109_130108
                // Scan Id e.g 20170109_130108
                scanId = DateTime.UtcNow.ToString("yyyyMMdd_HHmmss");
            }

            if (string.IsNullOrEmpty(this.ResourceGroupName))
            {
                this.ResourceGroupName = this.SynapseAnalyticsClient.GetResourceGroupByWorkspaceName(this.WorkspaceName);
            }

            // Run scan
            this.SynapseAnalyticsClient.StartVulnerabilityAssessmentScan(ResourceGroupName, WorkspaceName, Name, scanId);

            // Get scan record
            var results = this.SynapseAnalyticsClient.GetVulnerabilityAssessmentScanRecord(ResourceGroupName, WorkspaceName, Name, scanId);
            WriteObject(results, true);
        }
    }
}