using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using System.Data;
using System.Linq;

namespace Microsoft.Azure.Commands.Synapse.Models
{
    public static class ContentType
    {
        public const string TextHtml = "text/html";
        public const string ApplicationJson = "application/json";
        public const string TextPlain = "text/plain";
    }

    public class LivyStatementOutputParser
    {
        public static object Parse(object rawLivyOutput)
        {
            if (rawLivyOutput is JObject)
            {
                return Parse((JObject)rawLivyOutput);
            }

            return rawLivyOutput;
        }

        public static List<PSSynapseLivyStatementOutputData> Parse(JObject rawLivyOutput)
        {
            // output['application/json'] is generated by sparkSQL, if this field has content, other
            // fields won't have contents.
            if (rawLivyOutput[ContentType.ApplicationJson] != null)
            {
                // Format output['application/json'] to DataTable
                var rows = rawLivyOutput[ContentType.ApplicationJson]["data"];
                var schema = rawLivyOutput[ContentType.ApplicationJson]["fields"].Select(field => field["name"]);
                var dataTable = new DataTable();
                foreach (var column in schema)
                {
                    dataTable.Columns.Add(column.Value<string>());
                }

                foreach (var record in rows)
                {
                    var row = dataTable.NewRow();
                    for (int colIdx = 0; colIdx < dataTable.Columns.Count; colIdx++)
                    {
                        row[colIdx] = record[dataTable.Columns[colIdx].ColumnName];
                    }

                    dataTable.Rows.Add(row);
                }

                return new List<PSSynapseLivyStatementOutputData>
                {
                    new PSSynapseLivyStatementOutputData
                    {
                        ContentType = ContentType.ApplicationJson,
                        Content = dataTable
                    }
                };
            }

            // Generated by Spark.NET REPL
            if (rawLivyOutput[ContentType.TextHtml] != null)
            {
                return new List<PSSynapseLivyStatementOutputData>
                {
                    new PSSynapseLivyStatementOutputData
                    {
                        ContentType = ContentType.TextHtml,
                        Content = rawLivyOutput[ContentType.TextHtml].Value<string>().Trim()
                    }
                };
            }

            // Return output['text/plain'] as it is
            string input = rawLivyOutput[ContentType.TextPlain]?.Value<string>();
            if (string.IsNullOrEmpty(input))
            {
                return new List<PSSynapseLivyStatementOutputData>();
            }

            var outputs = new List<PSSynapseLivyStatementOutputData>
            {
                new PSSynapseLivyStatementOutputData
                {
                    ContentType = ContentType.TextPlain,
                    Content = input
                }
            };

            return outputs;
        }
    }
}
