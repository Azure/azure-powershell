// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Data Lake Analytics U-SQL activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DataLakeAnalyticsU-SQL")]
    [Rest.Serialization.JsonTransformation]
    public partial class PSDataLakeAnalyticsUsqlActivity : PSExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the PSDataLakeAnalyticsUSQLActivity
        /// class.
        /// </summary>
        public PSDataLakeAnalyticsUsqlActivity(string referenceName)
        {
            ScriptLinkedService = new LinkedServiceReference(referenceName);
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets case-sensitive path to folder that contains the U-SQL
        /// script. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.scriptPath")]
        public object ScriptPath { get; set; }

        /// <summary>
        /// Gets or sets script linked service reference.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.scriptLinkedService")]
        public LinkedServiceReference ScriptLinkedService { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of nodes simultaneously used to run
        /// the job. Default value is 1. Type: integer (or Expression with
        /// resultType integer), minimum: 1.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.degreeOfParallelism")]
        public object DegreeOfParallelism { get; set; }

        /// <summary>
        /// Gets or sets determines which jobs out of all that are queued
        /// should be selected to run first. The lower the number, the higher
        /// the priority. Default value is 1000. Type: integer (or Expression
        /// with resultType integer), minimum: 1.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.priority")]
        public object Priority { get; set; }

        /// <summary>
        /// Gets or sets parameters for U-SQL job request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.parameters")]
        public IDictionary<string, object> Parameters { get; set; }

        /// <summary>
        /// Gets or sets runtime version of the U-SQL engine to use. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.runtimeVersion")]
        public object RuntimeVersion { get; set; }

        /// <summary>
        /// Gets or sets compilation mode of U-SQL. Must be one of these values
        /// : Semantic, Full and SingleBox. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.compilationMode")]
        public object CompilationMode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ScriptPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptPath");
            }
            if (ScriptLinkedService == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScriptLinkedService");
            }
        }

        public override Activity ToSdkObject()
        {
            var activity = new DataLakeAnalyticsUsqlActivity(this.Name, this.ScriptPath, this.ScriptLinkedService);
            activity.DegreeOfParallelism = this.DegreeOfParallelism;
            activity.Priority = this.Priority;
            activity.Parameters = this.Parameters;
            activity.RuntimeVersion = this.RuntimeVersion;
            activity.CompilationMode = this.CompilationMode;
            activity.LinkedServiceName = this.LinkedServiceName;
            activity.Policy = this.Policy;
            activity.Description = this.Description;
            IList<PSActivityDependency> pSDependsOn = this.DependsOn;
            if (pSDependsOn != null)
            {
                IList<ActivityDependency> dependsOn = new List<ActivityDependency>();
                foreach (PSActivityDependency pSDependOn in pSDependsOn)
                {
                    dependsOn.Add(pSDependOn.ToSdkObject());
                }
                activity.DependsOn = dependsOn;
            }
            IList<PSUserProperty> pSUserProperties = this.UserProperties;
            if (pSUserProperties != null)
            {
                IList<UserProperty> userProperties = new List<UserProperty>();
                foreach (PSUserProperty pSUserProperty in pSUserProperties)
                {
                    userProperties.Add(pSUserProperty.ToSdkObject());
                }
                activity.UserProperties = userProperties;
            }
            return activity;
		}
    }
}

