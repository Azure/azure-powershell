// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Azure ML Batch Execution activity.
    /// </summary>
    [Newtonsoft.Json.JsonObject("AzureMLBatchExecution")]
    [Rest.Serialization.JsonTransformation]
    public partial class PSAzureMLBatchExecutionActivity : PSExecutionActivity
    {
        /// <summary>
        /// Initializes a new instance of the PSAzureMLBatchExecutionActivity
        /// class.
        /// </summary>
        public PSAzureMLBatchExecutionActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets key,Value pairs to be passed to the Azure ML Batch
        /// Execution Service endpoint. Keys must match the names of web
        /// service parameters defined in the published Azure ML web service.
        /// Values will be passed in the GlobalParameters property of the Azure
        /// ML batch execution request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.globalParameters")]
        public IDictionary<string, object> GlobalParameters { get; set; }

        /// <summary>
        /// Gets or sets key,Value pairs, mapping the names of Azure ML
        /// endpoint's Web Service Outputs to AzureMLWebServiceFile objects
        /// specifying the output Blob locations. This information will be
        /// passed in the WebServiceOutputs property of the Azure ML batch
        /// execution request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.webServiceOutputs")]
        public IDictionary<string, AzureMLWebServiceFile> WebServiceOutputs { get; set; }

        /// <summary>
        /// Gets or sets key,Value pairs, mapping the names of Azure ML
        /// endpoint's Web Service Inputs to AzureMLWebServiceFile objects
        /// specifying the input Blob locations.. This information will be
        /// passed in the WebServiceInputs property of the Azure ML batch
        /// execution request.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.webServiceInputs")]
        public IDictionary<string, AzureMLWebServiceFile> WebServiceInputs { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }

        public override Activity ToSdkObject()
        {
            var activity = new AzureMLBatchExecutionActivity(this.Name);
            foreach (var item in this.GlobalParameters)
            {
                activity.GlobalParameters.Add(item);
            }
            foreach (var item in this.WebServiceOutputs)
            {
                activity.WebServiceOutputs.Add(item);
            }
            foreach (var item in this.WebServiceInputs)
            {
                activity.WebServiceInputs.Add(item);
            }
            activity.LinkedServiceName = this.LinkedServiceName;
            activity.Policy = this.Policy;
            activity.Description = this.Description;
            IList<PSActivityDependency> pSDependsOn = this.DependsOn;
            if (pSDependsOn != null)
            {
                foreach (PSActivityDependency pSDependOn in pSDependsOn)
                {
                    activity.DependsOn.Add(pSDependOn?.ToSdkObject());
                }
            }
            IList<PSUserProperty> pSUserProperties = this.UserProperties;
            if (pSUserProperties != null)
            {
                foreach (PSUserProperty pSUserProperty in pSUserProperties)
                {
                    activity.UserProperties.Add(pSUserProperty?.ToSdkObject());
                }
            }
            return activity;
        }
    }
}

