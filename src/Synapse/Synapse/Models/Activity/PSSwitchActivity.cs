// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// This activity evaluates an expression and executes activities under the
    /// cases property that correspond to the expression evaluation expected in
    /// the equals property.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Switch")]
    [Rest.Serialization.JsonTransformation]
    public partial class PSSwitchActivity : PSControlActivity
    {
        /// <summary>
        /// Initializes a new instance of the PSSwitchActivity class.
        /// </summary>
        public PSSwitchActivity()
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets an expression that would evaluate to a string or
        /// integer. This is used to determine the block of activities in cases
        /// that will be executed.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.on")]
        public Expression On { get; set; }

        /// <summary>
        /// Gets or sets list of cases that correspond to expected values of
        /// the 'on' property. This is an optional property and if not
        /// provided, the activity will execute activities provided in
        /// defaultActivities.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.cases")]
        public IList<SwitchCase> Cases { get; set; }

        /// <summary>
        /// Gets or sets list of activities to execute if no case condition is
        /// satisfied. This is an optional property and if not provided, the
        /// activity will exit without any action.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.defaultActivities")]
        public IList<PSActivity> DefaultActivities { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (On == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "On");
            }
            if (DefaultActivities != null)
            {
                foreach (var element in DefaultActivities)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }

        public override Activity ToSdkObject()
        {
            var activity = new SwitchActivity(this.Name, this.On);
            foreach (var item in this.Cases)
            {
                activity.Cases.Add(item);
            }
            foreach (var item in this.DefaultActivities)
            {
                activity.DefaultActivities.Add(item.ToSdkObject());
            }
            activity.Description = this.Description;
            IList<PSActivityDependency> pSDependsOn = this.DependsOn;
            if (pSDependsOn != null)
            {
                foreach (PSActivityDependency pSDependOn in pSDependsOn)
                {
                    activity.DependsOn.Add(pSDependOn?.ToSdkObject());
                }
            }
            IList<PSUserProperty> pSUserProperties = this.UserProperties;
            if (pSUserProperties != null)
            {
                foreach (PSUserProperty pSUserProperty in pSUserProperties)
                {
                    activity.UserProperties.Add(pSUserProperty?.ToSdkObject());
                }
            }
            return activity;
        }
    }
}

