// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Synapse.Properties;
using Microsoft.Azure.Management.Synapse.Models;
using System;
using System.Collections.Generic;

namespace Microsoft.Azure.Commands.Synapse.Models.VulnerabilityAssessment
{
    /// <summary>
    /// The SqlVulnerabilityAssessmentRuleBaselineAdapter class is responsible for transforming the data that was received form the endpoints to the cmdlets model of vulnerability assessment baseline and vice versa
    /// </summary>
    public class SqlVulnerabilityAssessmentRuleBaselineAdapter : BaseSqlVulnerabilityAssessmentAdapter
    {
        public SqlVulnerabilityAssessmentRuleBaselineAdapter(IAzureContext context) :base(context)
        {
            Context = context;
            Subscription = context?.Subscription;
            VulnerabilityAssessmentCommunicator = new VulnerabilityAssessmentEndpointsCommunicator(Context);
        }

        /// <summary>
        /// Remove the Vulnerability Assessment Rule Baseline
        /// </summary>
        public void ClearVulnerabilityAssessmentRuleBaseline(VulnerabilityAssessmentRuleBaselineModel model, string workspaceName, string sqlPoolName, ApplyToType applyToType)
        {
            if (applyToType == ApplyToType.SqlPool)
            {
                VulnerabilityAssessmentCommunicator.ClearSqlPoolVulnerabilityAssessmentRuleBaseline(model.ResourceGroupName, workspaceName, sqlPoolName, model.RuleId, model.RuleAppliesToMaster);
            }
            else
            {
                throw new NotSupportedException(Resources.VulnerabilityAssessmentTypeNotSupported);
            }
        }

        /// <summary>
        /// Provides a SQL pool Vulnerability Assessment Rule Baseline model for the given SQL pool
        /// </summary>
        public VulnerabilityAssessmentRuleBaselineModel GetVulnerabilityAssessmentRuleBaseline(string resourceGroup, string workspaceName,
            string sqlPoolName, string ruleId, bool ruleAppliesToMaster, ApplyToType applyToType)
        {
            var vulnerabilityAssessmentRuleBaseline = (applyToType == ApplyToType.SqlPool)
                ? VulnerabilityAssessmentCommunicator.GetSqlPoolVulnerabilityAssessmentRuleBaseline(resourceGroup, workspaceName, sqlPoolName, ruleId, ruleAppliesToMaster)
                : throw new NotSupportedException(Resources.VulnerabilityAssessmentTypeNotSupported);

            var ruleBaselineModel = new VulnerabilityAssessmentRuleBaselineModel()
            {
                ResourceGroupName = resourceGroup,
                RuleId = ruleId,
                RuleAppliesToMaster = ruleAppliesToMaster || sqlPoolName == "master"
            };

            ruleBaselineModel.BaselineResult = new List<VulnerabilityAssessmentRuleBaselineRowModel>();

            foreach (var baselineResult in vulnerabilityAssessmentRuleBaseline.BaselineResults)
            {
                var ruleBaselineItem = new VulnerabilityAssessmentRuleBaselineRowModel()
                {
                    Result = baselineResult.Result
                };

                ruleBaselineModel.BaselineResult.Add(ruleBaselineItem);
            }

            return ruleBaselineModel;
        }

        /// <summary>
        /// Transforms the given model to its endpoints acceptable structure and sends it to the endpoint
        /// </summary>
        public void SetVulnerabilityAssessmentRuleBaseline(VulnerabilityAssessmentRuleBaselineModel model, string workspaceName, string sqlPoolName, ApplyToType applyToType)
        {
            var ruleBaseline = new SqlPoolVulnerabilityAssessmentRuleBaseline()
            {
                BaselineResults = new List<SqlPoolVulnerabilityAssessmentRuleBaselineItem>()
            };

            foreach (var baselineResult in model.BaselineResult)
            {
                var ruleBaselineItem = new SqlPoolVulnerabilityAssessmentRuleBaselineItem()
                {
                    Result = baselineResult.Result
                };

                ruleBaseline.BaselineResults.Add(ruleBaselineItem);
            }

            if (applyToType == ApplyToType.SqlPool)
            {
                VulnerabilityAssessmentCommunicator.SetSqlPoolVulnerabilityAssessmentRuleBaseline(model.ResourceGroupName, workspaceName,
                    sqlPoolName, model.RuleId, model.RuleAppliesToMaster, ruleBaseline);
            }
            else
            {
                throw new NotSupportedException(Resources.VulnerabilityAssessmentTypeNotSupported);
            }
        }
    }
}
