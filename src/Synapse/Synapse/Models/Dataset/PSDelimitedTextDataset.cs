// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Delimited text dataset.
    /// </summary>
    [Newtonsoft.Json.JsonObject("DelimitedText")]
    [Rest.Serialization.JsonTransformation]
    public partial class PSDelimitedTextDataset : PSDataset
    {
        /// <summary>
        /// Initializes a new instance of the PSDelimitedTextDataset class.
        /// </summary>
        public PSDelimitedTextDataset()
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the location of the delimited text storage.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.location")]
        public DatasetLocation Location { get; set; }

        /// <summary>
        /// Gets or sets the column delimiter. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.columnDelimiter")]
        public object ColumnDelimiter { get; set; }

        /// <summary>
        /// Gets or sets the row delimiter. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.rowDelimiter")]
        public object RowDelimiter { get; set; }

        /// <summary>
        /// Gets or sets the code page name of the preferred encoding. If miss,
        /// the default value is UTF-8, unless BOM denotes another Unicode
        /// encoding. Refer to the name column of the table in the following
        /// link to set supported values:
        /// https://msdn.microsoft.com/library/system.text.encoding.aspx. Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encodingName")]
        public object EncodingName { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'bzip2', 'gzip', 'deflate',
        /// 'zipDeflate', 'snappy', 'lz4'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.compressionCodec")]
        public string CompressionCodec { get; set; }

        /// <summary>
        /// Gets or sets the data compression method used for DelimitedText.
        /// Possible values include: 'Optimal', 'Fastest'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.compressionLevel")]
        public string CompressionLevel { get; set; }

        /// <summary>
        /// Gets or sets the quote character. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.quoteChar")]
        public object QuoteChar { get; set; }

        /// <summary>
        /// Gets or sets the escape character. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.escapeChar")]
        public object EscapeChar { get; set; }

        /// <summary>
        /// Gets or sets when used as input, treat the first row of data as
        /// headers. When used as output,write the headers into the output as
        /// the first row of data. The default value is false. Type: boolean
        /// (or Expression with resultType boolean).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.firstRowAsHeader")]
        public object FirstRowAsHeader { get; set; }

        /// <summary>
        /// Gets or sets the null value string. Type: string (or Expression
        /// with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.nullValue")]
        public object NullValue { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
        }

        public override Dataset ToSdkObject()
        {
            var dataset = new DelimitedTextDataset(this.LinkedServiceName);
            dataset.Location = this.Location;
            dataset.ColumnDelimiter = this.ColumnDelimiter;
            dataset.RowDelimiter = this.RowDelimiter;
            dataset.EncodingName = this.EncodingName;
            if (this.CompressionCodec != null)
            {
                dataset.CompressionCodec = this.CompressionCodec;
                dataset.CompressionLevel = this.CompressionLevel;
            }
            dataset.QuoteChar = this.QuoteChar;
            dataset.EscapeChar = this.EscapeChar;
            dataset.FirstRowAsHeader = this.FirstRowAsHeader;
            dataset.NullValue = this.NullValue;
            SetProperties(dataset);
            return dataset;
        }
    }
}

