// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Avro dataset.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Avro")]
    [Rest.Serialization.JsonTransformation]
    public partial class PSAvroDataset : PSDataset
    {
        /// <summary>
        /// Initializes a new instance of the PSAvroDataset class.
        /// </summary>
        public PSAvroDataset()
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the location of the avro storage.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.location")]
        public DatasetLocation Location { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'none', 'deflate', 'snappy',
        /// 'xz', 'bzip2'
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.avroCompressionCodec")]
        public string AvroCompressionCodec { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.avroCompressionLevel")]
        public int? AvroCompressionLevel { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (AvroCompressionLevel > 9)
            {
                throw new ValidationException(ValidationRules.InclusiveMaximum, "AvroCompressionLevel", 9);
            }
            if (AvroCompressionLevel < 1)
            {
                throw new ValidationException(ValidationRules.InclusiveMinimum, "AvroCompressionLevel", 1);
            }
        }

        public override Dataset ToSdkObject()
        {
            var dataset = new AvroDataset(this.LinkedServiceName);
            dataset.Location = this.Location;
            dataset.AvroCompressionCodec = this.AvroCompressionCodec ?? "none";
            dataset.AvroCompressionLevel = this.AvroCompressionLevel;
            SetProperties(dataset);
            return dataset;
        }
    }
}

