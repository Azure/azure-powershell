// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// SAP Table Linked Service.
    /// </summary>
    [Newtonsoft.Json.JsonObject("SapTable")]
    [Rest.Serialization.JsonTransformation]
    public partial class PSSapTableLinkedService : PSLinkedService
    {
        /// <summary>
        /// Initializes a new instance of the PSSapTableLinkedService class.
        /// </summary>
        public PSSapTableLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets host name of the SAP instance where the table is
        /// located. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.server")]
        public object Server { get; set; }

        /// <summary>
        /// Gets or sets system number of the SAP system where the table is
        /// located. (Usually a two-digit decimal number represented as a
        /// string.) Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.systemNumber")]
        public object SystemNumber { get; set; }

        /// <summary>
        /// Gets or sets client ID of the client on the SAP system where the
        /// table is located. (Usually a three-digit decimal number represented
        /// as a string) Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.clientId")]
        public object ClientId { get; set; }

        /// <summary>
        /// Gets or sets language of the SAP system where the table is located.
        /// The default value is EN. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.language")]
        public object Language { get; set; }

        /// <summary>
        /// Gets or sets systemID of the SAP system where the table is located.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.systemId")]
        public object SystemId { get; set; }

        /// <summary>
        /// Gets or sets username to access the SAP server where the table is
        /// located. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.userName")]
        public object UserName { get; set; }

        /// <summary>
        /// Gets or sets password to access the SAP server where the table is
        /// located.
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.password")]
        public SecretBase Password { get; set; }

        /// <summary>
        /// Gets or sets the hostname of the SAP Message Server. Type: string
        /// (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.messageServer")]
        public object MessageServer { get; set; }

        /// <summary>
        /// Gets or sets the service name or port number of the Message Server.
        /// Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.messageServerService")]
        public object MessageServerService { get; set; }

        /// <summary>
        /// Gets or sets SNC activation indicator to access the SAP server
        /// where the table is located. Must be either 0 (off) or 1 (on). Type:
        /// string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sncMode")]
        public object SncMode { get; set; }

        /// <summary>
        /// Gets or sets initiator's SNC name to access the SAP server where
        /// the table is located. Type: string (or Expression with resultType
        /// string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sncMyName")]
        public object SncMyName { get; set; }

        /// <summary>
        /// Gets or sets communication partner's SNC name to access the SAP
        /// server where the table is located. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sncPartnerName")]
        public object SncPartnerName { get; set; }

        /// <summary>
        /// Gets or sets external security product's library to access the SAP
        /// server where the table is located. Type: string (or Expression with
        /// resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sncLibraryPath")]
        public object SncLibraryPath { get; set; }

        /// <summary>
        /// Gets or sets SNC Quality of Protection. Allowed value include: 1,
        /// 2, 3, 8, 9. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.sncQop")]
        public object SncQop { get; set; }

        /// <summary>
        /// Gets or sets the Logon Group for the SAP System. Type: string (or
        /// Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.logonGroup")]
        public object LogonGroup { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        [JsonProperty(PropertyName = "typeProperties.encryptedCredential")]
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
        }

        public override LinkedService ToSdkObject()
        {
            var linkedService = new SapTableLinkedService();
            linkedService.Server = this.Server;
            linkedService.SystemNumber = this.SystemNumber;
            linkedService.ClientId = this.ClientId;
            linkedService.Language = this.Language;
            linkedService.SystemId = this.SystemId;
            linkedService.UserName = this.UserName;
            linkedService.Password = this.Password;
            linkedService.MessageServer = this.MessageServer;
            linkedService.MessageServerService = this.MessageServerService;
            linkedService.SncMode = this.SncMode;
            linkedService.SncMyName = this.SncMyName;
            linkedService.SncPartnerName = this.SncPartnerName;
            linkedService.SncLibraryPath = this.SncLibraryPath;
            linkedService.SncQop = this.SncQop;
            linkedService.LogonGroup = this.LogonGroup;
            linkedService.EncryptedCredential = this.EncryptedCredential;
            linkedService.ConnectVia = this.ConnectVia?.ToSdkObject();
            linkedService.Description = this.Description;
            linkedService.Annotations = this.Annotations;
            IDictionary<string, PSParameterSpecification> pSParameters = this.Parameters;
            if (pSParameters != null)
            {
                IDictionary<string, ParameterSpecification> parameters = new Dictionary<string, ParameterSpecification>();
                foreach (var pSParameter in pSParameters)
                {
                    parameters.Add(pSParameter.Key, pSParameter.Value?.ToSdkObject());
                }
                linkedService.Parameters = parameters;
            }
            return linkedService;
        }
    }
}

