// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Commands.Synapse.Models
{
    using global::Azure.Analytics.Synapse.Artifacts.Models;
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
        using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// QuickBooks server linked service.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class PSQuickBooksLinkedService : PSLinkedService
    {
        /// <summary>
        /// Initializes a new instance of the PSQuickBooksLinkedService class.
        /// </summary>
        public PSQuickBooksLinkedService()
        {
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the endpoint of the QuickBooks server. (i.e.
        /// quickbooks.api.intuit.com)
        /// </summary>
        public object Endpoint { get; set; }

        /// <summary>
        /// Gets or sets the company ID of the QuickBooks company to authorize.
        /// </summary>
        public object CompanyId { get; set; }

        /// <summary>
        /// Gets or sets the consumer key for OAuth 1.0 authentication.
        /// </summary>
        public object ConsumerKey { get; set; }

        /// <summary>
        /// Gets or sets the consumer secret for OAuth 1.0 authentication.
        /// </summary>
        public SecretBase ConsumerSecret { get; set; }

        /// <summary>
        /// Gets or sets the access token for OAuth 1.0 authentication.
        /// </summary>
        public SecretBase AccessToken { get; set; }

        /// <summary>
        /// Gets or sets the access token secret for OAuth 1.0 authentication.
        /// </summary>
        public SecretBase AccessTokenSecret { get; set; }

        /// <summary>
        /// Gets or sets specifies whether the data source endpoints are
        /// encrypted using HTTPS. The default value is true.
        /// </summary>
        public object UseEncryptedEndpoints { get; set; }

        /// <summary>
        /// Gets or sets the encrypted credential used for authentication.
        /// Credentials are encrypted using the integration runtime credential
        /// manager. Type: string (or Expression with resultType string).
        /// </summary>
        public object EncryptedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (Endpoint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Endpoint");
            }
            if (CompanyId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CompanyId");
            }
            if (ConsumerKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConsumerKey");
            }
            if (ConsumerSecret == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConsumerSecret");
            }
            if (AccessToken == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessToken");
            }
            if (AccessTokenSecret == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "AccessTokenSecret");
            }
        }
    }
}

