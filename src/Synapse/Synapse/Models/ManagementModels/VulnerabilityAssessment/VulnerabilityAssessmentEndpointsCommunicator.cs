// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication;
using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Synapse.Common;
using Microsoft.Azure.Management.Storage.Version2017_10_01;
using Microsoft.Azure.Management.Synapse;
using Microsoft.Azure.Management.Synapse.Models;
using System.Linq;

namespace Microsoft.Azure.Commands.Synapse.Models.VulnerabilityAssessment
{
    /// <summary>
    /// This class is responsible for all the REST communication with the Vulnerability Assessment REST endpoints
    /// </summary>
    public class VulnerabilityAssessmentEndpointsCommunicator
    {
        /// <summary>
        /// The Synapse client to be used by this end points communicator
        /// </summary>
        private static SynapseManagementClient SynapseClient { get; set; }

        /// <summary>
        /// The Storage client to be used by this end points communicator
        /// </summary>
        private static StorageManagementClient StorageClient { get; set; }

        /// <summary>
        /// Gets or set the Azure subscription
        /// </summary>
        private static IAzureSubscription Subscription { get; set; }

        /// <summary>
        /// Gets or sets the Azure profile
        /// </summary>
        public IAzureContext Context { get; set; }

        public VulnerabilityAssessmentEndpointsCommunicator(IAzureContext context)
        {
            Context = context;
            if (context?.Subscription != Subscription)
            {
                Subscription = context?.Subscription;
                SynapseClient = null;
                StorageClient = null;
            }
        }

        /// <summary>
        /// Gets the SQL pool Vulnerability Assessment rule baseline for the given rule in the given SQL pool in the given workspace in the given resource group
        /// </summary>
        public SqlPoolVulnerabilityAssessmentRuleBaseline GetSqlPoolVulnerabilityAssessmentRuleBaseline(string resourceGroupName, string workspaceName,
            string sqlPoolName, string ruleId, bool ruleAppliesToMaster)
        {
            return GetCurrentSynapseClient().SqlPoolVulnerabilityAssessmentRuleBaselines.Get(resourceGroupName, workspaceName, sqlPoolName, ruleId,
                ruleAppliesToMaster ? VulnerabilityAssessmentPolicyBaselineName.Master : VulnerabilityAssessmentPolicyBaselineName.Default);
        }

        /// <summary>
        /// Removes the SQL pool Vulnerability Assessment rule baseline for the given rule in the given SQL pool in the given workspace in the given resource group
        /// </summary>
        public void ClearSqlPoolVulnerabilityAssessmentRuleBaseline(string resourceGroupName, string workspaceName, string sqlPoolName, string ruleId,
            bool ruleAppliesToMaster)
        {
            GetCurrentSynapseClient().SqlPoolVulnerabilityAssessmentRuleBaselines.Delete(resourceGroupName, workspaceName, sqlPoolName, ruleId,
                ruleAppliesToMaster ? VulnerabilityAssessmentPolicyBaselineName.Master : VulnerabilityAssessmentPolicyBaselineName.Default);
        }

        /// <summary>
        /// Calls the set Vulnerability Assessment APIs for the SQL pool Vulnerability Assessment rule baseline for the given rule in the given SQL pool in the given workspace in the given resource group
        /// </summary>
        public void SetSqlPoolVulnerabilityAssessmentRuleBaseline(string resourceGroupName, string workspaceName, string sqlPoolName, string ruleId,
            bool ruleAppliesToMaster, SqlPoolVulnerabilityAssessmentRuleBaseline parameters)
        {
            GetCurrentSynapseClient().SqlPoolVulnerabilityAssessmentRuleBaselines.CreateOrUpdate(resourceGroupName, workspaceName, sqlPoolName, ruleId,
                ruleAppliesToMaster ? VulnerabilityAssessmentPolicyBaselineName.Master : VulnerabilityAssessmentPolicyBaselineName.Default, parameters);
        }

        public struct StorageContainerInfo
        {
            public string StorageAccountAccessKey;
            public string StorageContainerPath;
        }

        /// <summary>
        /// Get Storage Container Info
        /// </summary>
        public StorageContainerInfo GetStorageContainerInfo(string resourceGroupName, string storageAccountName, string containerName)
        {
            var storageClient = GetCurrentStorageClient();
            var storageAccountObject = storageClient.StorageAccounts.GetProperties(resourceGroupName, storageAccountName);
            var keysObject = storageClient.StorageAccounts.ListKeys(resourceGroupName, storageAccountName);
            // TODO: Remove IfDef
#if NETSTANDARD
            var storageAccountBlobPrimaryEndpoints = storageAccountObject.PrimaryEndpoints.Blob;
            var key = keysObject.Keys.FirstOrDefault().Value;
#else
            var storageAccountBlobPrimaryEndpoints = storageAccountObject.StorageAccount.PrimaryEndpoints.Blob;
            var key = keysObject.StorageAccountKeys.Key1;
#endif
            return new StorageContainerInfo
            {
                StorageAccountAccessKey = key,
                StorageContainerPath = string.Format("{0}{1}", storageAccountBlobPrimaryEndpoints, containerName)
            };
        }

        /// <summary>
        /// Retrieve the Synapse Management client for the currently selected subscription, adding the session and request
        /// id tracing headers for the current cmdlet invocation.
        /// </summary>
        /// <returns>The SQL Management client for the currently selected subscription.</returns>
        private SynapseManagementClient GetCurrentSynapseClient() => SynapseClient ?? (SynapseClient = AzureSession.Instance.ClientFactory.CreateArmClient<SynapseManagementClient>(Context, AzureEnvironment.Endpoint.ResourceManager));

        /// <summary>
        /// Lazy creation of a single instance of a storage client
        /// </summary>
        private StorageManagementClient GetCurrentStorageClient() => StorageClient ?? (StorageClient = AzureEndpointsCommunicator.GetStorageV2Client(Context));
    }
}
