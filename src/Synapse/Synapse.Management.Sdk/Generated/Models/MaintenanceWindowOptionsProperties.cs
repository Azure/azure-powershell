// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Maintenance window options properties.
    /// </summary>
    public partial class MaintenanceWindowOptionsProperties
    {
        /// <summary>
        /// Initializes a new instance of the MaintenanceWindowOptionsProperties class.
        /// </summary>
        public MaintenanceWindowOptionsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MaintenanceWindowOptionsProperties class.
        /// </summary>

        /// <param name="isEnabled">Whether maintenance windows are enabled for the database.
        /// </param>

        /// <param name="maintenanceWindowCycles">Available maintenance cycles e.g. {Saturday, 0, 48*60}, {Wednesday, 0,
        /// 24*60}.
        /// </param>

        /// <param name="minDurationInMinutes">Minimum duration of maintenance window.
        /// </param>

        /// <param name="defaultDurationInMinutes">Default duration for maintenance window.
        /// </param>

        /// <param name="minCycles">Minimum number of maintenance windows cycles to be set on the database.
        /// </param>

        /// <param name="timeGranularityInMinutes">Time granularity in minutes for maintenance windows.
        /// </param>

        /// <param name="allowMultipleMaintenanceWindowsPerCycle">Whether we allow multiple maintenance windows per cycle.
        /// </param>
        public MaintenanceWindowOptionsProperties(bool? isEnabled = default(bool?), System.Collections.Generic.IList<MaintenanceWindowTimeRange> maintenanceWindowCycles = default(System.Collections.Generic.IList<MaintenanceWindowTimeRange>), int? minDurationInMinutes = default(int?), int? defaultDurationInMinutes = default(int?), int? minCycles = default(int?), int? timeGranularityInMinutes = default(int?), bool? allowMultipleMaintenanceWindowsPerCycle = default(bool?))

        {
            this.IsEnabled = isEnabled;
            this.MaintenanceWindowCycles = maintenanceWindowCycles;
            this.MinDurationInMinutes = minDurationInMinutes;
            this.DefaultDurationInMinutes = defaultDurationInMinutes;
            this.MinCycles = minCycles;
            this.TimeGranularityInMinutes = timeGranularityInMinutes;
            this.AllowMultipleMaintenanceWindowsPerCycle = allowMultipleMaintenanceWindowsPerCycle;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets whether maintenance windows are enabled for the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isEnabled")]
        public bool? IsEnabled {get; set; }

        /// <summary>
        /// Gets or sets available maintenance cycles e.g. {Saturday, 0, 48*60},
        /// {Wednesday, 0, 24*60}.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maintenanceWindowCycles")]
        public System.Collections.Generic.IList<MaintenanceWindowTimeRange> MaintenanceWindowCycles {get; set; }

        /// <summary>
        /// Gets or sets minimum duration of maintenance window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minDurationInMinutes")]
        public int? MinDurationInMinutes {get; set; }

        /// <summary>
        /// Gets or sets default duration for maintenance window.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultDurationInMinutes")]
        public int? DefaultDurationInMinutes {get; set; }

        /// <summary>
        /// Gets or sets minimum number of maintenance windows cycles to be set on the
        /// database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minCycles")]
        public int? MinCycles {get; set; }

        /// <summary>
        /// Gets or sets time granularity in minutes for maintenance windows.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeGranularityInMinutes")]
        public int? TimeGranularityInMinutes {get; set; }

        /// <summary>
        /// Gets or sets whether we allow multiple maintenance windows per cycle.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowMultipleMaintenanceWindowsPerCycle")]
        public bool? AllowMultipleMaintenanceWindowsPerCycle {get; set; }
    }
}