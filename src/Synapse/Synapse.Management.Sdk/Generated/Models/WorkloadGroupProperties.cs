// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Workload group definition. For more information look at
    /// sys.workload_management_workload_groups (DMV).
    /// </summary>
    public partial class WorkloadGroupProperties
    {
        /// <summary>
        /// Initializes a new instance of the WorkloadGroupProperties class.
        /// </summary>
        public WorkloadGroupProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WorkloadGroupProperties class.
        /// </summary>

        /// <param name="minResourcePercent">The workload group minimum percentage resource.
        /// </param>

        /// <param name="maxResourcePercent">The workload group cap percentage resource.
        /// </param>

        /// <param name="minResourcePercentPerRequest">The workload group request minimum grant percentage.
        /// </param>

        /// <param name="maxResourcePercentPerRequest">The workload group request maximum grant percentage.
        /// </param>

        /// <param name="importance">The workload group importance level.
        /// </param>

        /// <param name="queryExecutionTimeout">The workload group query execution timeout.
        /// </param>
        public WorkloadGroupProperties(int minResourcePercent, int maxResourcePercent, double minResourcePercentPerRequest, double? maxResourcePercentPerRequest = default(double?), string importance = default(string), int? queryExecutionTimeout = default(int?))

        {
            this.MinResourcePercent = minResourcePercent;
            this.MaxResourcePercent = maxResourcePercent;
            this.MinResourcePercentPerRequest = minResourcePercentPerRequest;
            this.MaxResourcePercentPerRequest = maxResourcePercentPerRequest;
            this.Importance = importance;
            this.QueryExecutionTimeout = queryExecutionTimeout;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the workload group minimum percentage resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minResourcePercent")]
        public int MinResourcePercent {get; set; }

        /// <summary>
        /// Gets or sets the workload group cap percentage resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxResourcePercent")]
        public int MaxResourcePercent {get; set; }

        /// <summary>
        /// Gets or sets the workload group request minimum grant percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minResourcePercentPerRequest")]
        public double MinResourcePercentPerRequest {get; set; }

        /// <summary>
        /// Gets or sets the workload group request maximum grant percentage.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxResourcePercentPerRequest")]
        public double? MaxResourcePercentPerRequest {get; set; }

        /// <summary>
        /// Gets or sets the workload group importance level.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "importance")]
        public string Importance {get; set; }

        /// <summary>
        /// Gets or sets the workload group query execution timeout.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "queryExecutionTimeout")]
        public int? QueryExecutionTimeout {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

        }
    }
}