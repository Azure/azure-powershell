// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing the Kusto event hub connection properties.
    /// </summary>
    public partial class EventHubConnectionProperties
    {
        /// <summary>
        /// Initializes a new instance of the EventHubConnectionProperties class.
        /// </summary>
        public EventHubConnectionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EventHubConnectionProperties class.
        /// </summary>

        /// <param name="eventHubResourceId">The resource ID of the event hub to be used to create a data connection.
        /// </param>

        /// <param name="consumerGroup">The event hub consumer group.
        /// </param>

        /// <param name="tableName">The table where the data should be ingested. Optionally the table
        /// information can be added to each message.
        /// </param>

        /// <param name="mappingRuleName">The mapping rule to be used to ingest the data. Optionally the mapping
        /// information can be added to each message.
        /// </param>

        /// <param name="dataFormat">The data format of the message. Optionally the data format can be added to
        /// each message.
        /// Possible values include: &#39;MULTIJSON&#39;, &#39;JSON&#39;, &#39;CSV&#39;, &#39;TSV&#39;, &#39;SCSV&#39;,
        /// &#39;SOHSV&#39;, &#39;PSV&#39;, &#39;TXT&#39;, &#39;RAW&#39;, &#39;SINGLEJSON&#39;, &#39;AVRO&#39;, &#39;TSVE&#39;, &#39;PARQUET&#39;,
        /// &#39;ORC&#39;, &#39;APACHEAVRO&#39;, &#39;W3CLOGFILE&#39;</param>

        /// <param name="eventSystemProperties">System properties of the event hub
        /// </param>

        /// <param name="compression">The event hub messages compression type
        /// Possible values include: &#39;None&#39;, &#39;GZip&#39;</param>

        /// <param name="provisioningState">The provisioned state of the resource.
        /// Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;,
        /// &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;</param>

        /// <param name="managedIdentityResourceId">The resource ID of a managed identity (system or user assigned) to be used
        /// to authenticate with event hub.
        /// </param>
        public EventHubConnectionProperties(string eventHubResourceId, string consumerGroup, string tableName = default(string), string mappingRuleName = default(string), string dataFormat = default(string), System.Collections.Generic.IList<string> eventSystemProperties = default(System.Collections.Generic.IList<string>), string compression = default(string), string provisioningState = default(string), string managedIdentityResourceId = default(string))

        {
            this.EventHubResourceId = eventHubResourceId;
            this.ConsumerGroup = consumerGroup;
            this.TableName = tableName;
            this.MappingRuleName = mappingRuleName;
            this.DataFormat = dataFormat;
            this.EventSystemProperties = eventSystemProperties;
            this.Compression = compression;
            this.ProvisioningState = provisioningState;
            this.ManagedIdentityResourceId = managedIdentityResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the resource ID of the event hub to be used to create a data
        /// connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventHubResourceId")]
        public string EventHubResourceId {get; set; }

        /// <summary>
        /// Gets or sets the event hub consumer group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "consumerGroup")]
        public string ConsumerGroup {get; set; }

        /// <summary>
        /// Gets or sets the table where the data should be ingested. Optionally the
        /// table information can be added to each message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tableName")]
        public string TableName {get; set; }

        /// <summary>
        /// Gets or sets the mapping rule to be used to ingest the data. Optionally the
        /// mapping information can be added to each message.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mappingRuleName")]
        public string MappingRuleName {get; set; }

        /// <summary>
        /// Gets or sets the data format of the message. Optionally the data format can
        /// be added to each message. Possible values include: &#39;MULTIJSON&#39;, &#39;JSON&#39;, &#39;CSV&#39;, &#39;TSV&#39;, &#39;SCSV&#39;, &#39;SOHSV&#39;, &#39;PSV&#39;, &#39;TXT&#39;, &#39;RAW&#39;, &#39;SINGLEJSON&#39;, &#39;AVRO&#39;, &#39;TSVE&#39;, &#39;PARQUET&#39;, &#39;ORC&#39;, &#39;APACHEAVRO&#39;, &#39;W3CLOGFILE&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataFormat")]
        public string DataFormat {get; set; }

        /// <summary>
        /// Gets or sets system properties of the event hub
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "eventSystemProperties")]
        public System.Collections.Generic.IList<string> EventSystemProperties {get; set; }

        /// <summary>
        /// Gets or sets the event hub messages compression type Possible values include: &#39;None&#39;, &#39;GZip&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "compression")]
        public string Compression {get; set; }

        /// <summary>
        /// Gets the provisioned state of the resource. Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the resource ID of a managed identity (system or user
        /// assigned) to be used to authenticate with event hub.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedIdentityResourceId")]
        public string ManagedIdentityResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.EventHubResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "EventHubResourceId");
            }
            if (this.ConsumerGroup == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConsumerGroup");
            }









        }
    }
}