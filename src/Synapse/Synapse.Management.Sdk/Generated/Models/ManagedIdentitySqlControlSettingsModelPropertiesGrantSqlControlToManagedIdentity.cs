// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Grant sql control to managed identity
    /// </summary>
    public partial class ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity
    {
        /// <summary>
        /// Initializes a new instance of the ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity class.
        /// </summary>
        public ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity class.
        /// </summary>

        /// <param name="desiredState">Desired state
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="actualState">Actual state
        /// Possible values include: &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;, &#39;Disabled&#39;,
        /// &#39;Unknown&#39;</param>
        public ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity(string desiredState = default(string), string actualState = default(string))

        {
            this.DesiredState = desiredState;
            this.ActualState = actualState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets desired state Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "desiredState")]
        public string DesiredState {get; set; }

        /// <summary>
        /// Gets actual state Possible values include: &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;, &#39;Disabled&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "actualState")]
        public string ActualState {get; private set; }
    }
}