// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DataMaskingPolicy : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the DataMaskingPolicy class.
        /// </summary>
        public DataMaskingPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataMaskingPolicy class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="location">The location of the data masking policy.
        /// </param>

        /// <param name="kind">The kind of data masking policy. Metadata, used for Azure portal.
        /// </param>

        /// <param name="managedBy">Fully qualified resource ID of the sql pool
        /// </param>

        /// <param name="dataMaskingState">The state of the data masking policy.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="exemptPrincipals">The list of the exempt principals. Specifies the semicolon-separated list
        /// of database users for which the data masking policy does not apply. The
        /// specified users receive data results without masking for all of the
        /// database queries.
        /// </param>

        /// <param name="applicationPrincipals">The list of the application principals. This is a legacy parameter and is
        /// no longer used.
        /// </param>

        /// <param name="maskingLevel">The masking level. This is a legacy parameter and is no longer used.
        /// </param>
        public DataMaskingPolicy(string id = default(string), string name = default(string), string type = default(string), string location = default(string), string kind = default(string), string managedBy = default(string), DataMaskingState? dataMaskingState = default(DataMaskingState?), string exemptPrincipals = default(string), string applicationPrincipals = default(string), string maskingLevel = default(string))

        : base(id, name, type)
        {
            this.Location = location;
            this.Kind = kind;
            this.ManagedBy = managedBy;
            this.DataMaskingState = dataMaskingState;
            this.ExemptPrincipals = exemptPrincipals;
            this.ApplicationPrincipals = applicationPrincipals;
            this.MaskingLevel = maskingLevel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the location of the data masking policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; private set; }

        /// <summary>
        /// Gets the kind of data masking policy. Metadata, used for Azure portal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; private set; }

        /// <summary>
        /// Gets fully qualified resource ID of the sql pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedBy")]
        public string ManagedBy {get; private set; }

        /// <summary>
        /// Gets or sets the state of the data masking policy. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataMaskingState")]
        public DataMaskingState? DataMaskingState {get; set; }

        /// <summary>
        /// Gets or sets the list of the exempt principals. Specifies the
        /// semicolon-separated list of database users for which the data masking
        /// policy does not apply. The specified users receive data results without
        /// masking for all of the database queries.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.exemptPrincipals")]
        public string ExemptPrincipals {get; set; }

        /// <summary>
        /// Gets the list of the application principals. This is a legacy parameter and
        /// is no longer used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.applicationPrincipals")]
        public string ApplicationPrincipals {get; private set; }

        /// <summary>
        /// Gets the masking level. This is a legacy parameter and is no longer used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maskingLevel")]
        public string MaskingLevel {get; private set; }
    }
}