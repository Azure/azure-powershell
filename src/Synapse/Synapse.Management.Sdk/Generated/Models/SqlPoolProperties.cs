// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// The sql pool&#39;s properties.
    /// </summary>
    public partial class SqlPoolProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolProperties class.
        /// </summary>
        public SqlPoolProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolProperties class.
        /// </summary>

        /// <param name="status">The status of the sql pool.
        /// Possible values include: &#39;Invisible&#39;, &#39;Online&#39;, &#39;Offline&#39;, &#39;Creating&#39;,
        /// &#39;Inaccessible&#39;, &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;, &#39;Dropping&#39;,
        /// &#39;Error&#39;, &#39;Unknown&#39;</param>

        /// <param name="sqlPoolGuid">The Guid of the sql pool.
        /// </param>

        /// <param name="currentServiceObjectiveName">The current service level objective name of the sql pool.
        /// </param>

        /// <param name="requestedServiceObjectiveName">The requested service level objective name of the sql pool.
        /// </param>

        /// <param name="maxServiceObjectiveName">The max service level objective name of the sql pool.
        /// </param>

        /// <param name="autoPauseTimer">The period of inactivity in minutes before automatically pausing the sql
        /// pool.
        /// </param>

        /// <param name="autoResume">Indicates whether the sql pool can automatically resume when connection
        /// attempts are made.
        /// </param>
        public SqlPoolProperties(string status = default(string), System.Guid? sqlPoolGuid = default(System.Guid?), string currentServiceObjectiveName = default(string), string requestedServiceObjectiveName = default(string), string maxServiceObjectiveName = default(string), int? autoPauseTimer = default(int?), bool? autoResume = default(bool?))

        {
            this.Status = status;
            this.SqlPoolGuid = sqlPoolGuid;
            this.CurrentServiceObjectiveName = currentServiceObjectiveName;
            this.RequestedServiceObjectiveName = requestedServiceObjectiveName;
            this.MaxServiceObjectiveName = maxServiceObjectiveName;
            this.AutoPauseTimer = autoPauseTimer;
            this.AutoResume = autoResume;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the status of the sql pool. Possible values include: &#39;Invisible&#39;, &#39;Online&#39;, &#39;Offline&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;, &#39;Dropping&#39;, &#39;Error&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the Guid of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlPoolGuid")]
        public System.Guid? SqlPoolGuid {get; private set; }

        /// <summary>
        /// Gets the current service level objective name of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentServiceObjectiveName")]
        public string CurrentServiceObjectiveName {get; private set; }

        /// <summary>
        /// Gets the requested service level objective name of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestedServiceObjectiveName")]
        public string RequestedServiceObjectiveName {get; private set; }

        /// <summary>
        /// Gets or sets the max service level objective name of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxServiceObjectiveName")]
        public string MaxServiceObjectiveName {get; set; }

        /// <summary>
        /// Gets or sets the period of inactivity in minutes before automatically
        /// pausing the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoPauseTimer")]
        public int? AutoPauseTimer {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the sql pool can automatically resume when
        /// connection attempts are made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoResume")]
        public bool? AutoResume {get; set; }
    }
}