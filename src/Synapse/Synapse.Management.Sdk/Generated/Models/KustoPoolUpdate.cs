// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing an update to a Kusto kusto pool.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class KustoPoolUpdate : Resource
    {
        /// <summary>
        /// Initializes a new instance of the KustoPoolUpdate class.
        /// </summary>
        public KustoPoolUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KustoPoolUpdate class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="sku">The SKU of the kusto pool.
        /// </param>

        /// <param name="state">The state of the resource.
        /// Possible values include: &#39;Creating&#39;, &#39;Unavailable&#39;, &#39;Running&#39;, &#39;Deleting&#39;,
        /// &#39;Deleted&#39;, &#39;Stopping&#39;, &#39;Stopped&#39;, &#39;Starting&#39;, &#39;Updating&#39;</param>

        /// <param name="optimizedAutoscale">Optimized auto scale definition.
        /// </param>

        /// <param name="provisioningState">The provisioned state of the resource.
        /// Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;,
        /// &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;</param>

        /// <param name="uri">The Kusto Pool URI.
        /// </param>

        /// <param name="dataIngestionUri">The Kusto Pool data ingestion URI.
        /// </param>

        /// <param name="stateReason">The reason for the Kusto Pool&#39;s current state.
        /// </param>

        /// <param name="enableStreamingIngest">A boolean value that indicates if the streaming ingest is enabled.
        /// </param>

        /// <param name="enablePurge">A boolean value that indicates if the purge operations are enabled.
        /// </param>

        /// <param name="languageExtensions">List of the Kusto Pool&#39;s language extensions.
        /// </param>

        /// <param name="workspaceUid">The workspace unique identifier.
        /// </param>
        public KustoPoolUpdate(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), AzureSku sku = default(AzureSku), string state = default(string), OptimizedAutoscale optimizedAutoscale = default(OptimizedAutoscale), string provisioningState = default(string), string uri = default(string), string dataIngestionUri = default(string), string stateReason = default(string), bool? enableStreamingIngest = default(bool?), bool? enablePurge = default(bool?), LanguageExtensionsList languageExtensions = default(LanguageExtensionsList), string workspaceUid = default(string))

        : base(id, name, type)
        {
            this.Tags = tags;
            this.Sku = sku;
            this.State = state;
            this.OptimizedAutoscale = optimizedAutoscale;
            this.ProvisioningState = provisioningState;
            this.Uri = uri;
            this.DataIngestionUri = dataIngestionUri;
            this.StateReason = stateReason;
            this.EnableStreamingIngest = enableStreamingIngest;
            this.EnablePurge = enablePurge;
            this.LanguageExtensions = languageExtensions;
            this.WorkspaceUid = workspaceUid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the SKU of the kusto pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public AzureSku Sku {get; set; }

        /// <summary>
        /// Gets the state of the resource. Possible values include: &#39;Creating&#39;, &#39;Unavailable&#39;, &#39;Running&#39;, &#39;Deleting&#39;, &#39;Deleted&#39;, &#39;Stopping&#39;, &#39;Stopped&#39;, &#39;Starting&#39;, &#39;Updating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets or sets optimized auto scale definition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.optimizedAutoscale")]
        public OptimizedAutoscale OptimizedAutoscale {get; set; }

        /// <summary>
        /// Gets the provisioned state of the resource. Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the Kusto Pool URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.uri")]
        public string Uri {get; private set; }

        /// <summary>
        /// Gets the Kusto Pool data ingestion URI.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataIngestionUri")]
        public string DataIngestionUri {get; private set; }

        /// <summary>
        /// Gets the reason for the Kusto Pool&#39;s current state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.stateReason")]
        public string StateReason {get; private set; }

        /// <summary>
        /// Gets or sets a boolean value that indicates if the streaming ingest is
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableStreamingIngest")]
        public bool? EnableStreamingIngest {get; set; }

        /// <summary>
        /// Gets or sets a boolean value that indicates if the purge operations are
        /// enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enablePurge")]
        public bool? EnablePurge {get; set; }

        /// <summary>
        /// Gets list of the Kusto Pool&#39;s language extensions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.languageExtensions")]
        public LanguageExtensionsList LanguageExtensions {get; private set; }

        /// <summary>
        /// Gets or sets the workspace unique identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.workspaceUID")]
        public string WorkspaceUid {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Sku != null)
            {
                this.Sku.Validate();
            }

            if (this.OptimizedAutoscale != null)
            {
                this.OptimizedAutoscale.Validate();
            }






        }
    }
}