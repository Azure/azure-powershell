// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// The object sent for a kusto pool check name availability request.
    /// </summary>
    public partial class KustoPoolCheckNameRequest
    {
        /// <summary>
        /// Initializes a new instance of the KustoPoolCheckNameRequest class.
        /// </summary>
        public KustoPoolCheckNameRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the KustoPoolCheckNameRequest class.
        /// </summary>

        /// <param name="name">Kusto Pool name.
        /// </param>
        public KustoPoolCheckNameRequest(string name)

        {
            this.Name = name;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for KustoPoolCheckNameRequest class.
        /// </summary>
        static KustoPoolCheckNameRequest()
        {
            Type = "Microsoft.Synapse/workspaces/kustoPools";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets kusto Pool name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }
        /// <summary>
        /// Gets or sets the type of resource, Microsoft.Synapse/workspaces/kustoPools.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public static string Type {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }


        }
    }
}