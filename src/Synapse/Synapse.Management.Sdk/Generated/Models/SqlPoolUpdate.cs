// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// A sql pool resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SqlPoolUpdate
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolUpdate class.
        /// </summary>
        public SqlPoolUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolUpdate class.
        /// </summary>

        /// <param name="sku">The name and tier of the SKU.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="status">The status of the sql pool.
        /// Possible values include: &#39;Invisible&#39;, &#39;Online&#39;, &#39;Offline&#39;, &#39;Creating&#39;,
        /// &#39;Inaccessible&#39;, &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;, &#39;Dropping&#39;,
        /// &#39;Error&#39;, &#39;Unknown&#39;</param>

        /// <param name="sqlPoolGuid">The Guid of the sql pool.
        /// </param>

        /// <param name="currentServiceObjectiveName">The current service level objective name of the sql pool.
        /// </param>

        /// <param name="requestedServiceObjectiveName">The requested service level objective name of the sql pool.
        /// </param>

        /// <param name="maxServiceObjectiveName">The max service level objective name of the sql pool.
        /// </param>

        /// <param name="autoPauseTimer">The period of inactivity in minutes before automatically pausing the sql
        /// pool.
        /// </param>

        /// <param name="autoResume">Indicates whether the sql pool can automatically resume when connection
        /// attempts are made.
        /// </param>
        public SqlPoolUpdate(SkuV3 sku = default(SkuV3), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string status = default(string), System.Guid? sqlPoolGuid = default(System.Guid?), string currentServiceObjectiveName = default(string), string requestedServiceObjectiveName = default(string), string maxServiceObjectiveName = default(string), int? autoPauseTimer = default(int?), bool? autoResume = default(bool?))

        {
            this.Sku = sku;
            this.Tags = tags;
            this.Status = status;
            this.SqlPoolGuid = sqlPoolGuid;
            this.CurrentServiceObjectiveName = currentServiceObjectiveName;
            this.RequestedServiceObjectiveName = requestedServiceObjectiveName;
            this.MaxServiceObjectiveName = maxServiceObjectiveName;
            this.AutoPauseTimer = autoPauseTimer;
            this.AutoResume = autoResume;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name and tier of the SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public SkuV3 Sku {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets the status of the sql pool. Possible values include: &#39;Invisible&#39;, &#39;Online&#39;, &#39;Offline&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;, &#39;Dropping&#39;, &#39;Error&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the Guid of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sqlPoolGuid")]
        public System.Guid? SqlPoolGuid {get; private set; }

        /// <summary>
        /// Gets the current service level objective name of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentServiceObjectiveName")]
        public string CurrentServiceObjectiveName {get; private set; }

        /// <summary>
        /// Gets the requested service level objective name of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestedServiceObjectiveName")]
        public string RequestedServiceObjectiveName {get; private set; }

        /// <summary>
        /// Gets or sets the max service level objective name of the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxServiceObjectiveName")]
        public string MaxServiceObjectiveName {get; set; }

        /// <summary>
        /// Gets or sets the period of inactivity in minutes before automatically
        /// pausing the sql pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoPauseTimer")]
        public int? AutoPauseTimer {get; set; }

        /// <summary>
        /// Gets or sets indicates whether the sql pool can automatically resume when
        /// connection attempts are made.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoResume")]
        public bool? AutoResume {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }





        }
    }
}