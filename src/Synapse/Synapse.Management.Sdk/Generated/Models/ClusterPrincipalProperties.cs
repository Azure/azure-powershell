// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// A class representing cluster principal property.
    /// </summary>
    public partial class ClusterPrincipalProperties
    {
        /// <summary>
        /// Initializes a new instance of the ClusterPrincipalProperties class.
        /// </summary>
        public ClusterPrincipalProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ClusterPrincipalProperties class.
        /// </summary>

        /// <param name="principalId">The principal ID assigned to the cluster principal. It can be a user email,
        /// application ID, or security group name.
        /// </param>

        /// <param name="role">Cluster principal role.
        /// Possible values include: &#39;AllDatabasesAdmin&#39;, &#39;AllDatabasesViewer&#39;</param>

        /// <param name="tenantId">The tenant id of the principal
        /// </param>

        /// <param name="principalType">Principal type.
        /// Possible values include: &#39;App&#39;, &#39;Group&#39;, &#39;User&#39;</param>

        /// <param name="tenantName">The tenant name of the principal
        /// </param>

        /// <param name="principalName">The principal name
        /// </param>

        /// <param name="provisioningState">The provisioned state of the resource.
        /// Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;,
        /// &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;</param>
        public ClusterPrincipalProperties(string principalId, string role, string principalType, string tenantId = default(string), string tenantName = default(string), string principalName = default(string), string provisioningState = default(string))

        {
            this.PrincipalId = principalId;
            this.Role = role;
            this.TenantId = tenantId;
            this.PrincipalType = principalType;
            this.TenantName = tenantName;
            this.PrincipalName = principalName;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the principal ID assigned to the cluster principal. It can be
        /// a user email, application ID, or security group name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "principalId")]
        public string PrincipalId {get; set; }

        /// <summary>
        /// Gets or sets cluster principal role. Possible values include: &#39;AllDatabasesAdmin&#39;, &#39;AllDatabasesViewer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "role")]
        public string Role {get; set; }

        /// <summary>
        /// Gets or sets the tenant id of the principal
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public string TenantId {get; set; }

        /// <summary>
        /// Gets or sets principal type. Possible values include: &#39;App&#39;, &#39;Group&#39;, &#39;User&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "principalType")]
        public string PrincipalType {get; set; }

        /// <summary>
        /// Gets the tenant name of the principal
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantName")]
        public string TenantName {get; private set; }

        /// <summary>
        /// Gets the principal name
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "principalName")]
        public string PrincipalName {get; private set; }

        /// <summary>
        /// Gets the provisioned state of the resource. Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PrincipalId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrincipalId");
            }
            if (this.Role == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Role");
            }
            if (this.PrincipalType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PrincipalType");
            }







        }
    }
}