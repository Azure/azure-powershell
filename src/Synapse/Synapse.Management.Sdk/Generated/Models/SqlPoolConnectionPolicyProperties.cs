// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a Sql pool connection policy.
    /// </summary>
    public partial class SqlPoolConnectionPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolConnectionPolicyProperties class.
        /// </summary>
        public SqlPoolConnectionPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolConnectionPolicyProperties class.
        /// </summary>

        /// <param name="securityEnabledAccess">The state of security access.
        /// </param>

        /// <param name="proxyDnsName">The fully qualified host name of the auditing proxy.
        /// </param>

        /// <param name="proxyPort">The port number of the auditing proxy.
        /// </param>

        /// <param name="visibility">The visibility of the auditing proxy.
        /// </param>

        /// <param name="useServerDefault">Whether server default is enabled or disabled.
        /// </param>

        /// <param name="redirectionState">The state of proxy redirection.
        /// </param>

        /// <param name="state">The connection policy state.
        /// </param>
        public SqlPoolConnectionPolicyProperties(string securityEnabledAccess = default(string), string proxyDnsName = default(string), string proxyPort = default(string), string visibility = default(string), string useServerDefault = default(string), string redirectionState = default(string), string state = default(string))

        {
            this.SecurityEnabledAccess = securityEnabledAccess;
            this.ProxyDnsName = proxyDnsName;
            this.ProxyPort = proxyPort;
            this.Visibility = visibility;
            this.UseServerDefault = useServerDefault;
            this.RedirectionState = redirectionState;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the state of security access.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityEnabledAccess")]
        public string SecurityEnabledAccess {get; set; }

        /// <summary>
        /// Gets or sets the fully qualified host name of the auditing proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "proxyDnsName")]
        public string ProxyDnsName {get; set; }

        /// <summary>
        /// Gets or sets the port number of the auditing proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "proxyPort")]
        public string ProxyPort {get; set; }

        /// <summary>
        /// Gets or sets the visibility of the auditing proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "visibility")]
        public string Visibility {get; set; }

        /// <summary>
        /// Gets or sets whether server default is enabled or disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useServerDefault")]
        public string UseServerDefault {get; set; }

        /// <summary>
        /// Gets or sets the state of proxy redirection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "redirectionState")]
        public string RedirectionState {get; set; }

        /// <summary>
        /// Gets or sets the connection policy state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }
    }
}