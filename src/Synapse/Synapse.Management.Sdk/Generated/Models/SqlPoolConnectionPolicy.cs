// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// A Sql pool connection policy.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SqlPoolConnectionPolicy : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolConnectionPolicy class.
        /// </summary>
        public SqlPoolConnectionPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolConnectionPolicy class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="kind">Resource kind.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="securityEnabledAccess">The state of security access.
        /// </param>

        /// <param name="proxyDnsName">The fully qualified host name of the auditing proxy.
        /// </param>

        /// <param name="proxyPort">The port number of the auditing proxy.
        /// </param>

        /// <param name="visibility">The visibility of the auditing proxy.
        /// </param>

        /// <param name="useServerDefault">Whether server default is enabled or disabled.
        /// </param>

        /// <param name="redirectionState">The state of proxy redirection.
        /// </param>

        /// <param name="state">The connection policy state.
        /// </param>
        public SqlPoolConnectionPolicy(string id = default(string), string name = default(string), string type = default(string), string kind = default(string), string location = default(string), string securityEnabledAccess = default(string), string proxyDnsName = default(string), string proxyPort = default(string), string visibility = default(string), string useServerDefault = default(string), string redirectionState = default(string), string state = default(string))

        : base(id, name, type)
        {
            this.Kind = kind;
            this.Location = location;
            this.SecurityEnabledAccess = securityEnabledAccess;
            this.ProxyDnsName = proxyDnsName;
            this.ProxyPort = proxyPort;
            this.Visibility = visibility;
            this.UseServerDefault = useServerDefault;
            this.RedirectionState = redirectionState;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets resource kind.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; private set; }

        /// <summary>
        /// Gets resource location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; private set; }

        /// <summary>
        /// Gets or sets the state of security access.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.securityEnabledAccess")]
        public string SecurityEnabledAccess {get; set; }

        /// <summary>
        /// Gets or sets the fully qualified host name of the auditing proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.proxyDnsName")]
        public string ProxyDnsName {get; set; }

        /// <summary>
        /// Gets or sets the port number of the auditing proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.proxyPort")]
        public string ProxyPort {get; set; }

        /// <summary>
        /// Gets or sets the visibility of the auditing proxy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.visibility")]
        public string Visibility {get; set; }

        /// <summary>
        /// Gets or sets whether server default is enabled or disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.useServerDefault")]
        public string UseServerDefault {get; set; }

        /// <summary>
        /// Gets or sets the state of proxy redirection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.redirectionState")]
        public string RedirectionState {get; set; }

        /// <summary>
        /// Gets or sets the connection policy state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; set; }
    }
}