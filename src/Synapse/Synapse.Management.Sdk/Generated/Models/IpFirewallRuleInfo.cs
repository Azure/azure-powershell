// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// IP firewall rule
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class IpFirewallRuleInfo : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the IpFirewallRuleInfo class.
        /// </summary>
        public IpFirewallRuleInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpFirewallRuleInfo class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="provisioningState">Resource provisioning state
        /// Possible values include: &#39;Provisioning&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Failed&#39;,
        /// &#39;DeleteError&#39;</param>

        /// <param name="endIPAddress">The end IP address of the firewall rule. Must be IPv4 format. Must be
        /// greater than or equal to startIpAddress
        /// </param>

        /// <param name="startIPAddress">The start IP address of the firewall rule. Must be IPv4 format
        /// </param>
        public IpFirewallRuleInfo(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), string endIPAddress = default(string), string startIPAddress = default(string))

        : base(id, name, type)
        {
            this.ProvisioningState = provisioningState;
            this.EndIpAddress = endIPAddress;
            this.StartIpAddress = startIPAddress;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets resource provisioning state Possible values include: &#39;Provisioning&#39;, &#39;Succeeded&#39;, &#39;Deleting&#39;, &#39;Failed&#39;, &#39;DeleteError&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the end IP address of the firewall rule. Must be IPv4 format.
        /// Must be greater than or equal to startIpAddress
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endIpAddress")]
        public string EndIpAddress {get; set; }

        /// <summary>
        /// Gets or sets the start IP address of the firewall rule. Must be IPv4 format
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.startIpAddress")]
        public string StartIpAddress {get; set; }
    }
}