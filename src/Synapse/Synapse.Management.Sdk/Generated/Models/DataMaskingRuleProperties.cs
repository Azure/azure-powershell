// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a Sql pool data masking rule.
    /// </summary>
    public partial class DataMaskingRuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the DataMaskingRuleProperties class.
        /// </summary>
        public DataMaskingRuleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataMaskingRuleProperties class.
        /// </summary>

        /// <param name="id">The rule Id.
        /// </param>

        /// <param name="aliasName">The alias name. This is a legacy parameter and is no longer used.
        /// </param>

        /// <param name="ruleState">The rule state. Used to delete a rule. To delete an existing rule, specify
        /// the schemaName, tableName, columnName, maskingFunction, and specify
        /// ruleState as disabled. However, if the rule doesn&#39;t already exist, the rule
        /// will be created with ruleState set to enabled, regardless of the provided
        /// value of ruleState.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="schemaName">The schema name on which the data masking rule is applied.
        /// </param>

        /// <param name="tableName">The table name on which the data masking rule is applied.
        /// </param>

        /// <param name="columnName">The column name on which the data masking rule is applied.
        /// </param>

        /// <param name="maskingFunction">The masking function that is used for the data masking rule.
        /// Possible values include: &#39;Default&#39;, &#39;CCN&#39;, &#39;Email&#39;, &#39;Number&#39;, &#39;SSN&#39;, &#39;Text&#39;</param>

        /// <param name="numberFrom">The numberFrom property of the masking rule. Required if maskingFunction is
        /// set to Number, otherwise this parameter will be ignored.
        /// </param>

        /// <param name="numberTo">The numberTo property of the data masking rule. Required if maskingFunction
        /// is set to Number, otherwise this parameter will be ignored.
        /// </param>

        /// <param name="prefixSize">If maskingFunction is set to Text, the number of characters to show
        /// unmasked in the beginning of the string. Otherwise, this parameter will be
        /// ignored.
        /// </param>

        /// <param name="suffixSize">If maskingFunction is set to Text, the number of characters to show
        /// unmasked at the end of the string. Otherwise, this parameter will be
        /// ignored.
        /// </param>

        /// <param name="replacementString">If maskingFunction is set to Text, the character to use for masking the
        /// unexposed part of the string. Otherwise, this parameter will be ignored.
        /// </param>
        public DataMaskingRuleProperties(string schemaName, string tableName, string columnName, DataMaskingFunction maskingFunction, string id = default(string), string aliasName = default(string), DataMaskingRuleState? ruleState = default(DataMaskingRuleState?), string numberFrom = default(string), string numberTo = default(string), string prefixSize = default(string), string suffixSize = default(string), string replacementString = default(string))

        {
            this.Id = id;
            this.AliasName = aliasName;
            this.RuleState = ruleState;
            this.SchemaName = schemaName;
            this.TableName = tableName;
            this.ColumnName = columnName;
            this.MaskingFunction = maskingFunction;
            this.NumberFrom = numberFrom;
            this.NumberTo = numberTo;
            this.PrefixSize = prefixSize;
            this.SuffixSize = suffixSize;
            this.ReplacementString = replacementString;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the rule Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets or sets the alias name. This is a legacy parameter and is no longer
        /// used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aliasName")]
        public string AliasName {get; set; }

        /// <summary>
        /// Gets or sets the rule state. Used to delete a rule. To delete an existing
        /// rule, specify the schemaName, tableName, columnName, maskingFunction, and
        /// specify ruleState as disabled. However, if the rule doesn&#39;t already exist,
        /// the rule will be created with ruleState set to enabled, regardless of the
        /// provided value of ruleState. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleState")]
        public DataMaskingRuleState? RuleState {get; set; }

        /// <summary>
        /// Gets or sets the schema name on which the data masking rule is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schemaName")]
        public string SchemaName {get; set; }

        /// <summary>
        /// Gets or sets the table name on which the data masking rule is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tableName")]
        public string TableName {get; set; }

        /// <summary>
        /// Gets or sets the column name on which the data masking rule is applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "columnName")]
        public string ColumnName {get; set; }

        /// <summary>
        /// Gets or sets the masking function that is used for the data masking rule. Possible values include: &#39;Default&#39;, &#39;CCN&#39;, &#39;Email&#39;, &#39;Number&#39;, &#39;SSN&#39;, &#39;Text&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maskingFunction")]
        public DataMaskingFunction MaskingFunction {get; set; }

        /// <summary>
        /// Gets or sets the numberFrom property of the masking rule. Required if
        /// maskingFunction is set to Number, otherwise this parameter will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberFrom")]
        public string NumberFrom {get; set; }

        /// <summary>
        /// Gets or sets the numberTo property of the data masking rule. Required if
        /// maskingFunction is set to Number, otherwise this parameter will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberTo")]
        public string NumberTo {get; set; }

        /// <summary>
        /// Gets or sets if maskingFunction is set to Text, the number of characters to
        /// show unmasked in the beginning of the string. Otherwise, this parameter
        /// will be ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "prefixSize")]
        public string PrefixSize {get; set; }

        /// <summary>
        /// Gets or sets if maskingFunction is set to Text, the number of characters to
        /// show unmasked at the end of the string. Otherwise, this parameter will be
        /// ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "suffixSize")]
        public string SuffixSize {get; set; }

        /// <summary>
        /// Gets or sets if maskingFunction is set to Text, the character to use for
        /// masking the unexposed part of the string. Otherwise, this parameter will be
        /// ignored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replacementString")]
        public string ReplacementString {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SchemaName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SchemaName");
            }
            if (this.TableName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TableName");
            }
            if (this.ColumnName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ColumnName");
            }












        }
    }
}