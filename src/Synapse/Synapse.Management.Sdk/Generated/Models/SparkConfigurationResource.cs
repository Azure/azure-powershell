// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// SparkConfiguration response details
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SparkConfigurationResource : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the SparkConfigurationResource class.
        /// </summary>
        public SparkConfigurationResource()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SparkConfigurationResource class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="etag">Resource Etag.
        /// </param>

        /// <param name="description">Description about the SparkConfiguration.
        /// </param>

        /// <param name="configs">SparkConfiguration configs.
        /// </param>

        /// <param name="annotations">Annotations for SparkConfiguration.
        /// </param>

        /// <param name="notes">additional Notes.
        /// </param>

        /// <param name="createdBy">The identity that created the resource.
        /// </param>

        /// <param name="created">The timestamp of resource creation.
        /// </param>
        public SparkConfigurationResource(System.Collections.Generic.IDictionary<string, string> configs, string id = default(string), string name = default(string), string type = default(string), string etag = default(string), string description = default(string), System.Collections.Generic.IList<string> annotations = default(System.Collections.Generic.IList<string>), string notes = default(string), string createdBy = default(string), System.DateTime? created = default(System.DateTime?))

        : base(id, name, type, etag)
        {
            this.Description = description;
            this.Configs = configs;
            this.Annotations = annotations;
            this.Notes = notes;
            this.CreatedBy = createdBy;
            this.Created = created;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets description about the SparkConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets sparkConfiguration configs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.configs")]
        public System.Collections.Generic.IDictionary<string, string> Configs {get; set; }

        /// <summary>
        /// Gets or sets annotations for SparkConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.annotations")]
        public System.Collections.Generic.IList<string> Annotations {get; set; }

        /// <summary>
        /// Gets or sets additional Notes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notes")]
        public string Notes {get; set; }

        /// <summary>
        /// Gets or sets the identity that created the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.createdBy")]
        public string CreatedBy {get; set; }

        /// <summary>
        /// Gets or sets the timestamp of resource creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.created")]
        public System.DateTime? Created {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Configs == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Configs");
            }





        }
    }
}