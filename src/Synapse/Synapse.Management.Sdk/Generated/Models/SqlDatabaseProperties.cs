// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// The sql database&#39;s properties.
    /// </summary>
    public partial class SqlDatabaseProperties
    {
        /// <summary>
        /// Initializes a new instance of the SqlDatabaseProperties class.
        /// </summary>
        public SqlDatabaseProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlDatabaseProperties class.
        /// </summary>

        /// <param name="status">The status of the database.
        /// Possible values include: &#39;Online&#39;, &#39;Restoring&#39;, &#39;RecoveryPending&#39;,
        /// &#39;Recovering&#39;, &#39;Suspect&#39;, &#39;Offline&#39;, &#39;Standby&#39;, &#39;Shutdown&#39;, &#39;EmergencyMode&#39;,
        /// &#39;AutoClosed&#39;, &#39;Copying&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;OfflineSecondary&#39;,
        /// &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;,
        /// &#39;OfflineChangingDwPerformanceTiers&#39;, &#39;OnlineChangingDwPerformanceTiers&#39;,
        /// &#39;Disabled&#39;</param>

        /// <param name="collation">The collation of the database.
        /// </param>

        /// <param name="databaseGuid">The Guid of the database.
        /// </param>

        /// <param name="storageRedundancy">The storage redundancy of the database.
        /// Possible values include: &#39;Local&#39;, &#39;Geo&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="dataRetention">Sql database data retention.
        /// </param>
        public SqlDatabaseProperties(string status = default(string), string collation = default(string), System.Guid? databaseGuid = default(System.Guid?), string storageRedundancy = default(string), SqlDatabaseDataRetention dataRetention = default(SqlDatabaseDataRetention))

        {
            this.Status = status;
            this.Collation = collation;
            this.DatabaseGuid = databaseGuid;
            this.StorageRedundancy = storageRedundancy;
            this.DataRetention = dataRetention;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the status of the database. Possible values include: &#39;Online&#39;, &#39;Restoring&#39;, &#39;RecoveryPending&#39;, &#39;Recovering&#39;, &#39;Suspect&#39;, &#39;Offline&#39;, &#39;Standby&#39;, &#39;Shutdown&#39;, &#39;EmergencyMode&#39;, &#39;AutoClosed&#39;, &#39;Copying&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;OfflineSecondary&#39;, &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;, &#39;OfflineChangingDwPerformanceTiers&#39;, &#39;OnlineChangingDwPerformanceTiers&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets or sets the collation of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collation")]
        public string Collation {get; set; }

        /// <summary>
        /// Gets the Guid of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseGuid")]
        public System.Guid? DatabaseGuid {get; private set; }

        /// <summary>
        /// Gets or sets the storage redundancy of the database. Possible values include: &#39;Local&#39;, &#39;Geo&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageRedundancy")]
        public string StorageRedundancy {get; set; }

        /// <summary>
        /// Gets or sets sql database data retention.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataRetention")]
        public SqlDatabaseDataRetention DataRetention {get; set; }
    }
}