// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Class representing the an attached database configuration properties of
    /// kind specific.
    /// </summary>
    public partial class AttachedDatabaseConfigurationProperties
    {
        /// <summary>
        /// Initializes a new instance of the AttachedDatabaseConfigurationProperties class.
        /// </summary>
        public AttachedDatabaseConfigurationProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AttachedDatabaseConfigurationProperties class.
        /// </summary>

        /// <param name="provisioningState">The provisioned state of the resource.
        /// Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;,
        /// &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;</param>

        /// <param name="databaseName">The name of the database which you would like to attach, use * if you want
        /// to follow all current and future databases.
        /// </param>

        /// <param name="kustoPoolResourceId">The resource id of the kusto pool where the databases you would like to
        /// attach reside.
        /// </param>

        /// <param name="attachedDatabaseNames">The list of databases from the clusterResourceId which are currently
        /// attached to the kusto pool.
        /// </param>

        /// <param name="defaultPrincipalsModificationKind">The default principals modification kind
        /// Possible values include: &#39;Union&#39;, &#39;Replace&#39;, &#39;None&#39;</param>

        /// <param name="tableLevelSharingProperties">Table level sharing specifications
        /// </param>
        public AttachedDatabaseConfigurationProperties(string databaseName, string kustoPoolResourceId, string defaultPrincipalsModificationKind, string provisioningState = default(string), System.Collections.Generic.IList<string> attachedDatabaseNames = default(System.Collections.Generic.IList<string>), TableLevelSharingProperties tableLevelSharingProperties = default(TableLevelSharingProperties))

        {
            this.ProvisioningState = provisioningState;
            this.DatabaseName = databaseName;
            this.KustoPoolResourceId = kustoPoolResourceId;
            this.AttachedDatabaseNames = attachedDatabaseNames;
            this.DefaultPrincipalsModificationKind = defaultPrincipalsModificationKind;
            this.TableLevelSharingProperties = tableLevelSharingProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioned state of the resource. Possible values include: &#39;Running&#39;, &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Moving&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the name of the database which you would like to attach, use *
        /// if you want to follow all current and future databases.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets the resource id of the kusto pool where the databases you
        /// would like to attach reside.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "clusterResourceId")]
        public string KustoPoolResourceId {get; set; }

        /// <summary>
        /// Gets the list of databases from the clusterResourceId which are currently
        /// attached to the kusto pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "attachedDatabaseNames")]
        public System.Collections.Generic.IList<string> AttachedDatabaseNames {get; private set; }

        /// <summary>
        /// Gets or sets the default principals modification kind Possible values include: &#39;Union&#39;, &#39;Replace&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultPrincipalsModificationKind")]
        public string DefaultPrincipalsModificationKind {get; set; }

        /// <summary>
        /// Gets or sets table level sharing specifications
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tableLevelSharingProperties")]
        public TableLevelSharingProperties TableLevelSharingProperties {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DatabaseName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DatabaseName");
            }
            if (this.KustoPoolResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "KustoPoolResourceId");
            }
            if (this.DefaultPrincipalsModificationKind == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DefaultPrincipalsModificationKind");
            }






        }
    }
}