// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// A workspace
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Workspace : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Workspace class.
        /// </summary>
        public Workspace()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Workspace class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="location">The geo-location where the resource lives
        /// </param>

        /// <param name="identity">Identity of the workspace
        /// </param>

        /// <param name="purviewConfiguration">Purview Configuration
        /// </param>

        /// <param name="defaultDataLakeStorage">Workspace default data lake storage account details
        /// </param>

        /// <param name="sqlAdministratorLoginPassword">SQL administrator login password
        /// </param>

        /// <param name="managedResourceGroupName">Workspace managed resource group. The resource group name uniquely
        /// identifies the resource group within the user subscriptionId. The resource
        /// group name must be no longer than 90 characters long, and must be
        /// alphanumeric characters (Char.IsLetterOrDigit()) and &#39;-&#39;, &#39;_&#39;, &#39;(&#39;, &#39;)&#39;
        /// and&#39;.&#39;. Note that the name cannot end with &#39;.&#39;
        /// </param>

        /// <param name="provisioningState">Resource provisioning state
        /// </param>

        /// <param name="sqlAdministratorLogin">Login for workspace SQL active directory administrator
        /// </param>

        /// <param name="virtualNetworkProfile">Virtual Network profile
        /// </param>

        /// <param name="connectivityEndpoints">Connectivity endpoints
        /// </param>

        /// <param name="managedVirtualNetwork">Setting this to &#39;default&#39; will ensure that all compute for this workspace
        /// is in a virtual network managed on behalf of the user.
        /// </param>

        /// <param name="privateEndpointConnections">Private endpoint connections to the workspace
        /// </param>

        /// <param name="encryption">The encryption details of the workspace
        /// </param>

        /// <param name="workspaceUid">The workspace unique identifier
        /// </param>

        /// <param name="extraProperties">Workspace level configs and feature flags
        /// </param>

        /// <param name="managedVirtualNetworkSettings">Managed Virtual Network Settings
        /// </param>

        /// <param name="workspaceRepositoryConfiguration">Git integration settings
        /// </param>

        /// <param name="adlaResourceId">The ADLA resource ID.
        /// </param>

        /// <param name="publicNetworkAccess">Enable or Disable public network access to workspace
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="cspWorkspaceAdminProperties">Initial workspace AAD admin properties for a CSP subscription
        /// </param>

        /// <param name="settings">Workspace settings
        /// </param>

        /// <param name="azureAdOnlyAuthentication">Enable or Disable AzureADOnlyAuthentication on All Workspace subresource
        /// </param>

        /// <param name="trustedServiceBypassEnabled">Is trustedServiceBypassEnabled for the workspace
        /// </param>
        public Workspace(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ManagedIdentity identity = default(ManagedIdentity), PurviewConfiguration purviewConfiguration = default(PurviewConfiguration), DataLakeStorageAccountDetails defaultDataLakeStorage = default(DataLakeStorageAccountDetails), string sqlAdministratorLoginPassword = default(string), string managedResourceGroupName = default(string), string provisioningState = default(string), string sqlAdministratorLogin = default(string), VirtualNetworkProfile virtualNetworkProfile = default(VirtualNetworkProfile), System.Collections.Generic.IDictionary<string, string> connectivityEndpoints = default(System.Collections.Generic.IDictionary<string, string>), string managedVirtualNetwork = default(string), System.Collections.Generic.IList<PrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<PrivateEndpointConnection>), EncryptionDetails encryption = default(EncryptionDetails), System.Guid? workspaceUid = default(System.Guid?), System.Collections.Generic.IDictionary<string, object> extraProperties = default(System.Collections.Generic.IDictionary<string, object>), ManagedVirtualNetworkSettings managedVirtualNetworkSettings = default(ManagedVirtualNetworkSettings), WorkspaceRepositoryConfiguration workspaceRepositoryConfiguration = default(WorkspaceRepositoryConfiguration), string adlaResourceId = default(string), string publicNetworkAccess = default(string), CspWorkspaceAdminProperties cspWorkspaceAdminProperties = default(CspWorkspaceAdminProperties), System.Collections.Generic.IDictionary<string, object> settings = default(System.Collections.Generic.IDictionary<string, object>), bool? azureAdOnlyAuthentication = default(bool?), bool? trustedServiceBypassEnabled = default(bool?))

        : base(location, id, name, type, tags)
        {
            this.Identity = identity;
            this.PurviewConfiguration = purviewConfiguration;
            this.DefaultDataLakeStorage = defaultDataLakeStorage;
            this.SqlAdministratorLoginPassword = sqlAdministratorLoginPassword;
            this.ManagedResourceGroupName = managedResourceGroupName;
            this.ProvisioningState = provisioningState;
            this.SqlAdministratorLogin = sqlAdministratorLogin;
            this.VirtualNetworkProfile = virtualNetworkProfile;
            this.ConnectivityEndpoints = connectivityEndpoints;
            this.ManagedVirtualNetwork = managedVirtualNetwork;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.Encryption = encryption;
            this.WorkspaceUID = workspaceUid;
            this.ExtraProperties = extraProperties;
            this.ManagedVirtualNetworkSettings = managedVirtualNetworkSettings;
            this.WorkspaceRepositoryConfiguration = workspaceRepositoryConfiguration;
            this.AdlaResourceId = adlaResourceId;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.CspWorkspaceAdminProperties = cspWorkspaceAdminProperties;
            this.Settings = settings;
            this.AzureAdOnlyAuthentication = azureAdOnlyAuthentication;
            this.TrustedServiceBypassEnabled = trustedServiceBypassEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets identity of the workspace
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets purview Configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.purviewConfiguration")]
        public PurviewConfiguration PurviewConfiguration {get; set; }

        /// <summary>
        /// Gets or sets workspace default data lake storage account details
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultDataLakeStorage")]
        public DataLakeStorageAccountDetails DefaultDataLakeStorage {get; set; }

        /// <summary>
        /// Gets or sets sQL administrator login password
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sqlAdministratorLoginPassword")]
        public string SqlAdministratorLoginPassword {get; set; }

        /// <summary>
        /// Gets or sets workspace managed resource group. The resource group name
        /// uniquely identifies the resource group within the user subscriptionId. The
        /// resource group name must be no longer than 90 characters long, and must be
        /// alphanumeric characters (Char.IsLetterOrDigit()) and &#39;-&#39;, &#39;_&#39;, &#39;(&#39;, &#39;)&#39;
        /// and&#39;.&#39;. Note that the name cannot end with &#39;.&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedResourceGroupName")]
        public string ManagedResourceGroupName {get; set; }

        /// <summary>
        /// Gets resource provisioning state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets login for workspace SQL active directory administrator
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sqlAdministratorLogin")]
        public string SqlAdministratorLogin {get; set; }

        /// <summary>
        /// Gets or sets virtual Network profile
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetworkProfile")]
        public VirtualNetworkProfile VirtualNetworkProfile {get; set; }

        /// <summary>
        /// Gets or sets connectivity endpoints
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectivityEndpoints")]
        public System.Collections.Generic.IDictionary<string, string> ConnectivityEndpoints {get; set; }

        /// <summary>
        /// Gets or sets setting this to &#39;default&#39; will ensure that all compute for
        /// this workspace is in a virtual network managed on behalf of the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedVirtualNetwork")]
        public string ManagedVirtualNetwork {get; set; }

        /// <summary>
        /// Gets or sets private endpoint connections to the workspace
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public System.Collections.Generic.IList<PrivateEndpointConnection> PrivateEndpointConnections {get; set; }

        /// <summary>
        /// Gets or sets the encryption details of the workspace
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryption")]
        public EncryptionDetails Encryption {get; set; }

        /// <summary>
        /// Gets the workspace unique identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.workspaceUID")]
        public System.Guid? WorkspaceUID {get; private set; }

        /// <summary>
        /// Gets workspace level configs and feature flags
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.extraProperties")]
        public System.Collections.Generic.IDictionary<string, object> ExtraProperties {get; private set; }

        /// <summary>
        /// Gets or sets managed Virtual Network Settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedVirtualNetworkSettings")]
        public ManagedVirtualNetworkSettings ManagedVirtualNetworkSettings {get; set; }

        /// <summary>
        /// Gets or sets git integration settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.workspaceRepositoryConfiguration")]
        public WorkspaceRepositoryConfiguration WorkspaceRepositoryConfiguration {get; set; }

        /// <summary>
        /// Gets the ADLA resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.adlaResourceId")]
        public string AdlaResourceId {get; private set; }

        /// <summary>
        /// Gets or sets enable or Disable public network access to workspace Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets initial workspace AAD admin properties for a CSP subscription
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cspWorkspaceAdminProperties")]
        public CspWorkspaceAdminProperties CspWorkspaceAdminProperties {get; set; }

        /// <summary>
        /// Gets workspace settings
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.settings")]
        public System.Collections.Generic.IDictionary<string, object> Settings {get; private set; }

        /// <summary>
        /// Gets or sets enable or Disable AzureADOnlyAuthentication on All Workspace
        /// subresource
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.azureADOnlyAuthentication")]
        public bool? AzureAdOnlyAuthentication {get; set; }

        /// <summary>
        /// Gets or sets is trustedServiceBypassEnabled for the workspace
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.trustedServiceBypassEnabled")]
        public bool? TrustedServiceBypassEnabled {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();



















        }
    }
}