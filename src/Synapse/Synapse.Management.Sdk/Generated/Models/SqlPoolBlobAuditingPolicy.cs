// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// A Sql pool blob auditing policy.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SqlPoolBlobAuditingPolicy : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SqlPoolBlobAuditingPolicy class.
        /// </summary>
        public SqlPoolBlobAuditingPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SqlPoolBlobAuditingPolicy class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="kind">Resource kind.
        /// </param>

        /// <param name="state">Specifies the state of the policy. If state is Enabled, storageEndpoint or
        /// isAzureMonitorTargetEnabled are required.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="storageEndpoint">Specifies the blob storage endpoint (e.g.
        /// https://MyAccount.blob.core.windows.net). If state is Enabled,
        /// storageEndpoint is required.
        /// </param>

        /// <param name="storageAccountAccessKey">Specifies the identifier key of the auditing storage account. If state is
        /// Enabled and storageEndpoint is specified, storageAccountAccessKey is
        /// required.
        /// </param>

        /// <param name="retentionDays">Specifies the number of days to keep in the audit logs in the storage
        /// account.
        /// </param>

        /// <param name="auditActionsAndGroups">Specifies the Actions-Groups and Actions to audit.
        /// The recommended set of action groups to use is the following combination -
        /// this will audit all the queries and stored procedures executed against the
        /// database, as well as successful and failed logins:
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// This above combination is also the set that is configured by default when
        /// enabling auditing from the Azure portal.
        /// The supported action groups to audit are (note: choose only specific groups
        /// that cover your auditing needs. Using unnecessary groups could lead to very
        /// large quantities of audit records):
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// These are groups that cover all sql statements and stored procedures
        /// executed against the database, and should not be used in combination with
        /// other groups as this will result in duplicate audit logs.
        /// For more information, see [Database-Level Audit Action
        /// Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// For Database auditing policy, specific Actions can also be specified (note
        /// that Actions cannot be specified for Server auditing policy). The supported
        /// actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// Note that &lt;object&gt; in the above format can refer to an object like a table,
        /// view, or stored procedure, or an entire database or schema. For the latter
        /// cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
        /// respectively.
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// For more information, see [Database-Level Audit
        /// Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </param>

        /// <param name="storageAccountSubscriptionId">Specifies the blob storage subscription Id.
        /// </param>

        /// <param name="isStorageSecondaryKeyInUse">Specifies whether storageAccountAccessKey value is the storage&#39;s secondary
        /// key.
        /// </param>

        /// <param name="isAzureMonitorTargetEnabled">Specifies whether audit events are sent to Azure Monitor.
        /// In order to send the events to Azure Monitor, specify &#39;state&#39; as &#39;Enabled&#39;
        /// and &#39;isAzureMonitorTargetEnabled&#39; as true.
        /// When using REST API to configure auditing, Diagnostic Settings with
        /// &#39;SQLSecurityAuditEvents&#39; diagnostic logs category on the database should be
        /// also created.
        /// Note that for server level audit you should use the &#39;master&#39; database as
        /// {databaseName}.
        /// Diagnostic Settings URI format:
        /// PUT
        /// https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// For more information, see [Diagnostic Settings REST
        /// API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings
        /// PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// </param>
        public SqlPoolBlobAuditingPolicy(string id = default(string), string name = default(string), string type = default(string), string kind = default(string), BlobAuditingPolicyState? state = default(BlobAuditingPolicyState?), string storageEndpoint = default(string), string storageAccountAccessKey = default(string), int? retentionDays = default(int?), System.Collections.Generic.IList<string> auditActionsAndGroups = default(System.Collections.Generic.IList<string>), System.Guid? storageAccountSubscriptionId = default(System.Guid?), bool? isStorageSecondaryKeyInUse = default(bool?), bool? isAzureMonitorTargetEnabled = default(bool?))

        : base(id, name, type)
        {
            this.Kind = kind;
            this.State = state;
            this.StorageEndpoint = storageEndpoint;
            this.StorageAccountAccessKey = storageAccountAccessKey;
            this.RetentionDays = retentionDays;
            this.AuditActionsAndGroups = auditActionsAndGroups;
            this.StorageAccountSubscriptionId = storageAccountSubscriptionId;
            this.IsStorageSecondaryKeyInUse = isStorageSecondaryKeyInUse;
            this.IsAzureMonitorTargetEnabled = isAzureMonitorTargetEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets resource kind.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; private set; }

        /// <summary>
        /// Gets or sets specifies the state of the policy. If state is Enabled,
        /// storageEndpoint or isAzureMonitorTargetEnabled are required. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public BlobAuditingPolicyState? State {get; set; }

        /// <summary>
        /// Gets or sets specifies the blob storage endpoint (e.g.
        /// https://MyAccount.blob.core.windows.net). If state is Enabled,
        /// storageEndpoint is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageEndpoint")]
        public string StorageEndpoint {get; set; }

        /// <summary>
        /// Gets or sets specifies the identifier key of the auditing storage account.
        /// If state is Enabled and storageEndpoint is specified,
        /// storageAccountAccessKey is required.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccountAccessKey")]
        public string StorageAccountAccessKey {get; set; }

        /// <summary>
        /// Gets or sets specifies the number of days to keep in the audit logs in the
        /// storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.retentionDays")]
        public int? RetentionDays {get; set; }

        /// <summary>
        /// Gets or sets specifies the Actions-Groups and Actions to audit.
        /// The recommended set of action groups to use is the following combination -
        /// this will audit all the queries and stored procedures executed against the
        /// database, as well as successful and failed logins:
        /// BATCH_COMPLETED_GROUP,
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP,
        /// FAILED_DATABASE_AUTHENTICATION_GROUP.
        /// This above combination is also the set that is configured by default when
        /// enabling auditing from the Azure portal.
        /// The supported action groups to audit are (note: choose only specific groups
        /// that cover your auditing needs. Using unnecessary groups could lead to very
        /// large quantities of audit records):
        /// APPLICATION_ROLE_CHANGE_PASSWORD_GROUP
        /// BACKUP_RESTORE_GROUP
        /// DATABASE_LOGOUT_GROUP
        /// DATABASE_OBJECT_CHANGE_GROUP
        /// DATABASE_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// DATABASE_OBJECT_PERMISSION_CHANGE_GROUP
        /// DATABASE_OPERATION_GROUP
        /// DATABASE_PERMISSION_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_CHANGE_GROUP
        /// DATABASE_PRINCIPAL_IMPERSONATION_GROUP
        /// DATABASE_ROLE_MEMBER_CHANGE_GROUP
        /// FAILED_DATABASE_AUTHENTICATION_GROUP
        /// SCHEMA_OBJECT_ACCESS_GROUP
        /// SCHEMA_OBJECT_CHANGE_GROUP
        /// SCHEMA_OBJECT_OWNERSHIP_CHANGE_GROUP
        /// SCHEMA_OBJECT_PERMISSION_CHANGE_GROUP
        /// SUCCESSFUL_DATABASE_AUTHENTICATION_GROUP
        /// USER_CHANGE_PASSWORD_GROUP
        /// BATCH_STARTED_GROUP
        /// BATCH_COMPLETED_GROUP
        /// These are groups that cover all sql statements and stored procedures
        /// executed against the database, and should not be used in combination with
        /// other groups as this will result in duplicate audit logs.
        /// For more information, see [Database-Level Audit Action
        /// Groups](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-action-groups).
        /// For Database auditing policy, specific Actions can also be specified (note
        /// that Actions cannot be specified for Server auditing policy). The supported
        /// actions to audit are:
        /// SELECT
        /// UPDATE
        /// INSERT
        /// DELETE
        /// EXECUTE
        /// RECEIVE
        /// REFERENCES
        /// The general form for defining an action to be audited is:
        /// {action} ON {object} BY {principal}
        /// Note that &lt;object&gt; in the above format can refer to an object like a table,
        /// view, or stored procedure, or an entire database or schema. For the latter
        /// cases, the forms DATABASE::{db_name} and SCHEMA::{schema_name} are used,
        /// respectively.
        /// For example:
        /// SELECT on dbo.myTable by public
        /// SELECT on DATABASE::myDatabase by public
        /// SELECT on SCHEMA::mySchema by public
        /// For more information, see [Database-Level Audit
        /// Actions](https://docs.microsoft.com/en-us/sql/relational-databases/security/auditing/sql-server-audit-action-groups-and-actions#database-level-audit-actions)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.auditActionsAndGroups")]
        public System.Collections.Generic.IList<string> AuditActionsAndGroups {get; set; }

        /// <summary>
        /// Gets or sets specifies the blob storage subscription Id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageAccountSubscriptionId")]
        public System.Guid? StorageAccountSubscriptionId {get; set; }

        /// <summary>
        /// Gets or sets specifies whether storageAccountAccessKey value is the
        /// storage&#39;s secondary key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isStorageSecondaryKeyInUse")]
        public bool? IsStorageSecondaryKeyInUse {get; set; }

        /// <summary>
        /// Gets or sets specifies whether audit events are sent to Azure Monitor.
        /// In order to send the events to Azure Monitor, specify &#39;state&#39; as &#39;Enabled&#39;
        /// and &#39;isAzureMonitorTargetEnabled&#39; as true.
        /// When using REST API to configure auditing, Diagnostic Settings with
        /// &#39;SQLSecurityAuditEvents&#39; diagnostic logs category on the database should be
        /// also created.
        /// Note that for server level audit you should use the &#39;master&#39; database as
        /// {databaseName}.
        /// Diagnostic Settings URI format:
        /// PUT
        /// https://management.azure.com/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Sql/servers/{serverName}/databases/{databaseName}/providers/microsoft.insights/diagnosticSettings/{settingsName}?api-version=2017-05-01-preview
        /// For more information, see [Diagnostic Settings REST
        /// API](https://go.microsoft.com/fwlink/?linkid=2033207)
        /// or [Diagnostic Settings
        /// PowerShell](https://go.microsoft.com/fwlink/?linkid=2033043)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isAzureMonitorTargetEnabled")]
        public bool? IsAzureMonitorTargetEnabled {get; set; }
    }
}