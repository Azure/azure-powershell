// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a Big Data pool powered by Apache Spark
    /// </summary>
    /// <remarks>
    /// Properties of a Big Data pool powered by Apache Spark
    /// </remarks>
    public partial class BigDataPoolResourceProperties
    {
        /// <summary>
        /// Initializes a new instance of the BigDataPoolResourceProperties class.
        /// </summary>
        public BigDataPoolResourceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BigDataPoolResourceProperties class.
        /// </summary>

        /// <param name="provisioningState">The state of the Big Data pool.
        /// </param>

        /// <param name="autoScale">Auto-scaling properties
        /// </param>

        /// <param name="creationDate">The time when the Big Data pool was created.
        /// </param>

        /// <param name="autoPause">Auto-pausing properties
        /// </param>

        /// <param name="isComputeIsolationEnabled">Whether compute isolation is required or not.
        /// </param>

        /// <param name="sessionLevelPackagesEnabled">Whether session level packages enabled.
        /// </param>

        /// <param name="cacheSize">The cache size
        /// </param>

        /// <param name="dynamicExecutorAllocation">Dynamic Executor Allocation
        /// </param>

        /// <param name="sparkEventsFolder">The Spark events folder
        /// </param>

        /// <param name="nodeCount">The number of nodes in the Big Data pool.
        /// </param>

        /// <param name="libraryRequirements">Library version requirements
        /// </param>

        /// <param name="customLibraries">List of custom libraries/packages associated with the spark pool.
        /// </param>

        /// <param name="sparkConfigProperties">Spark configuration file to specify additional properties
        /// </param>

        /// <param name="sparkVersion">The Apache Spark version.
        /// </param>

        /// <param name="defaultSparkLogFolder">The default folder where Spark logs will be written.
        /// </param>

        /// <param name="nodeSize">The level of compute power that each node in the Big Data pool has.
        /// Possible values include: &#39;None&#39;, &#39;Small&#39;, &#39;Medium&#39;, &#39;Large&#39;, &#39;XLarge&#39;,
        /// &#39;XXLarge&#39;, &#39;XXXLarge&#39;</param>

        /// <param name="nodeSizeFamily">The kind of nodes that the Big Data pool provides.
        /// Possible values include: &#39;None&#39;, &#39;MemoryOptimized&#39;,
        /// &#39;HardwareAcceleratedFPGA&#39;, &#39;HardwareAcceleratedGPU&#39;</param>

        /// <param name="lastSucceededTimestamp">The time when the Big Data pool was updated successfully.
        /// </param>
        public BigDataPoolResourceProperties(string provisioningState = default(string), AutoScaleProperties autoScale = default(AutoScaleProperties), System.DateTime? creationDate = default(System.DateTime?), AutoPauseProperties autoPause = default(AutoPauseProperties), bool? isComputeIsolationEnabled = default(bool?), bool? sessionLevelPackagesEnabled = default(bool?), int? cacheSize = default(int?), DynamicExecutorAllocation dynamicExecutorAllocation = default(DynamicExecutorAllocation), string sparkEventsFolder = default(string), int? nodeCount = default(int?), LibraryRequirements libraryRequirements = default(LibraryRequirements), System.Collections.Generic.IList<LibraryInfo> customLibraries = default(System.Collections.Generic.IList<LibraryInfo>), SparkConfigProperties sparkConfigProperties = default(SparkConfigProperties), string sparkVersion = default(string), string defaultSparkLogFolder = default(string), string nodeSize = default(string), string nodeSizeFamily = default(string), System.DateTime? lastSucceededTimestamp = default(System.DateTime?))

        {
            this.ProvisioningState = provisioningState;
            this.AutoScale = autoScale;
            this.CreationDate = creationDate;
            this.AutoPause = autoPause;
            this.IsComputeIsolationEnabled = isComputeIsolationEnabled;
            this.SessionLevelPackagesEnabled = sessionLevelPackagesEnabled;
            this.CacheSize = cacheSize;
            this.DynamicExecutorAllocation = dynamicExecutorAllocation;
            this.SparkEventsFolder = sparkEventsFolder;
            this.NodeCount = nodeCount;
            this.LibraryRequirements = libraryRequirements;
            this.CustomLibraries = customLibraries;
            this.SparkConfigProperties = sparkConfigProperties;
            this.SparkVersion = sparkVersion;
            this.DefaultSparkLogFolder = defaultSparkLogFolder;
            this.NodeSize = nodeSize;
            this.NodeSizeFamily = nodeSizeFamily;
            this.LastSucceededTimestamp = lastSucceededTimestamp;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the state of the Big Data pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets auto-scaling properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoScale")]
        public AutoScaleProperties AutoScale {get; set; }

        /// <summary>
        /// Gets the time when the Big Data pool was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationDate")]
        public System.DateTime? CreationDate {get; private set; }

        /// <summary>
        /// Gets or sets auto-pausing properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoPause")]
        public AutoPauseProperties AutoPause {get; set; }

        /// <summary>
        /// Gets or sets whether compute isolation is required or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isComputeIsolationEnabled")]
        public bool? IsComputeIsolationEnabled {get; set; }

        /// <summary>
        /// Gets or sets whether session level packages enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sessionLevelPackagesEnabled")]
        public bool? SessionLevelPackagesEnabled {get; set; }

        /// <summary>
        /// Gets or sets the cache size
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cacheSize")]
        public int? CacheSize {get; set; }

        /// <summary>
        /// Gets or sets dynamic Executor Allocation
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dynamicExecutorAllocation")]
        public DynamicExecutorAllocation DynamicExecutorAllocation {get; set; }

        /// <summary>
        /// Gets or sets the Spark events folder
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sparkEventsFolder")]
        public string SparkEventsFolder {get; set; }

        /// <summary>
        /// Gets or sets the number of nodes in the Big Data pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeCount")]
        public int? NodeCount {get; set; }

        /// <summary>
        /// Gets or sets library version requirements
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "libraryRequirements")]
        public LibraryRequirements LibraryRequirements {get; set; }

        /// <summary>
        /// Gets or sets list of custom libraries/packages associated with the spark
        /// pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customLibraries")]
        public System.Collections.Generic.IList<LibraryInfo> CustomLibraries {get; set; }

        /// <summary>
        /// Gets or sets spark configuration file to specify additional properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sparkConfigProperties")]
        public SparkConfigProperties SparkConfigProperties {get; set; }

        /// <summary>
        /// Gets or sets the Apache Spark version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sparkVersion")]
        public string SparkVersion {get; set; }

        /// <summary>
        /// Gets or sets the default folder where Spark logs will be written.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultSparkLogFolder")]
        public string DefaultSparkLogFolder {get; set; }

        /// <summary>
        /// Gets or sets the level of compute power that each node in the Big Data pool
        /// has. Possible values include: &#39;None&#39;, &#39;Small&#39;, &#39;Medium&#39;, &#39;Large&#39;, &#39;XLarge&#39;, &#39;XXLarge&#39;, &#39;XXXLarge&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeSize")]
        public string NodeSize {get; set; }

        /// <summary>
        /// Gets or sets the kind of nodes that the Big Data pool provides. Possible values include: &#39;None&#39;, &#39;MemoryOptimized&#39;, &#39;HardwareAcceleratedFPGA&#39;, &#39;HardwareAcceleratedGPU&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeSizeFamily")]
        public string NodeSizeFamily {get; set; }

        /// <summary>
        /// Gets the time when the Big Data pool was updated successfully.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastSucceededTimestamp")]
        public System.DateTime? LastSucceededTimestamp {get; private set; }
    }
}