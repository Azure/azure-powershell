// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AzureAdOnlyAuthenticationsOperations
    /// </summary>
    public static partial class AzureAdOnlyAuthenticationsOperationsExtensions
    {
        /// <summary>
        /// Gets a Azure Active Directory only authentication property
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static AzureADOnlyAuthentication Get(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName)
        {
                return ((IAzureAdOnlyAuthenticationsOperations)operations).GetAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Azure Active Directory only authentication property
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureADOnlyAuthentication> GetAsync(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or Update a Azure Active Directory only authentication property for
        /// the workspaces
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static AzureADOnlyAuthentication Create(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName, AzureADOnlyAuthentication azureADOnlyAuthenticationInfo)
        {
                return ((IAzureAdOnlyAuthenticationsOperations)operations).CreateAsync(resourceGroupName, workspaceName, azureADOnlyAuthenticationInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or Update a Azure Active Directory only authentication property for
        /// the workspaces
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureADOnlyAuthentication> CreateAsync(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName, AzureADOnlyAuthentication azureADOnlyAuthenticationInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, workspaceName, azureADOnlyAuthenticationInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of Azure Active Directory only authentication property for a
        /// workspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AzureADOnlyAuthentication> List(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName)
        {
                return ((IAzureAdOnlyAuthenticationsOperations)operations).ListAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of Azure Active Directory only authentication property for a
        /// workspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AzureADOnlyAuthentication>> ListAsync(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or Update a Azure Active Directory only authentication property for
        /// the workspaces
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static AzureADOnlyAuthentication BeginCreate(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName, AzureADOnlyAuthentication azureADOnlyAuthenticationInfo)
        {
                return ((IAzureAdOnlyAuthenticationsOperations)operations).BeginCreateAsync(resourceGroupName, workspaceName, azureADOnlyAuthenticationInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or Update a Azure Active Directory only authentication property for
        /// the workspaces
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AzureADOnlyAuthentication> BeginCreateAsync(this IAzureAdOnlyAuthenticationsOperations operations, string resourceGroupName, string workspaceName, AzureADOnlyAuthentication azureADOnlyAuthenticationInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, workspaceName, azureADOnlyAuthenticationInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a list of Azure Active Directory only authentication property for a
        /// workspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<AzureADOnlyAuthentication> ListNext(this IAzureAdOnlyAuthenticationsOperations operations, string nextPageLink)
        {
                return ((IAzureAdOnlyAuthenticationsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of Azure Active Directory only authentication property for a
        /// workspace
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<AzureADOnlyAuthentication>> ListNextAsync(this IAzureAdOnlyAuthenticationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
