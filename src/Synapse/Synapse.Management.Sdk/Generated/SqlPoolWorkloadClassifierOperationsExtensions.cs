// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SqlPoolWorkloadClassifierOperations
    /// </summary>
    public static partial class SqlPoolWorkloadClassifierOperationsExtensions
    {
        /// <summary>
        /// Get a workload classifier of Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        public static WorkloadClassifier Get(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName)
        {
                return ((ISqlPoolWorkloadClassifierOperations)operations).GetAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a workload classifier of Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkloadClassifier> GetAsync(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create Or Update workload classifier for a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        public static WorkloadClassifier CreateOrUpdate(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters)
        {
                return ((ISqlPoolWorkloadClassifierOperations)operations).CreateOrUpdateAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create Or Update workload classifier for a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkloadClassifier> CreateOrUpdateAsync(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Remove workload classifier of a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        public static void Delete(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName)
        {
                ((ISqlPoolWorkloadClassifierOperations)operations).DeleteAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove workload classifier of a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get list of  Sql pool&#39;s workload classifier for workload groups.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkloadClassifier> List(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName)
        {
                return ((ISqlPoolWorkloadClassifierOperations)operations).ListAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get list of  Sql pool&#39;s workload classifier for workload groups.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkloadClassifier>> ListAsync(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create Or Update workload classifier for a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        public static WorkloadClassifier BeginCreateOrUpdate(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters)
        {
                return ((ISqlPoolWorkloadClassifierOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create Or Update workload classifier for a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<WorkloadClassifier> BeginCreateOrUpdateAsync(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, WorkloadClassifier parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Remove workload classifier of a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        public static void BeginDelete(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName)
        {
                ((ISqlPoolWorkloadClassifierOperations)operations).BeginDeleteAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove workload classifier of a Sql pool&#39;s workload group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='sqlPoolName'>
        /// SQL pool name
        /// </param>
        /// <param name='workloadGroupName'>
        /// The name of the workload group.
        /// </param>
        /// <param name='workloadClassifierName'>
        /// The name of the workload classifier.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ISqlPoolWorkloadClassifierOperations operations, string resourceGroupName, string workspaceName, string sqlPoolName, string workloadGroupName, string workloadClassifierName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, sqlPoolName, workloadGroupName, workloadClassifierName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get list of  Sql pool&#39;s workload classifier for workload groups.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<WorkloadClassifier> ListNext(this ISqlPoolWorkloadClassifierOperations operations, string nextPageLink)
        {
                return ((ISqlPoolWorkloadClassifierOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get list of  Sql pool&#39;s workload classifier for workload groups.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<WorkloadClassifier>> ListNextAsync(this ISqlPoolWorkloadClassifierOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
