// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateLinkHubsOperations
    /// </summary>
    public static partial class PrivateLinkHubsOperationsExtensions
    {
        /// <summary>
        /// Returns a list of privateLinkHubs in a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateLinkHub> ListByResourceGroup(this IPrivateLinkHubsOperations operations, string resourceGroupName)
        {
                return ((IPrivateLinkHubsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of privateLinkHubs in a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateLinkHub>> ListByResourceGroupAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        public static PrivateLinkHub Get(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName)
        {
                return ((IPrivateLinkHubsOperations)operations).GetAsync(resourceGroupName, privateLinkHubName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkHub> GetAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        public static PrivateLinkHub Update(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHubPatchInfo privateLinkHubPatchInfo)
        {
                return ((IPrivateLinkHubsOperations)operations).UpdateAsync(resourceGroupName, privateLinkHubName, privateLinkHubPatchInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkHub> UpdateAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHubPatchInfo privateLinkHubPatchInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, privateLinkHubPatchInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        public static PrivateLinkHub CreateOrUpdate(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHub privateLinkHubInfo)
        {
                return ((IPrivateLinkHubsOperations)operations).CreateOrUpdateAsync(resourceGroupName, privateLinkHubName, privateLinkHubInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkHub> CreateOrUpdateAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, PrivateLinkHub privateLinkHubInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, privateLinkHubInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        public static void Delete(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName)
        {
                ((IPrivateLinkHubsOperations)operations).DeleteAsync(resourceGroupName, privateLinkHubName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Returns a list of privateLinkHubs in a subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateLinkHub> List(this IPrivateLinkHubsOperations operations)
        {
                return ((IPrivateLinkHubsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of privateLinkHubs in a subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateLinkHub>> ListAsync(this IPrivateLinkHubsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        public static void BeginDelete(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName)
        {
                ((IPrivateLinkHubsOperations)operations).BeginDeleteAsync(resourceGroupName, privateLinkHubName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a privateLinkHub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// Name of the privateLinkHub
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IPrivateLinkHubsOperations operations, string resourceGroupName, string privateLinkHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Returns a list of privateLinkHubs in a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateLinkHub> ListByResourceGroupNext(this IPrivateLinkHubsOperations operations, string nextPageLink)
        {
                return ((IPrivateLinkHubsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of privateLinkHubs in a resource group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateLinkHub>> ListByResourceGroupNextAsync(this IPrivateLinkHubsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a list of privateLinkHubs in a subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateLinkHub> ListNext(this IPrivateLinkHubsOperations operations, string nextPageLink)
        {
                return ((IPrivateLinkHubsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of privateLinkHubs in a subscription
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateLinkHub>> ListNextAsync(this IPrivateLinkHubsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
