// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for KustoPoolsOperations
    /// </summary>
    public static partial class KustoPoolsOperationsExtensions
    {
        /// <summary>
        /// Lists eligible SKUs for Kusto Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static System.Collections.Generic.IEnumerable<SkuDescription> ListSkus(this IKustoPoolsOperations operations)
        {
                return ((IKustoPoolsOperations)operations).ListSkusAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists eligible SKUs for Kusto Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<SkuDescription>> ListSkusAsync(this IKustoPoolsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSkusWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks that the kusto pool name is valid and is not already in use.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        public static CheckNameResult CheckNameAvailability(this IKustoPoolsOperations operations, string location, KustoPoolCheckNameRequest kustoPoolName)
        {
                return ((IKustoPoolsOperations)operations).CheckNameAvailabilityAsync(location, kustoPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that the kusto pool name is valid and is not already in use.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The name of Azure region.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckNameResult> CheckNameAvailabilityAsync(this IKustoPoolsOperations operations, string location, KustoPoolCheckNameRequest kustoPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(location, kustoPoolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all Kusto pools
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static KustoPoolListResult ListByWorkspace(this IKustoPoolsOperations operations, string resourceGroupName, string workspaceName)
        {
                return ((IKustoPoolsOperations)operations).ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all Kusto pools
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KustoPoolListResult> ListByWorkspaceAsync(this IKustoPoolsOperations operations, string resourceGroupName, string workspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static KustoPool Get(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                return ((IKustoPoolsOperations)operations).GetAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KustoPool> GetAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Set to &#39;*&#39; to allow a new Kusto Pool to be created, but to prevent updating
        /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
        /// Failed response.
        /// </param>
        public static KustoPool CreateOrUpdate(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
        {
                return ((IKustoPoolsOperations)operations).CreateOrUpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Set to &#39;*&#39; to allow a new Kusto Pool to be created, but to prevent updating
        /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
        /// Failed response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KustoPool> CreateOrUpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update a Kusto Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        public static KustoPool Update(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string))
        {
                return ((IKustoPoolsOperations)operations).UpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a Kusto Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KustoPool> UpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        public static void Delete(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName)
        {
                ((IKustoPoolsOperations)operations).DeleteAsync(workspaceName, resourceGroupName, kustoPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Stops a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void Stop(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                ((IKustoPoolsOperations)operations).StopAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Stops a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StopAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StopWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Starts a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void Start(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                ((IKustoPoolsOperations)operations).StartAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Starts a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task StartAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.StartWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Returns the SKUs available for the provided resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static System.Collections.Generic.IEnumerable<AzureResourceSku> ListSkusByResource(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                return ((IKustoPoolsOperations)operations).ListSkusByResourceAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the SKUs available for the provided resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<AzureResourceSku>> ListSkusByResourceAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListSkusByResourceWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static System.Collections.Generic.IEnumerable<LanguageExtension> ListLanguageExtensions(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                return ((IKustoPoolsOperations)operations).ListLanguageExtensionsAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<LanguageExtension>> ListLanguageExtensionsAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListLanguageExtensionsWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Add a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void AddLanguageExtensions(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToAdd)
        {
                ((IKustoPoolsOperations)operations).AddLanguageExtensionsAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Add a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task AddLanguageExtensionsAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToAdd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.AddLanguageExtensionsWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Remove a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void RemoveLanguageExtensions(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToRemove)
        {
                ((IKustoPoolsOperations)operations).RemoveLanguageExtensionsAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RemoveLanguageExtensionsAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToRemove, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RemoveLanguageExtensionsWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Returns a list of databases that are owned by this Kusto Pool and were
        /// followed by another Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static System.Collections.Generic.IEnumerable<FollowerDatabaseDefinition> ListFollowerDatabases(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                return ((IKustoPoolsOperations)operations).ListFollowerDatabasesAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of databases that are owned by this Kusto Pool and were
        /// followed by another Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<FollowerDatabaseDefinition>> ListFollowerDatabasesAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListFollowerDatabasesWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Detaches all followers of a database owned by this Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void DetachFollowerDatabases(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, FollowerDatabaseDefinition followerDatabaseToRemove)
        {
                ((IKustoPoolsOperations)operations).DetachFollowerDatabasesAsync(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detaches all followers of a database owned by this Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DetachFollowerDatabasesAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, FollowerDatabaseDefinition followerDatabaseToRemove, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DetachFollowerDatabasesWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create or update a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Set to &#39;*&#39; to allow a new Kusto Pool to be created, but to prevent updating
        /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
        /// Failed response.
        /// </param>
        public static KustoPool BeginCreateOrUpdate(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
        {
                return ((IKustoPoolsOperations)operations).BeginCreateOrUpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Set to &#39;*&#39; to allow a new Kusto Pool to be created, but to prevent updating
        /// an existing Kusto Pool. Other values will result in a 412 Pre-condition
        /// Failed response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KustoPool> BeginCreateOrUpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPool parameters, string ifMatch = default(string), string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Update a Kusto Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        public static KustoPool BeginUpdate(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string))
        {
                return ((IKustoPoolsOperations)operations).BeginUpdateAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Update a Kusto Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='ifMatch'>
        /// The ETag of the Kusto Pool. Omit this value to always overwrite the current
        /// Kusto Pool. Specify the last-seen ETag value to prevent accidentally
        /// overwriting concurrent changes.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<KustoPool> BeginUpdateAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, KustoPoolUpdate parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        public static void BeginDelete(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName)
        {
                ((IKustoPoolsOperations)operations).BeginDeleteAsync(workspaceName, resourceGroupName, kustoPoolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IKustoPoolsOperations operations, string workspaceName, string resourceGroupName, string kustoPoolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(workspaceName, resourceGroupName, kustoPoolName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Stops a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void BeginStop(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                ((IKustoPoolsOperations)operations).BeginStopAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Stops a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginStopAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginStopWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Starts a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void BeginStart(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName)
        {
                ((IKustoPoolsOperations)operations).BeginStartAsync(workspaceName, kustoPoolName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Starts a Kusto pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginStartAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginStartWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Add a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void BeginAddLanguageExtensions(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToAdd)
        {
                ((IKustoPoolsOperations)operations).BeginAddLanguageExtensionsAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Add a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginAddLanguageExtensionsAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToAdd, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginAddLanguageExtensionsWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToAdd, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Remove a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void BeginRemoveLanguageExtensions(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToRemove)
        {
                ((IKustoPoolsOperations)operations).BeginRemoveLanguageExtensionsAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Remove a list of language extensions that can run within KQL queries.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRemoveLanguageExtensionsAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, LanguageExtensionsList languageExtensionsToRemove, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRemoveLanguageExtensionsWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, languageExtensionsToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Detaches all followers of a database owned by this Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        public static void BeginDetachFollowerDatabases(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, FollowerDatabaseDefinition followerDatabaseToRemove)
        {
                ((IKustoPoolsOperations)operations).BeginDetachFollowerDatabasesAsync(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Detaches all followers of a database owned by this Kusto Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDetachFollowerDatabasesAsync(this IKustoPoolsOperations operations, string workspaceName, string kustoPoolName, string resourceGroupName, FollowerDatabaseDefinition followerDatabaseToRemove, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDetachFollowerDatabasesWithHttpMessagesAsync(workspaceName, kustoPoolName, resourceGroupName, followerDatabaseToRemove, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
