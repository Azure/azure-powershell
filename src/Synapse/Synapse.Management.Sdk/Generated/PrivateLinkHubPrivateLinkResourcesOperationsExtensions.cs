// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateLinkHubPrivateLinkResourcesOperations
    /// </summary>
    public static partial class PrivateLinkHubPrivateLinkResourcesOperationsExtensions
    {
        /// <summary>
        /// Get all private link resources for a private link hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// The name of the private link hub
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateLinkResource> List(this IPrivateLinkHubPrivateLinkResourcesOperations operations, string resourceGroupName, string privateLinkHubName)
        {
                return ((IPrivateLinkHubPrivateLinkResourcesOperations)operations).ListAsync(resourceGroupName, privateLinkHubName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all private link resources for a private link hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// The name of the private link hub
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateLinkResource>> ListAsync(this IPrivateLinkHubPrivateLinkResourcesOperations operations, string resourceGroupName, string privateLinkHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get private link resource in private link hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// The name of the private link hub
        /// </param>
        /// <param name='privateLinkResourceName'>
        /// The name of the private link resource
        /// </param>
        public static PrivateLinkResource Get(this IPrivateLinkHubPrivateLinkResourcesOperations operations, string resourceGroupName, string privateLinkHubName, string privateLinkResourceName)
        {
                return ((IPrivateLinkHubPrivateLinkResourcesOperations)operations).GetAsync(resourceGroupName, privateLinkHubName, privateLinkResourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get private link resource in private link hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='privateLinkHubName'>
        /// The name of the private link hub
        /// </param>
        /// <param name='privateLinkResourceName'>
        /// The name of the private link resource
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateLinkResource> GetAsync(this IPrivateLinkHubPrivateLinkResourcesOperations operations, string resourceGroupName, string privateLinkHubName, string privateLinkResourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, privateLinkHubName, privateLinkResourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get all private link resources for a private link hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateLinkResource> ListNext(this IPrivateLinkHubPrivateLinkResourcesOperations operations, string nextPageLink)
        {
                return ((IPrivateLinkHubPrivateLinkResourcesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get all private link resources for a private link hub
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateLinkResource>> ListNextAsync(this IPrivateLinkHubPrivateLinkResourcesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
