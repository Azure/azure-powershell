// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for KustoPoolDataConnectionsOperations
    /// </summary>
    public static partial class KustoPoolDataConnectionsOperationsExtensions
    {
        /// <summary>
        /// Checks that the data connection name is valid and is not already in use.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        public static CheckNameResult CheckNameAvailability(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, DataConnectionCheckNameRequest dataConnectionName)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).CheckNameAvailabilityAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that the data connection name is valid and is not already in use.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CheckNameResult> CheckNameAvailabilityAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, DataConnectionCheckNameRequest dataConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckNameAvailabilityWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks that the data connection parameters are valid.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        public static DataConnectionValidationListResult DataConnectionValidation(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, DataConnectionValidation parameters)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).DataConnectionValidationAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that the data connection parameters are valid.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnectionValidationListResult> DataConnectionValidationAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, DataConnectionValidation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DataConnectionValidationWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the list of data connections of the given Kusto pool database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        public static System.Collections.Generic.IEnumerable<DataConnection> ListByDatabase(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).ListByDatabaseAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of data connections of the given Kusto pool database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<DataConnection>> ListByDatabaseAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByDatabaseWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static DataConnection Get(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).GetAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnection> GetAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static DataConnection CreateOrUpdate(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).CreateOrUpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnection> CreateOrUpdateAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static DataConnection Update(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).UpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnection> UpdateAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the data connection with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static void Delete(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName)
        {
                ((IKustoPoolDataConnectionsOperations)operations).DeleteAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the data connection with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Checks that the data connection parameters are valid.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        public static DataConnectionValidationListResult BeginDataConnectionValidation(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, DataConnectionValidation parameters)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).BeginDataConnectionValidationAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks that the data connection parameters are valid.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnectionValidationListResult> BeginDataConnectionValidationAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, DataConnectionValidation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDataConnectionValidationWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static DataConnection BeginCreateOrUpdate(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnection> BeginCreateOrUpdateAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static DataConnection BeginUpdate(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters)
        {
                return ((IKustoPoolDataConnectionsOperations)operations).BeginUpdateAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a data connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DataConnection> BeginUpdateAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, DataConnection parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the data connection with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        public static void BeginDelete(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName)
        {
                ((IKustoPoolDataConnectionsOperations)operations).BeginDeleteAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the data connection with the given name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='kustoPoolName'>
        /// The name of the Kusto pool.
        /// </param>
        /// <param name='databaseName'>
        /// The name of the database in the Kusto pool.
        /// </param>
        /// <param name='dataConnectionName'>
        /// The name of the data connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IKustoPoolDataConnectionsOperations operations, string resourceGroupName, string workspaceName, string kustoPoolName, string databaseName, string dataConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, kustoPoolName, databaseName, dataConnectionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
