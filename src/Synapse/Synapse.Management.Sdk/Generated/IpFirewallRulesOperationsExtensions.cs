// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Synapse
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IPFirewallRulesOperations
    /// </summary>
    public static partial class IPFirewallRulesOperationsExtensions
    {
        /// <summary>
        /// Returns a list of firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpFirewallRuleInfo> ListByWorkspace(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName)
        {
                return ((IIPFirewallRulesOperations)operations).ListByWorkspaceAsync(resourceGroupName, workspaceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpFirewallRuleInfo>> ListByWorkspaceAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByWorkspaceWithHttpMessagesAsync(resourceGroupName, workspaceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        public static IpFirewallRuleInfo CreateOrUpdate(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, IpFirewallRuleInfo ipFirewallRuleInfo)
        {
                return ((IIPFirewallRulesOperations)operations).CreateOrUpdateAsync(resourceGroupName, workspaceName, ruleName, ipFirewallRuleInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpFirewallRuleInfo> CreateOrUpdateAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, IpFirewallRuleInfo ipFirewallRuleInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, ipFirewallRuleInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        public static object Delete(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName)
        {
                return ((IIPFirewallRulesOperations)operations).DeleteAsync(resourceGroupName, workspaceName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> DeleteAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        public static IpFirewallRuleInfo Get(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName)
        {
                return ((IIPFirewallRulesOperations)operations).GetAsync(resourceGroupName, workspaceName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpFirewallRuleInfo> GetAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Replaces firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static ReplaceAllFirewallRulesOperationResponse ReplaceAll(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, ReplaceAllIpFirewallRulesRequest request)
        {
                return ((IIPFirewallRulesOperations)operations).ReplaceAllAsync(resourceGroupName, workspaceName, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Replaces firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplaceAllFirewallRulesOperationResponse> ReplaceAllAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, ReplaceAllIpFirewallRulesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ReplaceAllWithHttpMessagesAsync(resourceGroupName, workspaceName, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        public static IpFirewallRuleInfo BeginCreateOrUpdate(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, IpFirewallRuleInfo ipFirewallRuleInfo)
        {
                return ((IIPFirewallRulesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, workspaceName, ruleName, ipFirewallRuleInfo).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpFirewallRuleInfo> BeginCreateOrUpdateAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, IpFirewallRuleInfo ipFirewallRuleInfo, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, ipFirewallRuleInfo, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        public static object BeginDelete(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName)
        {
                return ((IIPFirewallRulesOperations)operations).BeginDeleteAsync(resourceGroupName, workspaceName, ruleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a firewall rule
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='ruleName'>
        /// The IP firewall rule name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<object> BeginDeleteAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, string ruleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, workspaceName, ruleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Replaces firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        public static ReplaceAllFirewallRulesOperationResponse BeginReplaceAll(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, ReplaceAllIpFirewallRulesRequest request)
        {
                return ((IIPFirewallRulesOperations)operations).BeginReplaceAllAsync(resourceGroupName, workspaceName, request).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Replaces firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='workspaceName'>
        /// The name of the workspace.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReplaceAllFirewallRulesOperationResponse> BeginReplaceAllAsync(this IIPFirewallRulesOperations operations, string resourceGroupName, string workspaceName, ReplaceAllIpFirewallRulesRequest request, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginReplaceAllWithHttpMessagesAsync(resourceGroupName, workspaceName, request, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a list of firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpFirewallRuleInfo> ListByWorkspaceNext(this IIPFirewallRulesOperations operations, string nextPageLink)
        {
                return ((IIPFirewallRulesOperations)operations).ListByWorkspaceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of firewall rules
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpFirewallRuleInfo>> ListByWorkspaceNextAsync(this IIPFirewallRulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByWorkspaceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
