// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Synapse
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Azure Synapse Analytics Management Client
    /// </summary>
    public partial class SynapseManagementClient : Microsoft.Rest.ServiceClient<SynapseManagementClient>, ISynapseManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The ID of the target subscription.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// /// set to true a unique x-ms-client-request-id value is generated and
        /// /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IAzureAdOnlyAuthenticationsOperations
        /// </summary>
        public virtual IAzureAdOnlyAuthenticationsOperations AzureAdOnlyAuthentications { get; private set; }
        /// <summary>
        /// Gets the IOperations
        /// </summary>
        public virtual IOperations Operations { get; private set; }
        /// <summary>
        /// Gets the IIPFirewallRulesOperations
        /// </summary>
        public virtual IIPFirewallRulesOperations IPFirewallRules { get; private set; }
        /// <summary>
        /// Gets the IKeysOperations
        /// </summary>
        public virtual IKeysOperations Keys { get; private set; }
        /// <summary>
        /// Gets the IPrivateEndpointConnectionsOperations
        /// </summary>
        public virtual IPrivateEndpointConnectionsOperations PrivateEndpointConnections { get; private set; }
        /// <summary>
        /// Gets the IPrivateLinkResourcesOperations
        /// </summary>
        public virtual IPrivateLinkResourcesOperations PrivateLinkResources { get; private set; }
        /// <summary>
        /// Gets the IPrivateLinkHubPrivateLinkResourcesOperations
        /// </summary>
        public virtual IPrivateLinkHubPrivateLinkResourcesOperations PrivateLinkHubPrivateLinkResources { get; private set; }
        /// <summary>
        /// Gets the IPrivateLinkHubsOperations
        /// </summary>
        public virtual IPrivateLinkHubsOperations PrivateLinkHubs { get; private set; }
        /// <summary>
        /// Gets the IPrivateEndpointConnectionsPrivateLinkHubOperations
        /// </summary>
        public virtual IPrivateEndpointConnectionsPrivateLinkHubOperations PrivateEndpointConnectionsPrivateLinkHub { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolsOperations
        /// </summary>
        public virtual ISqlPoolsOperations SqlPools { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolMetadataSyncConfigsOperations
        /// </summary>
        public virtual ISqlPoolMetadataSyncConfigsOperations SqlPoolMetadataSyncConfigs { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolOperationResultsOperations
        /// </summary>
        public virtual ISqlPoolOperationResultsOperations SqlPoolOperationResults { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolGeoBackupPoliciesOperations
        /// </summary>
        public virtual ISqlPoolGeoBackupPoliciesOperations SqlPoolGeoBackupPolicies { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolDataWarehouseUserActivitiesOperations
        /// </summary>
        public virtual ISqlPoolDataWarehouseUserActivitiesOperations SqlPoolDataWarehouseUserActivities { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolRestorePointsOperations
        /// </summary>
        public virtual ISqlPoolRestorePointsOperations SqlPoolRestorePoints { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolReplicationLinksOperations
        /// </summary>
        public virtual ISqlPoolReplicationLinksOperations SqlPoolReplicationLinks { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolMaintenanceWindowsOperations
        /// </summary>
        public virtual ISqlPoolMaintenanceWindowsOperations SqlPoolMaintenanceWindows { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolMaintenanceWindowOptionsOperations
        /// </summary>
        public virtual ISqlPoolMaintenanceWindowOptionsOperations SqlPoolMaintenanceWindowOptions { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolTransparentDataEncryptionsOperations
        /// </summary>
        public virtual ISqlPoolTransparentDataEncryptionsOperations SqlPoolTransparentDataEncryptions { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolBlobAuditingPoliciesOperations
        /// </summary>
        public virtual ISqlPoolBlobAuditingPoliciesOperations SqlPoolBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolOperations
        /// </summary>
        public virtual ISqlPoolOperations SqlPoolOperations { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolUsagesOperations
        /// </summary>
        public virtual ISqlPoolUsagesOperations SqlPoolUsages { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolSensitivityLabelsOperations
        /// </summary>
        public virtual ISqlPoolSensitivityLabelsOperations SqlPoolSensitivityLabels { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolRecommendedSensitivityLabelsOperations
        /// </summary>
        public virtual ISqlPoolRecommendedSensitivityLabelsOperations SqlPoolRecommendedSensitivityLabels { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolSchemasOperations
        /// </summary>
        public virtual ISqlPoolSchemasOperations SqlPoolSchemas { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolTablesOperations
        /// </summary>
        public virtual ISqlPoolTablesOperations SqlPoolTables { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolTableColumnsOperations
        /// </summary>
        public virtual ISqlPoolTableColumnsOperations SqlPoolTableColumns { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolConnectionPoliciesOperations
        /// </summary>
        public virtual ISqlPoolConnectionPoliciesOperations SqlPoolConnectionPolicies { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolVulnerabilityAssessmentsOperations
        /// </summary>
        public virtual ISqlPoolVulnerabilityAssessmentsOperations SqlPoolVulnerabilityAssessments { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolVulnerabilityAssessmentScansOperations
        /// </summary>
        public virtual ISqlPoolVulnerabilityAssessmentScansOperations SqlPoolVulnerabilityAssessmentScans { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolSecurityAlertPoliciesOperations
        /// </summary>
        public virtual ISqlPoolSecurityAlertPoliciesOperations SqlPoolSecurityAlertPolicies { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolVulnerabilityAssessmentRuleBaselinesOperations
        /// </summary>
        public virtual ISqlPoolVulnerabilityAssessmentRuleBaselinesOperations SqlPoolVulnerabilityAssessmentRuleBaselines { get; private set; }
        /// <summary>
        /// Gets the IExtendedSqlPoolBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IExtendedSqlPoolBlobAuditingPoliciesOperations ExtendedSqlPoolBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the IDataMaskingPoliciesOperations
        /// </summary>
        public virtual IDataMaskingPoliciesOperations DataMaskingPolicies { get; private set; }
        /// <summary>
        /// Gets the IDataMaskingRulesOperations
        /// </summary>
        public virtual IDataMaskingRulesOperations DataMaskingRules { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolColumnsOperations
        /// </summary>
        public virtual ISqlPoolColumnsOperations SqlPoolColumns { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolWorkloadGroupOperations
        /// </summary>
        public virtual ISqlPoolWorkloadGroupOperations SqlPoolWorkloadGroup { get; private set; }
        /// <summary>
        /// Gets the ISqlPoolWorkloadClassifierOperations
        /// </summary>
        public virtual ISqlPoolWorkloadClassifierOperations SqlPoolWorkloadClassifier { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerBlobAuditingPoliciesOperations WorkspaceManagedSqlServerBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerExtendedBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerExtendedBlobAuditingPoliciesOperations WorkspaceManagedSqlServerExtendedBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerSecurityAlertPolicyOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerSecurityAlertPolicyOperations WorkspaceManagedSqlServerSecurityAlertPolicy { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerVulnerabilityAssessmentsOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerVulnerabilityAssessmentsOperations WorkspaceManagedSqlServerVulnerabilityAssessments { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerEncryptionProtectorOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerEncryptionProtectorOperations WorkspaceManagedSqlServerEncryptionProtector { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerUsagesOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerUsagesOperations WorkspaceManagedSqlServerUsages { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerRecoverableSqlPoolsOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerRecoverableSqlPoolsOperations WorkspaceManagedSqlServerRecoverableSqlPools { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsOperations
        /// </summary>
        public virtual IWorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsOperations WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettings { get; private set; }
        /// <summary>
        /// Gets the IWorkspacesOperations
        /// </summary>
        public virtual IWorkspacesOperations Workspaces { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceAadAdminsOperations
        /// </summary>
        public virtual IWorkspaceAadAdminsOperations WorkspaceAadAdmins { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceSqlAadAdminsOperations
        /// </summary>
        public virtual IWorkspaceSqlAadAdminsOperations WorkspaceSqlAadAdmins { get; private set; }
        /// <summary>
        /// Gets the IWorkspaceManagedIdentitySqlControlSettingsOperations
        /// </summary>
        public virtual IWorkspaceManagedIdentitySqlControlSettingsOperations WorkspaceManagedIdentitySqlControlSettings { get; private set; }
        /// <summary>
        /// Gets the IRestorableDroppedSqlPoolsOperations
        /// </summary>
        public virtual IRestorableDroppedSqlPoolsOperations RestorableDroppedSqlPools { get; private set; }
        /// <summary>
        /// Gets the IBigDataPoolsOperations
        /// </summary>
        public virtual IBigDataPoolsOperations BigDataPools { get; private set; }
        /// <summary>
        /// Gets the ILibraryOperations
        /// </summary>
        public virtual ILibraryOperations Library { get; private set; }
        /// <summary>
        /// Gets the ILibrariesOperations
        /// </summary>
        public virtual ILibrariesOperations Libraries { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimesOperations
        /// </summary>
        public virtual IIntegrationRuntimesOperations IntegrationRuntimes { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeNodeIPAddressOperations
        /// </summary>
        public virtual IIntegrationRuntimeNodeIPAddressOperations IntegrationRuntimeNodeIPAddress { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeObjectMetadataOperations
        /// </summary>
        public virtual IIntegrationRuntimeObjectMetadataOperations IntegrationRuntimeObjectMetadata { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeNodesOperations
        /// </summary>
        public virtual IIntegrationRuntimeNodesOperations IntegrationRuntimeNodes { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeCredentialsOperations
        /// </summary>
        public virtual IIntegrationRuntimeCredentialsOperations IntegrationRuntimeCredentials { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeConnectionInfosOperations
        /// </summary>
        public virtual IIntegrationRuntimeConnectionInfosOperations IntegrationRuntimeConnectionInfos { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeAuthKeysOperations
        /// </summary>
        public virtual IIntegrationRuntimeAuthKeysOperations IntegrationRuntimeAuthKeys { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeMonitoringDataOperations
        /// </summary>
        public virtual IIntegrationRuntimeMonitoringDataOperations IntegrationRuntimeMonitoringData { get; private set; }
        /// <summary>
        /// Gets the IIntegrationRuntimeStatusOperations
        /// </summary>
        public virtual IIntegrationRuntimeStatusOperations IntegrationRuntimeStatus { get; private set; }
        /// <summary>
        /// Gets the ISparkConfigurationOperations
        /// </summary>
        public virtual ISparkConfigurationOperations SparkConfiguration { get; private set; }
        /// <summary>
        /// Gets the ISparkConfigurationsOperations
        /// </summary>
        public virtual ISparkConfigurationsOperations SparkConfigurations { get; private set; }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SynapseManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected SynapseManagementClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SynapseManagementClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SynapseManagementClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SynapseManagementClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SynapseManagementClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SynapseManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SynapseManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SynapseManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.AzureAdOnlyAuthentications = new AzureAdOnlyAuthenticationsOperations(this);
            this.Operations = new Operations(this);
            this.IPFirewallRules = new IPFirewallRulesOperations(this);
            this.Keys = new KeysOperations(this);
            this.PrivateEndpointConnections = new PrivateEndpointConnectionsOperations(this);
            this.PrivateLinkResources = new PrivateLinkResourcesOperations(this);
            this.PrivateLinkHubPrivateLinkResources = new PrivateLinkHubPrivateLinkResourcesOperations(this);
            this.PrivateLinkHubs = new PrivateLinkHubsOperations(this);
            this.PrivateEndpointConnectionsPrivateLinkHub = new PrivateEndpointConnectionsPrivateLinkHubOperations(this);
            this.SqlPools = new SqlPoolsOperations(this);
            this.SqlPoolMetadataSyncConfigs = new SqlPoolMetadataSyncConfigsOperations(this);
            this.SqlPoolOperationResults = new SqlPoolOperationResultsOperations(this);
            this.SqlPoolGeoBackupPolicies = new SqlPoolGeoBackupPoliciesOperations(this);
            this.SqlPoolDataWarehouseUserActivities = new SqlPoolDataWarehouseUserActivitiesOperations(this);
            this.SqlPoolRestorePoints = new SqlPoolRestorePointsOperations(this);
            this.SqlPoolReplicationLinks = new SqlPoolReplicationLinksOperations(this);
            this.SqlPoolMaintenanceWindows = new SqlPoolMaintenanceWindowsOperations(this);
            this.SqlPoolMaintenanceWindowOptions = new SqlPoolMaintenanceWindowOptionsOperations(this);
            this.SqlPoolTransparentDataEncryptions = new SqlPoolTransparentDataEncryptionsOperations(this);
            this.SqlPoolBlobAuditingPolicies = new SqlPoolBlobAuditingPoliciesOperations(this);
            this.SqlPoolOperations = new SqlPoolOperations(this);
            this.SqlPoolUsages = new SqlPoolUsagesOperations(this);
            this.SqlPoolSensitivityLabels = new SqlPoolSensitivityLabelsOperations(this);
            this.SqlPoolRecommendedSensitivityLabels = new SqlPoolRecommendedSensitivityLabelsOperations(this);
            this.SqlPoolSchemas = new SqlPoolSchemasOperations(this);
            this.SqlPoolTables = new SqlPoolTablesOperations(this);
            this.SqlPoolTableColumns = new SqlPoolTableColumnsOperations(this);
            this.SqlPoolConnectionPolicies = new SqlPoolConnectionPoliciesOperations(this);
            this.SqlPoolVulnerabilityAssessments = new SqlPoolVulnerabilityAssessmentsOperations(this);
            this.SqlPoolVulnerabilityAssessmentScans = new SqlPoolVulnerabilityAssessmentScansOperations(this);
            this.SqlPoolSecurityAlertPolicies = new SqlPoolSecurityAlertPoliciesOperations(this);
            this.SqlPoolVulnerabilityAssessmentRuleBaselines = new SqlPoolVulnerabilityAssessmentRuleBaselinesOperations(this);
            this.ExtendedSqlPoolBlobAuditingPolicies = new ExtendedSqlPoolBlobAuditingPoliciesOperations(this);
            this.DataMaskingPolicies = new DataMaskingPoliciesOperations(this);
            this.DataMaskingRules = new DataMaskingRulesOperations(this);
            this.SqlPoolColumns = new SqlPoolColumnsOperations(this);
            this.SqlPoolWorkloadGroup = new SqlPoolWorkloadGroupOperations(this);
            this.SqlPoolWorkloadClassifier = new SqlPoolWorkloadClassifierOperations(this);
            this.WorkspaceManagedSqlServerBlobAuditingPolicies = new WorkspaceManagedSqlServerBlobAuditingPoliciesOperations(this);
            this.WorkspaceManagedSqlServerExtendedBlobAuditingPolicies = new WorkspaceManagedSqlServerExtendedBlobAuditingPoliciesOperations(this);
            this.WorkspaceManagedSqlServerSecurityAlertPolicy = new WorkspaceManagedSqlServerSecurityAlertPolicyOperations(this);
            this.WorkspaceManagedSqlServerVulnerabilityAssessments = new WorkspaceManagedSqlServerVulnerabilityAssessmentsOperations(this);
            this.WorkspaceManagedSqlServerEncryptionProtector = new WorkspaceManagedSqlServerEncryptionProtectorOperations(this);
            this.WorkspaceManagedSqlServerUsages = new WorkspaceManagedSqlServerUsagesOperations(this);
            this.WorkspaceManagedSqlServerRecoverableSqlPools = new WorkspaceManagedSqlServerRecoverableSqlPoolsOperations(this);
            this.WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettings = new WorkspaceManagedSqlServerDedicatedSqlMinimalTlsSettingsOperations(this);
            this.Workspaces = new WorkspacesOperations(this);
            this.WorkspaceAadAdmins = new WorkspaceAadAdminsOperations(this);
            this.WorkspaceSqlAadAdmins = new WorkspaceSqlAadAdminsOperations(this);
            this.WorkspaceManagedIdentitySqlControlSettings = new WorkspaceManagedIdentitySqlControlSettingsOperations(this);
            this.RestorableDroppedSqlPools = new RestorableDroppedSqlPoolsOperations(this);
            this.BigDataPools = new BigDataPoolsOperations(this);
            this.Library = new LibraryOperations(this);
            this.Libraries = new LibrariesOperations(this);
            this.IntegrationRuntimes = new IntegrationRuntimesOperations(this);
            this.IntegrationRuntimeNodeIPAddress = new IntegrationRuntimeNodeIPAddressOperations(this);
            this.IntegrationRuntimeObjectMetadata = new IntegrationRuntimeObjectMetadataOperations(this);
            this.IntegrationRuntimeNodes = new IntegrationRuntimeNodesOperations(this);
            this.IntegrationRuntimeCredentials = new IntegrationRuntimeCredentialsOperations(this);
            this.IntegrationRuntimeConnectionInfos = new IntegrationRuntimeConnectionInfosOperations(this);
            this.IntegrationRuntimeAuthKeys = new IntegrationRuntimeAuthKeysOperations(this);
            this.IntegrationRuntimeMonitoringData = new IntegrationRuntimeMonitoringDataOperations(this);
            this.IntegrationRuntimeStatus = new IntegrationRuntimeStatusOperations(this);
            this.SparkConfiguration = new SparkConfigurationOperations(this);
            this.SparkConfigurations = new SparkConfigurationsOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<IntegrationRuntime>("type"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<IntegrationRuntime>("type"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<SsisObjectMetadata>("type"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<SsisObjectMetadata>("type"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<IntegrationRuntimeStatus>("type"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<IntegrationRuntimeStatus>("type"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<SecretBase>("type"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<SecretBase>("type"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<CustomSetupBase>("type"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<CustomSetupBase>("type"));
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicSerializeJsonConverter<LinkedIntegrationRuntimeType>("authorizationType"));
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.PolymorphicDeserializeJsonConverter<LinkedIntegrationRuntimeType>("authorizationType"));
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}