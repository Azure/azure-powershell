
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to create a virtual machine.
Please note some properties can be set only during virtual machine creation.
.Description
The operation to create a virtual machine.
Please note some properties can be set only during virtual machine creation.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AVAILABILITYSET <IAvailabilitySetListItem[]>: Availability Sets in vm.
  [Id <String>]: Gets the ARM Id of the microsoft.scvmm/availabilitySets resource.
  [Name <String>]: Gets or sets the name of the availability set.

NETWORKPROFILENETWORKINTERFACE <INetworkInterface[]>: Gets or sets the list of network interfaces associated with the virtual machine.
  [Ipv4AddressType <String>]: Gets or sets the ipv4 address type.
  [Ipv6AddressType <String>]: Gets or sets the ipv6 address type.
  [MacAddress <String>]: Gets or sets the nic MAC address.
  [MacAddressType <String>]: Gets or sets the mac address type.
  [Name <String>]: Gets or sets the name of the network interface.
  [NicId <String>]: Gets or sets the nic id.
  [VirtualNetworkId <String>]: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.

STORAGEPROFILEDISK <IVirtualDisk[]>: Gets or sets the list of virtual disks associated with the virtual machine.
  [Bus <Int32?>]: Gets or sets the disk bus.
  [BusType <String>]: Gets or sets the disk bus type.
  [CreateDiffDisk <String>]: Gets or sets a value indicating diff disk.
  [DiskId <String>]: Gets or sets the disk id.
  [DiskSizeGb <Int32?>]: Gets or sets the disk total size.
  [Lun <Int32?>]: Gets or sets the disk lun.
  [Name <String>]: Gets or sets the name of the disk.
  [StorageQoSPolicyId <String>]: The ID of the QoS policy.
  [StorageQoSPolicyName <String>]: The name of the policy.
  [TemplateDiskId <String>]: Gets or sets the disk id in the template.
  [VhdType <String>]: Gets or sets the disk vhd type.
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/new-azscvmmvm
#>
function New-AzScVmmVM {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('VMName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The name of the virtual machine.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Parameter(ParameterSetName='CreateExpandedInventory', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Name of the vmmServer resource in which this resource resides.
    ${VmmServer},

    [Parameter(ParameterSetName='CreateExpandedInventory', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # UUID of the inventory virtual machine resource to enable in Azure.
    ${InventoryUuid},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # UUID of the cloud resource to use for deploying the vm.
    ${CloudName},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Name of the template resource to use for deploying the vm.
    ${TemplateName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpandedInventory')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The geo-location where the resource lives.
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Parameter(ParameterSetName='CreateExpandedInventory')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The custom location name.
    ${CustomLocationName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Sets computer name.
    ${ComputerName},
    
    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Security.SecureString]
    # Admin password of the virtual machine.
    ${AdminPassword},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Generation for the vm.
    ${Generation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the number of vCPUs for the vm.
    ${CpuCount},

    [Parameter(ParameterSetName='CreateExpanded')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable dynamic memory or not.
    ${DynamicMemoryEnabled},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the max dynamic memory for the vm.
    ${DynamicMemoryMaxMb},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the min dynamic memory for the vm.
    ${DynamicMemoryMinMb},

    [Parameter(ParameterSetName='CreateExpanded')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable processor compatibility mode for live migration of VMs.
    ${LimitCpuForMigration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # MemoryMB is the size of a virtual machine's memory, in MB.
    ${MemoryMb},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Type of checkpoint supported for the vm.
    ${CheckpointType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem[]]
    # Availability Sets in vm.
    ${AvailabilitySet},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface[]]
    # Gets or sets the list of network interfaces associated with the virtual machine.
    ${NetworkInterface},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk[]]
    # Gets or sets the list of virtual disks associated with the virtual machine.
    ${Disk},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceUpdateTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tags},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.ScVmm.private\New-AzScVmmVM_CreateExpanded';
            CreateExpandedInventory = 'Az.ScVmm.private\New-AzScVmmVM_CreateExpanded';
            CreateViaJsonFilePath = 'Az.ScVmm.private\New-AzScVmmVM_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.ScVmm.private\New-AzScVmmVM_CreateViaJsonString';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($null -eq $wrappedCmd) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }

        # Custom Code Begin
        $MACHINE_KIND_SCVMM = "SCVMM"
        $CUSTOM_LOCATION_RESOURCE_TYPE = "customLocations"

        #  Pre-Validation of the input parameters

        if ($parameterSet -eq 'CreateExpandedInventory' -or $parameterSet -eq 'CreateExpanded') {

            if ($PSBoundParameters.ContainsKey('CustomLocationName')) {
                try {
                    $customLocationObj = Az.ScVmm.internal\Get-AzScVmmCustomLocation -Name $CustomLocationName -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
                    $customLocationId = $customLocationObj.Id
                }
                catch {
                    Write-Host $_
                    throw "Cannot determine custom location resource ARM ID for CustomLocation $CustomLocationName in Resource Group $ResourceGroupName."
                }
            }
            try {
                $VmmServerObj = Get-AzScVmmServer -Name $VmmServer -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
                $VmmServerId = $VmmServerObj.Id
                if (-not $PSBoundParameters.ContainsKey('CustomLocationName')) {
                    $customLocationId = $VmmServerObj.ExtendedLocationName
                }
            }
            catch {
                Write-Host $_
                throw "Cannot determine VmmServer resource ARM ID for VmmServer $VmmServer in Resource Group $ResourceGroupName."
            }

            if ($parameterSet -eq 'CreateExpandedInventory') {
                try {
                    $inventoryItemObj = Get-AzScVmmInventoryItem -VmmServerName $VmmServer -Name $InventoryUuid -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
                    $inventoryItemId = $inventoryItemObj.Id
                }
                catch {
                    Write-Host $_
                    throw "Cannot determine inventory resource ARM ID for InventoryItem $InventoryUuid in Resource Group $ResourceGroupName."
                }
            }
    
            if ($parameterSet -eq 'CreateExpanded') {
                try {
                    $cloudObj = Get-AzScVmmCloud -Name $CloudName -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
                    $cloudId = $cloudObj.Id
                }
                catch {
                    Write-Host $_
                    throw "Cannot determine cloud resource ARM ID for Cloud $CloudName in Resource Group $ResourceGroupName."
                }
    
                try {
                    $templateObj = Get-AzScVmmVmTemplate -Name $TemplateName -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
                    $templateId = $templateObj.Id
                }
                catch {
                    Write-Host $_
                    throw "Cannot determine template resource ARM ID for Template $TemplateName in Resource Group $ResourceGroupName."
                }
            }
        }

        # Check if Hybrid Comnpute machine resource exists or create a new one

        try {
            $machineObj = Az.ScVmm.internal\Get-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
            if ($null -eq $machineObj) {
                throw "Virtual Machine $Name not found in Resource Group $ResourceGroupName (SubscriptionId $SubscriptionId)"
            }
            if ($null -ne $machineObj.kind -and $machineObj.kind.ToLower() -ne $MACHINE_KIND_SCVMM.ToLower()) {
                throw "A machine already exists with kind $($Machine.kind). Machine kind cannot be updated to $MACHINE_KIND_SCVMM."
            }
            if ($Location -and ($null -ne $machineObj.location -and $machineObj.location -ne $Location)) {
                throw "The location of the existing Machine cannot be updated. Existing location: $($machineObj.location), Provided location: $Location."
            }
            if ($Tags) {
                $machineObj = Az.ScVmm.internal\Update-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId -Tag $Tags
                if ($null -eq $machineObj) {
                    throw "Failed to update tags for the existing machine resource."
                }
            }
        }
        catch {
            if ($_.Exception.Message -match "ResourceNotFound|not found") {
                if ($null -eq $Location) {
                    throw "The parent Machine resource does not exist. Location is required while creating a new machine."
                }
                if ($Tags) {
                    $machineObj = Az.ScVmm.internal\New-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId -Location $Location -Tag $Tags -Kind $MACHINE_KIND_SCVMM
                } else {
                    $machineObj = Az.ScVmm.internal\New-AzScVmmMachine -Name $Name -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId -Location $Location -Kind $MACHINE_KIND_SCVMM
                }

                if ($null -eq $machineObj) {
                    throw "Failed to create the machine resource for the new virtual machine."
                }
            }
            else {
                Write-Host $_
                throw $_
            }
        }

        # Update PSBoundParameters

        $PSBoundParameters['MachineId'] = $machineObj.Id
        foreach ($key in @('Name', 'ResourceGroupName', 'SubscriptionId', 'Tags', 'Location')) {
            [void]$PSBoundParameters.Remove($key)
        }

        if ($parameterSet -eq 'CreateExpandedInventory' -or $parameterSet -eq 'CreateExpanded') {

            # ExtendedLocation / CustomLocation

            $PSBoundParameters['ExtendedLocationType'] = $CUSTOM_LOCATION_RESOURCE_TYPE
            $PSBoundParameters['ExtendedLocationName'] = $customLocationId

            if ($PSBoundParameters.ContainsKey('CustomLocationName')) {
                [void]$PSBoundParameters.Remove('CustomLocationName')
            }

            # AvailabilitySet

            if ($PSBoundParameters.ContainsKey('AvailabilitySet')) {
                $PSBoundParameters['InfrastructureProfileAvailabilitySet'] = $PSBoundParameters['AvailabilitySet']
                [void]$PSBoundParameters.Remove('AvailabilitySet')
            }

            # OSProfile

            foreach ($key in @('ComputerName', 'AdminPassword')) {
                if ($PSBoundParameters.ContainsKey($key)) {
                    $PSBoundParameters["OSProfile$($key)"] = $PSBoundParameters[$key]
                    [void]$PSBoundParameters.Remove($key)
                }
                
            }

            # HardwareProfile
            
            foreach ($key in @('CpuCount', 'DynamicMemoryMaxMb', 'DynamicMemoryMinMb', 'MemoryMb', 'DynamicMemoryEnabled','LimitCpuForMigration')) {
                if ($PSBoundParameters.ContainsKey($key)) {
                    if ($key -eq 'DynamicMemoryEnabled' -or $key -eq 'LimitCpuForMigration') {
                        $PSBoundParameters["HardwareProfile$($key)"] = "true"
                    } else {
                        $PSBoundParameters["HardwareProfile$($key)"] = $PSBoundParameters[$key]
                    }
                    [void]$PSBoundParameters.Remove($key)
                }
            }

            # NetworkProfile

            if ($PSBoundParameters.ContainsKey('NetworkInterface')) {
                $PSBoundParameters["NetworkProfileNetworkInterface"] = $PSBoundParameters['NetworkInterface']
                    [void]$PSBoundParameters.Remove('NetworkInterface')
            }

            # StorageProfile

            if ($PSBoundParameters.ContainsKey('Disk')) {
                $PSBoundParameters["StorageProfileDisk"] = $PSBoundParameters['Disk']
                    [void]$PSBoundParameters.Remove('Disk')
            }

            # InfrastructureProfile

            if ($parameterSet -eq 'CreateExpandedInventory') {
                $PSBoundParameters["InfrastructureProfileInventoryItemId"] = $inventoryItemId
            } else {
                $PSBoundParameters["InfrastructureProfileCloudId"] = $cloudId
                $PSBoundParameters["InfrastructureProfileTemplateId"] = $templateId
                $PSBoundParameters["InfrastructureProfileVmmServerId"] = $VmmServerId
            }
            
            foreach ($key in @('VmmServer', 'InventoryUuid', 'CloudName', 'TemplateName')) {
                if ($PSBoundParameters.ContainsKey($key)) {
                    [void]$PSBoundParameters.Remove($key)
                }
            }
            foreach ($key in @('CheckpointType', 'Generation')) {
                if ($PSBoundParameters.ContainsKey($key)) {
                    $PSBoundParameters["InfrastructureProfile$($key)"] = $PSBoundParameters[$key]
                    [void]$PSBoundParameters.Remove($key)
                }
            }
        }
                
        # Custom Code End

        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
