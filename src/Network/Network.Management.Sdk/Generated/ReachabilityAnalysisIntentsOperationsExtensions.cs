// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReachabilityAnalysisIntentsOperations
    /// </summary>
    public static partial class ReachabilityAnalysisIntentsOperationsExtensions
    {
        /// <summary>
        /// Gets list of Reachability Analysis Intents .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional skip token.
        /// </param>
        /// <param name='skip'>
        /// Optional num entries to skip.
        /// </param>
        /// <param name='top'>
        /// Optional num entries to show.
        /// </param>
        /// <param name='sortKey'>
        /// Optional key by which to sort.
        /// </param>
        /// <param name='sortValue'>
        /// Optional sort value for pagination.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReachabilityAnalysisIntent> List(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string skipToken = default(string), int? skip = default(int?), int? top = default(int?), string sortKey = default(string), string sortValue = default(string))
        {
                return ((IReachabilityAnalysisIntentsOperations)operations).ListAsync(resourceGroupName, networkManagerName, workspaceName, skipToken, skip, top, sortKey, sortValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets list of Reachability Analysis Intents .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional skip token.
        /// </param>
        /// <param name='skip'>
        /// Optional num entries to skip.
        /// </param>
        /// <param name='top'>
        /// Optional num entries to show.
        /// </param>
        /// <param name='sortKey'>
        /// Optional key by which to sort.
        /// </param>
        /// <param name='sortValue'>
        /// Optional sort value for pagination.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReachabilityAnalysisIntent>> ListAsync(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string skipToken = default(string), int? skip = default(int?), int? top = default(int?), string sortKey = default(string), string sortValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, skipToken, skip, top, sortKey, sortValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the Reachability Analysis Intent.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisIntentName'>
        /// Reachability Analysis Intent name.
        /// </param>
        public static ReachabilityAnalysisIntent Get(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisIntentName)
        {
                return ((IReachabilityAnalysisIntentsOperations)operations).GetAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the Reachability Analysis Intent.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisIntentName'>
        /// Reachability Analysis Intent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReachabilityAnalysisIntent> GetAsync(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisIntentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates Reachability Analysis Intent.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisIntentName'>
        /// Reachability Analysis Intent name.
        /// </param>
        public static ReachabilityAnalysisIntent Create(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisIntentName, ReachabilityAnalysisIntent body)
        {
                return ((IReachabilityAnalysisIntentsOperations)operations).CreateAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates Reachability Analysis Intent.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisIntentName'>
        /// Reachability Analysis Intent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReachabilityAnalysisIntent> CreateAsync(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisIntentName, ReachabilityAnalysisIntent body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes Reachability Analysis Intent.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisIntentName'>
        /// Reachability Analysis Intent name.
        /// </param>
        public static void Delete(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisIntentName)
        {
                ((IReachabilityAnalysisIntentsOperations)operations).DeleteAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes Reachability Analysis Intent.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisIntentName'>
        /// Reachability Analysis Intent name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IReachabilityAnalysisIntentsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisIntentName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisIntentName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets list of Reachability Analysis Intents .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReachabilityAnalysisIntent> ListNext(this IReachabilityAnalysisIntentsOperations operations, string nextPageLink)
        {
                return ((IReachabilityAnalysisIntentsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets list of Reachability Analysis Intents .
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReachabilityAnalysisIntent>> ListNextAsync(this IReachabilityAnalysisIntentsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
