// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ReachabilityAnalysisRunsOperations
    /// </summary>
    public static partial class ReachabilityAnalysisRunsOperationsExtensions
    {
        /// <summary>
        /// Gets list of Reachability Analysis Runs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional skip token.
        /// </param>
        /// <param name='skip'>
        /// Optional num entries to skip.
        /// </param>
        /// <param name='top'>
        /// Optional num entries to show.
        /// </param>
        /// <param name='sortKey'>
        /// Optional key by which to sort.
        /// </param>
        /// <param name='sortValue'>
        /// Optional sort value for pagination.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReachabilityAnalysisRun> List(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string skipToken = default(string), int? skip = default(int?), int? top = default(int?), string sortKey = default(string), string sortValue = default(string))
        {
                return ((IReachabilityAnalysisRunsOperations)operations).ListAsync(resourceGroupName, networkManagerName, workspaceName, skipToken, skip, top, sortKey, sortValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets list of Reachability Analysis Runs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='skipToken'>
        /// Optional skip token.
        /// </param>
        /// <param name='skip'>
        /// Optional num entries to skip.
        /// </param>
        /// <param name='top'>
        /// Optional num entries to show.
        /// </param>
        /// <param name='sortKey'>
        /// Optional key by which to sort.
        /// </param>
        /// <param name='sortValue'>
        /// Optional sort value for pagination.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReachabilityAnalysisRun>> ListAsync(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string skipToken = default(string), int? skip = default(int?), int? top = default(int?), string sortKey = default(string), string sortValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, skipToken, skip, top, sortKey, sortValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets Reachability Analysis Run.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        public static ReachabilityAnalysisRun Get(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName)
        {
                return ((IReachabilityAnalysisRunsOperations)operations).GetAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets Reachability Analysis Run.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReachabilityAnalysisRun> GetAsync(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates Reachability Analysis Runs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        public static ReachabilityAnalysisRun Create(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName, ReachabilityAnalysisRun body)
        {
                return ((IReachabilityAnalysisRunsOperations)operations).CreateAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates Reachability Analysis Runs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReachabilityAnalysisRun> CreateAsync(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName, ReachabilityAnalysisRun body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes Reachability Analysis Run.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        public static ReachabilityAnalysisRunsDeleteHeaders Delete(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName)
        {
                return ((IReachabilityAnalysisRunsOperations)operations).DeleteAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes Reachability Analysis Run.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReachabilityAnalysisRunsDeleteHeaders> DeleteAsync(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Deletes Reachability Analysis Run.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        public static ReachabilityAnalysisRunsDeleteHeaders BeginDelete(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName)
        {
                return ((IReachabilityAnalysisRunsOperations)operations).BeginDeleteAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes Reachability Analysis Run.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='workspaceName'>
        /// Workspace name.
        /// </param>
        /// <param name='reachabilityAnalysisRunName'>
        /// Reachability Analysis Run name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ReachabilityAnalysisRunsDeleteHeaders> BeginDeleteAsync(this IReachabilityAnalysisRunsOperations operations, string resourceGroupName, string networkManagerName, string workspaceName, string reachabilityAnalysisRunName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, workspaceName, reachabilityAnalysisRunName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets list of Reachability Analysis Runs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ReachabilityAnalysisRun> ListNext(this IReachabilityAnalysisRunsOperations operations, string nextPageLink)
        {
                return ((IReachabilityAnalysisRunsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets list of Reachability Analysis Runs.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ReachabilityAnalysisRun>> ListNextAsync(this IReachabilityAnalysisRunsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
