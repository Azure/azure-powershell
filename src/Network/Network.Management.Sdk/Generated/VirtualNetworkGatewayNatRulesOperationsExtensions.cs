// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VirtualNetworkGatewayNatRulesOperations
    /// </summary>
    public static partial class VirtualNetworkGatewayNatRulesOperationsExtensions
    {
        /// <summary>
        /// Retrieves the details of a nat rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        public static VirtualNetworkGatewayNatRule Get(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName)
        {
                return ((IVirtualNetworkGatewayNatRulesOperations)operations).GetAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the details of a nat rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualNetworkGatewayNatRule> GetAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a nat rule to a scalable virtual network gateway if it doesn&#39;t
        /// exist else updates the existing nat rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        public static VirtualNetworkGatewayNatRule CreateOrUpdate(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters)
        {
                return ((IVirtualNetworkGatewayNatRulesOperations)operations).CreateOrUpdateAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a nat rule to a scalable virtual network gateway if it doesn&#39;t
        /// exist else updates the existing nat rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualNetworkGatewayNatRule> CreateOrUpdateAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a nat rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        public static void Delete(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName)
        {
                ((IVirtualNetworkGatewayNatRulesOperations)operations).DeleteAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a nat rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves all nat rules for a particular virtual network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the virtual network gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VirtualNetworkGatewayNatRule> ListByVirtualNetworkGateway(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName)
        {
                return ((IVirtualNetworkGatewayNatRulesOperations)operations).ListByVirtualNetworkGatewayAsync(resourceGroupName, virtualNetworkGatewayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves all nat rules for a particular virtual network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the virtual network gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VirtualNetworkGatewayNatRule>> ListByVirtualNetworkGatewayAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByVirtualNetworkGatewayWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a nat rule to a scalable virtual network gateway if it doesn&#39;t
        /// exist else updates the existing nat rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        public static VirtualNetworkGatewayNatRule BeginCreateOrUpdate(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters)
        {
                return ((IVirtualNetworkGatewayNatRulesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a nat rule to a scalable virtual network gateway if it doesn&#39;t
        /// exist else updates the existing nat rules.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualNetworkGatewayNatRule> BeginCreateOrUpdateAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, VirtualNetworkGatewayNatRule natRuleParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, natRuleParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a nat rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        public static void BeginDelete(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName)
        {
                ((IVirtualNetworkGatewayNatRulesOperations)operations).BeginDeleteAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a nat rule.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the Virtual Network Gateway.
        /// </param>
        /// <param name='virtualNetworkGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='natRuleName'>
        /// The name of the nat rule.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string resourceGroupName, string virtualNetworkGatewayName, string natRuleName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualNetworkGatewayName, natRuleName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves all nat rules for a particular virtual network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VirtualNetworkGatewayNatRule> ListByVirtualNetworkGatewayNext(this IVirtualNetworkGatewayNatRulesOperations operations, string nextPageLink)
        {
                return ((IVirtualNetworkGatewayNatRulesOperations)operations).ListByVirtualNetworkGatewayNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves all nat rules for a particular virtual network gateway.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VirtualNetworkGatewayNatRule>> ListByVirtualNetworkGatewayNextAsync(this IVirtualNetworkGatewayNatRulesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByVirtualNetworkGatewayNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
