// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IpamPoolsOperations
    /// </summary>
    public static partial class IpamPoolsOperationsExtensions
    {
        /// <summary>
        /// Gets list of Pool resources at Network Manager level.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='skipToken'>
        /// Optional skip token.
        /// </param>
        /// <param name='skip'>
        /// Optional num entries to skip.
        /// </param>
        /// <param name='top'>
        /// Optional num entries to show.
        /// </param>
        /// <param name='sortKey'>
        /// Optional key by which to sort.
        /// </param>
        /// <param name='sortValue'>
        /// Optional sort value for pagination.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpamPool> List(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string skipToken = default(string), int? skip = default(int?), int? top = default(int?), string sortKey = default(string), string sortValue = default(string))
        {
                return ((IIpamPoolsOperations)operations).ListAsync(resourceGroupName, networkManagerName, skipToken, skip, top, sortKey, sortValue).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets list of Pool resources at Network Manager level.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='skipToken'>
        /// Optional skip token.
        /// </param>
        /// <param name='skip'>
        /// Optional num entries to skip.
        /// </param>
        /// <param name='top'>
        /// Optional num entries to show.
        /// </param>
        /// <param name='sortKey'>
        /// Optional key by which to sort.
        /// </param>
        /// <param name='sortValue'>
        /// Optional sort value for pagination.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpamPool>> ListAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string skipToken = default(string), int? skip = default(int?), int? top = default(int?), string sortKey = default(string), string sortValue = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkManagerName, skipToken, skip, top, sortKey, sortValue, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates/Updates the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// IP Address Manager Pool resource name.
        /// </param>
        public static IpamPool Create(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, IpamPool body)
        {
                return ((IIpamPoolsOperations)operations).CreateAsync(resourceGroupName, networkManagerName, poolName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates/Updates the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// IP Address Manager Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpamPool> CreateAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, IpamPool body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the specific Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// IP Address Manager Pool resource name.
        /// </param>
        public static IpamPool Update(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, IpamPoolUpdate body = default(IpamPoolUpdate))
        {
                return ((IIpamPoolsOperations)operations).UpdateAsync(resourceGroupName, networkManagerName, poolName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the specific Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// IP Address Manager Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpamPool> UpdateAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, IpamPoolUpdate body = default(IpamPoolUpdate), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specific Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        public static IpamPool Get(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName)
        {
                return ((IIpamPoolsOperations)operations).GetAsync(resourceGroupName, networkManagerName, poolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specific Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpamPool> GetAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        public static IpamPoolsDeleteHeaders Delete(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName)
        {
                return ((IIpamPoolsOperations)operations).DeleteAsync(resourceGroupName, networkManagerName, poolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpamPoolsDeleteHeaders> DeleteAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Get the Pool Usage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        public static PoolUsage GetPoolUsage(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName)
        {
                return ((IIpamPoolsOperations)operations).GetPoolUsageAsync(resourceGroupName, networkManagerName, poolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the Pool Usage.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PoolUsage> GetPoolUsageAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetPoolUsageWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List Associated Resource in the Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PoolAssociation> ListAssociatedResources(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName)
        {
                return ((IIpamPoolsOperations)operations).ListAssociatedResourcesAsync(resourceGroupName, networkManagerName, poolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List Associated Resource in the Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PoolAssociation>> ListAssociatedResourcesAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAssociatedResourcesWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates/Updates the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// IP Address Manager Pool resource name.
        /// </param>
        public static IpamPool BeginCreate(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, IpamPool body)
        {
                return ((IIpamPoolsOperations)operations).BeginCreateAsync(resourceGroupName, networkManagerName, poolName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates/Updates the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// IP Address Manager Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpamPool> BeginCreateAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, IpamPool body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        public static IpamPoolsDeleteHeaders BeginDelete(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName)
        {
                return ((IIpamPoolsOperations)operations).BeginDeleteAsync(resourceGroupName, networkManagerName, poolName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the Pool resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='poolName'>
        /// Pool resource name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpamPoolsDeleteHeaders> BeginDeleteAsync(this IIpamPoolsOperations operations, string resourceGroupName, string networkManagerName, string poolName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, poolName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Gets list of Pool resources at Network Manager level.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpamPool> ListNext(this IIpamPoolsOperations operations, string nextPageLink)
        {
                return ((IIpamPoolsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets list of Pool resources at Network Manager level.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpamPool>> ListNextAsync(this IIpamPoolsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List Associated Resource in the Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PoolAssociation> ListAssociatedResourcesNext(this IIpamPoolsOperations operations, string nextPageLink)
        {
                return ((IIpamPoolsOperations)operations).ListAssociatedResourcesNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List Associated Resource in the Pool.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PoolAssociation>> ListAssociatedResourcesNextAsync(this IIpamPoolsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListAssociatedResourcesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
