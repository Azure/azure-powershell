// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for NetworkVirtualApplianceConnectionsOperations.
    /// </summary>
    public static partial class NetworkVirtualApplianceConnectionsOperationsExtensions
    {
            /// <summary>
            /// Creates a connection to Network Virtual Appliance, if it doesn't exist else
            /// updates the existing NVA connection'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='networkVirtualApplianceConnectionParameters'>
            /// Parameters supplied in an NetworkVirtualApplianceConnection PUT operation.
            /// </param>
            public static NetworkVirtualApplianceConnection CreateOrUpdate(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a connection to Network Virtual Appliance, if it doesn't exist else
            /// updates the existing NVA connection'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='networkVirtualApplianceConnectionParameters'>
            /// Parameters supplied in an NetworkVirtualApplianceConnection PUT operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceConnection> CreateOrUpdateAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Retrieves the details of specified NVA connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            public static NetworkVirtualApplianceConnection Get(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName)
            {
                return operations.GetAsync(resourceGroupName, networkVirtualApplianceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the details of specified NVA connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceConnection> GetAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a NVA connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            public static NetworkVirtualApplianceConnectionsDeleteHeaders Delete(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName)
            {
                return operations.DeleteAsync(resourceGroupName, networkVirtualApplianceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a NVA connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceConnectionsDeleteHeaders> DeleteAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists NetworkVirtualApplianceConnections under the NVA.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            public static IPage<NetworkVirtualApplianceConnection> List(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName)
            {
                return operations.ListAsync(resourceGroupName, networkVirtualApplianceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists NetworkVirtualApplianceConnections under the NVA.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkVirtualApplianceConnection>> ListAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a connection to Network Virtual Appliance, if it doesn't exist else
            /// updates the existing NVA connection'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='networkVirtualApplianceConnectionParameters'>
            /// Parameters supplied in an NetworkVirtualApplianceConnection PUT operation.
            /// </param>
            public static NetworkVirtualApplianceConnection BeginCreateOrUpdate(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a connection to Network Virtual Appliance, if it doesn't exist else
            /// updates the existing NVA connection'
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='networkVirtualApplianceConnectionParameters'>
            /// Parameters supplied in an NetworkVirtualApplianceConnection PUT operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceConnection> BeginCreateOrUpdateAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a NVA connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            public static NetworkVirtualApplianceConnectionsDeleteHeaders BeginDelete(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName)
            {
                return operations.BeginDeleteAsync(resourceGroupName, networkVirtualApplianceName, connectionName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a NVA connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The name of the resource group.
            /// </param>
            /// <param name='networkVirtualApplianceName'>
            /// The name of the Network Virtual Appliance.
            /// </param>
            /// <param name='connectionName'>
            /// The name of the NVA connection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<NetworkVirtualApplianceConnectionsDeleteHeaders> BeginDeleteAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Lists NetworkVirtualApplianceConnections under the NVA.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<NetworkVirtualApplianceConnection> ListNext(this INetworkVirtualApplianceConnectionsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists NetworkVirtualApplianceConnections under the NVA.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<NetworkVirtualApplianceConnection>> ListNextAsync(this INetworkVirtualApplianceConnectionsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
