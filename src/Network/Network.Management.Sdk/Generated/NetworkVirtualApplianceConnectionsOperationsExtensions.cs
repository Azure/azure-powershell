// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for NetworkVirtualApplianceConnectionsOperations
    /// </summary>
    public static partial class NetworkVirtualApplianceConnectionsOperationsExtensions
    {
        /// <summary>
        /// Creates a connection to Network Virtual Appliance, if it doesn&#39;t exist else
        /// updates the existing NVA connection&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        public static NetworkVirtualApplianceConnection CreateOrUpdate(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).CreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a connection to Network Virtual Appliance, if it doesn&#39;t exist else
        /// updates the existing NVA connection&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkVirtualApplianceConnection> CreateOrUpdateAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves the details of specified NVA connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        public static NetworkVirtualApplianceConnection Get(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).GetAsync(resourceGroupName, networkVirtualApplianceName, connectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the details of specified NVA connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkVirtualApplianceConnection> GetAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a NVA connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        public static NetworkVirtualApplianceConnectionsDeleteHeaders Delete(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).DeleteAsync(resourceGroupName, networkVirtualApplianceName, connectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a NVA connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkVirtualApplianceConnectionsDeleteHeaders> DeleteAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists NetworkVirtualApplianceConnections under the NVA.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<NetworkVirtualApplianceConnection> List(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).ListAsync(resourceGroupName, networkVirtualApplianceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists NetworkVirtualApplianceConnections under the NVA.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<NetworkVirtualApplianceConnection>> ListAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a connection to Network Virtual Appliance, if it doesn&#39;t exist else
        /// updates the existing NVA connection&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        public static NetworkVirtualApplianceConnection BeginCreateOrUpdate(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a connection to Network Virtual Appliance, if it doesn&#39;t exist else
        /// updates the existing NVA connection&#39;
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkVirtualApplianceConnection> BeginCreateOrUpdateAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, NetworkVirtualApplianceConnection networkVirtualApplianceConnectionParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, networkVirtualApplianceConnectionParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a NVA connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        public static NetworkVirtualApplianceConnectionsDeleteHeaders BeginDelete(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).BeginDeleteAsync(resourceGroupName, networkVirtualApplianceName, connectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a NVA connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='connectionName'>
        /// The name of the NVA connection.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkVirtualApplianceConnectionsDeleteHeaders> BeginDeleteAsync(this INetworkVirtualApplianceConnectionsOperations operations, string resourceGroupName, string networkVirtualApplianceName, string connectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, connectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists NetworkVirtualApplianceConnections under the NVA.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<NetworkVirtualApplianceConnection> ListNext(this INetworkVirtualApplianceConnectionsOperations operations, string nextPageLink)
        {
                return ((INetworkVirtualApplianceConnectionsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists NetworkVirtualApplianceConnections under the NVA.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<NetworkVirtualApplianceConnection>> ListNextAsync(this INetworkVirtualApplianceConnectionsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
