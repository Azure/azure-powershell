// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualHubsOperations.
    /// </summary>
    public static partial class VirtualHubsOperationsExtensions
    {
            /// <summary>
            /// Retrieves the details of a VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            public static VirtualHub Get(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName)
            {
                return operations.GetAsync(resourceGroupName, virtualHubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Retrieves the details of a VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualHub> GetAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualHubName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates a VirtualHub resource if it doesn't exist else updates the existing
            /// VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubParameters'>
            /// Parameters supplied to create or update VirtualHub.
            /// </param>
            public static VirtualHub CreateOrUpdate(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, VirtualHub virtualHubParameters)
            {
                return operations.CreateOrUpdateAsync(resourceGroupName, virtualHubName, virtualHubParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a VirtualHub resource if it doesn't exist else updates the existing
            /// VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubParameters'>
            /// Parameters supplied to create or update VirtualHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualHub> CreateOrUpdateAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, VirtualHub virtualHubParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualHubName, virtualHubParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates VirtualHub tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            public static VirtualHub UpdateTags(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, IDictionary<string, string> tags = default(IDictionary<string, string>))
            {
                return operations.UpdateTagsAsync(resourceGroupName, virtualHubName, tags).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates VirtualHub tags.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='tags'>
            /// Resource tags.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualHub> UpdateTagsAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, IDictionary<string, string> tags = default(IDictionary<string, string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateTagsWithHttpMessagesAsync(resourceGroupName, virtualHubName, tags, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            public static void Delete(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName)
            {
                operations.DeleteAsync(resourceGroupName, virtualHubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task DeleteAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualHubName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the VirtualHubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            public static IPage<VirtualHub> ListByResourceGroup(this IVirtualHubsOperations operations, string resourceGroupName)
            {
                return operations.ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the VirtualHubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualHub>> ListByResourceGroupAsync(this IVirtualHubsOperations operations, string resourceGroupName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the VirtualHubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IPage<VirtualHub> List(this IVirtualHubsOperations operations)
            {
                return operations.ListAsync().GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the VirtualHubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualHub>> ListAsync(this IVirtualHubsOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the effective routes configured for the Virtual Hub resource or the
            /// specified resource .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceId'>
            /// The resource whose effective routes are being requested.
            /// </param>
            /// <param name='virtualWanResourceType'>
            /// The type of the specified resource like RouteTable, ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            public static void GetEffectiveVirtualHubRoutes(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceId = default(string), string virtualWanResourceType = default(string))
            {
                operations.GetEffectiveVirtualHubRoutesAsync(resourceGroupName, virtualHubName, resourceId, virtualWanResourceType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the effective routes configured for the Virtual Hub resource or the
            /// specified resource .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceId'>
            /// The resource whose effective routes are being requested.
            /// </param>
            /// <param name='virtualWanResourceType'>
            /// The type of the specified resource like RouteTable, ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetEffectiveVirtualHubRoutesAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceId = default(string), string virtualWanResourceType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetEffectiveVirtualHubRoutesWithHttpMessagesAsync(resourceGroupName, virtualHubName, resourceId, virtualWanResourceType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the inbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose inbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            public static void GetInboundRoutes(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string))
            {
                operations.GetInboundRoutesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the inbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose inbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetInboundRoutesAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetInboundRoutesWithHttpMessagesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the outbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose outbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            public static void GetOutboundRoutes(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string))
            {
                operations.GetOutboundRoutesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the outbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose outbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task GetOutboundRoutesAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.GetOutboundRoutesWithHttpMessagesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Creates a VirtualHub resource if it doesn't exist else updates the existing
            /// VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubParameters'>
            /// Parameters supplied to create or update VirtualHub.
            /// </param>
            public static VirtualHub BeginCreateOrUpdate(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, VirtualHub virtualHubParameters)
            {
                return operations.BeginCreateOrUpdateAsync(resourceGroupName, virtualHubName, virtualHubParameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Creates a VirtualHub resource if it doesn't exist else updates the existing
            /// VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubParameters'>
            /// Parameters supplied to create or update VirtualHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VirtualHub> BeginCreateOrUpdateAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, VirtualHub virtualHubParameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualHubName, virtualHubParameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Deletes a VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            public static void BeginDelete(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName)
            {
                operations.BeginDeleteAsync(resourceGroupName, virtualHubName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Deletes a VirtualHub.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginDeleteAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualHubName, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the effective routes configured for the Virtual Hub resource or the
            /// specified resource .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceId'>
            /// The resource whose effective routes are being requested.
            /// </param>
            /// <param name='virtualWanResourceType'>
            /// The type of the specified resource like RouteTable, ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            public static void BeginGetEffectiveVirtualHubRoutes(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceId = default(string), string virtualWanResourceType = default(string))
            {
                operations.BeginGetEffectiveVirtualHubRoutesAsync(resourceGroupName, virtualHubName, resourceId, virtualWanResourceType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the effective routes configured for the Virtual Hub resource or the
            /// specified resource .
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceId'>
            /// The resource whose effective routes are being requested.
            /// </param>
            /// <param name='virtualWanResourceType'>
            /// The type of the specified resource like RouteTable, ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginGetEffectiveVirtualHubRoutesAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceId = default(string), string virtualWanResourceType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginGetEffectiveVirtualHubRoutesWithHttpMessagesAsync(resourceGroupName, virtualHubName, resourceId, virtualWanResourceType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the inbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose inbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            public static void BeginGetInboundRoutes(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string))
            {
                operations.BeginGetInboundRoutesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the inbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose inbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginGetInboundRoutesAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginGetInboundRoutesWithHttpMessagesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Gets the outbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose outbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            public static void BeginGetOutboundRoutes(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string))
            {
                operations.BeginGetOutboundRoutesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the outbound routes configured for the Virtual Hub on a particular
            /// connection.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// The resource group name of the VirtualHub.
            /// </param>
            /// <param name='virtualHubName'>
            /// The name of the VirtualHub.
            /// </param>
            /// <param name='resourceUri'>
            /// The connection resource whose outbound routes are being requested.
            /// </param>
            /// <param name='connectionType'>
            /// The type of the specified connection resource like ExpressRouteConnection,
            /// HubVirtualNetworkConnection, VpnConnection and P2SConnection.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task BeginGetOutboundRoutesAsync(this IVirtualHubsOperations operations, string resourceGroupName, string virtualHubName, string resourceUri = default(string), string connectionType = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.BeginGetOutboundRoutesWithHttpMessagesAsync(resourceGroupName, virtualHubName, resourceUri, connectionType, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <summary>
            /// Lists all the VirtualHubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualHub> ListByResourceGroupNext(this IVirtualHubsOperations operations, string nextPageLink)
            {
                return operations.ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the VirtualHubs in a resource group.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualHub>> ListByResourceGroupNextAsync(this IVirtualHubsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Lists all the VirtualHubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<VirtualHub> ListNext(this IVirtualHubsOperations operations, string nextPageLink)
            {
                return operations.ListNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Lists all the VirtualHubs in a subscription.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<VirtualHub>> ListNextAsync(this IVirtualHubsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
