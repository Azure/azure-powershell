// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for NetworkManagementClient
    /// </summary>
    public static partial class NetworkManagementClientExtensions
    {
        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionShareableLink> PutBastionShareableLink(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest)
        {
                return ((INetworkManagementClient)operations).PutBastionShareableLinkAsync(resourceGroupName, bastionHostName, bslRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionShareableLink>> PutBastionShareableLinkAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutBastionShareableLinkWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslRequest, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static void DeleteBastionShareableLink(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest)
        {
                ((INetworkManagementClient)operations).DeleteBastionShareableLinkAsync(resourceGroupName, bastionHostName, bslRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteBastionShareableLinkAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteBastionShareableLinkWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Deletes the Bastion Shareable Links for all the tokens specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static DeleteBastionShareableLinkByTokenHeaders DeleteBastionShareableLinkByToken(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkTokenListRequest bslTokenRequest)
        {
                return ((INetworkManagementClient)operations).DeleteBastionShareableLinkByTokenAsync(resourceGroupName, bastionHostName, bslTokenRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the Bastion Shareable Links for all the tokens specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeleteBastionShareableLinkByTokenHeaders> DeleteBastionShareableLinkByTokenAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkTokenListRequest bslTokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteBastionShareableLinkByTokenWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslTokenRequest, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Return the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionShareableLink> GetBastionShareableLink(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest)
        {
                return ((INetworkManagementClient)operations).GetBastionShareableLinkAsync(resourceGroupName, bastionHostName, bslRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionShareableLink>> GetBastionShareableLinkAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBastionShareableLinkWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslRequest, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionActiveSession> GetActiveSessions(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName)
        {
                return ((INetworkManagementClient)operations).GetActiveSessionsAsync(resourceGroupName, bastionHostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionActiveSession>> GetActiveSessionsAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetActiveSessionsWithHttpMessagesAsync(resourceGroupName, bastionHostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionSessionState> DisconnectActiveSessions(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, SessionIds sessionIds)
        {
                return ((INetworkManagementClient)operations).DisconnectActiveSessionsAsync(resourceGroupName, bastionHostName, sessionIds).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionSessionState>> DisconnectActiveSessionsAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, SessionIds sessionIds, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DisconnectActiveSessionsWithHttpMessagesAsync(resourceGroupName, bastionHostName, sessionIds, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Checks whether a domain name in the cloudapp.azure.com zone is available
        /// for use.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location of the domain name.
        /// </param>
        /// <param name='domainNameLabel'>
        /// The domain name to be verified. It must conform to the following regular
        /// expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
        /// </param>
        public static DnsNameAvailabilityResult CheckDnsNameAvailability(this INetworkManagementClient operations, string location, string domainNameLabel)
        {
                return ((INetworkManagementClient)operations).CheckDnsNameAvailabilityAsync(location, domainNameLabel).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Checks whether a domain name in the cloudapp.azure.com zone is available
        /// for use.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='location'>
        /// The location of the domain name.
        /// </param>
        /// <param name='domainNameLabel'>
        /// The domain name to be verified. It must conform to the following regular
        /// expression: ^[a-z][a-z0-9-]{1,61}[a-z0-9]$.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DnsNameAvailabilityResult> CheckDnsNameAvailabilityAsync(this INetworkManagementClient operations, string location, string domainNameLabel, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CheckDnsNameAvailabilityWithHttpMessagesAsync(location, domainNameLabel, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves detail of a provider port.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerport'>
        /// The name of the provider port.
        /// </param>
        public static ExpressRouteProviderPort ExpressRouteProviderPort(this INetworkManagementClient operations, string providerport)
        {
                return ((INetworkManagementClient)operations).ExpressRouteProviderPortAsync(providerport).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves detail of a provider port.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='providerport'>
        /// The name of the provider port.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteProviderPort> ExpressRouteProviderPortAsync(this INetworkManagementClient operations, string providerport, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ExpressRouteProviderPortWithHttpMessagesAsync(providerport, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists active connectivity configurations in a network manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        public static ActiveConnectivityConfigurationsListResult ListActiveConnectivityConfigurations(this INetworkManagementClient operations, string resourceGroupName, string networkManagerName, ActiveConfigurationParameter parameters, int? top = default(int?))
        {
                return ((INetworkManagementClient)operations).ListActiveConnectivityConfigurationsAsync(resourceGroupName, networkManagerName, parameters, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists active connectivity configurations in a network manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ActiveConnectivityConfigurationsListResult> ListActiveConnectivityConfigurationsAsync(this INetworkManagementClient operations, string resourceGroupName, string networkManagerName, ActiveConfigurationParameter parameters, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListActiveConnectivityConfigurationsWithHttpMessagesAsync(resourceGroupName, networkManagerName, parameters, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists active security admin rules in a network manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        public static ActiveSecurityAdminRulesListResult ListActiveSecurityAdminRules(this INetworkManagementClient operations, string resourceGroupName, string networkManagerName, ActiveConfigurationParameter parameters, int? top = default(int?))
        {
                return ((INetworkManagementClient)operations).ListActiveSecurityAdminRulesAsync(resourceGroupName, networkManagerName, parameters, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists active security admin rules in a network manager.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ActiveSecurityAdminRulesListResult> ListActiveSecurityAdminRulesAsync(this INetworkManagementClient operations, string resourceGroupName, string networkManagerName, ActiveConfigurationParameter parameters, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListActiveSecurityAdminRulesWithHttpMessagesAsync(resourceGroupName, networkManagerName, parameters, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all effective connectivity configurations applied on a virtual
        /// network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        public static NetworkManagerEffectiveConnectivityConfigurationListResult ListNetworkManagerEffectiveConnectivityConfigurations(this INetworkManagementClient operations, string resourceGroupName, string virtualNetworkName, QueryRequestOptions parameters, int? top = default(int?))
        {
                return ((INetworkManagementClient)operations).ListNetworkManagerEffectiveConnectivityConfigurationsAsync(resourceGroupName, virtualNetworkName, parameters, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all effective connectivity configurations applied on a virtual
        /// network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkManagerEffectiveConnectivityConfigurationListResult> ListNetworkManagerEffectiveConnectivityConfigurationsAsync(this INetworkManagementClient operations, string resourceGroupName, string virtualNetworkName, QueryRequestOptions parameters, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNetworkManagerEffectiveConnectivityConfigurationsWithHttpMessagesAsync(resourceGroupName, virtualNetworkName, parameters, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// List all effective security admin rules applied on a virtual network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        public static NetworkManagerEffectiveSecurityAdminRulesListResult ListNetworkManagerEffectiveSecurityAdminRules(this INetworkManagementClient operations, string resourceGroupName, string virtualNetworkName, QueryRequestOptions parameters, int? top = default(int?))
        {
                return ((INetworkManagementClient)operations).ListNetworkManagerEffectiveSecurityAdminRulesAsync(resourceGroupName, virtualNetworkName, parameters, top).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all effective security admin rules applied on a virtual network.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='virtualNetworkName'>
        /// The name of the virtual network.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkManagerEffectiveSecurityAdminRulesListResult> ListNetworkManagerEffectiveSecurityAdminRulesAsync(this INetworkManagementClient operations, string resourceGroupName, string virtualNetworkName, QueryRequestOptions parameters, int? top = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNetworkManagerEffectiveSecurityAdminRulesWithHttpMessagesAsync(resourceGroupName, virtualNetworkName, parameters, top, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gives the supported security providers for the virtual wan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='virtualWANName'>
        /// The name of the VirtualWAN for which supported security providers are
        /// needed.
        /// </param>
        public static VirtualWanSecurityProviders SupportedSecurityProviders(this INetworkManagementClient operations, string resourceGroupName, string virtualWANName)
        {
                return ((INetworkManagementClient)operations).SupportedSecurityProvidersAsync(resourceGroupName, virtualWANName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gives the supported security providers for the virtual wan.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='virtualWANName'>
        /// The name of the VirtualWAN for which supported security providers are
        /// needed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualWanSecurityProviders> SupportedSecurityProvidersAsync(this INetworkManagementClient operations, string resourceGroupName, string virtualWANName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.SupportedSecurityProvidersWithHttpMessagesAsync(resourceGroupName, virtualWANName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Generates a unique VPN profile for P2S clients for VirtualWan and
        /// associated VpnServerConfiguration combination in the specified resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='virtualWANName'>
        /// The name of the VirtualWAN whose associated VpnServerConfigurations is
        /// needed.
        /// </param>
        public static VpnProfileResponse Generatevirtualwanvpnserverconfigurationvpnprofile(this INetworkManagementClient operations, string resourceGroupName, string virtualWANName, VirtualWanVpnProfileParameters vpnClientParams)
        {
                return ((INetworkManagementClient)operations).GeneratevirtualwanvpnserverconfigurationvpnprofileAsync(resourceGroupName, virtualWANName, vpnClientParams).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Generates a unique VPN profile for P2S clients for VirtualWan and
        /// associated VpnServerConfiguration combination in the specified resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='virtualWANName'>
        /// The name of the VirtualWAN whose associated VpnServerConfigurations is
        /// needed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VpnProfileResponse> GeneratevirtualwanvpnserverconfigurationvpnprofileAsync(this INetworkManagementClient operations, string resourceGroupName, string virtualWANName, VirtualWanVpnProfileParameters vpnClientParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GeneratevirtualwanvpnserverconfigurationvpnprofileWithHttpMessagesAsync(resourceGroupName, virtualWANName, vpnClientParams, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionShareableLink> BeginPutBastionShareableLink(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest)
        {
                return ((INetworkManagementClient)operations).BeginPutBastionShareableLinkAsync(resourceGroupName, bastionHostName, bslRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionShareableLink>> BeginPutBastionShareableLinkAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginPutBastionShareableLinkWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslRequest, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static void BeginDeleteBastionShareableLink(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest)
        {
                ((INetworkManagementClient)operations).BeginDeleteBastionShareableLinkAsync(resourceGroupName, bastionHostName, bslRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteBastionShareableLinkAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkListRequest bslRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteBastionShareableLinkWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslRequest, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Deletes the Bastion Shareable Links for all the tokens specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static DeleteBastionShareableLinkByTokenHeaders BeginDeleteBastionShareableLinkByToken(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkTokenListRequest bslTokenRequest)
        {
                return ((INetworkManagementClient)operations).BeginDeleteBastionShareableLinkByTokenAsync(resourceGroupName, bastionHostName, bslTokenRequest).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the Bastion Shareable Links for all the tokens specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<DeleteBastionShareableLinkByTokenHeaders> BeginDeleteBastionShareableLinkByTokenAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, BastionShareableLinkTokenListRequest bslTokenRequest, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteBastionShareableLinkByTokenWithHttpMessagesAsync(resourceGroupName, bastionHostName, bslTokenRequest, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionActiveSession> BeginGetActiveSessions(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName)
        {
                return ((INetworkManagementClient)operations).BeginGetActiveSessionsAsync(resourceGroupName, bastionHostName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='bastionHostName'>
        /// The name of the Bastion Host.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionActiveSession>> BeginGetActiveSessionsAsync(this INetworkManagementClient operations, string resourceGroupName, string bastionHostName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginGetActiveSessionsWithHttpMessagesAsync(resourceGroupName, bastionHostName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Generates a unique VPN profile for P2S clients for VirtualWan and
        /// associated VpnServerConfiguration combination in the specified resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='virtualWANName'>
        /// The name of the VirtualWAN whose associated VpnServerConfigurations is
        /// needed.
        /// </param>
        public static VpnProfileResponse BeginGeneratevirtualwanvpnserverconfigurationvpnprofile(this INetworkManagementClient operations, string resourceGroupName, string virtualWANName, VirtualWanVpnProfileParameters vpnClientParams)
        {
                return ((INetworkManagementClient)operations).BeginGeneratevirtualwanvpnserverconfigurationvpnprofileAsync(resourceGroupName, virtualWANName, vpnClientParams).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Generates a unique VPN profile for P2S clients for VirtualWan and
        /// associated VpnServerConfiguration combination in the specified resource
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='virtualWANName'>
        /// The name of the VirtualWAN whose associated VpnServerConfigurations is
        /// needed.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VpnProfileResponse> BeginGeneratevirtualwanvpnserverconfigurationvpnprofileAsync(this INetworkManagementClient operations, string resourceGroupName, string virtualWANName, VirtualWanVpnProfileParameters vpnClientParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginGeneratevirtualwanvpnserverconfigurationvpnprofileWithHttpMessagesAsync(resourceGroupName, virtualWANName, vpnClientParams, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionShareableLink> PutBastionShareableLinkNext(this INetworkManagementClient operations, string nextPageLink)
        {
                return ((INetworkManagementClient)operations).PutBastionShareableLinkNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionShareableLink>> PutBastionShareableLinkNextAsync(this INetworkManagementClient operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutBastionShareableLinkNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Return the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionShareableLink> GetBastionShareableLinkNext(this INetworkManagementClient operations, string nextPageLink)
        {
                return ((INetworkManagementClient)operations).GetBastionShareableLinkNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Return the Bastion Shareable Links for all the VMs specified in the
        /// request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionShareableLink>> GetBastionShareableLinkNextAsync(this INetworkManagementClient operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetBastionShareableLinkNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionActiveSession> GetActiveSessionsNext(this INetworkManagementClient operations, string nextPageLink)
        {
                return ((INetworkManagementClient)operations).GetActiveSessionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionActiveSession>> GetActiveSessionsNextAsync(this INetworkManagementClient operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetActiveSessionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionSessionState> DisconnectActiveSessionsNext(this INetworkManagementClient operations, string nextPageLink)
        {
                return ((INetworkManagementClient)operations).DisconnectActiveSessionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionSessionState>> DisconnectActiveSessionsNextAsync(this INetworkManagementClient operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DisconnectActiveSessionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionShareableLink> BeginPutBastionShareableLinkNext(this INetworkManagementClient operations, string nextPageLink)
        {
                return ((INetworkManagementClient)operations).BeginPutBastionShareableLinkNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a Bastion Shareable Links for all the VMs specified in the request.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionShareableLink>> BeginPutBastionShareableLinkNextAsync(this INetworkManagementClient operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginPutBastionShareableLinkNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BastionActiveSession> BeginGetActiveSessionsNext(this INetworkManagementClient operations, string nextPageLink)
        {
                return ((INetworkManagementClient)operations).BeginGetActiveSessionsNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the list of currently active sessions on the Bastion.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BastionActiveSession>> BeginGetActiveSessionsNextAsync(this INetworkManagementClient operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginGetActiveSessionsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
