// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for NetworkManagerRoutingConfigurationsOperations
    /// </summary>
    public static partial class NetworkManagerRoutingConfigurationsOperationsExtensions
    {
        /// <summary>
        /// Lists all the network manager routing configurations in a network manager,
        /// in a paginated format.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        /// <param name='skipToken'>
        /// SkipToken is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the
        /// nextLink element will include a skipToken parameter that specifies a
        /// starting point to use for subsequent calls.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<NetworkManagerRoutingConfiguration> List(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, int? top = default(int?), string skipToken = default(string))
        {
                return ((INetworkManagerRoutingConfigurationsOperations)operations).ListAsync(resourceGroupName, networkManagerName, top, skipToken).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the network manager routing configurations in a network manager,
        /// in a paginated format.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='top'>
        /// An optional query parameter which specifies the maximum number of records
        /// to be returned by the server.
        /// </param>
        /// <param name='skipToken'>
        /// SkipToken is only used if a previous operation returned a partial result.
        /// If a previous response contains a nextLink element, the value of the
        /// nextLink element will include a skipToken parameter that specifies a
        /// starting point to use for subsequent calls.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<NetworkManagerRoutingConfiguration>> ListAsync(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, int? top = default(int?), string skipToken = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkManagerName, top, skipToken, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieves a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        public static NetworkManagerRoutingConfiguration Get(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName)
        {
                return ((INetworkManagerRoutingConfigurationsOperations)operations).GetAsync(resourceGroupName, networkManagerName, configurationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkManagerRoutingConfiguration> GetAsync(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        public static NetworkManagerRoutingConfiguration CreateOrUpdate(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, NetworkManagerRoutingConfiguration routingConfiguration)
        {
                return ((INetworkManagerRoutingConfigurationsOperations)operations).CreateOrUpdateAsync(resourceGroupName, networkManagerName, configurationName, routingConfiguration).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkManagerRoutingConfiguration> CreateOrUpdateAsync(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, NetworkManagerRoutingConfiguration routingConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, routingConfiguration, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        /// <param name='force'>
        /// Deletes the resource even if it is part of a deployed configuration. If the
        /// configuration has been deployed, the service will do a cleanup deployment
        /// in the background, prior to the delete.
        /// </param>
        public static NetworkManagerRoutingConfigurationsDeleteHeaders Delete(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, bool? force = default(bool?))
        {
                return ((INetworkManagerRoutingConfigurationsOperations)operations).DeleteAsync(resourceGroupName, networkManagerName, configurationName, force).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        /// <param name='force'>
        /// Deletes the resource even if it is part of a deployed configuration. If the
        /// configuration has been deployed, the service will do a cleanup deployment
        /// in the background, prior to the delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkManagerRoutingConfigurationsDeleteHeaders> DeleteAsync(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, bool? force = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, force, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Deletes a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        /// <param name='force'>
        /// Deletes the resource even if it is part of a deployed configuration. If the
        /// configuration has been deployed, the service will do a cleanup deployment
        /// in the background, prior to the delete.
        /// </param>
        public static NetworkManagerRoutingConfigurationsDeleteHeaders BeginDelete(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, bool? force = default(bool?))
        {
                return ((INetworkManagerRoutingConfigurationsOperations)operations).BeginDeleteAsync(resourceGroupName, networkManagerName, configurationName, force).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a network manager routing configuration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='networkManagerName'>
        /// The name of the network manager.
        /// </param>
        /// <param name='configurationName'>
        /// The name of the network manager Routing Configuration.
        /// </param>
        /// <param name='force'>
        /// Deletes the resource even if it is part of a deployed configuration. If the
        /// configuration has been deployed, the service will do a cleanup deployment
        /// in the background, prior to the delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<NetworkManagerRoutingConfigurationsDeleteHeaders> BeginDeleteAsync(this INetworkManagerRoutingConfigurationsOperations operations, string resourceGroupName, string networkManagerName, string configurationName, bool? force = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkManagerName, configurationName, force, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists all the network manager routing configurations in a network manager,
        /// in a paginated format.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<NetworkManagerRoutingConfiguration> ListNext(this INetworkManagerRoutingConfigurationsOperations operations, string nextPageLink)
        {
                return ((INetworkManagerRoutingConfigurationsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the network manager routing configurations in a network manager,
        /// in a paginated format.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<NetworkManagerRoutingConfiguration>> ListNextAsync(this INetworkManagerRoutingConfigurationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
