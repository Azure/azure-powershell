// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VipSwapOperations
    /// </summary>
    public static partial class VipSwapOperationsExtensions
    {
        /// <summary>
        /// Gets the SwapResource which identifies the slot type for the specified
        /// cloud service. The slot type on a cloud service can either be Staging or
        /// Production
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        public static SwapResource Get(this IVipSwapOperations operations, string groupName, string resourceName)
        {
                return ((IVipSwapOperations)operations).GetAsync(groupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the SwapResource which identifies the slot type for the specified
        /// cloud service. The slot type on a cloud service can either be Staging or
        /// Production
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwapResource> GetAsync(this IVipSwapOperations operations, string groupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(groupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Performs vip swap operation on swappable cloud services.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        public static void Create(this IVipSwapOperations operations, string groupName, string resourceName, SwapResource parameters)
        {
                ((IVipSwapOperations)operations).CreateAsync(groupName, resourceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Performs vip swap operation on swappable cloud services.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task CreateAsync(this IVipSwapOperations operations, string groupName, string resourceName, SwapResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.CreateWithHttpMessagesAsync(groupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the list of SwapResource which identifies the slot type for the
        /// specified cloud service. The slot type on a cloud service can either be
        /// Staging or Production
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        public static SwapResourceListResult List(this IVipSwapOperations operations, string groupName, string resourceName)
        {
                return ((IVipSwapOperations)operations).ListAsync(groupName, resourceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the list of SwapResource which identifies the slot type for the
        /// specified cloud service. The slot type on a cloud service can either be
        /// Staging or Production
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SwapResourceListResult> ListAsync(this IVipSwapOperations operations, string groupName, string resourceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(groupName, resourceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Performs vip swap operation on swappable cloud services.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        public static void BeginCreate(this IVipSwapOperations operations, string groupName, string resourceName, SwapResource parameters)
        {
                ((IVipSwapOperations)operations).BeginCreateAsync(groupName, resourceName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Performs vip swap operation on swappable cloud services.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='groupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='resourceName'>
        /// The name of the cloud service.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginCreateAsync(this IVipSwapOperations operations, string groupName, string resourceName, SwapResource parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginCreateWithHttpMessagesAsync(groupName, resourceName, parameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
