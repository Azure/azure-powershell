// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for FirewallPolicyIdpsSignaturesOverridesOperations
    /// </summary>
    public static partial class FirewallPolicyIdpsSignaturesOverridesOperationsExtensions
    {
        /// <summary>
        /// Will update the status of policy&#39;s signature overrides for IDPS
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        public static SignaturesOverrides Patch(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, SignaturesOverrides parameters)
        {
                return ((IFirewallPolicyIdpsSignaturesOverridesOperations)operations).PatchAsync(resourceGroupName, firewallPolicyName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Will update the status of policy&#39;s signature overrides for IDPS
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SignaturesOverrides> PatchAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, SignaturesOverrides parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PatchWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Will override/create a new signature overrides for the policy&#39;s IDPS
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        public static SignaturesOverrides Put(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, SignaturesOverrides parameters)
        {
                return ((IFirewallPolicyIdpsSignaturesOverridesOperations)operations).PutAsync(resourceGroupName, firewallPolicyName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Will override/create a new signature overrides for the policy&#39;s IDPS
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SignaturesOverrides> PutAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, SignaturesOverrides parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.PutWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns all signatures overrides for a specific policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        public static SignaturesOverrides Get(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName)
        {
                return ((IFirewallPolicyIdpsSignaturesOverridesOperations)operations).GetAsync(resourceGroupName, firewallPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns all signatures overrides for a specific policy.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SignaturesOverrides> GetAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns all signatures overrides objects for a specific policy as a list
        /// containing a single value.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        public static SignaturesOverridesList List(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName)
        {
                return ((IFirewallPolicyIdpsSignaturesOverridesOperations)operations).ListAsync(resourceGroupName, firewallPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns all signatures overrides objects for a specific policy as a list
        /// containing a single value.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='firewallPolicyName'>
        /// The name of the Firewall Policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SignaturesOverridesList> ListAsync(this IFirewallPolicyIdpsSignaturesOverridesOperations operations, string resourceGroupName, string firewallPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, firewallPolicyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
