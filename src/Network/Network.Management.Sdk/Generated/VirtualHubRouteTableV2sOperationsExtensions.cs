// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VirtualHubRouteTableV2SOperations
    /// </summary>
    public static partial class VirtualHubRouteTableV2SOperationsExtensions
    {
        /// <summary>
        /// Retrieves the details of a VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        public static VirtualHubRouteTableV2 Get(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName)
        {
                return ((IVirtualHubRouteTableV2SOperations)operations).GetAsync(resourceGroupName, virtualHubName, routeTableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the details of a VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualHubRouteTableV2> GetAsync(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, virtualHubName, routeTableName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a VirtualHubRouteTableV2 resource if it doesn&#39;t exist else updates
        /// the existing VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHub.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        public static VirtualHubRouteTableV2 CreateOrUpdate(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters)
        {
                return ((IVirtualHubRouteTableV2SOperations)operations).CreateOrUpdateAsync(resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a VirtualHubRouteTableV2 resource if it doesn&#39;t exist else updates
        /// the existing VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHub.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualHubRouteTableV2> CreateOrUpdateAsync(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        public static void Delete(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName)
        {
                ((IVirtualHubRouteTableV2SOperations)operations).DeleteAsync(resourceGroupName, virtualHubName, routeTableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, virtualHubName, routeTableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves the details of all VirtualHubRouteTableV2s.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHub.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VirtualHubRouteTableV2> List(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName)
        {
                return ((IVirtualHubRouteTableV2SOperations)operations).ListAsync(resourceGroupName, virtualHubName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the details of all VirtualHubRouteTableV2s.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHub.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VirtualHubRouteTableV2>> ListAsync(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, virtualHubName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a VirtualHubRouteTableV2 resource if it doesn&#39;t exist else updates
        /// the existing VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHub.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        public static VirtualHubRouteTableV2 BeginCreateOrUpdate(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters)
        {
                return ((IVirtualHubRouteTableV2SOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a VirtualHubRouteTableV2 resource if it doesn&#39;t exist else updates
        /// the existing VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHub.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualHubRouteTableV2> BeginCreateOrUpdateAsync(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, VirtualHubRouteTableV2 virtualHubRouteTableV2Parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, virtualHubName, routeTableName, virtualHubRouteTableV2Parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        public static void BeginDelete(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName)
        {
                ((IVirtualHubRouteTableV2SOperations)operations).BeginDeleteAsync(resourceGroupName, virtualHubName, routeTableName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a VirtualHubRouteTableV2.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='virtualHubName'>
        /// The name of the VirtualHub.
        /// </param>
        /// <param name='routeTableName'>
        /// The name of the VirtualHubRouteTableV2.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IVirtualHubRouteTableV2SOperations operations, string resourceGroupName, string virtualHubName, string routeTableName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, virtualHubName, routeTableName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves the details of all VirtualHubRouteTableV2s.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VirtualHubRouteTableV2> ListNext(this IVirtualHubRouteTableV2SOperations operations, string nextPageLink)
        {
                return ((IVirtualHubRouteTableV2SOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the details of all VirtualHubRouteTableV2s.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VirtualHubRouteTableV2>> ListNextAsync(this IVirtualHubRouteTableV2SOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
