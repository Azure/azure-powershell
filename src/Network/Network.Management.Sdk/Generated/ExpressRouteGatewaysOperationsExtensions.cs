// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ExpressRouteGatewaysOperations
    /// </summary>
    public static partial class ExpressRouteGatewaysOperationsExtensions
    {
        /// <summary>
        /// Lists ExpressRoute gateways under a given subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static ExpressRouteGatewayList ListBySubscription(this IExpressRouteGatewaysOperations operations)
        {
                return ((IExpressRouteGatewaysOperations)operations).ListBySubscriptionAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists ExpressRoute gateways under a given subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGatewayList> ListBySubscriptionAsync(this IExpressRouteGatewaysOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListBySubscriptionWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists ExpressRoute gateways in a given resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        public static ExpressRouteGatewayList ListByResourceGroup(this IExpressRouteGatewaysOperations operations, string resourceGroupName)
        {
                return ((IExpressRouteGatewaysOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists ExpressRoute gateways in a given resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGatewayList> ListByResourceGroupAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates a ExpressRoute gateway in a specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        public static ExpressRouteGateway CreateOrUpdate(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, ExpressRouteGateway putExpressRouteGatewayParameters)
        {
                return ((IExpressRouteGatewaysOperations)operations).CreateOrUpdateAsync(resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a ExpressRoute gateway in a specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGateway> CreateOrUpdateAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, ExpressRouteGateway putExpressRouteGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates express route gateway tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ExpressRouteGateway.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the gateway.
        /// </param>
        public static ExpressRouteGateway UpdateTags(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, TagsObject expressRouteGatewayParameters)
        {
                return ((IExpressRouteGatewaysOperations)operations).UpdateTagsAsync(resourceGroupName, expressRouteGatewayName, expressRouteGatewayParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates express route gateway tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ExpressRouteGateway.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGateway> UpdateTagsAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, TagsObject expressRouteGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateTagsWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, expressRouteGatewayParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Fetches the details of a ExpressRoute gateway in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        public static ExpressRouteGateway Get(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName)
        {
                return ((IExpressRouteGatewaysOperations)operations).GetAsync(resourceGroupName, expressRouteGatewayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Fetches the details of a ExpressRoute gateway in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGateway> GetAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified ExpressRoute gateway in a resource group. An
        /// ExpressRoute gateway resource can only be deleted when there are no
        /// connection subresources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        public static void Delete(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName)
        {
                ((IExpressRouteGatewaysOperations)operations).DeleteAsync(resourceGroupName, expressRouteGatewayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified ExpressRoute gateway in a resource group. An
        /// ExpressRoute gateway resource can only be deleted when there are no
        /// connection subresources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates a ExpressRoute gateway in a specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        public static ExpressRouteGateway BeginCreateOrUpdate(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, ExpressRouteGateway putExpressRouteGatewayParameters)
        {
                return ((IExpressRouteGatewaysOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates a ExpressRoute gateway in a specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGateway> BeginCreateOrUpdateAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, ExpressRouteGateway putExpressRouteGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, putExpressRouteGatewayParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates express route gateway tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ExpressRouteGateway.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the gateway.
        /// </param>
        public static ExpressRouteGateway BeginUpdateTags(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, TagsObject expressRouteGatewayParameters)
        {
                return ((IExpressRouteGatewaysOperations)operations).BeginUpdateTagsAsync(resourceGroupName, expressRouteGatewayName, expressRouteGatewayParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates express route gateway tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ExpressRouteGateway.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ExpressRouteGateway> BeginUpdateTagsAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, TagsObject expressRouteGatewayParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateTagsWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, expressRouteGatewayParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified ExpressRoute gateway in a resource group. An
        /// ExpressRoute gateway resource can only be deleted when there are no
        /// connection subresources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        public static void BeginDelete(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName)
        {
                ((IExpressRouteGatewaysOperations)operations).BeginDeleteAsync(resourceGroupName, expressRouteGatewayName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified ExpressRoute gateway in a resource group. An
        /// ExpressRoute gateway resource can only be deleted when there are no
        /// connection subresources.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='expressRouteGatewayName'>
        /// The name of the ExpressRoute gateway.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IExpressRouteGatewaysOperations operations, string resourceGroupName, string expressRouteGatewayName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, expressRouteGatewayName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
