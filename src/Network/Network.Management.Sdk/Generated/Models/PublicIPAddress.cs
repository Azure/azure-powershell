// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Public IP address resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class PublicIPAddress : Resource
    {
        /// <summary>
        /// Initializes a new instance of the PublicIPAddress class.
        /// </summary>
        public PublicIPAddress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PublicIPAddress class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="extendedLocation">The extended location of the public ip address.
        /// </param>

        /// <param name="sku">The public IP address SKU.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="zones">A list of availability zones denoting the IP allocated for the resource
        /// needs to come from.
        /// </param>

        /// <param name="ipConfiguration">The IP configuration associated with the public IP address.
        /// </param>

        /// <param name="ddosSettings">The DDoS protection custom policy associated with the public IP address.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the public IP address resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="natGateway">The NatGateway for the Public IP address.
        /// </param>

        /// <param name="publicIPAllocationMethod">The public IP address allocation method.
        /// Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;</param>

        /// <param name="publicIPAddressVersion">The public IP address version.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>

        /// <param name="dnsSettings">The FQDN of the DNS record associated with the public IP address.
        /// </param>

        /// <param name="ipTags">The list of tags associated with the public IP address.
        /// </param>

        /// <param name="ipAddress">The IP address associated with the public IP address resource.
        /// </param>

        /// <param name="publicIPPrefix">The Public IP Prefix this Public IP Address should be allocated from.
        /// </param>

        /// <param name="idleTimeoutInMinutes">The idle timeout of the public IP address.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the public IP address resource.
        /// </param>

        /// <param name="servicePublicIPAddress">The service public IP address of the public IP address resource.
        /// </param>

        /// <param name="migrationPhase">Migration phase of Public IP Address.
        /// Possible values include: &#39;None&#39;, &#39;Prepare&#39;, &#39;Commit&#39;, &#39;Abort&#39;, &#39;Committed&#39;</param>

        /// <param name="linkedPublicIPAddress">The linked public IP address of the public IP address resource.
        /// </param>

        /// <param name="deleteOption">Specify what happens to the public IP address when the VM using it is
        /// deleted
        /// Possible values include: &#39;Delete&#39;, &#39;Detach&#39;</param>
        public PublicIPAddress(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ExtendedLocation extendedLocation = default(ExtendedLocation), PublicIPAddressSku sku = default(PublicIPAddressSku), string etag = default(string), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), IPConfiguration ipConfiguration = default(IPConfiguration), DdosSettings ddosSettings = default(DdosSettings), string provisioningState = default(string), NatGateway natGateway = default(NatGateway), string publicIPAllocationMethod = default(string), string publicIPAddressVersion = default(string), PublicIPAddressDnsSettings dnsSettings = default(PublicIPAddressDnsSettings), System.Collections.Generic.IList<IpTag> ipTags = default(System.Collections.Generic.IList<IpTag>), string ipAddress = default(string), SubResource publicIPPrefix = default(SubResource), int? idleTimeoutInMinutes = default(int?), string resourceGuid = default(string), PublicIPAddress servicePublicIPAddress = default(PublicIPAddress), string migrationPhase = default(string), PublicIPAddress linkedPublicIPAddress = default(PublicIPAddress), string deleteOption = default(string))

        : base(id, name, type, location, tags)
        {
            this.ExtendedLocation = extendedLocation;
            this.Sku = sku;
            this.Etag = etag;
            this.Zones = zones;
            this.IPConfiguration = ipConfiguration;
            this.DdosSettings = ddosSettings;
            this.ProvisioningState = provisioningState;
            this.NatGateway = natGateway;
            this.PublicIPAllocationMethod = publicIPAllocationMethod;
            this.PublicIPAddressVersion = publicIPAddressVersion;
            this.DnsSettings = dnsSettings;
            this.IPTags = ipTags;
            this.IPAddress = ipAddress;
            this.PublicIPPrefix = publicIPPrefix;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            this.ResourceGuid = resourceGuid;
            this.ServicePublicIPAddress = servicePublicIPAddress;
            this.MigrationPhase = migrationPhase;
            this.LinkedPublicIPAddress = linkedPublicIPAddress;
            this.DeleteOption = deleteOption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the extended location of the public ip address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extendedLocation")]
        public ExtendedLocation ExtendedLocation {get; set; }

        /// <summary>
        /// Gets or sets the public IP address SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public PublicIPAddressSku Sku {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting the IP allocated for the
        /// resource needs to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets the IP configuration associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipConfiguration")]
        public IPConfiguration IPConfiguration {get; private set; }

        /// <summary>
        /// Gets or sets the DDoS protection custom policy associated with the public
        /// IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ddosSettings")]
        public DdosSettings DdosSettings {get; set; }

        /// <summary>
        /// Gets the provisioning state of the public IP address resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the NatGateway for the Public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.natGateway")]
        public NatGateway NatGateway {get; set; }

        /// <summary>
        /// Gets or sets the public IP address allocation method. Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPAllocationMethod")]
        public string PublicIPAllocationMethod {get; set; }

        /// <summary>
        /// Gets or sets the public IP address version. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPAddressVersion")]
        public string PublicIPAddressVersion {get; set; }

        /// <summary>
        /// Gets or sets the FQDN of the DNS record associated with the public IP
        /// address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsSettings")]
        public PublicIPAddressDnsSettings DnsSettings {get; set; }

        /// <summary>
        /// Gets or sets the list of tags associated with the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipTags")]
        public System.Collections.Generic.IList<IpTag> IPTags {get; set; }

        /// <summary>
        /// Gets or sets the IP address associated with the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets or sets the Public IP Prefix this Public IP Address should be
        /// allocated from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPPrefix")]
        public SubResource PublicIPPrefix {get; set; }

        /// <summary>
        /// Gets or sets the idle timeout of the public IP address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }

        /// <summary>
        /// Gets the resource GUID property of the public IP address resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets or sets the service public IP address of the public IP address
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.servicePublicIPAddress")]
        public PublicIPAddress ServicePublicIPAddress {get; set; }

        /// <summary>
        /// Gets or sets migration phase of Public IP Address. Possible values include: &#39;None&#39;, &#39;Prepare&#39;, &#39;Commit&#39;, &#39;Abort&#39;, &#39;Committed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.migrationPhase")]
        public string MigrationPhase {get; set; }

        /// <summary>
        /// Gets or sets the linked public IP address of the public IP address
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.linkedPublicIPAddress")]
        public PublicIPAddress LinkedPublicIPAddress {get; set; }

        /// <summary>
        /// Gets or sets specify what happens to the public IP address when the VM
        /// using it is deleted Possible values include: &#39;Delete&#39;, &#39;Detach&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deleteOption")]
        public string DeleteOption {get; set; }
    }
}