// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// IpamPool usage information.
    /// </summary>
    public partial class PoolUsage
    {
        /// <summary>
        /// Initializes a new instance of the PoolUsage class.
        /// </summary>
        public PoolUsage()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PoolUsage class.
        /// </summary>

        /// <param name="addressPrefixes">List of IP address prefixes of the resource.
        /// </param>

        /// <param name="childPools">List of IpamPool that are children of this IpamPool.
        /// </param>

        /// <param name="allocatedAddressPrefixes">List of assigned IP address prefixes.
        /// </param>

        /// <param name="reservedAddressPrefixes">List of reserved IP address prefixes. These IP addresses could be reclaimed
        /// if not assigned in the given time.
        /// </param>

        /// <param name="availableAddressPrefixes">List of available IP address prefixes.
        /// </param>

        /// <param name="totalNumberOfIPAddresses">Total number of IP addresses managed in the IpamPool.
        /// </param>

        /// <param name="numberOfAllocatedIPAddresses">Total number of assigned IP addresses in the IpamPool.
        /// </param>

        /// <param name="numberOfReservedIPAddresses">Total number of reserved IP addresses in the IpamPool.
        /// </param>

        /// <param name="numberOfAvailableIPAddresses">Total number of available IP addresses in the IpamPool.
        /// </param>
        public PoolUsage(System.Collections.Generic.IList<string> addressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ResourceBasics> childPools = default(System.Collections.Generic.IList<ResourceBasics>), System.Collections.Generic.IList<string> allocatedAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> reservedAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> availableAddressPrefixes = default(System.Collections.Generic.IList<string>), string totalNumberOfIPAddresses = default(string), string numberOfAllocatedIPAddresses = default(string), string numberOfReservedIPAddresses = default(string), string numberOfAvailableIPAddresses = default(string))

        {
            this.AddressPrefixes = addressPrefixes;
            this.ChildPools = childPools;
            this.AllocatedAddressPrefixes = allocatedAddressPrefixes;
            this.ReservedAddressPrefixes = reservedAddressPrefixes;
            this.AvailableAddressPrefixes = availableAddressPrefixes;
            this.TotalNumberOfIPAddresses = totalNumberOfIPAddresses;
            this.NumberOfAllocatedIPAddresses = numberOfAllocatedIPAddresses;
            this.NumberOfReservedIPAddresses = numberOfReservedIPAddresses;
            this.NumberOfAvailableIPAddresses = numberOfAvailableIPAddresses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets list of IP address prefixes of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressPrefixes")]
        public System.Collections.Generic.IList<string> AddressPrefixes {get; private set; }

        /// <summary>
        /// Gets list of IpamPool that are children of this IpamPool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "childPools")]
        public System.Collections.Generic.IList<ResourceBasics> ChildPools {get; private set; }

        /// <summary>
        /// Gets list of assigned IP address prefixes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocatedAddressPrefixes")]
        public System.Collections.Generic.IList<string> AllocatedAddressPrefixes {get; private set; }

        /// <summary>
        /// Gets list of reserved IP address prefixes. These IP addresses could be
        /// reclaimed if not assigned in the given time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reservedAddressPrefixes")]
        public System.Collections.Generic.IList<string> ReservedAddressPrefixes {get; private set; }

        /// <summary>
        /// Gets list of available IP address prefixes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availableAddressPrefixes")]
        public System.Collections.Generic.IList<string> AvailableAddressPrefixes {get; private set; }

        /// <summary>
        /// Gets total number of IP addresses managed in the IpamPool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalNumberOfIPAddresses")]
        public string TotalNumberOfIPAddresses {get; private set; }

        /// <summary>
        /// Gets total number of assigned IP addresses in the IpamPool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfAllocatedIPAddresses")]
        public string NumberOfAllocatedIPAddresses {get; private set; }

        /// <summary>
        /// Gets total number of reserved IP addresses in the IpamPool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfReservedIPAddresses")]
        public string NumberOfReservedIPAddresses {get; private set; }

        /// <summary>
        /// Gets total number of available IP addresses in the IpamPool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfAvailableIPAddresses")]
        public string NumberOfAvailableIPAddresses {get; private set; }
    }
}