// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Application Gateway autoscale configuration.
    /// </summary>
    public partial class ApplicationGatewayAutoscaleConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayAutoscaleConfiguration class.
        /// </summary>
        public ApplicationGatewayAutoscaleConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayAutoscaleConfiguration class.
        /// </summary>

        /// <param name="minCapacity">Lower bound on number of Application Gateway capacity.
        /// </param>

        /// <param name="maxCapacity">Upper bound on number of Application Gateway capacity.
        /// </param>
        public ApplicationGatewayAutoscaleConfiguration(int minCapacity, int? maxCapacity = default(int?))

        {
            this.MinCapacity = minCapacity;
            this.MaxCapacity = maxCapacity;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets lower bound on number of Application Gateway capacity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minCapacity")]
        public int MinCapacity {get; set; }

        /// <summary>
        /// Gets or sets upper bound on number of Application Gateway capacity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxCapacity")]
        public int? MaxCapacity {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MinCapacity < 0)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinCapacity", 0);
            }
            if (this.MaxCapacity != null)
            {
                if (this.MaxCapacity < 2)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxCapacity", 2);
                }
            }
        }
    }
}