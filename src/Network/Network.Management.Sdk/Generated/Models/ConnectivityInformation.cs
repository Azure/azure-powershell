// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Information on the connectivity status.
    /// </summary>
    public partial class ConnectivityInformation
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityInformation class.
        /// </summary>
        public ConnectivityInformation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityInformation class.
        /// </summary>

        /// <param name="hops">List of hops between the source and the destination.
        /// </param>

        /// <param name="connectionStatus">The connection status.
        /// Possible values include: &#39;Unknown&#39;, &#39;Connected&#39;, &#39;Disconnected&#39;, &#39;Degraded&#39;</param>

        /// <param name="avgLatencyInMS">Average latency in milliseconds.
        /// </param>

        /// <param name="minLatencyInMS">Minimum latency in milliseconds.
        /// </param>

        /// <param name="maxLatencyInMS">Maximum latency in milliseconds.
        /// </param>

        /// <param name="probesSent">Total number of probes sent.
        /// </param>

        /// <param name="probesFailed">Number of failed probes.
        /// </param>
        public ConnectivityInformation(System.Collections.Generic.IList<ConnectivityHop> hops = default(System.Collections.Generic.IList<ConnectivityHop>), string connectionStatus = default(string), int? avgLatencyInMS = default(int?), int? minLatencyInMS = default(int?), int? maxLatencyInMS = default(int?), int? probesSent = default(int?), int? probesFailed = default(int?))

        {
            this.Hops = hops;
            this.ConnectionStatus = connectionStatus;
            this.AvgLatencyInMS = avgLatencyInMS;
            this.MinLatencyInMS = minLatencyInMS;
            this.MaxLatencyInMS = maxLatencyInMS;
            this.ProbesSent = probesSent;
            this.ProbesFailed = probesFailed;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets list of hops between the source and the destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hops")]
        public System.Collections.Generic.IList<ConnectivityHop> Hops {get; private set; }

        /// <summary>
        /// Gets the connection status. Possible values include: &#39;Unknown&#39;, &#39;Connected&#39;, &#39;Disconnected&#39;, &#39;Degraded&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionStatus")]
        public string ConnectionStatus {get; private set; }

        /// <summary>
        /// Gets average latency in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avgLatencyInMs")]
        public int? AvgLatencyInMS {get; private set; }

        /// <summary>
        /// Gets minimum latency in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minLatencyInMs")]
        public int? MinLatencyInMS {get; private set; }

        /// <summary>
        /// Gets maximum latency in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxLatencyInMs")]
        public int? MaxLatencyInMS {get; private set; }

        /// <summary>
        /// Gets total number of probes sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probesSent")]
        public int? ProbesSent {get; private set; }

        /// <summary>
        /// Gets number of failed probes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probesFailed")]
        public int? ProbesFailed {get; private set; }
    }
}