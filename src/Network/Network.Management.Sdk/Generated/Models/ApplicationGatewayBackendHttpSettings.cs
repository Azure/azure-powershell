// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Backend address pool settings of an application gateway.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationGatewayBackendHttpSettings : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayBackendHttpSettings class.
        /// </summary>
        public ApplicationGatewayBackendHttpSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayBackendHttpSettings class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Name of the backend http settings that is unique within an Application
        /// Gateway.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the backend HTTP settings resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="port">The destination port on the backend.
        /// </param>

        /// <param name="protocol">The protocol used to communicate with the backend.
        /// Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;</param>

        /// <param name="cookieBasedAffinity">Cookie based affinity.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="requestTimeout">Request timeout in seconds. Application Gateway will fail the request if
        /// response is not received within RequestTimeout. Acceptable values are from
        /// 1 second to 86400 seconds.
        /// </param>

        /// <param name="probe">Probe resource of an application gateway.
        /// </param>

        /// <param name="authenticationCertificates">Array of references to application gateway authentication certificates.
        /// </param>

        /// <param name="trustedRootCertificates">Array of references to application gateway trusted root certificates.
        /// </param>

        /// <param name="connectionDraining">Connection draining of the backend http settings resource.
        /// </param>

        /// <param name="hostName">Host header to be sent to the backend servers.
        /// </param>

        /// <param name="pickHostNameFromBackendAddress">Whether to pick host header should be picked from the host name of the
        /// backend server. Default value is false.
        /// </param>

        /// <param name="affinityCookieName">Cookie name to use for the affinity cookie.
        /// </param>

        /// <param name="probeEnabled">Whether the probe is enabled. Default value is false.
        /// </param>

        /// <param name="path">Path which should be used as a prefix for all HTTP requests. Null means no
        /// path will be prefixed. Default value is null.
        /// </param>
        public ApplicationGatewayBackendHttpSettings(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), int? port = default(int?), string protocol = default(string), string cookieBasedAffinity = default(string), int? requestTimeout = default(int?), SubResource probe = default(SubResource), System.Collections.Generic.IList<SubResource> authenticationCertificates = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> trustedRootCertificates = default(System.Collections.Generic.IList<SubResource>), ApplicationGatewayConnectionDraining connectionDraining = default(ApplicationGatewayConnectionDraining), string hostName = default(string), bool? pickHostNameFromBackendAddress = default(bool?), string affinityCookieName = default(string), bool? probeEnabled = default(bool?), string path = default(string))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.Port = port;
            this.Protocol = protocol;
            this.CookieBasedAffinity = cookieBasedAffinity;
            this.RequestTimeout = requestTimeout;
            this.Probe = probe;
            this.AuthenticationCertificates = authenticationCertificates;
            this.TrustedRootCertificates = trustedRootCertificates;
            this.ConnectionDraining = connectionDraining;
            this.HostName = hostName;
            this.PickHostNameFromBackendAddress = pickHostNameFromBackendAddress;
            this.AffinityCookieName = affinityCookieName;
            this.ProbeEnabled = probeEnabled;
            this.Path = path;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the backend http settings that is unique within an
        /// Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the backend HTTP settings resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the destination port on the backend.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.port")]
        public int? Port {get; set; }

        /// <summary>
        /// Gets or sets the protocol used to communicate with the backend. Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets cookie based affinity. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cookieBasedAffinity")]
        public string CookieBasedAffinity {get; set; }

        /// <summary>
        /// Gets or sets request timeout in seconds. Application Gateway will fail the
        /// request if response is not received within RequestTimeout. Acceptable
        /// values are from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestTimeout")]
        public int? RequestTimeout {get; set; }

        /// <summary>
        /// Gets or sets probe resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.probe")]
        public SubResource Probe {get; set; }

        /// <summary>
        /// Gets or sets array of references to application gateway authentication
        /// certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authenticationCertificates")]
        public System.Collections.Generic.IList<SubResource> AuthenticationCertificates {get; set; }

        /// <summary>
        /// Gets or sets array of references to application gateway trusted root
        /// certificates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.trustedRootCertificates")]
        public System.Collections.Generic.IList<SubResource> TrustedRootCertificates {get; set; }

        /// <summary>
        /// Gets or sets connection draining of the backend http settings resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectionDraining")]
        public ApplicationGatewayConnectionDraining ConnectionDraining {get; set; }

        /// <summary>
        /// Gets or sets host header to be sent to the backend servers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostName")]
        public string HostName {get; set; }

        /// <summary>
        /// Gets or sets whether to pick host header should be picked from the host
        /// name of the backend server. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.pickHostNameFromBackendAddress")]
        public bool? PickHostNameFromBackendAddress {get; set; }

        /// <summary>
        /// Gets or sets cookie name to use for the affinity cookie.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.affinityCookieName")]
        public string AffinityCookieName {get; set; }

        /// <summary>
        /// Gets or sets whether the probe is enabled. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.probeEnabled")]
        public bool? ProbeEnabled {get; set; }

        /// <summary>
        /// Gets or sets path which should be used as a prefix for all HTTP requests.
        /// Null means no path will be prefixed. Default value is null.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.path")]
        public string Path {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {









            if (this.ConnectionDraining != null)
            {
                this.ConnectionDraining.Validate();
            }



        }
    }
}