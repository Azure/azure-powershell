// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of ExpressRouteCircuit.
    /// </summary>
    public partial class ExpressRouteCircuitPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitPropertiesFormat class.
        /// </summary>
        public ExpressRouteCircuitPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitPropertiesFormat class.
        /// </summary>

        /// <param name="allowClassicOperations">Allow classic operations.
        /// </param>

        /// <param name="circuitProvisioningState">The CircuitProvisioningState state of the resource.
        /// </param>

        /// <param name="serviceProviderProvisioningState">The ServiceProviderProvisioningState state of the resource.
        /// Possible values include: &#39;NotProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;,
        /// &#39;Deprovisioning&#39;</param>

        /// <param name="authorizations">The list of authorizations.
        /// </param>

        /// <param name="peerings">The list of peerings.
        /// </param>

        /// <param name="serviceKey">The ServiceKey.
        /// </param>

        /// <param name="serviceProviderNotes">The ServiceProviderNotes.
        /// </param>

        /// <param name="serviceProviderProperties">The ServiceProviderProperties.
        /// </param>

        /// <param name="expressRoutePort">The reference to the ExpressRoutePort resource when the circuit is
        /// provisioned on an ExpressRoutePort resource.
        /// </param>

        /// <param name="bandwidthInGbps">The bandwidth of the circuit when the circuit is provisioned on an
        /// ExpressRoutePort resource.
        /// </param>

        /// <param name="stag">The identifier of the circuit traffic. Outer tag for QinQ encapsulation.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route circuit resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="gatewayManagerEtag">The GatewayManager Etag.
        /// </param>

        /// <param name="globalReachEnabled">Flag denoting global reach status.
        /// </param>

        /// <param name="authorizationKey">The authorizationKey.
        /// </param>

        /// <param name="authorizationStatus">The authorization status of the Circuit.
        /// </param>

        /// <param name="enableDirectPortRateLimit">Flag denoting rate-limiting status of the ExpressRoute direct-port circuit.
        /// </param>
        public ExpressRouteCircuitPropertiesFormat(bool? allowClassicOperations = default(bool?), string circuitProvisioningState = default(string), string serviceProviderProvisioningState = default(string), System.Collections.Generic.IList<ExpressRouteCircuitAuthorization> authorizations = default(System.Collections.Generic.IList<ExpressRouteCircuitAuthorization>), System.Collections.Generic.IList<ExpressRouteCircuitPeering> peerings = default(System.Collections.Generic.IList<ExpressRouteCircuitPeering>), string serviceKey = default(string), string serviceProviderNotes = default(string), ExpressRouteCircuitServiceProviderProperties serviceProviderProperties = default(ExpressRouteCircuitServiceProviderProperties), SubResource expressRoutePort = default(SubResource), double? bandwidthInGbps = default(double?), int? stag = default(int?), string provisioningState = default(string), string gatewayManagerEtag = default(string), bool? globalReachEnabled = default(bool?), string authorizationKey = default(string), string authorizationStatus = default(string), bool? enableDirectPortRateLimit = default(bool?))

        {
            this.AllowClassicOperations = allowClassicOperations;
            this.CircuitProvisioningState = circuitProvisioningState;
            this.ServiceProviderProvisioningState = serviceProviderProvisioningState;
            this.Authorizations = authorizations;
            this.Peerings = peerings;
            this.ServiceKey = serviceKey;
            this.ServiceProviderNotes = serviceProviderNotes;
            this.ServiceProviderProperties = serviceProviderProperties;
            this.ExpressRoutePort = expressRoutePort;
            this.BandwidthInGbps = bandwidthInGbps;
            this.Stag = stag;
            this.ProvisioningState = provisioningState;
            this.GatewayManagerEtag = gatewayManagerEtag;
            this.GlobalReachEnabled = globalReachEnabled;
            this.AuthorizationKey = authorizationKey;
            this.AuthorizationStatus = authorizationStatus;
            this.EnableDirectPortRateLimit = enableDirectPortRateLimit;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets allow classic operations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowClassicOperations")]
        public bool? AllowClassicOperations {get; set; }

        /// <summary>
        /// Gets or sets the CircuitProvisioningState state of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "circuitProvisioningState")]
        public string CircuitProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the ServiceProviderProvisioningState state of the resource. Possible values include: &#39;NotProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;Deprovisioning&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceProviderProvisioningState")]
        public string ServiceProviderProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets the list of authorizations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizations")]
        public System.Collections.Generic.IList<ExpressRouteCircuitAuthorization> Authorizations {get; set; }

        /// <summary>
        /// Gets or sets the list of peerings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerings")]
        public System.Collections.Generic.IList<ExpressRouteCircuitPeering> Peerings {get; set; }

        /// <summary>
        /// Gets or sets the ServiceKey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceKey")]
        public string ServiceKey {get; set; }

        /// <summary>
        /// Gets or sets the ServiceProviderNotes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceProviderNotes")]
        public string ServiceProviderNotes {get; set; }

        /// <summary>
        /// Gets or sets the ServiceProviderProperties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceProviderProperties")]
        public ExpressRouteCircuitServiceProviderProperties ServiceProviderProperties {get; set; }

        /// <summary>
        /// Gets or sets the reference to the ExpressRoutePort resource when the
        /// circuit is provisioned on an ExpressRoutePort resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expressRoutePort")]
        public SubResource ExpressRoutePort {get; set; }

        /// <summary>
        /// Gets or sets the bandwidth of the circuit when the circuit is provisioned
        /// on an ExpressRoutePort resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bandwidthInGbps")]
        public double? BandwidthInGbps {get; set; }

        /// <summary>
        /// Gets the identifier of the circuit traffic. Outer tag for QinQ
        /// encapsulation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "stag")]
        public int? Stag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the express route circuit resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the GatewayManager Etag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayManagerEtag")]
        public string GatewayManagerEtag {get; set; }

        /// <summary>
        /// Gets or sets flag denoting global reach status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "globalReachEnabled")]
        public bool? GlobalReachEnabled {get; set; }

        /// <summary>
        /// Gets or sets the authorizationKey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationKey")]
        public string AuthorizationKey {get; set; }

        /// <summary>
        /// Gets the authorization status of the Circuit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationStatus")]
        public string AuthorizationStatus {get; private set; }

        /// <summary>
        /// Gets or sets flag denoting rate-limiting status of the ExpressRoute
        /// direct-port circuit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableDirectPortRateLimit")]
        public bool? EnableDirectPortRateLimit {get; set; }
    }
}