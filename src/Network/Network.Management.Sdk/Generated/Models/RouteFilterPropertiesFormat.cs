// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Route Filter Resource.
    /// </summary>
    public partial class RouteFilterPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the RouteFilterPropertiesFormat class.
        /// </summary>
        public RouteFilterPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteFilterPropertiesFormat class.
        /// </summary>

        /// <param name="rules">Collection of RouteFilterRules contained within a route filter.
        /// </param>

        /// <param name="peerings">A collection of references to express route circuit peerings.
        /// </param>

        /// <param name="ipv6Peerings">A collection of references to express route circuit ipv6 peerings.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the route filter resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public RouteFilterPropertiesFormat(System.Collections.Generic.IList<RouteFilterRule> rules = default(System.Collections.Generic.IList<RouteFilterRule>), System.Collections.Generic.IList<ExpressRouteCircuitPeering> peerings = default(System.Collections.Generic.IList<ExpressRouteCircuitPeering>), System.Collections.Generic.IList<ExpressRouteCircuitPeering> ipv6Peerings = default(System.Collections.Generic.IList<ExpressRouteCircuitPeering>), string provisioningState = default(string))

        {
            this.Rules = rules;
            this.Peerings = peerings;
            this.Ipv6Peerings = ipv6Peerings;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets collection of RouteFilterRules contained within a route
        /// filter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rules")]
        public System.Collections.Generic.IList<RouteFilterRule> Rules {get; set; }

        /// <summary>
        /// Gets a collection of references to express route circuit peerings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerings")]
        public System.Collections.Generic.IList<ExpressRouteCircuitPeering> Peerings {get; private set; }

        /// <summary>
        /// Gets a collection of references to express route circuit ipv6 peerings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipv6Peerings")]
        public System.Collections.Generic.IList<ExpressRouteCircuitPeering> Ipv6Peerings {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the route filter resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}