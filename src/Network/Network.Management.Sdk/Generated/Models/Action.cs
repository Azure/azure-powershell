// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Action to be taken on a route matching a RouteMap criterion.
    /// </summary>
    public partial class Action
    {
        /// <summary>
        /// Initializes a new instance of the Action class.
        /// </summary>
        public Action()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Action class.
        /// </summary>

        /// <param name="type">Type of action to be taken. Supported types are &#39;Remove&#39;, &#39;Add&#39;, &#39;Replace&#39;,
        /// and &#39;Drop.&#39;
        /// Possible values include: &#39;Unknown&#39;, &#39;Remove&#39;, &#39;Add&#39;, &#39;Replace&#39;, &#39;Drop&#39;</param>

        /// <param name="parameters">List of parameters relevant to the action.For instance if type is drop then
        /// parameters has list of prefixes to be dropped.If type is add, parameters
        /// would have list of ASN numbers to be added
        /// </param>
        public Action(string type = default(string), System.Collections.Generic.IList<Parameter> parameters = default(System.Collections.Generic.IList<Parameter>))

        {
            this.Type = type;
            this.Parameters = parameters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets type of action to be taken. Supported types are &#39;Remove&#39;,
        /// &#39;Add&#39;, &#39;Replace&#39;, and &#39;Drop.&#39; Possible values include: &#39;Unknown&#39;, &#39;Remove&#39;, &#39;Add&#39;, &#39;Replace&#39;, &#39;Drop&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets list of parameters relevant to the action.For instance if type
        /// is drop then parameters has list of prefixes to be dropped.If type is add,
        /// parameters would have list of ASN numbers to be added
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parameters")]
        public System.Collections.Generic.IList<Parameter> Parameters {get; set; }
    }
}