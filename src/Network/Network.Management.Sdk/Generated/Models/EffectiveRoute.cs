// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Effective Route.
    /// </summary>
    public partial class EffectiveRoute
    {
        /// <summary>
        /// Initializes a new instance of the EffectiveRoute class.
        /// </summary>
        public EffectiveRoute()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EffectiveRoute class.
        /// </summary>

        /// <param name="name">The name of the user defined route. This is optional.
        /// </param>

        /// <param name="disableBgpRoutePropagation">If true, on-premises routes are not propagated to the network interfaces in
        /// the subnet.
        /// </param>

        /// <param name="source">Who created the route.
        /// Possible values include: &#39;Unknown&#39;, &#39;User&#39;, &#39;VirtualNetworkGateway&#39;,
        /// &#39;Default&#39;</param>

        /// <param name="state">The value of effective route.
        /// Possible values include: &#39;Active&#39;, &#39;Invalid&#39;</param>

        /// <param name="addressPrefix">The address prefixes of the effective routes in CIDR notation.
        /// </param>

        /// <param name="nextHopIPAddress">The IP address of the next hop of the effective route.
        /// </param>

        /// <param name="nextHopType">The type of Azure hop the packet should be sent to.
        /// Possible values include: &#39;VirtualNetworkGateway&#39;, &#39;VnetLocal&#39;, &#39;Internet&#39;,
        /// &#39;VirtualAppliance&#39;, &#39;None&#39;</param>
        public EffectiveRoute(string name = default(string), bool? disableBgpRoutePropagation = default(bool?), string source = default(string), string state = default(string), System.Collections.Generic.IList<string> addressPrefix = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> nextHopIPAddress = default(System.Collections.Generic.IList<string>), string nextHopType = default(string))

        {
            this.Name = name;
            this.DisableBgpRoutePropagation = disableBgpRoutePropagation;
            this.Source = source;
            this.State = state;
            this.AddressPrefix = addressPrefix;
            this.NextHopIPAddress = nextHopIPAddress;
            this.NextHopType = nextHopType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the user defined route. This is optional.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets if true, on-premises routes are not propagated to the network
        /// interfaces in the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableBgpRoutePropagation")]
        public bool? DisableBgpRoutePropagation {get; set; }

        /// <summary>
        /// Gets or sets who created the route. Possible values include: &#39;Unknown&#39;, &#39;User&#39;, &#39;VirtualNetworkGateway&#39;, &#39;Default&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public string Source {get; set; }

        /// <summary>
        /// Gets or sets the value of effective route. Possible values include: &#39;Active&#39;, &#39;Invalid&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets the address prefixes of the effective routes in CIDR notation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressPrefix")]
        public System.Collections.Generic.IList<string> AddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the IP address of the next hop of the effective route.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextHopIpAddress")]
        public System.Collections.Generic.IList<string> NextHopIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the type of Azure hop the packet should be sent to. Possible values include: &#39;VirtualNetworkGateway&#39;, &#39;VnetLocal&#39;, &#39;Internet&#39;, &#39;VirtualAppliance&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextHopType")]
        public string NextHopType {get; set; }
    }
}