// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// The operation for configuring intrusion detection.
    /// </summary>
    public partial class FirewallPolicyIntrusionDetectionConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the FirewallPolicyIntrusionDetectionConfiguration class.
        /// </summary>
        public FirewallPolicyIntrusionDetectionConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FirewallPolicyIntrusionDetectionConfiguration class.
        /// </summary>

        /// <param name="signatureOverrides">List of specific signatures states.
        /// </param>

        /// <param name="bypassTrafficSettings">List of rules for traffic to bypass.
        /// </param>

        /// <param name="privateRanges">IDPS Private IP address ranges are used to identify traffic direction (i.e.
        /// inbound, outbound, etc.). By default, only ranges defined by IANA RFC 1918
        /// are considered private IP addresses. To modify default ranges, specify your
        /// Private IP address ranges with this property
        /// </param>
        public FirewallPolicyIntrusionDetectionConfiguration(System.Collections.Generic.IList<FirewallPolicyIntrusionDetectionSignatureSpecification> signatureOverrides = default(System.Collections.Generic.IList<FirewallPolicyIntrusionDetectionSignatureSpecification>), System.Collections.Generic.IList<FirewallPolicyIntrusionDetectionBypassTrafficSpecifications> bypassTrafficSettings = default(System.Collections.Generic.IList<FirewallPolicyIntrusionDetectionBypassTrafficSpecifications>), System.Collections.Generic.IList<string> privateRanges = default(System.Collections.Generic.IList<string>))

        {
            this.SignatureOverrides = signatureOverrides;
            this.BypassTrafficSettings = bypassTrafficSettings;
            this.PrivateRanges = privateRanges;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of specific signatures states.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signatureOverrides")]
        public System.Collections.Generic.IList<FirewallPolicyIntrusionDetectionSignatureSpecification> SignatureOverrides {get; set; }

        /// <summary>
        /// Gets or sets list of rules for traffic to bypass.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bypassTrafficSettings")]
        public System.Collections.Generic.IList<FirewallPolicyIntrusionDetectionBypassTrafficSpecifications> BypassTrafficSettings {get; set; }

        /// <summary>
        /// Gets or sets iDPS Private IP address ranges are used to identify traffic
        /// direction (i.e. inbound, outbound, etc.). By default, only ranges defined
        /// by IANA RFC 1918 are considered private IP addresses. To modify default
        /// ranges, specify your Private IP address ranges with this property
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateRanges")]
        public System.Collections.Generic.IList<string> PrivateRanges {get; set; }
    }
}