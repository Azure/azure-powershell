// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Quality of Service defines the traffic configuration between endpoints.
    /// Mandatory to have one marking.
    /// </summary>
    public partial class QosDefinition
    {
        /// <summary>
        /// Initializes a new instance of the QosDefinition class.
        /// </summary>
        public QosDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the QosDefinition class.
        /// </summary>

        /// <param name="markings">List of markings to be used in the configuration.
        /// </param>

        /// <param name="sourceIPRanges">Source IP ranges.
        /// </param>

        /// <param name="destinationIPRanges">Destination IP ranges.
        /// </param>

        /// <param name="sourcePortRanges">Sources port ranges.
        /// </param>

        /// <param name="destinationPortRanges">Destination port ranges.
        /// </param>

        /// <param name="protocol">RNM supported protocol types.
        /// Possible values include: &#39;DoNotUse&#39;, &#39;Icmp&#39;, &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Gre&#39;, &#39;Esp&#39;,
        /// &#39;Ah&#39;, &#39;Vxlan&#39;, &#39;All&#39;</param>
        public QosDefinition(System.Collections.Generic.IList<int?> markings = default(System.Collections.Generic.IList<int?>), System.Collections.Generic.IList<QosIpRange> sourceIPRanges = default(System.Collections.Generic.IList<QosIpRange>), System.Collections.Generic.IList<QosIpRange> destinationIPRanges = default(System.Collections.Generic.IList<QosIpRange>), System.Collections.Generic.IList<QosPortRange> sourcePortRanges = default(System.Collections.Generic.IList<QosPortRange>), System.Collections.Generic.IList<QosPortRange> destinationPortRanges = default(System.Collections.Generic.IList<QosPortRange>), string protocol = default(string))

        {
            this.Markings = markings;
            this.SourceIPRanges = sourceIPRanges;
            this.DestinationIPRanges = destinationIPRanges;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.Protocol = protocol;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of markings to be used in the configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "markings")]
        public System.Collections.Generic.IList<int?> Markings {get; set; }

        /// <summary>
        /// Gets or sets source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceIpRanges")]
        public System.Collections.Generic.IList<QosIpRange> SourceIPRanges {get; set; }

        /// <summary>
        /// Gets or sets destination IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationIpRanges")]
        public System.Collections.Generic.IList<QosIpRange> DestinationIPRanges {get; set; }

        /// <summary>
        /// Gets or sets sources port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRanges")]
        public System.Collections.Generic.IList<QosPortRange> SourcePortRanges {get; set; }

        /// <summary>
        /// Gets or sets destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRanges")]
        public System.Collections.Generic.IList<QosPortRange> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets rNM supported protocol types. Possible values include: &#39;DoNotUse&#39;, &#39;Icmp&#39;, &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Gre&#39;, &#39;Esp&#39;, &#39;Ah&#39;, &#39;Vxlan&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }
    }
}