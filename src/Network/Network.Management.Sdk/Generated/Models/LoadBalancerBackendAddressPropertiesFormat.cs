// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the load balancer backend addresses.
    /// </summary>
    public partial class LoadBalancerBackendAddressPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancerBackendAddressPropertiesFormat class.
        /// </summary>
        public LoadBalancerBackendAddressPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LoadBalancerBackendAddressPropertiesFormat class.
        /// </summary>

        /// <param name="virtualNetwork">Reference to an existing virtual network.
        /// </param>

        /// <param name="subnet">Reference to an existing subnet.
        /// </param>

        /// <param name="ipAddress">IP Address belonging to the referenced virtual network.
        /// </param>

        /// <param name="networkInterfaceIPConfiguration">Reference to IP address defined in network interfaces.
        /// </param>

        /// <param name="loadBalancerFrontendIPConfiguration">Reference to the frontend ip address configuration defined in regional
        /// loadbalancer.
        /// </param>

        /// <param name="inboundNatRulesPortMapping">Collection of inbound NAT rule port mappings.
        /// </param>

        /// <param name="adminState">A list of administrative states which once set can override health probe so
        /// that Load Balancer will always forward new connections to backend, or deny
        /// new connections and reset existing connections.
        /// Possible values include: &#39;None&#39;, &#39;Up&#39;, &#39;Down&#39;</param>
        public LoadBalancerBackendAddressPropertiesFormat(SubResource virtualNetwork = default(SubResource), SubResource subnet = default(SubResource), string ipAddress = default(string), SubResource networkInterfaceIPConfiguration = default(SubResource), SubResource loadBalancerFrontendIPConfiguration = default(SubResource), System.Collections.Generic.IList<NatRulePortMapping> inboundNatRulesPortMapping = default(System.Collections.Generic.IList<NatRulePortMapping>), string adminState = default(string))

        {
            this.VirtualNetwork = virtualNetwork;
            this.Subnet = subnet;
            this.IPAddress = ipAddress;
            this.NetworkInterfaceIPConfiguration = networkInterfaceIPConfiguration;
            this.LoadBalancerFrontendIPConfiguration = loadBalancerFrontendIPConfiguration;
            this.InboundNatRulesPortMapping = inboundNatRulesPortMapping;
            this.AdminState = adminState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets reference to an existing virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetwork")]
        public SubResource VirtualNetwork {get; set; }

        /// <summary>
        /// Gets or sets reference to an existing subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnet")]
        public SubResource Subnet {get; set; }

        /// <summary>
        /// Gets or sets iP Address belonging to the referenced virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets reference to IP address defined in network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkInterfaceIPConfiguration")]
        public SubResource NetworkInterfaceIPConfiguration {get; private set; }

        /// <summary>
        /// Gets or sets reference to the frontend ip address configuration defined in
        /// regional loadbalancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerFrontendIPConfiguration")]
        public SubResource LoadBalancerFrontendIPConfiguration {get; set; }

        /// <summary>
        /// Gets collection of inbound NAT rule port mappings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inboundNatRulesPortMapping")]
        public System.Collections.Generic.IList<NatRulePortMapping> InboundNatRulesPortMapping {get; private set; }

        /// <summary>
        /// Gets or sets a list of administrative states which once set can override
        /// health probe so that Load Balancer will always forward new connections to
        /// backend, or deny new connections and reset existing connections. Possible values include: &#39;None&#39;, &#39;Up&#39;, &#39;Down&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "adminState")]
        public string AdminState {get; set; }
    }
}