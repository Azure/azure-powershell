// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Listener of an application gateway.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationGatewayListener : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayListener class.
        /// </summary>
        public ApplicationGatewayListener()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayListener class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Name of the listener that is unique within an Application Gateway.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the listener resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="frontendIPConfiguration">Frontend IP configuration resource of an application gateway.
        /// </param>

        /// <param name="frontendPort">Frontend port resource of an application gateway.
        /// </param>

        /// <param name="protocol">Protocol of the listener.
        /// Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;</param>

        /// <param name="sslCertificate">SSL certificate resource of an application gateway.
        /// </param>

        /// <param name="sslProfile">SSL profile resource of the application gateway.
        /// </param>

        /// <param name="hostNames">List of Server Name Indications(SNI) for TLS Multi-site Listener that
        /// allows special wildcard characters as well.
        /// </param>
        public ApplicationGatewayListener(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), SubResource frontendIPConfiguration = default(SubResource), SubResource frontendPort = default(SubResource), string protocol = default(string), SubResource sslCertificate = default(SubResource), SubResource sslProfile = default(SubResource), System.Collections.Generic.IList<string> hostNames = default(System.Collections.Generic.IList<string>))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.FrontendIPConfiguration = frontendIPConfiguration;
            this.FrontendPort = frontendPort;
            this.Protocol = protocol;
            this.SslCertificate = sslCertificate;
            this.SslProfile = sslProfile;
            this.HostNames = hostNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the listener that is unique within an Application
        /// Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the listener resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets frontend IP configuration resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfiguration")]
        public SubResource FrontendIPConfiguration {get; set; }

        /// <summary>
        /// Gets or sets frontend port resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPort")]
        public SubResource FrontendPort {get; set; }

        /// <summary>
        /// Gets or sets protocol of the listener. Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets sSL certificate resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sslCertificate")]
        public SubResource SslCertificate {get; set; }

        /// <summary>
        /// Gets or sets sSL profile resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sslProfile")]
        public SubResource SslProfile {get; set; }

        /// <summary>
        /// Gets or sets list of Server Name Indications(SNI) for TLS Multi-site
        /// Listener that allows special wildcard characters as well.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostNames")]
        public System.Collections.Generic.IList<string> HostNames {get; set; }
    }
}