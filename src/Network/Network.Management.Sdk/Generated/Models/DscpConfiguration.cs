// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Differentiated Services Code Point configuration for any given network
    /// interface
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DscpConfiguration : Resource
    {
        /// <summary>
        /// Initializes a new instance of the DscpConfiguration class.
        /// </summary>
        public DscpConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DscpConfiguration class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the DSCP Configuration resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="markings">List of markings to be used in the configuration.
        /// </param>

        /// <param name="sourceIPRanges">Source IP ranges.
        /// </param>

        /// <param name="destinationIPRanges">Destination IP ranges.
        /// </param>

        /// <param name="sourcePortRanges">Sources port ranges.
        /// </param>

        /// <param name="destinationPortRanges">Destination port ranges.
        /// </param>

        /// <param name="protocol">RNM supported protocol types.
        /// Possible values include: &#39;DoNotUse&#39;, &#39;Icmp&#39;, &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Gre&#39;, &#39;Esp&#39;,
        /// &#39;Ah&#39;, &#39;Vxlan&#39;, &#39;All&#39;</param>

        /// <param name="qosDefinitionCollection">QoS object definitions
        /// </param>

        /// <param name="qosCollectionId">Qos Collection ID generated by RNM.
        /// </param>

        /// <param name="associatedNetworkInterfaces">Associated Network Interfaces to the DSCP Configuration.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the DSCP Configuration resource.
        /// </param>
        public DscpConfiguration(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string provisioningState = default(string), System.Collections.Generic.IList<int?> markings = default(System.Collections.Generic.IList<int?>), System.Collections.Generic.IList<QosIpRange> sourceIPRanges = default(System.Collections.Generic.IList<QosIpRange>), System.Collections.Generic.IList<QosIpRange> destinationIPRanges = default(System.Collections.Generic.IList<QosIpRange>), System.Collections.Generic.IList<QosPortRange> sourcePortRanges = default(System.Collections.Generic.IList<QosPortRange>), System.Collections.Generic.IList<QosPortRange> destinationPortRanges = default(System.Collections.Generic.IList<QosPortRange>), string protocol = default(string), System.Collections.Generic.IList<QosDefinition> qosDefinitionCollection = default(System.Collections.Generic.IList<QosDefinition>), string qosCollectionId = default(string), System.Collections.Generic.IList<NetworkInterface> associatedNetworkInterfaces = default(System.Collections.Generic.IList<NetworkInterface>), string resourceGuid = default(string))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.Markings = markings;
            this.SourceIPRanges = sourceIPRanges;
            this.DestinationIPRanges = destinationIPRanges;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.Protocol = protocol;
            this.QosDefinitionCollection = qosDefinitionCollection;
            this.QosCollectionId = qosCollectionId;
            this.AssociatedNetworkInterfaces = associatedNetworkInterfaces;
            this.ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the DSCP Configuration resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets list of markings to be used in the configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.markings")]
        public System.Collections.Generic.IList<int?> Markings {get; set; }

        /// <summary>
        /// Gets or sets source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceIpRanges")]
        public System.Collections.Generic.IList<QosIpRange> SourceIPRanges {get; set; }

        /// <summary>
        /// Gets or sets destination IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinationIpRanges")]
        public System.Collections.Generic.IList<QosIpRange> DestinationIPRanges {get; set; }

        /// <summary>
        /// Gets or sets sources port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourcePortRanges")]
        public System.Collections.Generic.IList<QosPortRange> SourcePortRanges {get; set; }

        /// <summary>
        /// Gets or sets destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinationPortRanges")]
        public System.Collections.Generic.IList<QosPortRange> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets rNM supported protocol types. Possible values include: &#39;DoNotUse&#39;, &#39;Icmp&#39;, &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Gre&#39;, &#39;Esp&#39;, &#39;Ah&#39;, &#39;Vxlan&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets qoS object definitions
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.qosDefinitionCollection")]
        public System.Collections.Generic.IList<QosDefinition> QosDefinitionCollection {get; set; }

        /// <summary>
        /// Gets qos Collection ID generated by RNM.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.qosCollectionId")]
        public string QosCollectionId {get; private set; }

        /// <summary>
        /// Gets associated Network Interfaces to the DSCP Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.associatedNetworkInterfaces")]
        public System.Collections.Generic.IList<NetworkInterface> AssociatedNetworkInterfaces {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the DSCP Configuration resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }
    }
}