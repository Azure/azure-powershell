// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// VirtualNetworkGateway properties.
    /// </summary>
    public partial class VirtualNetworkGatewayPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkGatewayPropertiesFormat class.
        /// </summary>
        public VirtualNetworkGatewayPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNetworkGatewayPropertiesFormat class.
        /// </summary>

        /// <param name="autoScaleConfiguration">Autoscale configuration for virutal network gateway
        /// </param>

        /// <param name="ipConfigurations">IP configurations for virtual network gateway.
        /// </param>

        /// <param name="gatewayType">The type of this virtual network gateway.
        /// Possible values include: &#39;Vpn&#39;, &#39;ExpressRoute&#39;, &#39;LocalGateway&#39;</param>

        /// <param name="vpnType">The type of this virtual network gateway.
        /// Possible values include: &#39;PolicyBased&#39;, &#39;RouteBased&#39;</param>

        /// <param name="vpnGatewayGeneration">The generation for this VirtualNetworkGateway. Must be None if gatewayType
        /// is not VPN.
        /// Possible values include: &#39;None&#39;, &#39;Generation1&#39;, &#39;Generation2&#39;</param>

        /// <param name="enableBgp">Whether BGP is enabled for this virtual network gateway or not.
        /// </param>

        /// <param name="enablePrivateIPAddress">Whether private IP needs to be enabled on this gateway for connections or
        /// not.
        /// </param>

        /// <param name="active">ActiveActive flag.
        /// </param>

        /// <param name="disableIPSecReplayProtection">disableIPSecReplayProtection flag.
        /// </param>

        /// <param name="gatewayDefaultSite">The reference to the LocalNetworkGateway resource which represents local
        /// network site having default routes. Assign Null value in case of removing
        /// existing default site setting.
        /// </param>

        /// <param name="sku">The reference to the VirtualNetworkGatewaySku resource which represents the
        /// SKU selected for Virtual network gateway.
        /// </param>

        /// <param name="vpnClientConfiguration">The reference to the VpnClientConfiguration resource which represents the
        /// P2S VpnClient configurations.
        /// </param>

        /// <param name="virtualNetworkGatewayPolicyGroups">The reference to the VirtualNetworkGatewayPolicyGroup resource which
        /// represents the available VirtualNetworkGatewayPolicyGroup for the gateway.
        /// </param>

        /// <param name="bgpSettings">Virtual network gateway&#39;s BGP speaker settings.
        /// </param>

        /// <param name="customRoutes">The reference to the address space resource which represents the custom
        /// routes address space specified by the customer for virtual network gateway
        /// and VpnClient.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the virtual network gateway resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the virtual network gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="enableDnsForwarding">Whether dns forwarding is enabled or not.
        /// </param>

        /// <param name="inboundDnsForwardingEndpoint">The IP address allocated by the gateway to which dns requests can be sent.
        /// </param>

        /// <param name="vNetExtendedLocationResourceId">Customer vnet resource id. VirtualNetworkGateway of type local gateway is
        /// associated with the customer vnet.
        /// </param>

        /// <param name="natRules">NatRules for virtual network gateway.
        /// </param>

        /// <param name="enableBgpRouteTranslationForNat">EnableBgpRouteTranslationForNat flag.
        /// </param>

        /// <param name="allowVirtualWanTraffic">Configures this gateway to accept traffic from remote Virtual WAN networks.
        /// </param>

        /// <param name="allowRemoteVnetTraffic">Configure this gateway to accept traffic from other Azure Virtual Networks.
        /// This configuration does not support connectivity to Azure Virtual WAN.
        /// </param>

        /// <param name="adminState">Property to indicate if the Express Route Gateway serves traffic when there
        /// are multiple Express Route Gateways in the vnet
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>
        public VirtualNetworkGatewayPropertiesFormat(VirtualNetworkGatewayAutoScaleConfiguration autoScaleConfiguration = default(VirtualNetworkGatewayAutoScaleConfiguration), System.Collections.Generic.IList<VirtualNetworkGatewayIPConfiguration> ipConfigurations = default(System.Collections.Generic.IList<VirtualNetworkGatewayIPConfiguration>), string gatewayType = default(string), string vpnType = default(string), string vpnGatewayGeneration = default(string), bool? enableBgp = default(bool?), bool? enablePrivateIPAddress = default(bool?), bool? active = default(bool?), bool? disableIPSecReplayProtection = default(bool?), SubResource gatewayDefaultSite = default(SubResource), VirtualNetworkGatewaySku sku = default(VirtualNetworkGatewaySku), VpnClientConfiguration vpnClientConfiguration = default(VpnClientConfiguration), System.Collections.Generic.IList<VirtualNetworkGatewayPolicyGroup> virtualNetworkGatewayPolicyGroups = default(System.Collections.Generic.IList<VirtualNetworkGatewayPolicyGroup>), BgpSettings bgpSettings = default(BgpSettings), AddressSpace customRoutes = default(AddressSpace), string resourceGuid = default(string), string provisioningState = default(string), bool? enableDnsForwarding = default(bool?), string inboundDnsForwardingEndpoint = default(string), string vNetExtendedLocationResourceId = default(string), System.Collections.Generic.IList<VirtualNetworkGatewayNatRule> natRules = default(System.Collections.Generic.IList<VirtualNetworkGatewayNatRule>), bool? enableBgpRouteTranslationForNat = default(bool?), bool? allowVirtualWanTraffic = default(bool?), bool? allowRemoteVnetTraffic = default(bool?), string adminState = default(string))

        {
            this.AutoScaleConfiguration = autoScaleConfiguration;
            this.IPConfigurations = ipConfigurations;
            this.GatewayType = gatewayType;
            this.VpnType = vpnType;
            this.VpnGatewayGeneration = vpnGatewayGeneration;
            this.EnableBgp = enableBgp;
            this.EnablePrivateIPAddress = enablePrivateIPAddress;
            this.Active = active;
            this.DisableIPSecReplayProtection = disableIPSecReplayProtection;
            this.GatewayDefaultSite = gatewayDefaultSite;
            this.Sku = sku;
            this.VpnClientConfiguration = vpnClientConfiguration;
            this.VirtualNetworkGatewayPolicyGroups = virtualNetworkGatewayPolicyGroups;
            this.BgpSettings = bgpSettings;
            this.CustomRoutes = customRoutes;
            this.ResourceGuid = resourceGuid;
            this.ProvisioningState = provisioningState;
            this.EnableDnsForwarding = enableDnsForwarding;
            this.InboundDnsForwardingEndpoint = inboundDnsForwardingEndpoint;
            this.VNetExtendedLocationResourceId = vNetExtendedLocationResourceId;
            this.NatRules = natRules;
            this.EnableBgpRouteTranslationForNat = enableBgpRouteTranslationForNat;
            this.AllowVirtualWanTraffic = allowVirtualWanTraffic;
            this.AllowRemoteVnetTraffic = allowRemoteVnetTraffic;
            this.AdminState = adminState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets autoscale configuration for virutal network gateway
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoScaleConfiguration")]
        public VirtualNetworkGatewayAutoScaleConfiguration AutoScaleConfiguration {get; set; }

        /// <summary>
        /// Gets or sets iP configurations for virtual network gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipConfigurations")]
        public System.Collections.Generic.IList<VirtualNetworkGatewayIPConfiguration> IPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets the type of this virtual network gateway. Possible values include: &#39;Vpn&#39;, &#39;ExpressRoute&#39;, &#39;LocalGateway&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayType")]
        public string GatewayType {get; set; }

        /// <summary>
        /// Gets or sets the type of this virtual network gateway. Possible values include: &#39;PolicyBased&#39;, &#39;RouteBased&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vpnType")]
        public string VpnType {get; set; }

        /// <summary>
        /// Gets or sets the generation for this VirtualNetworkGateway. Must be None if
        /// gatewayType is not VPN. Possible values include: &#39;None&#39;, &#39;Generation1&#39;, &#39;Generation2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vpnGatewayGeneration")]
        public string VpnGatewayGeneration {get; set; }

        /// <summary>
        /// Gets or sets whether BGP is enabled for this virtual network gateway or
        /// not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBgp")]
        public bool? EnableBgp {get; set; }

        /// <summary>
        /// Gets or sets whether private IP needs to be enabled on this gateway for
        /// connections or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enablePrivateIpAddress")]
        public bool? EnablePrivateIPAddress {get; set; }

        /// <summary>
        /// Gets or sets activeActive flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeActive")]
        public bool? Active {get; set; }

        /// <summary>
        /// Gets or sets disableIPSecReplayProtection flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableIPSecReplayProtection")]
        public bool? DisableIPSecReplayProtection {get; set; }

        /// <summary>
        /// Gets or sets the reference to the LocalNetworkGateway resource which
        /// represents local network site having default routes. Assign Null value in
        /// case of removing existing default site setting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayDefaultSite")]
        public SubResource GatewayDefaultSite {get; set; }

        /// <summary>
        /// Gets or sets the reference to the VirtualNetworkGatewaySku resource which
        /// represents the SKU selected for Virtual network gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public VirtualNetworkGatewaySku Sku {get; set; }

        /// <summary>
        /// Gets or sets the reference to the VpnClientConfiguration resource which
        /// represents the P2S VpnClient configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vpnClientConfiguration")]
        public VpnClientConfiguration VpnClientConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the reference to the VirtualNetworkGatewayPolicyGroup resource
        /// which represents the available VirtualNetworkGatewayPolicyGroup for the
        /// gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkGatewayPolicyGroups")]
        public System.Collections.Generic.IList<VirtualNetworkGatewayPolicyGroup> VirtualNetworkGatewayPolicyGroups {get; set; }

        /// <summary>
        /// Gets or sets virtual network gateway&#39;s BGP speaker settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bgpSettings")]
        public BgpSettings BgpSettings {get; set; }

        /// <summary>
        /// Gets or sets the reference to the address space resource which represents
        /// the custom routes address space specified by the customer for virtual
        /// network gateway and VpnClient.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customRoutes")]
        public AddressSpace CustomRoutes {get; set; }

        /// <summary>
        /// Gets the resource GUID property of the virtual network gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the virtual network gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets whether dns forwarding is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableDnsForwarding")]
        public bool? EnableDnsForwarding {get; set; }

        /// <summary>
        /// Gets the IP address allocated by the gateway to which dns requests can be
        /// sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inboundDnsForwardingEndpoint")]
        public string InboundDnsForwardingEndpoint {get; private set; }

        /// <summary>
        /// Gets or sets customer vnet resource id. VirtualNetworkGateway of type local
        /// gateway is associated with the customer vnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vNetExtendedLocationResourceId")]
        public string VNetExtendedLocationResourceId {get; set; }

        /// <summary>
        /// Gets or sets natRules for virtual network gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "natRules")]
        public System.Collections.Generic.IList<VirtualNetworkGatewayNatRule> NatRules {get; set; }

        /// <summary>
        /// Gets or sets enableBgpRouteTranslationForNat flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBgpRouteTranslationForNat")]
        public bool? EnableBgpRouteTranslationForNat {get; set; }

        /// <summary>
        /// Gets or sets configures this gateway to accept traffic from remote Virtual
        /// WAN networks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowVirtualWanTraffic")]
        public bool? AllowVirtualWanTraffic {get; set; }

        /// <summary>
        /// Gets or sets configure this gateway to accept traffic from other Azure
        /// Virtual Networks. This configuration does not support connectivity to Azure
        /// Virtual WAN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowRemoteVnetTraffic")]
        public bool? AllowRemoteVnetTraffic {get; set; }

        /// <summary>
        /// Gets or sets property to indicate if the Express Route Gateway serves
        /// traffic when there are multiple Express Route Gateways in the vnet Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "adminState")]
        public string AdminState {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {









            if (this.BgpSettings != null)
            {
                this.BgpSettings.Validate();
            }







        }
    }
}