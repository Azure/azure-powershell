// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of Managed Network
    /// </summary>
    public partial class NetworkManagerProperties
    {
        /// <summary>
        /// Initializes a new instance of the NetworkManagerProperties class.
        /// </summary>
        public NetworkManagerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkManagerProperties class.
        /// </summary>

        /// <param name="description">A description of the network manager.
        /// </param>

        /// <param name="networkManagerScopes">Scope of Network Manager.
        /// </param>

        /// <param name="networkManagerScopeAccesses">Scope Access.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the network manager resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="resourceGuid">Unique identifier for this resource.
        /// </param>
        public NetworkManagerProperties(NetworkManagerPropertiesNetworkManagerScopes networkManagerScopes, System.Collections.Generic.IList<string> networkManagerScopeAccesses, string description = default(string), string provisioningState = default(string), string resourceGuid = default(string))

        {
            this.Description = description;
            this.NetworkManagerScopes = networkManagerScopes;
            this.NetworkManagerScopeAccesses = networkManagerScopeAccesses;
            this.ProvisioningState = provisioningState;
            this.ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a description of the network manager.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets scope of Network Manager.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkManagerScopes")]
        public NetworkManagerPropertiesNetworkManagerScopes NetworkManagerScopes {get; set; }

        /// <summary>
        /// Gets or sets scope Access.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkManagerScopeAccesses")]
        public System.Collections.Generic.IList<string> NetworkManagerScopeAccesses {get; set; }

        /// <summary>
        /// Gets the provisioning state of the network manager resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets unique identifier for this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.NetworkManagerScopes == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NetworkManagerScopes");
            }
            if (this.NetworkManagerScopeAccesses == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NetworkManagerScopeAccesses");
            }





        }
    }
}