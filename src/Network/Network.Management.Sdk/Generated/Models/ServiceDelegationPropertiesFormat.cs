// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a service delegation.
    /// </summary>
    public partial class ServiceDelegationPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ServiceDelegationPropertiesFormat class.
        /// </summary>
        public ServiceDelegationPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceDelegationPropertiesFormat class.
        /// </summary>

        /// <param name="serviceName">The name of the service to whom the subnet should be delegated (e.g.
        /// Microsoft.Sql/servers).
        /// </param>

        /// <param name="actions">The actions permitted to the service upon delegation.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the service delegation resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public ServiceDelegationPropertiesFormat(string serviceName = default(string), System.Collections.Generic.IList<string> actions = default(System.Collections.Generic.IList<string>), string provisioningState = default(string))

        {
            this.ServiceName = serviceName;
            this.Actions = actions;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the service to whom the subnet should be delegated
        /// (e.g. Microsoft.Sql/servers).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceName")]
        public string ServiceName {get; set; }

        /// <summary>
        /// Gets the actions permitted to the service upon delegation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "actions")]
        public System.Collections.Generic.IList<string> Actions {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the service delegation resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}