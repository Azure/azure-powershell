// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies input parameters required NVA in VNet interface configuration.
    /// </summary>
    public partial class NvaInterfaceConfigurationsProperties
    {
        /// <summary>
        /// Initializes a new instance of the NvaInterfaceConfigurationsProperties class.
        /// </summary>
        public NvaInterfaceConfigurationsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NvaInterfaceConfigurationsProperties class.
        /// </summary>

        /// <param name="subnet">A subnet resource id where the NIC will be deployed. Each subnet resource
        /// uri should be unique.
        /// </param>

        /// <param name="type">Specifies the NIC types for the NVA interface configuration. Allowed
        /// values: PrivateNic, PublicNic, AdditionalPrivateNic, AdditionalPublicNic.
        /// Only the combination of PrivateNic and PublicNic is currently supported.
        /// </param>

        /// <param name="name">Specifies the name of the interface. Maximum length is 70 characters.
        /// </param>
        public NvaInterfaceConfigurationsProperties(NvaInVnetSubnetReferenceProperties subnet = default(NvaInVnetSubnetReferenceProperties), System.Collections.Generic.IList<string> type = default(System.Collections.Generic.IList<string>), string name = default(string))

        {
            this.Subnet = subnet;
            this.Type = type;
            this.Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a subnet resource id where the NIC will be deployed. Each
        /// subnet resource uri should be unique.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnet")]
        public NvaInVnetSubnetReferenceProperties Subnet {get; set; }

        /// <summary>
        /// Gets or sets specifies the NIC types for the NVA interface configuration.
        /// Allowed values: PrivateNic, PublicNic, AdditionalPrivateNic,
        /// AdditionalPublicNic. Only the combination of PrivateNic and PublicNic is
        /// currently supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public System.Collections.Generic.IList<string> Type {get; set; }

        /// <summary>
        /// Gets or sets specifies the name of the interface. Maximum length is 70
        /// characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.Name != null)
            {
                if (this.Name.Length > 70)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Name", 70);
                }
            }
        }
    }
}