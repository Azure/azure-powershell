// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// LocalNetworkGateway properties.
    /// </summary>
    public partial class LocalNetworkGatewayPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the LocalNetworkGatewayPropertiesFormat class.
        /// </summary>
        public LocalNetworkGatewayPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LocalNetworkGatewayPropertiesFormat class.
        /// </summary>

        /// <param name="localNetworkAddressSpace">Local network site address space.
        /// </param>

        /// <param name="gatewayIPAddress">IP address of local network gateway.
        /// </param>

        /// <param name="fqdn">FQDN of local network gateway.
        /// </param>

        /// <param name="bgpSettings">Local network gateway&#39;s BGP speaker settings.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the local network gateway resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the local network gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public LocalNetworkGatewayPropertiesFormat(AddressSpace localNetworkAddressSpace = default(AddressSpace), string gatewayIPAddress = default(string), string fqdn = default(string), BgpSettings bgpSettings = default(BgpSettings), string resourceGuid = default(string), string provisioningState = default(string))

        {
            this.LocalNetworkAddressSpace = localNetworkAddressSpace;
            this.GatewayIPAddress = gatewayIPAddress;
            this.Fqdn = fqdn;
            this.BgpSettings = bgpSettings;
            this.ResourceGuid = resourceGuid;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets local network site address space.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localNetworkAddressSpace")]
        public AddressSpace LocalNetworkAddressSpace {get; set; }

        /// <summary>
        /// Gets or sets iP address of local network gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayIpAddress")]
        public string GatewayIPAddress {get; set; }

        /// <summary>
        /// Gets or sets fQDN of local network gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fqdn")]
        public string Fqdn {get; set; }

        /// <summary>
        /// Gets or sets local network gateway&#39;s BGP speaker settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bgpSettings")]
        public BgpSettings BgpSettings {get; set; }

        /// <summary>
        /// Gets the resource GUID property of the local network gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the local network gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.BgpSettings != null)
            {
                this.BgpSettings.Validate();
            }


        }
    }
}