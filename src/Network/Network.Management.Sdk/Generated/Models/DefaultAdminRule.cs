// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Network default admin rule.
    /// </summary>
    [Newtonsoft.Json.JsonObject("Default")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DefaultAdminRule : BaseAdminRule
    {
        /// <summary>
        /// Initializes a new instance of the DefaultAdminRule class.
        /// </summary>
        public DefaultAdminRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DefaultAdminRule class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="systemData">The system metadata related to this resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="description">A description for this rule. Restricted to 140 chars.
        /// </param>

        /// <param name="flag">Default rule flag.
        /// </param>

        /// <param name="protocol">Network protocol this rule applies to.
        /// Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Icmp&#39;, &#39;Esp&#39;, &#39;Any&#39;, &#39;Ah&#39;</param>

        /// <param name="sources">The CIDR or source IP ranges.
        /// </param>

        /// <param name="destinations">The destination address prefixes. CIDR or destination IP ranges.
        /// </param>

        /// <param name="sourcePortRanges">The source port ranges.
        /// </param>

        /// <param name="destinationPortRanges">The destination port ranges.
        /// </param>

        /// <param name="access">Indicates the access allowed for this particular rule
        /// Possible values include: &#39;Allow&#39;, &#39;Deny&#39;, &#39;AlwaysAllow&#39;</param>

        /// <param name="priority">The priority of the rule. The value can be between 1 and 4096. The priority
        /// number must be unique for each rule in the collection. The lower the
        /// priority number, the higher the priority of the rule.
        /// </param>

        /// <param name="direction">Indicates if the traffic matched against the rule in inbound or outbound.
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="resourceGuid">Unique identifier for this resource.
        /// </param>
        public DefaultAdminRule(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), SystemData systemData = default(SystemData), string provisioningState = default(string), string description = default(string), string flag = default(string), string protocol = default(string), System.Collections.Generic.IList<AddressPrefixItem> sources = default(System.Collections.Generic.IList<AddressPrefixItem>), System.Collections.Generic.IList<AddressPrefixItem> destinations = default(System.Collections.Generic.IList<AddressPrefixItem>), System.Collections.Generic.IList<string> sourcePortRanges = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationPortRanges = default(System.Collections.Generic.IList<string>), string access = default(string), int? priority = default(int?), string direction = default(string), string resourceGuid = default(string))

        : base(id, name, type, etag, systemData)
        {
            this.ProvisioningState = provisioningState;
            this.Description = description;
            this.Flag = flag;
            this.Protocol = protocol;
            this.Sources = sources;
            this.Destinations = destinations;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.Access = access;
            this.Priority = priority;
            this.Direction = direction;
            this.ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioning state of the resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets a description for this rule. Restricted to 140 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; private set; }

        /// <summary>
        /// Gets or sets default rule flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.flag")]
        public string Flag {get; set; }

        /// <summary>
        /// Gets network protocol this rule applies to. Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Icmp&#39;, &#39;Esp&#39;, &#39;Any&#39;, &#39;Ah&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; private set; }

        /// <summary>
        /// Gets the CIDR or source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sources")]
        public System.Collections.Generic.IList<AddressPrefixItem> Sources {get; private set; }

        /// <summary>
        /// Gets the destination address prefixes. CIDR or destination IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinations")]
        public System.Collections.Generic.IList<AddressPrefixItem> Destinations {get; private set; }

        /// <summary>
        /// Gets the source port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourcePortRanges")]
        public System.Collections.Generic.IList<string> SourcePortRanges {get; private set; }

        /// <summary>
        /// Gets the destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinationPortRanges")]
        public System.Collections.Generic.IList<string> DestinationPortRanges {get; private set; }

        /// <summary>
        /// Gets indicates the access allowed for this particular rule Possible values include: &#39;Allow&#39;, &#39;Deny&#39;, &#39;AlwaysAllow&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.access")]
        public string Access {get; private set; }

        /// <summary>
        /// Gets the priority of the rule. The value can be between 1 and 4096. The
        /// priority number must be unique for each rule in the collection. The lower
        /// the priority number, the higher the priority of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.priority")]
        public int? Priority {get; private set; }

        /// <summary>
        /// Gets indicates if the traffic matched against the rule in inbound or
        /// outbound. Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.direction")]
        public string Direction {get; private set; }

        /// <summary>
        /// Gets unique identifier for this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }
    }
}