// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// NetworkVirtualApplianceConnection resource.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class NetworkVirtualApplianceConnection : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the NetworkVirtualApplianceConnection
        /// class.
        /// </summary>
        public NetworkVirtualApplianceConnection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkVirtualApplianceConnection
        /// class.
        /// </summary>
        /// <param name="id">Resource ID.</param>
        /// <param name="networkVirtualApplianceConnectionPropertiesName">The
        /// name of the resource.</param>
        /// <param name="provisioningState">The provisioning state of the
        /// NetworkVirtualApplianceConnection resource. Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'</param>
        /// <param name="asn">Network Virtual Appliance ASN.</param>
        /// <param name="tunnelIdentifier">Unique identifier for the
        /// connection.</param>
        /// <param name="bgpPeerAddress">List of bgpPeerAddresses for the NVA
        /// instances</param>
        /// <param name="enableInternetSecurity">Enable internet
        /// security.</param>
        /// <param name="routingConfiguration">The Routing Configuration
        /// indicating the associated and propagated route tables on this
        /// connection.</param>
        /// <param name="name">The name of the resource.</param>
        public NetworkVirtualApplianceConnection(string id = default(string), string networkVirtualApplianceConnectionPropertiesName = default(string), string provisioningState = default(string), long? asn = default(long?), long? tunnelIdentifier = default(long?), IList<string> bgpPeerAddress = default(IList<string>), bool? enableInternetSecurity = default(bool?), RoutingConfiguration routingConfiguration = default(RoutingConfiguration), string name = default(string))
            : base(id)
        {
            NetworkVirtualApplianceConnectionPropertiesName = networkVirtualApplianceConnectionPropertiesName;
            ProvisioningState = provisioningState;
            Asn = asn;
            TunnelIdentifier = tunnelIdentifier;
            BgpPeerAddress = bgpPeerAddress;
            EnableInternetSecurity = enableInternetSecurity;
            RoutingConfiguration = routingConfiguration;
            Name = name;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "properties.name")]
        public string NetworkVirtualApplianceConnectionPropertiesName { get; set; }

        /// <summary>
        /// Gets the provisioning state of the
        /// NetworkVirtualApplianceConnection resource. Possible values
        /// include: 'Succeeded', 'Updating', 'Deleting', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState { get; private set; }

        /// <summary>
        /// Gets or sets network Virtual Appliance ASN.
        /// </summary>
        [JsonProperty(PropertyName = "properties.asn")]
        public long? Asn { get; set; }

        /// <summary>
        /// Gets or sets unique identifier for the connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.tunnelIdentifier")]
        public long? TunnelIdentifier { get; set; }

        /// <summary>
        /// Gets or sets list of bgpPeerAddresses for the NVA instances
        /// </summary>
        [JsonProperty(PropertyName = "properties.bgpPeerAddress")]
        public IList<string> BgpPeerAddress { get; set; }

        /// <summary>
        /// Gets or sets enable internet security.
        /// </summary>
        [JsonProperty(PropertyName = "properties.enableInternetSecurity")]
        public bool? EnableInternetSecurity { get; set; }

        /// <summary>
        /// Gets or sets the Routing Configuration indicating the associated
        /// and propagated route tables on this connection.
        /// </summary>
        [JsonProperty(PropertyName = "properties.routingConfiguration")]
        public RoutingConfiguration RoutingConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the name of the resource.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Asn != null)
            {
                if (Asn > 4294967295)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Asn", 4294967295);
                }
                if (Asn < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Asn", 0);
                }
            }
            if (TunnelIdentifier != null)
            {
                if (TunnelIdentifier > 4294967295)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "TunnelIdentifier", 4294967295);
                }
                if (TunnelIdentifier < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "TunnelIdentifier", 0);
                }
            }
        }
    }
}
