// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Load balancer probe resource.
    /// </summary>
    public partial class ProbePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ProbePropertiesFormat class.
        /// </summary>
        public ProbePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ProbePropertiesFormat class.
        /// </summary>

        /// <param name="loadBalancingRules">The load balancer rules that use this probe.
        /// </param>

        /// <param name="protocol">The protocol of the end point. If &#39;Tcp&#39; is specified, a received ACK is
        /// required for the probe to be successful. If &#39;Http&#39; or &#39;Https&#39; is specified,
        /// a 200 OK response from the specifies URI is required for the probe to be
        /// successful.
        /// Possible values include: &#39;Http&#39;, &#39;Tcp&#39;, &#39;Https&#39;</param>

        /// <param name="port">The port for communicating the probe. Possible values range from 1 to
        /// 65535, inclusive.
        /// </param>

        /// <param name="intervalInSeconds">The interval, in seconds, for how frequently to probe the endpoint for
        /// health status. Typically, the interval is slightly less than half the
        /// allocated timeout period (in seconds) which allows two full probes before
        /// taking the instance out of rotation. The default value is 15, the minimum
        /// value is 5.
        /// </param>

        /// <param name="numberOfProbes">The number of probes where if no response, will result in stopping further
        /// traffic from being delivered to the endpoint. This values allows endpoints
        /// to be taken out of rotation faster or slower than the typical times used in
        /// Azure.
        /// </param>

        /// <param name="probeThreshold">The number of consecutive successful or failed probes in order to allow or
        /// deny traffic from being delivered to this endpoint. After failing the
        /// number of consecutive probes equal to this value, the endpoint will be
        /// taken out of rotation and require the same number of successful consecutive
        /// probes to be placed back in rotation.
        /// </param>

        /// <param name="requestPath">The URI used for requesting health status from the VM. Path is required if
        /// a protocol is set to http. Otherwise, it is not allowed. There is no
        /// default value.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the probe resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public ProbePropertiesFormat(string protocol, int port, System.Collections.Generic.IList<SubResource> loadBalancingRules = default(System.Collections.Generic.IList<SubResource>), int? intervalInSeconds = default(int?), int? numberOfProbes = default(int?), int? probeThreshold = default(int?), string requestPath = default(string), string provisioningState = default(string))

        {
            this.LoadBalancingRules = loadBalancingRules;
            this.Protocol = protocol;
            this.Port = port;
            this.IntervalInSeconds = intervalInSeconds;
            this.NumberOfProbes = numberOfProbes;
            this.ProbeThreshold = probeThreshold;
            this.RequestPath = requestPath;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the load balancer rules that use this probe.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancingRules")]
        public System.Collections.Generic.IList<SubResource> LoadBalancingRules {get; private set; }

        /// <summary>
        /// Gets or sets the protocol of the end point. If &#39;Tcp&#39; is specified, a
        /// received ACK is required for the probe to be successful. If &#39;Http&#39; or
        /// &#39;Https&#39; is specified, a 200 OK response from the specifies URI is required
        /// for the probe to be successful. Possible values include: &#39;Http&#39;, &#39;Tcp&#39;, &#39;Https&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the port for communicating the probe. Possible values range
        /// from 1 to 65535, inclusive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "port")]
        public int Port {get; set; }

        /// <summary>
        /// Gets or sets the interval, in seconds, for how frequently to probe the
        /// endpoint for health status. Typically, the interval is slightly less than
        /// half the allocated timeout period (in seconds) which allows two full probes
        /// before taking the instance out of rotation. The default value is 15, the
        /// minimum value is 5.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "intervalInSeconds")]
        public int? IntervalInSeconds {get; set; }

        /// <summary>
        /// Gets or sets the number of probes where if no response, will result in
        /// stopping further traffic from being delivered to the endpoint. This values
        /// allows endpoints to be taken out of rotation faster or slower than the
        /// typical times used in Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfProbes")]
        public int? NumberOfProbes {get; set; }

        /// <summary>
        /// Gets or sets the number of consecutive successful or failed probes in order
        /// to allow or deny traffic from being delivered to this endpoint. After
        /// failing the number of consecutive probes equal to this value, the endpoint
        /// will be taken out of rotation and require the same number of successful
        /// consecutive probes to be placed back in rotation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probeThreshold")]
        public int? ProbeThreshold {get; set; }

        /// <summary>
        /// Gets or sets the URI used for requesting health status from the VM. Path is
        /// required if a protocol is set to http. Otherwise, it is not allowed. There
        /// is no default value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestPath")]
        public string RequestPath {get; set; }

        /// <summary>
        /// Gets the provisioning state of the probe resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }




        }
    }
}