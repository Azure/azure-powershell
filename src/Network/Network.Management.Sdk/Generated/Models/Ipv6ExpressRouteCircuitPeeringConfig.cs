// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Contains IPv6 peering config.
    /// </summary>
    public partial class Ipv6ExpressRouteCircuitPeeringConfig
    {
        /// <summary>
        /// Initializes a new instance of the Ipv6ExpressRouteCircuitPeeringConfig class.
        /// </summary>
        public Ipv6ExpressRouteCircuitPeeringConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Ipv6ExpressRouteCircuitPeeringConfig class.
        /// </summary>

        /// <param name="primaryPeerAddressPrefix">The primary address prefix.
        /// </param>

        /// <param name="secondaryPeerAddressPrefix">The secondary address prefix.
        /// </param>

        /// <param name="microsoftPeeringConfig">The Microsoft peering configuration.
        /// </param>

        /// <param name="routeFilter">The reference to the RouteFilter resource.
        /// </param>

        /// <param name="state">The state of peering.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>
        public Ipv6ExpressRouteCircuitPeeringConfig(string primaryPeerAddressPrefix = default(string), string secondaryPeerAddressPrefix = default(string), ExpressRouteCircuitPeeringConfig microsoftPeeringConfig = default(ExpressRouteCircuitPeeringConfig), SubResource routeFilter = default(SubResource), string state = default(string))

        {
            this.PrimaryPeerAddressPrefix = primaryPeerAddressPrefix;
            this.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            this.MicrosoftPeeringConfig = microsoftPeeringConfig;
            this.RouteFilter = routeFilter;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the primary address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryPeerAddressPrefix")]
        public string PrimaryPeerAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the secondary address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryPeerAddressPrefix")]
        public string SecondaryPeerAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the Microsoft peering configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "microsoftPeeringConfig")]
        public ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig {get; set; }

        /// <summary>
        /// Gets or sets the reference to the RouteFilter resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routeFilter")]
        public SubResource RouteFilter {get; set; }

        /// <summary>
        /// Gets or sets the state of peering. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }
    }
}