// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Service Endpoint Policy resource.
    /// </summary>
    public partial class ServiceEndpointPolicyPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ServiceEndpointPolicyPropertiesFormat class.
        /// </summary>
        public ServiceEndpointPolicyPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServiceEndpointPolicyPropertiesFormat class.
        /// </summary>

        /// <param name="serviceEndpointPolicyDefinitions">A collection of service endpoint policy definitions of the service endpoint
        /// policy.
        /// </param>

        /// <param name="subnets">A collection of references to subnets.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the service endpoint policy resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the service endpoint policy resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="serviceAlias">The alias indicating if the policy belongs to a service
        /// </param>

        /// <param name="contextualServiceEndpointPolicies">A collection of contextual service endpoint policy.
        /// </param>
        public ServiceEndpointPolicyPropertiesFormat(System.Collections.Generic.IList<ServiceEndpointPolicyDefinition> serviceEndpointPolicyDefinitions = default(System.Collections.Generic.IList<ServiceEndpointPolicyDefinition>), System.Collections.Generic.IList<Subnet> subnets = default(System.Collections.Generic.IList<Subnet>), string resourceGuid = default(string), string provisioningState = default(string), string serviceAlias = default(string), System.Collections.Generic.IList<string> contextualServiceEndpointPolicies = default(System.Collections.Generic.IList<string>))

        {
            this.ServiceEndpointPolicyDefinitions = serviceEndpointPolicyDefinitions;
            this.Subnets = subnets;
            this.ResourceGuid = resourceGuid;
            this.ProvisioningState = provisioningState;
            this.ServiceAlias = serviceAlias;
            this.ContextualServiceEndpointPolicies = contextualServiceEndpointPolicies;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a collection of service endpoint policy definitions of the
        /// service endpoint policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceEndpointPolicyDefinitions")]
        public System.Collections.Generic.IList<ServiceEndpointPolicyDefinition> ServiceEndpointPolicyDefinitions {get; set; }

        /// <summary>
        /// Gets a collection of references to subnets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnets")]
        public System.Collections.Generic.IList<Subnet> Subnets {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the service endpoint policy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the service endpoint policy resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the alias indicating if the policy belongs to a service
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceAlias")]
        public string ServiceAlias {get; set; }

        /// <summary>
        /// Gets or sets a collection of contextual service endpoint policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contextualServiceEndpointPolicies")]
        public System.Collections.Generic.IList<string> ContextualServiceEndpointPolicies {get; set; }
    }
}