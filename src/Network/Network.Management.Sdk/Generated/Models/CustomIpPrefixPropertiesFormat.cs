// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Custom IP prefix properties.
    /// </summary>
    public partial class CustomIpPrefixPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the CustomIpPrefixPropertiesFormat class.
        /// </summary>
        public CustomIpPrefixPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CustomIpPrefixPropertiesFormat class.
        /// </summary>

        /// <param name="asn">The ASN for CIDR advertising. Should be an integer as string.
        /// </param>

        /// <param name="cidr">The prefix range in CIDR notation. Should include the start address and the
        /// prefix length.
        /// </param>

        /// <param name="signedMessage">Signed message for WAN validation.
        /// </param>

        /// <param name="authorizationMessage">Authorization message for WAN validation.
        /// </param>

        /// <param name="customIPPrefixParent">The Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
        /// </param>

        /// <param name="childCustomIPPrefixes">The list of all Children for IPv6 /48 CustomIpPrefix.
        /// </param>

        /// <param name="commissionedState">The commissioned state of the Custom IP Prefix.
        /// Possible values include: &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;Commissioning&#39;,
        /// &#39;CommissionedNoInternetAdvertise&#39;, &#39;Commissioned&#39;, &#39;Decommissioning&#39;,
        /// &#39;Deprovisioning&#39;, &#39;Deprovisioned&#39;</param>

        /// <param name="expressRouteAdvertise">Whether to do express route advertise.
        /// </param>

        /// <param name="geo">The Geo for CIDR advertising. Should be an Geo code.
        /// Possible values include: &#39;GLOBAL&#39;, &#39;AFRI&#39;, &#39;APAC&#39;, &#39;EURO&#39;, &#39;LATAM&#39;, &#39;NAM&#39;,
        /// &#39;ME&#39;, &#39;OCEANIA&#39;, &#39;AQ&#39;</param>

        /// <param name="noInternetAdvertise">Whether to Advertise the range to Internet.
        /// </param>

        /// <param name="prefixType">Type of custom IP prefix. Should be Singular, Parent, or Child.
        /// Possible values include: &#39;Singular&#39;, &#39;Parent&#39;, &#39;Child&#39;</param>

        /// <param name="publicIPPrefixes">The list of all referenced PublicIpPrefixes.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the custom IP prefix resource.
        /// </param>

        /// <param name="failedReason">The reason why resource is in failed state.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the custom IP prefix resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public CustomIpPrefixPropertiesFormat(string asn = default(string), string cidr = default(string), string signedMessage = default(string), string authorizationMessage = default(string), SubResource customIPPrefixParent = default(SubResource), System.Collections.Generic.IList<SubResource> childCustomIPPrefixes = default(System.Collections.Generic.IList<SubResource>), string commissionedState = default(string), bool? expressRouteAdvertise = default(bool?), string geo = default(string), bool? noInternetAdvertise = default(bool?), string prefixType = default(string), System.Collections.Generic.IList<SubResource> publicIPPrefixes = default(System.Collections.Generic.IList<SubResource>), string resourceGuid = default(string), string failedReason = default(string), string provisioningState = default(string))

        {
            this.Asn = asn;
            this.Cidr = cidr;
            this.SignedMessage = signedMessage;
            this.AuthorizationMessage = authorizationMessage;
            this.CustomIPPrefixParent = customIPPrefixParent;
            this.ChildCustomIPPrefixes = childCustomIPPrefixes;
            this.CommissionedState = commissionedState;
            this.ExpressRouteAdvertise = expressRouteAdvertise;
            this.Geo = geo;
            this.NoInternetAdvertise = noInternetAdvertise;
            this.PrefixType = prefixType;
            this.PublicIPPrefixes = publicIPPrefixes;
            this.ResourceGuid = resourceGuid;
            this.FailedReason = failedReason;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ASN for CIDR advertising. Should be an integer as string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "asn")]
        public string Asn {get; set; }

        /// <summary>
        /// Gets or sets the prefix range in CIDR notation. Should include the start
        /// address and the prefix length.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "cidr")]
        public string Cidr {get; set; }

        /// <summary>
        /// Gets or sets signed message for WAN validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signedMessage")]
        public string SignedMessage {get; set; }

        /// <summary>
        /// Gets or sets authorization message for WAN validation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationMessage")]
        public string AuthorizationMessage {get; set; }

        /// <summary>
        /// Gets or sets the Parent CustomIpPrefix for IPv6 /64 CustomIpPrefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customIpPrefixParent")]
        public SubResource CustomIPPrefixParent {get; set; }

        /// <summary>
        /// Gets the list of all Children for IPv6 /48 CustomIpPrefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "childCustomIpPrefixes")]
        public System.Collections.Generic.IList<SubResource> ChildCustomIPPrefixes {get; private set; }

        /// <summary>
        /// Gets or sets the commissioned state of the Custom IP Prefix. Possible values include: &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;Commissioning&#39;, &#39;CommissionedNoInternetAdvertise&#39;, &#39;Commissioned&#39;, &#39;Decommissioning&#39;, &#39;Deprovisioning&#39;, &#39;Deprovisioned&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commissionedState")]
        public string CommissionedState {get; set; }

        /// <summary>
        /// Gets or sets whether to do express route advertise.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expressRouteAdvertise")]
        public bool? ExpressRouteAdvertise {get; set; }

        /// <summary>
        /// Gets or sets the Geo for CIDR advertising. Should be an Geo code. Possible values include: &#39;GLOBAL&#39;, &#39;AFRI&#39;, &#39;APAC&#39;, &#39;EURO&#39;, &#39;LATAM&#39;, &#39;NAM&#39;, &#39;ME&#39;, &#39;OCEANIA&#39;, &#39;AQ&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "geo")]
        public string Geo {get; set; }

        /// <summary>
        /// Gets or sets whether to Advertise the range to Internet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "noInternetAdvertise")]
        public bool? NoInternetAdvertise {get; set; }

        /// <summary>
        /// Gets or sets type of custom IP prefix. Should be Singular, Parent, or
        /// Child. Possible values include: &#39;Singular&#39;, &#39;Parent&#39;, &#39;Child&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "prefixType")]
        public string PrefixType {get; set; }

        /// <summary>
        /// Gets the list of all referenced PublicIpPrefixes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicIpPrefixes")]
        public System.Collections.Generic.IList<SubResource> PublicIPPrefixes {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the custom IP prefix resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets the reason why resource is in failed state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failedReason")]
        public string FailedReason {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the custom IP prefix resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}