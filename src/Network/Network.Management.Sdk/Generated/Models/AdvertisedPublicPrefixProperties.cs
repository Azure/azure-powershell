// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Prefix properties required to perform validation using openssl signature.
    /// </summary>
    public partial class AdvertisedPublicPrefixProperties
    {
        /// <summary>
        /// Initializes a new instance of the AdvertisedPublicPrefixProperties class.
        /// </summary>
        public AdvertisedPublicPrefixProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdvertisedPublicPrefixProperties class.
        /// </summary>

        /// <param name="prefix">Advertised Public Prefix.
        /// </param>

        /// <param name="validationId">Validation string that contains circuit peering info.
        /// </param>

        /// <param name="signature">Signed string generated by encrypting validationId with a private key.
        /// </param>

        /// <param name="validationState">Advertised Public Prefix State that denotes if the prefix is validated or
        /// not.
        /// Possible values include: &#39;NotConfigured&#39;, &#39;Configuring&#39;, &#39;Configured&#39;,
        /// &#39;ValidationNeeded&#39;, &#39;ValidationFailed&#39;, &#39;ManualValidationNeeded&#39;,
        /// &#39;AsnValidationFailed&#39;, &#39;CertificateMissingInRoutingRegistry&#39;,
        /// &#39;InvalidSignatureEncoding&#39;, &#39;SignatureVerificationFailed&#39;</param>
        public AdvertisedPublicPrefixProperties(string prefix = default(string), string validationId = default(string), string signature = default(string), string validationState = default(string))

        {
            this.Prefix = prefix;
            this.ValidationId = validationId;
            this.Signature = signature;
            this.ValidationState = validationState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets advertised Public Prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "prefix")]
        public string Prefix {get; set; }

        /// <summary>
        /// Gets or sets validation string that contains circuit peering info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationId")]
        public string ValidationId {get; set; }

        /// <summary>
        /// Gets or sets signed string generated by encrypting validationId with a
        /// private key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "signature")]
        public string Signature {get; set; }

        /// <summary>
        /// Gets advertised Public Prefix State that denotes if the prefix is validated
        /// or not. Possible values include: &#39;NotConfigured&#39;, &#39;Configuring&#39;, &#39;Configured&#39;, &#39;ValidationNeeded&#39;, &#39;ValidationFailed&#39;, &#39;ManualValidationNeeded&#39;, &#39;AsnValidationFailed&#39;, &#39;CertificateMissingInRoutingRegistry&#39;, &#39;InvalidSignatureEncoding&#39;, &#39;SignatureVerificationFailed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validationState")]
        public string ValidationState {get; private set; }
    }
}