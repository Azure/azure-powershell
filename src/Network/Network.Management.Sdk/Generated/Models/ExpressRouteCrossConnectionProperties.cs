// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of ExpressRouteCrossConnection.
    /// </summary>
    public partial class ExpressRouteCrossConnectionProperties
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteCrossConnectionProperties class.
        /// </summary>
        public ExpressRouteCrossConnectionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteCrossConnectionProperties class.
        /// </summary>

        /// <param name="primaryAzurePort">The name of the primary port.
        /// </param>

        /// <param name="secondaryAzurePort">The name of the secondary port.
        /// </param>

        /// <param name="sTag">The identifier of the circuit traffic.
        /// </param>

        /// <param name="peeringLocation">The peering location of the ExpressRoute circuit.
        /// </param>

        /// <param name="bandwidthInMbps">The circuit bandwidth In Mbps.
        /// </param>

        /// <param name="expressRouteCircuit">The ExpressRouteCircuit.
        /// </param>

        /// <param name="serviceProviderProvisioningState">The provisioning state of the circuit in the connectivity provider system.
        /// Possible values include: &#39;NotProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;,
        /// &#39;Deprovisioning&#39;</param>

        /// <param name="serviceProviderNotes">Additional read only notes set by the connectivity provider.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route cross connection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="peerings">The list of peerings.
        /// </param>
        public ExpressRouteCrossConnectionProperties(string primaryAzurePort = default(string), string secondaryAzurePort = default(string), int? sTag = default(int?), string peeringLocation = default(string), int? bandwidthInMbps = default(int?), ExpressRouteCircuitReference expressRouteCircuit = default(ExpressRouteCircuitReference), string serviceProviderProvisioningState = default(string), string serviceProviderNotes = default(string), string provisioningState = default(string), System.Collections.Generic.IList<ExpressRouteCrossConnectionPeering> peerings = default(System.Collections.Generic.IList<ExpressRouteCrossConnectionPeering>))

        {
            this.PrimaryAzurePort = primaryAzurePort;
            this.SecondaryAzurePort = secondaryAzurePort;
            this.STag = sTag;
            this.PeeringLocation = peeringLocation;
            this.BandwidthInMbps = bandwidthInMbps;
            this.ExpressRouteCircuit = expressRouteCircuit;
            this.ServiceProviderProvisioningState = serviceProviderProvisioningState;
            this.ServiceProviderNotes = serviceProviderNotes;
            this.ProvisioningState = provisioningState;
            this.Peerings = peerings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the name of the primary port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryAzurePort")]
        public string PrimaryAzurePort {get; private set; }

        /// <summary>
        /// Gets the name of the secondary port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryAzurePort")]
        public string SecondaryAzurePort {get; private set; }

        /// <summary>
        /// Gets the identifier of the circuit traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sTag")]
        public int? STag {get; private set; }

        /// <summary>
        /// Gets the peering location of the ExpressRoute circuit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peeringLocation")]
        public string PeeringLocation {get; private set; }

        /// <summary>
        /// Gets the circuit bandwidth In Mbps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bandwidthInMbps")]
        public int? BandwidthInMbps {get; private set; }

        /// <summary>
        /// Gets or sets the ExpressRouteCircuit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expressRouteCircuit")]
        public ExpressRouteCircuitReference ExpressRouteCircuit {get; set; }

        /// <summary>
        /// Gets or sets the provisioning state of the circuit in the connectivity
        /// provider system. Possible values include: &#39;NotProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;Deprovisioning&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceProviderProvisioningState")]
        public string ServiceProviderProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets additional read only notes set by the connectivity provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceProviderNotes")]
        public string ServiceProviderNotes {get; set; }

        /// <summary>
        /// Gets the provisioning state of the express route cross connection resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the list of peerings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerings")]
        public System.Collections.Generic.IList<ExpressRouteCrossConnectionPeering> Peerings {get; set; }
    }
}