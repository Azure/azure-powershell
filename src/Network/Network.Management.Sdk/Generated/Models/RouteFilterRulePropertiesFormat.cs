// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Route Filter Rule Resource.
    /// </summary>
    public partial class RouteFilterRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the RouteFilterRulePropertiesFormat class.
        /// </summary>
        public RouteFilterRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteFilterRulePropertiesFormat class.
        /// </summary>

        /// <param name="access">The access type of the rule.
        /// Possible values include: &#39;Allow&#39;, &#39;Deny&#39;</param>

        /// <param name="communities">The collection for bgp community values to filter on. e.g.
        /// [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
        /// </param>

        /// <param name="provisioningState">The provisioning state of the route filter rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public RouteFilterRulePropertiesFormat(string access, System.Collections.Generic.IList<string> communities, string provisioningState = default(string))

        {
            this.Access = access;
            this.Communities = communities;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for RouteFilterRulePropertiesFormat class.
        /// </summary>
        static RouteFilterRulePropertiesFormat()
        {
            RouteFilterRuleType = "Community";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the access type of the rule. Possible values include: &#39;Allow&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "access")]
        public string Access {get; set; }

        /// <summary>
        /// Gets or sets the collection for bgp community values to filter on. e.g.
        /// [&#39;12076:5010&#39;,&#39;12076:5020&#39;].
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "communities")]
        public System.Collections.Generic.IList<string> Communities {get; set; }

        /// <summary>
        /// Gets the provisioning state of the route filter rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Gets or sets the rule type of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routeFilterRuleType")]
        public static string RouteFilterRuleType {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Access == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Access");
            }
            if (this.Communities == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Communities");
            }




        }
    }
}