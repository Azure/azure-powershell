// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Nat Gateway resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class NatGateway : Resource
    {
        /// <summary>
        /// Initializes a new instance of the NatGateway class.
        /// </summary>
        public NatGateway()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NatGateway class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="sku">The nat gateway SKU.
        /// </param>

        /// <param name="zones">A list of availability zones denoting the zone in which Nat Gateway should
        /// be deployed.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the NAT gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="idleTimeoutInMinutes">The idle timeout of the nat gateway.
        /// </param>

        /// <param name="publicIPAddresses">An array of public ip addresses associated with the nat gateway resource.
        /// </param>

        /// <param name="publicIPPrefixes">An array of public ip prefixes associated with the nat gateway resource.
        /// </param>

        /// <param name="subnets">An array of references to the subnets using this nat gateway resource.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the NAT gateway resource.
        /// </param>
        public NatGateway(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), NatGatewaySku sku = default(NatGatewaySku), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), string etag = default(string), string provisioningState = default(string), int? idleTimeoutInMinutes = default(int?), System.Collections.Generic.IList<SubResource> publicIPAddresses = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> publicIPPrefixes = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> subnets = default(System.Collections.Generic.IList<SubResource>), string resourceGuid = default(string))

        : base(id, name, type, location, tags)
        {
            this.Sku = sku;
            this.Zones = zones;
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            this.PublicIPAddresses = publicIPAddresses;
            this.PublicIPPrefixes = publicIPPrefixes;
            this.Subnets = subnets;
            this.ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the nat gateway SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public NatGatewaySku Sku {get; set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting the zone in which Nat
        /// Gateway should be deployed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the NAT gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the idle timeout of the nat gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }

        /// <summary>
        /// Gets or sets an array of public ip addresses associated with the nat
        /// gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIpAddresses")]
        public System.Collections.Generic.IList<SubResource> PublicIPAddresses {get; set; }

        /// <summary>
        /// Gets or sets an array of public ip prefixes associated with the nat gateway
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIpPrefixes")]
        public System.Collections.Generic.IList<SubResource> PublicIPPrefixes {get; set; }

        /// <summary>
        /// Gets an array of references to the subnets using this nat gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnets")]
        public System.Collections.Generic.IList<SubResource> Subnets {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the NAT gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }
    }
}