// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Connection state snapshot.
    /// </summary>
    public partial class ConnectionStateSnapshot
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionStateSnapshot class.
        /// </summary>
        public ConnectionStateSnapshot()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionStateSnapshot class.
        /// </summary>

        /// <param name="connectionState">The connection state.
        /// Possible values include: &#39;Reachable&#39;, &#39;Unreachable&#39;, &#39;Unknown&#39;</param>

        /// <param name="startTime">The start time of the connection snapshot.
        /// </param>

        /// <param name="endTime">The end time of the connection snapshot.
        /// </param>

        /// <param name="evaluationState">Connectivity analysis evaluation state.
        /// Possible values include: &#39;NotStarted&#39;, &#39;InProgress&#39;, &#39;Completed&#39;</param>

        /// <param name="avgLatencyInMS">Average latency in ms.
        /// </param>

        /// <param name="minLatencyInMS">Minimum latency in ms.
        /// </param>

        /// <param name="maxLatencyInMS">Maximum latency in ms.
        /// </param>

        /// <param name="probesSent">The number of sent probes.
        /// </param>

        /// <param name="probesFailed">The number of failed probes.
        /// </param>

        /// <param name="hops">List of hops between the source and the destination.
        /// </param>
        public ConnectionStateSnapshot(string connectionState = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string evaluationState = default(string), long? avgLatencyInMS = default(long?), long? minLatencyInMS = default(long?), long? maxLatencyInMS = default(long?), long? probesSent = default(long?), long? probesFailed = default(long?), System.Collections.Generic.IList<ConnectivityHop> hops = default(System.Collections.Generic.IList<ConnectivityHop>))

        {
            this.ConnectionState = connectionState;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.EvaluationState = evaluationState;
            this.AvgLatencyInMS = avgLatencyInMS;
            this.MinLatencyInMS = minLatencyInMS;
            this.MaxLatencyInMS = maxLatencyInMS;
            this.ProbesSent = probesSent;
            this.ProbesFailed = probesFailed;
            this.Hops = hops;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the connection state. Possible values include: &#39;Reachable&#39;, &#39;Unreachable&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionState")]
        public string ConnectionState {get; set; }

        /// <summary>
        /// Gets or sets the start time of the connection snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets the end time of the connection snapshot.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; set; }

        /// <summary>
        /// Gets or sets connectivity analysis evaluation state. Possible values include: &#39;NotStarted&#39;, &#39;InProgress&#39;, &#39;Completed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "evaluationState")]
        public string EvaluationState {get; set; }

        /// <summary>
        /// Gets or sets average latency in ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "avgLatencyInMs")]
        public long? AvgLatencyInMS {get; set; }

        /// <summary>
        /// Gets or sets minimum latency in ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minLatencyInMs")]
        public long? MinLatencyInMS {get; set; }

        /// <summary>
        /// Gets or sets maximum latency in ms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxLatencyInMs")]
        public long? MaxLatencyInMS {get; set; }

        /// <summary>
        /// Gets or sets the number of sent probes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probesSent")]
        public long? ProbesSent {get; set; }

        /// <summary>
        /// Gets or sets the number of failed probes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probesFailed")]
        public long? ProbesFailed {get; set; }

        /// <summary>
        /// Gets list of hops between the source and the destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hops")]
        public System.Collections.Generic.IList<ConnectivityHop> Hops {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.AvgLatencyInMS != null)
            {
                if (this.AvgLatencyInMS > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "AvgLatencyInMS", 4294967295);
                }
                if (this.AvgLatencyInMS < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "AvgLatencyInMS", 0);
                }
            }
            if (this.MinLatencyInMS != null)
            {
                if (this.MinLatencyInMS > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MinLatencyInMS", 4294967295);
                }
                if (this.MinLatencyInMS < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MinLatencyInMS", 0);
                }
            }
            if (this.MaxLatencyInMS != null)
            {
                if (this.MaxLatencyInMS > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxLatencyInMS", 4294967295);
                }
                if (this.MaxLatencyInMS < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxLatencyInMS", 0);
                }
            }
            if (this.ProbesSent != null)
            {
                if (this.ProbesSent > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ProbesSent", 4294967295);
                }
                if (this.ProbesSent < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ProbesSent", 0);
                }
            }
            if (this.ProbesFailed != null)
            {
                if (this.ProbesFailed > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ProbesFailed", 4294967295);
                }
                if (this.ProbesFailed < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ProbesFailed", 0);
                }
            }

        }
    }
}