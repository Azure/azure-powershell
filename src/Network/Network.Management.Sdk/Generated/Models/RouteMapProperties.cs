// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of RouteMap resource
    /// </summary>
    public partial class RouteMapProperties
    {
        /// <summary>
        /// Initializes a new instance of the RouteMapProperties class.
        /// </summary>
        public RouteMapProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RouteMapProperties class.
        /// </summary>

        /// <param name="associatedInboundConnections">List of connections which have this RoutMap associated for inbound traffic.
        /// </param>

        /// <param name="associatedOutboundConnections">List of connections which have this RoutMap associated for outbound
        /// traffic.
        /// </param>

        /// <param name="rules">List of RouteMap rules to be applied.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the RouteMap resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public RouteMapProperties(System.Collections.Generic.IList<string> associatedInboundConnections = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> associatedOutboundConnections = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<RouteMapRule> rules = default(System.Collections.Generic.IList<RouteMapRule>), string provisioningState = default(string))

        {
            this.AssociatedInboundConnections = associatedInboundConnections;
            this.AssociatedOutboundConnections = associatedOutboundConnections;
            this.Rules = rules;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of connections which have this RoutMap associated for
        /// inbound traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "associatedInboundConnections")]
        public System.Collections.Generic.IList<string> AssociatedInboundConnections {get; set; }

        /// <summary>
        /// Gets or sets list of connections which have this RoutMap associated for
        /// outbound traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "associatedOutboundConnections")]
        public System.Collections.Generic.IList<string> AssociatedOutboundConnections {get; set; }

        /// <summary>
        /// Gets or sets list of RouteMap rules to be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rules")]
        public System.Collections.Generic.IList<RouteMapRule> Rules {get; set; }

        /// <summary>
        /// Gets the provisioning state of the RouteMap resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}