// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Inbound NAT pool of the load balancer.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class InboundNatPool : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the InboundNatPool class.
        /// </summary>
        public InboundNatPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InboundNatPool class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within the set of inbound NAT pools
        /// used by the load balancer. This name can be used to access the resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the inbound NAT pool resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="frontendIPConfiguration">A reference to frontend IP addresses.
        /// </param>

        /// <param name="protocol">The reference to the transport protocol used by the inbound NAT pool.
        /// Possible values include: &#39;Udp&#39;, &#39;Tcp&#39;, &#39;All&#39;</param>

        /// <param name="frontendPortRangeStart">The first port number in the range of external ports that will be used to
        /// provide Inbound Nat to NICs associated with a load balancer. Acceptable
        /// values range between 1 and 65534.
        /// </param>

        /// <param name="frontendPortRangeEnd">The last port number in the range of external ports that will be used to
        /// provide Inbound Nat to NICs associated with a load balancer. Acceptable
        /// values range between 1 and 65535.
        /// </param>

        /// <param name="backendPort">The port used for internal connections on the endpoint. Acceptable values
        /// are between 1 and 65535.
        /// </param>

        /// <param name="idleTimeoutInMinutes">The timeout for the TCP idle connection. The value can be set between 4 and
        /// 30 minutes. The default value is 4 minutes. This element is only used when
        /// the protocol is set to TCP.
        /// </param>

        /// <param name="enableFloatingIP">Configures a virtual machine&#39;s endpoint for the floating IP capability
        /// required to configure a SQL AlwaysOn Availability Group. This setting is
        /// required when using the SQL AlwaysOn Availability Groups in SQL server.
        /// This setting can&#39;t be changed after you create the endpoint.
        /// </param>

        /// <param name="enableTcpReset">Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
        /// connection termination. This element is only used when the protocol is set
        /// to TCP.
        /// </param>
        public InboundNatPool(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), SubResource frontendIPConfiguration = default(SubResource), string protocol = default(string), int? frontendPortRangeStart = default(int?), int? frontendPortRangeEnd = default(int?), int? backendPort = default(int?), int? idleTimeoutInMinutes = default(int?), bool? enableFloatingIP = default(bool?), bool? enableTcpReset = default(bool?))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.FrontendIPConfiguration = frontendIPConfiguration;
            this.Protocol = protocol;
            this.FrontendPortRangeStart = frontendPortRangeStart;
            this.FrontendPortRangeEnd = frontendPortRangeEnd;
            this.BackendPort = backendPort;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            this.EnableFloatingIP = enableFloatingIP;
            this.EnableTcpReset = enableTcpReset;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within the set of
        /// inbound NAT pools used by the load balancer. This name can be used to
        /// access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the inbound NAT pool resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets a reference to frontend IP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfiguration")]
        public SubResource FrontendIPConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the reference to the transport protocol used by the inbound
        /// NAT pool. Possible values include: &#39;Udp&#39;, &#39;Tcp&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the first port number in the range of external ports that will
        /// be used to provide Inbound Nat to NICs associated with a load balancer.
        /// Acceptable values range between 1 and 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPortRangeStart")]
        public int? FrontendPortRangeStart {get; set; }

        /// <summary>
        /// Gets or sets the last port number in the range of external ports that will
        /// be used to provide Inbound Nat to NICs associated with a load balancer.
        /// Acceptable values range between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPortRangeEnd")]
        public int? FrontendPortRangeEnd {get; set; }

        /// <summary>
        /// Gets or sets the port used for internal connections on the endpoint.
        /// Acceptable values are between 1 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendPort")]
        public int? BackendPort {get; set; }

        /// <summary>
        /// Gets or sets the timeout for the TCP idle connection. The value can be set
        /// between 4 and 30 minutes. The default value is 4 minutes. This element is
        /// only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }

        /// <summary>
        /// Gets or sets configures a virtual machine&#39;s endpoint for the floating IP
        /// capability required to configure a SQL AlwaysOn Availability Group. This
        /// setting is required when using the SQL AlwaysOn Availability Groups in SQL
        /// server. This setting can&#39;t be changed after you create the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableFloatingIP")]
        public bool? EnableFloatingIP {get; set; }

        /// <summary>
        /// Gets or sets receive bidirectional TCP Reset on TCP flow idle timeout or
        /// unexpected connection termination. This element is only used when the
        /// protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableTcpReset")]
        public bool? EnableTcpReset {get; set; }
    }
}