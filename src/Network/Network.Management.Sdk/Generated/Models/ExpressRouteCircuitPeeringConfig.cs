// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies the peering configuration.
    /// </summary>
    public partial class ExpressRouteCircuitPeeringConfig
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitPeeringConfig class.
        /// </summary>
        public ExpressRouteCircuitPeeringConfig()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitPeeringConfig class.
        /// </summary>

        /// <param name="advertisedPublicPrefixes">The reference to AdvertisedPublicPrefixes.
        /// </param>

        /// <param name="advertisedCommunities">The communities of bgp peering. Specified for microsoft peering.
        /// </param>

        /// <param name="advertisedPublicPrefixesState">The advertised public prefix state of the Peering resource.
        /// Possible values include: &#39;NotConfigured&#39;, &#39;Configuring&#39;, &#39;Configured&#39;,
        /// &#39;ValidationNeeded&#39;</param>

        /// <param name="legacyMode">The legacy mode of the peering.
        /// </param>

        /// <param name="customerAsn">The CustomerASN of the peering.
        /// </param>

        /// <param name="routingRegistryName">The RoutingRegistryName of the configuration.
        /// </param>
        public ExpressRouteCircuitPeeringConfig(System.Collections.Generic.IList<string> advertisedPublicPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> advertisedCommunities = default(System.Collections.Generic.IList<string>), string advertisedPublicPrefixesState = default(string), int? legacyMode = default(int?), int? customerAsn = default(int?), string routingRegistryName = default(string))

        {
            this.AdvertisedPublicPrefixes = advertisedPublicPrefixes;
            this.AdvertisedCommunities = advertisedCommunities;
            this.AdvertisedPublicPrefixesState = advertisedPublicPrefixesState;
            this.LegacyMode = legacyMode;
            this.CustomerAsn = customerAsn;
            this.RoutingRegistryName = routingRegistryName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the reference to AdvertisedPublicPrefixes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "advertisedPublicPrefixes")]
        public System.Collections.Generic.IList<string> AdvertisedPublicPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the communities of bgp peering. Specified for microsoft
        /// peering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "advertisedCommunities")]
        public System.Collections.Generic.IList<string> AdvertisedCommunities {get; set; }

        /// <summary>
        /// Gets the advertised public prefix state of the Peering resource. Possible values include: &#39;NotConfigured&#39;, &#39;Configuring&#39;, &#39;Configured&#39;, &#39;ValidationNeeded&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "advertisedPublicPrefixesState")]
        public string AdvertisedPublicPrefixesState {get; private set; }

        /// <summary>
        /// Gets or sets the legacy mode of the peering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "legacyMode")]
        public int? LegacyMode {get; set; }

        /// <summary>
        /// Gets or sets the CustomerASN of the peering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customerASN")]
        public int? CustomerAsn {get; set; }

        /// <summary>
        /// Gets or sets the RoutingRegistryName of the configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingRegistryName")]
        public string RoutingRegistryName {get; set; }
    }
}