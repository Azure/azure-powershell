// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Definition of the ExpressRoutePorts peering location resource.
    /// </summary>
    /// <remarks>
    /// Definition of the ExpressRoutePorts peering location resource.
    /// </remarks>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ExpressRoutePortsLocation : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRoutePortsLocation class.
        /// </summary>
        public ExpressRoutePortsLocation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRoutePortsLocation class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route port location resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="address">Address of peering location.
        /// </param>

        /// <param name="contact">Contact details of peering locations.
        /// </param>

        /// <param name="availableBandwidths">The inventory of available ExpressRoutePort bandwidths.
        /// </param>
        public ExpressRoutePortsLocation(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string provisioningState = default(string), string address = default(string), string contact = default(string), System.Collections.Generic.IList<ExpressRoutePortsLocationBandwidths> availableBandwidths = default(System.Collections.Generic.IList<ExpressRoutePortsLocationBandwidths>))

        : base(id, name, type, location, tags)
        {
            this.ProvisioningState = provisioningState;
            this.Address = address;
            this.Contact = contact;
            this.AvailableBandwidths = availableBandwidths;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioning state of the express route port location resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets address of peering location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.address")]
        public string Address {get; private set; }

        /// <summary>
        /// Gets contact details of peering locations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contact")]
        public string Contact {get; private set; }

        /// <summary>
        /// Gets or sets the inventory of available ExpressRoutePort bandwidths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.availableBandwidths")]
        public System.Collections.Generic.IList<ExpressRoutePortsLocationBandwidths> AvailableBandwidths {get; set; }
    }
}