// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// RouteTable route.
    /// </summary>
    public partial class HubRoute
    {
        /// <summary>
        /// Initializes a new instance of the HubRoute class.
        /// </summary>
        public HubRoute()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HubRoute class.
        /// </summary>

        /// <param name="name">The name of the Route that is unique within a RouteTable. This name can be
        /// used to access this route.
        /// </param>

        /// <param name="destinationType">The type of destinations (eg: CIDR, ResourceId, Service).
        /// </param>

        /// <param name="destinations">List of all destinations.
        /// </param>

        /// <param name="nextHopType">The type of next hop (eg: ResourceId).
        /// </param>

        /// <param name="nextHop">NextHop resource ID.
        /// </param>
        public HubRoute(string name, string destinationType, System.Collections.Generic.IList<string> destinations, string nextHopType, string nextHop)

        {
            this.Name = name;
            this.DestinationType = destinationType;
            this.Destinations = destinations;
            this.NextHopType = nextHopType;
            this.NextHop = nextHop;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the Route that is unique within a RouteTable. This
        /// name can be used to access this route.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the type of destinations (eg: CIDR, ResourceId, Service).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationType")]
        public string DestinationType {get; set; }

        /// <summary>
        /// Gets or sets list of all destinations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinations")]
        public System.Collections.Generic.IList<string> Destinations {get; set; }

        /// <summary>
        /// Gets or sets the type of next hop (eg: ResourceId).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextHopType")]
        public string NextHopType {get; set; }

        /// <summary>
        /// Gets or sets nextHop resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextHop")]
        public string NextHop {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.DestinationType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationType");
            }
            if (this.Destinations == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Destinations");
            }
            if (this.NextHopType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NextHopType");
            }
            if (this.NextHop == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NextHop");
            }





        }
    }
}