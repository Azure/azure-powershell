// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// An IPSec Policy configuration for a virtual network gateway connection.
    /// </summary>
    public partial class IpsecPolicy
    {
        /// <summary>
        /// Initializes a new instance of the IpsecPolicy class.
        /// </summary>
        public IpsecPolicy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpsecPolicy class.
        /// </summary>

        /// <param name="saLifeTimeSeconds">The IPSec Security Association (also called Quick Mode or Phase 2 SA)
        /// lifetime in seconds for a site to site VPN tunnel.
        /// </param>

        /// <param name="saDataSizeKilobytes">The IPSec Security Association (also called Quick Mode or Phase 2 SA)
        /// payload size in KB for a site to site VPN tunnel.
        /// </param>

        /// <param name="ipsecEncryption">The IPSec encryption algorithm (IKE phase 1).
        /// Possible values include: &#39;None&#39;, &#39;DES&#39;, &#39;DES3&#39;, &#39;AES128&#39;, &#39;AES192&#39;,
        /// &#39;AES256&#39;, &#39;GCMAES128&#39;, &#39;GCMAES192&#39;, &#39;GCMAES256&#39;</param>

        /// <param name="ipsecIntegrity">The IPSec integrity algorithm (IKE phase 1).
        /// Possible values include: &#39;MD5&#39;, &#39;SHA1&#39;, &#39;SHA256&#39;, &#39;GCMAES128&#39;, &#39;GCMAES192&#39;,
        /// &#39;GCMAES256&#39;</param>

        /// <param name="ikeEncryption">The IKE encryption algorithm (IKE phase 2).
        /// Possible values include: &#39;DES&#39;, &#39;DES3&#39;, &#39;AES128&#39;, &#39;AES192&#39;, &#39;AES256&#39;,
        /// &#39;GCMAES256&#39;, &#39;GCMAES128&#39;</param>

        /// <param name="ikeIntegrity">The IKE integrity algorithm (IKE phase 2).
        /// Possible values include: &#39;MD5&#39;, &#39;SHA1&#39;, &#39;SHA256&#39;, &#39;SHA384&#39;, &#39;GCMAES256&#39;,
        /// &#39;GCMAES128&#39;</param>

        /// <param name="dhGroup">The DH Group used in IKE Phase 1 for initial SA.
        /// Possible values include: &#39;None&#39;, &#39;DHGroup1&#39;, &#39;DHGroup2&#39;, &#39;DHGroup14&#39;,
        /// &#39;DHGroup2048&#39;, &#39;ECP256&#39;, &#39;ECP384&#39;, &#39;DHGroup24&#39;</param>

        /// <param name="pfsGroup">The Pfs Group used in IKE Phase 2 for new child SA.
        /// Possible values include: &#39;None&#39;, &#39;PFS1&#39;, &#39;PFS2&#39;, &#39;PFS2048&#39;, &#39;ECP256&#39;,
        /// &#39;ECP384&#39;, &#39;PFS24&#39;, &#39;PFS14&#39;, &#39;PFSMM&#39;</param>
        public IpsecPolicy(int saLifeTimeSeconds, int saDataSizeKilobytes, string ipsecEncryption, string ipsecIntegrity, string ikeEncryption, string ikeIntegrity, string dhGroup, string pfsGroup)

        {
            this.SaLifeTimeSeconds = saLifeTimeSeconds;
            this.SaDataSizeKilobytes = saDataSizeKilobytes;
            this.IpsecEncryption = ipsecEncryption;
            this.IpsecIntegrity = ipsecIntegrity;
            this.IkeEncryption = ikeEncryption;
            this.IkeIntegrity = ikeIntegrity;
            this.DhGroup = dhGroup;
            this.PfsGroup = pfsGroup;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the IPSec Security Association (also called Quick Mode or
        /// Phase 2 SA) lifetime in seconds for a site to site VPN tunnel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "saLifeTimeSeconds")]
        public int SaLifeTimeSeconds {get; set; }

        /// <summary>
        /// Gets or sets the IPSec Security Association (also called Quick Mode or
        /// Phase 2 SA) payload size in KB for a site to site VPN tunnel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "saDataSizeKilobytes")]
        public int SaDataSizeKilobytes {get; set; }

        /// <summary>
        /// Gets or sets the IPSec encryption algorithm (IKE phase 1). Possible values include: &#39;None&#39;, &#39;DES&#39;, &#39;DES3&#39;, &#39;AES128&#39;, &#39;AES192&#39;, &#39;AES256&#39;, &#39;GCMAES128&#39;, &#39;GCMAES192&#39;, &#39;GCMAES256&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipsecEncryption")]
        public string IpsecEncryption {get; set; }

        /// <summary>
        /// Gets or sets the IPSec integrity algorithm (IKE phase 1). Possible values include: &#39;MD5&#39;, &#39;SHA1&#39;, &#39;SHA256&#39;, &#39;GCMAES128&#39;, &#39;GCMAES192&#39;, &#39;GCMAES256&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipsecIntegrity")]
        public string IpsecIntegrity {get; set; }

        /// <summary>
        /// Gets or sets the IKE encryption algorithm (IKE phase 2). Possible values include: &#39;DES&#39;, &#39;DES3&#39;, &#39;AES128&#39;, &#39;AES192&#39;, &#39;AES256&#39;, &#39;GCMAES256&#39;, &#39;GCMAES128&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ikeEncryption")]
        public string IkeEncryption {get; set; }

        /// <summary>
        /// Gets or sets the IKE integrity algorithm (IKE phase 2). Possible values include: &#39;MD5&#39;, &#39;SHA1&#39;, &#39;SHA256&#39;, &#39;SHA384&#39;, &#39;GCMAES256&#39;, &#39;GCMAES128&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ikeIntegrity")]
        public string IkeIntegrity {get; set; }

        /// <summary>
        /// Gets or sets the DH Group used in IKE Phase 1 for initial SA. Possible values include: &#39;None&#39;, &#39;DHGroup1&#39;, &#39;DHGroup2&#39;, &#39;DHGroup14&#39;, &#39;DHGroup2048&#39;, &#39;ECP256&#39;, &#39;ECP384&#39;, &#39;DHGroup24&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dhGroup")]
        public string DhGroup {get; set; }

        /// <summary>
        /// Gets or sets the Pfs Group used in IKE Phase 2 for new child SA. Possible values include: &#39;None&#39;, &#39;PFS1&#39;, &#39;PFS2&#39;, &#39;PFS2048&#39;, &#39;ECP256&#39;, &#39;ECP384&#39;, &#39;PFS24&#39;, &#39;PFS14&#39;, &#39;PFSMM&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pfsGroup")]
        public string PfsGroup {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.IpsecEncryption == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IpsecEncryption");
            }
            if (this.IpsecIntegrity == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IpsecIntegrity");
            }
            if (this.IkeEncryption == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IkeEncryption");
            }
            if (this.IkeIntegrity == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IkeIntegrity");
            }
            if (this.DhGroup == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DhGroup");
            }
            if (this.PfsGroup == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PfsGroup");
            }






        }
    }
}