// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the Security Partner Provider.
    /// </summary>
    public partial class SecurityPartnerProviderPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the SecurityPartnerProviderPropertiesFormat class.
        /// </summary>
        public SecurityPartnerProviderPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityPartnerProviderPropertiesFormat class.
        /// </summary>

        /// <param name="provisioningState">The provisioning state of the Security Partner Provider resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="securityProviderName">The security provider name.
        /// Possible values include: &#39;ZScaler&#39;, &#39;IBoss&#39;, &#39;Checkpoint&#39;</param>

        /// <param name="connectionStatus">The connection status with the Security Partner Provider.
        /// Possible values include: &#39;Unknown&#39;, &#39;PartiallyConnected&#39;, &#39;Connected&#39;,
        /// &#39;NotConnected&#39;</param>

        /// <param name="virtualHub">The virtualHub to which the Security Partner Provider belongs.
        /// </param>
        public SecurityPartnerProviderPropertiesFormat(string provisioningState = default(string), string securityProviderName = default(string), string connectionStatus = default(string), SubResource virtualHub = default(SubResource))

        {
            this.ProvisioningState = provisioningState;
            this.SecurityProviderName = securityProviderName;
            this.ConnectionStatus = connectionStatus;
            this.VirtualHub = virtualHub;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioning state of the Security Partner Provider resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the security provider name. Possible values include: &#39;ZScaler&#39;, &#39;IBoss&#39;, &#39;Checkpoint&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityProviderName")]
        public string SecurityProviderName {get; set; }

        /// <summary>
        /// Gets the connection status with the Security Partner Provider. Possible values include: &#39;Unknown&#39;, &#39;PartiallyConnected&#39;, &#39;Connected&#39;, &#39;NotConnected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionStatus")]
        public string ConnectionStatus {get; private set; }

        /// <summary>
        /// Gets or sets the virtualHub to which the Security Partner Provider belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualHub")]
        public SubResource VirtualHub {get; set; }
    }
}