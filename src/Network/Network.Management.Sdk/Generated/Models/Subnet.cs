// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Subnet in a virtual network resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Subnet : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the Subnet class.
        /// </summary>
        public Subnet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Subnet class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within a resource group. This name
        /// can be used to access the resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="routeTable">The reference to the RouteTable resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the subnet resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="sharingScope">Set this property to Tenant to allow sharing subnet with other
        /// subscriptions in your AAD tenant. This property can only be set if
        /// defaultOutboundAccess is set to false, both properties can only be set if
        /// subnet is empty.
        /// Possible values include: &#39;Tenant&#39;, &#39;DelegatedServices&#39;</param>

        /// <param name="addressPrefix">The address prefix for the subnet.
        /// </param>

        /// <param name="addressPrefixes">List of address prefixes for the subnet.
        /// </param>

        /// <param name="networkSecurityGroup">The reference to the NetworkSecurityGroup resource.
        /// </param>

        /// <param name="natGateway">Nat gateway associated with this subnet.
        /// </param>

        /// <param name="serviceEndpoints">An array of service endpoints.
        /// </param>

        /// <param name="serviceEndpointPolicies">An array of service endpoint policies.
        /// </param>

        /// <param name="privateEndpoints">An array of references to private endpoints.
        /// </param>

        /// <param name="ipConfigurations">An array of references to the network interface IP configurations using
        /// subnet.
        /// </param>

        /// <param name="ipConfigurationProfiles">Array of IP configuration profiles which reference this subnet.
        /// </param>

        /// <param name="ipAllocations">Array of IpAllocation which reference this subnet.
        /// </param>

        /// <param name="resourceNavigationLinks">An array of references to the external resources using subnet.
        /// </param>

        /// <param name="serviceAssociationLinks">An array of references to services injecting into this subnet.
        /// </param>

        /// <param name="delegations">An array of references to the delegations on the subnet.
        /// </param>

        /// <param name="purpose">A read-only string identifying the intention of use for this subnet based
        /// on delegations and other user-defined properties.
        /// </param>

        /// <param name="privateEndpointNetworkPolicies">Enable or Disable apply network policies on private end point in the
        /// subnet.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;,
        /// &#39;NetworkSecurityGroupEnabled&#39;, &#39;RouteTableEnabled&#39;</param>

        /// <param name="privateLinkServiceNetworkPolicies">Enable or Disable apply network policies on private link service in the
        /// subnet.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="applicationGatewayIPConfigurations">Application gateway IP configurations of virtual network resource.
        /// </param>

        /// <param name="defaultOutboundAccess">Set this property to false to disable default outbound connectivity for all
        /// VMs in the subnet. This property can only be set at the time of subnet
        /// creation and cannot be updated for an existing subnet.
        /// </param>
        public Subnet(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), RouteTable routeTable = default(RouteTable), string provisioningState = default(string), string sharingScope = default(string), string addressPrefix = default(string), System.Collections.Generic.IList<string> addressPrefixes = default(System.Collections.Generic.IList<string>), NetworkSecurityGroup networkSecurityGroup = default(NetworkSecurityGroup), SubResource natGateway = default(SubResource), System.Collections.Generic.IList<ServiceEndpointPropertiesFormat> serviceEndpoints = default(System.Collections.Generic.IList<ServiceEndpointPropertiesFormat>), System.Collections.Generic.IList<ServiceEndpointPolicy> serviceEndpointPolicies = default(System.Collections.Generic.IList<ServiceEndpointPolicy>), System.Collections.Generic.IList<PrivateEndpoint> privateEndpoints = default(System.Collections.Generic.IList<PrivateEndpoint>), System.Collections.Generic.IList<IPConfiguration> ipConfigurations = default(System.Collections.Generic.IList<IPConfiguration>), System.Collections.Generic.IList<IPConfigurationProfile> ipConfigurationProfiles = default(System.Collections.Generic.IList<IPConfigurationProfile>), System.Collections.Generic.IList<SubResource> ipAllocations = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<ResourceNavigationLink> resourceNavigationLinks = default(System.Collections.Generic.IList<ResourceNavigationLink>), System.Collections.Generic.IList<ServiceAssociationLink> serviceAssociationLinks = default(System.Collections.Generic.IList<ServiceAssociationLink>), System.Collections.Generic.IList<Delegation> delegations = default(System.Collections.Generic.IList<Delegation>), string purpose = default(string), string privateEndpointNetworkPolicies = default(string), string privateLinkServiceNetworkPolicies = default(string), System.Collections.Generic.IList<ApplicationGatewayIPConfiguration> applicationGatewayIPConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayIPConfiguration>), bool? defaultOutboundAccess = default(bool?))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.RouteTable = routeTable;
            this.ProvisioningState = provisioningState;
            this.SharingScope = sharingScope;
            this.AddressPrefix = addressPrefix;
            this.AddressPrefixes = addressPrefixes;
            this.NetworkSecurityGroup = networkSecurityGroup;
            this.NatGateway = natGateway;
            this.ServiceEndpoints = serviceEndpoints;
            this.ServiceEndpointPolicies = serviceEndpointPolicies;
            this.PrivateEndpoints = privateEndpoints;
            this.IPConfigurations = ipConfigurations;
            this.IPConfigurationProfiles = ipConfigurationProfiles;
            this.IPAllocations = ipAllocations;
            this.ResourceNavigationLinks = resourceNavigationLinks;
            this.ServiceAssociationLinks = serviceAssociationLinks;
            this.Delegations = delegations;
            this.Purpose = purpose;
            this.PrivateEndpointNetworkPolicies = privateEndpointNetworkPolicies;
            this.PrivateLinkServiceNetworkPolicies = privateLinkServiceNetworkPolicies;
            this.ApplicationGatewayIPConfigurations = applicationGatewayIPConfigurations;
            this.DefaultOutboundAccess = defaultOutboundAccess;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within a resource
        /// group. This name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets resource type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the reference to the RouteTable resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.routeTable")]
        public RouteTable RouteTable {get; set; }

        /// <summary>
        /// Gets the provisioning state of the subnet resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets set this property to Tenant to allow sharing subnet with other
        /// subscriptions in your AAD tenant. This property can only be set if
        /// defaultOutboundAccess is set to false, both properties can only be set if
        /// subnet is empty. Possible values include: &#39;Tenant&#39;, &#39;DelegatedServices&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sharingScope")]
        public string SharingScope {get; set; }

        /// <summary>
        /// Gets or sets the address prefix for the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.addressPrefix")]
        public string AddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets list of address prefixes for the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.addressPrefixes")]
        public System.Collections.Generic.IList<string> AddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the reference to the NetworkSecurityGroup resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkSecurityGroup")]
        public NetworkSecurityGroup NetworkSecurityGroup {get; set; }

        /// <summary>
        /// Gets or sets nat gateway associated with this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.natGateway")]
        public SubResource NatGateway {get; set; }

        /// <summary>
        /// Gets or sets an array of service endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceEndpoints")]
        public System.Collections.Generic.IList<ServiceEndpointPropertiesFormat> ServiceEndpoints {get; set; }

        /// <summary>
        /// Gets or sets an array of service endpoint policies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceEndpointPolicies")]
        public System.Collections.Generic.IList<ServiceEndpointPolicy> ServiceEndpointPolicies {get; set; }

        /// <summary>
        /// Gets an array of references to private endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpoints")]
        public System.Collections.Generic.IList<PrivateEndpoint> PrivateEndpoints {get; private set; }

        /// <summary>
        /// Gets an array of references to the network interface IP configurations
        /// using subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipConfigurations")]
        public System.Collections.Generic.IList<IPConfiguration> IPConfigurations {get; private set; }

        /// <summary>
        /// Gets array of IP configuration profiles which reference this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipConfigurationProfiles")]
        public System.Collections.Generic.IList<IPConfigurationProfile> IPConfigurationProfiles {get; private set; }

        /// <summary>
        /// Gets or sets array of IpAllocation which reference this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipAllocations")]
        public System.Collections.Generic.IList<SubResource> IPAllocations {get; set; }

        /// <summary>
        /// Gets an array of references to the external resources using subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceNavigationLinks")]
        public System.Collections.Generic.IList<ResourceNavigationLink> ResourceNavigationLinks {get; private set; }

        /// <summary>
        /// Gets an array of references to services injecting into this subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serviceAssociationLinks")]
        public System.Collections.Generic.IList<ServiceAssociationLink> ServiceAssociationLinks {get; private set; }

        /// <summary>
        /// Gets or sets an array of references to the delegations on the subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.delegations")]
        public System.Collections.Generic.IList<Delegation> Delegations {get; set; }

        /// <summary>
        /// Gets a read-only string identifying the intention of use for this subnet
        /// based on delegations and other user-defined properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.purpose")]
        public string Purpose {get; private set; }

        /// <summary>
        /// Gets or sets enable or Disable apply network policies on private end point
        /// in the subnet. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;NetworkSecurityGroupEnabled&#39;, &#39;RouteTableEnabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointNetworkPolicies")]
        public string PrivateEndpointNetworkPolicies {get; set; }

        /// <summary>
        /// Gets or sets enable or Disable apply network policies on private link
        /// service in the subnet. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateLinkServiceNetworkPolicies")]
        public string PrivateLinkServiceNetworkPolicies {get; set; }

        /// <summary>
        /// Gets or sets application gateway IP configurations of virtual network
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.applicationGatewayIPConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayIPConfiguration> ApplicationGatewayIPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets set this property to false to disable default outbound
        /// connectivity for all VMs in the subnet. This property can only be set at
        /// the time of subnet creation and cannot be updated for an existing subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultOutboundAccess")]
        public bool? DefaultOutboundAccess {get; set; }
    }
}