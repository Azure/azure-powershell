// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// A matching criteria which matches routes based on route prefix, community,
    /// and AS path.
    /// </summary>
    public partial class Criterion
    {
        /// <summary>
        /// Initializes a new instance of the Criterion class.
        /// </summary>
        public Criterion()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Criterion class.
        /// </summary>

        /// <param name="routePrefix">List of route prefixes which this criteria matches.
        /// </param>

        /// <param name="community">List of BGP communities which this criteria matches.
        /// </param>

        /// <param name="asPath">List of AS paths which this criteria matches.
        /// </param>

        /// <param name="matchCondition">Match condition to apply RouteMap rules.
        /// Possible values include: &#39;Unknown&#39;, &#39;Contains&#39;, &#39;Equals&#39;, &#39;NotContains&#39;,
        /// &#39;NotEquals&#39;</param>
        public Criterion(System.Collections.Generic.IList<string> routePrefix = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> community = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> asPath = default(System.Collections.Generic.IList<string>), string matchCondition = default(string))

        {
            this.RoutePrefix = routePrefix;
            this.Community = community;
            this.AsPath = asPath;
            this.MatchCondition = matchCondition;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of route prefixes which this criteria matches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routePrefix")]
        public System.Collections.Generic.IList<string> RoutePrefix {get; set; }

        /// <summary>
        /// Gets or sets list of BGP communities which this criteria matches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "community")]
        public System.Collections.Generic.IList<string> Community {get; set; }

        /// <summary>
        /// Gets or sets list of AS paths which this criteria matches.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "asPath")]
        public System.Collections.Generic.IList<string> AsPath {get; set; }

        /// <summary>
        /// Gets or sets match condition to apply RouteMap rules. Possible values include: &#39;Unknown&#39;, &#39;Contains&#39;, &#39;Equals&#39;, &#39;NotContains&#39;, &#39;NotEquals&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchCondition")]
        public string MatchCondition {get; set; }
    }
}