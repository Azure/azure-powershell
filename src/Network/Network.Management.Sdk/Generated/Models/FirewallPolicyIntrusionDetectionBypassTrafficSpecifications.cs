// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Intrusion detection bypass traffic specification.
    /// </summary>
    public partial class FirewallPolicyIntrusionDetectionBypassTrafficSpecifications
    {
        /// <summary>
        /// Initializes a new instance of the FirewallPolicyIntrusionDetectionBypassTrafficSpecifications class.
        /// </summary>
        public FirewallPolicyIntrusionDetectionBypassTrafficSpecifications()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FirewallPolicyIntrusionDetectionBypassTrafficSpecifications class.
        /// </summary>

        /// <param name="name">Name of the bypass traffic rule.
        /// </param>

        /// <param name="description">Description of the bypass traffic rule.
        /// </param>

        /// <param name="protocol">The rule bypass protocol.
        /// Possible values include: &#39;TCP&#39;, &#39;UDP&#39;, &#39;ICMP&#39;, &#39;ANY&#39;</param>

        /// <param name="sourceAddresses">List of source IP addresses or ranges for this rule.
        /// </param>

        /// <param name="destinationAddresses">List of destination IP addresses or ranges for this rule.
        /// </param>

        /// <param name="destinationPorts">List of destination ports or ranges.
        /// </param>

        /// <param name="sourceIPGroups">List of source IpGroups for this rule.
        /// </param>

        /// <param name="destinationIPGroups">List of destination IpGroups for this rule.
        /// </param>
        public FirewallPolicyIntrusionDetectionBypassTrafficSpecifications(string name = default(string), string description = default(string), string protocol = default(string), System.Collections.Generic.IList<string> sourceAddresses = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationAddresses = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationPorts = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> sourceIPGroups = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationIPGroups = default(System.Collections.Generic.IList<string>))

        {
            this.Name = name;
            this.Description = description;
            this.Protocol = protocol;
            this.SourceAddresses = sourceAddresses;
            this.DestinationAddresses = destinationAddresses;
            this.DestinationPorts = destinationPorts;
            this.SourceIPGroups = sourceIPGroups;
            this.DestinationIPGroups = destinationIPGroups;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the bypass traffic rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets description of the bypass traffic rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the rule bypass protocol. Possible values include: &#39;TCP&#39;, &#39;UDP&#39;, &#39;ICMP&#39;, &#39;ANY&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets list of source IP addresses or ranges for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddresses")]
        public System.Collections.Generic.IList<string> SourceAddresses {get; set; }

        /// <summary>
        /// Gets or sets list of destination IP addresses or ranges for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddresses")]
        public System.Collections.Generic.IList<string> DestinationAddresses {get; set; }

        /// <summary>
        /// Gets or sets list of destination ports or ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPorts")]
        public System.Collections.Generic.IList<string> DestinationPorts {get; set; }

        /// <summary>
        /// Gets or sets list of source IpGroups for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceIpGroups")]
        public System.Collections.Generic.IList<string> SourceIPGroups {get; set; }

        /// <summary>
        /// Gets or sets list of destination IpGroups for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationIpGroups")]
        public System.Collections.Generic.IList<string> DestinationIPGroups {get; set; }
    }
}