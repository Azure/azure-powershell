// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Represents the Reachability Analysis Intent properties.
    /// </summary>
    public partial class ReachabilityAnalysisIntentProperties
    {
        /// <summary>
        /// Initializes a new instance of the ReachabilityAnalysisIntentProperties class.
        /// </summary>
        public ReachabilityAnalysisIntentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReachabilityAnalysisIntentProperties class.
        /// </summary>

        /// <param name="provisioningState">Provisioning states of a resource.
        /// Possible values include: &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Canceled&#39;, &#39;Creating&#39;,
        /// &#39;Updating&#39;, &#39;Deleting&#39;</param>

        /// <param name="description">
        /// </param>

        /// <param name="sourceResourceId">Source resource id to verify the reachability path of.
        /// </param>

        /// <param name="destinationResourceId">Destination resource id to verify the reachability path of.
        /// </param>

        /// <param name="ipTraffic">IP traffic information.
        /// </param>
        public ReachabilityAnalysisIntentProperties(string sourceResourceId, string destinationResourceId, IPTraffic ipTraffic, string provisioningState = default(string), string description = default(string))

        {
            this.ProvisioningState = provisioningState;
            this.Description = description;
            this.SourceResourceId = sourceResourceId;
            this.DestinationResourceId = destinationResourceId;
            this.IPTraffic = ipTraffic;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets provisioning states of a resource. Possible values include: &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Canceled&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets source resource id to verify the reachability path of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceResourceId")]
        public string SourceResourceId {get; set; }

        /// <summary>
        /// Gets or sets destination resource id to verify the reachability path of.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationResourceId")]
        public string DestinationResourceId {get; set; }

        /// <summary>
        /// Gets or sets iP traffic information.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipTraffic")]
        public IPTraffic IPTraffic {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceResourceId");
            }
            if (this.DestinationResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationResourceId");
            }
            if (this.IPTraffic == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IPTraffic");
            }




            if (this.IPTraffic != null)
            {
                this.IPTraffic.Validate();
            }
        }
    }
}