// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// VirtualWAN Resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualWAN : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualWAN class.
        /// </summary>
        public VirtualWAN()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualWAN class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the virtual WAN resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="disableVpnEncryption">Vpn encryption to be disabled or not.
        /// </param>

        /// <param name="virtualHubs">List of VirtualHubs in the VirtualWAN.
        /// </param>

        /// <param name="vpnSites">List of VpnSites in the VirtualWAN.
        /// </param>

        /// <param name="allowBranchToBranchTraffic">True if branch to branch traffic is allowed.
        /// </param>

        /// <param name="allowVnetToVnetTraffic">True if Vnet to Vnet traffic is allowed.
        /// </param>

        /// <param name="office365LocalBreakoutCategory">The office local breakout category.
        /// Possible values include: &#39;Optimize&#39;, &#39;OptimizeAndAllow&#39;, &#39;All&#39;, &#39;None&#39;</param>

        /// <param name="propertiesType">The type of the VirtualWAN.
        /// </param>
        public VirtualWAN(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string provisioningState = default(string), bool? disableVpnEncryption = default(bool?), System.Collections.Generic.IList<SubResource> virtualHubs = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> vpnSites = default(System.Collections.Generic.IList<SubResource>), bool? allowBranchToBranchTraffic = default(bool?), bool? allowVnetToVnetTraffic = default(bool?), string office365LocalBreakoutCategory = default(string), string propertiesType = default(string))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.DisableVpnEncryption = disableVpnEncryption;
            this.VirtualHubs = virtualHubs;
            this.VpnSites = vpnSites;
            this.AllowBranchToBranchTraffic = allowBranchToBranchTraffic;
            this.AllowVnetToVnetTraffic = allowVnetToVnetTraffic;
            this.Office365LocalBreakoutCategory = office365LocalBreakoutCategory;
            this.PropertiesType = propertiesType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the virtual WAN resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets vpn encryption to be disabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.disableVpnEncryption")]
        public bool? DisableVpnEncryption {get; set; }

        /// <summary>
        /// Gets list of VirtualHubs in the VirtualWAN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualHubs")]
        public System.Collections.Generic.IList<SubResource> VirtualHubs {get; private set; }

        /// <summary>
        /// Gets list of VpnSites in the VirtualWAN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnSites")]
        public System.Collections.Generic.IList<SubResource> VpnSites {get; private set; }

        /// <summary>
        /// Gets or sets true if branch to branch traffic is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowBranchToBranchTraffic")]
        public bool? AllowBranchToBranchTraffic {get; set; }

        /// <summary>
        /// Gets or sets true if Vnet to Vnet traffic is allowed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowVnetToVnetTraffic")]
        public bool? AllowVnetToVnetTraffic {get; set; }

        /// <summary>
        /// Gets the office local breakout category. Possible values include: &#39;Optimize&#39;, &#39;OptimizeAndAllow&#39;, &#39;All&#39;, &#39;None&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.office365LocalBreakoutCategory")]
        public string Office365LocalBreakoutCategory {get; private set; }

        /// <summary>
        /// Gets or sets the type of the VirtualWAN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.type")]
        public string PropertiesType {get; set; }
    }
}