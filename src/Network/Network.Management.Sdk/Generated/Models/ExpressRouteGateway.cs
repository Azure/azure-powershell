// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// ExpressRoute gateway resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ExpressRouteGateway : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteGateway class.
        /// </summary>
        public ExpressRouteGateway()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteGateway class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="autoScaleConfiguration">Configuration for auto scaling.
        /// </param>

        /// <param name="expressRouteConnections">List of ExpressRoute connections to the ExpressRoute gateway.
        /// </param>

        /// <param name="virtualHub">The Virtual Hub where the ExpressRoute gateway is or will be deployed.
        /// </param>

        /// <param name="allowNonVirtualWanTraffic">Configures this gateway to accept traffic from non Virtual WAN networks.
        /// </param>
        public ExpressRouteGateway(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string provisioningState = default(string), ExpressRouteGatewayPropertiesAutoScaleConfiguration autoScaleConfiguration = default(ExpressRouteGatewayPropertiesAutoScaleConfiguration), System.Collections.Generic.IList<ExpressRouteConnection> expressRouteConnections = default(System.Collections.Generic.IList<ExpressRouteConnection>), VirtualHubId virtualHub = default(VirtualHubId), bool? allowNonVirtualWanTraffic = default(bool?))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.AutoScaleConfiguration = autoScaleConfiguration;
            this.ExpressRouteConnections = expressRouteConnections;
            this.VirtualHub = virtualHub;
            this.AllowNonVirtualWanTraffic = allowNonVirtualWanTraffic;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the express route gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets configuration for auto scaling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoScaleConfiguration")]
        public ExpressRouteGatewayPropertiesAutoScaleConfiguration AutoScaleConfiguration {get; set; }

        /// <summary>
        /// Gets or sets list of ExpressRoute connections to the ExpressRoute gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expressRouteConnections")]
        public System.Collections.Generic.IList<ExpressRouteConnection> ExpressRouteConnections {get; set; }

        /// <summary>
        /// Gets or sets the Virtual Hub where the ExpressRoute gateway is or will be
        /// deployed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualHub")]
        public VirtualHubId VirtualHub {get; set; }

        /// <summary>
        /// Gets or sets configures this gateway to accept traffic from non Virtual WAN
        /// networks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allowNonVirtualWanTraffic")]
        public bool? AllowNonVirtualWanTraffic {get; set; }
    }
}