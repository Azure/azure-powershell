// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Application gateway resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationGateway : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGateway class.
        /// </summary>
        public ApplicationGateway()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGateway class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="zones">A list of availability zones denoting where the resource needs to come
        /// from.
        /// </param>

        /// <param name="identity">The identity of the application gateway, if configured.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the application gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="sku">SKU of the application gateway resource.
        /// </param>

        /// <param name="sslPolicy">SSL policy of the application gateway resource.
        /// </param>

        /// <param name="operationalState">Operational state of the application gateway resource.
        /// Possible values include: &#39;Stopped&#39;, &#39;Starting&#39;, &#39;Running&#39;, &#39;Stopping&#39;</param>

        /// <param name="gatewayIPConfigurations">Subnets of the application gateway resource. For default limits, see
        /// [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="authenticationCertificates">Authentication certificates of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="trustedRootCertificates">Trusted Root certificates of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="trustedClientCertificates">Trusted client certificates of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="sslCertificates">SSL certificates of the application gateway resource. For default limits,
        /// see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="frontendIPConfigurations">Frontend IP addresses of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="frontendPorts">Frontend ports of the application gateway resource. For default limits, see
        /// [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="probes">Probes of the application gateway resource.
        /// </param>

        /// <param name="backendAddressPools">Backend address pool of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="backendHttpSettingsCollection">Backend http settings of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="backendSettingsCollection">Backend settings of the application gateway resource. For default limits,
        /// see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="httpListeners">Http listeners of the application gateway resource. For default limits, see
        /// [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="listeners">Listeners of the application gateway resource. For default limits, see
        /// [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="sslProfiles">SSL profiles of the application gateway resource. For default limits, see
        /// [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="urlPathMaps">URL path map of the application gateway resource. For default limits, see
        /// [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="requestRoutingRules">Request routing rules of the application gateway resource.
        /// </param>

        /// <param name="routingRules">Routing rules of the application gateway resource.
        /// </param>

        /// <param name="rewriteRuleSets">Rewrite rules for the application gateway resource.
        /// </param>

        /// <param name="redirectConfigurations">Redirect configurations of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </param>

        /// <param name="webApplicationFirewallConfiguration">Web application firewall configuration.
        /// </param>

        /// <param name="firewallPolicy">Reference to the FirewallPolicy resource.
        /// </param>

        /// <param name="enableHttp2">Whether HTTP2 is enabled on the application gateway resource.
        /// </param>

        /// <param name="enableFips">Whether FIPS is enabled on the application gateway resource.
        /// </param>

        /// <param name="autoscaleConfiguration">Autoscale Configuration.
        /// </param>

        /// <param name="privateLinkConfigurations">PrivateLink configurations on application gateway.
        /// </param>

        /// <param name="privateEndpointConnections">Private Endpoint connections on application gateway.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the application gateway resource.
        /// </param>

        /// <param name="customErrorConfigurations">Custom error configurations of the application gateway resource.
        /// </param>

        /// <param name="forceFirewallPolicyAssociation">If true, associates a firewall policy with an application gateway
        /// regardless whether the policy differs from the WAF Config.
        /// </param>

        /// <param name="loadDistributionPolicies">Load distribution policies of the application gateway resource.
        /// </param>

        /// <param name="globalConfiguration">Global Configuration.
        /// </param>

        /// <param name="defaultPredefinedSslPolicy">The default predefined SSL Policy applied on the application gateway
        /// resource.
        /// Possible values include: &#39;AppGwSslPolicy20150501&#39;,
        /// &#39;AppGwSslPolicy20170401&#39;, &#39;AppGwSslPolicy20170401S&#39;,
        /// &#39;AppGwSslPolicy20220101&#39;, &#39;AppGwSslPolicy20220101S&#39;</param>
        public ApplicationGateway(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), ManagedServiceIdentity identity = default(ManagedServiceIdentity), string provisioningState = default(string), ApplicationGatewaySku sku = default(ApplicationGatewaySku), ApplicationGatewaySslPolicy sslPolicy = default(ApplicationGatewaySslPolicy), string operationalState = default(string), System.Collections.Generic.IList<ApplicationGatewayIPConfiguration> gatewayIPConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayIPConfiguration>), System.Collections.Generic.IList<ApplicationGatewayAuthenticationCertificate> authenticationCertificates = default(System.Collections.Generic.IList<ApplicationGatewayAuthenticationCertificate>), System.Collections.Generic.IList<ApplicationGatewayTrustedRootCertificate> trustedRootCertificates = default(System.Collections.Generic.IList<ApplicationGatewayTrustedRootCertificate>), System.Collections.Generic.IList<ApplicationGatewayTrustedClientCertificate> trustedClientCertificates = default(System.Collections.Generic.IList<ApplicationGatewayTrustedClientCertificate>), System.Collections.Generic.IList<ApplicationGatewaySslCertificate> sslCertificates = default(System.Collections.Generic.IList<ApplicationGatewaySslCertificate>), System.Collections.Generic.IList<ApplicationGatewayFrontendIPConfiguration> frontendIPConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayFrontendIPConfiguration>), System.Collections.Generic.IList<ApplicationGatewayFrontendPort> frontendPorts = default(System.Collections.Generic.IList<ApplicationGatewayFrontendPort>), System.Collections.Generic.IList<ApplicationGatewayProbe> probes = default(System.Collections.Generic.IList<ApplicationGatewayProbe>), System.Collections.Generic.IList<ApplicationGatewayBackendAddressPool> backendAddressPools = default(System.Collections.Generic.IList<ApplicationGatewayBackendAddressPool>), System.Collections.Generic.IList<ApplicationGatewayBackendHttpSettings> backendHttpSettingsCollection = default(System.Collections.Generic.IList<ApplicationGatewayBackendHttpSettings>), System.Collections.Generic.IList<ApplicationGatewayBackendSettings> backendSettingsCollection = default(System.Collections.Generic.IList<ApplicationGatewayBackendSettings>), System.Collections.Generic.IList<ApplicationGatewayHttpListener> httpListeners = default(System.Collections.Generic.IList<ApplicationGatewayHttpListener>), System.Collections.Generic.IList<ApplicationGatewayListener> listeners = default(System.Collections.Generic.IList<ApplicationGatewayListener>), System.Collections.Generic.IList<ApplicationGatewaySslProfile> sslProfiles = default(System.Collections.Generic.IList<ApplicationGatewaySslProfile>), System.Collections.Generic.IList<ApplicationGatewayUrlPathMap> urlPathMaps = default(System.Collections.Generic.IList<ApplicationGatewayUrlPathMap>), System.Collections.Generic.IList<ApplicationGatewayRequestRoutingRule> requestRoutingRules = default(System.Collections.Generic.IList<ApplicationGatewayRequestRoutingRule>), System.Collections.Generic.IList<ApplicationGatewayRoutingRule> routingRules = default(System.Collections.Generic.IList<ApplicationGatewayRoutingRule>), System.Collections.Generic.IList<ApplicationGatewayRewriteRuleSet> rewriteRuleSets = default(System.Collections.Generic.IList<ApplicationGatewayRewriteRuleSet>), System.Collections.Generic.IList<ApplicationGatewayRedirectConfiguration> redirectConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayRedirectConfiguration>), ApplicationGatewayWebApplicationFirewallConfiguration webApplicationFirewallConfiguration = default(ApplicationGatewayWebApplicationFirewallConfiguration), SubResource firewallPolicy = default(SubResource), bool? enableHttp2 = default(bool?), bool? enableFips = default(bool?), ApplicationGatewayAutoscaleConfiguration autoscaleConfiguration = default(ApplicationGatewayAutoscaleConfiguration), System.Collections.Generic.IList<ApplicationGatewayPrivateLinkConfiguration> privateLinkConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayPrivateLinkConfiguration>), System.Collections.Generic.IList<ApplicationGatewayPrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<ApplicationGatewayPrivateEndpointConnection>), string resourceGuid = default(string), System.Collections.Generic.IList<ApplicationGatewayCustomError> customErrorConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayCustomError>), bool? forceFirewallPolicyAssociation = default(bool?), System.Collections.Generic.IList<ApplicationGatewayLoadDistributionPolicy> loadDistributionPolicies = default(System.Collections.Generic.IList<ApplicationGatewayLoadDistributionPolicy>), ApplicationGatewayGlobalConfiguration globalConfiguration = default(ApplicationGatewayGlobalConfiguration), string defaultPredefinedSslPolicy = default(string))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.Zones = zones;
            this.Identity = identity;
            this.ProvisioningState = provisioningState;
            this.Sku = sku;
            this.SslPolicy = sslPolicy;
            this.OperationalState = operationalState;
            this.GatewayIPConfigurations = gatewayIPConfigurations;
            this.AuthenticationCertificates = authenticationCertificates;
            this.TrustedRootCertificates = trustedRootCertificates;
            this.TrustedClientCertificates = trustedClientCertificates;
            this.SslCertificates = sslCertificates;
            this.FrontendIPConfigurations = frontendIPConfigurations;
            this.FrontendPorts = frontendPorts;
            this.Probes = probes;
            this.BackendAddressPools = backendAddressPools;
            this.BackendHttpSettingsCollection = backendHttpSettingsCollection;
            this.BackendSettingsCollection = backendSettingsCollection;
            this.HttpListeners = httpListeners;
            this.Listeners = listeners;
            this.SslProfiles = sslProfiles;
            this.UrlPathMaps = urlPathMaps;
            this.RequestRoutingRules = requestRoutingRules;
            this.RoutingRules = routingRules;
            this.RewriteRuleSets = rewriteRuleSets;
            this.RedirectConfigurations = redirectConfigurations;
            this.WebApplicationFirewallConfiguration = webApplicationFirewallConfiguration;
            this.FirewallPolicy = firewallPolicy;
            this.EnableHttp2 = enableHttp2;
            this.EnableFips = enableFips;
            this.AutoscaleConfiguration = autoscaleConfiguration;
            this.PrivateLinkConfigurations = privateLinkConfigurations;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.ResourceGuid = resourceGuid;
            this.CustomErrorConfigurations = customErrorConfigurations;
            this.ForceFirewallPolicyAssociation = forceFirewallPolicyAssociation;
            this.LoadDistributionPolicies = loadDistributionPolicies;
            this.GlobalConfiguration = globalConfiguration;
            this.DefaultPredefinedSslPolicy = defaultPredefinedSslPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting where the resource needs
        /// to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets or sets the identity of the application gateway, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets the provisioning state of the application gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets sKU of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sku")]
        public ApplicationGatewaySku Sku {get; set; }

        /// <summary>
        /// Gets or sets sSL policy of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sslPolicy")]
        public ApplicationGatewaySslPolicy SslPolicy {get; set; }

        /// <summary>
        /// Gets operational state of the application gateway resource. Possible values include: &#39;Stopped&#39;, &#39;Starting&#39;, &#39;Running&#39;, &#39;Stopping&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.operationalState")]
        public string OperationalState {get; private set; }

        /// <summary>
        /// Gets or sets subnets of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gatewayIPConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayIPConfiguration> GatewayIPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets authentication certificates of the application gateway
        /// resource. For default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authenticationCertificates")]
        public System.Collections.Generic.IList<ApplicationGatewayAuthenticationCertificate> AuthenticationCertificates {get; set; }

        /// <summary>
        /// Gets or sets trusted Root certificates of the application gateway resource.
        /// For default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.trustedRootCertificates")]
        public System.Collections.Generic.IList<ApplicationGatewayTrustedRootCertificate> TrustedRootCertificates {get; set; }

        /// <summary>
        /// Gets or sets trusted client certificates of the application gateway
        /// resource. For default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.trustedClientCertificates")]
        public System.Collections.Generic.IList<ApplicationGatewayTrustedClientCertificate> TrustedClientCertificates {get; set; }

        /// <summary>
        /// Gets or sets sSL certificates of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sslCertificates")]
        public System.Collections.Generic.IList<ApplicationGatewaySslCertificate> SslCertificates {get; set; }

        /// <summary>
        /// Gets or sets frontend IP addresses of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayFrontendIPConfiguration> FrontendIPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets frontend ports of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPorts")]
        public System.Collections.Generic.IList<ApplicationGatewayFrontendPort> FrontendPorts {get; set; }

        /// <summary>
        /// Gets or sets probes of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.probes")]
        public System.Collections.Generic.IList<ApplicationGatewayProbe> Probes {get; set; }

        /// <summary>
        /// Gets or sets backend address pool of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPools")]
        public System.Collections.Generic.IList<ApplicationGatewayBackendAddressPool> BackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets backend http settings of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendHttpSettingsCollection")]
        public System.Collections.Generic.IList<ApplicationGatewayBackendHttpSettings> BackendHttpSettingsCollection {get; set; }

        /// <summary>
        /// Gets or sets backend settings of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendSettingsCollection")]
        public System.Collections.Generic.IList<ApplicationGatewayBackendSettings> BackendSettingsCollection {get; set; }

        /// <summary>
        /// Gets or sets http listeners of the application gateway resource. For
        /// default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.httpListeners")]
        public System.Collections.Generic.IList<ApplicationGatewayHttpListener> HttpListeners {get; set; }

        /// <summary>
        /// Gets or sets listeners of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.listeners")]
        public System.Collections.Generic.IList<ApplicationGatewayListener> Listeners {get; set; }

        /// <summary>
        /// Gets or sets sSL profiles of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sslProfiles")]
        public System.Collections.Generic.IList<ApplicationGatewaySslProfile> SslProfiles {get; set; }

        /// <summary>
        /// Gets or sets uRL path map of the application gateway resource. For default
        /// limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.urlPathMaps")]
        public System.Collections.Generic.IList<ApplicationGatewayUrlPathMap> UrlPathMaps {get; set; }

        /// <summary>
        /// Gets or sets request routing rules of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestRoutingRules")]
        public System.Collections.Generic.IList<ApplicationGatewayRequestRoutingRule> RequestRoutingRules {get; set; }

        /// <summary>
        /// Gets or sets routing rules of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.routingRules")]
        public System.Collections.Generic.IList<ApplicationGatewayRoutingRule> RoutingRules {get; set; }

        /// <summary>
        /// Gets or sets rewrite rules for the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.rewriteRuleSets")]
        public System.Collections.Generic.IList<ApplicationGatewayRewriteRuleSet> RewriteRuleSets {get; set; }

        /// <summary>
        /// Gets or sets redirect configurations of the application gateway resource.
        /// For default limits, see [Application Gateway
        /// limits](https://docs.microsoft.com/azure/azure-subscription-service-limits#application-gateway-limits).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.redirectConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayRedirectConfiguration> RedirectConfigurations {get; set; }

        /// <summary>
        /// Gets or sets web application firewall configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.webApplicationFirewallConfiguration")]
        public ApplicationGatewayWebApplicationFirewallConfiguration WebApplicationFirewallConfiguration {get; set; }

        /// <summary>
        /// Gets or sets reference to the FirewallPolicy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.firewallPolicy")]
        public SubResource FirewallPolicy {get; set; }

        /// <summary>
        /// Gets or sets whether HTTP2 is enabled on the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableHttp2")]
        public bool? EnableHttp2 {get; set; }

        /// <summary>
        /// Gets or sets whether FIPS is enabled on the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableFips")]
        public bool? EnableFips {get; set; }

        /// <summary>
        /// Gets or sets autoscale Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoscaleConfiguration")]
        public ApplicationGatewayAutoscaleConfiguration AutoscaleConfiguration {get; set; }

        /// <summary>
        /// Gets or sets privateLink configurations on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateLinkConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayPrivateLinkConfiguration> PrivateLinkConfigurations {get; set; }

        /// <summary>
        /// Gets private Endpoint connections on application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public System.Collections.Generic.IList<ApplicationGatewayPrivateEndpointConnection> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the application gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets or sets custom error configurations of the application gateway
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customErrorConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayCustomError> CustomErrorConfigurations {get; set; }

        /// <summary>
        /// Gets or sets if true, associates a firewall policy with an application
        /// gateway regardless whether the policy differs from the WAF Config.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.forceFirewallPolicyAssociation")]
        public bool? ForceFirewallPolicyAssociation {get; set; }

        /// <summary>
        /// Gets or sets load distribution policies of the application gateway
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadDistributionPolicies")]
        public System.Collections.Generic.IList<ApplicationGatewayLoadDistributionPolicy> LoadDistributionPolicies {get; set; }

        /// <summary>
        /// Gets or sets global Configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.globalConfiguration")]
        public ApplicationGatewayGlobalConfiguration GlobalConfiguration {get; set; }

        /// <summary>
        /// Gets the default predefined SSL Policy applied on the application gateway
        /// resource. Possible values include: &#39;AppGwSslPolicy20150501&#39;, &#39;AppGwSslPolicy20170401&#39;, &#39;AppGwSslPolicy20170401S&#39;, &#39;AppGwSslPolicy20220101&#39;, &#39;AppGwSslPolicy20220101S&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.defaultPredefinedSslPolicy")]
        public string DefaultPredefinedSslPolicy {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {














            if (this.Probes != null)
            {
                foreach (var element in this.Probes)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

            if (this.BackendHttpSettingsCollection != null)
            {
                foreach (var element in this.BackendHttpSettingsCollection)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }





            if (this.RequestRoutingRules != null)
            {
                foreach (var element in this.RequestRoutingRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.RoutingRules != null)
            {
                foreach (var element in this.RoutingRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.WebApplicationFirewallConfiguration != null)
            {
                this.WebApplicationFirewallConfiguration.Validate();
            }

            if (this.AutoscaleConfiguration != null)
            {
                this.AutoscaleConfiguration.Validate();
            }







        }
    }
}