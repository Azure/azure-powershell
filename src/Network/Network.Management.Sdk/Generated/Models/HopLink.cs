// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Hop link.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class HopLink
    {
        /// <summary>
        /// Initializes a new instance of the HopLink class.
        /// </summary>
        public HopLink()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HopLink class.
        /// </summary>

        /// <param name="nextHopId">The ID of the next hop.
        /// </param>

        /// <param name="linkType">Link type.
        /// </param>

        /// <param name="issues">List of issues.
        /// </param>

        /// <param name="context">Provides additional context on links.
        /// </param>

        /// <param name="resourceId">Resource ID.
        /// </param>

        /// <param name="roundTripTimeMin">Minimum roundtrip time in milliseconds.
        /// </param>

        /// <param name="roundTripTimeAvg">Average roundtrip time in milliseconds.
        /// </param>

        /// <param name="roundTripTimeMax">Maximum roundtrip time in milliseconds.
        /// </param>
        public HopLink(string nextHopId = default(string), string linkType = default(string), System.Collections.Generic.IList<ConnectivityIssue> issues = default(System.Collections.Generic.IList<ConnectivityIssue>), System.Collections.Generic.IDictionary<string, string> context = default(System.Collections.Generic.IDictionary<string, string>), string resourceId = default(string), long? roundTripTimeMin = default(long?), long? roundTripTimeAvg = default(long?), long? roundTripTimeMax = default(long?))

        {
            this.NextHopId = nextHopId;
            this.LinkType = linkType;
            this.Issues = issues;
            this.Context = context;
            this.ResourceId = resourceId;
            this.RoundTripTimeMin = roundTripTimeMin;
            this.RoundTripTimeAvg = roundTripTimeAvg;
            this.RoundTripTimeMax = roundTripTimeMax;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the ID of the next hop.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextHopId")]
        public string NextHopId {get; private set; }

        /// <summary>
        /// Gets link type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linkType")]
        public string LinkType {get; private set; }

        /// <summary>
        /// Gets list of issues.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "issues")]
        public System.Collections.Generic.IList<ConnectivityIssue> Issues {get; private set; }

        /// <summary>
        /// Gets provides additional context on links.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "context")]
        public System.Collections.Generic.IDictionary<string, string> Context {get; private set; }

        /// <summary>
        /// Gets resource ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; private set; }

        /// <summary>
        /// Gets minimum roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.roundTripTimeMin")]
        public long? RoundTripTimeMin {get; private set; }

        /// <summary>
        /// Gets average roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.roundTripTimeAvg")]
        public long? RoundTripTimeAvg {get; private set; }

        /// <summary>
        /// Gets maximum roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.roundTripTimeMax")]
        public long? RoundTripTimeMax {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.RoundTripTimeMin != null)
            {
                if (this.RoundTripTimeMin > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RoundTripTimeMin", 4294967295);
                }
                if (this.RoundTripTimeMin < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RoundTripTimeMin", 0);
                }
            }
            if (this.RoundTripTimeAvg != null)
            {
                if (this.RoundTripTimeAvg > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RoundTripTimeAvg", 4294967295);
                }
                if (this.RoundTripTimeAvg < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RoundTripTimeAvg", 0);
                }
            }
            if (this.RoundTripTimeMax != null)
            {
                if (this.RoundTripTimeMax > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RoundTripTimeMax", 4294967295);
                }
                if (this.RoundTripTimeMax < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RoundTripTimeMax", 0);
                }
            }
        }
    }
}