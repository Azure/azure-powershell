// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of Frontend IP Configuration of the load balancer.
    /// </summary>
    public partial class FrontendIPConfigurationPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the FrontendIPConfigurationPropertiesFormat class.
        /// </summary>
        public FrontendIPConfigurationPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FrontendIPConfigurationPropertiesFormat class.
        /// </summary>

        /// <param name="inboundNatRules">An array of references to inbound rules that use this frontend IP.
        /// </param>

        /// <param name="inboundNatPools">An array of references to inbound pools that use this frontend IP.
        /// </param>

        /// <param name="outboundRules">An array of references to outbound rules that use this frontend IP.
        /// </param>

        /// <param name="loadBalancingRules">An array of references to load balancing rules that use this frontend IP.
        /// </param>

        /// <param name="privateIPAddress">The private IP address of the IP configuration.
        /// </param>

        /// <param name="privateIPAllocationMethod">The Private IP allocation method.
        /// Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;</param>

        /// <param name="privateIPAddressVersion">Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as
        /// IPv4.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>

        /// <param name="subnet">The reference to the subnet resource.
        /// </param>

        /// <param name="publicIPAddress">The reference to the Public IP resource.
        /// </param>

        /// <param name="publicIPPrefix">The reference to the Public IP Prefix resource.
        /// </param>

        /// <param name="gatewayLoadBalancer">The reference to gateway load balancer frontend IP.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the frontend IP configuration resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public FrontendIPConfigurationPropertiesFormat(System.Collections.Generic.IList<SubResource> inboundNatRules = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> inboundNatPools = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> outboundRules = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> loadBalancingRules = default(System.Collections.Generic.IList<SubResource>), string privateIPAddress = default(string), string privateIPAllocationMethod = default(string), string privateIPAddressVersion = default(string), Subnet subnet = default(Subnet), PublicIPAddress publicIPAddress = default(PublicIPAddress), SubResource publicIPPrefix = default(SubResource), SubResource gatewayLoadBalancer = default(SubResource), string provisioningState = default(string))

        {
            this.InboundNatRules = inboundNatRules;
            this.InboundNatPools = inboundNatPools;
            this.OutboundRules = outboundRules;
            this.LoadBalancingRules = loadBalancingRules;
            this.PrivateIPAddress = privateIPAddress;
            this.PrivateIPAllocationMethod = privateIPAllocationMethod;
            this.PrivateIPAddressVersion = privateIPAddressVersion;
            this.Subnet = subnet;
            this.PublicIPAddress = publicIPAddress;
            this.PublicIPPrefix = publicIPPrefix;
            this.GatewayLoadBalancer = gatewayLoadBalancer;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets an array of references to inbound rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inboundNatRules")]
        public System.Collections.Generic.IList<SubResource> InboundNatRules {get; private set; }

        /// <summary>
        /// Gets an array of references to inbound pools that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "inboundNatPools")]
        public System.Collections.Generic.IList<SubResource> InboundNatPools {get; private set; }

        /// <summary>
        /// Gets an array of references to outbound rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "outboundRules")]
        public System.Collections.Generic.IList<SubResource> OutboundRules {get; private set; }

        /// <summary>
        /// Gets an array of references to load balancing rules that use this frontend
        /// IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancingRules")]
        public System.Collections.Generic.IList<SubResource> LoadBalancingRules {get; private set; }

        /// <summary>
        /// Gets or sets the private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAddress")]
        public string PrivateIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the Private IP allocation method. Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAllocationMethod")]
        public string PrivateIPAllocationMethod {get; set; }

        /// <summary>
        /// Gets or sets whether the specific ipconfiguration is IPv4 or IPv6. Default
        /// is taken as IPv4. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAddressVersion")]
        public string PrivateIPAddressVersion {get; set; }

        /// <summary>
        /// Gets or sets the reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnet")]
        public Subnet Subnet {get; set; }

        /// <summary>
        /// Gets or sets the reference to the Public IP resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicIPAddress")]
        public PublicIPAddress PublicIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the reference to the Public IP Prefix resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicIPPrefix")]
        public SubResource PublicIPPrefix {get; set; }

        /// <summary>
        /// Gets or sets the reference to gateway load balancer frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayLoadBalancer")]
        public SubResource GatewayLoadBalancer {get; set; }

        /// <summary>
        /// Gets the provisioning state of the frontend IP configuration resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}