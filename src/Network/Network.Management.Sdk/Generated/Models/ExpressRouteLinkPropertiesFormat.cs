// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties specific to ExpressRouteLink resources.
    /// </summary>
    /// <remarks>
    /// Properties specific to ExpressRouteLink resources.
    /// </remarks>
    public partial class ExpressRouteLinkPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteLinkPropertiesFormat class.
        /// </summary>
        public ExpressRouteLinkPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteLinkPropertiesFormat class.
        /// </summary>

        /// <param name="routerName">Name of Azure router associated with physical port.
        /// </param>

        /// <param name="interfaceName">Name of Azure router interface.
        /// </param>

        /// <param name="patchPanelId">Mapping between physical port to patch panel port.
        /// </param>

        /// <param name="rackId">Mapping of physical patch panel to rack.
        /// </param>

        /// <param name="coloLocation">Cololocation for ExpressRoute Hybrid Direct.
        /// </param>

        /// <param name="connectorType">Physical fiber port type.
        /// Possible values include: &#39;LC&#39;, &#39;SC&#39;</param>

        /// <param name="adminState">Administrative state of the physical port.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="provisioningState">The provisioning state of the express route link resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="macSecConfig">MacSec configuration.
        /// </param>
        public ExpressRouteLinkPropertiesFormat(string routerName = default(string), string interfaceName = default(string), string patchPanelId = default(string), string rackId = default(string), string coloLocation = default(string), string connectorType = default(string), string adminState = default(string), string provisioningState = default(string), ExpressRouteLinkMacSecConfig macSecConfig = default(ExpressRouteLinkMacSecConfig))

        {
            this.RouterName = routerName;
            this.InterfaceName = interfaceName;
            this.PatchPanelId = patchPanelId;
            this.RackId = rackId;
            this.ColoLocation = coloLocation;
            this.ConnectorType = connectorType;
            this.AdminState = adminState;
            this.ProvisioningState = provisioningState;
            this.MacSecConfig = macSecConfig;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets name of Azure router associated with physical port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routerName")]
        public string RouterName {get; private set; }

        /// <summary>
        /// Gets name of Azure router interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interfaceName")]
        public string InterfaceName {get; private set; }

        /// <summary>
        /// Gets mapping between physical port to patch panel port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "patchPanelId")]
        public string PatchPanelId {get; private set; }

        /// <summary>
        /// Gets mapping of physical patch panel to rack.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rackId")]
        public string RackId {get; private set; }

        /// <summary>
        /// Gets cololocation for ExpressRoute Hybrid Direct.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "coloLocation")]
        public string ColoLocation {get; private set; }

        /// <summary>
        /// Gets physical fiber port type. Possible values include: &#39;LC&#39;, &#39;SC&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectorType")]
        public string ConnectorType {get; private set; }

        /// <summary>
        /// Gets or sets administrative state of the physical port. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "adminState")]
        public string AdminState {get; set; }

        /// <summary>
        /// Gets the provisioning state of the express route link resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets macSec configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "macSecConfig")]
        public ExpressRouteLinkMacSecConfig MacSecConfig {get; set; }
    }
}