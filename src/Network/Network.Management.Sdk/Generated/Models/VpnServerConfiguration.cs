// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// VpnServerConfiguration Resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VpnServerConfiguration : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VpnServerConfiguration class.
        /// </summary>
        public VpnServerConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnServerConfiguration class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="propertiesName">The name of the VpnServerConfiguration that is unique within a resource
        /// group.
        /// </param>

        /// <param name="vpnProtocols">VPN protocols for the VpnServerConfiguration.
        /// </param>

        /// <param name="vpnAuthenticationTypes">VPN authentication types for the VpnServerConfiguration.
        /// </param>

        /// <param name="vpnClientRootCertificates">VPN client root certificate of VpnServerConfiguration.
        /// </param>

        /// <param name="vpnClientRevokedCertificates">VPN client revoked certificate of VpnServerConfiguration.
        /// </param>

        /// <param name="radiusServerRootCertificates">Radius Server root certificate of VpnServerConfiguration.
        /// </param>

        /// <param name="radiusClientRootCertificates">Radius client root certificate of VpnServerConfiguration.
        /// </param>

        /// <param name="vpnClientIpsecPolicies">VpnClientIpsecPolicies for VpnServerConfiguration.
        /// </param>

        /// <param name="radiusServerAddress">The radius server address property of the VpnServerConfiguration resource
        /// for point to site client connection.
        /// </param>

        /// <param name="radiusServerSecret">The radius secret property of the VpnServerConfiguration resource for point
        /// to site client connection.
        /// </param>

        /// <param name="radiusServers">Multiple Radius Server configuration for VpnServerConfiguration.
        /// </param>

        /// <param name="aadAuthenticationParameters">The set of aad vpn authentication parameters.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the VpnServerConfiguration resource. Possible
        /// values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
        /// </param>

        /// <param name="p2SVpnGateways">List of references to P2SVpnGateways.
        /// </param>

        /// <param name="configurationPolicyGroups">List of all VpnServerConfigurationPolicyGroups.
        /// </param>

        /// <param name="propertiesEtag">A unique read-only string that changes whenever the resource is updated.
        /// </param>
        public VpnServerConfiguration(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string propertiesName = default(string), System.Collections.Generic.IList<string> vpnProtocols = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> vpnAuthenticationTypes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<VpnServerConfigVpnClientRootCertificate> vpnClientRootCertificates = default(System.Collections.Generic.IList<VpnServerConfigVpnClientRootCertificate>), System.Collections.Generic.IList<VpnServerConfigVpnClientRevokedCertificate> vpnClientRevokedCertificates = default(System.Collections.Generic.IList<VpnServerConfigVpnClientRevokedCertificate>), System.Collections.Generic.IList<VpnServerConfigRadiusServerRootCertificate> radiusServerRootCertificates = default(System.Collections.Generic.IList<VpnServerConfigRadiusServerRootCertificate>), System.Collections.Generic.IList<VpnServerConfigRadiusClientRootCertificate> radiusClientRootCertificates = default(System.Collections.Generic.IList<VpnServerConfigRadiusClientRootCertificate>), System.Collections.Generic.IList<IpsecPolicy> vpnClientIpsecPolicies = default(System.Collections.Generic.IList<IpsecPolicy>), string radiusServerAddress = default(string), string radiusServerSecret = default(string), System.Collections.Generic.IList<RadiusServer> radiusServers = default(System.Collections.Generic.IList<RadiusServer>), AadAuthenticationParameters aadAuthenticationParameters = default(AadAuthenticationParameters), string provisioningState = default(string), System.Collections.Generic.IList<P2SVpnGateway> p2SVpnGateways = default(System.Collections.Generic.IList<P2SVpnGateway>), System.Collections.Generic.IList<VpnServerConfigurationPolicyGroup> configurationPolicyGroups = default(System.Collections.Generic.IList<VpnServerConfigurationPolicyGroup>), string propertiesEtag = default(string))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.PropertiesName = propertiesName;
            this.VpnProtocols = vpnProtocols;
            this.VpnAuthenticationTypes = vpnAuthenticationTypes;
            this.VpnClientRootCertificates = vpnClientRootCertificates;
            this.VpnClientRevokedCertificates = vpnClientRevokedCertificates;
            this.RadiusServerRootCertificates = radiusServerRootCertificates;
            this.RadiusClientRootCertificates = radiusClientRootCertificates;
            this.VpnClientIpsecPolicies = vpnClientIpsecPolicies;
            this.RadiusServerAddress = radiusServerAddress;
            this.RadiusServerSecret = radiusServerSecret;
            this.RadiusServers = radiusServers;
            this.AadAuthenticationParameters = aadAuthenticationParameters;
            this.ProvisioningState = provisioningState;
            this.P2SVpnGateways = p2SVpnGateways;
            this.ConfigurationPolicyGroups = configurationPolicyGroups;
            this.PropertiesEtag = propertiesEtag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets the name of the VpnServerConfiguration that is unique within a
        /// resource group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.name")]
        public string PropertiesName {get; set; }

        /// <summary>
        /// Gets or sets vPN protocols for the VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnProtocols")]
        public System.Collections.Generic.IList<string> VpnProtocols {get; set; }

        /// <summary>
        /// Gets or sets vPN authentication types for the VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnAuthenticationTypes")]
        public System.Collections.Generic.IList<string> VpnAuthenticationTypes {get; set; }

        /// <summary>
        /// Gets or sets vPN client root certificate of VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnClientRootCertificates")]
        public System.Collections.Generic.IList<VpnServerConfigVpnClientRootCertificate> VpnClientRootCertificates {get; set; }

        /// <summary>
        /// Gets or sets vPN client revoked certificate of VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnClientRevokedCertificates")]
        public System.Collections.Generic.IList<VpnServerConfigVpnClientRevokedCertificate> VpnClientRevokedCertificates {get; set; }

        /// <summary>
        /// Gets or sets radius Server root certificate of VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.radiusServerRootCertificates")]
        public System.Collections.Generic.IList<VpnServerConfigRadiusServerRootCertificate> RadiusServerRootCertificates {get; set; }

        /// <summary>
        /// Gets or sets radius client root certificate of VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.radiusClientRootCertificates")]
        public System.Collections.Generic.IList<VpnServerConfigRadiusClientRootCertificate> RadiusClientRootCertificates {get; set; }

        /// <summary>
        /// Gets or sets vpnClientIpsecPolicies for VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnClientIpsecPolicies")]
        public System.Collections.Generic.IList<IpsecPolicy> VpnClientIpsecPolicies {get; set; }

        /// <summary>
        /// Gets or sets the radius server address property of the
        /// VpnServerConfiguration resource for point to site client connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.radiusServerAddress")]
        public string RadiusServerAddress {get; set; }

        /// <summary>
        /// Gets or sets the radius secret property of the VpnServerConfiguration
        /// resource for point to site client connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.radiusServerSecret")]
        public string RadiusServerSecret {get; set; }

        /// <summary>
        /// Gets or sets multiple Radius Server configuration for
        /// VpnServerConfiguration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.radiusServers")]
        public System.Collections.Generic.IList<RadiusServer> RadiusServers {get; set; }

        /// <summary>
        /// Gets or sets the set of aad vpn authentication parameters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.aadAuthenticationParameters")]
        public AadAuthenticationParameters AadAuthenticationParameters {get; set; }

        /// <summary>
        /// Gets the provisioning state of the VpnServerConfiguration resource.
        /// Possible values are: &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets list of references to P2SVpnGateways.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.p2SVpnGateways")]
        public System.Collections.Generic.IList<P2SVpnGateway> P2SVpnGateways {get; private set; }

        /// <summary>
        /// Gets or sets list of all VpnServerConfigurationPolicyGroups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.configurationPolicyGroups")]
        public System.Collections.Generic.IList<VpnServerConfigurationPolicyGroup> ConfigurationPolicyGroups {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.etag")]
        public string PropertiesEtag {get; private set; }
    }
}