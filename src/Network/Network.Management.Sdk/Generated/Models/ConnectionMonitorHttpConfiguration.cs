// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the HTTP configuration.
    /// </summary>
    public partial class ConnectionMonitorHttpConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorHttpConfiguration class.
        /// </summary>
        public ConnectionMonitorHttpConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorHttpConfiguration class.
        /// </summary>

        /// <param name="port">The port to connect to.
        /// </param>

        /// <param name="method">The HTTP method to use.
        /// Possible values include: &#39;Get&#39;, &#39;Post&#39;</param>

        /// <param name="path">The path component of the URI. For instance, &#34;/dir1/dir2&#34;.
        /// </param>

        /// <param name="requestHeaders">The HTTP headers to transmit with the request.
        /// </param>

        /// <param name="validStatusCodeRanges">HTTP status codes to consider successful. For instance, &#34;2xx,301-304,418&#34;.
        /// </param>

        /// <param name="preferHttps">Value indicating whether HTTPS is preferred over HTTP in cases where the
        /// choice is not explicit.
        /// </param>
        public ConnectionMonitorHttpConfiguration(int? port = default(int?), string method = default(string), string path = default(string), System.Collections.Generic.IList<HttpHeader> requestHeaders = default(System.Collections.Generic.IList<HttpHeader>), System.Collections.Generic.IList<string> validStatusCodeRanges = default(System.Collections.Generic.IList<string>), bool? preferHttps = default(bool?))

        {
            this.Port = port;
            this.Method = method;
            this.Path = path;
            this.RequestHeaders = requestHeaders;
            this.ValidStatusCodeRanges = validStatusCodeRanges;
            this.PreferHttps = preferHttps;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the port to connect to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "port")]
        public int? Port {get; set; }

        /// <summary>
        /// Gets or sets the HTTP method to use. Possible values include: &#39;Get&#39;, &#39;Post&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "method")]
        public string Method {get; set; }

        /// <summary>
        /// Gets or sets the path component of the URI. For instance, &#34;/dir1/dir2&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets the HTTP headers to transmit with the request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestHeaders")]
        public System.Collections.Generic.IList<HttpHeader> RequestHeaders {get; set; }

        /// <summary>
        /// Gets or sets hTTP status codes to consider successful. For instance,
        /// &#34;2xx,301-304,418&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "validStatusCodeRanges")]
        public System.Collections.Generic.IList<string> ValidStatusCodeRanges {get; set; }

        /// <summary>
        /// Gets or sets value indicating whether HTTPS is preferred over HTTP in cases
        /// where the choice is not explicit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferHTTPS")]
        public bool? PreferHttps {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Port != null)
            {
                if (this.Port > 65535)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Port", 65535);
                }
                if (this.Port < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Port", 0);
                }
            }




        }
    }
}