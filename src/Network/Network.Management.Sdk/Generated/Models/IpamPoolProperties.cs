// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of IpamPool resource properties which are specific to the Pool
    /// resource.
    /// </summary>
    public partial class IpamPoolProperties
    {
        /// <summary>
        /// Initializes a new instance of the IpamPoolProperties class.
        /// </summary>
        public IpamPoolProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IpamPoolProperties class.
        /// </summary>

        /// <param name="description">
        /// </param>

        /// <param name="displayName">String representing a friendly name for the resource.
        /// </param>

        /// <param name="ipAddressType">List of IP address type for the IpamPool.
        /// </param>

        /// <param name="parentPoolName">String representing parent IpamPool resource name. If empty the IpamPool
        /// will be a root pool.
        /// </param>

        /// <param name="addressPrefixes">List of IP address prefixes of the resource.
        /// </param>

        /// <param name="provisioningState">Provisioning states of a resource.
        /// Possible values include: &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Canceled&#39;, &#39;Creating&#39;,
        /// &#39;Updating&#39;, &#39;Deleting&#39;</param>
        public IpamPoolProperties(System.Collections.Generic.IList<string> addressPrefixes, string description = default(string), string displayName = default(string), System.Collections.Generic.IList<string> ipAddressType = default(System.Collections.Generic.IList<string>), string parentPoolName = default(string), string provisioningState = default(string))

        {
            this.Description = description;
            this.DisplayName = displayName;
            this.IPAddressType = ipAddressType;
            this.ParentPoolName = parentPoolName;
            this.AddressPrefixes = addressPrefixes;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets string representing a friendly name for the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets list of IP address type for the IpamPool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddressType")]
        public System.Collections.Generic.IList<string> IPAddressType {get; private set; }

        /// <summary>
        /// Gets or sets string representing parent IpamPool resource name. If empty
        /// the IpamPool will be a root pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "parentPoolName")]
        public string ParentPoolName {get; set; }

        /// <summary>
        /// Gets or sets list of IP address prefixes of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressPrefixes")]
        public System.Collections.Generic.IList<string> AddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets provisioning states of a resource. Possible values include: &#39;Failed&#39;, &#39;Succeeded&#39;, &#39;Canceled&#39;, &#39;Creating&#39;, &#39;Updating&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AddressPrefixes == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AddressPrefixes");
            }






        }
    }
}