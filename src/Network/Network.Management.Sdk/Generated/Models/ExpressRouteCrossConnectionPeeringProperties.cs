// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of express route cross connection peering.
    /// </summary>
    public partial class ExpressRouteCrossConnectionPeeringProperties
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteCrossConnectionPeeringProperties class.
        /// </summary>
        public ExpressRouteCrossConnectionPeeringProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteCrossConnectionPeeringProperties class.
        /// </summary>

        /// <param name="peeringType">The peering type.
        /// Possible values include: &#39;AzurePublicPeering&#39;, &#39;AzurePrivatePeering&#39;,
        /// &#39;MicrosoftPeering&#39;</param>

        /// <param name="state">The peering state.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="azureAsn">The Azure ASN.
        /// </param>

        /// <param name="peerAsn">The peer ASN.
        /// </param>

        /// <param name="primaryPeerAddressPrefix">The primary address prefix.
        /// </param>

        /// <param name="secondaryPeerAddressPrefix">The secondary address prefix.
        /// </param>

        /// <param name="primaryAzurePort">The primary port.
        /// </param>

        /// <param name="secondaryAzurePort">The secondary port.
        /// </param>

        /// <param name="sharedKey">The shared key.
        /// </param>

        /// <param name="vlanId">The VLAN ID.
        /// </param>

        /// <param name="microsoftPeeringConfig">The Microsoft peering configuration.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route cross connection peering
        /// resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="gatewayManagerEtag">The GatewayManager Etag.
        /// </param>

        /// <param name="lastModifiedBy">Who was the last to modify the peering.
        /// </param>

        /// <param name="ipv6PeeringConfig">The IPv6 peering configuration.
        /// </param>
        public ExpressRouteCrossConnectionPeeringProperties(string peeringType = default(string), string state = default(string), int? azureAsn = default(int?), long? peerAsn = default(long?), string primaryPeerAddressPrefix = default(string), string secondaryPeerAddressPrefix = default(string), string primaryAzurePort = default(string), string secondaryAzurePort = default(string), string sharedKey = default(string), int? vlanId = default(int?), ExpressRouteCircuitPeeringConfig microsoftPeeringConfig = default(ExpressRouteCircuitPeeringConfig), string provisioningState = default(string), string gatewayManagerEtag = default(string), string lastModifiedBy = default(string), Ipv6ExpressRouteCircuitPeeringConfig ipv6PeeringConfig = default(Ipv6ExpressRouteCircuitPeeringConfig))

        {
            this.PeeringType = peeringType;
            this.State = state;
            this.AzureAsn = azureAsn;
            this.PeerAsn = peerAsn;
            this.PrimaryPeerAddressPrefix = primaryPeerAddressPrefix;
            this.SecondaryPeerAddressPrefix = secondaryPeerAddressPrefix;
            this.PrimaryAzurePort = primaryAzurePort;
            this.SecondaryAzurePort = secondaryAzurePort;
            this.SharedKey = sharedKey;
            this.VlanId = vlanId;
            this.MicrosoftPeeringConfig = microsoftPeeringConfig;
            this.ProvisioningState = provisioningState;
            this.GatewayManagerEtag = gatewayManagerEtag;
            this.LastModifiedBy = lastModifiedBy;
            this.Ipv6PeeringConfig = ipv6PeeringConfig;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the peering type. Possible values include: &#39;AzurePublicPeering&#39;, &#39;AzurePrivatePeering&#39;, &#39;MicrosoftPeering&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peeringType")]
        public string PeeringType {get; set; }

        /// <summary>
        /// Gets or sets the peering state. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets the Azure ASN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureASN")]
        public int? AzureAsn {get; private set; }

        /// <summary>
        /// Gets or sets the peer ASN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerASN")]
        public long? PeerAsn {get; set; }

        /// <summary>
        /// Gets or sets the primary address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryPeerAddressPrefix")]
        public string PrimaryPeerAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the secondary address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryPeerAddressPrefix")]
        public string SecondaryPeerAddressPrefix {get; set; }

        /// <summary>
        /// Gets the primary port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryAzurePort")]
        public string PrimaryAzurePort {get; private set; }

        /// <summary>
        /// Gets the secondary port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryAzurePort")]
        public string SecondaryAzurePort {get; private set; }

        /// <summary>
        /// Gets or sets the shared key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sharedKey")]
        public string SharedKey {get; set; }

        /// <summary>
        /// Gets or sets the VLAN ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vlanId")]
        public int? VlanId {get; set; }

        /// <summary>
        /// Gets or sets the Microsoft peering configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "microsoftPeeringConfig")]
        public ExpressRouteCircuitPeeringConfig MicrosoftPeeringConfig {get; set; }

        /// <summary>
        /// Gets the provisioning state of the express route cross connection peering
        /// resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the GatewayManager Etag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayManagerEtag")]
        public string GatewayManagerEtag {get; set; }

        /// <summary>
        /// Gets who was the last to modify the peering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModifiedBy")]
        public string LastModifiedBy {get; private set; }

        /// <summary>
        /// Gets or sets the IPv6 peering configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipv6PeeringConfig")]
        public Ipv6ExpressRouteCircuitPeeringConfig Ipv6PeeringConfig {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.PeerAsn != null)
            {
                if (this.PeerAsn > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PeerAsn", 4294967295);
                }
                if (this.PeerAsn < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PeerAsn", 1);
                }
            }










        }
    }
}