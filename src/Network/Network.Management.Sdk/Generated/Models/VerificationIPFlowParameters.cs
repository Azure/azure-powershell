// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters that define the IP flow to be verified.
    /// </summary>
    public partial class VerificationIPFlowParameters
    {
        /// <summary>
        /// Initializes a new instance of the VerificationIPFlowParameters class.
        /// </summary>
        public VerificationIPFlowParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VerificationIPFlowParameters class.
        /// </summary>

        /// <param name="targetResourceId">The ID of the target resource to perform next-hop on.
        /// </param>

        /// <param name="direction">The direction of the packet represented as a 5-tuple.
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="protocol">Protocol to be verified on.
        /// Possible values include: &#39;TCP&#39;, &#39;UDP&#39;</param>

        /// <param name="localPort">The local port. Acceptable values are a single integer in the range
        /// (0-65535). Support for * for the source port, which depends on the
        /// direction.
        /// </param>

        /// <param name="remotePort">The remote port. Acceptable values are a single integer in the range
        /// (0-65535). Support for * for the source port, which depends on the
        /// direction.
        /// </param>

        /// <param name="localIPAddress">The local IP address. Acceptable values are valid IPv4 addresses.
        /// </param>

        /// <param name="remoteIPAddress">The remote IP address. Acceptable values are valid IPv4 addresses.
        /// </param>

        /// <param name="targetNicResourceId">The NIC ID. (If VM has multiple NICs and IP forwarding is enabled on any of
        /// them, then this parameter must be specified. Otherwise optional).
        /// </param>
        public VerificationIPFlowParameters(string targetResourceId, string direction, string protocol, string localPort, string remotePort, string localIPAddress, string remoteIPAddress, string targetNicResourceId = default(string))

        {
            this.TargetResourceId = targetResourceId;
            this.Direction = direction;
            this.Protocol = protocol;
            this.LocalPort = localPort;
            this.RemotePort = remotePort;
            this.LocalIPAddress = localIPAddress;
            this.RemoteIPAddress = remoteIPAddress;
            this.TargetNicResourceId = targetNicResourceId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ID of the target resource to perform next-hop on.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetResourceId")]
        public string TargetResourceId {get; set; }

        /// <summary>
        /// Gets or sets the direction of the packet represented as a 5-tuple. Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }

        /// <summary>
        /// Gets or sets protocol to be verified on. Possible values include: &#39;TCP&#39;, &#39;UDP&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the local port. Acceptable values are a single integer in the
        /// range (0-65535). Support for * for the source port, which depends on the
        /// direction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localPort")]
        public string LocalPort {get; set; }

        /// <summary>
        /// Gets or sets the remote port. Acceptable values are a single integer in the
        /// range (0-65535). Support for * for the source port, which depends on the
        /// direction.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remotePort")]
        public string RemotePort {get; set; }

        /// <summary>
        /// Gets or sets the local IP address. Acceptable values are valid IPv4
        /// addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localIPAddress")]
        public string LocalIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the remote IP address. Acceptable values are valid IPv4
        /// addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remoteIPAddress")]
        public string RemoteIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the NIC ID. (If VM has multiple NICs and IP forwarding is
        /// enabled on any of them, then this parameter must be specified. Otherwise
        /// optional).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNicResourceId")]
        public string TargetNicResourceId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.TargetResourceId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TargetResourceId");
            }
            if (this.Direction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Direction");
            }
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.LocalPort == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LocalPort");
            }
            if (this.RemotePort == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RemotePort");
            }
            if (this.LocalIPAddress == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LocalIPAddress");
            }
            if (this.RemoteIPAddress == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RemoteIPAddress");
            }








        }
    }
}