// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// The network manager effective connectivity configuration
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class EffectiveConnectivityConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the EffectiveConnectivityConfiguration class.
        /// </summary>
        public EffectiveConnectivityConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EffectiveConnectivityConfiguration class.
        /// </summary>

        /// <param name="id">Connectivity configuration ID.
        /// </param>

        /// <param name="configurationGroups">Effective configuration groups.
        /// </param>

        /// <param name="connectivityTopology">Connectivity topology type.
        /// Possible values include: &#39;HubAndSpoke&#39;, &#39;Mesh&#39;</param>

        /// <param name="isGlobal">Flag if global mesh is supported.
        /// Possible values include: &#39;False&#39;, &#39;True&#39;</param>

        /// <param name="provisioningState">The provisioning state of the connectivity configuration resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="description">A description of the connectivity configuration.
        /// </param>

        /// <param name="hubs">List of hubItems
        /// </param>

        /// <param name="appliesToGroups">Groups for configuration
        /// </param>

        /// <param name="deleteExistingPeering">Flag if need to remove current existing peerings.
        /// Possible values include: &#39;False&#39;, &#39;True&#39;</param>

        /// <param name="resourceGuid">Unique identifier for this resource.
        /// </param>
        public EffectiveConnectivityConfiguration(string id = default(string), System.Collections.Generic.IList<ConfigurationGroup> configurationGroups = default(System.Collections.Generic.IList<ConfigurationGroup>), string connectivityTopology = default(string), string isGlobal = default(string), string provisioningState = default(string), string description = default(string), System.Collections.Generic.IList<Hub> hubs = default(System.Collections.Generic.IList<Hub>), System.Collections.Generic.IList<ConnectivityGroupItem> appliesToGroups = default(System.Collections.Generic.IList<ConnectivityGroupItem>), string deleteExistingPeering = default(string), string resourceGuid = default(string))

        {
            this.Id = id;
            this.ConfigurationGroups = configurationGroups;
            this.ConnectivityTopology = connectivityTopology;
            this.IsGlobal = isGlobal;
            this.ProvisioningState = provisioningState;
            this.Description = description;
            this.Hubs = hubs;
            this.AppliesToGroups = appliesToGroups;
            this.DeleteExistingPeering = deleteExistingPeering;
            this.ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets connectivity configuration ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; set; }

        /// <summary>
        /// Gets or sets effective configuration groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configurationGroups")]
        public System.Collections.Generic.IList<ConfigurationGroup> ConfigurationGroups {get; set; }

        /// <summary>
        /// Gets or sets connectivity topology type. Possible values include: &#39;HubAndSpoke&#39;, &#39;Mesh&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectivityTopology")]
        public string ConnectivityTopology {get; set; }

        /// <summary>
        /// Gets or sets flag if global mesh is supported. Possible values include: &#39;False&#39;, &#39;True&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isGlobal")]
        public string IsGlobal {get; set; }

        /// <summary>
        /// Gets the provisioning state of the connectivity configuration resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets a description of the connectivity configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets list of hubItems
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hubs")]
        public System.Collections.Generic.IList<Hub> Hubs {get; set; }

        /// <summary>
        /// Gets or sets groups for configuration
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.appliesToGroups")]
        public System.Collections.Generic.IList<ConnectivityGroupItem> AppliesToGroups {get; set; }

        /// <summary>
        /// Gets or sets flag if need to remove current existing peerings. Possible values include: &#39;False&#39;, &#39;True&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deleteExistingPeering")]
        public string DeleteExistingPeering {get; set; }

        /// <summary>
        /// Gets unique identifier for this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }
    }
}