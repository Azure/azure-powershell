// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Define match conditions.
    /// </summary>
    public partial class MatchCondition
    {
        /// <summary>
        /// Initializes a new instance of the MatchCondition class.
        /// </summary>
        public MatchCondition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MatchCondition class.
        /// </summary>

        /// <param name="matchVariables">List of match variables.
        /// </param>

        /// <param name="operatorProperty">The operator to be matched.
        /// Possible values include: &#39;IPMatch&#39;, &#39;Equal&#39;, &#39;Contains&#39;, &#39;LessThan&#39;,
        /// &#39;GreaterThan&#39;, &#39;LessThanOrEqual&#39;, &#39;GreaterThanOrEqual&#39;, &#39;BeginsWith&#39;,
        /// &#39;EndsWith&#39;, &#39;Regex&#39;, &#39;GeoMatch&#39;, &#39;Any&#39;</param>

        /// <param name="negationConditon">Whether this is negate condition or not.
        /// </param>

        /// <param name="matchValues">Match value.
        /// </param>

        /// <param name="transforms">List of transforms.
        /// </param>
        public MatchCondition(System.Collections.Generic.IList<MatchVariable> matchVariables, string operatorProperty, System.Collections.Generic.IList<string> matchValues, bool? negationConditon = default(bool?), System.Collections.Generic.IList<string> transforms = default(System.Collections.Generic.IList<string>))

        {
            this.MatchVariables = matchVariables;
            this.OperatorProperty = operatorProperty;
            this.NegationConditon = negationConditon;
            this.MatchValues = matchValues;
            this.Transforms = transforms;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of match variables.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchVariables")]
        public System.Collections.Generic.IList<MatchVariable> MatchVariables {get; set; }

        /// <summary>
        /// Gets or sets the operator to be matched. Possible values include: &#39;IPMatch&#39;, &#39;Equal&#39;, &#39;Contains&#39;, &#39;LessThan&#39;, &#39;GreaterThan&#39;, &#39;LessThanOrEqual&#39;, &#39;GreaterThanOrEqual&#39;, &#39;BeginsWith&#39;, &#39;EndsWith&#39;, &#39;Regex&#39;, &#39;GeoMatch&#39;, &#39;Any&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operator")]
        public string OperatorProperty {get; set; }

        /// <summary>
        /// Gets or sets whether this is negate condition or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "negationConditon")]
        public bool? NegationConditon {get; set; }

        /// <summary>
        /// Gets or sets match value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchValues")]
        public System.Collections.Generic.IList<string> MatchValues {get; set; }

        /// <summary>
        /// Gets or sets list of transforms.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "transforms")]
        public System.Collections.Generic.IList<string> Transforms {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MatchVariables == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchVariables");
            }
            if (this.OperatorProperty == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "OperatorProperty");
            }
            if (this.MatchValues == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchValues");
            }
            if (this.MatchVariables != null)
            {
                foreach (var element in this.MatchVariables)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }



        }
    }
}