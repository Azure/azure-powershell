// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Information about packet capture session.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class PacketCaptureResult
    {
        /// <summary>
        /// Initializes a new instance of the PacketCaptureResult class.
        /// </summary>
        public PacketCaptureResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PacketCaptureResult class.
        /// </summary>

        /// <param name="name">Name of the packet capture session.
        /// </param>

        /// <param name="id">ID of the packet capture operation.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the packet capture session.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="target">The ID of the targeted resource, only AzureVM and AzureVMSS as target type
        /// are currently supported.
        /// </param>

        /// <param name="scope">A list of AzureVMSS instances which can be included or excluded to run
        /// packet capture. If both included and excluded are empty, then the packet
        /// capture will run on all instances of AzureVMSS.
        /// </param>

        /// <param name="targetType">Target type of the resource provided.
        /// Possible values include: &#39;AzureVM&#39;, &#39;AzureVMSS&#39;</param>

        /// <param name="bytesToCapturePerPacket">Number of bytes captured per packet, the remaining bytes are truncated.
        /// </param>

        /// <param name="totalBytesPerSession">Maximum size of the capture output.
        /// </param>

        /// <param name="timeLimitInSeconds">Maximum duration of the capture session in seconds.
        /// </param>

        /// <param name="storageLocation">The storage location for a packet capture session.
        /// </param>

        /// <param name="filters">A list of packet capture filters.
        /// </param>

        /// <param name="continuousCapture">This continuous capture is a nullable boolean, which can hold &#39;null&#39;,
        /// &#39;true&#39; or &#39;false&#39; value. If we do not pass this parameter, it would be
        /// consider as &#39;null&#39;, default value is &#39;null&#39;.
        /// </param>

        /// <param name="captureSettings">The capture setting holds the &#39;FileCount&#39;, &#39;FileSizeInBytes&#39;,
        /// &#39;SessionTimeLimitInSeconds&#39; values.
        /// </param>
        public PacketCaptureResult(string name = default(string), string id = default(string), string etag = default(string), string provisioningState = default(string), string target = default(string), PacketCaptureMachineScope scope = default(PacketCaptureMachineScope), PacketCaptureTargetType? targetType = default(PacketCaptureTargetType?), long? bytesToCapturePerPacket = default(long?), long? totalBytesPerSession = default(long?), int? timeLimitInSeconds = default(int?), PacketCaptureStorageLocation storageLocation = default(PacketCaptureStorageLocation), System.Collections.Generic.IList<PacketCaptureFilter> filters = default(System.Collections.Generic.IList<PacketCaptureFilter>), bool? continuousCapture = default(bool?), PacketCaptureSettings captureSettings = default(PacketCaptureSettings))

        {
            this.Name = name;
            this.Id = id;
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.Target = target;
            this.Scope = scope;
            this.TargetType = targetType;
            this.BytesToCapturePerPacket = bytesToCapturePerPacket;
            this.TotalBytesPerSession = totalBytesPerSession;
            this.TimeLimitInSeconds = timeLimitInSeconds;
            this.StorageLocation = storageLocation;
            this.Filters = filters;
            this.ContinuousCapture = continuousCapture;
            this.CaptureSettings = captureSettings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets name of the packet capture session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets iD of the packet capture operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the packet capture session. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the ID of the targeted resource, only AzureVM and AzureVMSS as
        /// target type are currently supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.target")]
        public string Target {get; set; }

        /// <summary>
        /// Gets or sets a list of AzureVMSS instances which can be included or
        /// excluded to run packet capture. If both included and excluded are empty,
        /// then the packet capture will run on all instances of AzureVMSS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.scope")]
        public PacketCaptureMachineScope Scope {get; set; }

        /// <summary>
        /// Gets or sets target type of the resource provided. Possible values include: &#39;AzureVM&#39;, &#39;AzureVMSS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetType")]
        public PacketCaptureTargetType? TargetType {get; set; }

        /// <summary>
        /// Gets or sets number of bytes captured per packet, the remaining bytes are
        /// truncated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bytesToCapturePerPacket")]
        public long? BytesToCapturePerPacket {get; set; }

        /// <summary>
        /// Gets or sets maximum size of the capture output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.totalBytesPerSession")]
        public long? TotalBytesPerSession {get; set; }

        /// <summary>
        /// Gets or sets maximum duration of the capture session in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.timeLimitInSeconds")]
        public int? TimeLimitInSeconds {get; set; }

        /// <summary>
        /// Gets or sets the storage location for a packet capture session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageLocation")]
        public PacketCaptureStorageLocation StorageLocation {get; set; }

        /// <summary>
        /// Gets or sets a list of packet capture filters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.filters")]
        public System.Collections.Generic.IList<PacketCaptureFilter> Filters {get; set; }

        /// <summary>
        /// Gets or sets this continuous capture is a nullable boolean, which can hold
        /// &#39;null&#39;, &#39;true&#39; or &#39;false&#39; value. If we do not pass this parameter, it would
        /// be consider as &#39;null&#39;, default value is &#39;null&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.continuousCapture")]
        public bool? ContinuousCapture {get; set; }

        /// <summary>
        /// Gets or sets the capture setting holds the &#39;FileCount&#39;, &#39;FileSizeInBytes&#39;,
        /// &#39;SessionTimeLimitInSeconds&#39; values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.captureSettings")]
        public PacketCaptureSettings CaptureSettings {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {







            if (this.BytesToCapturePerPacket != null)
            {
                if (this.BytesToCapturePerPacket > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "BytesToCapturePerPacket", 4294967295);
                }
                if (this.BytesToCapturePerPacket < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "BytesToCapturePerPacket", 0);
                }
            }
            if (this.TotalBytesPerSession != null)
            {
                if (this.TotalBytesPerSession > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TotalBytesPerSession", 4294967295);
                }
                if (this.TotalBytesPerSession < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalBytesPerSession", 0);
                }
            }
            if (this.TimeLimitInSeconds != null)
            {
                if (this.TimeLimitInSeconds > 18000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TimeLimitInSeconds", 18000);
                }
                if (this.TimeLimitInSeconds < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TimeLimitInSeconds", 0);
                }
            }


            if (this.CaptureSettings != null)
            {
                this.CaptureSettings.Validate();
            }
        }
    }
}