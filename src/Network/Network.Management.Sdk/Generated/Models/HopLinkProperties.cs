// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Hop link properties.
    /// </summary>
    public partial class HopLinkProperties
    {
        /// <summary>
        /// Initializes a new instance of the HopLinkProperties class.
        /// </summary>
        public HopLinkProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HopLinkProperties class.
        /// </summary>

        /// <param name="roundTripTimeMin">Minimum roundtrip time in milliseconds.
        /// </param>

        /// <param name="roundTripTimeAvg">Average roundtrip time in milliseconds.
        /// </param>

        /// <param name="roundTripTimeMax">Maximum roundtrip time in milliseconds.
        /// </param>
        public HopLinkProperties(long? roundTripTimeMin = default(long?), long? roundTripTimeAvg = default(long?), long? roundTripTimeMax = default(long?))

        {
            this.RoundTripTimeMin = roundTripTimeMin;
            this.RoundTripTimeAvg = roundTripTimeAvg;
            this.RoundTripTimeMax = roundTripTimeMax;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets minimum roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roundTripTimeMin")]
        public long? RoundTripTimeMin {get; private set; }

        /// <summary>
        /// Gets average roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roundTripTimeAvg")]
        public long? RoundTripTimeAvg {get; private set; }

        /// <summary>
        /// Gets maximum roundtrip time in milliseconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roundTripTimeMax")]
        public long? RoundTripTimeMax {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RoundTripTimeMin != null)
            {
                if (this.RoundTripTimeMin > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RoundTripTimeMin", 4294967295);
                }
                if (this.RoundTripTimeMin < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RoundTripTimeMin", 0);
                }
            }
            if (this.RoundTripTimeAvg != null)
            {
                if (this.RoundTripTimeAvg > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RoundTripTimeAvg", 4294967295);
                }
                if (this.RoundTripTimeAvg < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RoundTripTimeAvg", 0);
                }
            }
            if (this.RoundTripTimeMax != null)
            {
                if (this.RoundTripTimeMax > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "RoundTripTimeMax", 4294967295);
                }
                if (this.RoundTripTimeMax < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "RoundTripTimeMax", 0);
                }
            }
        }
    }
}