// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Security rule resource.
    /// </summary>
    public partial class SecurityUserRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the SecurityUserRulePropertiesFormat class.
        /// </summary>
        public SecurityUserRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityUserRulePropertiesFormat class.
        /// </summary>

        /// <param name="description">A description for this rule.
        /// </param>

        /// <param name="protocol">Network protocol this rule applies to.
        /// Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Icmp&#39;, &#39;Esp&#39;, &#39;Any&#39;, &#39;Ah&#39;</param>

        /// <param name="sources">The CIDR or source IP ranges.
        /// </param>

        /// <param name="destinations">The destination address prefixes. CIDR or destination IP ranges.
        /// </param>

        /// <param name="sourcePortRanges">The source port ranges.
        /// </param>

        /// <param name="destinationPortRanges">The destination port ranges.
        /// </param>

        /// <param name="direction">Indicates if the traffic matched against the rule in inbound or outbound.
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="provisioningState">The provisioning state of the security configuration user rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="resourceGuid">Unique identifier for this resource.
        /// </param>
        public SecurityUserRulePropertiesFormat(string protocol, string direction, string description = default(string), System.Collections.Generic.IList<AddressPrefixItem> sources = default(System.Collections.Generic.IList<AddressPrefixItem>), System.Collections.Generic.IList<AddressPrefixItem> destinations = default(System.Collections.Generic.IList<AddressPrefixItem>), System.Collections.Generic.IList<string> sourcePortRanges = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationPortRanges = default(System.Collections.Generic.IList<string>), string provisioningState = default(string), string resourceGuid = default(string))

        {
            this.Description = description;
            this.Protocol = protocol;
            this.Sources = sources;
            this.Destinations = destinations;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.Direction = direction;
            this.ProvisioningState = provisioningState;
            this.ResourceGuid = resourceGuid;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a description for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets network protocol this rule applies to. Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Icmp&#39;, &#39;Esp&#39;, &#39;Any&#39;, &#39;Ah&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sources")]
        public System.Collections.Generic.IList<AddressPrefixItem> Sources {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefixes. CIDR or destination IP
        /// ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinations")]
        public System.Collections.Generic.IList<AddressPrefixItem> Destinations {get; set; }

        /// <summary>
        /// Gets or sets the source port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRanges")]
        public System.Collections.Generic.IList<string> SourcePortRanges {get; set; }

        /// <summary>
        /// Gets or sets the destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRanges")]
        public System.Collections.Generic.IList<string> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets indicates if the traffic matched against the rule in inbound
        /// or outbound. Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }

        /// <summary>
        /// Gets the provisioning state of the security configuration user rule
        /// resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets unique identifier for this resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.Direction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Direction");
            }









        }
    }
}