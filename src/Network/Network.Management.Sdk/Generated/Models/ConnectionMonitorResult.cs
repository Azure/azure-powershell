// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Information about the connection monitor.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ConnectionMonitorResult : Microsoft.Rest.Azure.IResource
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorResult class.
        /// </summary>
        public ConnectionMonitorResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorResult class.
        /// </summary>

        /// <param name="name">Name of the connection monitor.
        /// </param>

        /// <param name="id">ID of the connection monitor.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Connection monitor type.
        /// </param>

        /// <param name="location">Connection monitor location.
        /// </param>

        /// <param name="tags">Connection monitor tags.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the connection monitor.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="source">Describes the source of connection monitor.
        /// </param>

        /// <param name="destination">Describes the destination of connection monitor.
        /// </param>

        /// <param name="autoStart">Determines if the connection monitor will start automatically once created.
        /// </param>

        /// <param name="monitoringIntervalInSeconds">Monitoring interval in seconds.
        /// </param>

        /// <param name="endpoints">List of connection monitor endpoints.
        /// </param>

        /// <param name="testConfigurations">List of connection monitor test configurations.
        /// </param>

        /// <param name="testGroups">List of connection monitor test groups.
        /// </param>

        /// <param name="outputs">List of connection monitor outputs.
        /// </param>

        /// <param name="notes">Optional notes to be associated with the connection monitor.
        /// </param>

        /// <param name="startTime">The date and time when the connection monitor was started.
        /// </param>

        /// <param name="monitoringStatus">The monitoring status of the connection monitor.
        /// </param>

        /// <param name="connectionMonitorType">Type of connection monitor.
        /// Possible values include: &#39;MultiEndpoint&#39;, &#39;SingleSourceDestination&#39;</param>
        public ConnectionMonitorResult(string name = default(string), string id = default(string), string etag = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string provisioningState = default(string), ConnectionMonitorSource source = default(ConnectionMonitorSource), ConnectionMonitorDestination destination = default(ConnectionMonitorDestination), bool? autoStart = default(bool?), int? monitoringIntervalInSeconds = default(int?), System.Collections.Generic.IList<ConnectionMonitorEndpoint> endpoints = default(System.Collections.Generic.IList<ConnectionMonitorEndpoint>), System.Collections.Generic.IList<ConnectionMonitorTestConfiguration> testConfigurations = default(System.Collections.Generic.IList<ConnectionMonitorTestConfiguration>), System.Collections.Generic.IList<ConnectionMonitorTestGroup> testGroups = default(System.Collections.Generic.IList<ConnectionMonitorTestGroup>), System.Collections.Generic.IList<ConnectionMonitorOutput> outputs = default(System.Collections.Generic.IList<ConnectionMonitorOutput>), string notes = default(string), System.DateTime? startTime = default(System.DateTime?), string monitoringStatus = default(string), string connectionMonitorType = default(string))

        {
            this.Name = name;
            this.Id = id;
            this.Etag = etag;
            this.Type = type;
            this.Location = location;
            this.Tags = tags;
            this.ProvisioningState = provisioningState;
            this.Source = source;
            this.Destination = destination;
            this.AutoStart = autoStart;
            this.MonitoringIntervalInSeconds = monitoringIntervalInSeconds;
            this.Endpoints = endpoints;
            this.TestConfigurations = testConfigurations;
            this.TestGroups = testGroups;
            this.Outputs = outputs;
            this.Notes = notes;
            this.StartTime = startTime;
            this.MonitoringStatus = monitoringStatus;
            this.ConnectionMonitorType = connectionMonitorType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets name of the connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets iD of the connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets connection monitor type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets connection monitor location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets connection monitor tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets the provisioning state of the connection monitor. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets describes the source of connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.source")]
        public ConnectionMonitorSource Source {get; set; }

        /// <summary>
        /// Gets or sets describes the destination of connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destination")]
        public ConnectionMonitorDestination Destination {get; set; }

        /// <summary>
        /// Gets or sets determines if the connection monitor will start automatically
        /// once created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.autoStart")]
        public bool? AutoStart {get; set; }

        /// <summary>
        /// Gets or sets monitoring interval in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.monitoringIntervalInSeconds")]
        public int? MonitoringIntervalInSeconds {get; set; }

        /// <summary>
        /// Gets or sets list of connection monitor endpoints.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.endpoints")]
        public System.Collections.Generic.IList<ConnectionMonitorEndpoint> Endpoints {get; set; }

        /// <summary>
        /// Gets or sets list of connection monitor test configurations.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.testConfigurations")]
        public System.Collections.Generic.IList<ConnectionMonitorTestConfiguration> TestConfigurations {get; set; }

        /// <summary>
        /// Gets or sets list of connection monitor test groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.testGroups")]
        public System.Collections.Generic.IList<ConnectionMonitorTestGroup> TestGroups {get; set; }

        /// <summary>
        /// Gets or sets list of connection monitor outputs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outputs")]
        public System.Collections.Generic.IList<ConnectionMonitorOutput> Outputs {get; set; }

        /// <summary>
        /// Gets or sets optional notes to be associated with the connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.notes")]
        public string Notes {get; set; }

        /// <summary>
        /// Gets the date and time when the connection monitor was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets the monitoring status of the connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.monitoringStatus")]
        public string MonitoringStatus {get; private set; }

        /// <summary>
        /// Gets type of connection monitor. Possible values include: &#39;MultiEndpoint&#39;, &#39;SingleSourceDestination&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectionMonitorType")]
        public string ConnectionMonitorType {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {







            if (this.Source != null)
            {
                this.Source.Validate();
            }
            if (this.Destination != null)
            {
                this.Destination.Validate();
            }
            if (this.MonitoringIntervalInSeconds != null)
            {
                if (this.MonitoringIntervalInSeconds > 1800)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MonitoringIntervalInSeconds", 1800);
                }
                if (this.MonitoringIntervalInSeconds < 30)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MonitoringIntervalInSeconds", 30);
                }
            }
            if (this.Endpoints != null)
            {
                foreach (var element in this.Endpoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.TestConfigurations != null)
            {
                foreach (var element in this.TestConfigurations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.TestGroups != null)
            {
                foreach (var element in this.TestGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




        }
    }
}