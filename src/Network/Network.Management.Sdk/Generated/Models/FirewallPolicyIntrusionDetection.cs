// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Configuration for intrusion detection mode and rules.
    /// </summary>
    public partial class FirewallPolicyIntrusionDetection
    {
        /// <summary>
        /// Initializes a new instance of the FirewallPolicyIntrusionDetection class.
        /// </summary>
        public FirewallPolicyIntrusionDetection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FirewallPolicyIntrusionDetection class.
        /// </summary>

        /// <param name="mode">Intrusion detection general state. When attached to a parent policy, the
        /// firewall&#39;s effective IDPS mode is the stricter mode of the two.
        /// Possible values include: &#39;Off&#39;, &#39;Alert&#39;, &#39;Deny&#39;</param>

        /// <param name="profile">IDPS profile name. When attached to a parent policy, the firewall&#39;s
        /// effective profile is the profile name of the parent policy.
        /// Possible values include: &#39;Basic&#39;, &#39;Standard&#39;, &#39;Advanced&#39;, &#39;Extended&#39;</param>

        /// <param name="configuration">Intrusion detection configuration properties.
        /// </param>
        public FirewallPolicyIntrusionDetection(string mode = default(string), string profile = default(string), FirewallPolicyIntrusionDetectionConfiguration configuration = default(FirewallPolicyIntrusionDetectionConfiguration))

        {
            this.Mode = mode;
            this.Profile = profile;
            this.Configuration = configuration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets intrusion detection general state. When attached to a parent
        /// policy, the firewall&#39;s effective IDPS mode is the stricter mode of the two. Possible values include: &#39;Off&#39;, &#39;Alert&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets iDPS profile name. When attached to a parent policy, the
        /// firewall&#39;s effective profile is the profile name of the parent policy. Possible values include: &#39;Basic&#39;, &#39;Standard&#39;, &#39;Advanced&#39;, &#39;Extended&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "profile")]
        public string Profile {get; set; }

        /// <summary>
        /// Gets or sets intrusion detection configuration properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "configuration")]
        public FirewallPolicyIntrusionDetectionConfiguration Configuration {get; set; }
    }
}