// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Defines contents of a web application firewall global configuration.
    /// </summary>
    public partial class PolicySettings
    {
        /// <summary>
        /// Initializes a new instance of the PolicySettings class.
        /// </summary>
        public PolicySettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PolicySettings class.
        /// </summary>

        /// <param name="state">The state of the policy.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="mode">The mode of the policy.
        /// Possible values include: &#39;Prevention&#39;, &#39;Detection&#39;</param>

        /// <param name="requestBodyCheck">Whether to allow WAF to check request Body.
        /// </param>

        /// <param name="requestBodyInspectLimitInKb">Max inspection limit in KB for request body inspection for WAF.
        /// </param>

        /// <param name="requestBodyEnforcement">Whether allow WAF to enforce request body limits.
        /// </param>

        /// <param name="maxRequestBodySizeInKb">Maximum request body size in Kb for WAF.
        /// </param>

        /// <param name="fileUploadEnforcement">Whether allow WAF to enforce file upload limits.
        /// </param>

        /// <param name="fileUploadLimitInMb">Maximum file upload size in Mb for WAF.
        /// </param>

        /// <param name="customBlockResponseStatusCode">If the action type is block, customer can override the response status
        /// code.
        /// </param>

        /// <param name="customBlockResponseBody">If the action type is block, customer can override the response body. The
        /// body must be specified in base64 encoding.
        /// </param>

        /// <param name="logScrubbing">To scrub sensitive log fields
        /// </param>

        /// <param name="jsChallengeCookieExpirationInMins">Web Application Firewall JavaScript Challenge Cookie Expiration time in
        /// minutes.
        /// </param>
        public PolicySettings(string state = default(string), string mode = default(string), bool? requestBodyCheck = default(bool?), int? requestBodyInspectLimitInKb = default(int?), bool? requestBodyEnforcement = default(bool?), int? maxRequestBodySizeInKb = default(int?), bool? fileUploadEnforcement = default(bool?), int? fileUploadLimitInMb = default(int?), int? customBlockResponseStatusCode = default(int?), string customBlockResponseBody = default(string), PolicySettingsLogScrubbing logScrubbing = default(PolicySettingsLogScrubbing), int? jsChallengeCookieExpirationInMins = default(int?))

        {
            this.State = state;
            this.Mode = mode;
            this.RequestBodyCheck = requestBodyCheck;
            this.RequestBodyInspectLimitInKb = requestBodyInspectLimitInKb;
            this.RequestBodyEnforcement = requestBodyEnforcement;
            this.MaxRequestBodySizeInKb = maxRequestBodySizeInKb;
            this.FileUploadEnforcement = fileUploadEnforcement;
            this.FileUploadLimitInMb = fileUploadLimitInMb;
            this.CustomBlockResponseStatusCode = customBlockResponseStatusCode;
            this.CustomBlockResponseBody = customBlockResponseBody;
            this.LogScrubbing = logScrubbing;
            this.JsChallengeCookieExpirationInMins = jsChallengeCookieExpirationInMins;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the state of the policy. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets the mode of the policy. Possible values include: &#39;Prevention&#39;, &#39;Detection&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets whether to allow WAF to check request Body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestBodyCheck")]
        public bool? RequestBodyCheck {get; set; }

        /// <summary>
        /// Gets or sets max inspection limit in KB for request body inspection for
        /// WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestBodyInspectLimitInKB")]
        public int? RequestBodyInspectLimitInKb {get; set; }

        /// <summary>
        /// Gets or sets whether allow WAF to enforce request body limits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestBodyEnforcement")]
        public bool? RequestBodyEnforcement {get; set; }

        /// <summary>
        /// Gets or sets maximum request body size in Kb for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxRequestBodySizeInKb")]
        public int? MaxRequestBodySizeInKb {get; set; }

        /// <summary>
        /// Gets or sets whether allow WAF to enforce file upload limits.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileUploadEnforcement")]
        public bool? FileUploadEnforcement {get; set; }

        /// <summary>
        /// Gets or sets maximum file upload size in Mb for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileUploadLimitInMb")]
        public int? FileUploadLimitInMb {get; set; }

        /// <summary>
        /// Gets or sets if the action type is block, customer can override the
        /// response status code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customBlockResponseStatusCode")]
        public int? CustomBlockResponseStatusCode {get; set; }

        /// <summary>
        /// Gets or sets if the action type is block, customer can override the
        /// response body. The body must be specified in base64 encoding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customBlockResponseBody")]
        public string CustomBlockResponseBody {get; set; }

        /// <summary>
        /// Gets or sets to scrub sensitive log fields
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "logScrubbing")]
        public PolicySettingsLogScrubbing LogScrubbing {get; set; }

        /// <summary>
        /// Gets or sets web Application Firewall JavaScript Challenge Cookie
        /// Expiration time in minutes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "jsChallengeCookieExpirationInMins")]
        public int? JsChallengeCookieExpirationInMins {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.MaxRequestBodySizeInKb != null)
            {
                if (this.MaxRequestBodySizeInKb < 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxRequestBodySizeInKb", 8);
                }
            }
            if (this.FileUploadLimitInMb != null)
            {
                if (this.FileUploadLimitInMb < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "FileUploadLimitInMb", 0);
                }
            }
            if (this.CustomBlockResponseStatusCode != null)
            {
                if (this.CustomBlockResponseStatusCode < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "CustomBlockResponseStatusCode", 0);
                }
            }
            if (this.CustomBlockResponseBody != null)
            {
                if (this.CustomBlockResponseBody.Length > 32768)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "CustomBlockResponseBody", 32768);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.CustomBlockResponseBody, "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "CustomBlockResponseBody", "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$");
                }
            }

            if (this.JsChallengeCookieExpirationInMins != null)
            {
                if (this.JsChallengeCookieExpirationInMins > 1440)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "JsChallengeCookieExpirationInMins", 1440);
                }
                if (this.JsChallengeCookieExpirationInMins < 5)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "JsChallengeCookieExpirationInMins", 5);
                }
            }
        }
    }
}