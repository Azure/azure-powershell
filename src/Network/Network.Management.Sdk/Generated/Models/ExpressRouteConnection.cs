// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// ExpressRouteConnection resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ExpressRouteConnection : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteConnection class.
        /// </summary>
        public ExpressRouteConnection()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteConnection class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route connection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="routingConfiguration">The Routing Configuration indicating the associated and propagated route
        /// tables on this connection.
        /// </param>

        /// <param name="expressRouteCircuitPeering">The ExpressRoute circuit peering.
        /// </param>

        /// <param name="authorizationKey">Authorization key to establish the connection.
        /// </param>

        /// <param name="routingWeight">The routing weight associated to the connection.
        /// </param>

        /// <param name="enableInternetSecurity">Enable internet security.
        /// </param>

        /// <param name="expressRouteGatewayBypass">Enable FastPath to vWan Firewall hub.
        /// </param>

        /// <param name="enablePrivateLinkFastPath">Bypass the ExpressRoute gateway when accessing private-links. ExpressRoute
        /// FastPath (expressRouteGatewayBypass) must be enabled.
        /// </param>
        public ExpressRouteConnection(string name, string id = default(string), string provisioningState = default(string), RoutingConfiguration routingConfiguration = default(RoutingConfiguration), ExpressRouteCircuitPeeringId expressRouteCircuitPeering = default(ExpressRouteCircuitPeeringId), string authorizationKey = default(string), int? routingWeight = default(int?), bool? enableInternetSecurity = default(bool?), bool? expressRouteGatewayBypass = default(bool?), bool? enablePrivateLinkFastPath = default(bool?))

        : base(id)
        {
            this.Name = name;
            this.ProvisioningState = provisioningState;
            this.RoutingConfiguration = routingConfiguration;
            this.ExpressRouteCircuitPeering = expressRouteCircuitPeering;
            this.AuthorizationKey = authorizationKey;
            this.RoutingWeight = routingWeight;
            this.EnableInternetSecurity = enableInternetSecurity;
            this.ExpressRouteGatewayBypass = expressRouteGatewayBypass;
            this.EnablePrivateLinkFastPath = enablePrivateLinkFastPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets the provisioning state of the express route connection resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the Routing Configuration indicating the associated and
        /// propagated route tables on this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.routingConfiguration")]
        public RoutingConfiguration RoutingConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the ExpressRoute circuit peering.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expressRouteCircuitPeering")]
        public ExpressRouteCircuitPeeringId ExpressRouteCircuitPeering {get; set; }

        /// <summary>
        /// Gets or sets authorization key to establish the connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authorizationKey")]
        public string AuthorizationKey {get; set; }

        /// <summary>
        /// Gets or sets the routing weight associated to the connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.routingWeight")]
        public int? RoutingWeight {get; set; }

        /// <summary>
        /// Gets or sets enable internet security.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableInternetSecurity")]
        public bool? EnableInternetSecurity {get; set; }

        /// <summary>
        /// Gets or sets enable FastPath to vWan Firewall hub.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.expressRouteGatewayBypass")]
        public bool? ExpressRouteGatewayBypass {get; set; }

        /// <summary>
        /// Gets or sets bypass the ExpressRoute gateway when accessing private-links.
        /// ExpressRoute FastPath (expressRouteGatewayBypass) must be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enablePrivateLinkFastPath")]
        public bool? EnablePrivateLinkFastPath {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }





        }
    }
}