// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// ExpressRouteProviderPort resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ExpressRouteProviderPort : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteProviderPort class.
        /// </summary>
        public ExpressRouteProviderPort()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteProviderPort class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="portPairDescriptor">The name of the port pair.
        /// </param>

        /// <param name="primaryAzurePort">The name of the primary port.
        /// </param>

        /// <param name="secondaryAzurePort">The name of the secondary port.
        /// </param>

        /// <param name="peeringLocation">The peering location of the port pair.
        /// </param>

        /// <param name="overprovisionFactor">Overprovisioning factor for the port pair.
        /// </param>

        /// <param name="portBandwidthInMbps">Bandwidth of the port in Mbps
        /// </param>

        /// <param name="usedBandwidthInMbps">Used Bandwidth of the port in Mbps
        /// </param>

        /// <param name="remainingBandwidthInMbps">Remaining Bandwidth of the port in Mbps
        /// </param>
        public ExpressRouteProviderPort(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string portPairDescriptor = default(string), string primaryAzurePort = default(string), string secondaryAzurePort = default(string), string peeringLocation = default(string), int? overprovisionFactor = default(int?), int? portBandwidthInMbps = default(int?), int? usedBandwidthInMbps = default(int?), int? remainingBandwidthInMbps = default(int?))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.PortPairDescriptor = portPairDescriptor;
            this.PrimaryAzurePort = primaryAzurePort;
            this.SecondaryAzurePort = secondaryAzurePort;
            this.PeeringLocation = peeringLocation;
            this.OverprovisionFactor = overprovisionFactor;
            this.PortBandwidthInMbps = portBandwidthInMbps;
            this.UsedBandwidthInMbps = usedBandwidthInMbps;
            this.RemainingBandwidthInMbps = remainingBandwidthInMbps;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the name of the port pair.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.portPairDescriptor")]
        public string PortPairDescriptor {get; private set; }

        /// <summary>
        /// Gets the name of the primary port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.primaryAzurePort")]
        public string PrimaryAzurePort {get; private set; }

        /// <summary>
        /// Gets the name of the secondary port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.secondaryAzurePort")]
        public string SecondaryAzurePort {get; private set; }

        /// <summary>
        /// Gets or sets the peering location of the port pair.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peeringLocation")]
        public string PeeringLocation {get; set; }

        /// <summary>
        /// Gets or sets overprovisioning factor for the port pair.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.overprovisionFactor")]
        public int? OverprovisionFactor {get; set; }

        /// <summary>
        /// Gets or sets bandwidth of the port in Mbps
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.portBandwidthInMbps")]
        public int? PortBandwidthInMbps {get; set; }

        /// <summary>
        /// Gets or sets used Bandwidth of the port in Mbps
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.usedBandwidthInMbps")]
        public int? UsedBandwidthInMbps {get; set; }

        /// <summary>
        /// Gets or sets remaining Bandwidth of the port in Mbps
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.remainingBandwidthInMbps")]
        public int? RemainingBandwidthInMbps {get; set; }
    }
}