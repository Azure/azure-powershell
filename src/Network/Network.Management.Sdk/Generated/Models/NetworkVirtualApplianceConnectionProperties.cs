// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the NetworkVirtualApplianceConnection subresource.
    /// </summary>
    public partial class NetworkVirtualApplianceConnectionProperties
    {
        /// <summary>
        /// Initializes a new instance of the NetworkVirtualApplianceConnectionProperties class.
        /// </summary>
        public NetworkVirtualApplianceConnectionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkVirtualApplianceConnectionProperties class.
        /// </summary>

        /// <param name="name">The name of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the NetworkVirtualApplianceConnection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="asn">Network Virtual Appliance ASN.
        /// </param>

        /// <param name="tunnelIdentifier">Unique identifier for the connection.
        /// </param>

        /// <param name="bgpPeerAddress">List of bgpPeerAddresses for the NVA instances
        /// </param>

        /// <param name="enableInternetSecurity">Enable internet security.
        /// </param>

        /// <param name="routingConfiguration">The Routing Configuration indicating the associated and propagated route
        /// tables on this connection.
        /// </param>
        public NetworkVirtualApplianceConnectionProperties(string name = default(string), string provisioningState = default(string), long? asn = default(long?), long? tunnelIdentifier = default(long?), System.Collections.Generic.IList<string> bgpPeerAddress = default(System.Collections.Generic.IList<string>), bool? enableInternetSecurity = default(bool?), RoutingConfiguration routingConfiguration = default(RoutingConfiguration))

        {
            this.Name = name;
            this.ProvisioningState = provisioningState;
            this.Asn = asn;
            this.TunnelIdentifier = tunnelIdentifier;
            this.BgpPeerAddress = bgpPeerAddress;
            this.EnableInternetSecurity = enableInternetSecurity;
            this.RoutingConfiguration = routingConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets the provisioning state of the NetworkVirtualApplianceConnection
        /// resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets network Virtual Appliance ASN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "asn")]
        public long? Asn {get; set; }

        /// <summary>
        /// Gets or sets unique identifier for the connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tunnelIdentifier")]
        public long? TunnelIdentifier {get; set; }

        /// <summary>
        /// Gets or sets list of bgpPeerAddresses for the NVA instances
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bgpPeerAddress")]
        public System.Collections.Generic.IList<string> BgpPeerAddress {get; set; }

        /// <summary>
        /// Gets or sets enable internet security.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableInternetSecurity")]
        public bool? EnableInternetSecurity {get; set; }

        /// <summary>
        /// Gets or sets the Routing Configuration indicating the associated and
        /// propagated route tables on this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingConfiguration")]
        public RoutingConfiguration RoutingConfiguration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.Asn != null)
            {
                if (this.Asn > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Asn", 4294967295);
                }
                if (this.Asn < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Asn", 0);
                }
            }
            if (this.TunnelIdentifier != null)
            {
                if (this.TunnelIdentifier > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TunnelIdentifier", 4294967295);
                }
                if (this.TunnelIdentifier < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TunnelIdentifier", 0);
                }
            }


        }
    }
}