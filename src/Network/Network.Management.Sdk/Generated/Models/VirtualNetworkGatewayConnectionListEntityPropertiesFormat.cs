// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// VirtualNetworkGatewayConnection properties.
    /// </summary>
    public partial class VirtualNetworkGatewayConnectionListEntityPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkGatewayConnectionListEntityPropertiesFormat class.
        /// </summary>
        public VirtualNetworkGatewayConnectionListEntityPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNetworkGatewayConnectionListEntityPropertiesFormat class.
        /// </summary>

        /// <param name="authorizationKey">The authorizationKey.
        /// </param>

        /// <param name="virtualNetworkGateway1">The reference to virtual network gateway resource.
        /// </param>

        /// <param name="virtualNetworkGateway2">The reference to virtual network gateway resource.
        /// </param>

        /// <param name="localNetworkGateway2">The reference to local network gateway resource.
        /// </param>

        /// <param name="connectionType">Gateway connection type.
        /// Possible values include: &#39;IPsec&#39;, &#39;Vnet2Vnet&#39;, &#39;ExpressRoute&#39;, &#39;VPNClient&#39;</param>

        /// <param name="connectionProtocol">Connection protocol used for this connection.
        /// Possible values include: &#39;IKEv2&#39;, &#39;IKEv1&#39;</param>

        /// <param name="routingWeight">The routing weight.
        /// </param>

        /// <param name="connectionMode">The connection mode for this connection.
        /// Possible values include: &#39;Default&#39;, &#39;ResponderOnly&#39;, &#39;InitiatorOnly&#39;</param>

        /// <param name="sharedKey">The IPSec shared key.
        /// </param>

        /// <param name="connectionStatus">Virtual Network Gateway connection status.
        /// Possible values include: &#39;Unknown&#39;, &#39;Connecting&#39;, &#39;Connected&#39;,
        /// &#39;NotConnected&#39;</param>

        /// <param name="tunnelConnectionStatus">Collection of all tunnels&#39; connection health status.
        /// </param>

        /// <param name="egressBytesTransferred">The egress bytes transferred in this connection.
        /// </param>

        /// <param name="ingressBytesTransferred">The ingress bytes transferred in this connection.
        /// </param>

        /// <param name="peer">The reference to peerings resource.
        /// </param>

        /// <param name="enableBgp">EnableBgp flag.
        /// </param>

        /// <param name="gatewayCustomBgpIPAddresses">GatewayCustomBgpIpAddresses to be used for virtual network gateway
        /// Connection.
        /// </param>

        /// <param name="usePolicyBasedTrafficSelectors">Enable policy-based traffic selectors.
        /// </param>

        /// <param name="ipsecPolicies">The IPSec Policies to be considered by this connection.
        /// </param>

        /// <param name="trafficSelectorPolicies">The Traffic Selector Policies to be considered by this connection.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the virtual network gateway connection
        /// resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the virtual network gateway connection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="expressRouteGatewayBypass">Bypass ExpressRoute Gateway for data forwarding.
        /// </param>

        /// <param name="enablePrivateLinkFastPath">Bypass the ExpressRoute gateway when accessing private-links. ExpressRoute
        /// FastPath (expressRouteGatewayBypass) must be enabled.
        /// </param>
        public VirtualNetworkGatewayConnectionListEntityPropertiesFormat(VirtualNetworkConnectionGatewayReference virtualNetworkGateway1, string connectionType, string authorizationKey = default(string), VirtualNetworkConnectionGatewayReference virtualNetworkGateway2 = default(VirtualNetworkConnectionGatewayReference), VirtualNetworkConnectionGatewayReference localNetworkGateway2 = default(VirtualNetworkConnectionGatewayReference), string connectionProtocol = default(string), int? routingWeight = default(int?), string connectionMode = default(string), string sharedKey = default(string), string connectionStatus = default(string), System.Collections.Generic.IList<TunnelConnectionHealth> tunnelConnectionStatus = default(System.Collections.Generic.IList<TunnelConnectionHealth>), long? egressBytesTransferred = default(long?), long? ingressBytesTransferred = default(long?), SubResource peer = default(SubResource), bool? enableBgp = default(bool?), System.Collections.Generic.IList<GatewayCustomBgpIpAddressIpConfiguration> gatewayCustomBgpIPAddresses = default(System.Collections.Generic.IList<GatewayCustomBgpIpAddressIpConfiguration>), bool? usePolicyBasedTrafficSelectors = default(bool?), System.Collections.Generic.IList<IpsecPolicy> ipsecPolicies = default(System.Collections.Generic.IList<IpsecPolicy>), System.Collections.Generic.IList<TrafficSelectorPolicy> trafficSelectorPolicies = default(System.Collections.Generic.IList<TrafficSelectorPolicy>), string resourceGuid = default(string), string provisioningState = default(string), bool? expressRouteGatewayBypass = default(bool?), bool? enablePrivateLinkFastPath = default(bool?))

        {
            this.AuthorizationKey = authorizationKey;
            this.VirtualNetworkGateway1 = virtualNetworkGateway1;
            this.VirtualNetworkGateway2 = virtualNetworkGateway2;
            this.LocalNetworkGateway2 = localNetworkGateway2;
            this.ConnectionType = connectionType;
            this.ConnectionProtocol = connectionProtocol;
            this.RoutingWeight = routingWeight;
            this.ConnectionMode = connectionMode;
            this.SharedKey = sharedKey;
            this.ConnectionStatus = connectionStatus;
            this.TunnelConnectionStatus = tunnelConnectionStatus;
            this.EgressBytesTransferred = egressBytesTransferred;
            this.IngressBytesTransferred = ingressBytesTransferred;
            this.Peer = peer;
            this.EnableBgp = enableBgp;
            this.GatewayCustomBgpIPAddresses = gatewayCustomBgpIPAddresses;
            this.UsePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            this.IpsecPolicies = ipsecPolicies;
            this.TrafficSelectorPolicies = trafficSelectorPolicies;
            this.ResourceGuid = resourceGuid;
            this.ProvisioningState = provisioningState;
            this.ExpressRouteGatewayBypass = expressRouteGatewayBypass;
            this.EnablePrivateLinkFastPath = enablePrivateLinkFastPath;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the authorizationKey.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationKey")]
        public string AuthorizationKey {get; set; }

        /// <summary>
        /// Gets or sets the reference to virtual network gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkGateway1")]
        public VirtualNetworkConnectionGatewayReference VirtualNetworkGateway1 {get; set; }

        /// <summary>
        /// Gets or sets the reference to virtual network gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkGateway2")]
        public VirtualNetworkConnectionGatewayReference VirtualNetworkGateway2 {get; set; }

        /// <summary>
        /// Gets or sets the reference to local network gateway resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localNetworkGateway2")]
        public VirtualNetworkConnectionGatewayReference LocalNetworkGateway2 {get; set; }

        /// <summary>
        /// Gets or sets gateway connection type. Possible values include: &#39;IPsec&#39;, &#39;Vnet2Vnet&#39;, &#39;ExpressRoute&#39;, &#39;VPNClient&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionType")]
        public string ConnectionType {get; set; }

        /// <summary>
        /// Gets or sets connection protocol used for this connection. Possible values include: &#39;IKEv2&#39;, &#39;IKEv1&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionProtocol")]
        public string ConnectionProtocol {get; set; }

        /// <summary>
        /// Gets or sets the routing weight.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingWeight")]
        public int? RoutingWeight {get; set; }

        /// <summary>
        /// Gets or sets the connection mode for this connection. Possible values include: &#39;Default&#39;, &#39;ResponderOnly&#39;, &#39;InitiatorOnly&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionMode")]
        public string ConnectionMode {get; set; }

        /// <summary>
        /// Gets or sets the IPSec shared key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sharedKey")]
        public string SharedKey {get; set; }

        /// <summary>
        /// Gets virtual Network Gateway connection status. Possible values include: &#39;Unknown&#39;, &#39;Connecting&#39;, &#39;Connected&#39;, &#39;NotConnected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionStatus")]
        public string ConnectionStatus {get; private set; }

        /// <summary>
        /// Gets collection of all tunnels&#39; connection health status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tunnelConnectionStatus")]
        public System.Collections.Generic.IList<TunnelConnectionHealth> TunnelConnectionStatus {get; private set; }

        /// <summary>
        /// Gets the egress bytes transferred in this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "egressBytesTransferred")]
        public long? EgressBytesTransferred {get; private set; }

        /// <summary>
        /// Gets the ingress bytes transferred in this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingressBytesTransferred")]
        public long? IngressBytesTransferred {get; private set; }

        /// <summary>
        /// Gets or sets the reference to peerings resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peer")]
        public SubResource Peer {get; set; }

        /// <summary>
        /// Gets or sets enableBgp flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBgp")]
        public bool? EnableBgp {get; set; }

        /// <summary>
        /// Gets or sets gatewayCustomBgpIpAddresses to be used for virtual network
        /// gateway Connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayCustomBgpIpAddresses")]
        public System.Collections.Generic.IList<GatewayCustomBgpIpAddressIpConfiguration> GatewayCustomBgpIPAddresses {get; set; }

        /// <summary>
        /// Gets or sets enable policy-based traffic selectors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usePolicyBasedTrafficSelectors")]
        public bool? UsePolicyBasedTrafficSelectors {get; set; }

        /// <summary>
        /// Gets or sets the IPSec Policies to be considered by this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipsecPolicies")]
        public System.Collections.Generic.IList<IpsecPolicy> IpsecPolicies {get; set; }

        /// <summary>
        /// Gets or sets the Traffic Selector Policies to be considered by this
        /// connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trafficSelectorPolicies")]
        public System.Collections.Generic.IList<TrafficSelectorPolicy> TrafficSelectorPolicies {get; set; }

        /// <summary>
        /// Gets the resource GUID property of the virtual network gateway connection
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the virtual network gateway connection
        /// resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets bypass ExpressRoute Gateway for data forwarding.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expressRouteGatewayBypass")]
        public bool? ExpressRouteGatewayBypass {get; set; }

        /// <summary>
        /// Gets or sets bypass the ExpressRoute gateway when accessing private-links.
        /// ExpressRoute FastPath (expressRouteGatewayBypass) must be enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enablePrivateLinkFastPath")]
        public bool? EnablePrivateLinkFastPath {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.VirtualNetworkGateway1 == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "VirtualNetworkGateway1");
            }
            if (this.ConnectionType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ConnectionType");
            }

            if (this.VirtualNetworkGateway1 != null)
            {
                this.VirtualNetworkGateway1.Validate();
            }
            if (this.VirtualNetworkGateway2 != null)
            {
                this.VirtualNetworkGateway2.Validate();
            }
            if (this.LocalNetworkGateway2 != null)
            {
                this.LocalNetworkGateway2.Validate();
            }







            if (this.GatewayCustomBgpIPAddresses != null)
            {
                foreach (var element in this.GatewayCustomBgpIPAddresses)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.IpsecPolicies != null)
            {
                foreach (var element in this.IpsecPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.TrafficSelectorPolicies != null)
            {
                foreach (var element in this.TrafficSelectorPolicies)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}