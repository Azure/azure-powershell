// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// NetworkVirtualAppliance Resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class NetworkVirtualAppliance : Resource
    {
        /// <summary>
        /// Initializes a new instance of the NetworkVirtualAppliance class.
        /// </summary>
        public NetworkVirtualAppliance()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkVirtualAppliance class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="identity">The service principal that has read access to cloud-init and config blob.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="nvaSku">Network Virtual Appliance SKU.
        /// </param>

        /// <param name="addressPrefix">Address Prefix.
        /// </param>

        /// <param name="bootStrapConfigurationBlobs">BootStrapConfigurationBlobs storage URLs.
        /// </param>

        /// <param name="virtualHub">The Virtual Hub where Network Virtual Appliance is being deployed.
        /// </param>

        /// <param name="cloudInitConfigurationBlobs">CloudInitConfigurationBlob storage URLs.
        /// </param>

        /// <param name="cloudInitConfiguration">CloudInitConfiguration string in plain text.
        /// </param>

        /// <param name="virtualApplianceAsn">VirtualAppliance ASN. Microsoft private, public and IANA reserved ASN are
        /// not supported.
        /// </param>

        /// <param name="sshPublicKey">Public key for SSH login.
        /// </param>

        /// <param name="virtualApplianceNics">List of Virtual Appliance Network Interfaces.
        /// </param>

        /// <param name="networkProfile">Network Profile containing configurations for Public and Private NIC.
        /// </param>

        /// <param name="additionalNics">Details required for Additional Network Interface.
        /// </param>

        /// <param name="internetIngressPublicIps">List of Resource Uri of Public IPs for Internet Ingress Scenario.
        /// </param>

        /// <param name="virtualApplianceSites">List of references to VirtualApplianceSite.
        /// </param>

        /// <param name="virtualApplianceConnections">List of references to VirtualApplianceConnections.
        /// </param>

        /// <param name="inboundSecurityRules">List of references to InboundSecurityRules.
        /// </param>

        /// <param name="deploymentType">The deployment type. PartnerManaged for the SaaS NVA
        /// </param>

        /// <param name="delegation">The delegation for the Virtual Appliance
        /// </param>

        /// <param name="partnerManagedResource">The delegation for the Virtual Appliance
        /// </param>
        public NetworkVirtualAppliance(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ManagedServiceIdentity identity = default(ManagedServiceIdentity), string etag = default(string), string provisioningState = default(string), VirtualApplianceSkuProperties nvaSku = default(VirtualApplianceSkuProperties), string addressPrefix = default(string), System.Collections.Generic.IList<string> bootStrapConfigurationBlobs = default(System.Collections.Generic.IList<string>), SubResource virtualHub = default(SubResource), System.Collections.Generic.IList<string> cloudInitConfigurationBlobs = default(System.Collections.Generic.IList<string>), string cloudInitConfiguration = default(string), long? virtualApplianceAsn = default(long?), string sshPublicKey = default(string), System.Collections.Generic.IList<VirtualApplianceNicProperties> virtualApplianceNics = default(System.Collections.Generic.IList<VirtualApplianceNicProperties>), NetworkVirtualAppliancePropertiesFormatNetworkProfile networkProfile = default(NetworkVirtualAppliancePropertiesFormatNetworkProfile), System.Collections.Generic.IList<VirtualApplianceAdditionalNicProperties> additionalNics = default(System.Collections.Generic.IList<VirtualApplianceAdditionalNicProperties>), System.Collections.Generic.IList<InternetIngressPublicIpsProperties> internetIngressPublicIps = default(System.Collections.Generic.IList<InternetIngressPublicIpsProperties>), System.Collections.Generic.IList<SubResource> virtualApplianceSites = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> virtualApplianceConnections = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> inboundSecurityRules = default(System.Collections.Generic.IList<SubResource>), string deploymentType = default(string), DelegationProperties delegation = default(DelegationProperties), PartnerManagedResourceProperties partnerManagedResource = default(PartnerManagedResourceProperties))

        : base(id, name, type, location, tags)
        {
            this.Identity = identity;
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.NvaSku = nvaSku;
            this.AddressPrefix = addressPrefix;
            this.BootStrapConfigurationBlobs = bootStrapConfigurationBlobs;
            this.VirtualHub = virtualHub;
            this.CloudInitConfigurationBlobs = cloudInitConfigurationBlobs;
            this.CloudInitConfiguration = cloudInitConfiguration;
            this.VirtualApplianceAsn = virtualApplianceAsn;
            this.SshPublicKey = sshPublicKey;
            this.VirtualApplianceNics = virtualApplianceNics;
            this.NetworkProfile = networkProfile;
            this.AdditionalNics = additionalNics;
            this.InternetIngressPublicIps = internetIngressPublicIps;
            this.VirtualApplianceSites = virtualApplianceSites;
            this.VirtualApplianceConnections = virtualApplianceConnections;
            this.InboundSecurityRules = inboundSecurityRules;
            this.DeploymentType = deploymentType;
            this.Delegation = delegation;
            this.PartnerManagedResource = partnerManagedResource;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the service principal that has read access to cloud-init and
        /// config blob.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets network Virtual Appliance SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nvaSku")]
        public VirtualApplianceSkuProperties NvaSku {get; set; }

        /// <summary>
        /// Gets address Prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.addressPrefix")]
        public string AddressPrefix {get; private set; }

        /// <summary>
        /// Gets or sets bootStrapConfigurationBlobs storage URLs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bootStrapConfigurationBlobs")]
        public System.Collections.Generic.IList<string> BootStrapConfigurationBlobs {get; set; }

        /// <summary>
        /// Gets or sets the Virtual Hub where Network Virtual Appliance is being
        /// deployed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualHub")]
        public SubResource VirtualHub {get; set; }

        /// <summary>
        /// Gets or sets cloudInitConfigurationBlob storage URLs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cloudInitConfigurationBlobs")]
        public System.Collections.Generic.IList<string> CloudInitConfigurationBlobs {get; set; }

        /// <summary>
        /// Gets or sets cloudInitConfiguration string in plain text.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.cloudInitConfiguration")]
        public string CloudInitConfiguration {get; set; }

        /// <summary>
        /// Gets or sets virtualAppliance ASN. Microsoft private, public and IANA
        /// reserved ASN are not supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualApplianceAsn")]
        public long? VirtualApplianceAsn {get; set; }

        /// <summary>
        /// Gets or sets public key for SSH login.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sshPublicKey")]
        public string SshPublicKey {get; set; }

        /// <summary>
        /// Gets list of Virtual Appliance Network Interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualApplianceNics")]
        public System.Collections.Generic.IList<VirtualApplianceNicProperties> VirtualApplianceNics {get; private set; }

        /// <summary>
        /// Gets or sets network Profile containing configurations for Public and
        /// Private NIC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkProfile")]
        public NetworkVirtualAppliancePropertiesFormatNetworkProfile NetworkProfile {get; set; }

        /// <summary>
        /// Gets or sets details required for Additional Network Interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.additionalNics")]
        public System.Collections.Generic.IList<VirtualApplianceAdditionalNicProperties> AdditionalNics {get; set; }

        /// <summary>
        /// Gets or sets list of Resource Uri of Public IPs for Internet Ingress
        /// Scenario.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.internetIngressPublicIps")]
        public System.Collections.Generic.IList<InternetIngressPublicIpsProperties> InternetIngressPublicIps {get; set; }

        /// <summary>
        /// Gets list of references to VirtualApplianceSite.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualApplianceSites")]
        public System.Collections.Generic.IList<SubResource> VirtualApplianceSites {get; private set; }

        /// <summary>
        /// Gets list of references to VirtualApplianceConnections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualApplianceConnections")]
        public System.Collections.Generic.IList<SubResource> VirtualApplianceConnections {get; private set; }

        /// <summary>
        /// Gets list of references to InboundSecurityRules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundSecurityRules")]
        public System.Collections.Generic.IList<SubResource> InboundSecurityRules {get; private set; }

        /// <summary>
        /// Gets the deployment type. PartnerManaged for the SaaS NVA
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deploymentType")]
        public string DeploymentType {get; private set; }

        /// <summary>
        /// Gets or sets the delegation for the Virtual Appliance
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.delegation")]
        public DelegationProperties Delegation {get; set; }

        /// <summary>
        /// Gets or sets the delegation for the Virtual Appliance
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partnerManagedResource")]
        public PartnerManagedResourceProperties PartnerManagedResource {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {









            if (this.VirtualApplianceAsn != null)
            {
                if (this.VirtualApplianceAsn > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "VirtualApplianceAsn", 4294967295);
                }
                if (this.VirtualApplianceAsn < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "VirtualApplianceAsn", 0);
                }
            }











        }
    }
}