// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the web application firewall rule set.
    /// </summary>
    public partial class ApplicationGatewayFirewallRuleSetPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayFirewallRuleSetPropertiesFormat class.
        /// </summary>
        public ApplicationGatewayFirewallRuleSetPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayFirewallRuleSetPropertiesFormat class.
        /// </summary>

        /// <param name="provisioningState">The provisioning state of the web application firewall rule set.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="ruleSetType">The type of the web application firewall rule set.
        /// </param>

        /// <param name="ruleSetVersion">The version of the web application firewall rule set type.
        /// </param>

        /// <param name="ruleGroups">The rule groups of the web application firewall rule set.
        /// </param>

        /// <param name="tiers">Tier of an application gateway that support the rule set.
        /// </param>
        public ApplicationGatewayFirewallRuleSetPropertiesFormat(string ruleSetType, string ruleSetVersion, System.Collections.Generic.IList<ApplicationGatewayFirewallRuleGroup> ruleGroups, string provisioningState = default(string), System.Collections.Generic.IList<string> tiers = default(System.Collections.Generic.IList<string>))

        {
            this.ProvisioningState = provisioningState;
            this.RuleSetType = ruleSetType;
            this.RuleSetVersion = ruleSetVersion;
            this.RuleGroups = ruleGroups;
            this.Tiers = tiers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioning state of the web application firewall rule set. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the type of the web application firewall rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetType")]
        public string RuleSetType {get; set; }

        /// <summary>
        /// Gets or sets the version of the web application firewall rule set type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetVersion")]
        public string RuleSetVersion {get; set; }

        /// <summary>
        /// Gets or sets the rule groups of the web application firewall rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleGroups")]
        public System.Collections.Generic.IList<ApplicationGatewayFirewallRuleGroup> RuleGroups {get; set; }

        /// <summary>
        /// Gets or sets tier of an application gateway that support the rule set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tiers")]
        public System.Collections.Generic.IList<string> Tiers {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RuleSetType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleSetType");
            }
            if (this.RuleSetVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleSetVersion");
            }
            if (this.RuleGroups == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleGroups");
            }



            if (this.RuleGroups != null)
            {
                foreach (var element in this.RuleGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}