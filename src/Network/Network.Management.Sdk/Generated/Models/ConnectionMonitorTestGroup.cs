// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the connection monitor test group.
    /// </summary>
    public partial class ConnectionMonitorTestGroup
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorTestGroup class.
        /// </summary>
        public ConnectionMonitorTestGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorTestGroup class.
        /// </summary>

        /// <param name="name">The name of the connection monitor test group.
        /// </param>

        /// <param name="disable">Value indicating whether test group is disabled.
        /// </param>

        /// <param name="testConfigurations">List of test configuration names.
        /// </param>

        /// <param name="sources">List of source endpoint names.
        /// </param>

        /// <param name="destinations">List of destination endpoint names.
        /// </param>
        public ConnectionMonitorTestGroup(string name, System.Collections.Generic.IList<string> testConfigurations, System.Collections.Generic.IList<string> sources, System.Collections.Generic.IList<string> destinations, bool? disable = default(bool?))

        {
            this.Name = name;
            this.Disable = disable;
            this.TestConfigurations = testConfigurations;
            this.Sources = sources;
            this.Destinations = destinations;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the connection monitor test group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets value indicating whether test group is disabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disable")]
        public bool? Disable {get; set; }

        /// <summary>
        /// Gets or sets list of test configuration names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "testConfigurations")]
        public System.Collections.Generic.IList<string> TestConfigurations {get; set; }

        /// <summary>
        /// Gets or sets list of source endpoint names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sources")]
        public System.Collections.Generic.IList<string> Sources {get; set; }

        /// <summary>
        /// Gets or sets list of destination endpoint names.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinations")]
        public System.Collections.Generic.IList<string> Destinations {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.TestConfigurations == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "TestConfigurations");
            }
            if (this.Sources == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Sources");
            }
            if (this.Destinations == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Destinations");
            }




        }
    }
}