// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters that define the create packet capture operation.
    /// </summary>
    public partial class PacketCaptureParameters
    {
        /// <summary>
        /// Initializes a new instance of the PacketCaptureParameters class.
        /// </summary>
        public PacketCaptureParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PacketCaptureParameters class.
        /// </summary>

        /// <param name="target">The ID of the targeted resource, only AzureVM and AzureVMSS as target type
        /// are currently supported.
        /// </param>

        /// <param name="scope">A list of AzureVMSS instances which can be included or excluded to run
        /// packet capture. If both included and excluded are empty, then the packet
        /// capture will run on all instances of AzureVMSS.
        /// </param>

        /// <param name="targetType">Target type of the resource provided.
        /// Possible values include: &#39;AzureVM&#39;, &#39;AzureVMSS&#39;</param>

        /// <param name="bytesToCapturePerPacket">Number of bytes captured per packet, the remaining bytes are truncated.
        /// </param>

        /// <param name="totalBytesPerSession">Maximum size of the capture output.
        /// </param>

        /// <param name="timeLimitInSeconds">Maximum duration of the capture session in seconds.
        /// </param>

        /// <param name="storageLocation">The storage location for a packet capture session.
        /// </param>

        /// <param name="filters">A list of packet capture filters.
        /// </param>
        public PacketCaptureParameters(string target, PacketCaptureStorageLocation storageLocation, PacketCaptureMachineScope scope = default(PacketCaptureMachineScope), PacketCaptureTargetType? targetType = default(PacketCaptureTargetType?), long? bytesToCapturePerPacket = default(long?), long? totalBytesPerSession = default(long?), int? timeLimitInSeconds = default(int?), System.Collections.Generic.IList<PacketCaptureFilter> filters = default(System.Collections.Generic.IList<PacketCaptureFilter>))

        {
            this.Target = target;
            this.Scope = scope;
            this.TargetType = targetType;
            this.BytesToCapturePerPacket = bytesToCapturePerPacket;
            this.TotalBytesPerSession = totalBytesPerSession;
            this.TimeLimitInSeconds = timeLimitInSeconds;
            this.StorageLocation = storageLocation;
            this.Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ID of the targeted resource, only AzureVM and AzureVMSS as
        /// target type are currently supported.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "target")]
        public string Target {get; set; }

        /// <summary>
        /// Gets or sets a list of AzureVMSS instances which can be included or
        /// excluded to run packet capture. If both included and excluded are empty,
        /// then the packet capture will run on all instances of AzureVMSS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scope")]
        public PacketCaptureMachineScope Scope {get; set; }

        /// <summary>
        /// Gets or sets target type of the resource provided. Possible values include: &#39;AzureVM&#39;, &#39;AzureVMSS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetType")]
        public PacketCaptureTargetType? TargetType {get; set; }

        /// <summary>
        /// Gets or sets number of bytes captured per packet, the remaining bytes are
        /// truncated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bytesToCapturePerPacket")]
        public long? BytesToCapturePerPacket {get; set; }

        /// <summary>
        /// Gets or sets maximum size of the capture output.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalBytesPerSession")]
        public long? TotalBytesPerSession {get; set; }

        /// <summary>
        /// Gets or sets maximum duration of the capture session in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeLimitInSeconds")]
        public int? TimeLimitInSeconds {get; set; }

        /// <summary>
        /// Gets or sets the storage location for a packet capture session.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageLocation")]
        public PacketCaptureStorageLocation StorageLocation {get; set; }

        /// <summary>
        /// Gets or sets a list of packet capture filters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public System.Collections.Generic.IList<PacketCaptureFilter> Filters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Target == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Target");
            }
            if (this.StorageLocation == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageLocation");
            }



            if (this.BytesToCapturePerPacket != null)
            {
                if (this.BytesToCapturePerPacket > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "BytesToCapturePerPacket", 4294967295);
                }
                if (this.BytesToCapturePerPacket < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "BytesToCapturePerPacket", 0);
                }
            }
            if (this.TotalBytesPerSession != null)
            {
                if (this.TotalBytesPerSession > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TotalBytesPerSession", 4294967295);
                }
                if (this.TotalBytesPerSession < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TotalBytesPerSession", 0);
                }
            }
            if (this.TimeLimitInSeconds != null)
            {
                if (this.TimeLimitInSeconds > 18000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "TimeLimitInSeconds", 18000);
                }
                if (this.TimeLimitInSeconds < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "TimeLimitInSeconds", 0);
                }
            }


        }
    }
}