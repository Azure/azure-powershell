// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Will describe the query to run against the IDPS signatures DB
    /// </summary>
    public partial class IdpsQueryObject
    {
        /// <summary>
        /// Initializes a new instance of the IdpsQueryObject class.
        /// </summary>
        public IdpsQueryObject()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IdpsQueryObject class.
        /// </summary>

        /// <param name="filters">Contain all filters names and values
        /// </param>

        /// <param name="search">Search term in all columns
        /// </param>

        /// <param name="orderBy">Column to sort response by
        /// </param>

        /// <param name="resultsPerPage">The number of the results to return in each page
        /// </param>

        /// <param name="skip">The number of records matching the filter to skip
        /// </param>
        public IdpsQueryObject(System.Collections.Generic.IList<FilterItems> filters = default(System.Collections.Generic.IList<FilterItems>), string search = default(string), OrderBy orderBy = default(OrderBy), int? resultsPerPage = default(int?), int? skip = default(int?))

        {
            this.Filters = filters;
            this.Search = search;
            this.OrderBy = orderBy;
            this.ResultsPerPage = resultsPerPage;
            this.Skip = skip;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets contain all filters names and values
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public System.Collections.Generic.IList<FilterItems> Filters {get; set; }

        /// <summary>
        /// Gets or sets search term in all columns
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "search")]
        public string Search {get; set; }

        /// <summary>
        /// Gets or sets column to sort response by
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "orderBy")]
        public OrderBy OrderBy {get; set; }

        /// <summary>
        /// Gets or sets the number of the results to return in each page
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resultsPerPage")]
        public int? ResultsPerPage {get; set; }

        /// <summary>
        /// Gets or sets the number of records matching the filter to skip
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "skip")]
        public int? Skip {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.ResultsPerPage != null)
            {
                if (this.ResultsPerPage > 1000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ResultsPerPage", 1000);
                }
                if (this.ResultsPerPage < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ResultsPerPage", 1);
                }
            }
        }
    }
}