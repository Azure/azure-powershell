// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Load Distribution Target of an application gateway.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationGatewayLoadDistributionTarget : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayLoadDistributionTarget class.
        /// </summary>
        public ApplicationGatewayLoadDistributionTarget()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayLoadDistributionTarget class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Name of the load distribution policy that is unique within an Application
        /// Gateway.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="weightPerServer">Weight per server. Range between 1 and 100.
        /// </param>

        /// <param name="backendAddressPool">Backend address pool resource of the application gateway.
        /// </param>
        public ApplicationGatewayLoadDistributionTarget(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), int? weightPerServer = default(int?), SubResource backendAddressPool = default(SubResource))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.WeightPerServer = weightPerServer;
            this.BackendAddressPool = backendAddressPool;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the load distribution policy that is unique within an
        /// Application Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets weight per server. Range between 1 and 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.weightPerServer")]
        public int? WeightPerServer {get; set; }

        /// <summary>
        /// Gets or sets backend address pool resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.WeightPerServer != null)
            {
                if (this.WeightPerServer > 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "WeightPerServer", 100);
                }
                if (this.WeightPerServer < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "WeightPerServer", 1);
                }
            }

        }
    }
}