// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// VpnSite Resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VpnSite : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VpnSite class.
        /// </summary>
        public VpnSite()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnSite class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="deviceProperties">The device properties.
        /// </param>

        /// <param name="addressSpace">The AddressSpace that contains an array of IP address ranges.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the VPN site resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="virtualWan">The VirtualWAN to which the vpnSite belongs.
        /// </param>

        /// <param name="ipAddress">The ip-address for the vpn-site.
        /// </param>

        /// <param name="siteKey">The key for vpn-site that can be used for connections.
        /// </param>

        /// <param name="bgpProperties">The set of bgp properties.
        /// </param>

        /// <param name="isSecuritySite">IsSecuritySite flag.
        /// </param>

        /// <param name="vpnSiteLinks">List of all vpn site links.
        /// </param>

        /// <param name="o365Policy">Office365 Policy.
        /// </param>
        public VpnSite(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), DeviceProperties deviceProperties = default(DeviceProperties), AddressSpace addressSpace = default(AddressSpace), string provisioningState = default(string), SubResource virtualWan = default(SubResource), string ipAddress = default(string), string siteKey = default(string), BgpSettings bgpProperties = default(BgpSettings), bool? isSecuritySite = default(bool?), System.Collections.Generic.IList<VpnSiteLink> vpnSiteLinks = default(System.Collections.Generic.IList<VpnSiteLink>), O365PolicyProperties o365Policy = default(O365PolicyProperties))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.DeviceProperties = deviceProperties;
            this.AddressSpace = addressSpace;
            this.ProvisioningState = provisioningState;
            this.VirtualWan = virtualWan;
            this.IPAddress = ipAddress;
            this.SiteKey = siteKey;
            this.BgpProperties = bgpProperties;
            this.IsSecuritySite = isSecuritySite;
            this.VpnSiteLinks = vpnSiteLinks;
            this.O365Policy = o365Policy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets the device properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deviceProperties")]
        public DeviceProperties DeviceProperties {get; set; }

        /// <summary>
        /// Gets or sets the AddressSpace that contains an array of IP address ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.addressSpace")]
        public AddressSpace AddressSpace {get; set; }

        /// <summary>
        /// Gets the provisioning state of the VPN site resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the VirtualWAN to which the vpnSite belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualWan")]
        public SubResource VirtualWan {get; set; }

        /// <summary>
        /// Gets or sets the ip-address for the vpn-site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipAddress")]
        public string IPAddress {get; set; }

        /// <summary>
        /// Gets or sets the key for vpn-site that can be used for connections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.siteKey")]
        public string SiteKey {get; set; }

        /// <summary>
        /// Gets or sets the set of bgp properties.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bgpProperties")]
        public BgpSettings BgpProperties {get; set; }

        /// <summary>
        /// Gets or sets isSecuritySite flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isSecuritySite")]
        public bool? IsSecuritySite {get; set; }

        /// <summary>
        /// Gets or sets list of all vpn site links.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnSiteLinks")]
        public System.Collections.Generic.IList<VpnSiteLink> VpnSiteLinks {get; set; }

        /// <summary>
        /// Gets or sets office365 Policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.o365Policy")]
        public O365PolicyProperties O365Policy {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {







            if (this.BgpProperties != null)
            {
                this.BgpProperties.Validate();
            }


        }
    }
}