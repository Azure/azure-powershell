// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the Inbound Security Rules resource.
    /// </summary>
    public partial class InboundSecurityRules
    {
        /// <summary>
        /// Initializes a new instance of the InboundSecurityRules class.
        /// </summary>
        public InboundSecurityRules()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InboundSecurityRules class.
        /// </summary>

        /// <param name="name">Name of the rule.
        /// </param>

        /// <param name="protocol">Protocol. This should be either TCP or UDP.
        /// Possible values include: &#39;TCP&#39;, &#39;UDP&#39;</param>

        /// <param name="sourceAddressPrefix">The CIDR or source IP range.
        /// </param>

        /// <param name="destinationPortRange">NVA port ranges to be opened up. One needs to provide specific ports.
        /// </param>

        /// <param name="destinationPortRanges">NVA port ranges to be opened up. One can provide a range of ports. Allowed
        /// port value between 0 and 65535.
        /// </param>

        /// <param name="appliesOn">Public IP name in case of Permanent Rule type &amp; Interface Name in case of
        /// Auto Expire Rule type
        /// </param>
        public InboundSecurityRules(string name = default(string), string protocol = default(string), string sourceAddressPrefix = default(string), int? destinationPortRange = default(int?), System.Collections.Generic.IList<string> destinationPortRanges = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> appliesOn = default(System.Collections.Generic.IList<string>))

        {
            this.Name = name;
            this.Protocol = protocol;
            this.SourceAddressPrefix = sourceAddressPrefix;
            this.DestinationPortRange = destinationPortRange;
            this.DestinationPortRanges = destinationPortRanges;
            this.AppliesOn = appliesOn;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets protocol. This should be either TCP or UDP. Possible values include: &#39;TCP&#39;, &#39;UDP&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefix")]
        public string SourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets nVA port ranges to be opened up. One needs to provide specific
        /// ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRange")]
        public int? DestinationPortRange {get; set; }

        /// <summary>
        /// Gets or sets nVA port ranges to be opened up. One can provide a range of
        /// ports. Allowed port value between 0 and 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRanges")]
        public System.Collections.Generic.IList<string> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets public IP name in case of Permanent Rule type &amp; Interface Name
        /// in case of Auto Expire Rule type
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "appliesOn")]
        public System.Collections.Generic.IList<string> AppliesOn {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.DestinationPortRange != null)
            {
                if (this.DestinationPortRange > 65535)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "DestinationPortRange", 65535);
                }
                if (this.DestinationPortRange < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DestinationPortRange", 0);
                }
            }


        }
    }
}