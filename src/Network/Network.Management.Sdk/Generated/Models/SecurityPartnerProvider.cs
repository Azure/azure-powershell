// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Security Partner Provider resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SecurityPartnerProvider : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SecurityPartnerProvider class.
        /// </summary>
        public SecurityPartnerProvider()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityPartnerProvider class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the Security Partner Provider resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="securityProviderName">The security provider name.
        /// Possible values include: &#39;ZScaler&#39;, &#39;IBoss&#39;, &#39;Checkpoint&#39;</param>

        /// <param name="connectionStatus">The connection status with the Security Partner Provider.
        /// Possible values include: &#39;Unknown&#39;, &#39;PartiallyConnected&#39;, &#39;Connected&#39;,
        /// &#39;NotConnected&#39;</param>

        /// <param name="virtualHub">The virtualHub to which the Security Partner Provider belongs.
        /// </param>
        public SecurityPartnerProvider(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string provisioningState = default(string), string securityProviderName = default(string), string connectionStatus = default(string), SubResource virtualHub = default(SubResource))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.SecurityProviderName = securityProviderName;
            this.ConnectionStatus = connectionStatus;
            this.VirtualHub = virtualHub;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the Security Partner Provider resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the security provider name. Possible values include: &#39;ZScaler&#39;, &#39;IBoss&#39;, &#39;Checkpoint&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.securityProviderName")]
        public string SecurityProviderName {get; set; }

        /// <summary>
        /// Gets the connection status with the Security Partner Provider. Possible values include: &#39;Unknown&#39;, &#39;PartiallyConnected&#39;, &#39;Connected&#39;, &#39;NotConnected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connectionStatus")]
        public string ConnectionStatus {get; private set; }

        /// <summary>
        /// Gets or sets the virtualHub to which the Security Partner Provider belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualHub")]
        public SubResource VirtualHub {get; set; }
    }
}