// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// ExpressRoute failover single test details
    /// </summary>
    public partial class ExpressRouteFailoverSingleTestDetails
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteFailoverSingleTestDetails class.
        /// </summary>
        public ExpressRouteFailoverSingleTestDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteFailoverSingleTestDetails class.
        /// </summary>

        /// <param name="peeringLocation">Peering location of the test
        /// </param>

        /// <param name="status">The current status of the test
        /// Possible values include: &#39;NotStarted&#39;, &#39;Starting&#39;, &#39;Running&#39;,
        /// &#39;StartFailed&#39;, &#39;Stopping&#39;, &#39;Completed&#39;, &#39;StopFailed&#39;, &#39;Invalid&#39;, &#39;Expired&#39;</param>

        /// <param name="startTimeUtc">Time when the test was started
        /// </param>

        /// <param name="endTimeUtc">Time when the test was completed
        /// </param>

        /// <param name="redundantRoutes">List of routes received from this peering as well as some other peering
        /// location
        /// </param>

        /// <param name="nonRedundantRoutes">List of al the routes that were received only from this peering location
        /// </param>

        /// <param name="wasSimulationSuccessful">Whether the failover simulation was successful or not
        /// </param>

        /// <param name="failoverConnectionDetails">List of all the failover connections for this peering location
        /// </param>
        public ExpressRouteFailoverSingleTestDetails(string peeringLocation = default(string), string status = default(string), string startTimeUtc = default(string), string endTimeUtc = default(string), System.Collections.Generic.IList<ExpressRouteFailoverRedundantRoute> redundantRoutes = default(System.Collections.Generic.IList<ExpressRouteFailoverRedundantRoute>), System.Collections.Generic.IList<string> nonRedundantRoutes = default(System.Collections.Generic.IList<string>), bool? wasSimulationSuccessful = default(bool?), System.Collections.Generic.IList<FailoverConnectionDetails> failoverConnectionDetails = default(System.Collections.Generic.IList<FailoverConnectionDetails>))

        {
            this.PeeringLocation = peeringLocation;
            this.Status = status;
            this.StartTimeUtc = startTimeUtc;
            this.EndTimeUtc = endTimeUtc;
            this.RedundantRoutes = redundantRoutes;
            this.NonRedundantRoutes = nonRedundantRoutes;
            this.WasSimulationSuccessful = wasSimulationSuccessful;
            this.FailoverConnectionDetails = failoverConnectionDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets peering location of the test
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peeringLocation")]
        public string PeeringLocation {get; set; }

        /// <summary>
        /// Gets or sets the current status of the test Possible values include: &#39;NotStarted&#39;, &#39;Starting&#39;, &#39;Running&#39;, &#39;StartFailed&#39;, &#39;Stopping&#39;, &#39;Completed&#39;, &#39;StopFailed&#39;, &#39;Invalid&#39;, &#39;Expired&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets or sets time when the test was started
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTimeUtc")]
        public string StartTimeUtc {get; set; }

        /// <summary>
        /// Gets or sets time when the test was completed
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTimeUtc")]
        public string EndTimeUtc {get; set; }

        /// <summary>
        /// Gets or sets list of routes received from this peering as well as some
        /// other peering location
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "redundantRoutes")]
        public System.Collections.Generic.IList<ExpressRouteFailoverRedundantRoute> RedundantRoutes {get; set; }

        /// <summary>
        /// Gets or sets list of al the routes that were received only from this
        /// peering location
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nonRedundantRoutes")]
        public System.Collections.Generic.IList<string> NonRedundantRoutes {get; set; }

        /// <summary>
        /// Gets or sets whether the failover simulation was successful or not
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "wasSimulationSuccessful")]
        public bool? WasSimulationSuccessful {get; set; }

        /// <summary>
        /// Gets or sets list of all the failover connections for this peering location
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverConnectionDetails")]
        public System.Collections.Generic.IList<FailoverConnectionDetails> FailoverConnectionDetails {get; set; }
    }
}