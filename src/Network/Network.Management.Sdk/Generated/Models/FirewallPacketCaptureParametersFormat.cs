// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Packet capture parameters on azure firewall.
    /// </summary>
    public partial class FirewallPacketCaptureParametersFormat
    {
        /// <summary>
        /// Initializes a new instance of the FirewallPacketCaptureParametersFormat class.
        /// </summary>
        public FirewallPacketCaptureParametersFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FirewallPacketCaptureParametersFormat class.
        /// </summary>

        /// <param name="durationInSeconds">Duration of packet capture in seconds.
        /// </param>

        /// <param name="numberOfPacketsToCapture">Number of packets to be captured.
        /// </param>

        /// <param name="sasUrl">Upload capture location
        /// </param>

        /// <param name="fileName">Name of file to be uploaded to sasURL
        /// </param>

        /// <param name="protocol">The protocol of packets to capture
        /// Possible values include: &#39;TCP&#39;, &#39;UDP&#39;, &#39;Any&#39;, &#39;ICMP&#39;</param>

        /// <param name="flags">The tcp-flag type to be captured. Used with protocol TCP
        /// </param>

        /// <param name="filters">Rules to filter packet captures.
        /// </param>
        public FirewallPacketCaptureParametersFormat(int? durationInSeconds = default(int?), int? numberOfPacketsToCapture = default(int?), string sasUrl = default(string), string fileName = default(string), string protocol = default(string), System.Collections.Generic.IList<AzureFirewallPacketCaptureFlags> flags = default(System.Collections.Generic.IList<AzureFirewallPacketCaptureFlags>), System.Collections.Generic.IList<AzureFirewallPacketCaptureRule> filters = default(System.Collections.Generic.IList<AzureFirewallPacketCaptureRule>))

        {
            this.DurationInSeconds = durationInSeconds;
            this.NumberOfPacketsToCapture = numberOfPacketsToCapture;
            this.SasUrl = sasUrl;
            this.FileName = fileName;
            this.Protocol = protocol;
            this.Flags = flags;
            this.Filters = filters;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets duration of packet capture in seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "durationInSeconds")]
        public int? DurationInSeconds {get; set; }

        /// <summary>
        /// Gets or sets number of packets to be captured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfPacketsToCapture")]
        public int? NumberOfPacketsToCapture {get; set; }

        /// <summary>
        /// Gets or sets upload capture location
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sasUrl")]
        public string SasUrl {get; set; }

        /// <summary>
        /// Gets or sets name of file to be uploaded to sasURL
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileName")]
        public string FileName {get; set; }

        /// <summary>
        /// Gets or sets the protocol of packets to capture Possible values include: &#39;TCP&#39;, &#39;UDP&#39;, &#39;Any&#39;, &#39;ICMP&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the tcp-flag type to be captured. Used with protocol TCP
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "flags")]
        public System.Collections.Generic.IList<AzureFirewallPacketCaptureFlags> Flags {get; set; }

        /// <summary>
        /// Gets or sets rules to filter packet captures.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filters")]
        public System.Collections.Generic.IList<AzureFirewallPacketCaptureRule> Filters {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DurationInSeconds != null)
            {
                if (this.DurationInSeconds > 1800)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "DurationInSeconds", 1800);
                }
                if (this.DurationInSeconds < 30)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "DurationInSeconds", 30);
                }
            }
            if (this.NumberOfPacketsToCapture != null)
            {
                if (this.NumberOfPacketsToCapture > 90000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "NumberOfPacketsToCapture", 90000);
                }
                if (this.NumberOfPacketsToCapture < 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "NumberOfPacketsToCapture", 100);
                }
            }





        }
    }
}