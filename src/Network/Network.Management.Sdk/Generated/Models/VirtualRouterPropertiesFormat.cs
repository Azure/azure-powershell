// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Virtual Router definition.
    /// </summary>
    public partial class VirtualRouterPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the VirtualRouterPropertiesFormat class.
        /// </summary>
        public VirtualRouterPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualRouterPropertiesFormat class.
        /// </summary>

        /// <param name="virtualRouterAsn">VirtualRouter ASN.
        /// </param>

        /// <param name="virtualRouterIps">VirtualRouter IPs.
        /// </param>

        /// <param name="hostedSubnet">The Subnet on which VirtualRouter is hosted.
        /// </param>

        /// <param name="hostedGateway">The Gateway on which VirtualRouter is hosted.
        /// </param>

        /// <param name="peerings">List of references to VirtualRouterPeerings.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public VirtualRouterPropertiesFormat(long? virtualRouterAsn = default(long?), System.Collections.Generic.IList<string> virtualRouterIps = default(System.Collections.Generic.IList<string>), SubResource hostedSubnet = default(SubResource), SubResource hostedGateway = default(SubResource), System.Collections.Generic.IList<SubResource> peerings = default(System.Collections.Generic.IList<SubResource>), string provisioningState = default(string))

        {
            this.VirtualRouterAsn = virtualRouterAsn;
            this.VirtualRouterIps = virtualRouterIps;
            this.HostedSubnet = hostedSubnet;
            this.HostedGateway = hostedGateway;
            this.Peerings = peerings;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets virtualRouter ASN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualRouterAsn")]
        public long? VirtualRouterAsn {get; set; }

        /// <summary>
        /// Gets or sets virtualRouter IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualRouterIps")]
        public System.Collections.Generic.IList<string> VirtualRouterIps {get; set; }

        /// <summary>
        /// Gets or sets the Subnet on which VirtualRouter is hosted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostedSubnet")]
        public SubResource HostedSubnet {get; set; }

        /// <summary>
        /// Gets or sets the Gateway on which VirtualRouter is hosted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostedGateway")]
        public SubResource HostedGateway {get; set; }

        /// <summary>
        /// Gets list of references to VirtualRouterPeerings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerings")]
        public System.Collections.Generic.IList<SubResource> Peerings {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.VirtualRouterAsn != null)
            {
                if (this.VirtualRouterAsn > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "VirtualRouterAsn", 4294967295);
                }
                if (this.VirtualRouterAsn < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "VirtualRouterAsn", 0);
                }
            }





        }
    }
}