// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Adds exception to allow a request when the condition is satisfied.
    /// </summary>
    public partial class ExceptionEntry
    {
        /// <summary>
        /// Initializes a new instance of the ExceptionEntry class.
        /// </summary>
        public ExceptionEntry()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExceptionEntry class.
        /// </summary>

        /// <param name="matchVariable">The variable on which we evaluate the exception condition
        /// Possible values include: &#39;RequestURI&#39;, &#39;RemoteAddr&#39;, &#39;RequestHeader&#39;</param>

        /// <param name="values">Allowed values for the matchVariable
        /// </param>

        /// <param name="valueMatchOperator">Operates on the allowed values for the matchVariable
        /// Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;,
        /// &#39;IPMatch&#39;</param>

        /// <param name="selectorMatchOperator">When the matchVariable points to a key-value pair (e.g, RequestHeader),
        /// this operates on the selector
        /// Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;</param>

        /// <param name="selector">When the matchVariable points to a key-value pair (e.g, RequestHeader),
        /// this identifies the key.
        /// </param>

        /// <param name="exceptionManagedRuleSets">The managed rule sets that are associated with the exception.
        /// </param>
        public ExceptionEntry(string matchVariable, string valueMatchOperator, System.Collections.Generic.IList<string> values = default(System.Collections.Generic.IList<string>), string selectorMatchOperator = default(string), string selector = default(string), System.Collections.Generic.IList<ExclusionManagedRuleSet> exceptionManagedRuleSets = default(System.Collections.Generic.IList<ExclusionManagedRuleSet>))

        {
            this.MatchVariable = matchVariable;
            this.Values = values;
            this.ValueMatchOperator = valueMatchOperator;
            this.SelectorMatchOperator = selectorMatchOperator;
            this.Selector = selector;
            this.ExceptionManagedRuleSets = exceptionManagedRuleSets;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the variable on which we evaluate the exception condition Possible values include: &#39;RequestURI&#39;, &#39;RemoteAddr&#39;, &#39;RequestHeader&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable {get; set; }

        /// <summary>
        /// Gets or sets allowed values for the matchVariable
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "values")]
        public System.Collections.Generic.IList<string> Values {get; set; }

        /// <summary>
        /// Gets or sets operates on the allowed values for the matchVariable Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;, &#39;IPMatch&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "valueMatchOperator")]
        public string ValueMatchOperator {get; set; }

        /// <summary>
        /// Gets or sets when the matchVariable points to a key-value pair (e.g,
        /// RequestHeader), this operates on the selector Possible values include: &#39;Equals&#39;, &#39;Contains&#39;, &#39;StartsWith&#39;, &#39;EndsWith&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectorMatchOperator")]
        public string SelectorMatchOperator {get; set; }

        /// <summary>
        /// Gets or sets when the matchVariable points to a key-value pair (e.g,
        /// RequestHeader), this identifies the key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selector")]
        public string Selector {get; set; }

        /// <summary>
        /// Gets or sets the managed rule sets that are associated with the exception.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exceptionManagedRuleSets")]
        public System.Collections.Generic.IList<ExclusionManagedRuleSet> ExceptionManagedRuleSets {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MatchVariable == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (this.ValueMatchOperator == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ValueMatchOperator");
            }





            if (this.ExceptionManagedRuleSets != null)
            {
                foreach (var element in this.ExceptionManagedRuleSets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}