// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the connection monitor endpoint.
    /// </summary>
    public partial class ConnectionMonitorEndpoint
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorEndpoint class.
        /// </summary>
        public ConnectionMonitorEndpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorEndpoint class.
        /// </summary>

        /// <param name="name">The name of the connection monitor endpoint.
        /// </param>

        /// <param name="type">The endpoint type.
        /// Possible values include: &#39;AzureVM&#39;, &#39;AzureVNet&#39;, &#39;AzureSubnet&#39;,
        /// &#39;ExternalAddress&#39;, &#39;MMAWorkspaceMachine&#39;, &#39;MMAWorkspaceNetwork&#39;,
        /// &#39;AzureArcVM&#39;, &#39;AzureVMSS&#39;</param>

        /// <param name="resourceId">Resource ID of the connection monitor endpoint.
        /// </param>

        /// <param name="address">Address of the connection monitor endpoint (IP or domain name).
        /// </param>

        /// <param name="filter">Filter for sub-items within the endpoint.
        /// </param>

        /// <param name="scope">Endpoint scope.
        /// </param>

        /// <param name="coverageLevel">Test coverage for the endpoint.
        /// Possible values include: &#39;Default&#39;, &#39;Low&#39;, &#39;BelowAverage&#39;, &#39;Average&#39;,
        /// &#39;AboveAverage&#39;, &#39;Full&#39;</param>
        public ConnectionMonitorEndpoint(string name, string type = default(string), string resourceId = default(string), string address = default(string), ConnectionMonitorEndpointFilter filter = default(ConnectionMonitorEndpointFilter), ConnectionMonitorEndpointScope scope = default(ConnectionMonitorEndpointScope), string coverageLevel = default(string))

        {
            this.Name = name;
            this.Type = type;
            this.ResourceId = resourceId;
            this.Address = address;
            this.Filter = filter;
            this.Scope = scope;
            this.CoverageLevel = coverageLevel;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the connection monitor endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the endpoint type. Possible values include: &#39;AzureVM&#39;, &#39;AzureVNet&#39;, &#39;AzureSubnet&#39;, &#39;ExternalAddress&#39;, &#39;MMAWorkspaceMachine&#39;, &#39;MMAWorkspaceNetwork&#39;, &#39;AzureArcVM&#39;, &#39;AzureVMSS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets resource ID of the connection monitor endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceId")]
        public string ResourceId {get; set; }

        /// <summary>
        /// Gets or sets address of the connection monitor endpoint (IP or domain
        /// name).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "address")]
        public string Address {get; set; }

        /// <summary>
        /// Gets or sets filter for sub-items within the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "filter")]
        public ConnectionMonitorEndpointFilter Filter {get; set; }

        /// <summary>
        /// Gets or sets endpoint scope.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scope")]
        public ConnectionMonitorEndpointScope Scope {get; set; }

        /// <summary>
        /// Gets or sets test coverage for the endpoint. Possible values include: &#39;Default&#39;, &#39;Low&#39;, &#39;BelowAverage&#39;, &#39;Average&#39;, &#39;AboveAverage&#39;, &#39;Full&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "coverageLevel")]
        public string CoverageLevel {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }







        }
    }
}