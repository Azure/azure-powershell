// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Security rule resource.
    /// </summary>
    public partial class SecurityRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the SecurityRulePropertiesFormat class.
        /// </summary>
        public SecurityRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityRulePropertiesFormat class.
        /// </summary>

        /// <param name="description">A description for this rule. Restricted to 140 chars.
        /// </param>

        /// <param name="protocol">Network protocol this rule applies to.
        /// Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Icmp&#39;, &#39;Esp&#39;, &#39;*&#39;, &#39;Ah&#39;</param>

        /// <param name="sourcePortRange">The source port or range. Integer or range between 0 and 65535. Asterisk
        /// &#39;*&#39; can also be used to match all ports.
        /// </param>

        /// <param name="destinationPortRange">The destination port or range. Integer or range between 0 and 65535.
        /// Asterisk &#39;*&#39; can also be used to match all ports.
        /// </param>

        /// <param name="sourceAddressPrefix">The CIDR or source IP range. Asterisk &#39;*&#39; can also be used to match all
        /// source IPs. Default tags such as &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and
        /// &#39;Internet&#39; can also be used. If this is an ingress rule, specifies where
        /// network traffic originates from.
        /// </param>

        /// <param name="sourceAddressPrefixes">The CIDR or source IP ranges.
        /// </param>

        /// <param name="sourceApplicationSecurityGroups">The application security group specified as source.
        /// </param>

        /// <param name="destinationAddressPrefix">The destination address prefix. CIDR or destination IP range. Asterisk &#39;*&#39;
        /// can also be used to match all source IPs. Default tags such as
        /// &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used.
        /// </param>

        /// <param name="destinationAddressPrefixes">The destination address prefixes. CIDR or destination IP ranges.
        /// </param>

        /// <param name="destinationApplicationSecurityGroups">The application security group specified as destination.
        /// </param>

        /// <param name="sourcePortRanges">The source port ranges.
        /// </param>

        /// <param name="destinationPortRanges">The destination port ranges.
        /// </param>

        /// <param name="access">The network traffic is allowed or denied.
        /// Possible values include: &#39;Allow&#39;, &#39;Deny&#39;</param>

        /// <param name="priority">The priority of the rule. The value can be between 100 and 4096. The
        /// priority number must be unique for each rule in the collection. The lower
        /// the priority number, the higher the priority of the rule.
        /// </param>

        /// <param name="direction">The direction of the rule. The direction specifies if rule will be
        /// evaluated on incoming or outgoing traffic.
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="provisioningState">The provisioning state of the security rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public SecurityRulePropertiesFormat(string protocol, string access, int priority, string direction, string description = default(string), string sourcePortRange = default(string), string destinationPortRange = default(string), string sourceAddressPrefix = default(string), System.Collections.Generic.IList<string> sourceAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ApplicationSecurityGroup> sourceApplicationSecurityGroups = default(System.Collections.Generic.IList<ApplicationSecurityGroup>), string destinationAddressPrefix = default(string), System.Collections.Generic.IList<string> destinationAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ApplicationSecurityGroup> destinationApplicationSecurityGroups = default(System.Collections.Generic.IList<ApplicationSecurityGroup>), System.Collections.Generic.IList<string> sourcePortRanges = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationPortRanges = default(System.Collections.Generic.IList<string>), string provisioningState = default(string))

        {
            this.Description = description;
            this.Protocol = protocol;
            this.SourcePortRange = sourcePortRange;
            this.DestinationPortRange = destinationPortRange;
            this.SourceAddressPrefix = sourceAddressPrefix;
            this.SourceAddressPrefixes = sourceAddressPrefixes;
            this.SourceApplicationSecurityGroups = sourceApplicationSecurityGroups;
            this.DestinationAddressPrefix = destinationAddressPrefix;
            this.DestinationAddressPrefixes = destinationAddressPrefixes;
            this.DestinationApplicationSecurityGroups = destinationApplicationSecurityGroups;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.Access = access;
            this.Priority = priority;
            this.Direction = direction;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a description for this rule. Restricted to 140 chars.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets network protocol this rule applies to. Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;Icmp&#39;, &#39;Esp&#39;, &#39;*&#39;, &#39;Ah&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the source port or range. Integer or range between 0 and
        /// 65535. Asterisk &#39;*&#39; can also be used to match all ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRange")]
        public string SourcePortRange {get; set; }

        /// <summary>
        /// Gets or sets the destination port or range. Integer or range between 0 and
        /// 65535. Asterisk &#39;*&#39; can also be used to match all ports.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRange")]
        public string DestinationPortRange {get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP range. Asterisk &#39;*&#39; can also be used to
        /// match all source IPs. Default tags such as &#39;VirtualNetwork&#39;,
        /// &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used. If this is an ingress
        /// rule, specifies where network traffic originates from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefix")]
        public string SourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the CIDR or source IP ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefixes")]
        public System.Collections.Generic.IList<string> SourceAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the application security group specified as source.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceApplicationSecurityGroups")]
        public System.Collections.Generic.IList<ApplicationSecurityGroup> SourceApplicationSecurityGroups {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefix. CIDR or destination IP range.
        /// Asterisk &#39;*&#39; can also be used to match all source IPs. Default tags such as
        /// &#39;VirtualNetwork&#39;, &#39;AzureLoadBalancer&#39; and &#39;Internet&#39; can also be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddressPrefix")]
        public string DestinationAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefixes. CIDR or destination IP
        /// ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddressPrefixes")]
        public System.Collections.Generic.IList<string> DestinationAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the application security group specified as destination.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationApplicationSecurityGroups")]
        public System.Collections.Generic.IList<ApplicationSecurityGroup> DestinationApplicationSecurityGroups {get; set; }

        /// <summary>
        /// Gets or sets the source port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRanges")]
        public System.Collections.Generic.IList<string> SourcePortRanges {get; set; }

        /// <summary>
        /// Gets or sets the destination port ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRanges")]
        public System.Collections.Generic.IList<string> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets the network traffic is allowed or denied. Possible values include: &#39;Allow&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "access")]
        public string Access {get; set; }

        /// <summary>
        /// Gets or sets the priority of the rule. The value can be between 100 and
        /// 4096. The priority number must be unique for each rule in the collection.
        /// The lower the priority number, the higher the priority of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int Priority {get; set; }

        /// <summary>
        /// Gets or sets the direction of the rule. The direction specifies if rule
        /// will be evaluated on incoming or outgoing traffic. Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }

        /// <summary>
        /// Gets the provisioning state of the security rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.Access == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Access");
            }
            if (this.Direction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Direction");
            }















        }
    }
}