// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Pool of backend IP addresses.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class BackendAddressPool : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the BackendAddressPool class.
        /// </summary>
        public BackendAddressPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackendAddressPool class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within the set of backend address
        /// pools used by the load balancer. This name can be used to access the
        /// resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the backend address pool resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="syncMode">Backend address synchronous mode for the backend pool
        /// Possible values include: &#39;Automatic&#39;, &#39;Manual&#39;</param>

        /// <param name="location">The location of the backend address pool.
        /// </param>

        /// <param name="tunnelInterfaces">An array of gateway load balancer tunnel interfaces.
        /// </param>

        /// <param name="loadBalancerBackendAddresses">An array of backend addresses.
        /// </param>

        /// <param name="backendIPConfigurations">An array of references to IP addresses defined in network interfaces.
        /// </param>

        /// <param name="loadBalancingRules">An array of references to load balancing rules that use this backend
        /// address pool.
        /// </param>

        /// <param name="outboundRule">A reference to an outbound rule that uses this backend address pool.
        /// </param>

        /// <param name="outboundRules">An array of references to outbound rules that use this backend address
        /// pool.
        /// </param>

        /// <param name="inboundNatRules">An array of references to inbound NAT rules that use this backend address
        /// pool.
        /// </param>

        /// <param name="drainPeriodInSeconds">Amount of seconds Load Balancer waits for before sending RESET to client
        /// and backend address.
        /// </param>

        /// <param name="virtualNetwork">A reference to a virtual network.
        /// </param>
        public BackendAddressPool(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), string syncMode = default(string), string location = default(string), System.Collections.Generic.IList<GatewayLoadBalancerTunnelInterface> tunnelInterfaces = default(System.Collections.Generic.IList<GatewayLoadBalancerTunnelInterface>), System.Collections.Generic.IList<LoadBalancerBackendAddress> loadBalancerBackendAddresses = default(System.Collections.Generic.IList<LoadBalancerBackendAddress>), System.Collections.Generic.IList<NetworkInterfaceIPConfiguration> backendIPConfigurations = default(System.Collections.Generic.IList<NetworkInterfaceIPConfiguration>), System.Collections.Generic.IList<SubResource> loadBalancingRules = default(System.Collections.Generic.IList<SubResource>), SubResource outboundRule = default(SubResource), System.Collections.Generic.IList<SubResource> outboundRules = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> inboundNatRules = default(System.Collections.Generic.IList<SubResource>), int? drainPeriodInSeconds = default(int?), SubResource virtualNetwork = default(SubResource))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.SyncMode = syncMode;
            this.Location = location;
            this.TunnelInterfaces = tunnelInterfaces;
            this.LoadBalancerBackendAddresses = loadBalancerBackendAddresses;
            this.BackendIPConfigurations = backendIPConfigurations;
            this.LoadBalancingRules = loadBalancingRules;
            this.OutboundRule = outboundRule;
            this.OutboundRules = outboundRules;
            this.InboundNatRules = inboundNatRules;
            this.DrainPeriodInSeconds = drainPeriodInSeconds;
            this.VirtualNetwork = virtualNetwork;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within the set of
        /// backend address pools used by the load balancer. This name can be used to
        /// access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the backend address pool resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets backend address synchronous mode for the backend pool Possible values include: &#39;Automatic&#39;, &#39;Manual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.syncMode")]
        public string SyncMode {get; set; }

        /// <summary>
        /// Gets or sets the location of the backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets an array of gateway load balancer tunnel interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tunnelInterfaces")]
        public System.Collections.Generic.IList<GatewayLoadBalancerTunnelInterface> TunnelInterfaces {get; set; }

        /// <summary>
        /// Gets or sets an array of backend addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancerBackendAddresses")]
        public System.Collections.Generic.IList<LoadBalancerBackendAddress> LoadBalancerBackendAddresses {get; set; }

        /// <summary>
        /// Gets an array of references to IP addresses defined in network interfaces.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendIPConfigurations")]
        public System.Collections.Generic.IList<NetworkInterfaceIPConfiguration> BackendIPConfigurations {get; private set; }

        /// <summary>
        /// Gets an array of references to load balancing rules that use this backend
        /// address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancingRules")]
        public System.Collections.Generic.IList<SubResource> LoadBalancingRules {get; private set; }

        /// <summary>
        /// Gets a reference to an outbound rule that uses this backend address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundRule")]
        public SubResource OutboundRule {get; private set; }

        /// <summary>
        /// Gets an array of references to outbound rules that use this backend address
        /// pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundRules")]
        public System.Collections.Generic.IList<SubResource> OutboundRules {get; private set; }

        /// <summary>
        /// Gets an array of references to inbound NAT rules that use this backend
        /// address pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatRules")]
        public System.Collections.Generic.IList<SubResource> InboundNatRules {get; private set; }

        /// <summary>
        /// Gets or sets amount of seconds Load Balancer waits for before sending RESET
        /// to client and backend address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.drainPeriodInSeconds")]
        public int? DrainPeriodInSeconds {get; set; }

        /// <summary>
        /// Gets or sets a reference to a virtual network.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetwork")]
        public SubResource VirtualNetwork {get; set; }
    }
}