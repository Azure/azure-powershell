// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// BGP peer status details.
    /// </summary>
    public partial class BgpPeerStatus
    {
        /// <summary>
        /// Initializes a new instance of the BgpPeerStatus class.
        /// </summary>
        public BgpPeerStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BgpPeerStatus class.
        /// </summary>

        /// <param name="localAddress">The virtual network gateway&#39;s local address.
        /// </param>

        /// <param name="neighbor">The remote BGP peer.
        /// </param>

        /// <param name="asn">The autonomous system number of the remote BGP peer.
        /// </param>

        /// <param name="state">The BGP peer state.
        /// Possible values include: &#39;Unknown&#39;, &#39;Stopped&#39;, &#39;Idle&#39;, &#39;Connecting&#39;,
        /// &#39;Connected&#39;</param>

        /// <param name="connectedDuration">For how long the peering has been up.
        /// </param>

        /// <param name="routesReceived">The number of routes learned from this peer.
        /// </param>

        /// <param name="messagesSent">The number of BGP messages sent.
        /// </param>

        /// <param name="messagesReceived">The number of BGP messages received.
        /// </param>
        public BgpPeerStatus(string localAddress = default(string), string neighbor = default(string), long? asn = default(long?), string state = default(string), string connectedDuration = default(string), long? routesReceived = default(long?), long? messagesSent = default(long?), long? messagesReceived = default(long?))

        {
            this.LocalAddress = localAddress;
            this.Neighbor = neighbor;
            this.Asn = asn;
            this.State = state;
            this.ConnectedDuration = connectedDuration;
            this.RoutesReceived = routesReceived;
            this.MessagesSent = messagesSent;
            this.MessagesReceived = messagesReceived;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the virtual network gateway&#39;s local address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "localAddress")]
        public string LocalAddress {get; private set; }

        /// <summary>
        /// Gets the remote BGP peer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "neighbor")]
        public string Neighbor {get; private set; }

        /// <summary>
        /// Gets the autonomous system number of the remote BGP peer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "asn")]
        public long? Asn {get; private set; }

        /// <summary>
        /// Gets the BGP peer state. Possible values include: &#39;Unknown&#39;, &#39;Stopped&#39;, &#39;Idle&#39;, &#39;Connecting&#39;, &#39;Connected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets for how long the peering has been up.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectedDuration")]
        public string ConnectedDuration {get; private set; }

        /// <summary>
        /// Gets the number of routes learned from this peer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routesReceived")]
        public long? RoutesReceived {get; private set; }

        /// <summary>
        /// Gets the number of BGP messages sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messagesSent")]
        public long? MessagesSent {get; private set; }

        /// <summary>
        /// Gets the number of BGP messages received.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "messagesReceived")]
        public long? MessagesReceived {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.Asn != null)
            {
                if (this.Asn > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Asn", 4294967295);
                }
                if (this.Asn < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Asn", 0);
                }
            }


        }
    }
}