// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Allow certain variables to be scrubbed on WAF logs
    /// </summary>
    public partial class WebApplicationFirewallScrubbingRules
    {
        /// <summary>
        /// Initializes a new instance of the WebApplicationFirewallScrubbingRules class.
        /// </summary>
        public WebApplicationFirewallScrubbingRules()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebApplicationFirewallScrubbingRules class.
        /// </summary>

        /// <param name="matchVariable">The variable to be scrubbed from the logs.
        /// Possible values include: &#39;RequestHeaderNames&#39;, &#39;RequestCookieNames&#39;,
        /// &#39;RequestArgNames&#39;, &#39;RequestPostArgNames&#39;, &#39;RequestJSONArgNames&#39;,
        /// &#39;RequestIPAddress&#39;</param>

        /// <param name="selectorMatchOperator">When matchVariable is a collection, operate on the selector to specify
        /// which elements in the collection this rule applies to.
        /// Possible values include: &#39;Equals&#39;, &#39;EqualsAny&#39;</param>

        /// <param name="selector">When matchVariable is a collection, operator used to specify which elements
        /// in the collection this rule applies to.
        /// </param>

        /// <param name="state">Defines the state of log scrubbing rule. Default value is Enabled.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>
        public WebApplicationFirewallScrubbingRules(string matchVariable, string selectorMatchOperator, string selector = default(string), string state = default(string))

        {
            this.MatchVariable = matchVariable;
            this.SelectorMatchOperator = selectorMatchOperator;
            this.Selector = selector;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the variable to be scrubbed from the logs. Possible values include: &#39;RequestHeaderNames&#39;, &#39;RequestCookieNames&#39;, &#39;RequestArgNames&#39;, &#39;RequestPostArgNames&#39;, &#39;RequestJSONArgNames&#39;, &#39;RequestIPAddress&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable {get; set; }

        /// <summary>
        /// Gets or sets when matchVariable is a collection, operate on the selector to
        /// specify which elements in the collection this rule applies to. Possible values include: &#39;Equals&#39;, &#39;EqualsAny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selectorMatchOperator")]
        public string SelectorMatchOperator {get; set; }

        /// <summary>
        /// Gets or sets when matchVariable is a collection, operator used to specify
        /// which elements in the collection this rule applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "selector")]
        public string Selector {get; set; }

        /// <summary>
        /// Gets or sets defines the state of log scrubbing rule. Default value is
        /// Enabled. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.MatchVariable == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (this.SelectorMatchOperator == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SelectorMatchOperator");
            }




        }
    }
}