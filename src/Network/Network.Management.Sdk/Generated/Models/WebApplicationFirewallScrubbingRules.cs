// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Network.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Allow certain variables to be scrubbed on WAF logs
    /// </summary>
    public partial class WebApplicationFirewallScrubbingRules
    {
        /// <summary>
        /// Initializes a new instance of the
        /// WebApplicationFirewallScrubbingRules class.
        /// </summary>
        public WebApplicationFirewallScrubbingRules()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// WebApplicationFirewallScrubbingRules class.
        /// </summary>
        /// <param name="matchVariable">The variable to be scrubbed from the
        /// logs. Possible values include: 'RequestHeaderNames',
        /// 'RequestCookieNames', 'RequestArgNames', 'RequestPostArgNames',
        /// 'RequestJSONArgNames', 'RequestIPAddress'</param>
        /// <param name="selectorMatchOperator">When matchVariable is a
        /// collection, operate on the selector to specify which elements in
        /// the collection this rule applies to. Possible values include:
        /// 'Equals', 'EqualsAny'</param>
        /// <param name="selector">When matchVariable is a collection, operator
        /// used to specify which elements in the collection this rule applies
        /// to.</param>
        /// <param name="state">Defines the state of log scrubbing rule.
        /// Default value is Enabled. Possible values include: 'Enabled',
        /// 'Disabled'</param>
        public WebApplicationFirewallScrubbingRules(string matchVariable, string selectorMatchOperator, string selector = default(string), string state = default(string))
        {
            MatchVariable = matchVariable;
            SelectorMatchOperator = selectorMatchOperator;
            Selector = selector;
            State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the variable to be scrubbed from the logs. Possible
        /// values include: 'RequestHeaderNames', 'RequestCookieNames',
        /// 'RequestArgNames', 'RequestPostArgNames', 'RequestJSONArgNames',
        /// 'RequestIPAddress'
        /// </summary>
        [JsonProperty(PropertyName = "matchVariable")]
        public string MatchVariable { get; set; }

        /// <summary>
        /// Gets or sets when matchVariable is a collection, operate on the
        /// selector to specify which elements in the collection this rule
        /// applies to. Possible values include: 'Equals', 'EqualsAny'
        /// </summary>
        [JsonProperty(PropertyName = "selectorMatchOperator")]
        public string SelectorMatchOperator { get; set; }

        /// <summary>
        /// Gets or sets when matchVariable is a collection, operator used to
        /// specify which elements in the collection this rule applies to.
        /// </summary>
        [JsonProperty(PropertyName = "selector")]
        public string Selector { get; set; }

        /// <summary>
        /// Gets or sets defines the state of log scrubbing rule. Default value
        /// is Enabled. Possible values include: 'Enabled', 'Disabled'
        /// </summary>
        [JsonProperty(PropertyName = "state")]
        public string State { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (MatchVariable == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "MatchVariable");
            }
            if (SelectorMatchOperator == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SelectorMatchOperator");
            }
        }
    }
}
