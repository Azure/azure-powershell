// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Application gateway web application firewall configuration.
    /// </summary>
    public partial class ApplicationGatewayWebApplicationFirewallConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayWebApplicationFirewallConfiguration class.
        /// </summary>
        public ApplicationGatewayWebApplicationFirewallConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayWebApplicationFirewallConfiguration class.
        /// </summary>

        /// <param name="enabled">Whether the web application firewall is enabled or not.
        /// </param>

        /// <param name="firewallMode">Web application firewall mode.
        /// Possible values include: &#39;Detection&#39;, &#39;Prevention&#39;</param>

        /// <param name="ruleSetType">The type of the web application firewall rule set. Possible values are:
        /// &#39;OWASP&#39;.
        /// </param>

        /// <param name="ruleSetVersion">The version of the rule set type.
        /// </param>

        /// <param name="disabledRuleGroups">The disabled rule groups.
        /// </param>

        /// <param name="requestBodyCheck">Whether allow WAF to check request Body.
        /// </param>

        /// <param name="maxRequestBodySize">Maximum request body size for WAF.
        /// </param>

        /// <param name="maxRequestBodySizeInKb">Maximum request body size in Kb for WAF.
        /// </param>

        /// <param name="fileUploadLimitInMb">Maximum file upload size in Mb for WAF.
        /// </param>

        /// <param name="exclusions">The exclusion list.
        /// </param>
        public ApplicationGatewayWebApplicationFirewallConfiguration(bool enabled, string firewallMode, string ruleSetType, string ruleSetVersion, System.Collections.Generic.IList<ApplicationGatewayFirewallDisabledRuleGroup> disabledRuleGroups = default(System.Collections.Generic.IList<ApplicationGatewayFirewallDisabledRuleGroup>), bool? requestBodyCheck = default(bool?), int? maxRequestBodySize = default(int?), int? maxRequestBodySizeInKb = default(int?), int? fileUploadLimitInMb = default(int?), System.Collections.Generic.IList<ApplicationGatewayFirewallExclusion> exclusions = default(System.Collections.Generic.IList<ApplicationGatewayFirewallExclusion>))

        {
            this.Enabled = enabled;
            this.FirewallMode = firewallMode;
            this.RuleSetType = ruleSetType;
            this.RuleSetVersion = ruleSetVersion;
            this.DisabledRuleGroups = disabledRuleGroups;
            this.RequestBodyCheck = requestBodyCheck;
            this.MaxRequestBodySize = maxRequestBodySize;
            this.MaxRequestBodySizeInKb = maxRequestBodySizeInKb;
            this.FileUploadLimitInMb = fileUploadLimitInMb;
            this.Exclusions = exclusions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets whether the web application firewall is enabled or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enabled")]
        public bool Enabled {get; set; }

        /// <summary>
        /// Gets or sets web application firewall mode. Possible values include: &#39;Detection&#39;, &#39;Prevention&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firewallMode")]
        public string FirewallMode {get; set; }

        /// <summary>
        /// Gets or sets the type of the web application firewall rule set. Possible
        /// values are: &#39;OWASP&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetType")]
        public string RuleSetType {get; set; }

        /// <summary>
        /// Gets or sets the version of the rule set type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleSetVersion")]
        public string RuleSetVersion {get; set; }

        /// <summary>
        /// Gets or sets the disabled rule groups.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disabledRuleGroups")]
        public System.Collections.Generic.IList<ApplicationGatewayFirewallDisabledRuleGroup> DisabledRuleGroups {get; set; }

        /// <summary>
        /// Gets or sets whether allow WAF to check request Body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestBodyCheck")]
        public bool? RequestBodyCheck {get; set; }

        /// <summary>
        /// Gets or sets maximum request body size for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxRequestBodySize")]
        public int? MaxRequestBodySize {get; set; }

        /// <summary>
        /// Gets or sets maximum request body size in Kb for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxRequestBodySizeInKb")]
        public int? MaxRequestBodySizeInKb {get; set; }

        /// <summary>
        /// Gets or sets maximum file upload size in Mb for WAF.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileUploadLimitInMb")]
        public int? FileUploadLimitInMb {get; set; }

        /// <summary>
        /// Gets or sets the exclusion list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exclusions")]
        public System.Collections.Generic.IList<ApplicationGatewayFirewallExclusion> Exclusions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FirewallMode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FirewallMode");
            }
            if (this.RuleSetType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleSetType");
            }
            if (this.RuleSetVersion == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleSetVersion");
            }



            if (this.DisabledRuleGroups != null)
            {
                foreach (var element in this.DisabledRuleGroups)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.MaxRequestBodySize != null)
            {
                if (this.MaxRequestBodySize > 128)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxRequestBodySize", 128);
                }
                if (this.MaxRequestBodySize < 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxRequestBodySize", 8);
                }
            }
            if (this.MaxRequestBodySizeInKb != null)
            {
                if (this.MaxRequestBodySizeInKb > 128)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "MaxRequestBodySizeInKb", 128);
                }
                if (this.MaxRequestBodySizeInKb < 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "MaxRequestBodySizeInKb", 8);
                }
            }
            if (this.FileUploadLimitInMb != null)
            {
                if (this.FileUploadLimitInMb < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "FileUploadLimitInMb", 0);
                }
            }
            if (this.Exclusions != null)
            {
                foreach (var element in this.Exclusions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}