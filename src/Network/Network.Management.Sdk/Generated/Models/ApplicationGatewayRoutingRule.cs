// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Routing rule of an application gateway.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationGatewayRoutingRule : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayRoutingRule class.
        /// </summary>
        public ApplicationGatewayRoutingRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayRoutingRule class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Name of the routing rule that is unique within an Application Gateway.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the request routing rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="ruleType">Rule type.
        /// Possible values include: &#39;Basic&#39;, &#39;PathBasedRouting&#39;</param>

        /// <param name="priority">Priority of the routing rule.
        /// </param>

        /// <param name="backendAddressPool">Backend address pool resource of the application gateway.
        /// </param>

        /// <param name="backendSettings">Backend settings resource of the application gateway.
        /// </param>

        /// <param name="listener">Listener resource of the application gateway.
        /// </param>
        public ApplicationGatewayRoutingRule(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), string ruleType = default(string), int? priority = default(int?), SubResource backendAddressPool = default(SubResource), SubResource backendSettings = default(SubResource), SubResource listener = default(SubResource))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.RuleType = ruleType;
            this.Priority = priority;
            this.BackendAddressPool = backendAddressPool;
            this.BackendSettings = backendSettings;
            this.Listener = listener;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the routing rule that is unique within an Application
        /// Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the request routing rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets rule type. Possible values include: &#39;Basic&#39;, &#39;PathBasedRouting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ruleType")]
        public string RuleType {get; set; }

        /// <summary>
        /// Gets or sets priority of the routing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.priority")]
        public int? Priority {get; set; }

        /// <summary>
        /// Gets or sets backend address pool resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }

        /// <summary>
        /// Gets or sets backend settings resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendSettings")]
        public SubResource BackendSettings {get; set; }

        /// <summary>
        /// Gets or sets listener resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.listener")]
        public SubResource Listener {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





            if (this.Priority != null)
            {
                if (this.Priority > 20000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Priority", 20000);
                }
                if (this.Priority < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Priority", 1);
                }
            }



        }
    }
}