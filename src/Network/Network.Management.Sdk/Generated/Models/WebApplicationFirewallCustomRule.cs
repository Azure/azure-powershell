// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Defines contents of a web application rule.
    /// </summary>
    public partial class WebApplicationFirewallCustomRule
    {
        /// <summary>
        /// Initializes a new instance of the WebApplicationFirewallCustomRule class.
        /// </summary>
        public WebApplicationFirewallCustomRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebApplicationFirewallCustomRule class.
        /// </summary>

        /// <param name="name">The name of the resource that is unique within a policy. This name can be
        /// used to access the resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="priority">Priority of the rule. Rules with a lower value will be evaluated before
        /// rules with a higher value.
        /// </param>

        /// <param name="state">Describes if the custom rule is in enabled or disabled state. Defaults to
        /// Enabled if not specified.
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="rateLimitDuration">Duration over which Rate Limit policy will be applied. Applies only when
        /// ruleType is RateLimitRule.
        /// Possible values include: &#39;OneMin&#39;, &#39;FiveMins&#39;</param>

        /// <param name="rateLimitThreshold">Rate Limit threshold to apply in case ruleType is RateLimitRule. Must be
        /// greater than or equal to 1
        /// </param>

        /// <param name="ruleType">The rule type.
        /// Possible values include: &#39;MatchRule&#39;, &#39;RateLimitRule&#39;, &#39;Invalid&#39;</param>

        /// <param name="matchConditions">List of match conditions.
        /// </param>

        /// <param name="groupByUserSession">List of user session identifier group by clauses.
        /// </param>

        /// <param name="action">Type of Actions.
        /// Possible values include: &#39;Allow&#39;, &#39;Block&#39;, &#39;Log&#39;, &#39;JSChallenge&#39;</param>
        public WebApplicationFirewallCustomRule(int priority, string ruleType, System.Collections.Generic.IList<MatchCondition> matchConditions, string action, string name = default(string), string etag = default(string), string state = default(string), string rateLimitDuration = default(string), int? rateLimitThreshold = default(int?), System.Collections.Generic.IList<GroupByUserSession> groupByUserSession = default(System.Collections.Generic.IList<GroupByUserSession>))

        {
            this.Name = name;
            this.Etag = etag;
            this.Priority = priority;
            this.State = state;
            this.RateLimitDuration = rateLimitDuration;
            this.RateLimitThreshold = rateLimitThreshold;
            this.RuleType = ruleType;
            this.MatchConditions = matchConditions;
            this.GroupByUserSession = groupByUserSession;
            this.Action = action;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within a policy. This
        /// name can be used to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets priority of the rule. Rules with a lower value will be
        /// evaluated before rules with a higher value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int Priority {get; set; }

        /// <summary>
        /// Gets or sets describes if the custom rule is in enabled or disabled state.
        /// Defaults to Enabled if not specified. Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets duration over which Rate Limit policy will be applied. Applies
        /// only when ruleType is RateLimitRule. Possible values include: &#39;OneMin&#39;, &#39;FiveMins&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rateLimitDuration")]
        public string RateLimitDuration {get; set; }

        /// <summary>
        /// Gets or sets rate Limit threshold to apply in case ruleType is
        /// RateLimitRule. Must be greater than or equal to 1
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rateLimitThreshold")]
        public int? RateLimitThreshold {get; set; }

        /// <summary>
        /// Gets or sets the rule type. Possible values include: &#39;MatchRule&#39;, &#39;RateLimitRule&#39;, &#39;Invalid&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleType")]
        public string RuleType {get; set; }

        /// <summary>
        /// Gets or sets list of match conditions.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "matchConditions")]
        public System.Collections.Generic.IList<MatchCondition> MatchConditions {get; set; }

        /// <summary>
        /// Gets or sets list of user session identifier group by clauses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "groupByUserSession")]
        public System.Collections.Generic.IList<GroupByUserSession> GroupByUserSession {get; set; }

        /// <summary>
        /// Gets or sets type of Actions. Possible values include: &#39;Allow&#39;, &#39;Block&#39;, &#39;Log&#39;, &#39;JSChallenge&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public string Action {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RuleType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RuleType");
            }
            if (this.MatchConditions == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MatchConditions");
            }
            if (this.Action == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Action");
            }
            if (this.Name != null)
            {
                if (this.Name.Length > 128)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Name", 128);
                }
            }




            if (this.MatchConditions != null)
            {
                foreach (var element in this.MatchConditions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.GroupByUserSession != null)
            {
                foreach (var element in this.GroupByUserSession)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}