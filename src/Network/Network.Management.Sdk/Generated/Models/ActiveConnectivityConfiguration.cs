// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Active connectivity configuration.
    /// </summary>
    public partial class ActiveConnectivityConfiguration : EffectiveConnectivityConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ActiveConnectivityConfiguration class.
        /// </summary>
        public ActiveConnectivityConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActiveConnectivityConfiguration class.
        /// </summary>

        /// <param name="connectivityTopology">Connectivity topology type.
        /// Possible values include: &#39;HubAndSpoke&#39;, &#39;Mesh&#39;</param>

        /// <param name="isGlobal">Flag if global mesh is supported.
        /// Possible values include: &#39;False&#39;, &#39;True&#39;</param>

        /// <param name="provisioningState">The provisioning state of the connectivity configuration resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="description">A description of the connectivity configuration.
        /// </param>

        /// <param name="hubs">List of hubItems
        /// </param>

        /// <param name="appliesToGroups">Groups for configuration
        /// </param>

        /// <param name="deleteExistingPeering">Flag if need to remove current existing peerings.
        /// Possible values include: &#39;False&#39;, &#39;True&#39;</param>

        /// <param name="resourceGuid">Unique identifier for this resource.
        /// </param>

        /// <param name="id">Connectivity configuration ID.
        /// </param>

        /// <param name="configurationGroups">Effective configuration groups.
        /// </param>

        /// <param name="commitTime">Deployment time string.
        /// </param>

        /// <param name="region">Deployment region.
        /// </param>
        public ActiveConnectivityConfiguration(string connectivityTopology = default(string), string isGlobal = default(string), string provisioningState = default(string), string description = default(string), System.Collections.Generic.IList<Hub> hubs = default(System.Collections.Generic.IList<Hub>), System.Collections.Generic.IList<ConnectivityGroupItem> appliesToGroups = default(System.Collections.Generic.IList<ConnectivityGroupItem>), string deleteExistingPeering = default(string), string resourceGuid = default(string), string id = default(string), System.Collections.Generic.IList<ConfigurationGroup> configurationGroups = default(System.Collections.Generic.IList<ConfigurationGroup>), System.DateTime? commitTime = default(System.DateTime?), string region = default(string))

        : base(id, configurationGroups, connectivityTopology, isGlobal, provisioningState, description, hubs, appliesToGroups, deleteExistingPeering, resourceGuid)
        {
            this.CommitTime = commitTime;
            this.Region = region;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets deployment time string.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "commitTime")]
        public System.DateTime? CommitTime {get; set; }

        /// <summary>
        /// Gets or sets deployment region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "region")]
        public string Region {get; set; }
    }
}