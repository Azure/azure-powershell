// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the express route circuit connection.
    /// </summary>
    public partial class ExpressRouteCircuitConnectionPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitConnectionPropertiesFormat class.
        /// </summary>
        public ExpressRouteCircuitConnectionPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteCircuitConnectionPropertiesFormat class.
        /// </summary>

        /// <param name="expressRouteCircuitPeering">Reference to Express Route Circuit Private Peering Resource of the circuit
        /// initiating connection.
        /// </param>

        /// <param name="peerExpressRouteCircuitPeering">Reference to Express Route Circuit Private Peering Resource of the peered
        /// circuit.
        /// </param>

        /// <param name="addressPrefix">/29 IP address space to carve out Customer addresses for tunnels.
        /// </param>

        /// <param name="authorizationKey">The authorization key.
        /// </param>

        /// <param name="ipv6CircuitConnectionConfig">IPv6 Address PrefixProperties of the express route circuit connection.
        /// </param>

        /// <param name="circuitConnectionStatus">Express Route Circuit connection state.
        /// Possible values include: &#39;Connected&#39;, &#39;Connecting&#39;, &#39;Disconnected&#39;</param>

        /// <param name="provisioningState">The provisioning state of the express route circuit connection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public ExpressRouteCircuitConnectionPropertiesFormat(SubResource expressRouteCircuitPeering = default(SubResource), SubResource peerExpressRouteCircuitPeering = default(SubResource), string addressPrefix = default(string), string authorizationKey = default(string), Ipv6CircuitConnectionConfig ipv6CircuitConnectionConfig = default(Ipv6CircuitConnectionConfig), string circuitConnectionStatus = default(string), string provisioningState = default(string))

        {
            this.ExpressRouteCircuitPeering = expressRouteCircuitPeering;
            this.PeerExpressRouteCircuitPeering = peerExpressRouteCircuitPeering;
            this.AddressPrefix = addressPrefix;
            this.AuthorizationKey = authorizationKey;
            this.Ipv6CircuitConnectionConfig = ipv6CircuitConnectionConfig;
            this.CircuitConnectionStatus = circuitConnectionStatus;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets reference to Express Route Circuit Private Peering Resource of
        /// the circuit initiating connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expressRouteCircuitPeering")]
        public SubResource ExpressRouteCircuitPeering {get; set; }

        /// <summary>
        /// Gets or sets reference to Express Route Circuit Private Peering Resource of
        /// the peered circuit.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerExpressRouteCircuitPeering")]
        public SubResource PeerExpressRouteCircuitPeering {get; set; }

        /// <summary>
        /// Gets or sets /29 IP address space to carve out Customer addresses for
        /// tunnels.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressPrefix")]
        public string AddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the authorization key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationKey")]
        public string AuthorizationKey {get; set; }

        /// <summary>
        /// Gets or sets iPv6 Address PrefixProperties of the express route circuit
        /// connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipv6CircuitConnectionConfig")]
        public Ipv6CircuitConnectionConfig Ipv6CircuitConnectionConfig {get; set; }

        /// <summary>
        /// Gets express Route Circuit connection state. Possible values include: &#39;Connected&#39;, &#39;Connecting&#39;, &#39;Disconnected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "circuitConnectionStatus")]
        public string CircuitConnectionStatus {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the express route circuit connection
        /// resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}