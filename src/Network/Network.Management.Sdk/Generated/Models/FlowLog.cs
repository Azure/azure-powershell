// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// A flow log resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FlowLog : Resource
    {
        /// <summary>
        /// Initializes a new instance of the FlowLog class.
        /// </summary>
        public FlowLog()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FlowLog class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the flow log.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="targetResourceId">ID of network security group to which flow log will be applied.
        /// </param>

        /// <param name="targetResourceGuid">Guid of network security group to which flow log will be applied.
        /// </param>

        /// <param name="storageId">ID of the storage account which is used to store the flow log.
        /// </param>

        /// <param name="enabled">Flag to enable/disable flow logging.
        /// </param>

        /// <param name="retentionPolicy">Parameters that define the retention policy for flow log.
        /// </param>

        /// <param name="format">Parameters that define the flow log format.
        /// </param>

        /// <param name="flowAnalyticsConfiguration">Parameters that define the configuration of traffic analytics.
        /// </param>
        public FlowLog(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string provisioningState = default(string), string targetResourceId = default(string), string targetResourceGuid = default(string), string storageId = default(string), bool? enabled = default(bool?), RetentionPolicyParameters retentionPolicy = default(RetentionPolicyParameters), FlowLogFormatParameters format = default(FlowLogFormatParameters), TrafficAnalyticsProperties flowAnalyticsConfiguration = default(TrafficAnalyticsProperties))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.TargetResourceId = targetResourceId;
            this.TargetResourceGuid = targetResourceGuid;
            this.StorageId = storageId;
            this.Enabled = enabled;
            this.RetentionPolicy = retentionPolicy;
            this.Format = format;
            this.FlowAnalyticsConfiguration = flowAnalyticsConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the flow log. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets iD of network security group to which flow log will be
        /// applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetResourceId")]
        public string TargetResourceId {get; set; }

        /// <summary>
        /// Gets guid of network security group to which flow log will be applied.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.targetResourceGuid")]
        public string TargetResourceGuid {get; private set; }

        /// <summary>
        /// Gets or sets iD of the storage account which is used to store the flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageId")]
        public string StorageId {get; set; }

        /// <summary>
        /// Gets or sets flag to enable/disable flow logging.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enabled")]
        public bool? Enabled {get; set; }

        /// <summary>
        /// Gets or sets parameters that define the retention policy for flow log.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.retentionPolicy")]
        public RetentionPolicyParameters RetentionPolicy {get; set; }

        /// <summary>
        /// Gets or sets parameters that define the flow log format.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.format")]
        public FlowLogFormatParameters Format {get; set; }

        /// <summary>
        /// Gets or sets parameters that define the configuration of traffic analytics.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.flowAnalyticsConfiguration")]
        public TrafficAnalyticsProperties FlowAnalyticsConfiguration {get; set; }
    }
}