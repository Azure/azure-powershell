// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the properties of a connection monitor.
    /// </summary>
    public partial class ConnectionMonitorResultProperties : ConnectionMonitorParameters
    {
        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorResultProperties class.
        /// </summary>
        public ConnectionMonitorResultProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectionMonitorResultProperties class.
        /// </summary>

        /// <param name="source">Describes the source of connection monitor.
        /// </param>

        /// <param name="destination">Describes the destination of connection monitor.
        /// </param>

        /// <param name="autoStart">Determines if the connection monitor will start automatically once created.
        /// </param>

        /// <param name="monitoringIntervalInSeconds">Monitoring interval in seconds.
        /// </param>

        /// <param name="endpoints">List of connection monitor endpoints.
        /// </param>

        /// <param name="testConfigurations">List of connection monitor test configurations.
        /// </param>

        /// <param name="testGroups">List of connection monitor test groups.
        /// </param>

        /// <param name="outputs">List of connection monitor outputs.
        /// </param>

        /// <param name="notes">Optional notes to be associated with the connection monitor.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the connection monitor.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="startTime">The date and time when the connection monitor was started.
        /// </param>

        /// <param name="monitoringStatus">The monitoring status of the connection monitor.
        /// </param>

        /// <param name="connectionMonitorType">Type of connection monitor.
        /// Possible values include: &#39;MultiEndpoint&#39;, &#39;SingleSourceDestination&#39;</param>
        public ConnectionMonitorResultProperties(ConnectionMonitorSource source = default(ConnectionMonitorSource), ConnectionMonitorDestination destination = default(ConnectionMonitorDestination), bool? autoStart = default(bool?), int? monitoringIntervalInSeconds = default(int?), System.Collections.Generic.IList<ConnectionMonitorEndpoint> endpoints = default(System.Collections.Generic.IList<ConnectionMonitorEndpoint>), System.Collections.Generic.IList<ConnectionMonitorTestConfiguration> testConfigurations = default(System.Collections.Generic.IList<ConnectionMonitorTestConfiguration>), System.Collections.Generic.IList<ConnectionMonitorTestGroup> testGroups = default(System.Collections.Generic.IList<ConnectionMonitorTestGroup>), System.Collections.Generic.IList<ConnectionMonitorOutput> outputs = default(System.Collections.Generic.IList<ConnectionMonitorOutput>), string notes = default(string), string provisioningState = default(string), System.DateTime? startTime = default(System.DateTime?), string monitoringStatus = default(string), string connectionMonitorType = default(string))

        : base(source, destination, autoStart, monitoringIntervalInSeconds, endpoints, testConfigurations, testGroups, outputs, notes)
        {
            this.ProvisioningState = provisioningState;
            this.StartTime = startTime;
            this.MonitoringStatus = monitoringStatus;
            this.ConnectionMonitorType = connectionMonitorType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioning state of the connection monitor. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the date and time when the connection monitor was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets the monitoring status of the connection monitor.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "monitoringStatus")]
        public string MonitoringStatus {get; private set; }

        /// <summary>
        /// Gets type of connection monitor. Possible values include: &#39;MultiEndpoint&#39;, &#39;SingleSourceDestination&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionMonitorType")]
        public string ConnectionMonitorType {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();



        }
    }
}