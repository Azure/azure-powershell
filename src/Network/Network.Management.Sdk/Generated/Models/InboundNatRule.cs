// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Inbound NAT rule of the load balancer.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class InboundNatRule : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the InboundNatRule class.
        /// </summary>
        public InboundNatRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InboundNatRule class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within the set of inbound NAT rules
        /// used by the load balancer. This name can be used to access the resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the inbound NAT rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="frontendIPConfiguration">A reference to frontend IP addresses.
        /// </param>

        /// <param name="backendIPConfiguration">A reference to a private IP address defined on a network interface of a VM.
        /// Traffic sent to the frontend port of each of the frontend IP configurations
        /// is forwarded to the backend IP.
        /// </param>

        /// <param name="protocol">The reference to the transport protocol used by the load balancing rule.
        /// Possible values include: &#39;Udp&#39;, &#39;Tcp&#39;, &#39;All&#39;</param>

        /// <param name="frontendPort">The port for the external endpoint. Port numbers for each rule must be
        /// unique within the Load Balancer. Acceptable values range from 1 to 65534.
        /// </param>

        /// <param name="backendPort">The port used for the internal endpoint. Acceptable values range from 1 to
        /// 65535.
        /// </param>

        /// <param name="idleTimeoutInMinutes">The timeout for the TCP idle connection. The value can be set between 4 and
        /// 30 minutes. The default value is 4 minutes. This element is only used when
        /// the protocol is set to TCP.
        /// </param>

        /// <param name="enableFloatingIP">Configures a virtual machine&#39;s endpoint for the floating IP capability
        /// required to configure a SQL AlwaysOn Availability Group. This setting is
        /// required when using the SQL AlwaysOn Availability Groups in SQL server.
        /// This setting can&#39;t be changed after you create the endpoint.
        /// </param>

        /// <param name="enableTcpReset">Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
        /// connection termination. This element is only used when the protocol is set
        /// to TCP.
        /// </param>

        /// <param name="frontendPortRangeStart">The port range start for the external endpoint. This property is used
        /// together with BackendAddressPool and FrontendPortRangeEnd. Individual
        /// inbound NAT rule port mappings will be created for each backend address
        /// from BackendAddressPool. Acceptable values range from 1 to 65534.
        /// </param>

        /// <param name="frontendPortRangeEnd">The port range end for the external endpoint. This property is used
        /// together with BackendAddressPool and FrontendPortRangeStart. Individual
        /// inbound NAT rule port mappings will be created for each backend address
        /// from BackendAddressPool. Acceptable values range from 1 to 65534.
        /// </param>

        /// <param name="backendAddressPool">A reference to backendAddressPool resource.
        /// </param>
        public InboundNatRule(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), SubResource frontendIPConfiguration = default(SubResource), NetworkInterfaceIPConfiguration backendIPConfiguration = default(NetworkInterfaceIPConfiguration), string protocol = default(string), int? frontendPort = default(int?), int? backendPort = default(int?), int? idleTimeoutInMinutes = default(int?), bool? enableFloatingIP = default(bool?), bool? enableTcpReset = default(bool?), int? frontendPortRangeStart = default(int?), int? frontendPortRangeEnd = default(int?), SubResource backendAddressPool = default(SubResource))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.FrontendIPConfiguration = frontendIPConfiguration;
            this.BackendIPConfiguration = backendIPConfiguration;
            this.Protocol = protocol;
            this.FrontendPort = frontendPort;
            this.BackendPort = backendPort;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            this.EnableFloatingIP = enableFloatingIP;
            this.EnableTcpReset = enableTcpReset;
            this.FrontendPortRangeStart = frontendPortRangeStart;
            this.FrontendPortRangeEnd = frontendPortRangeEnd;
            this.BackendAddressPool = backendAddressPool;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within the set of
        /// inbound NAT rules used by the load balancer. This name can be used to
        /// access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the inbound NAT rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets a reference to frontend IP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfiguration")]
        public SubResource FrontendIPConfiguration {get; set; }

        /// <summary>
        /// Gets a reference to a private IP address defined on a network interface of
        /// a VM. Traffic sent to the frontend port of each of the frontend IP
        /// configurations is forwarded to the backend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendIPConfiguration")]
        public NetworkInterfaceIPConfiguration BackendIPConfiguration {get; private set; }

        /// <summary>
        /// Gets or sets the reference to the transport protocol used by the load
        /// balancing rule. Possible values include: &#39;Udp&#39;, &#39;Tcp&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the port for the external endpoint. Port numbers for each rule
        /// must be unique within the Load Balancer. Acceptable values range from 1 to
        /// 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPort")]
        public int? FrontendPort {get; set; }

        /// <summary>
        /// Gets or sets the port used for the internal endpoint. Acceptable values
        /// range from 1 to 65535.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendPort")]
        public int? BackendPort {get; set; }

        /// <summary>
        /// Gets or sets the timeout for the TCP idle connection. The value can be set
        /// between 4 and 30 minutes. The default value is 4 minutes. This element is
        /// only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }

        /// <summary>
        /// Gets or sets configures a virtual machine&#39;s endpoint for the floating IP
        /// capability required to configure a SQL AlwaysOn Availability Group. This
        /// setting is required when using the SQL AlwaysOn Availability Groups in SQL
        /// server. This setting can&#39;t be changed after you create the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableFloatingIP")]
        public bool? EnableFloatingIP {get; set; }

        /// <summary>
        /// Gets or sets receive bidirectional TCP Reset on TCP flow idle timeout or
        /// unexpected connection termination. This element is only used when the
        /// protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableTcpReset")]
        public bool? EnableTcpReset {get; set; }

        /// <summary>
        /// Gets or sets the port range start for the external endpoint. This property
        /// is used together with BackendAddressPool and FrontendPortRangeEnd.
        /// Individual inbound NAT rule port mappings will be created for each backend
        /// address from BackendAddressPool. Acceptable values range from 1 to 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPortRangeStart")]
        public int? FrontendPortRangeStart {get; set; }

        /// <summary>
        /// Gets or sets the port range end for the external endpoint. This property is
        /// used together with BackendAddressPool and FrontendPortRangeStart.
        /// Individual inbound NAT rule port mappings will be created for each backend
        /// address from BackendAddressPool. Acceptable values range from 1 to 65534.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendPortRangeEnd")]
        public int? FrontendPortRangeEnd {get; set; }

        /// <summary>
        /// Gets or sets a reference to backendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }
    }
}