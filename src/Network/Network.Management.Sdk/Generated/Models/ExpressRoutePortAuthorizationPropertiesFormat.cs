// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of ExpressRoutePort Authorization.
    /// </summary>
    /// <remarks>
    /// Properties of ExpressRoutePort Authorization.
    /// </remarks>
    public partial class ExpressRoutePortAuthorizationPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRoutePortAuthorizationPropertiesFormat class.
        /// </summary>
        public ExpressRoutePortAuthorizationPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRoutePortAuthorizationPropertiesFormat class.
        /// </summary>

        /// <param name="authorizationKey">The authorization key.
        /// </param>

        /// <param name="authorizationUseStatus">The authorization use status.
        /// Possible values include: &#39;Available&#39;, &#39;InUse&#39;</param>

        /// <param name="circuitResourceUri">The reference to the ExpressRoute circuit resource using the authorization.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the authorization resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public ExpressRoutePortAuthorizationPropertiesFormat(string authorizationKey = default(string), string authorizationUseStatus = default(string), string circuitResourceUri = default(string), string provisioningState = default(string))

        {
            this.AuthorizationKey = authorizationKey;
            this.AuthorizationUseStatus = authorizationUseStatus;
            this.CircuitResourceUri = circuitResourceUri;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the authorization key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationKey")]
        public string AuthorizationKey {get; private set; }

        /// <summary>
        /// Gets the authorization use status. Possible values include: &#39;Available&#39;, &#39;InUse&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authorizationUseStatus")]
        public string AuthorizationUseStatus {get; private set; }

        /// <summary>
        /// Gets the reference to the ExpressRoute circuit resource using the
        /// authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "circuitResourceUri")]
        public string CircuitResourceUri {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the authorization resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}