// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters for VpnGatewayNatRule.
    /// </summary>
    public partial class VpnGatewayNatRuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the VpnGatewayNatRuleProperties class.
        /// </summary>
        public VpnGatewayNatRuleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnGatewayNatRuleProperties class.
        /// </summary>

        /// <param name="provisioningState">The provisioning state of the NAT Rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="type">The type of NAT rule for VPN NAT.
        /// Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;</param>

        /// <param name="mode">The Source NAT direction of a VPN NAT.
        /// Possible values include: &#39;EgressSnat&#39;, &#39;IngressSnat&#39;</param>

        /// <param name="internalMappings">The private IP address internal mapping for NAT.
        /// </param>

        /// <param name="externalMappings">The private IP address external mapping for NAT.
        /// </param>

        /// <param name="ipConfigurationId">The IP Configuration ID this NAT rule applies to.
        /// </param>

        /// <param name="egressVpnSiteLinkConnections">List of egress VpnSiteLinkConnections.
        /// </param>

        /// <param name="ingressVpnSiteLinkConnections">List of ingress VpnSiteLinkConnections.
        /// </param>
        public VpnGatewayNatRuleProperties(string provisioningState = default(string), string type = default(string), string mode = default(string), System.Collections.Generic.IList<VpnNatRuleMapping> internalMappings = default(System.Collections.Generic.IList<VpnNatRuleMapping>), System.Collections.Generic.IList<VpnNatRuleMapping> externalMappings = default(System.Collections.Generic.IList<VpnNatRuleMapping>), string ipConfigurationId = default(string), System.Collections.Generic.IList<SubResource> egressVpnSiteLinkConnections = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> ingressVpnSiteLinkConnections = default(System.Collections.Generic.IList<SubResource>))

        {
            this.ProvisioningState = provisioningState;
            this.Type = type;
            this.Mode = mode;
            this.InternalMappings = internalMappings;
            this.ExternalMappings = externalMappings;
            this.IPConfigurationId = ipConfigurationId;
            this.EgressVpnSiteLinkConnections = egressVpnSiteLinkConnections;
            this.IngressVpnSiteLinkConnections = ingressVpnSiteLinkConnections;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the provisioning state of the NAT Rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the type of NAT rule for VPN NAT. Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the Source NAT direction of a VPN NAT. Possible values include: &#39;EgressSnat&#39;, &#39;IngressSnat&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mode")]
        public string Mode {get; set; }

        /// <summary>
        /// Gets or sets the private IP address internal mapping for NAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "internalMappings")]
        public System.Collections.Generic.IList<VpnNatRuleMapping> InternalMappings {get; set; }

        /// <summary>
        /// Gets or sets the private IP address external mapping for NAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalMappings")]
        public System.Collections.Generic.IList<VpnNatRuleMapping> ExternalMappings {get; set; }

        /// <summary>
        /// Gets or sets the IP Configuration ID this NAT rule applies to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipConfigurationId")]
        public string IPConfigurationId {get; set; }

        /// <summary>
        /// Gets list of egress VpnSiteLinkConnections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "egressVpnSiteLinkConnections")]
        public System.Collections.Generic.IList<SubResource> EgressVpnSiteLinkConnections {get; private set; }

        /// <summary>
        /// Gets list of ingress VpnSiteLinkConnections.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingressVpnSiteLinkConnections")]
        public System.Collections.Generic.IList<SubResource> IngressVpnSiteLinkConnections {get; private set; }
    }
}