// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the load balancer.
    /// </summary>
    public partial class LoadBalancingRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the LoadBalancingRulePropertiesFormat class.
        /// </summary>
        public LoadBalancingRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LoadBalancingRulePropertiesFormat class.
        /// </summary>

        /// <param name="frontendIPConfiguration">A reference to frontend IP addresses.
        /// </param>

        /// <param name="backendAddressPool">A reference to a pool of DIPs. Inbound traffic is randomly load balanced
        /// across IPs in the backend IPs.
        /// </param>

        /// <param name="backendAddressPools">An array of references to pool of DIPs.
        /// </param>

        /// <param name="probe">The reference to the load balancer probe used by the load balancing rule.
        /// </param>

        /// <param name="protocol">The reference to the transport protocol used by the load balancing rule.
        /// Possible values include: &#39;Udp&#39;, &#39;Tcp&#39;, &#39;All&#39;</param>

        /// <param name="loadDistribution">The load distribution policy for this rule.
        /// Possible values include: &#39;Default&#39;, &#39;SourceIP&#39;, &#39;SourceIPProtocol&#39;</param>

        /// <param name="frontendPort">The port for the external endpoint. Port numbers for each rule must be
        /// unique within the Load Balancer. Acceptable values are between 0 and 65534.
        /// Note that value 0 enables &#34;Any Port&#34;.
        /// </param>

        /// <param name="backendPort">The port used for internal connections on the endpoint. Acceptable values
        /// are between 0 and 65535. Note that value 0 enables &#34;Any Port&#34;.
        /// </param>

        /// <param name="idleTimeoutInMinutes">The timeout for the TCP idle connection. The value can be set between 4 and
        /// 30 minutes. The default value is 4 minutes. This element is only used when
        /// the protocol is set to TCP.
        /// </param>

        /// <param name="enableFloatingIP">Configures a virtual machine&#39;s endpoint for the floating IP capability
        /// required to configure a SQL AlwaysOn Availability Group. This setting is
        /// required when using the SQL AlwaysOn Availability Groups in SQL server.
        /// This setting can&#39;t be changed after you create the endpoint.
        /// </param>

        /// <param name="enableTcpReset">Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
        /// connection termination. This element is only used when the protocol is set
        /// to TCP.
        /// </param>

        /// <param name="disableOutboundSnat">Configures SNAT for the VMs in the backend pool to use the publicIP address
        /// specified in the frontend of the load balancing rule.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the load balancing rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public LoadBalancingRulePropertiesFormat(string protocol, int frontendPort, SubResource frontendIPConfiguration = default(SubResource), SubResource backendAddressPool = default(SubResource), System.Collections.Generic.IList<SubResource> backendAddressPools = default(System.Collections.Generic.IList<SubResource>), SubResource probe = default(SubResource), string loadDistribution = default(string), int? backendPort = default(int?), int? idleTimeoutInMinutes = default(int?), bool? enableFloatingIP = default(bool?), bool? enableTcpReset = default(bool?), bool? disableOutboundSnat = default(bool?), string provisioningState = default(string))

        {
            this.FrontendIPConfiguration = frontendIPConfiguration;
            this.BackendAddressPool = backendAddressPool;
            this.BackendAddressPools = backendAddressPools;
            this.Probe = probe;
            this.Protocol = protocol;
            this.LoadDistribution = loadDistribution;
            this.FrontendPort = frontendPort;
            this.BackendPort = backendPort;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            this.EnableFloatingIP = enableFloatingIP;
            this.EnableTcpReset = enableTcpReset;
            this.DisableOutboundSnat = disableOutboundSnat;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a reference to frontend IP addresses.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendIPConfiguration")]
        public SubResource FrontendIPConfiguration {get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Inbound traffic is randomly
        /// load balanced across IPs in the backend IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }

        /// <summary>
        /// Gets or sets an array of references to pool of DIPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendAddressPools")]
        public System.Collections.Generic.IList<SubResource> BackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets the reference to the load balancer probe used by the load
        /// balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "probe")]
        public SubResource Probe {get; set; }

        /// <summary>
        /// Gets or sets the reference to the transport protocol used by the load
        /// balancing rule. Possible values include: &#39;Udp&#39;, &#39;Tcp&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the load distribution policy for this rule. Possible values include: &#39;Default&#39;, &#39;SourceIP&#39;, &#39;SourceIPProtocol&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadDistribution")]
        public string LoadDistribution {get; set; }

        /// <summary>
        /// Gets or sets the port for the external endpoint. Port numbers for each rule
        /// must be unique within the Load Balancer. Acceptable values are between 0
        /// and 65534. Note that value 0 enables &#34;Any Port&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendPort")]
        public int FrontendPort {get; set; }

        /// <summary>
        /// Gets or sets the port used for internal connections on the endpoint.
        /// Acceptable values are between 0 and 65535. Note that value 0 enables &#34;Any
        /// Port&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendPort")]
        public int? BackendPort {get; set; }

        /// <summary>
        /// Gets or sets the timeout for the TCP idle connection. The value can be set
        /// between 4 and 30 minutes. The default value is 4 minutes. This element is
        /// only used when the protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }

        /// <summary>
        /// Gets or sets configures a virtual machine&#39;s endpoint for the floating IP
        /// capability required to configure a SQL AlwaysOn Availability Group. This
        /// setting is required when using the SQL AlwaysOn Availability Groups in SQL
        /// server. This setting can&#39;t be changed after you create the endpoint.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableFloatingIP")]
        public bool? EnableFloatingIP {get; set; }

        /// <summary>
        /// Gets or sets receive bidirectional TCP Reset on TCP flow idle timeout or
        /// unexpected connection termination. This element is only used when the
        /// protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableTcpReset")]
        public bool? EnableTcpReset {get; set; }

        /// <summary>
        /// Gets or sets configures SNAT for the VMs in the backend pool to use the
        /// publicIP address specified in the frontend of the load balancing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disableOutboundSnat")]
        public bool? DisableOutboundSnat {get; set; }

        /// <summary>
        /// Gets the provisioning state of the load balancing rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }







        }
    }
}