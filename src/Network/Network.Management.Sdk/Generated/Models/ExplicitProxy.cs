// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Explicit Proxy Settings in Firewall Policy.
    /// </summary>
    public partial class ExplicitProxy
    {
        /// <summary>
        /// Initializes a new instance of the ExplicitProxy class.
        /// </summary>
        public ExplicitProxy()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExplicitProxy class.
        /// </summary>

        /// <param name="enableExplicitProxy">When set to true, explicit proxy mode is enabled.
        /// </param>

        /// <param name="httpPort">Port number for explicit proxy http protocol, cannot be greater than 64000.
        /// </param>

        /// <param name="httpsPort">Port number for explicit proxy https protocol, cannot be greater than
        /// 64000.
        /// </param>

        /// <param name="enablePacFile">When set to true, pac file port and url needs to be provided.
        /// </param>

        /// <param name="pacFilePort">Port number for firewall to serve PAC file.
        /// </param>

        /// <param name="pacFile">SAS URL for PAC file.
        /// </param>
        public ExplicitProxy(bool? enableExplicitProxy = default(bool?), int? httpPort = default(int?), int? httpsPort = default(int?), bool? enablePacFile = default(bool?), int? pacFilePort = default(int?), string pacFile = default(string))

        {
            this.EnableExplicitProxy = enableExplicitProxy;
            this.HttpPort = httpPort;
            this.HttpsPort = httpsPort;
            this.EnablePacFile = enablePacFile;
            this.PacFilePort = pacFilePort;
            this.PacFile = pacFile;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets when set to true, explicit proxy mode is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableExplicitProxy")]
        public bool? EnableExplicitProxy {get; set; }

        /// <summary>
        /// Gets or sets port number for explicit proxy http protocol, cannot be
        /// greater than 64000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpPort")]
        public int? HttpPort {get; set; }

        /// <summary>
        /// Gets or sets port number for explicit proxy https protocol, cannot be
        /// greater than 64000.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpsPort")]
        public int? HttpsPort {get; set; }

        /// <summary>
        /// Gets or sets when set to true, pac file port and url needs to be provided.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enablePacFile")]
        public bool? EnablePacFile {get; set; }

        /// <summary>
        /// Gets or sets port number for firewall to serve PAC file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pacFilePort")]
        public int? PacFilePort {get; set; }

        /// <summary>
        /// Gets or sets sAS URL for PAC file.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pacFile")]
        public string PacFile {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.HttpPort != null)
            {
                if (this.HttpPort > 64000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "HttpPort", 64000);
                }
                if (this.HttpPort < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "HttpPort", 0);
                }
            }
            if (this.HttpsPort != null)
            {
                if (this.HttpsPort > 64000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "HttpsPort", 64000);
                }
                if (this.HttpsPort < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "HttpsPort", 0);
                }
            }
            if (this.PacFilePort != null)
            {
                if (this.PacFilePort > 64000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PacFilePort", 64000);
                }
                if (this.PacFilePort < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PacFilePort", 0);
                }
            }

        }
    }
}