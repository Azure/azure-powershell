// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Rule of type application.
    /// </summary>
    [Newtonsoft.Json.JsonObject("ApplicationRule")]
    public partial class ApplicationRule : FirewallPolicyRule
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationRule class.
        /// </summary>
        public ApplicationRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationRule class.
        /// </summary>

        /// <param name="name">Name of the rule.
        /// </param>

        /// <param name="description">Description of the rule.
        /// </param>

        /// <param name="sourceAddresses">List of source IP addresses for this rule.
        /// </param>

        /// <param name="destinationAddresses">List of destination IP addresses or Service Tags.
        /// </param>

        /// <param name="protocols">Array of Application Protocols.
        /// </param>

        /// <param name="targetFqdns">List of FQDNs for this rule.
        /// </param>

        /// <param name="targetUrls">List of Urls for this rule condition.
        /// </param>

        /// <param name="fqdnTags">List of FQDN Tags for this rule.
        /// </param>

        /// <param name="sourceIPGroups">List of source IpGroups for this rule.
        /// </param>

        /// <param name="terminateTls">Terminate TLS connections for this rule.
        /// </param>

        /// <param name="webCategories">List of destination azure web categories.
        /// </param>

        /// <param name="httpHeadersToInsert">List of HTTP/S headers to insert.
        /// </param>
        public ApplicationRule(string name = default(string), string description = default(string), System.Collections.Generic.IList<string> sourceAddresses = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationAddresses = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<FirewallPolicyRuleApplicationProtocol> protocols = default(System.Collections.Generic.IList<FirewallPolicyRuleApplicationProtocol>), System.Collections.Generic.IList<string> targetFqdns = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> targetUrls = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> fqdnTags = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> sourceIPGroups = default(System.Collections.Generic.IList<string>), bool? terminateTls = default(bool?), System.Collections.Generic.IList<string> webCategories = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<FirewallPolicyHttpHeaderToInsert> httpHeadersToInsert = default(System.Collections.Generic.IList<FirewallPolicyHttpHeaderToInsert>))

        : base(name, description)
        {
            this.SourceAddresses = sourceAddresses;
            this.DestinationAddresses = destinationAddresses;
            this.Protocols = protocols;
            this.TargetFqdns = targetFqdns;
            this.TargetUrls = targetUrls;
            this.FqdnTags = fqdnTags;
            this.SourceIPGroups = sourceIPGroups;
            this.TerminateTls = terminateTls;
            this.WebCategories = webCategories;
            this.HttpHeadersToInsert = httpHeadersToInsert;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of source IP addresses for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddresses")]
        public System.Collections.Generic.IList<string> SourceAddresses {get; set; }

        /// <summary>
        /// Gets or sets list of destination IP addresses or Service Tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddresses")]
        public System.Collections.Generic.IList<string> DestinationAddresses {get; set; }

        /// <summary>
        /// Gets or sets array of Application Protocols.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocols")]
        public System.Collections.Generic.IList<FirewallPolicyRuleApplicationProtocol> Protocols {get; set; }

        /// <summary>
        /// Gets or sets list of FQDNs for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetFqdns")]
        public System.Collections.Generic.IList<string> TargetFqdns {get; set; }

        /// <summary>
        /// Gets or sets list of Urls for this rule condition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetUrls")]
        public System.Collections.Generic.IList<string> TargetUrls {get; set; }

        /// <summary>
        /// Gets or sets list of FQDN Tags for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fqdnTags")]
        public System.Collections.Generic.IList<string> FqdnTags {get; set; }

        /// <summary>
        /// Gets or sets list of source IpGroups for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceIpGroups")]
        public System.Collections.Generic.IList<string> SourceIPGroups {get; set; }

        /// <summary>
        /// Gets or sets terminate TLS connections for this rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "terminateTLS")]
        public bool? TerminateTls {get; set; }

        /// <summary>
        /// Gets or sets list of destination azure web categories.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "webCategories")]
        public System.Collections.Generic.IList<string> WebCategories {get; set; }

        /// <summary>
        /// Gets or sets list of HTTP/S headers to insert.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpHeadersToInsert")]
        public System.Collections.Generic.IList<FirewallPolicyHttpHeaderToInsert> HttpHeadersToInsert {get; set; }
    }
}