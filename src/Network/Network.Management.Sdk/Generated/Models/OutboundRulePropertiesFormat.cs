// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Outbound rule of the load balancer.
    /// </summary>
    public partial class OutboundRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the OutboundRulePropertiesFormat class.
        /// </summary>
        public OutboundRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OutboundRulePropertiesFormat class.
        /// </summary>

        /// <param name="allocatedOutboundPorts">The number of outbound ports to be used for NAT.
        /// </param>

        /// <param name="frontendIPConfigurations">The Frontend IP addresses of the load balancer.
        /// </param>

        /// <param name="backendAddressPool">A reference to a pool of DIPs. Outbound traffic is randomly load balanced
        /// across IPs in the backend IPs.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the outbound rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="protocol">The protocol for the outbound rule in load balancer.
        /// Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;All&#39;</param>

        /// <param name="enableTcpReset">Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
        /// connection termination. This element is only used when the protocol is set
        /// to TCP.
        /// </param>

        /// <param name="idleTimeoutInMinutes">The timeout for the TCP idle connection.
        /// </param>
        public OutboundRulePropertiesFormat(System.Collections.Generic.IList<SubResource> frontendIPConfigurations, SubResource backendAddressPool, string protocol, int? allocatedOutboundPorts = default(int?), string provisioningState = default(string), bool? enableTcpReset = default(bool?), int? idleTimeoutInMinutes = default(int?))

        {
            this.AllocatedOutboundPorts = allocatedOutboundPorts;
            this.FrontendIPConfigurations = frontendIPConfigurations;
            this.BackendAddressPool = backendAddressPool;
            this.ProvisioningState = provisioningState;
            this.Protocol = protocol;
            this.EnableTcpReset = enableTcpReset;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the number of outbound ports to be used for NAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocatedOutboundPorts")]
        public int? AllocatedOutboundPorts {get; set; }

        /// <summary>
        /// Gets or sets the Frontend IP addresses of the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendIPConfigurations")]
        public System.Collections.Generic.IList<SubResource> FrontendIPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Outbound traffic is randomly
        /// load balanced across IPs in the backend IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }

        /// <summary>
        /// Gets the provisioning state of the outbound rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the protocol for the outbound rule in load balancer. Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets receive bidirectional TCP Reset on TCP flow idle timeout or
        /// unexpected connection termination. This element is only used when the
        /// protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableTcpReset")]
        public bool? EnableTcpReset {get; set; }

        /// <summary>
        /// Gets or sets the timeout for the TCP idle connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FrontendIPConfigurations == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FrontendIPConfigurations");
            }
            if (this.BackendAddressPool == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "BackendAddressPool");
            }
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }




        }
    }
}