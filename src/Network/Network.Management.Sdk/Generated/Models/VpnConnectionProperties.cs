// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters for VpnConnection.
    /// </summary>
    public partial class VpnConnectionProperties
    {
        /// <summary>
        /// Initializes a new instance of the VpnConnectionProperties class.
        /// </summary>
        public VpnConnectionProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnConnectionProperties class.
        /// </summary>

        /// <param name="remoteVpnSite">Id of the connected vpn site.
        /// </param>

        /// <param name="routingWeight">Routing weight for vpn connection.
        /// </param>

        /// <param name="dpdTimeoutSeconds">DPD timeout in seconds for vpn connection.
        /// </param>

        /// <param name="connectionStatus">The connection status.
        /// Possible values include: &#39;Unknown&#39;, &#39;Connecting&#39;, &#39;Connected&#39;,
        /// &#39;NotConnected&#39;</param>

        /// <param name="vpnConnectionProtocolType">Connection protocol used for this connection.
        /// Possible values include: &#39;IKEv2&#39;, &#39;IKEv1&#39;</param>

        /// <param name="ingressBytesTransferred">Ingress bytes transferred.
        /// </param>

        /// <param name="egressBytesTransferred">Egress bytes transferred.
        /// </param>

        /// <param name="connectionBandwidth">Expected bandwidth in MBPS.
        /// </param>

        /// <param name="sharedKey">SharedKey for the vpn connection.
        /// </param>

        /// <param name="enableBgp">EnableBgp flag.
        /// </param>

        /// <param name="usePolicyBasedTrafficSelectors">Enable policy-based traffic selectors.
        /// </param>

        /// <param name="ipsecPolicies">The IPSec Policies to be considered by this connection.
        /// </param>

        /// <param name="trafficSelectorPolicies">The Traffic Selector Policies to be considered by this connection.
        /// </param>

        /// <param name="enableRateLimiting">EnableBgp flag.
        /// </param>

        /// <param name="enableInternetSecurity">Enable internet security.
        /// </param>

        /// <param name="useLocalAzureIPAddress">Use local azure ip to initiate connection.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the VPN connection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="vpnLinkConnections">List of all vpn site link connections to the gateway.
        /// </param>

        /// <param name="routingConfiguration">The Routing Configuration indicating the associated and propagated route
        /// tables on this connection.
        /// </param>
        public VpnConnectionProperties(SubResource remoteVpnSite = default(SubResource), int? routingWeight = default(int?), int? dpdTimeoutSeconds = default(int?), string connectionStatus = default(string), string vpnConnectionProtocolType = default(string), long? ingressBytesTransferred = default(long?), long? egressBytesTransferred = default(long?), int? connectionBandwidth = default(int?), string sharedKey = default(string), bool? enableBgp = default(bool?), bool? usePolicyBasedTrafficSelectors = default(bool?), System.Collections.Generic.IList<IpsecPolicy> ipsecPolicies = default(System.Collections.Generic.IList<IpsecPolicy>), System.Collections.Generic.IList<TrafficSelectorPolicy> trafficSelectorPolicies = default(System.Collections.Generic.IList<TrafficSelectorPolicy>), bool? enableRateLimiting = default(bool?), bool? enableInternetSecurity = default(bool?), bool? useLocalAzureIPAddress = default(bool?), string provisioningState = default(string), System.Collections.Generic.IList<VpnSiteLinkConnection> vpnLinkConnections = default(System.Collections.Generic.IList<VpnSiteLinkConnection>), RoutingConfiguration routingConfiguration = default(RoutingConfiguration))

        {
            this.RemoteVpnSite = remoteVpnSite;
            this.RoutingWeight = routingWeight;
            this.DpdTimeoutSeconds = dpdTimeoutSeconds;
            this.ConnectionStatus = connectionStatus;
            this.VpnConnectionProtocolType = vpnConnectionProtocolType;
            this.IngressBytesTransferred = ingressBytesTransferred;
            this.EgressBytesTransferred = egressBytesTransferred;
            this.ConnectionBandwidth = connectionBandwidth;
            this.SharedKey = sharedKey;
            this.EnableBgp = enableBgp;
            this.UsePolicyBasedTrafficSelectors = usePolicyBasedTrafficSelectors;
            this.IpsecPolicies = ipsecPolicies;
            this.TrafficSelectorPolicies = trafficSelectorPolicies;
            this.EnableRateLimiting = enableRateLimiting;
            this.EnableInternetSecurity = enableInternetSecurity;
            this.UseLocalAzureIPAddress = useLocalAzureIPAddress;
            this.ProvisioningState = provisioningState;
            this.VpnLinkConnections = vpnLinkConnections;
            this.RoutingConfiguration = routingConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets id of the connected vpn site.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "remoteVpnSite")]
        public SubResource RemoteVpnSite {get; set; }

        /// <summary>
        /// Gets or sets routing weight for vpn connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingWeight")]
        public int? RoutingWeight {get; set; }

        /// <summary>
        /// Gets or sets dPD timeout in seconds for vpn connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dpdTimeoutSeconds")]
        public int? DpdTimeoutSeconds {get; set; }

        /// <summary>
        /// Gets the connection status. Possible values include: &#39;Unknown&#39;, &#39;Connecting&#39;, &#39;Connected&#39;, &#39;NotConnected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionStatus")]
        public string ConnectionStatus {get; private set; }

        /// <summary>
        /// Gets or sets connection protocol used for this connection. Possible values include: &#39;IKEv2&#39;, &#39;IKEv1&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vpnConnectionProtocolType")]
        public string VpnConnectionProtocolType {get; set; }

        /// <summary>
        /// Gets ingress bytes transferred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ingressBytesTransferred")]
        public long? IngressBytesTransferred {get; private set; }

        /// <summary>
        /// Gets egress bytes transferred.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "egressBytesTransferred")]
        public long? EgressBytesTransferred {get; private set; }

        /// <summary>
        /// Gets or sets expected bandwidth in MBPS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionBandwidth")]
        public int? ConnectionBandwidth {get; set; }

        /// <summary>
        /// Gets or sets sharedKey for the vpn connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sharedKey")]
        public string SharedKey {get; set; }

        /// <summary>
        /// Gets or sets enableBgp flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableBgp")]
        public bool? EnableBgp {get; set; }

        /// <summary>
        /// Gets or sets enable policy-based traffic selectors.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usePolicyBasedTrafficSelectors")]
        public bool? UsePolicyBasedTrafficSelectors {get; set; }

        /// <summary>
        /// Gets or sets the IPSec Policies to be considered by this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipsecPolicies")]
        public System.Collections.Generic.IList<IpsecPolicy> IpsecPolicies {get; set; }

        /// <summary>
        /// Gets or sets the Traffic Selector Policies to be considered by this
        /// connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "trafficSelectorPolicies")]
        public System.Collections.Generic.IList<TrafficSelectorPolicy> TrafficSelectorPolicies {get; set; }

        /// <summary>
        /// Gets or sets enableBgp flag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableRateLimiting")]
        public bool? EnableRateLimiting {get; set; }

        /// <summary>
        /// Gets or sets enable internet security.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableInternetSecurity")]
        public bool? EnableInternetSecurity {get; set; }

        /// <summary>
        /// Gets or sets use local azure ip to initiate connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useLocalAzureIpAddress")]
        public bool? UseLocalAzureIPAddress {get; set; }

        /// <summary>
        /// Gets the provisioning state of the VPN connection resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets list of all vpn site link connections to the gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vpnLinkConnections")]
        public System.Collections.Generic.IList<VpnSiteLinkConnection> VpnLinkConnections {get; set; }

        /// <summary>
        /// Gets or sets the Routing Configuration indicating the associated and
        /// propagated route tables on this connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "routingConfiguration")]
        public RoutingConfiguration RoutingConfiguration {get; set; }
    }
}