// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Information about an issue encountered in the process of checking for
    /// connectivity.
    /// </summary>
    public partial class ConnectivityIssue
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityIssue class.
        /// </summary>
        public ConnectivityIssue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityIssue class.
        /// </summary>

        /// <param name="origin">The origin of the issue.
        /// Possible values include: &#39;Local&#39;, &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="severity">The severity of the issue.
        /// Possible values include: &#39;Error&#39;, &#39;Warning&#39;</param>

        /// <param name="type">The type of issue.
        /// Possible values include: &#39;Unknown&#39;, &#39;AgentStopped&#39;, &#39;GuestFirewall&#39;,
        /// &#39;DnsResolution&#39;, &#39;SocketBind&#39;, &#39;NetworkSecurityRule&#39;, &#39;UserDefinedRoute&#39;,
        /// &#39;PortThrottled&#39;, &#39;Platform&#39;</param>

        /// <param name="context">Provides additional context on the issue.
        /// </param>
        public ConnectivityIssue(string origin = default(string), string severity = default(string), string type = default(string), System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, string>> context = default(System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, string>>))

        {
            this.Origin = origin;
            this.Severity = severity;
            this.Type = type;
            this.Context = context;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the origin of the issue. Possible values include: &#39;Local&#39;, &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "origin")]
        public string Origin {get; private set; }

        /// <summary>
        /// Gets the severity of the issue. Possible values include: &#39;Error&#39;, &#39;Warning&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "severity")]
        public string Severity {get; private set; }

        /// <summary>
        /// Gets the type of issue. Possible values include: &#39;Unknown&#39;, &#39;AgentStopped&#39;, &#39;GuestFirewall&#39;, &#39;DnsResolution&#39;, &#39;SocketBind&#39;, &#39;NetworkSecurityRule&#39;, &#39;UserDefinedRoute&#39;, &#39;PortThrottled&#39;, &#39;Platform&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets provides additional context on the issue.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "context")]
        public System.Collections.Generic.IList<System.Collections.Generic.IDictionary<string, string>> Context {get; private set; }
    }
}