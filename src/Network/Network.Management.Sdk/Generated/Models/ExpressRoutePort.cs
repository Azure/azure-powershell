// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// ExpressRoutePort resource definition.
    /// </summary>
    /// <remarks>
    /// ExpressRoutePort resource definition.
    /// </remarks>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ExpressRoutePort : Resource
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRoutePort class.
        /// </summary>
        public ExpressRoutePort()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRoutePort class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="identity">The identity of ExpressRoutePort, if configured.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route port resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="peeringLocation">The name of the peering location that the ExpressRoutePort is mapped to
        /// physically.
        /// </param>

        /// <param name="bandwidthInGbps">Bandwidth of procured ports in Gbps.
        /// </param>

        /// <param name="provisionedBandwidthInGbps">Aggregate Gbps of associated circuit bandwidths.
        /// </param>

        /// <param name="mtu">Maximum transmission unit of the physical port pair(s).
        /// </param>

        /// <param name="encapsulation">Encapsulation method on physical ports.
        /// Possible values include: &#39;Dot1Q&#39;, &#39;QinQ&#39;</param>

        /// <param name="etherType">Ether type of the physical port.
        /// </param>

        /// <param name="allocationDate">Date of the physical port allocation to be used in Letter of Authorization.
        /// </param>

        /// <param name="links">The set of physical links of the ExpressRoutePort resource.
        /// </param>

        /// <param name="circuits">Reference the ExpressRoute circuit(s) that are provisioned on this
        /// ExpressRoutePort resource.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the express route port resource.
        /// </param>

        /// <param name="billingType">The billing type of the ExpressRoutePort resource.
        /// Possible values include: &#39;MeteredData&#39;, &#39;UnlimitedData&#39;</param>
        public ExpressRoutePort(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), ManagedServiceIdentity identity = default(ManagedServiceIdentity), string provisioningState = default(string), string peeringLocation = default(string), int? bandwidthInGbps = default(int?), double? provisionedBandwidthInGbps = default(double?), string mtu = default(string), string encapsulation = default(string), string etherType = default(string), string allocationDate = default(string), System.Collections.Generic.IList<ExpressRouteLink> links = default(System.Collections.Generic.IList<ExpressRouteLink>), System.Collections.Generic.IList<SubResource> circuits = default(System.Collections.Generic.IList<SubResource>), string resourceGuid = default(string), string billingType = default(string))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.Identity = identity;
            this.ProvisioningState = provisioningState;
            this.PeeringLocation = peeringLocation;
            this.BandwidthInGbps = bandwidthInGbps;
            this.ProvisionedBandwidthInGbps = provisionedBandwidthInGbps;
            this.Mtu = mtu;
            this.Encapsulation = encapsulation;
            this.EtherType = etherType;
            this.AllocationDate = allocationDate;
            this.Links = links;
            this.Circuits = circuits;
            this.ResourceGuid = resourceGuid;
            this.BillingType = billingType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets the identity of ExpressRoutePort, if configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ManagedServiceIdentity Identity {get; set; }

        /// <summary>
        /// Gets the provisioning state of the express route port resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the name of the peering location that the ExpressRoutePort is
        /// mapped to physically.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peeringLocation")]
        public string PeeringLocation {get; set; }

        /// <summary>
        /// Gets or sets bandwidth of procured ports in Gbps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bandwidthInGbps")]
        public int? BandwidthInGbps {get; set; }

        /// <summary>
        /// Gets aggregate Gbps of associated circuit bandwidths.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisionedBandwidthInGbps")]
        public double? ProvisionedBandwidthInGbps {get; private set; }

        /// <summary>
        /// Gets maximum transmission unit of the physical port pair(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.mtu")]
        public string Mtu {get; private set; }

        /// <summary>
        /// Gets or sets encapsulation method on physical ports. Possible values include: &#39;Dot1Q&#39;, &#39;QinQ&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encapsulation")]
        public string Encapsulation {get; set; }

        /// <summary>
        /// Gets ether type of the physical port.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.etherType")]
        public string EtherType {get; private set; }

        /// <summary>
        /// Gets date of the physical port allocation to be used in Letter of
        /// Authorization.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allocationDate")]
        public string AllocationDate {get; private set; }

        /// <summary>
        /// Gets or sets the set of physical links of the ExpressRoutePort resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.links")]
        public System.Collections.Generic.IList<ExpressRouteLink> Links {get; set; }

        /// <summary>
        /// Gets reference the ExpressRoute circuit(s) that are provisioned on this
        /// ExpressRoutePort resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.circuits")]
        public System.Collections.Generic.IList<SubResource> Circuits {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the express route port resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets or sets the billing type of the ExpressRoutePort resource. Possible values include: &#39;MeteredData&#39;, &#39;UnlimitedData&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.billingType")]
        public string BillingType {get; set; }
    }
}