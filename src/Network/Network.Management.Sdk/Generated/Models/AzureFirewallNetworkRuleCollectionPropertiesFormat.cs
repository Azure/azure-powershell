// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of the network rule collection.
    /// </summary>
    public partial class AzureFirewallNetworkRuleCollectionPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the AzureFirewallNetworkRuleCollectionPropertiesFormat class.
        /// </summary>
        public AzureFirewallNetworkRuleCollectionPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureFirewallNetworkRuleCollectionPropertiesFormat class.
        /// </summary>

        /// <param name="priority">Priority of the network rule collection resource.
        /// </param>

        /// <param name="action">The action type of a rule collection.
        /// </param>

        /// <param name="rules">Collection of rules used by a network rule collection.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the network rule collection resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public AzureFirewallNetworkRuleCollectionPropertiesFormat(int? priority = default(int?), AzureFirewallRCAction action = default(AzureFirewallRCAction), System.Collections.Generic.IList<AzureFirewallNetworkRule> rules = default(System.Collections.Generic.IList<AzureFirewallNetworkRule>), string provisioningState = default(string))

        {
            this.Priority = priority;
            this.Action = action;
            this.Rules = rules;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets priority of the network rule collection resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int? Priority {get; set; }

        /// <summary>
        /// Gets or sets the action type of a rule collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "action")]
        public AzureFirewallRCAction Action {get; set; }

        /// <summary>
        /// Gets or sets collection of rules used by a network rule collection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rules")]
        public System.Collections.Generic.IList<AzureFirewallNetworkRule> Rules {get; set; }

        /// <summary>
        /// Gets the provisioning state of the network rule collection resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Priority != null)
            {
                if (this.Priority > 65000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Priority", 65000);
                }
                if (this.Priority < 100)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Priority", 100);
                }
            }



        }
    }
}