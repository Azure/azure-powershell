// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// VpnGateway Resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VpnGateway : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VpnGateway class.
        /// </summary>
        public VpnGateway()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VpnGateway class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="bgpSettings">Local network gateway&#39;s BGP speaker settings.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the VPN gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="virtualHub">The VirtualHub to which the gateway belongs.
        /// </param>

        /// <param name="connections">List of all vpn connections to the gateway.
        /// </param>

        /// <param name="vpnGatewayScaleUnit">The scale unit for this vpn gateway.
        /// </param>

        /// <param name="ipConfigurations">List of all IPs configured on the gateway.
        /// </param>

        /// <param name="enableBgpRouteTranslationForNat">Enable BGP routes translation for NAT on this VpnGateway.
        /// </param>

        /// <param name="isRoutingPreferenceInternet">Enable Routing Preference property for the Public IP Interface of the
        /// VpnGateway.
        /// </param>

        /// <param name="natRules">List of all the nat Rules associated with the gateway.
        /// </param>
        public VpnGateway(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), BgpSettings bgpSettings = default(BgpSettings), string provisioningState = default(string), SubResource virtualHub = default(SubResource), System.Collections.Generic.IList<VpnConnection> connections = default(System.Collections.Generic.IList<VpnConnection>), int? vpnGatewayScaleUnit = default(int?), System.Collections.Generic.IList<VpnGatewayIpConfiguration> ipConfigurations = default(System.Collections.Generic.IList<VpnGatewayIpConfiguration>), bool? enableBgpRouteTranslationForNat = default(bool?), bool? isRoutingPreferenceInternet = default(bool?), System.Collections.Generic.IList<VpnGatewayNatRule> natRules = default(System.Collections.Generic.IList<VpnGatewayNatRule>))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.BgpSettings = bgpSettings;
            this.ProvisioningState = provisioningState;
            this.VirtualHub = virtualHub;
            this.Connections = connections;
            this.VpnGatewayScaleUnit = vpnGatewayScaleUnit;
            this.IPConfigurations = ipConfigurations;
            this.EnableBgpRouteTranslationForNat = enableBgpRouteTranslationForNat;
            this.IsRoutingPreferenceInternet = isRoutingPreferenceInternet;
            this.NatRules = natRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets or sets local network gateway&#39;s BGP speaker settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.bgpSettings")]
        public BgpSettings BgpSettings {get; set; }

        /// <summary>
        /// Gets the provisioning state of the VPN gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the VirtualHub to which the gateway belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualHub")]
        public SubResource VirtualHub {get; set; }

        /// <summary>
        /// Gets or sets list of all vpn connections to the gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.connections")]
        public System.Collections.Generic.IList<VpnConnection> Connections {get; set; }

        /// <summary>
        /// Gets or sets the scale unit for this vpn gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vpnGatewayScaleUnit")]
        public int? VpnGatewayScaleUnit {get; set; }

        /// <summary>
        /// Gets list of all IPs configured on the gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ipConfigurations")]
        public System.Collections.Generic.IList<VpnGatewayIpConfiguration> IPConfigurations {get; private set; }

        /// <summary>
        /// Gets or sets enable BGP routes translation for NAT on this VpnGateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableBgpRouteTranslationForNat")]
        public bool? EnableBgpRouteTranslationForNat {get; set; }

        /// <summary>
        /// Gets or sets enable Routing Preference property for the Public IP Interface
        /// of the VpnGateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isRoutingPreferenceInternet")]
        public bool? IsRoutingPreferenceInternet {get; set; }

        /// <summary>
        /// Gets or sets list of all the nat Rules associated with the gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.natRules")]
        public System.Collections.Generic.IList<VpnGatewayNatRule> NatRules {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.BgpSettings != null)
            {
                this.BgpSettings.Validate();
            }





        }
    }
}