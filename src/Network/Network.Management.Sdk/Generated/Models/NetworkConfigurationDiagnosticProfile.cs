// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters to compare with network configuration.
    /// </summary>
    public partial class NetworkConfigurationDiagnosticProfile
    {
        /// <summary>
        /// Initializes a new instance of the NetworkConfigurationDiagnosticProfile class.
        /// </summary>
        public NetworkConfigurationDiagnosticProfile()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkConfigurationDiagnosticProfile class.
        /// </summary>

        /// <param name="direction">The direction of the traffic.
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>

        /// <param name="protocol">Protocol to be verified on. Accepted values are &#39;*&#39;, TCP, UDP.
        /// </param>

        /// <param name="source">Traffic source. Accepted values are &#39;*&#39;, IP Address/CIDR, Service Tag.
        /// </param>

        /// <param name="destination">Traffic destination. Accepted values are: &#39;*&#39;, IP Address/CIDR, Service
        /// Tag.
        /// </param>

        /// <param name="destinationPort">Traffic destination port. Accepted values are &#39;*&#39; and a single port in the
        /// range (0 - 65535).
        /// </param>
        public NetworkConfigurationDiagnosticProfile(string direction, string protocol, string source, string destination, string destinationPort)

        {
            this.Direction = direction;
            this.Protocol = protocol;
            this.Source = source;
            this.Destination = destination;
            this.DestinationPort = destinationPort;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the direction of the traffic. Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }

        /// <summary>
        /// Gets or sets protocol to be verified on. Accepted values are &#39;*&#39;, TCP, UDP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets traffic source. Accepted values are &#39;*&#39;, IP Address/CIDR,
        /// Service Tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public string Source {get; set; }

        /// <summary>
        /// Gets or sets traffic destination. Accepted values are: &#39;*&#39;, IP
        /// Address/CIDR, Service Tag.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destination")]
        public string Destination {get; set; }

        /// <summary>
        /// Gets or sets traffic destination port. Accepted values are &#39;*&#39; and a single
        /// port in the range (0 - 65535).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPort")]
        public string DestinationPort {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Direction == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Direction");
            }
            if (this.Protocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocol");
            }
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Destination == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Destination");
            }
            if (this.DestinationPort == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationPort");
            }





        }
    }
}