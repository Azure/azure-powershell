// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// IP traffic information.
    /// </summary>
    public partial class IPTraffic
    {
        /// <summary>
        /// Initializes a new instance of the IPTraffic class.
        /// </summary>
        public IPTraffic()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IPTraffic class.
        /// </summary>

        /// <param name="sourceIps">List of source IP addresses of the traffic..
        /// </param>

        /// <param name="destinationIps">List of destination IP addresses of the traffic..
        /// </param>

        /// <param name="sourcePorts">The source ports of the traffic.
        /// </param>

        /// <param name="destinationPorts">The destination ports of the traffic.
        /// </param>

        /// <param name="protocols">
        /// </param>
        public IPTraffic(System.Collections.Generic.IList<string> sourceIps, System.Collections.Generic.IList<string> destinationIps, System.Collections.Generic.IList<string> sourcePorts, System.Collections.Generic.IList<string> destinationPorts, System.Collections.Generic.IList<string> protocols)

        {
            this.SourceIps = sourceIps;
            this.DestinationIps = destinationIps;
            this.SourcePorts = sourcePorts;
            this.DestinationPorts = destinationPorts;
            this.Protocols = protocols;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of source IP addresses of the traffic..
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceIps")]
        public System.Collections.Generic.IList<string> SourceIps {get; set; }

        /// <summary>
        /// Gets or sets list of destination IP addresses of the traffic..
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationIps")]
        public System.Collections.Generic.IList<string> DestinationIps {get; set; }

        /// <summary>
        /// Gets or sets the source ports of the traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePorts")]
        public System.Collections.Generic.IList<string> SourcePorts {get; set; }

        /// <summary>
        /// Gets or sets the destination ports of the traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPorts")]
        public System.Collections.Generic.IList<string> DestinationPorts {get; set; }

        /// <summary>
        /// Gets or sets
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocols")]
        public System.Collections.Generic.IList<string> Protocols {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceIps == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceIps");
            }
            if (this.DestinationIps == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationIps");
            }
            if (this.SourcePorts == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourcePorts");
            }
            if (this.DestinationPorts == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationPorts");
            }
            if (this.Protocols == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Protocols");
            }





        }
    }
}