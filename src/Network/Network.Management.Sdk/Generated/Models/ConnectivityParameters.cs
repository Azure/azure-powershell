// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Parameters that determine how the connectivity check will be performed.
    /// </summary>
    public partial class ConnectivityParameters
    {
        /// <summary>
        /// Initializes a new instance of the ConnectivityParameters class.
        /// </summary>
        public ConnectivityParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ConnectivityParameters class.
        /// </summary>

        /// <param name="source">The source of the connection.
        /// </param>

        /// <param name="destination">The destination of connection.
        /// </param>

        /// <param name="protocol">Network protocol.
        /// Possible values include: &#39;Tcp&#39;, &#39;Http&#39;, &#39;Https&#39;, &#39;Icmp&#39;</param>

        /// <param name="protocolConfiguration">Configuration of the protocol.
        /// </param>

        /// <param name="preferredIPVersion">Preferred IP version of the connection.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>
        public ConnectivityParameters(ConnectivitySource source, ConnectivityDestination destination, string protocol = default(string), ProtocolConfiguration protocolConfiguration = default(ProtocolConfiguration), string preferredIPVersion = default(string))

        {
            this.Source = source;
            this.Destination = destination;
            this.Protocol = protocol;
            this.ProtocolConfiguration = protocolConfiguration;
            this.PreferredIPVersion = preferredIPVersion;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the source of the connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public ConnectivitySource Source {get; set; }

        /// <summary>
        /// Gets or sets the destination of connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destination")]
        public ConnectivityDestination Destination {get; set; }

        /// <summary>
        /// Gets or sets network protocol. Possible values include: &#39;Tcp&#39;, &#39;Http&#39;, &#39;Https&#39;, &#39;Icmp&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets configuration of the protocol.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocolConfiguration")]
        public ProtocolConfiguration ProtocolConfiguration {get; set; }

        /// <summary>
        /// Gets or sets preferred IP version of the connection. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferredIPVersion")]
        public string PreferredIPVersion {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.Destination == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Destination");
            }
            if (this.Source != null)
            {
                this.Source.Validate();
            }
            if (this.Destination != null)
            {
                this.Destination.Validate();
            }



        }
    }
}