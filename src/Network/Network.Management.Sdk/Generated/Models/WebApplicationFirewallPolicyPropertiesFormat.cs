// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Defines web application firewall policy properties.
    /// </summary>
    public partial class WebApplicationFirewallPolicyPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the WebApplicationFirewallPolicyPropertiesFormat class.
        /// </summary>
        public WebApplicationFirewallPolicyPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the WebApplicationFirewallPolicyPropertiesFormat class.
        /// </summary>

        /// <param name="policySettings">The PolicySettings for policy.
        /// </param>

        /// <param name="customRules">The custom rules inside the policy.
        /// </param>

        /// <param name="applicationGateways">A collection of references to application gateways.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the web application firewall policy resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="resourceState">Resource status of the policy.
        /// Possible values include: &#39;Creating&#39;, &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;,
        /// &#39;Disabled&#39;, &#39;Deleting&#39;</param>

        /// <param name="managedRules">Describes the managedRules structure.
        /// </param>

        /// <param name="httpListeners">A collection of references to application gateway http listeners.
        /// </param>

        /// <param name="pathBasedRules">A collection of references to application gateway path rules.
        /// </param>
        public WebApplicationFirewallPolicyPropertiesFormat(ManagedRulesDefinition managedRules, PolicySettings policySettings = default(PolicySettings), System.Collections.Generic.IList<WebApplicationFirewallCustomRule> customRules = default(System.Collections.Generic.IList<WebApplicationFirewallCustomRule>), System.Collections.Generic.IList<ApplicationGateway> applicationGateways = default(System.Collections.Generic.IList<ApplicationGateway>), string provisioningState = default(string), string resourceState = default(string), System.Collections.Generic.IList<SubResource> httpListeners = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> pathBasedRules = default(System.Collections.Generic.IList<SubResource>))

        {
            this.PolicySettings = policySettings;
            this.CustomRules = customRules;
            this.ApplicationGateways = applicationGateways;
            this.ProvisioningState = provisioningState;
            this.ResourceState = resourceState;
            this.ManagedRules = managedRules;
            this.HttpListeners = httpListeners;
            this.PathBasedRules = pathBasedRules;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the PolicySettings for policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "policySettings")]
        public PolicySettings PolicySettings {get; set; }

        /// <summary>
        /// Gets or sets the custom rules inside the policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customRules")]
        public System.Collections.Generic.IList<WebApplicationFirewallCustomRule> CustomRules {get; set; }

        /// <summary>
        /// Gets a collection of references to application gateways.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationGateways")]
        public System.Collections.Generic.IList<ApplicationGateway> ApplicationGateways {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the web application firewall policy
        /// resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets resource status of the policy. Possible values include: &#39;Creating&#39;, &#39;Enabling&#39;, &#39;Enabled&#39;, &#39;Disabling&#39;, &#39;Disabled&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resourceState")]
        public string ResourceState {get; private set; }

        /// <summary>
        /// Gets or sets describes the managedRules structure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedRules")]
        public ManagedRulesDefinition ManagedRules {get; set; }

        /// <summary>
        /// Gets a collection of references to application gateway http listeners.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpListeners")]
        public System.Collections.Generic.IList<SubResource> HttpListeners {get; private set; }

        /// <summary>
        /// Gets a collection of references to application gateway path rules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pathBasedRules")]
        public System.Collections.Generic.IList<SubResource> PathBasedRules {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ManagedRules == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ManagedRules");
            }
            if (this.PolicySettings != null)
            {
                this.PolicySettings.Validate();
            }
            if (this.CustomRules != null)
            {
                foreach (var element in this.CustomRules)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ApplicationGateways != null)
            {
                foreach (var element in this.ApplicationGateways)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.ManagedRules != null)
            {
                this.ManagedRules.Validate();
            }


        }
    }
}