// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of HTTP listener of an application gateway.
    /// </summary>
    public partial class ApplicationGatewayHttpListenerPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayHttpListenerPropertiesFormat class.
        /// </summary>
        public ApplicationGatewayHttpListenerPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayHttpListenerPropertiesFormat class.
        /// </summary>

        /// <param name="frontendIPConfiguration">Frontend IP configuration resource of an application gateway.
        /// </param>

        /// <param name="frontendPort">Frontend port resource of an application gateway.
        /// </param>

        /// <param name="protocol">Protocol of the HTTP listener.
        /// Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;</param>

        /// <param name="hostName">Host name of HTTP listener.
        /// </param>

        /// <param name="sslCertificate">SSL certificate resource of an application gateway.
        /// </param>

        /// <param name="sslProfile">SSL profile resource of the application gateway.
        /// </param>

        /// <param name="requireServerNameIndication">Applicable only if protocol is https. Enables SNI for multi-hosting.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the HTTP listener resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="customErrorConfigurations">Custom error configurations of the HTTP listener.
        /// </param>

        /// <param name="firewallPolicy">Reference to the FirewallPolicy resource.
        /// </param>

        /// <param name="hostNames">List of Host names for HTTP Listener that allows special wildcard
        /// characters as well.
        /// </param>
        public ApplicationGatewayHttpListenerPropertiesFormat(SubResource frontendIPConfiguration = default(SubResource), SubResource frontendPort = default(SubResource), string protocol = default(string), string hostName = default(string), SubResource sslCertificate = default(SubResource), SubResource sslProfile = default(SubResource), bool? requireServerNameIndication = default(bool?), string provisioningState = default(string), System.Collections.Generic.IList<ApplicationGatewayCustomError> customErrorConfigurations = default(System.Collections.Generic.IList<ApplicationGatewayCustomError>), SubResource firewallPolicy = default(SubResource), System.Collections.Generic.IList<string> hostNames = default(System.Collections.Generic.IList<string>))

        {
            this.FrontendIPConfiguration = frontendIPConfiguration;
            this.FrontendPort = frontendPort;
            this.Protocol = protocol;
            this.HostName = hostName;
            this.SslCertificate = sslCertificate;
            this.SslProfile = sslProfile;
            this.RequireServerNameIndication = requireServerNameIndication;
            this.ProvisioningState = provisioningState;
            this.CustomErrorConfigurations = customErrorConfigurations;
            this.FirewallPolicy = firewallPolicy;
            this.HostNames = hostNames;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets frontend IP configuration resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendIPConfiguration")]
        public SubResource FrontendIPConfiguration {get; set; }

        /// <summary>
        /// Gets or sets frontend port resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "frontendPort")]
        public SubResource FrontendPort {get; set; }

        /// <summary>
        /// Gets or sets protocol of the HTTP listener. Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets host name of HTTP listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostName")]
        public string HostName {get; set; }

        /// <summary>
        /// Gets or sets sSL certificate resource of an application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslCertificate")]
        public SubResource SslCertificate {get; set; }

        /// <summary>
        /// Gets or sets sSL profile resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslProfile")]
        public SubResource SslProfile {get; set; }

        /// <summary>
        /// Gets or sets applicable only if protocol is https. Enables SNI for
        /// multi-hosting.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requireServerNameIndication")]
        public bool? RequireServerNameIndication {get; set; }

        /// <summary>
        /// Gets the provisioning state of the HTTP listener resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets custom error configurations of the HTTP listener.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "customErrorConfigurations")]
        public System.Collections.Generic.IList<ApplicationGatewayCustomError> CustomErrorConfigurations {get; set; }

        /// <summary>
        /// Gets or sets reference to the FirewallPolicy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firewallPolicy")]
        public SubResource FirewallPolicy {get; set; }

        /// <summary>
        /// Gets or sets list of Host names for HTTP Listener that allows special
        /// wildcard characters as well.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostNames")]
        public System.Collections.Generic.IList<string> HostNames {get; set; }
    }
}