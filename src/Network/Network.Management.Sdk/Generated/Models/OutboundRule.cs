// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Outbound rule of the load balancer.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class OutboundRule : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the OutboundRule class.
        /// </summary>
        public OutboundRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OutboundRule class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within the set of outbound rules
        /// used by the load balancer. This name can be used to access the resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the outbound rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="allocatedOutboundPorts">The number of outbound ports to be used for NAT.
        /// </param>

        /// <param name="frontendIPConfigurations">The Frontend IP addresses of the load balancer.
        /// </param>

        /// <param name="backendAddressPool">A reference to a pool of DIPs. Outbound traffic is randomly load balanced
        /// across IPs in the backend IPs.
        /// </param>

        /// <param name="protocol">The protocol for the outbound rule in load balancer.
        /// Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;All&#39;</param>

        /// <param name="enableTcpReset">Receive bidirectional TCP Reset on TCP flow idle timeout or unexpected
        /// connection termination. This element is only used when the protocol is set
        /// to TCP.
        /// </param>

        /// <param name="idleTimeoutInMinutes">The timeout for the TCP idle connection.
        /// </param>
        public OutboundRule(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), int? allocatedOutboundPorts = default(int?), System.Collections.Generic.IList<SubResource> frontendIPConfigurations = default(System.Collections.Generic.IList<SubResource>), SubResource backendAddressPool = default(SubResource), string protocol = default(string), bool? enableTcpReset = default(bool?), int? idleTimeoutInMinutes = default(int?))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.AllocatedOutboundPorts = allocatedOutboundPorts;
            this.FrontendIPConfigurations = frontendIPConfigurations;
            this.BackendAddressPool = backendAddressPool;
            this.Protocol = protocol;
            this.EnableTcpReset = enableTcpReset;
            this.IdleTimeoutInMinutes = idleTimeoutInMinutes;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within the set of
        /// outbound rules used by the load balancer. This name can be used to access
        /// the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the outbound rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the number of outbound ports to be used for NAT.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.allocatedOutboundPorts")]
        public int? AllocatedOutboundPorts {get; set; }

        /// <summary>
        /// Gets or sets the Frontend IP addresses of the load balancer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.frontendIPConfigurations")]
        public System.Collections.Generic.IList<SubResource> FrontendIPConfigurations {get; set; }

        /// <summary>
        /// Gets or sets a reference to a pool of DIPs. Outbound traffic is randomly
        /// load balanced across IPs in the backend IPs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }

        /// <summary>
        /// Gets or sets the protocol for the outbound rule in load balancer. Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets receive bidirectional TCP Reset on TCP flow idle timeout or
        /// unexpected connection termination. This element is only used when the
        /// protocol is set to TCP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.enableTcpReset")]
        public bool? EnableTcpReset {get; set; }

        /// <summary>
        /// Gets or sets the timeout for the TCP idle connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.idleTimeoutInMinutes")]
        public int? IdleTimeoutInMinutes {get; set; }
    }
}