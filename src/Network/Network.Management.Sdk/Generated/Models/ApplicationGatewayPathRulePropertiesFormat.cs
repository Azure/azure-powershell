// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of path rule of an application gateway.
    /// </summary>
    public partial class ApplicationGatewayPathRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayPathRulePropertiesFormat class.
        /// </summary>
        public ApplicationGatewayPathRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayPathRulePropertiesFormat class.
        /// </summary>

        /// <param name="paths">Path rules of URL path map.
        /// </param>

        /// <param name="backendAddressPool">Backend address pool resource of URL path map path rule.
        /// </param>

        /// <param name="backendHttpSettings">Backend http settings resource of URL path map path rule.
        /// </param>

        /// <param name="redirectConfiguration">Redirect configuration resource of URL path map path rule.
        /// </param>

        /// <param name="rewriteRuleSet">Rewrite rule set resource of URL path map path rule.
        /// </param>

        /// <param name="loadDistributionPolicy">Load Distribution Policy resource of URL path map path rule.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the path rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="firewallPolicy">Reference to the FirewallPolicy resource.
        /// </param>
        public ApplicationGatewayPathRulePropertiesFormat(System.Collections.Generic.IList<string> paths = default(System.Collections.Generic.IList<string>), SubResource backendAddressPool = default(SubResource), SubResource backendHttpSettings = default(SubResource), SubResource redirectConfiguration = default(SubResource), SubResource rewriteRuleSet = default(SubResource), SubResource loadDistributionPolicy = default(SubResource), string provisioningState = default(string), SubResource firewallPolicy = default(SubResource))

        {
            this.Paths = paths;
            this.BackendAddressPool = backendAddressPool;
            this.BackendHttpSettings = backendHttpSettings;
            this.RedirectConfiguration = redirectConfiguration;
            this.RewriteRuleSet = rewriteRuleSet;
            this.LoadDistributionPolicy = loadDistributionPolicy;
            this.ProvisioningState = provisioningState;
            this.FirewallPolicy = firewallPolicy;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets path rules of URL path map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "paths")]
        public System.Collections.Generic.IList<string> Paths {get; set; }

        /// <summary>
        /// Gets or sets backend address pool resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }

        /// <summary>
        /// Gets or sets backend http settings resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendHttpSettings")]
        public SubResource BackendHttpSettings {get; set; }

        /// <summary>
        /// Gets or sets redirect configuration resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "redirectConfiguration")]
        public SubResource RedirectConfiguration {get; set; }

        /// <summary>
        /// Gets or sets rewrite rule set resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rewriteRuleSet")]
        public SubResource RewriteRuleSet {get; set; }

        /// <summary>
        /// Gets or sets load Distribution Policy resource of URL path map path rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadDistributionPolicy")]
        public SubResource LoadDistributionPolicy {get; set; }

        /// <summary>
        /// Gets the provisioning state of the path rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets reference to the FirewallPolicy resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "firewallPolicy")]
        public SubResource FirewallPolicy {get; set; }
    }
}