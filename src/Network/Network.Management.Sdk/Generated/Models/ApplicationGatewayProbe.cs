// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Probe of the application gateway.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ApplicationGatewayProbe : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayProbe class.
        /// </summary>
        public ApplicationGatewayProbe()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayProbe class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Name of the probe that is unique within an Application Gateway.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the probe resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="protocol">The protocol used for the probe.
        /// Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;</param>

        /// <param name="host">Host name to send the probe to.
        /// </param>

        /// <param name="path">Relative path of probe. Valid path starts from &#39;/&#39;. Probe is sent to
        /// &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
        /// </param>

        /// <param name="interval">The probing interval in seconds. This is the time interval between two
        /// consecutive probes. Acceptable values are from 1 second to 86400 seconds.
        /// </param>

        /// <param name="timeout">The probe timeout in seconds. Probe marked as failed if valid response is
        /// not received with this timeout period. Acceptable values are from 1 second
        /// to 86400 seconds.
        /// </param>

        /// <param name="unhealthyThreshold">The probe retry count. Backend server is marked down after consecutive
        /// probe failure count reaches UnhealthyThreshold. Acceptable values are from
        /// 1 second to 20.
        /// </param>

        /// <param name="pickHostNameFromBackendHttpSettings">Whether the host header should be picked from the backend http settings.
        /// Default value is false.
        /// </param>

        /// <param name="pickHostNameFromBackendSettings">Whether the server name indication should be picked from the backend
        /// settings for Tls protocol. Default value is false.
        /// </param>

        /// <param name="minServers">Minimum number of servers that are always marked healthy. Default value is
        /// 0.
        /// </param>

        /// <param name="match">Criterion for classifying a healthy probe response.
        /// </param>

        /// <param name="port">Custom port which will be used for probing the backend servers. The valid
        /// value ranges from 1 to 65535. In case not set, port from http settings will
        /// be used. This property is valid for Basic, Standard_v2 and WAF_v2 only.
        /// </param>
        public ApplicationGatewayProbe(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), string protocol = default(string), string host = default(string), string path = default(string), int? interval = default(int?), int? timeout = default(int?), int? unhealthyThreshold = default(int?), bool? pickHostNameFromBackendHttpSettings = default(bool?), bool? pickHostNameFromBackendSettings = default(bool?), int? minServers = default(int?), ApplicationGatewayProbeHealthResponseMatch match = default(ApplicationGatewayProbeHealthResponseMatch), int? port = default(int?))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.Protocol = protocol;
            this.Host = host;
            this.Path = path;
            this.Interval = interval;
            this.Timeout = timeout;
            this.UnhealthyThreshold = unhealthyThreshold;
            this.PickHostNameFromBackendHttpSettings = pickHostNameFromBackendHttpSettings;
            this.PickHostNameFromBackendSettings = pickHostNameFromBackendSettings;
            this.MinServers = minServers;
            this.Match = match;
            this.Port = port;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the probe that is unique within an Application
        /// Gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the probe resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the protocol used for the probe. Possible values include: &#39;Http&#39;, &#39;Https&#39;, &#39;Tcp&#39;, &#39;Tls&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets host name to send the probe to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.host")]
        public string Host {get; set; }

        /// <summary>
        /// Gets or sets relative path of probe. Valid path starts from &#39;/&#39;. Probe is
        /// sent to &lt;Protocol&gt;://&lt;host&gt;:&lt;port&gt;&lt;path&gt;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets the probing interval in seconds. This is the time interval
        /// between two consecutive probes. Acceptable values are from 1 second to
        /// 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.interval")]
        public int? Interval {get; set; }

        /// <summary>
        /// Gets or sets the probe timeout in seconds. Probe marked as failed if valid
        /// response is not received with this timeout period. Acceptable values are
        /// from 1 second to 86400 seconds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.timeout")]
        public int? Timeout {get; set; }

        /// <summary>
        /// Gets or sets the probe retry count. Backend server is marked down after
        /// consecutive probe failure count reaches UnhealthyThreshold. Acceptable
        /// values are from 1 second to 20.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.unhealthyThreshold")]
        public int? UnhealthyThreshold {get; set; }

        /// <summary>
        /// Gets or sets whether the host header should be picked from the backend http
        /// settings. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.pickHostNameFromBackendHttpSettings")]
        public bool? PickHostNameFromBackendHttpSettings {get; set; }

        /// <summary>
        /// Gets or sets whether the server name indication should be picked from the
        /// backend settings for Tls protocol. Default value is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.pickHostNameFromBackendSettings")]
        public bool? PickHostNameFromBackendSettings {get; set; }

        /// <summary>
        /// Gets or sets minimum number of servers that are always marked healthy.
        /// Default value is 0.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minServers")]
        public int? MinServers {get; set; }

        /// <summary>
        /// Gets or sets criterion for classifying a healthy probe response.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.match")]
        public ApplicationGatewayProbeHealthResponseMatch Match {get; set; }

        /// <summary>
        /// Gets or sets custom port which will be used for probing the backend
        /// servers. The valid value ranges from 1 to 65535. In case not set, port from
        /// http settings will be used. This property is valid for Basic, Standard_v2
        /// and WAF_v2 only.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.port")]
        public int? Port {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {








            if (this.Port != null)
            {
                if (this.Port > 65535)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Port", 65535);
                }
                if (this.Port < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Port", 1);
                }
            }
        }
    }
}