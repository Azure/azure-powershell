// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of request routing rule of the application gateway.
    /// </summary>
    public partial class ApplicationGatewayRequestRoutingRulePropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayRequestRoutingRulePropertiesFormat class.
        /// </summary>
        public ApplicationGatewayRequestRoutingRulePropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApplicationGatewayRequestRoutingRulePropertiesFormat class.
        /// </summary>

        /// <param name="ruleType">Rule type.
        /// Possible values include: &#39;Basic&#39;, &#39;PathBasedRouting&#39;</param>

        /// <param name="priority">Priority of the request routing rule.
        /// </param>

        /// <param name="backendAddressPool">Backend address pool resource of the application gateway.
        /// </param>

        /// <param name="backendHttpSettings">Backend http settings resource of the application gateway.
        /// </param>

        /// <param name="httpListener">Http listener resource of the application gateway.
        /// </param>

        /// <param name="urlPathMap">URL path map resource of the application gateway.
        /// </param>

        /// <param name="rewriteRuleSet">Rewrite Rule Set resource in Basic rule of the application gateway.
        /// </param>

        /// <param name="redirectConfiguration">Redirect configuration resource of the application gateway.
        /// </param>

        /// <param name="loadDistributionPolicy">Load Distribution Policy resource of the application gateway.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the request routing rule resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>
        public ApplicationGatewayRequestRoutingRulePropertiesFormat(string ruleType = default(string), int? priority = default(int?), SubResource backendAddressPool = default(SubResource), SubResource backendHttpSettings = default(SubResource), SubResource httpListener = default(SubResource), SubResource urlPathMap = default(SubResource), SubResource rewriteRuleSet = default(SubResource), SubResource redirectConfiguration = default(SubResource), SubResource loadDistributionPolicy = default(SubResource), string provisioningState = default(string))

        {
            this.RuleType = ruleType;
            this.Priority = priority;
            this.BackendAddressPool = backendAddressPool;
            this.BackendHttpSettings = backendHttpSettings;
            this.HttpListener = httpListener;
            this.UrlPathMap = urlPathMap;
            this.RewriteRuleSet = rewriteRuleSet;
            this.RedirectConfiguration = redirectConfiguration;
            this.LoadDistributionPolicy = loadDistributionPolicy;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets rule type. Possible values include: &#39;Basic&#39;, &#39;PathBasedRouting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ruleType")]
        public string RuleType {get; set; }

        /// <summary>
        /// Gets or sets priority of the request routing rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int? Priority {get; set; }

        /// <summary>
        /// Gets or sets backend address pool resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendAddressPool")]
        public SubResource BackendAddressPool {get; set; }

        /// <summary>
        /// Gets or sets backend http settings resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backendHttpSettings")]
        public SubResource BackendHttpSettings {get; set; }

        /// <summary>
        /// Gets or sets http listener resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "httpListener")]
        public SubResource HttpListener {get; set; }

        /// <summary>
        /// Gets or sets uRL path map resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "urlPathMap")]
        public SubResource UrlPathMap {get; set; }

        /// <summary>
        /// Gets or sets rewrite Rule Set resource in Basic rule of the application
        /// gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rewriteRuleSet")]
        public SubResource RewriteRuleSet {get; set; }

        /// <summary>
        /// Gets or sets redirect configuration resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "redirectConfiguration")]
        public SubResource RedirectConfiguration {get; set; }

        /// <summary>
        /// Gets or sets load Distribution Policy resource of the application gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadDistributionPolicy")]
        public SubResource LoadDistributionPolicy {get; set; }

        /// <summary>
        /// Gets the provisioning state of the request routing rule resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.Priority != null)
            {
                if (this.Priority > 20000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "Priority", 20000);
                }
                if (this.Priority < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "Priority", 1);
                }
            }








        }
    }
}