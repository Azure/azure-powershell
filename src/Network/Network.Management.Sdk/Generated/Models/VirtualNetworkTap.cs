// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Virtual Network Tap resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualNetworkTap : Resource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkTap class.
        /// </summary>
        public VirtualNetworkTap()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNetworkTap class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the virtual network tap resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="networkInterfaceTapConfigurations">Specifies the list of resource IDs for the network interface IP
        /// configuration that needs to be tapped.
        /// </param>

        /// <param name="resourceGuid">The resource GUID property of the virtual network tap resource.
        /// </param>

        /// <param name="destinationNetworkInterfaceIPConfiguration">The reference to the private IP Address of the collector nic that will
        /// receive the tap.
        /// </param>

        /// <param name="destinationLoadBalancerFrontEndIPConfiguration">The reference to the private IP address on the internal Load Balancer that
        /// will receive the tap.
        /// </param>

        /// <param name="destinationPort">The VXLAN destination port that will receive the tapped traffic.
        /// </param>
        public VirtualNetworkTap(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string etag = default(string), string provisioningState = default(string), System.Collections.Generic.IList<NetworkInterfaceTapConfiguration> networkInterfaceTapConfigurations = default(System.Collections.Generic.IList<NetworkInterfaceTapConfiguration>), string resourceGuid = default(string), NetworkInterfaceIPConfiguration destinationNetworkInterfaceIPConfiguration = default(NetworkInterfaceIPConfiguration), FrontendIPConfiguration destinationLoadBalancerFrontEndIPConfiguration = default(FrontendIPConfiguration), int? destinationPort = default(int?))

        : base(id, name, type, location, tags)
        {
            this.Etag = etag;
            this.ProvisioningState = provisioningState;
            this.NetworkInterfaceTapConfigurations = networkInterfaceTapConfigurations;
            this.ResourceGuid = resourceGuid;
            this.DestinationNetworkInterfaceIPConfiguration = destinationNetworkInterfaceIPConfiguration;
            this.DestinationLoadBalancerFrontEndIPConfiguration = destinationLoadBalancerFrontEndIPConfiguration;
            this.DestinationPort = destinationPort;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the virtual network tap resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets specifies the list of resource IDs for the network interface IP
        /// configuration that needs to be tapped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkInterfaceTapConfigurations")]
        public System.Collections.Generic.IList<NetworkInterfaceTapConfiguration> NetworkInterfaceTapConfigurations {get; private set; }

        /// <summary>
        /// Gets the resource GUID property of the virtual network tap resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.resourceGuid")]
        public string ResourceGuid {get; private set; }

        /// <summary>
        /// Gets or sets the reference to the private IP Address of the collector nic
        /// that will receive the tap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinationNetworkInterfaceIPConfiguration")]
        public NetworkInterfaceIPConfiguration DestinationNetworkInterfaceIPConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the reference to the private IP address on the internal Load
        /// Balancer that will receive the tap.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinationLoadBalancerFrontEndIPConfiguration")]
        public FrontendIPConfiguration DestinationLoadBalancerFrontEndIPConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the VXLAN destination port that will receive the tapped
        /// traffic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.destinationPort")]
        public int? DestinationPort {get; set; }
    }
}