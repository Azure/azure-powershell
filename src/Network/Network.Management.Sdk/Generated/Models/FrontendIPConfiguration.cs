// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Frontend IP address of the load balancer.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FrontendIPConfiguration : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the FrontendIPConfiguration class.
        /// </summary>
        public FrontendIPConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FrontendIPConfiguration class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">The name of the resource that is unique within the set of frontend IP
        /// configurations used by the load balancer. This name can be used to access
        /// the resource.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Type of the resource.
        /// </param>

        /// <param name="zones">A list of availability zones denoting the IP allocated for the resource
        /// needs to come from.
        /// </param>

        /// <param name="subnet">The reference to the subnet resource.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the frontend IP configuration resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="inboundNatRules">An array of references to inbound rules that use this frontend IP.
        /// </param>

        /// <param name="inboundNatPools">An array of references to inbound pools that use this frontend IP.
        /// </param>

        /// <param name="outboundRules">An array of references to outbound rules that use this frontend IP.
        /// </param>

        /// <param name="loadBalancingRules">An array of references to load balancing rules that use this frontend IP.
        /// </param>

        /// <param name="privateIPAddress">The private IP address of the IP configuration.
        /// </param>

        /// <param name="privateIPAllocationMethod">The Private IP allocation method.
        /// Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;</param>

        /// <param name="privateIPAddressVersion">Whether the specific ipconfiguration is IPv4 or IPv6. Default is taken as
        /// IPv4.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>

        /// <param name="publicIPAddress">The reference to the Public IP resource.
        /// </param>

        /// <param name="publicIPPrefix">The reference to the Public IP Prefix resource.
        /// </param>

        /// <param name="gatewayLoadBalancer">The reference to gateway load balancer frontend IP.
        /// </param>
        public FrontendIPConfiguration(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), System.Collections.Generic.IList<string> zones = default(System.Collections.Generic.IList<string>), Subnet subnet = default(Subnet), string provisioningState = default(string), System.Collections.Generic.IList<SubResource> inboundNatRules = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> inboundNatPools = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> outboundRules = default(System.Collections.Generic.IList<SubResource>), System.Collections.Generic.IList<SubResource> loadBalancingRules = default(System.Collections.Generic.IList<SubResource>), string privateIPAddress = default(string), string privateIPAllocationMethod = default(string), string privateIPAddressVersion = default(string), PublicIPAddress publicIPAddress = default(PublicIPAddress), SubResource publicIPPrefix = default(SubResource), SubResource gatewayLoadBalancer = default(SubResource))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.Zones = zones;
            this.Subnet = subnet;
            this.ProvisioningState = provisioningState;
            this.InboundNatRules = inboundNatRules;
            this.InboundNatPools = inboundNatPools;
            this.OutboundRules = outboundRules;
            this.LoadBalancingRules = loadBalancingRules;
            this.PrivateIPAddress = privateIPAddress;
            this.PrivateIPAllocationMethod = privateIPAllocationMethod;
            this.PrivateIPAddressVersion = privateIPAddressVersion;
            this.PublicIPAddress = publicIPAddress;
            this.PublicIPPrefix = publicIPPrefix;
            this.GatewayLoadBalancer = gatewayLoadBalancer;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the resource that is unique within the set of
        /// frontend IP configurations used by the load balancer. This name can be used
        /// to access the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets type of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets or sets a list of availability zones denoting the IP allocated for the
        /// resource needs to come from.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zones")]
        public System.Collections.Generic.IList<string> Zones {get; set; }

        /// <summary>
        /// Gets or sets the reference to the subnet resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnet")]
        public Subnet Subnet {get; set; }

        /// <summary>
        /// Gets the provisioning state of the frontend IP configuration resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets an array of references to inbound rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatRules")]
        public System.Collections.Generic.IList<SubResource> InboundNatRules {get; private set; }

        /// <summary>
        /// Gets an array of references to inbound pools that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.inboundNatPools")]
        public System.Collections.Generic.IList<SubResource> InboundNatPools {get; private set; }

        /// <summary>
        /// Gets an array of references to outbound rules that use this frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.outboundRules")]
        public System.Collections.Generic.IList<SubResource> OutboundRules {get; private set; }

        /// <summary>
        /// Gets an array of references to load balancing rules that use this frontend
        /// IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.loadBalancingRules")]
        public System.Collections.Generic.IList<SubResource> LoadBalancingRules {get; private set; }

        /// <summary>
        /// Gets or sets the private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAddress")]
        public string PrivateIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the Private IP allocation method. Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAllocationMethod")]
        public string PrivateIPAllocationMethod {get; set; }

        /// <summary>
        /// Gets or sets whether the specific ipconfiguration is IPv4 or IPv6. Default
        /// is taken as IPv4. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateIPAddressVersion")]
        public string PrivateIPAddressVersion {get; set; }

        /// <summary>
        /// Gets or sets the reference to the Public IP resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPAddress")]
        public PublicIPAddress PublicIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the reference to the Public IP Prefix resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicIPPrefix")]
        public SubResource PublicIPPrefix {get; set; }

        /// <summary>
        /// Gets or sets the reference to gateway load balancer frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.gatewayLoadBalancer")]
        public SubResource GatewayLoadBalancer {get; set; }
    }
}