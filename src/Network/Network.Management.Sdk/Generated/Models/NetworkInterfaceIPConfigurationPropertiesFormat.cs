// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of IP configuration.
    /// </summary>
    public partial class NetworkInterfaceIPConfigurationPropertiesFormat
    {
        /// <summary>
        /// Initializes a new instance of the NetworkInterfaceIPConfigurationPropertiesFormat class.
        /// </summary>
        public NetworkInterfaceIPConfigurationPropertiesFormat()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkInterfaceIPConfigurationPropertiesFormat class.
        /// </summary>

        /// <param name="gatewayLoadBalancer">The reference to gateway load balancer frontend IP.
        /// </param>

        /// <param name="virtualNetworkTaps">The reference to Virtual Network Taps.
        /// </param>

        /// <param name="applicationGatewayBackendAddressPools">The reference to ApplicationGatewayBackendAddressPool resource.
        /// </param>

        /// <param name="loadBalancerBackendAddressPools">The reference to LoadBalancerBackendAddressPool resource.
        /// </param>

        /// <param name="loadBalancerInboundNatRules">A list of references of LoadBalancerInboundNatRules.
        /// </param>

        /// <param name="privateIPAddress">Private IP address of the IP configuration.
        /// </param>

        /// <param name="privateIPAllocationMethod">The private IP address allocation method.
        /// Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;</param>

        /// <param name="privateIPAddressVersion">Whether the specific IP configuration is IPv4 or IPv6. Default is IPv4.
        /// Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;</param>

        /// <param name="subnet">Subnet bound to the IP configuration.
        /// </param>

        /// <param name="primary">Whether this is a primary customer address on the network interface.
        /// </param>

        /// <param name="publicIPAddress">Public IP address bound to the IP configuration.
        /// </param>

        /// <param name="applicationSecurityGroups">Application security groups in which the IP configuration is included.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the network interface IP configuration.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="privateLinkConnectionProperties">PrivateLinkConnection properties for the network interface.
        /// </param>
        public NetworkInterfaceIPConfigurationPropertiesFormat(SubResource gatewayLoadBalancer = default(SubResource), System.Collections.Generic.IList<VirtualNetworkTap> virtualNetworkTaps = default(System.Collections.Generic.IList<VirtualNetworkTap>), System.Collections.Generic.IList<ApplicationGatewayBackendAddressPool> applicationGatewayBackendAddressPools = default(System.Collections.Generic.IList<ApplicationGatewayBackendAddressPool>), System.Collections.Generic.IList<BackendAddressPool> loadBalancerBackendAddressPools = default(System.Collections.Generic.IList<BackendAddressPool>), System.Collections.Generic.IList<InboundNatRule> loadBalancerInboundNatRules = default(System.Collections.Generic.IList<InboundNatRule>), string privateIPAddress = default(string), string privateIPAllocationMethod = default(string), string privateIPAddressVersion = default(string), Subnet subnet = default(Subnet), bool? primary = default(bool?), PublicIPAddress publicIPAddress = default(PublicIPAddress), System.Collections.Generic.IList<ApplicationSecurityGroup> applicationSecurityGroups = default(System.Collections.Generic.IList<ApplicationSecurityGroup>), string provisioningState = default(string), NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties privateLinkConnectionProperties = default(NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties))

        {
            this.GatewayLoadBalancer = gatewayLoadBalancer;
            this.VirtualNetworkTaps = virtualNetworkTaps;
            this.ApplicationGatewayBackendAddressPools = applicationGatewayBackendAddressPools;
            this.LoadBalancerBackendAddressPools = loadBalancerBackendAddressPools;
            this.LoadBalancerInboundNatRules = loadBalancerInboundNatRules;
            this.PrivateIPAddress = privateIPAddress;
            this.PrivateIPAllocationMethod = privateIPAllocationMethod;
            this.PrivateIPAddressVersion = privateIPAddressVersion;
            this.Subnet = subnet;
            this.Primary = primary;
            this.PublicIPAddress = publicIPAddress;
            this.ApplicationSecurityGroups = applicationSecurityGroups;
            this.ProvisioningState = provisioningState;
            this.PrivateLinkConnectionProperties = privateLinkConnectionProperties;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the reference to gateway load balancer frontend IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "gatewayLoadBalancer")]
        public SubResource GatewayLoadBalancer {get; set; }

        /// <summary>
        /// Gets or sets the reference to Virtual Network Taps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualNetworkTaps")]
        public System.Collections.Generic.IList<VirtualNetworkTap> VirtualNetworkTaps {get; set; }

        /// <summary>
        /// Gets or sets the reference to ApplicationGatewayBackendAddressPool
        /// resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationGatewayBackendAddressPools")]
        public System.Collections.Generic.IList<ApplicationGatewayBackendAddressPool> ApplicationGatewayBackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets the reference to LoadBalancerBackendAddressPool resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerBackendAddressPools")]
        public System.Collections.Generic.IList<BackendAddressPool> LoadBalancerBackendAddressPools {get; set; }

        /// <summary>
        /// Gets or sets a list of references of LoadBalancerInboundNatRules.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "loadBalancerInboundNatRules")]
        public System.Collections.Generic.IList<InboundNatRule> LoadBalancerInboundNatRules {get; set; }

        /// <summary>
        /// Gets or sets private IP address of the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAddress")]
        public string PrivateIPAddress {get; set; }

        /// <summary>
        /// Gets or sets the private IP address allocation method. Possible values include: &#39;Static&#39;, &#39;Dynamic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAllocationMethod")]
        public string PrivateIPAllocationMethod {get; set; }

        /// <summary>
        /// Gets or sets whether the specific IP configuration is IPv4 or IPv6. Default
        /// is IPv4. Possible values include: &#39;IPv4&#39;, &#39;IPv6&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateIPAddressVersion")]
        public string PrivateIPAddressVersion {get; set; }

        /// <summary>
        /// Gets or sets subnet bound to the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnet")]
        public Subnet Subnet {get; set; }

        /// <summary>
        /// Gets or sets whether this is a primary customer address on the network
        /// interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primary")]
        public bool? Primary {get; set; }

        /// <summary>
        /// Gets or sets public IP address bound to the IP configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicIPAddress")]
        public PublicIPAddress PublicIPAddress {get; set; }

        /// <summary>
        /// Gets or sets application security groups in which the IP configuration is
        /// included.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationSecurityGroups")]
        public System.Collections.Generic.IList<ApplicationSecurityGroup> ApplicationSecurityGroups {get; set; }

        /// <summary>
        /// Gets the provisioning state of the network interface IP configuration. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets privateLinkConnection properties for the network interface.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateLinkConnectionProperties")]
        public NetworkInterfaceIPConfigurationPrivateLinkConnectionProperties PrivateLinkConnectionProperties {get; private set; }
    }
}