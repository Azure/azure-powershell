// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// ExpressRoute gateway resource properties.
    /// </summary>
    public partial class ExpressRouteGatewayProperties
    {
        /// <summary>
        /// Initializes a new instance of the ExpressRouteGatewayProperties class.
        /// </summary>
        public ExpressRouteGatewayProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ExpressRouteGatewayProperties class.
        /// </summary>

        /// <param name="autoScaleConfiguration">Configuration for auto scaling.
        /// </param>

        /// <param name="expressRouteConnections">List of ExpressRoute connections to the ExpressRoute gateway.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the express route gateway resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="virtualHub">The Virtual Hub where the ExpressRoute gateway is or will be deployed.
        /// </param>

        /// <param name="allowNonVirtualWanTraffic">Configures this gateway to accept traffic from non Virtual WAN networks.
        /// </param>
        public ExpressRouteGatewayProperties(VirtualHubId virtualHub, ExpressRouteGatewayPropertiesAutoScaleConfiguration autoScaleConfiguration = default(ExpressRouteGatewayPropertiesAutoScaleConfiguration), System.Collections.Generic.IList<ExpressRouteConnection> expressRouteConnections = default(System.Collections.Generic.IList<ExpressRouteConnection>), string provisioningState = default(string), bool? allowNonVirtualWanTraffic = default(bool?))

        {
            this.AutoScaleConfiguration = autoScaleConfiguration;
            this.ExpressRouteConnections = expressRouteConnections;
            this.ProvisioningState = provisioningState;
            this.VirtualHub = virtualHub;
            this.AllowNonVirtualWanTraffic = allowNonVirtualWanTraffic;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets configuration for auto scaling.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoScaleConfiguration")]
        public ExpressRouteGatewayPropertiesAutoScaleConfiguration AutoScaleConfiguration {get; set; }

        /// <summary>
        /// Gets or sets list of ExpressRoute connections to the ExpressRoute gateway.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expressRouteConnections")]
        public System.Collections.Generic.IList<ExpressRouteConnection> ExpressRouteConnections {get; set; }

        /// <summary>
        /// Gets the provisioning state of the express route gateway resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the Virtual Hub where the ExpressRoute gateway is or will be
        /// deployed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualHub")]
        public VirtualHubId VirtualHub {get; set; }

        /// <summary>
        /// Gets or sets configures this gateway to accept traffic from non Virtual WAN
        /// networks.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowNonVirtualWanTraffic")]
        public bool? AllowNonVirtualWanTraffic {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.VirtualHub == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "VirtualHub");
            }

            if (this.ExpressRouteConnections != null)
            {
                foreach (var element in this.ExpressRouteConnections)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}