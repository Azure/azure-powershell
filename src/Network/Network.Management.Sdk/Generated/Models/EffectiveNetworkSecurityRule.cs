// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Effective network security rules.
    /// </summary>
    public partial class EffectiveNetworkSecurityRule
    {
        /// <summary>
        /// Initializes a new instance of the EffectiveNetworkSecurityRule class.
        /// </summary>
        public EffectiveNetworkSecurityRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EffectiveNetworkSecurityRule class.
        /// </summary>

        /// <param name="name">The name of the security rule specified by the user (if created by the
        /// user).
        /// </param>

        /// <param name="protocol">The network protocol this rule applies to.
        /// Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;All&#39;</param>

        /// <param name="sourcePortRange">The source port or range.
        /// </param>

        /// <param name="destinationPortRange">The destination port or range.
        /// </param>

        /// <param name="sourcePortRanges">The source port ranges. Expected values include a single integer between 0
        /// and 65535, a range using &#39;-&#39; as separator (e.g. 100-400), or an asterisk
        /// (*).
        /// </param>

        /// <param name="destinationPortRanges">The destination port ranges. Expected values include a single integer
        /// between 0 and 65535, a range using &#39;-&#39; as separator (e.g. 100-400), or an
        /// asterisk (*).
        /// </param>

        /// <param name="sourceAddressPrefix">The source address prefix.
        /// </param>

        /// <param name="destinationAddressPrefix">The destination address prefix.
        /// </param>

        /// <param name="sourceAddressPrefixes">The source address prefixes. Expected values include CIDR IP ranges,
        /// Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags,
        /// and the asterisk (*).
        /// </param>

        /// <param name="destinationAddressPrefixes">The destination address prefixes. Expected values include CIDR IP ranges,
        /// Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System Tags,
        /// and the asterisk (*).
        /// </param>

        /// <param name="expandedSourceAddressPrefix">The expanded source address prefix.
        /// </param>

        /// <param name="expandedDestinationAddressPrefix">Expanded destination address prefix.
        /// </param>

        /// <param name="access">Whether network traffic is allowed or denied.
        /// Possible values include: &#39;Allow&#39;, &#39;Deny&#39;</param>

        /// <param name="priority">The priority of the rule.
        /// </param>

        /// <param name="direction">The direction of the rule.
        /// Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;</param>
        public EffectiveNetworkSecurityRule(string name = default(string), string protocol = default(string), string sourcePortRange = default(string), string destinationPortRange = default(string), System.Collections.Generic.IList<string> sourcePortRanges = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationPortRanges = default(System.Collections.Generic.IList<string>), string sourceAddressPrefix = default(string), string destinationAddressPrefix = default(string), System.Collections.Generic.IList<string> sourceAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> destinationAddressPrefixes = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> expandedSourceAddressPrefix = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> expandedDestinationAddressPrefix = default(System.Collections.Generic.IList<string>), string access = default(string), int? priority = default(int?), string direction = default(string))

        {
            this.Name = name;
            this.Protocol = protocol;
            this.SourcePortRange = sourcePortRange;
            this.DestinationPortRange = destinationPortRange;
            this.SourcePortRanges = sourcePortRanges;
            this.DestinationPortRanges = destinationPortRanges;
            this.SourceAddressPrefix = sourceAddressPrefix;
            this.DestinationAddressPrefix = destinationAddressPrefix;
            this.SourceAddressPrefixes = sourceAddressPrefixes;
            this.DestinationAddressPrefixes = destinationAddressPrefixes;
            this.ExpandedSourceAddressPrefix = expandedSourceAddressPrefix;
            this.ExpandedDestinationAddressPrefix = expandedDestinationAddressPrefix;
            this.Access = access;
            this.Priority = priority;
            this.Direction = direction;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the security rule specified by the user (if
        /// created by the user).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the network protocol this rule applies to. Possible values include: &#39;Tcp&#39;, &#39;Udp&#39;, &#39;All&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "protocol")]
        public string Protocol {get; set; }

        /// <summary>
        /// Gets or sets the source port or range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRange")]
        public string SourcePortRange {get; set; }

        /// <summary>
        /// Gets or sets the destination port or range.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRange")]
        public string DestinationPortRange {get; set; }

        /// <summary>
        /// Gets or sets the source port ranges. Expected values include a single
        /// integer between 0 and 65535, a range using &#39;-&#39; as separator (e.g. 100-400),
        /// or an asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRanges")]
        public System.Collections.Generic.IList<string> SourcePortRanges {get; set; }

        /// <summary>
        /// Gets or sets the destination port ranges. Expected values include a single
        /// integer between 0 and 65535, a range using &#39;-&#39; as separator (e.g. 100-400),
        /// or an asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationPortRanges")]
        public System.Collections.Generic.IList<string> DestinationPortRanges {get; set; }

        /// <summary>
        /// Gets or sets the source address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefix")]
        public string SourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddressPrefix")]
        public string DestinationAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets the source address prefixes. Expected values include CIDR IP
        /// ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet), System
        /// Tags, and the asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefixes")]
        public System.Collections.Generic.IList<string> SourceAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the destination address prefixes. Expected values include CIDR
        /// IP ranges, Default Tags (VirtualNetwork, AzureLoadBalancer, Internet),
        /// System Tags, and the asterisk (*).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationAddressPrefixes")]
        public System.Collections.Generic.IList<string> DestinationAddressPrefixes {get; set; }

        /// <summary>
        /// Gets or sets the expanded source address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expandedSourceAddressPrefix")]
        public System.Collections.Generic.IList<string> ExpandedSourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets expanded destination address prefix.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "expandedDestinationAddressPrefix")]
        public System.Collections.Generic.IList<string> ExpandedDestinationAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets whether network traffic is allowed or denied. Possible values include: &#39;Allow&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "access")]
        public string Access {get; set; }

        /// <summary>
        /// Gets or sets the priority of the rule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int? Priority {get; set; }

        /// <summary>
        /// Gets or sets the direction of the rule. Possible values include: &#39;Inbound&#39;, &#39;Outbound&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "direction")]
        public string Direction {get; set; }
    }
}