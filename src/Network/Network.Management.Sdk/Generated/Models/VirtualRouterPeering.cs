// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Network.Models
{
    using System.Linq;

    /// <summary>
    /// Virtual Router Peering resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualRouterPeering : SubResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualRouterPeering class.
        /// </summary>
        public VirtualRouterPeering()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualRouterPeering class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Name of the virtual router peering that is unique within a virtual router.
        /// </param>

        /// <param name="etag">A unique read-only string that changes whenever the resource is updated.
        /// </param>

        /// <param name="type">Peering type.
        /// </param>

        /// <param name="provisioningState">The provisioning state of the resource.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;</param>

        /// <param name="peerAsn">Peer ASN.
        /// </param>

        /// <param name="peerIP">Peer IP.
        /// </param>
        public VirtualRouterPeering(string id = default(string), string name = default(string), string etag = default(string), string type = default(string), string provisioningState = default(string), long? peerAsn = default(long?), string peerIP = default(string))

        : base(id)
        {
            this.Name = name;
            this.Etag = etag;
            this.Type = type;
            this.ProvisioningState = provisioningState;
            this.PeerAsn = peerAsn;
            this.PeerIP = peerIP;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the virtual router peering that is unique within a
        /// virtual router.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets a unique read-only string that changes whenever the resource is
        /// updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; private set; }

        /// <summary>
        /// Gets peering type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the provisioning state of the resource. Possible values include: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets peer ASN.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peerAsn")]
        public long? PeerAsn {get; set; }

        /// <summary>
        /// Gets or sets peer IP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.peerIp")]
        public string PeerIP {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.PeerAsn != null)
            {
                if (this.PeerAsn > 4294967295)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PeerAsn", 4294967295);
                }
                if (this.PeerAsn < 0)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PeerAsn", 0);
                }
            }

        }
    }
}