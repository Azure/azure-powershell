// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ConfigurationPolicyGroupsOperations
    /// </summary>
    public static partial class ConfigurationPolicyGroupsOperationsExtensions
    {
        /// <summary>
        /// Creates a ConfigurationPolicyGroup if it doesn&#39;t exist else updates the
        /// existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        public static VpnServerConfigurationPolicyGroup CreateOrUpdate(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters)
        {
                return ((IConfigurationPolicyGroupsOperations)operations).CreateOrUpdateAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a ConfigurationPolicyGroup if it doesn&#39;t exist else updates the
        /// existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VpnServerConfigurationPolicyGroup> CreateOrUpdateAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a ConfigurationPolicyGroup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        public static void Delete(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName)
        {
                ((IConfigurationPolicyGroupsOperations)operations).DeleteAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a ConfigurationPolicyGroup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieves the details of a ConfigurationPolicyGroup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VpnServerConfiguration.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup being retrieved.
        /// </param>
        public static VpnServerConfigurationPolicyGroup Get(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName)
        {
                return ((IConfigurationPolicyGroupsOperations)operations).GetAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieves the details of a ConfigurationPolicyGroup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VpnServerConfiguration.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup being retrieved.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VpnServerConfigurationPolicyGroup> GetAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all the configurationPolicyGroups in a resource group for a
        /// vpnServerConfiguration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VpnServerConfiguration.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VpnServerConfigurationPolicyGroup> ListByVpnServerConfiguration(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName)
        {
                return ((IConfigurationPolicyGroupsOperations)operations).ListByVpnServerConfigurationAsync(resourceGroupName, vpnServerConfigurationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the configurationPolicyGroups in a resource group for a
        /// vpnServerConfiguration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the VpnServerConfiguration.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VpnServerConfigurationPolicyGroup>> ListByVpnServerConfigurationAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByVpnServerConfigurationWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a ConfigurationPolicyGroup if it doesn&#39;t exist else updates the
        /// existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        public static VpnServerConfigurationPolicyGroup BeginCreateOrUpdate(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters)
        {
                return ((IConfigurationPolicyGroupsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a ConfigurationPolicyGroup if it doesn&#39;t exist else updates the
        /// existing one.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VpnServerConfigurationPolicyGroup> BeginCreateOrUpdateAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, VpnServerConfigurationPolicyGroup vpnServerConfigurationPolicyGroupParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, vpnServerConfigurationPolicyGroupParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a ConfigurationPolicyGroup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        public static void BeginDelete(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName)
        {
                ((IConfigurationPolicyGroupsOperations)operations).BeginDeleteAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a ConfigurationPolicyGroup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='vpnServerConfigurationName'>
        /// The name of the VpnServerConfiguration.
        /// </param>
        /// <param name='configurationPolicyGroupName'>
        /// The name of the ConfigurationPolicyGroup.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IConfigurationPolicyGroupsOperations operations, string resourceGroupName, string vpnServerConfigurationName, string configurationPolicyGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, vpnServerConfigurationName, configurationPolicyGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the configurationPolicyGroups in a resource group for a
        /// vpnServerConfiguration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VpnServerConfigurationPolicyGroup> ListByVpnServerConfigurationNext(this IConfigurationPolicyGroupsOperations operations, string nextPageLink)
        {
                return ((IConfigurationPolicyGroupsOperations)operations).ListByVpnServerConfigurationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the configurationPolicyGroups in a resource group for a
        /// vpnServerConfiguration.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VpnServerConfigurationPolicyGroup>> ListByVpnServerConfigurationNextAsync(this IConfigurationPolicyGroupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByVpnServerConfigurationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
