// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SecurityPartnerProvidersOperations
    /// </summary>
    public static partial class SecurityPartnerProvidersOperationsExtensions
    {
        /// <summary>
        /// Deletes the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        public static void Delete(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName)
        {
                ((ISecurityPartnerProvidersOperations)operations).DeleteAsync(resourceGroupName, securityPartnerProviderName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, securityPartnerProviderName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        public static SecurityPartnerProvider Get(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName)
        {
                return ((ISecurityPartnerProvidersOperations)operations).GetAsync(resourceGroupName, securityPartnerProviderName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityPartnerProvider> GetAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, securityPartnerProviderName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        public static SecurityPartnerProvider CreateOrUpdate(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, SecurityPartnerProvider parameters)
        {
                return ((ISecurityPartnerProvidersOperations)operations).CreateOrUpdateAsync(resourceGroupName, securityPartnerProviderName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityPartnerProvider> CreateOrUpdateAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, SecurityPartnerProvider parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, securityPartnerProviderName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates tags of a Security Partner Provider resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        public static SecurityPartnerProvider UpdateTags(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, TagsObject parameters)
        {
                return ((ISecurityPartnerProvidersOperations)operations).UpdateTagsAsync(resourceGroupName, securityPartnerProviderName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates tags of a Security Partner Provider resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityPartnerProvider> UpdateTagsAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateTagsWithHttpMessagesAsync(resourceGroupName, securityPartnerProviderName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all Security Partner Providers in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityPartnerProvider> ListByResourceGroup(this ISecurityPartnerProvidersOperations operations, string resourceGroupName)
        {
                return ((ISecurityPartnerProvidersOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Security Partner Providers in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityPartnerProvider>> ListByResourceGroupAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all the Security Partner Providers in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityPartnerProvider> List(this ISecurityPartnerProvidersOperations operations)
        {
                return ((ISecurityPartnerProvidersOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all the Security Partner Providers in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityPartnerProvider>> ListAsync(this ISecurityPartnerProvidersOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        public static void BeginDelete(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName)
        {
                ((ISecurityPartnerProvidersOperations)operations).BeginDeleteAsync(resourceGroupName, securityPartnerProviderName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, securityPartnerProviderName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        public static SecurityPartnerProvider BeginCreateOrUpdate(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, SecurityPartnerProvider parameters)
        {
                return ((ISecurityPartnerProvidersOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, securityPartnerProviderName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates the specified Security Partner Provider.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='securityPartnerProviderName'>
        /// The name of the Security Partner Provider.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SecurityPartnerProvider> BeginCreateOrUpdateAsync(this ISecurityPartnerProvidersOperations operations, string resourceGroupName, string securityPartnerProviderName, SecurityPartnerProvider parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, securityPartnerProviderName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all Security Partner Providers in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityPartnerProvider> ListByResourceGroupNext(this ISecurityPartnerProvidersOperations operations, string nextPageLink)
        {
                return ((ISecurityPartnerProvidersOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Security Partner Providers in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityPartnerProvider>> ListByResourceGroupNextAsync(this ISecurityPartnerProvidersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all the Security Partner Providers in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SecurityPartnerProvider> ListNext(this ISecurityPartnerProvidersOperations operations, string nextPageLink)
        {
                return ((ISecurityPartnerProvidersOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all the Security Partner Providers in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SecurityPartnerProvider>> ListNextAsync(this ISecurityPartnerProvidersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
