// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VirtualApplianceSitesOperations
    /// </summary>
    public static partial class VirtualApplianceSitesOperationsExtensions
    {
        /// <summary>
        /// Deletes the specified site from a Virtual Appliance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        public static void Delete(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName)
        {
                ((IVirtualApplianceSitesOperations)operations).DeleteAsync(resourceGroupName, networkVirtualApplianceName, siteName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified site from a Virtual Appliance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the specified Virtual Appliance Site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        public static VirtualApplianceSite Get(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName)
        {
                return ((IVirtualApplianceSitesOperations)operations).GetAsync(resourceGroupName, networkVirtualApplianceName, siteName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified Virtual Appliance Site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualApplianceSite> GetAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates the specified Network Virtual Appliance Site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        public static VirtualApplianceSite CreateOrUpdate(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters)
        {
                return ((IVirtualApplianceSitesOperations)operations).CreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates the specified Network Virtual Appliance Site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualApplianceSite> CreateOrUpdateAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VirtualApplianceSite> List(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName)
        {
                return ((IVirtualApplianceSitesOperations)operations).ListAsync(resourceGroupName, networkVirtualApplianceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VirtualApplianceSite>> ListAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified site from a Virtual Appliance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        public static void BeginDelete(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName)
        {
                ((IVirtualApplianceSitesOperations)operations).BeginDeleteAsync(resourceGroupName, networkVirtualApplianceName, siteName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified site from a Virtual Appliance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates the specified Network Virtual Appliance Site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        public static VirtualApplianceSite BeginCreateOrUpdate(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters)
        {
                return ((IVirtualApplianceSitesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates the specified Network Virtual Appliance Site.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='networkVirtualApplianceName'>
        /// The name of the Network Virtual Appliance.
        /// </param>
        /// <param name='siteName'>
        /// The name of the site.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VirtualApplianceSite> BeginCreateOrUpdateAsync(this IVirtualApplianceSitesOperations operations, string resourceGroupName, string networkVirtualApplianceName, string siteName, VirtualApplianceSite parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, networkVirtualApplianceName, siteName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<VirtualApplianceSite> ListNext(this IVirtualApplianceSitesOperations operations, string nextPageLink)
        {
                return ((IVirtualApplianceSitesOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all Network Virtual Appliance Sites in a Network Virtual Appliance
        /// resource.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<VirtualApplianceSite>> ListNextAsync(this IVirtualApplianceSitesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
