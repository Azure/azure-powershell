// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Network
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for IPAllocationsOperations
    /// </summary>
    public static partial class IPAllocationsOperationsExtensions
    {
        /// <summary>
        /// Deletes the specified IpAllocation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        public static void Delete(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName)
        {
                ((IIPAllocationsOperations)operations).DeleteAsync(resourceGroupName, ipAllocationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified IpAllocation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, ipAllocationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets the specified IpAllocation by resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='expand'>
        /// Expands referenced resources.
        /// </param>
        public static IpAllocation Get(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, string expand = default(string))
        {
                return ((IIPAllocationsOperations)operations).GetAsync(resourceGroupName, ipAllocationName, expand).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified IpAllocation by resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='expand'>
        /// Expands referenced resources.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpAllocation> GetAsync(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, string expand = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, ipAllocationName, expand, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates or updates an IpAllocation in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        public static IpAllocation CreateOrUpdate(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, IpAllocation parameters)
        {
                return ((IIPAllocationsOperations)operations).CreateOrUpdateAsync(resourceGroupName, ipAllocationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an IpAllocation in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpAllocation> CreateOrUpdateAsync(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, IpAllocation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, ipAllocationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates a IpAllocation tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        public static IpAllocation UpdateTags(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, TagsObject parameters)
        {
                return ((IIPAllocationsOperations)operations).UpdateTagsAsync(resourceGroupName, ipAllocationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates a IpAllocation tags.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpAllocation> UpdateTagsAsync(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, TagsObject parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateTagsWithHttpMessagesAsync(resourceGroupName, ipAllocationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all IpAllocations in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpAllocation> List(this IIPAllocationsOperations operations)
        {
                return ((IIPAllocationsOperations)operations).ListAsync().GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all IpAllocations in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpAllocation>> ListAsync(this IIPAllocationsOperations operations, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all IpAllocations in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpAllocation> ListByResourceGroup(this IIPAllocationsOperations operations, string resourceGroupName)
        {
                return ((IIPAllocationsOperations)operations).ListByResourceGroupAsync(resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all IpAllocations in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpAllocation>> ListByResourceGroupAsync(this IIPAllocationsOperations operations, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupWithHttpMessagesAsync(resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified IpAllocation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        public static void BeginDelete(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName)
        {
                ((IIPAllocationsOperations)operations).BeginDeleteAsync(resourceGroupName, ipAllocationName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified IpAllocation.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, ipAllocationName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates or updates an IpAllocation in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        public static IpAllocation BeginCreateOrUpdate(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, IpAllocation parameters)
        {
                return ((IIPAllocationsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, ipAllocationName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates or updates an IpAllocation in the specified resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group.
        /// </param>
        /// <param name='ipAllocationName'>
        /// The name of the IpAllocation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<IpAllocation> BeginCreateOrUpdateAsync(this IIPAllocationsOperations operations, string resourceGroupName, string ipAllocationName, IpAllocation parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, ipAllocationName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all IpAllocations in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpAllocation> ListNext(this IIPAllocationsOperations operations, string nextPageLink)
        {
                return ((IIPAllocationsOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all IpAllocations in a subscription.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpAllocation>> ListNextAsync(this IIPAllocationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets all IpAllocations in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<IpAllocation> ListByResourceGroupNext(this IIPAllocationsOperations operations, string nextPageLink)
        {
                return ((IIPAllocationsOperations)operations).ListByResourceGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets all IpAllocations in a resource group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<IpAllocation>> ListByResourceGroupNextAsync(this IIPAllocationsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
