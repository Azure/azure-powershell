// <auto-generated>
// Copyright (c) Microsoft and contributors.  All rights reserved.
// 
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//   http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// 
// See the License for the specific language governing permissions and
// limitations under the License.
// 
// 
// Warning: This code was generated by a tool.
// 
// Changes to this file may cause incorrect behavior and will be lost if the
// code is regenerated.
// 
// For documentation on code generator please visit
//   https://aka.ms/nrp-code-generation
// Please contact wanrpdev@microsoft.com if you need to make changes to this file.
// </auto-generated>

using AutoMapper;
using CNM = Microsoft.Azure.Commands.Network.Models;
using Microsoft.Azure.Commands.Network.Models;
using Microsoft.Azure.Commands.ResourceManager.Common.Tags;
using Microsoft.Azure.Management.Network;
using Microsoft.Azure.Management.Network.Models;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Management.Automation;

namespace Microsoft.Azure.Commands.Network
{
    [Cmdlet(VerbsData.Update, ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "LoadBalancerFrontendIpConfig", DefaultParameterSetName = "SetByResourceSubnetParent", SupportsShouldProcess = true), OutputType(typeof(PSLoadBalancer))]
    public partial class UpdateAzureRmLoadBalancerFrontendIpConfigCommand : NetworkBaseCmdlet
    {
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceSubnetParent",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceIdSubnetParent",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceIdPublicIpAddressParent",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourcePublicIpAddressParent",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public PSLoadBalancer LoadBalancer { get; set; }

        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceSubnetParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceIdSubnetParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceIdPublicIpAddressParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourcePublicIpAddressParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public string ResourceGroupName { get; set; }

        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceSubnetParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceIdSubnetParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourceIdPublicIpAddressParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = true,
            HelpMessage = "The reference of the load balancer resource.",
            ParameterSetName = "SetByResourcePublicIpAddressParentName",
            ValueFromPipeline = true,
            ValueFromPipelineByPropertyName = true)]
        public string LoadBalancerName { get; set; }

        [Parameter(
            Mandatory = true,
            HelpMessage = "Name of the frontend ip configuration.")]
        public string Name { get; set; }

        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceSubnetParent",
            HelpMessage = "The private IP address of the IP configuration.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceSubnetParentName",
            HelpMessage = "The private IP address of the IP configuration.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceIdSubnetParent",
            HelpMessage = "The private IP address of the IP configuration.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceIdSubnetParentName",
            HelpMessage = "The private IP address of the IP configuration.",
            ValueFromPipelineByPropertyName = true)]
        public string PrivateIpAddress { get; set; }

        [Parameter(
            Mandatory = false,
            HelpMessage = "A list of availability zones denoting the IP allocated for the resource needs to come from.",
            ValueFromPipelineByPropertyName = true)]
        public string[] Zone { get; set; }

        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceIdSubnetParent",
            HelpMessage = "The reference of the subnet resource.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceIdSubnetParentName",
            HelpMessage = "The reference of the subnet resource.",
            ValueFromPipelineByPropertyName = true)]
        public string SubnetId { get; set; }

        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceSubnetParent",
            HelpMessage = "The reference of the subnet resource.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceSubnetParentName",
            HelpMessage = "The reference of the subnet resource.",
            ValueFromPipelineByPropertyName = true)]
        public PSSubnet Subnet { get; set; }

        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceIdPublicIpAddressParent",
            HelpMessage = "The reference of the Public IP resource.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourceIdPublicIpAddressParentName",
            HelpMessage = "The reference of the Public IP resource.",
            ValueFromPipelineByPropertyName = true)]
        public string PublicIpAddressId { get; set; }

        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourcePublicIpAddressParent",
            HelpMessage = "The reference of the Public IP resource.",
            ValueFromPipelineByPropertyName = true)]
        [Parameter(
            Mandatory = false,
            ParameterSetName = "SetByResourcePublicIpAddressParentName",
            HelpMessage = "The reference of the Public IP resource.",
            ValueFromPipelineByPropertyName = true)]
        public PSPublicIpAddress PublicIpAddress { get; set; }


        public override void Execute()
        {
            if(string.Equals(ParameterSetName, "SetByResourceSubnetParentName") ||
               string.Equals(ParameterSetName, "SetByResourceIdSubnetParentName") ||
               string.Equals(ParameterSetName, "SetByResourcePublicIpAddressParentName") ||
               string.Equals(ParameterSetName, "SetByResourceIdPublicIpAddressParentName"))
            {
                LoadBalancer vLoadBalancer;
                try
                {
                    vLoadBalancer = this.NetworkClient.NetworkManagementClient.LoadBalancers.Get(ResourceGroupName, LoadBalancerName);
                }
                catch (Microsoft.Rest.Azure.CloudException exception)
                {
                    throw exception;
                }
                this.LoadBalancer = NetworkResourceManagerProfile.Mapper.Map<CNM.PSLoadBalancer>(vLoadBalancer);
                this.LoadBalancer.ResourceGroupName = NetworkBaseCmdlet.GetResourceGroup(vLoadBalancer.Id);
                this.LoadBalancer.Tag = TagsConversionHelper.CreateTagHashtable(vLoadBalancer.Tags);
            }

            var vFrontendIPConfigurationsIndex = this.LoadBalancer.FrontendIpConfigurations.IndexOf(
                this.LoadBalancer.FrontendIpConfigurations.SingleOrDefault(
                    resource => string.Equals(resource.Name, this.Name, System.StringComparison.CurrentCultureIgnoreCase)));
            if (vFrontendIPConfigurationsIndex == -1)
            {
                throw new ArgumentException("FrontendIPConfigurations with the specified name does not exist");
            }

            if (string.Equals(ParameterSetName, "SetByResourceSubnetParent") ||
                string.Equals(ParameterSetName, "SetByResourceIdSubnetParentName"))
            {
                if (this.Subnet != null)
                {
                    this.SubnetId = this.Subnet.Id;
                }
            }

            if (string.Equals(ParameterSetName, "SetByResourcePublicIpAddressParent") ||
                string.Equals(ParameterSetName, "SetByResourceIdPublicIpAddressParentName"))
            {
                if (this.PublicIpAddress != null)
                {
                    this.PublicIpAddressId = this.PublicIpAddress.Id;
                }
            }
            var vFrontendIpConfigurations = LoadBalancer.FrontendIpConfigurations[vFrontendIPConfigurationsIndex];

            if(!string.IsNullOrEmpty(this.PrivateIpAddress))
            {
                vFrontendIpConfigurations.PrivateIpAddress = this.PrivateIpAddress;
            }

            if(!string.IsNullOrEmpty(vFrontendIpConfigurations.PrivateIpAddress))
            {
                vFrontendIpConfigurations.PrivateIpAllocationMethod = "Static";
            }
            else
            {
                vFrontendIpConfigurations.PrivateIpAllocationMethod = "Dynamic";
            }
            if(!string.IsNullOrEmpty(this.Name))
            {
                vFrontendIpConfigurations.Name = this.Name;
            }
            if(this.Zone != null && this.Zone.Length > 0)
            {
                vFrontendIpConfigurations.Zones = this.Zone?.ToList();
            }

            if(!string.IsNullOrEmpty(this.SubnetId))
            {
                // Subnet
                if (vFrontendIpConfigurations.Subnet == null)
                {
                    vFrontendIpConfigurations.Subnet = new PSSubnet();
                }
                vFrontendIpConfigurations.Subnet.Id = this.SubnetId;
            }
            if(!string.IsNullOrEmpty(this.PublicIpAddressId))
            {
                // PublicIpAddress
                if (vFrontendIpConfigurations.PublicIpAddress == null)
                {
                    vFrontendIpConfigurations.PublicIpAddress = new PSPublicIpAddress();
                }
                vFrontendIpConfigurations.PublicIpAddress.Id = this.PublicIpAddressId;
            }
            WriteObject(this.LoadBalancer, true);
        }
    }
}
