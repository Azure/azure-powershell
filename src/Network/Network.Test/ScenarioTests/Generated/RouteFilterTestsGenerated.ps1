# <auto-generated>
# Copyright (c) Microsoft and contributors.  All rights reserved.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#   http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# 
# See the License for the specific language governing permissions and
# limitations under the License.
# 
# 
# Warning: This code was generated by a tool.
# 
# Changes to this file may cause incorrect behavior and will be lost if the
# code is regenerated.
# 
# For documentation on code generator please visit
#   https://aka.ms/nrp-code-generation
# Please contact wanrpdev@microsoft.com if you need to make changes to this file.
# </auto-generated>

function Check-CmdletReturnType
{
    param($cmdletName, $cmdletReturn)

    $cmdletData = Get-Command $cmdletName;
    Assert-NotNull $cmdletData;
    [array]$cmdletReturnTypes = $cmdletData.OutputType.Name | Foreach-Object { return ($_ -replace "Microsoft.Azure.Commands.Network.Models.","") };
    [array]$cmdletReturnTypes = $cmdletReturnTypes | Foreach-Object { return ($_ -replace "System.","") };
    $realReturnType = $cmdletReturn.GetType().Name -replace "Microsoft.Azure.Commands.Network.Models.","";
    return $cmdletReturnTypes -contains $realReturnType;
}

<#
.SYNOPSIS
Test creating new RouteFilter using minimal set of parameters
#>
function Test-RouteFilterCRUDMinimalParameters
{
    # Setup
    $rgname = Get-ResourceGroupName;
    $rglocation = Get-ProviderLocation ResourceManagement;
    $rname = Get-ResourceName;
    $location = Get-ProviderLocation "Microsoft.Network/routeFilters";

    try
    {
        $resourceGroup = New-AzureRmResourceGroup -Name $rgname -Location $rglocation;

        # Create RouteFilter
        $vRouteFilter = New-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname -Location $location;
        Assert-NotNull $vRouteFilter;
        Assert-True { Check-CmdletReturnType "New-AzureRmRouteFilter" $vRouteFilter };
        Assert-AreEqual $rname $vRouteFilter.Name;

        # Get RouteFilter
        $vRouteFilter = Get-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname;
        Assert-NotNull $vRouteFilter;
        Assert-True { Check-CmdletReturnType "Get-AzureRmRouteFilter" $vRouteFilter };
        Assert-AreEqual $rname $vRouteFilter.Name;

        # Get all RouteFilters in resource group
        $listRouteFilter = Get-AzureRmRouteFilter -ResourceGroupName $rgname;
        Assert-NotNull ($listRouteFilter | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $rname });

        # Get all RouteFilters in subscription
        $listRouteFilter = Get-AzureRmRouteFilter;
        Assert-NotNull ($listRouteFilter | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $rname });

        # Remove RouteFilter
        $removeRouteFilter = Remove-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname -PassThru -Force;
        Assert-AreEqual $true $removeRouteFilter;

        # Get RouteFilter should fail
        Assert-ThrowsContains { Get-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname } "not found";
    }
    finally
    {
        # Cleanup
        Clean-ResourceGroup $rgname;
    }
}

<#
.SYNOPSIS
Test creating new RouteFilter
#>
function Test-RouteFilterCRUDAllParameters
{
    # Setup
    $rgname = Get-ResourceGroupName;
    $rglocation = Get-ProviderLocation ResourceManagement;
    $rname = Get-ResourceName;
    $location = Get-ProviderLocation "Microsoft.Network/routeFilters";
    # Resource's parameters
    $Tag = @{tag1='test'};
    # Resource's parameters for Set test
    $TagSet = @{tag2='testSet'};

    try
    {
        $resourceGroup = New-AzureRmResourceGroup -Name $rgname -Location $rglocation;

        # Create RouteFilter
        $vRouteFilter = New-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname -Location $location -Tag $Tag;
        Assert-NotNull $vRouteFilter;
        Assert-True { Check-CmdletReturnType "New-AzureRmRouteFilter" $vRouteFilter };
        Assert-AreEqual $rname $vRouteFilter.Name;
        Assert-AreEqualObjectProperties $Tag $vRouteFilter.Tag;

        # Get RouteFilter
        $vRouteFilter = Get-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname;
        Assert-NotNull $vRouteFilter;
        Assert-True { Check-CmdletReturnType "Get-AzureRmRouteFilter" $vRouteFilter };
        Assert-AreEqual $rname $vRouteFilter.Name;
        Assert-AreEqualObjectProperties $Tag $vRouteFilter.Tag;

        # Get all RouteFilters in resource group
        $listRouteFilter = Get-AzureRmRouteFilter -ResourceGroupName $rgname;
        Assert-NotNull ($listRouteFilter | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $rname });

        # Get all RouteFilters in subscription
        $listRouteFilter = Get-AzureRmRouteFilter;
        Assert-NotNull ($listRouteFilter | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $rname });

        # Set RouteFilter
        $vRouteFilter.Tag = $TagSet;
        $vRouteFilter = Set-AzureRmRouteFilter -RouteFilter $vRouteFilter -Force;
        Assert-NotNull $vRouteFilter;
        Assert-True { Check-CmdletReturnType "Set-AzureRmRouteFilter" $vRouteFilter };
        Assert-AreEqual $rname $vRouteFilter.Name;
        Assert-AreEqualObjectProperties $TagSet $vRouteFilter.Tag;

        # Get RouteFilter
        $vRouteFilter = Get-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname;
        Assert-NotNull $vRouteFilter;
        Assert-True { Check-CmdletReturnType "Get-AzureRmRouteFilter" $vRouteFilter };
        Assert-AreEqual $rname $vRouteFilter.Name;
        Assert-AreEqualObjectProperties $TagSet $vRouteFilter.Tag;

        # Get all RouteFilters in resource group
        $listRouteFilter = Get-AzureRmRouteFilter -ResourceGroupName $rgname;
        Assert-NotNull ($listRouteFilter | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $rname });

        # Get all RouteFilters in subscription
        $listRouteFilter = Get-AzureRmRouteFilter;
        Assert-NotNull ($listRouteFilter | Where-Object { $_.ResourceGroupName -eq $rgname -and $_.Name -eq $rname });

        # Remove RouteFilter
        $removeRouteFilter = Remove-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname -PassThru -Force;
        Assert-AreEqual $true $removeRouteFilter;

        # Get RouteFilter should fail
        Assert-ThrowsContains { Get-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname } "not found";
    }
    finally
    {
        # Cleanup
        Clean-ResourceGroup $rgname;
    }
}

<#
.SYNOPSIS
Test creating new RouteFilterRule using minimal set of parameters
#>
function Test-RouteFilterRuleCRUDMinimalParameters
{
    # Setup
    $rgname = Get-ResourceGroupName;
    $rglocation = Get-ProviderLocation ResourceManagement;
    $rname = Get-ResourceName;
    $rnameAdd = "${rname}Add";
    $location = Get-ProviderLocation "Microsoft.Network/routeFilters";
    # Resource's parameters for Set test
    $AccessSet = "Deny";
    $RouteFilterRuleTypeSet = "Community";
    $CommunityListSet = @("12076:5010","12076:5040");
    # Resource's parameters for Add test
    $AccessAdd = "Allow";
    $RouteFilterRuleTypeAdd = "Community";
    $CommunityListAdd = @("12076:5040");

    try
    {
        $resourceGroup = New-AzureRmResourceGroup -Name $rgname -Location $rglocation;

        # Create parent resource
        $vRouteFilter = New-AzureRmRouteFilter -ResourceGroupName $rgname -Name $rname -Location $location;
        Assert-NotNull $vRouteFilter;

        # Add RouteFilterRule
        $vRouteFilter = Add-AzureRmRouteFilterRuleConfig -Name $rnameAdd -RouteFilter $vRouteFilter -Access $AccessAdd -RouteFilterRuleType $RouteFilterRuleTypeAdd -CommunityList $CommunityListAdd -Force;
        Assert-NotNull $vRouteFilter;
        $vRouteFilter = Set-AzureRmRouteFilter -RouteFilter $vRouteFilter -Force;
        Assert-NotNull $vRouteFilter;

        # Get RouteFilterRule
        $vRouteFilterRule = Get-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter -Name $rnameAdd;
        Assert-NotNull $vRouteFilterRule;
        Assert-True { Check-CmdletReturnType "Get-AzureRmRouteFilterRuleConfig" $vRouteFilterRule };
        Assert-AreEqual $rnameAdd $vRouteFilterRule.Name;
        Assert-AreEqual $AccessAdd $vRouteFilterRule.Access;
        Assert-AreEqualArray $CommunityListAdd $vRouteFilterRule.Communities;

        # Get all RouteFilter's RouteFilterRules
        $listRouteFilterRule = Get-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter;
        Assert-NotNull ($listRouteFilterRule | Where-Object { $_.Name -eq $rnameAdd });

        # Try Add again
        Assert-ThrowsContains { Add-AzureRmRouteFilterRuleConfig -Name $rnameAdd -RouteFilter $vRouteFilter -Access $AccessAdd -RouteFilterRuleType $RouteFilterRuleTypeAdd -CommunityList $CommunityListAdd -Force } "already exists";

        # Set RouteFilterRule
        $vRouteFilter = Set-AzureRmRouteFilterRuleConfig -Name $rnameAdd -RouteFilter $vRouteFilter -Access $AccessSet -RouteFilterRuleType $RouteFilterRuleTypeSet -CommunityList $CommunityListSet -Force;
        Assert-NotNull $vRouteFilter;
        $vRouteFilter = Set-AzureRmRouteFilter -RouteFilter $vRouteFilter -Force;
        Assert-NotNull $vRouteFilter;

        # Get RouteFilterRule
        $vRouteFilterRule = Get-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter -Name $rnameAdd;
        Assert-NotNull $vRouteFilterRule;
        Assert-True { Check-CmdletReturnType "Get-AzureRmRouteFilterRuleConfig" $vRouteFilterRule };
        Assert-AreEqual $rnameAdd $vRouteFilterRule.Name;
        Assert-AreEqual $AccessSet $vRouteFilterRule.Access;
        Assert-AreEqualArray $CommunityListSet $vRouteFilterRule.Communities;

        # Get all RouteFilter's RouteFilterRules
        $listRouteFilterRule = Get-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter;
        Assert-NotNull ($listRouteFilterRule | Where-Object { $_.Name -eq $rnameAdd });

        # Remove RouteFilterRule
        $vRouteFilter = Remove-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter -Name $rnameAdd -Force;
        $vRouteFilter = Remove-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter -Name $rname -Force;
        # Additional call to test handling of already deleted child resource
        $vRouteFilter = Remove-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter -Name $rname -Force;
        # Update parent resource
        $vRouteFilter = Set-AzureRmRouteFilter -RouteFilter $vRouteFilter -Force;
        Assert-NotNull $vRouteFilter;

        # Get RouteFilterRule should fail
        Assert-ThrowsContains { Get-AzureRmRouteFilterRuleConfig -RouteFilter $vRouteFilter -Name $rnameAdd } "Sequence contains no matching element";

        # Set RouteFilterRule should fail
        Assert-ThrowsContains { Set-AzureRmRouteFilterRuleConfig -Name $rnameAdd -RouteFilter $vRouteFilter -Access $AccessSet -RouteFilterRuleType $RouteFilterRuleTypeSet -CommunityList $CommunityListSet -Force } "does not exist";
    }
    finally
    {
        # Cleanup
        Clean-ResourceGroup $rgname;
    }
}
