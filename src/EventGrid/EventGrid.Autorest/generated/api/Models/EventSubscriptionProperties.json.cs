// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Extensions;

    /// <summary>Properties of the Event Subscription.</summary>
    public partial class EventSubscriptionProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject into a new instance of <see cref="EventSubscriptionProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal EventSubscriptionProperties(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_deliveryWithResourceIdentity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject>("deliveryWithResourceIdentity"), out var __jsonDeliveryWithResourceIdentity) ? Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeliveryWithResourceIdentity.FromJson(__jsonDeliveryWithResourceIdentity) : _deliveryWithResourceIdentity;}
            {_filter = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject>("filter"), out var __jsonFilter) ? Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.EventSubscriptionFilter.FromJson(__jsonFilter) : _filter;}
            {_retryPolicy = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject>("retryPolicy"), out var __jsonRetryPolicy) ? Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.RetryPolicy.FromJson(__jsonRetryPolicy) : _retryPolicy;}
            {_deadLetterDestination = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject>("deadLetterDestination"), out var __jsonDeadLetterDestination) ? Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeadLetterDestination.FromJson(__jsonDeadLetterDestination) : _deadLetterDestination;}
            {_deadLetterWithResourceIdentity = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject>("deadLetterWithResourceIdentity"), out var __jsonDeadLetterWithResourceIdentity) ? Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeadLetterWithResourceIdentity.FromJson(__jsonDeadLetterWithResourceIdentity) : _deadLetterWithResourceIdentity;}
            {_topic = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString>("topic"), out var __jsonTopic) ? (string)__jsonTopic : (string)_topic;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)_provisioningState;}
            {_destination = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject>("destination"), out var __jsonDestination) ? Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.EventSubscriptionDestination.FromJson(__jsonDestination) : _destination;}
            {_label = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonArray>("labels"), out var __jsonLabels) ? If( __jsonLabels as Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : _label;}
            {_expirationTimeUtc = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString>("expirationTimeUtc"), out var __jsonExpirationTimeUtc) ? global::System.DateTime.TryParse((string)__jsonExpirationTimeUtc, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonExpirationTimeUtcValue) ? __jsonExpirationTimeUtcValue : _expirationTimeUtc : _expirationTimeUtc;}
            {_eventDeliverySchema = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString>("eventDeliverySchema"), out var __jsonEventDeliverySchema) ? (string)__jsonEventDeliverySchema : (string)_eventDeliverySchema;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject json ? new EventSubscriptionProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="EventSubscriptionProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="EventSubscriptionProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._deliveryWithResourceIdentity ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) this._deliveryWithResourceIdentity.ToJson(null,serializationMode) : null, "deliveryWithResourceIdentity" ,container.Add );
            AddIf( null != this._filter ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) this._filter.ToJson(null,serializationMode) : null, "filter" ,container.Add );
            AddIf( null != this._retryPolicy ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) this._retryPolicy.ToJson(null,serializationMode) : null, "retryPolicy" ,container.Add );
            AddIf( null != this._deadLetterDestination ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) this._deadLetterDestination.ToJson(null,serializationMode) : null, "deadLetterDestination" ,container.Add );
            AddIf( null != this._deadLetterWithResourceIdentity ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) this._deadLetterWithResourceIdentity.ToJson(null,serializationMode) : null, "deadLetterWithResourceIdentity" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._topic)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString(this._topic.ToString()) : null, "topic" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            AddIf( null != this._destination ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) this._destination.ToJson(null,serializationMode) : null, "destination" ,container.Add );
            if (null != this._label)
            {
                var __w = new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.XNodeArray();
                foreach( var __x in this._label )
                {
                    AddIf(null != (((object)__x)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                }
                container.Add("labels",__w);
            }
            AddIf( null != this._expirationTimeUtc ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString(this._expirationTimeUtc?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "expirationTimeUtc" ,container.Add );
            AddIf( null != (((object)this._eventDeliverySchema)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonString(this._eventDeliverySchema.ToString()) : null, "eventDeliverySchema" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}