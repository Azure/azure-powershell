// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.PowerShell;

    /// <summary>Properties of the event subscription.</summary>
    [System.ComponentModel.TypeConverter(typeof(SubscriptionPropertiesTypeConverter))]
    public partial class SubscriptionProperties
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.SubscriptionProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionProperties" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionProperties DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new SubscriptionProperties(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.SubscriptionProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionProperties" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionProperties DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new SubscriptionProperties(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="SubscriptionProperties" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="SubscriptionProperties" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionProperties FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.SubscriptionProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal SubscriptionProperties(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("DeliveryConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeliveryConfiguration) content.GetValueForProperty("DeliveryConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfiguration, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeliveryConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("FiltersConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FiltersConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IFiltersConfiguration) content.GetValueForProperty("FiltersConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FiltersConfiguration, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.FiltersConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("EventDeliverySchema"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).EventDeliverySchema = (string) content.GetValueForProperty("EventDeliverySchema",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).EventDeliverySchema, global::System.Convert.ToString);
            }
            if (content.Contains("DeliveryConfigurationDeliveryMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationDeliveryMode = (string) content.GetValueForProperty("DeliveryConfigurationDeliveryMode",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationDeliveryMode, global::System.Convert.ToString);
            }
            if (content.Contains("FilterConfigurationFilter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationFilter = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IFilter>) content.GetValueForProperty("FilterConfigurationFilter",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationFilter, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IFilter>(__y, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.FilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("DeliveryConfigurationQueue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationQueue = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IQueueInfo) content.GetValueForProperty("DeliveryConfigurationQueue",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationQueue, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.QueueInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilterConfigurationIncludedEventType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationIncludedEventType = (System.Collections.Generic.List<string>) content.GetValueForProperty("FilterConfigurationIncludedEventType",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationIncludedEventType, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("QueueDeadLetterDestinationWithResourceIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueDeadLetterDestinationWithResourceIdentity = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterWithResourceIdentity) content.GetValueForProperty("QueueDeadLetterDestinationWithResourceIdentity",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueDeadLetterDestinationWithResourceIdentity, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeadLetterWithResourceIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("QueueReceiveLockDurationInSecond"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueReceiveLockDurationInSecond = (int?) content.GetValueForProperty("QueueReceiveLockDurationInSecond",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueReceiveLockDurationInSecond, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("QueueMaxDeliveryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueMaxDeliveryCount = (int?) content.GetValueForProperty("QueueMaxDeliveryCount",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueMaxDeliveryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("QueueEventTimeToLive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueEventTimeToLive = (global::System.TimeSpan?) content.GetValueForProperty("QueueEventTimeToLive",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueEventTimeToLive, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("DeadLetterDestinationWithResourceIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentity = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionIdentity) content.GetValueForProperty("DeadLetterDestinationWithResourceIdentity",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentity, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.EventSubscriptionIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("DeadLetterDestinationWithResourceIdentityDeadLetterDestination"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentityDeadLetterDestination = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination) content.GetValueForProperty("DeadLetterDestinationWithResourceIdentityDeadLetterDestination",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentityDeadLetterDestination, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeadLetterDestinationTypeConverter.ConvertFrom);
            }
            if (content.Contains("IdentityType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityType = (string) content.GetValueForProperty("IdentityType",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityType, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityUserAssignedIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityUserAssignedIdentity = (string) content.GetValueForProperty("IdentityUserAssignedIdentity",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityUserAssignedIdentity, global::System.Convert.ToString);
            }
            if (content.Contains("DeadLetterDestinationEndpointType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationEndpointType = (string) content.GetValueForProperty("DeadLetterDestinationEndpointType",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationEndpointType, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.SubscriptionProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal SubscriptionProperties(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("DeliveryConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeliveryConfiguration) content.GetValueForProperty("DeliveryConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfiguration, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeliveryConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("FiltersConfiguration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FiltersConfiguration = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IFiltersConfiguration) content.GetValueForProperty("FiltersConfiguration",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FiltersConfiguration, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.FiltersConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("EventDeliverySchema"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).EventDeliverySchema = (string) content.GetValueForProperty("EventDeliverySchema",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).EventDeliverySchema, global::System.Convert.ToString);
            }
            if (content.Contains("DeliveryConfigurationDeliveryMode"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationDeliveryMode = (string) content.GetValueForProperty("DeliveryConfigurationDeliveryMode",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationDeliveryMode, global::System.Convert.ToString);
            }
            if (content.Contains("FilterConfigurationFilter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationFilter = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IFilter>) content.GetValueForProperty("FilterConfigurationFilter",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationFilter, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IFilter>(__y, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.FilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("DeliveryConfigurationQueue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationQueue = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IQueueInfo) content.GetValueForProperty("DeliveryConfigurationQueue",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeliveryConfigurationQueue, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.QueueInfoTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilterConfigurationIncludedEventType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationIncludedEventType = (System.Collections.Generic.List<string>) content.GetValueForProperty("FilterConfigurationIncludedEventType",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).FilterConfigurationIncludedEventType, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("QueueDeadLetterDestinationWithResourceIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueDeadLetterDestinationWithResourceIdentity = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterWithResourceIdentity) content.GetValueForProperty("QueueDeadLetterDestinationWithResourceIdentity",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueDeadLetterDestinationWithResourceIdentity, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeadLetterWithResourceIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("QueueReceiveLockDurationInSecond"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueReceiveLockDurationInSecond = (int?) content.GetValueForProperty("QueueReceiveLockDurationInSecond",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueReceiveLockDurationInSecond, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("QueueMaxDeliveryCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueMaxDeliveryCount = (int?) content.GetValueForProperty("QueueMaxDeliveryCount",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueMaxDeliveryCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("QueueEventTimeToLive"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueEventTimeToLive = (global::System.TimeSpan?) content.GetValueForProperty("QueueEventTimeToLive",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).QueueEventTimeToLive, (v) => v is global::System.TimeSpan _v ? _v : global::System.Xml.XmlConvert.ToTimeSpan( v.ToString() ));
            }
            if (content.Contains("DeadLetterDestinationWithResourceIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentity = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionIdentity) content.GetValueForProperty("DeadLetterDestinationWithResourceIdentity",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentity, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.EventSubscriptionIdentityTypeConverter.ConvertFrom);
            }
            if (content.Contains("DeadLetterDestinationWithResourceIdentityDeadLetterDestination"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentityDeadLetterDestination = (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination) content.GetValueForProperty("DeadLetterDestinationWithResourceIdentityDeadLetterDestination",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationWithResourceIdentityDeadLetterDestination, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.DeadLetterDestinationTypeConverter.ConvertFrom);
            }
            if (content.Contains("IdentityType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityType = (string) content.GetValueForProperty("IdentityType",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityType, global::System.Convert.ToString);
            }
            if (content.Contains("IdentityUserAssignedIdentity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityUserAssignedIdentity = (string) content.GetValueForProperty("IdentityUserAssignedIdentity",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).IdentityUserAssignedIdentity, global::System.Convert.ToString);
            }
            if (content.Contains("DeadLetterDestinationEndpointType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationEndpointType = (string) content.GetValueForProperty("DeadLetterDestinationEndpointType",((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISubscriptionPropertiesInternal)this).DeadLetterDestinationEndpointType, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Properties of the event subscription.
    [System.ComponentModel.TypeConverter(typeof(SubscriptionPropertiesTypeConverter))]
    public partial interface ISubscriptionProperties

    {

    }
}