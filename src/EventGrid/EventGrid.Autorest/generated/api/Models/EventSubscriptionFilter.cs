// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Extensions;

    /// <summary>Filter for the Event Subscription.</summary>
    public partial class EventSubscriptionFilter :
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionFilter,
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionFilterInternal
    {

        /// <summary>Backing field for <see cref="AdvancedFilter" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> _advancedFilter;

        /// <summary>An array of advanced filters that are used for filtering event subscriptions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> AdvancedFilter { get => this._advancedFilter; set => this._advancedFilter = value; }

        /// <summary>Backing field for <see cref="EnableAdvancedFilteringOnArray" /> property.</summary>
        private bool? _enableAdvancedFilteringOnArray;

        /// <summary>
        /// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public bool? EnableAdvancedFilteringOnArray { get => this._enableAdvancedFilteringOnArray; set => this._enableAdvancedFilteringOnArray = value; }

        /// <summary>Backing field for <see cref="IncludedEventType" /> property.</summary>
        private System.Collections.Generic.List<string> _includedEventType;

        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all
        /// default event types, set the IncludedEventTypes to null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> IncludedEventType { get => this._includedEventType; set => this._includedEventType = value; }

        /// <summary>Backing field for <see cref="IsSubjectCaseSensitive" /> property.</summary>
        private bool? _isSubjectCaseSensitive;

        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public bool? IsSubjectCaseSensitive { get => this._isSubjectCaseSensitive; set => this._isSubjectCaseSensitive = value; }

        /// <summary>Backing field for <see cref="SubjectBeginsWith" /> property.</summary>
        private string _subjectBeginsWith;

        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public string SubjectBeginsWith { get => this._subjectBeginsWith; set => this._subjectBeginsWith = value; }

        /// <summary>Backing field for <see cref="SubjectEndsWith" /> property.</summary>
        private string _subjectEndsWith;

        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public string SubjectEndsWith { get => this._subjectEndsWith; set => this._subjectEndsWith = value; }

        /// <summary>Creates an new <see cref="EventSubscriptionFilter" /> instance.</summary>
        public EventSubscriptionFilter()
        {

        }
    }
    /// Filter for the Event Subscription.
    public partial interface IEventSubscriptionFilter :
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IJsonSerializable
    {
        /// <summary>An array of advanced filters that are used for filtering event subscriptions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of advanced filters that are used for filtering event subscriptions.",
        SerializedName = @"advancedFilters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> AdvancedFilter { get; set; }
        /// <summary>
        /// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.",
        SerializedName = @"enableAdvancedFilteringOnArrays",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAdvancedFilteringOnArray { get; set; }
        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all
        /// default event types, set the IncludedEventTypes to null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.",
        SerializedName = @"includedEventTypes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IncludedEventType { get; set; }
        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        should be compared in a case sensitive manner.",
        SerializedName = @"isSubjectCaseSensitive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSubjectCaseSensitive { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An optional string to filter events for an event subscription based on a resource path prefix.
        The format of this depends on the publisher of the events.
        Wildcard characters are not supported in this path.",
        SerializedName = @"subjectBeginsWith",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectBeginsWith { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An optional string to filter events for an event subscription based on a resource path suffix.
        Wildcard characters are not supported in this path.",
        SerializedName = @"subjectEndsWith",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectEndsWith { get; set; }

    }
    /// Filter for the Event Subscription.
    internal partial interface IEventSubscriptionFilterInternal

    {
        /// <summary>An array of advanced filters that are used for filtering event subscriptions.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> AdvancedFilter { get; set; }
        /// <summary>
        /// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
        /// </summary>
        bool? EnableAdvancedFilteringOnArray { get; set; }
        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all
        /// default event types, set the IncludedEventTypes to null.
        /// </summary>
        System.Collections.Generic.List<string> IncludedEventType { get; set; }
        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        bool? IsSubjectCaseSensitive { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        string SubjectBeginsWith { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        string SubjectEndsWith { get; set; }

    }
}