
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Delete an existing event subscription of a namespace topic.
.Description
Delete an existing event subscription of a namespace topic.
.Example
Remove-AzEventGridNamespaceTopicEventSubscription -EventSubscriptionName azps-eventsubname -NamespaceName azps-eventgridnamespace -ResourceGroupName azps_test_group_eventgrid -TopicName azps-topic

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IEventGridIdentity>: Identity Parameter
  [CaCertificateName <String>]: Name of the CA certificate.
  [ChannelName <String>]: Name of the channel.
  [ClientGroupName <String>]: Name of the client group.
  [ClientName <String>]: Name of the client.
  [DomainName <String>]: Name of the domain.
  [DomainTopicName <String>]: Name of the topic.
  [EventSubscriptionName <String>]: Name of the event subscription.
  [Id <String>]: Resource identity path
  [Location <String>]: Name of the location.
  [NamespaceName <String>]: Name of the namespace.
  [ParentName <String>]: The name of the parent resource (namely, either, the topic name, domain name, or partner namespace name or namespace name).
  [ParentType <String>]: The type of the parent resource. This can be either \'topics\', \'domains\', or \'partnerNamespaces\' or \'namespaces\'.
  [PartnerDestinationName <String>]: Name of the partner destination.
  [PartnerNamespaceName <String>]: Name of the partner namespace.
  [PartnerRegistrationName <String>]: Name of the partner registration.
  [PartnerTopicName <String>]: Name of the partner topic.
  [PermissionBindingName <String>]: Name of the permission binding.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection connection.
  [PrivateLinkResourceName <String>]: The name of private link resource will be either topic, domain, partnerNamespace or namespace.
  [ProviderNamespace <String>]: Namespace of the provider of the topic.
  [ResourceGroupName <String>]: The name of the resource group within the user's subscription.
  [ResourceName <String>]: Name of the resource.
  [ResourceTypeName <String>]: Name of the resource type.
  [Scope <String>]: The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
  [SubscriptionId <String>]: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [SystemTopicName <String>]: Name of the system topic.
  [TopicName <String>]: Name of the domain topic.
  [TopicSpaceName <String>]: Name of the Topic space.
  [TopicTypeName <String>]: Name of the topic type.
  [VerifiedPartnerName <String>]: Name of the verified partner.

NAMESPACEINPUTOBJECT <IEventGridIdentity>: Identity Parameter
  [CaCertificateName <String>]: Name of the CA certificate.
  [ChannelName <String>]: Name of the channel.
  [ClientGroupName <String>]: Name of the client group.
  [ClientName <String>]: Name of the client.
  [DomainName <String>]: Name of the domain.
  [DomainTopicName <String>]: Name of the topic.
  [EventSubscriptionName <String>]: Name of the event subscription.
  [Id <String>]: Resource identity path
  [Location <String>]: Name of the location.
  [NamespaceName <String>]: Name of the namespace.
  [ParentName <String>]: The name of the parent resource (namely, either, the topic name, domain name, or partner namespace name or namespace name).
  [ParentType <String>]: The type of the parent resource. This can be either \'topics\', \'domains\', or \'partnerNamespaces\' or \'namespaces\'.
  [PartnerDestinationName <String>]: Name of the partner destination.
  [PartnerNamespaceName <String>]: Name of the partner namespace.
  [PartnerRegistrationName <String>]: Name of the partner registration.
  [PartnerTopicName <String>]: Name of the partner topic.
  [PermissionBindingName <String>]: Name of the permission binding.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection connection.
  [PrivateLinkResourceName <String>]: The name of private link resource will be either topic, domain, partnerNamespace or namespace.
  [ProviderNamespace <String>]: Namespace of the provider of the topic.
  [ResourceGroupName <String>]: The name of the resource group within the user's subscription.
  [ResourceName <String>]: Name of the resource.
  [ResourceTypeName <String>]: Name of the resource type.
  [Scope <String>]: The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
  [SubscriptionId <String>]: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [SystemTopicName <String>]: Name of the system topic.
  [TopicName <String>]: Name of the domain topic.
  [TopicSpaceName <String>]: Name of the Topic space.
  [TopicTypeName <String>]: Name of the topic type.
  [VerifiedPartnerName <String>]: Name of the verified partner.

TOPICINPUTOBJECT <IEventGridIdentity>: Identity Parameter
  [CaCertificateName <String>]: Name of the CA certificate.
  [ChannelName <String>]: Name of the channel.
  [ClientGroupName <String>]: Name of the client group.
  [ClientName <String>]: Name of the client.
  [DomainName <String>]: Name of the domain.
  [DomainTopicName <String>]: Name of the topic.
  [EventSubscriptionName <String>]: Name of the event subscription.
  [Id <String>]: Resource identity path
  [Location <String>]: Name of the location.
  [NamespaceName <String>]: Name of the namespace.
  [ParentName <String>]: The name of the parent resource (namely, either, the topic name, domain name, or partner namespace name or namespace name).
  [ParentType <String>]: The type of the parent resource. This can be either \'topics\', \'domains\', or \'partnerNamespaces\' or \'namespaces\'.
  [PartnerDestinationName <String>]: Name of the partner destination.
  [PartnerNamespaceName <String>]: Name of the partner namespace.
  [PartnerRegistrationName <String>]: Name of the partner registration.
  [PartnerTopicName <String>]: Name of the partner topic.
  [PermissionBindingName <String>]: Name of the permission binding.
  [PrivateEndpointConnectionName <String>]: The name of the private endpoint connection connection.
  [PrivateLinkResourceName <String>]: The name of private link resource will be either topic, domain, partnerNamespace or namespace.
  [ProviderNamespace <String>]: Namespace of the provider of the topic.
  [ResourceGroupName <String>]: The name of the resource group within the user's subscription.
  [ResourceName <String>]: Name of the resource.
  [ResourceTypeName <String>]: Name of the resource type.
  [Scope <String>]: The scope of the event subscription. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
  [SubscriptionId <String>]: Subscription credentials that uniquely identify a Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
  [SystemTopicName <String>]: Name of the system topic.
  [TopicName <String>]: Name of the domain topic.
  [TopicSpaceName <String>]: Name of the Topic space.
  [TopicTypeName <String>]: Name of the topic type.
  [VerifiedPartnerName <String>]: Name of the verified partner.
.Link
https://learn.microsoft.com/powershell/module/az.eventgrid/remove-azeventgridnamespacetopiceventsubscription
#>
function Remove-AzEventGridNamespaceTopicEventSubscription {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='Delete', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteViaIdentityNamespace', Mandatory)]
    [Parameter(ParameterSetName='DeleteViaIdentityTopic', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # Name of the event subscription to be created.
    # Event subscription names must be between 3 and 100 characters in length and use alphanumeric letters only.
    ${EventSubscriptionName},

    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # Name of the namespace.
    ${NamespaceName},

    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Alias('ResourceGroup')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # The name of the resource group within the user's subscription.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Delete')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # Subscription credentials that uniquely identify a Microsoft Azure subscription.
    # The subscription ID forms part of the URI for every service call.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Delete', Mandatory)]
    [Parameter(ParameterSetName='DeleteViaIdentityNamespace', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [System.String]
    # Name of the namespace topic.
    ${TopicName},

    [Parameter(ParameterSetName='DeleteViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='DeleteViaIdentityNamespace', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity]
    # Identity Parameter
    ${NamespaceInputObject},

    [Parameter(ParameterSetName='DeleteViaIdentityTopic', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity]
    # Identity Parameter
    ${TopicInputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Delete = 'Az.EventGrid.private\Remove-AzEventGridNamespaceTopicEventSubscription_Delete';
            DeleteViaIdentity = 'Az.EventGrid.private\Remove-AzEventGridNamespaceTopicEventSubscription_DeleteViaIdentity';
            DeleteViaIdentityNamespace = 'Az.EventGrid.private\Remove-AzEventGridNamespaceTopicEventSubscription_DeleteViaIdentityNamespace';
            DeleteViaIdentityTopic = 'Az.EventGrid.private\Remove-AzEventGridNamespaceTopicEventSubscription_DeleteViaIdentityTopic';
        }
        if (('Delete') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
