// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.WebSites.Version2016_09_01
{
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DiagnosticsOperations.
    /// </summary>
    public static partial class DiagnosticsOperationsExtensions
    {
            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategories(this IDiagnosticsOperations operations, string resourceGroupName, string siteName)
            {
                return operations.ListSiteDiagnosticCategoriesAsync(resourceGroupName, siteName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesWithHttpMessagesAsync(resourceGroupName, siteName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            public static DiagnosticCategory GetSiteDiagnosticCategory(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory)
            {
                return operations.GetSiteDiagnosticCategoryAsync(resourceGroupName, siteName, diagnosticCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticCategory> GetSiteDiagnosticCategoryAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDiagnosticCategoryWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalyses(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory)
            {
                return operations.ListSiteAnalysesAsync(resourceGroupName, siteName, diagnosticCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            public static DiagnosticAnalysis GetSiteAnalysis(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName)
            {
                return operations.GetSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticAnalysis> GetSiteAnalysisAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteAnalysisWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticAnalysis ExecuteSiteAnalysis(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteAnalysisAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticAnalysis> ExecuteSiteAnalysisAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteAnalysisWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectors(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory)
            {
                return operations.ListSiteDetectorsAsync(resourceGroupName, siteName, diagnosticCategory).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            public static IPage<DetectorDefinition> GetSiteDetector(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName)
            {
                return operations.GetSiteDetectorAsync(resourceGroupName, siteName, diagnosticCategory, detectorName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> GetSiteDetectorAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticDetectorResponse ExecuteSiteDetector(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteDetectorAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticDetectorResponse> ExecuteSiteDetectorAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteDetectorWithHttpMessagesAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategoriesSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string slot)
            {
                return operations.ListSiteDiagnosticCategoriesSlotAsync(resourceGroupName, siteName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesSlotWithHttpMessagesAsync(resourceGroupName, siteName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static DiagnosticCategory GetSiteDiagnosticCategorySlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot)
            {
                return operations.GetSiteDiagnosticCategorySlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Category
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Category
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticCategory> GetSiteDiagnosticCategorySlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDiagnosticCategorySlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalysesSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot)
            {
                return operations.ListSiteAnalysesSlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            /// <param name='slot'>
            /// Slot - optional
            /// </param>
            public static DiagnosticAnalysis GetSiteAnalysisSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot)
            {
                return operations.GetSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analysis
            /// </summary>
            /// <remarks>
            /// Get Site Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Name
            /// </param>
            /// <param name='slot'>
            /// Slot - optional
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticAnalysis> GetSiteAnalysisSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteAnalysisSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticAnalysis ExecuteSiteAnalysisSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteAnalysisSlotAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Analysis
            /// </summary>
            /// <remarks>
            /// Execute Analysis
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='analysisName'>
            /// Analysis Resource Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticAnalysis> ExecuteSiteAnalysisSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string analysisName, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteAnalysisSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, analysisName, slot, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectorsSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot)
            {
                return operations.ListSiteDetectorsSlotAsync(resourceGroupName, siteName, diagnosticCategory, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            public static IPage<DetectorDefinition> GetSiteDetectorSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, string slot)
            {
                return operations.GetSiteDetectorSlotAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, slot).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Diagnostic Category
            /// </param>
            /// <param name='detectorName'>
            /// Detector Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> GetSiteDetectorSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string diagnosticCategory, string detectorName, string slot, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorSlotWithHttpMessagesAsync(resourceGroupName, siteName, diagnosticCategory, detectorName, slot, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            public static DiagnosticDetectorResponse ExecuteSiteDetectorSlot(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string))
            {
                return operations.ExecuteSiteDetectorSlotAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute Detector
            /// </summary>
            /// <remarks>
            /// Execute Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='resourceGroupName'>
            /// Name of the resource group to which the resource belongs.
            /// </param>
            /// <param name='siteName'>
            /// Site Name
            /// </param>
            /// <param name='detectorName'>
            /// Detector Resource Name
            /// </param>
            /// <param name='diagnosticCategory'>
            /// Category Name
            /// </param>
            /// <param name='slot'>
            /// Slot Name
            /// </param>
            /// <param name='startTime'>
            /// Start Time
            /// </param>
            /// <param name='endTime'>
            /// End Time
            /// </param>
            /// <param name='timeGrain'>
            /// Time Grain
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DiagnosticDetectorResponse> ExecuteSiteDetectorSlotAsync(this IDiagnosticsOperations operations, string resourceGroupName, string siteName, string detectorName, string diagnosticCategory, string slot, System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSiteDetectorSlotWithHttpMessagesAsync(resourceGroupName, siteName, detectorName, diagnosticCategory, slot, startTime, endTime, timeGrain, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategoriesNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDiagnosticCategoriesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalysesNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteAnalysesNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectorsNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDetectorsNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorDefinition> GetSiteDetectorNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.GetSiteDetectorNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> GetSiteDetectorNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DiagnosticCategory> ListSiteDiagnosticCategoriesSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDiagnosticCategoriesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Diagnostics Categories
            /// </summary>
            /// <remarks>
            /// Get Diagnostics Categories
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DiagnosticCategory>> ListSiteDiagnosticCategoriesSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDiagnosticCategoriesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<AnalysisDefinition> ListSiteAnalysesSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteAnalysesSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Site Analyses
            /// </summary>
            /// <remarks>
            /// Get Site Analyses
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<AnalysisDefinition>> ListSiteAnalysesSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteAnalysesSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorDefinition> ListSiteDetectorsSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.ListSiteDetectorsSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detectors
            /// </summary>
            /// <remarks>
            /// Get Detectors
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> ListSiteDetectorsSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ListSiteDetectorsSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            public static IPage<DetectorDefinition> GetSiteDetectorSlotNext(this IDiagnosticsOperations operations, string nextPageLink)
            {
                return operations.GetSiteDetectorSlotNextAsync(nextPageLink).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Detector
            /// </summary>
            /// <remarks>
            /// Get Detector
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='nextPageLink'>
            /// The NextLink from the previous successful call to List operation.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IPage<DetectorDefinition>> GetSiteDetectorSlotNextAsync(this IDiagnosticsOperations operations, string nextPageLink, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSiteDetectorSlotNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
