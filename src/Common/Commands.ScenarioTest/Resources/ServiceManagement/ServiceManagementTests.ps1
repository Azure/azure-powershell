# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.SYNOPSIS
Tests Create-AzureVM with valid information.
#>
function Test-GetAzureVM
{
    # Setup

    $location = Get-DefaultLocation
    $imgName = Get-DefaultImage $location


    $storageName = getAssetName
    New-AzureStorageAccount -StorageAccountName $storageName -Location $location

    Set-CurrentStorageAccountName $storageName

    $vmName = "vm1"
    $svcName = Get-CloudServiceName

    # Test
    New-AzureService -ServiceName $svcName -Location $location
    New-AzureQuickVM -Windows -ImageName $imgName -Name $vmName -ServiceName $svcName -AdminUsername "pstestuser" -Password "p@ssw0rd"

    Get-AzureVM -ServiceName $svcName -Name $vmName


    # Cleanup
    Cleanup-CloudService $svcName
}


<#
.SYNOPSIS
Test Get-AzureLocation
#>
function Test-GetAzureLocation
{
    $locations = Get-AzureLocation;

    foreach ($loc in $locations)
    {
        $svcName = getAssetName;
        $st = New-AzureService -ServiceName $svcName -Location $loc.Name;
        
        # Cleanup
        Cleanup-CloudService $svcName
    }
}

# Test Service Management Cloud Exception
function Run-ServiceManagementCloudExceptionTests
{
    $compare = "*OperationID : `'*`'";
    Assert-ThrowsLike { $st = Get-AzureService -ServiceName '*' } $compare;
    Assert-ThrowsLike { $st = Get-AzureVM -ServiceName '*' } $compare;
    Assert-ThrowsLike { $st = Get-AzureAffinityGroup -Name '*' } $compare;
}

# Test Start/Stop-AzureVM for Multiple VMs
function Run-StartAndStopMultipleVirtualMachinesTest
{
    # Setup
    $location = Get-DefaultLocation;
    $imgName = Get-DefaultImage $location;

    $storageName = 'pstest' + (getAssetName);
    New-AzureStorageAccount -StorageAccountName $storageName -Location $location;

    # Associate the new storage account with the current subscription
    Set-CurrentStorageAccountName $storageName;

    $vmNameList = @("vm01", "vm02", "test04");
    $svcName = 'pstest' + (Get-CloudServiceName);
    $userName = "pstestuser";
    $password = "p@ssw0rd";

    # Test
    New-AzureService -ServiceName $svcName -Location $location;

    try
    {
        foreach ($vmName in $vmNameList)
        {
            New-AzureQuickVM -Windows -ImageName $imgName -Name $vmName -ServiceName $svcName -AdminUsername $userName -Password $password;
        }

        # Get VM List
        $vmList = Get-AzureVM -ServiceName $svcName;

        # Test Stop
        Stop-AzureVM -Force -ServiceName $svcName -Name $vmNameList[0];
        Stop-AzureVM -Force -ServiceName $svcName -Name $vmNameList[0],$vmNameList[1];
        Stop-AzureVM -Force -ServiceName $svcName -Name $vmNameList;
        Stop-AzureVM -Force -ServiceName $svcName -Name '*';
        Stop-AzureVM -Force -ServiceName $svcName -Name 'vm*';
        Stop-AzureVM -Force -ServiceName $svcName -Name 'vm*','test*';
        Stop-AzureVM -Force -ServiceName $svcName -VM $vmList[0];
        Stop-AzureVM -Force -ServiceName $svcName -VM $vmList[0],$vmList[1];
        Stop-AzureVM -Force -ServiceName $svcName -VM $vmList;

        # Test Start
        Start-AzureVM -ServiceName $svcName -Name $vmNameList[0];
        Start-AzureVM -ServiceName $svcName -Name $vmNameList[0],$vmNameList[1];
        Start-AzureVM -ServiceName $svcName -Name $vmNameList;
        Start-AzureVM -ServiceName $svcName -Name '*';
        Start-AzureVM -ServiceName $svcName -Name 'vm*';
        Start-AzureVM -ServiceName $svcName -Name 'vm*','test*';
        Start-AzureVM -ServiceName $svcName -VM $vmList[0];
        Start-AzureVM -ServiceName $svcName -VM $vmList[0],$vmList[1];
        Start-AzureVM -ServiceName $svcName -VM $vmList;
    }
    finally
    {
        # Cleanup
        Cleanup-CloudService $svcName;
    }
}

# Run Auto-Generated Hosted Service Cmdlet Tests
function Run-AutoGeneratedHostedServiceCmdletTests
{
    # Setup
    $location = Get-DefaultLocation;
    $imgName = Get-DefaultImage $location;

    $storageName = 'pstest' + (getAssetName);
    New-AzureStorageAccount -StorageAccountName $storageName -Location $location;

    # Associate the new storage account with the current subscription
    Set-CurrentStorageAccountName $storageName;

    $vmNameList = @("vm01", "vm02", "test04");
    $svcName = 'pstest' + (Get-CloudServiceName);
    $userName = "pstestuser";
    $password = "p@ssw0rd";

    try
    {
        # Create Parameters
        $svcCreateParams = New-AzureHostedServiceCreateParameters;
        $svcCreateParams.ServiceName = $svcName;
        $svcCreateParams.Location = $location;
        $svcCreateParams.Description = $svcName;
        $svcCreateParams.Label = $svcName;

        # Invoke Create
        $st = Invoke-AzureHostedServiceCreateMethod -Parameters $svcCreateParams;

        Assert-AreEqual $st.StatusCode 'Created';
        Assert-NotNull $st.RequestId;

        # Invoke Get
        $svcGetResult = Invoke-AzureHostedServiceGetMethod -ServiceName $svcName;
        Assert-AreEqual $svcGetResult.ServiceName $svcName;
        Assert-AreEqual $svcGetResult.Properties.Description $svcName;
        Assert-AreEqual $svcGetResult.Properties.Label $svcName;

        # Update Parameters
        $svcUpdateParams = New-AzureHostedServiceUpdateParameters;
        $svcUpdateParams.Description = 'update1';
        $svcUpdateParams.Label = 'update2';

        # Invoke Update
        $svcGetResult2 = Invoke-AzureHostedServiceUpdateMethod -ServiceName $svcName -Parameters $svcUpdateParams;

        # Invoke Get
        $svcGetResult2 = Invoke-AzureHostedServiceGetMethod -ServiceName $svcName;
        Assert-AreEqual $svcGetResult2.ServiceName $svcName;
        Assert-AreEqual $svcGetResult2.Properties.Description $svcUpdateParams.Description;
        Assert-AreEqual $svcGetResult2.Properties.Label $svcUpdateParams.Label;

        # Invoke List
        $svcListResult = Invoke-AzureHostedServiceListMethod;
        Assert-True { ($svcListResult | where { $_.ServiceName -eq $svcName }).Count -gt 0 };

        # Invoke Delete
        $st = Invoke-AzureHostedServiceDeleteMethod -ServiceName $svcName;
        Assert-AreEqual $st.StatusCode 'OK';
        Assert-NotNull $st.RequestId;
    }
    finally
    {
        # Cleanup
        Cleanup-CloudService $svcName;
    }
}

# Run Auto-Generated Virtual Machine Cmdlet Tests
function Run-AutoGeneratedVirtualMachineCmdletTests
{
    # Setup
    $location = Get-DefaultLocation;

    $storageName = 'pstest' + (getAssetName);
    New-AzureStorageAccount -StorageAccountName $storageName -Location $location;

    # Associate the new storage account with the current subscription
    Set-CurrentStorageAccountName $storageName;

    $svcName = 'pstest' + (Get-CloudServiceName);
    $userName = "pstestuser";
    $password = "p@ssw0rd";

    try
    {
        # Create Hosted Service Parameters
        $svcCreateParams = New-AzureHostedServiceCreateParameters;
        $svcCreateParams.ServiceName = $svcName;
        $svcCreateParams.Location = $location;
        $svcCreateParams.Description = $svcName;
        $svcCreateParams.Label = $svcName;

        # Invoke Hosted Service Create
        $st = Invoke-AzureHostedServiceCreateMethod -Parameters $svcCreateParams;
        Assert-AreEqual $st.StatusCode 'Created';
        Assert-NotNull $st.RequestId;

        # Invoke Hosted Service Get
        $svcGetResult = Invoke-AzureHostedServiceGetMethod -ServiceName $svcName;
        Assert-AreEqual $svcGetResult.ServiceName $svcName;
        Assert-AreEqual $svcGetResult.Properties.Description $svcName;
        Assert-AreEqual $svcGetResult.Properties.Label $svcName;

        # Invoke Virtual Machine OS Image List
        $images = (Invoke-AzureVirtualMachineOSImageListMethod).Images
        $image = $images | where { $_.OperatingSystemType -eq 'Windows' -and $_.LogicalSizeInGB -le 100 } | select -First 1;

        # Create Virtual Machine Deployment Create Parameters
        $vmDeployment = New-AzureVirtualMachineCreateDeploymentParameters;
        $vmDeployment.Name = $svcName;
        $vmDeployment.Label = $svcName;
        $vmDeployment.DeploymentSlot = 'Production';
        $vmDeployment.Roles = New-AzureVirtualMachineRoleList;
        $vmDeployment.Roles.Add((New-AzureVirtualMachineRole));
        $vmDeployment.Roles[0].RoleName = $svcName;
        $vmDeployment.Roles[0].RoleSize = 'Large';
        $vmDeployment.Roles[0].RoleType = 'PersistentVMRole';
        $vmDeployment.Roles[0].ProvisionGuestAgent = $false;
        $vmDeployment.Roles[0].ResourceExtensionReferences = $null;
        $vmDeployment.Roles[0].DataVirtualHardDisks = $null;
        $vmDeployment.Roles[0].OSVirtualHardDisk = New-AzureVirtualMachineOSVirtualHardDisk;
        $vmDeployment.Roles[0].OSVirtualHardDisk.SourceImageName = $image.Name;
        $vmDeployment.Roles[0].OSVirtualHardDisk.MediaLink = "http://${storageName}.blob.core.windows.net/myvhds/${svcName}.vhd";
        $vmDeployment.Roles[0].OSVirtualHardDisk.ResizedSizeInGB = 128;
        $vmDeployment.Roles[0].OSVirtualHardDisk.HostCaching = 'ReadWrite';
        $vmDeployment.Roles[0].ConfigurationSets = New-AzureVirtualMachineConfigurationSetList;
        $vmDeployment.Roles[0].ConfigurationSets.Add((New-AzureVirtualMachineConfigurationSet));
        $vmDeployment.Roles[0].ConfigurationSets[0].ConfigurationSetType = "WindowsProvisioningConfiguration";
        $vmDeployment.Roles[0].ConfigurationSets[0].AdminUserName = $userName;
        $vmDeployment.Roles[0].ConfigurationSets[0].AdminPassword = $password;
        $vmDeployment.Roles[0].ConfigurationSets[0].ComputerName = 'test';
        $vmDeployment.Roles[0].ConfigurationSets[0].HostName = "${svcName}.cloudapp.net";
        $vmDeployment.Roles[0].ConfigurationSets[0].EnableAutomaticUpdates = $false;
        $vmDeployment.Roles[0].ConfigurationSets[0].TimeZone = "Pacific Standard Time";

        # Invoke Virtual Machine Create Deployment
        $st = Invoke-AzureVirtualMachineCreateDeploymentMethod -ServiceName $svcName -Parameters $vmDeployment;
        Assert-AreEqual $st.StatusCode 'OK';
        Assert-NotNull $st.RequestId;

        # Invoke Virtual Machine Get
        $st = Invoke-AzureVirtualMachineGetMethod -ServiceName $svcName -DeploymentName $svcName -VirtualMachineName $svcName;
        Assert-AreEqual $st.RoleName $svcName;

        # Invoke Hosted Service Delete
        $st = Invoke-AzureHostedServiceDeleteAllMethod -ServiceName $svcName;
        Assert-AreEqual $st.StatusCode 'OK';
        Assert-NotNull $st.RequestId;
    }
    finally
    {
        # Cleanup
        Cleanup-CloudService $svcName;
    }
}