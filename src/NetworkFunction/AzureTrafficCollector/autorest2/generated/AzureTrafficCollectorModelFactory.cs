// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Linq;

namespace AzureTrafficCollector.Models
{
    /// <summary> Model factory for read-only models. </summary>
    public static partial class AzureTrafficCollectorModelFactory
    {
        /// <summary> Initializes a new instance of Operation. </summary>
        /// <param name="name"> Operation name: {provider}/{resource}/{operation}. </param>
        /// <param name="isDataAction"> Indicates whether the operation is a data action. </param>
        /// <param name="display"> Display metadata associated with the operation. </param>
        /// <param name="origin"> Origin of the operation. </param>
        /// <returns> A new <see cref="AzureTrafficCollector.Models.Operation"/> instance for mocking. </returns>
        public static Operation Operation(string name = null, bool? isDataAction = null, OperationDisplay display = null, string origin = null)
        {
            return new Operation(name, isDataAction, display, origin);
        }

        /// <summary> Initializes a new instance of OperationDisplay. </summary>
        /// <param name="provider"> Service provider: Microsoft NetworkFunction. </param>
        /// <param name="resource"> Resource on which the operation is performed etc. </param>
        /// <param name="operation"> Type of operation: get, read, delete, etc. </param>
        /// <param name="description"> Description of the operation. </param>
        /// <returns> A new <see cref="AzureTrafficCollector.Models.OperationDisplay"/> instance for mocking. </returns>
        public static OperationDisplay OperationDisplay(string provider = null, string resource = null, string operation = null, string description = null)
        {
            return new OperationDisplay(provider, resource, operation, description);
        }

        /// <summary> Initializes a new instance of AzureTrafficCollector. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="collectorPolicies"> Collector Policies for Azure Traffic Collector. </param>
        /// <param name="virtualHub"> The virtualHub to which the Azure Traffic Collector belongs. </param>
        /// <param name="provisioningState"> The provisioning state of the application rule collection resource. </param>
        /// <returns> A new <see cref="AzureTrafficCollector.Models.AzureTrafficCollector"/> instance for mocking. </returns>
        public static AzureTrafficCollector AzureTrafficCollector(string id = null, string name = null, string type = null, string location = null, IReadOnlyDictionary<string, string> tags = null, string etag = null, IEnumerable<CollectorPolicy> collectorPolicies = null, ResourceReference virtualHub = null, ProvisioningState? provisioningState = null)
        {
            tags ??= new Dictionary<string, string>();
            collectorPolicies ??= new List<CollectorPolicy>();

            return new AzureTrafficCollector(id, name, type, location, tags, etag, collectorPolicies?.ToList(), virtualHub, provisioningState);
        }

        /// <summary> Initializes a new instance of CollectorPolicy. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> The name of Collection Policy in a Traffic Collector. </param>
        /// <param name="etag"> A unique read-only string that changes whenever the resource is updated. </param>
        /// <param name="type"> The type of resource. </param>
        /// <param name="ingestionPolicy"> Ingestion policies. </param>
        /// <param name="emissionPolicies"> Emission policies. </param>
        /// <param name="provisioningState"> The provisioning state. </param>
        /// <returns> A new <see cref="AzureTrafficCollector.Models.CollectorPolicy"/> instance for mocking. </returns>
        public static CollectorPolicy CollectorPolicy(string id = null, string name = null, string etag = null, string type = null, IngestionPolicyPropertiesFormat ingestionPolicy = null, IEnumerable<EmissionPoliciesPropertiesFormat> emissionPolicies = null, ProvisioningState? provisioningState = null)
        {
            emissionPolicies ??= new List<EmissionPoliciesPropertiesFormat>();

            return new CollectorPolicy(id, name, etag, type, ingestionPolicy, emissionPolicies?.ToList(), provisioningState);
        }

        /// <summary> Initializes a new instance of ResourceReference. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <returns> A new <see cref="AzureTrafficCollector.Models.ResourceReference"/> instance for mocking. </returns>
        public static ResourceReference ResourceReference(string id = null)
        {
            return new ResourceReference(id);
        }

        /// <summary> Initializes a new instance of Resource. </summary>
        /// <param name="id"> Resource ID. </param>
        /// <param name="name"> Resource name. </param>
        /// <param name="type"> Resource type. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <returns> A new <see cref="AzureTrafficCollector.Models.Resource"/> instance for mocking. </returns>
        public static Resource Resource(string id = null, string name = null, string type = null, string location = null, IReadOnlyDictionary<string, string> tags = null)
        {
            tags ??= new Dictionary<string, string>();

            return new Resource(id, name, type, location, tags);
        }
    }
}
