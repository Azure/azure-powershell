// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using AzureTrafficCollector.Models;

namespace AzureTrafficCollector
{
    internal partial class AzureTrafficCollectorsRestClient
    {
        private readonly HttpPipeline _pipeline;
        private readonly string _subscriptionId;
        private readonly Uri _endpoint;
        private readonly string _apiVersion;

        /// <summary> The ClientDiagnostics is used to provide tracing support for the client library. </summary>
        internal ClientDiagnostics ClientDiagnostics { get; }

        /// <summary> Initializes a new instance of AzureTrafficCollectorsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> Azure Subscription ID. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="clientDiagnostics"/>, <paramref name="pipeline"/>, <paramref name="subscriptionId"/> or <paramref name="apiVersion"/> is null. </exception>
        /// <exception cref="ArgumentException"> <paramref name="subscriptionId"/> is an empty string, and was expected to be non-empty. </exception>
        public AzureTrafficCollectorsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2021-09-01-preview")
        {
            ClientDiagnostics = clientDiagnostics ?? throw new ArgumentNullException(nameof(clientDiagnostics));
            _pipeline = pipeline ?? throw new ArgumentNullException(nameof(pipeline));
            _subscriptionId = subscriptionId ?? throw new ArgumentNullException(nameof(subscriptionId));
            _endpoint = endpoint ?? new Uri("https://management.azure.com");
            _apiVersion = apiVersion ?? throw new ArgumentNullException(nameof(apiVersion));
        }

        internal HttpMessage CreateGetRequest(string resourceGroupName, string azureTrafficCollectorName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.NetworkFunction/azureTrafficCollectors/", false);
            uri.AppendPath(azureTrafficCollectorName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Gets the specified Azure Traffic Collector in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="azureTrafficCollectorName"/> is null. </exception>
        public async Task<Response<Models.AzureTrafficCollector>> GetAsync(string resourceGroupName, string azureTrafficCollectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }

            using var message = CreateGetRequest(resourceGroupName, azureTrafficCollectorName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.AzureTrafficCollector value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.AzureTrafficCollector.DeserializeAzureTrafficCollector(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the specified Azure Traffic Collector in a specified resource group. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="azureTrafficCollectorName"/> is null. </exception>
        public Response<Models.AzureTrafficCollector> Get(string resourceGroupName, string azureTrafficCollectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }

            using var message = CreateGetRequest(resourceGroupName, azureTrafficCollectorName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.AzureTrafficCollector value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.AzureTrafficCollector.DeserializeAzureTrafficCollector(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateOrUpdateRequest(string resourceGroupName, string azureTrafficCollectorName, string location, IDictionary<string, string> tags, IEnumerable<CollectorPolicy> collectorPolicies, ResourceReference virtualHub)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.NetworkFunction/azureTrafficCollectors/", false);
            uri.AppendPath(azureTrafficCollectorName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            Models.AzureTrafficCollector azureTrafficCollector = new Models.AzureTrafficCollector()
            {
                Location = location,
                VirtualHub = virtualHub
            };
            if (tags != null)
            {
                foreach (var value in tags)
                {
                    azureTrafficCollector.Tags.Add(value);
                }
            }
            if (collectorPolicies != null)
            {
                foreach (var value in collectorPolicies)
                {
                    azureTrafficCollector.CollectorPolicies.Add(value);
                }
            }
            var model = azureTrafficCollector;
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(model);
            request.Content = content;
            return message;
        }

        /// <summary> Creates or updates a Azure Traffic Collector resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="collectorPolicies"> Collector Policies for Azure Traffic Collector. </param>
        /// <param name="virtualHub"> The virtualHub to which the Azure Traffic Collector belongs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="azureTrafficCollectorName"/> is null. </exception>
        public async Task<Response> CreateOrUpdateAsync(string resourceGroupName, string azureTrafficCollectorName, string location = null, IDictionary<string, string> tags = null, IEnumerable<CollectorPolicy> collectorPolicies = null, ResourceReference virtualHub = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }

            using var message = CreateCreateOrUpdateRequest(resourceGroupName, azureTrafficCollectorName, location, tags, collectorPolicies, virtualHub);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates or updates a Azure Traffic Collector resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="location"> Resource location. </param>
        /// <param name="tags"> Resource tags. </param>
        /// <param name="collectorPolicies"> Collector Policies for Azure Traffic Collector. </param>
        /// <param name="virtualHub"> The virtualHub to which the Azure Traffic Collector belongs. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="azureTrafficCollectorName"/> is null. </exception>
        public Response CreateOrUpdate(string resourceGroupName, string azureTrafficCollectorName, string location = null, IDictionary<string, string> tags = null, IEnumerable<CollectorPolicy> collectorPolicies = null, ResourceReference virtualHub = null, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }

            using var message = CreateCreateOrUpdateRequest(resourceGroupName, azureTrafficCollectorName, location, tags, collectorPolicies, virtualHub);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 201:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(string resourceGroupName, string azureTrafficCollectorName)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.NetworkFunction/azureTrafficCollectors/", false);
            uri.AppendPath(azureTrafficCollectorName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            return message;
        }

        /// <summary> Deletes a specified Azure Traffic Collector resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="azureTrafficCollectorName"/> is null. </exception>
        public async Task<Response> DeleteAsync(string resourceGroupName, string azureTrafficCollectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }

            using var message = CreateDeleteRequest(resourceGroupName, azureTrafficCollectorName);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a specified Azure Traffic Collector resource. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/> or <paramref name="azureTrafficCollectorName"/> is null. </exception>
        public Response Delete(string resourceGroupName, string azureTrafficCollectorName, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }

            using var message = CreateDeleteRequest(resourceGroupName, azureTrafficCollectorName);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                case 202:
                case 204:
                    return message.Response;
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateTagsRequest(string resourceGroupName, string azureTrafficCollectorName, TagsObject parameters)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Patch;
            var uri = new RawRequestUriBuilder();
            uri.Reset(_endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(_subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.NetworkFunction/azureTrafficCollectors/", false);
            uri.AppendPath(azureTrafficCollectorName, true);
            uri.AppendQuery("api-version", _apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(parameters);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the specified Azure Traffic Collector tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="parameters"> Parameters supplied to update Azure Traffic Collector tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="azureTrafficCollectorName"/> or <paramref name="parameters"/> is null. </exception>
        public async Task<Response<Models.AzureTrafficCollector>> UpdateTagsAsync(string resourceGroupName, string azureTrafficCollectorName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateTagsRequest(resourceGroupName, azureTrafficCollectorName, parameters);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.AzureTrafficCollector value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = Models.AzureTrafficCollector.DeserializeAzureTrafficCollector(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await ClientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the specified Azure Traffic Collector tags. </summary>
        /// <param name="resourceGroupName"> The name of the resource group. </param>
        /// <param name="azureTrafficCollectorName"> Azure Traffic Collector name. </param>
        /// <param name="parameters"> Parameters supplied to update Azure Traffic Collector tags. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="resourceGroupName"/>, <paramref name="azureTrafficCollectorName"/> or <paramref name="parameters"/> is null. </exception>
        public Response<Models.AzureTrafficCollector> UpdateTags(string resourceGroupName, string azureTrafficCollectorName, TagsObject parameters, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (azureTrafficCollectorName == null)
            {
                throw new ArgumentNullException(nameof(azureTrafficCollectorName));
            }
            if (parameters == null)
            {
                throw new ArgumentNullException(nameof(parameters));
            }

            using var message = CreateUpdateTagsRequest(resourceGroupName, azureTrafficCollectorName, parameters);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        Models.AzureTrafficCollector value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = Models.AzureTrafficCollector.DeserializeAzureTrafficCollector(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw ClientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
