// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Extensions;

    /// <summary>The VM Template inventory item.</summary>
    public partial class VirtualMachineTemplateInventoryItem
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IVirtualMachineTemplateInventoryItem.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IVirtualMachineTemplateInventoryItem.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IVirtualMachineTemplateInventoryItem FromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json ? new VirtualMachineTemplateInventoryItem(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="VirtualMachineTemplateInventoryItem" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode"
        /// />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="VirtualMachineTemplateInventoryItem" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            __inventoryItemProperties?.ToJson(container, serializationMode);
            AddIf( null != this._memorySizeMb ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((int)this._memorySizeMb) : null, "memorySizeMB" ,container.Add );
            AddIf( null != this._numCpUs ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((int)this._numCpUs) : null, "numCPUs" ,container.Add );
            AddIf( null != this._numCoresPerSocket ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((int)this._numCoresPerSocket) : null, "numCoresPerSocket" ,container.Add );
            AddIf( null != (((object)this._oSType)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._oSType.ToString()) : null, "osType" ,container.Add );
            AddIf( null != (((object)this._oSName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._oSName.ToString()) : null, "osName" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._toolsVersionStatus)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._toolsVersionStatus.ToString()) : null, "toolsVersionStatus" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._toolsVersion)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._toolsVersion.ToString()) : null, "toolsVersion" ,container.Add );
            }
            AddIf( null != (((object)this._folderPath)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._folderPath.ToString()) : null, "folderPath" ,container.Add );
            AfterToJson(ref container);
            return container;
        }

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject into a new instance of <see cref="VirtualMachineTemplateInventoryItem" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal VirtualMachineTemplateInventoryItem(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            __inventoryItemProperties = new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.InventoryItemProperties(json);
            {_memorySizeMb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("memorySizeMB"), out var __jsonMemorySizeMb) ? (int?)__jsonMemorySizeMb : _memorySizeMb;}
            {_numCpUs = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("numCPUs"), out var __jsonNumCpUs) ? (int?)__jsonNumCpUs : _numCpUs;}
            {_numCoresPerSocket = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("numCoresPerSocket"), out var __jsonNumCoresPerSocket) ? (int?)__jsonNumCoresPerSocket : _numCoresPerSocket;}
            {_oSType = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("osType"), out var __jsonOSType) ? (string)__jsonOSType : (string)_oSType;}
            {_oSName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("osName"), out var __jsonOSName) ? (string)__jsonOSName : (string)_oSName;}
            {_toolsVersionStatus = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("toolsVersionStatus"), out var __jsonToolsVersionStatus) ? (string)__jsonToolsVersionStatus : (string)_toolsVersionStatus;}
            {_toolsVersion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("toolsVersion"), out var __jsonToolsVersion) ? (string)__jsonToolsVersion : (string)_toolsVersion;}
            {_folderPath = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("folderPath"), out var __jsonFolderPath) ? (string)__jsonFolderPath : (string)_folderPath;}
            AfterFromJson(json);
        }
    }
}