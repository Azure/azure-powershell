// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Search.Models
{
    using System.Linq;

    /// <summary>
    /// Network specific rules that determine how the Azure AI Search service may
    /// be reached.
    /// </summary>
    public partial class NetworkRuleSet
    {
        /// <summary>
        /// Initializes a new instance of the NetworkRuleSet class.
        /// </summary>
        public NetworkRuleSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkRuleSet class.
        /// </summary>

        /// <param name="ipRules">A list of IP restriction rules that defines the inbound network(s) with
        /// allowing access to the search service endpoint. At the meantime, all other
        /// public IP networks are blocked by the firewall. These restriction rules are
        /// applied only when the &#39;publicNetworkAccess&#39; of the search service is
        /// &#39;enabled&#39;; otherwise, traffic over public interface is not allowed even
        /// with any public IP rules, and private endpoint connections would be the
        /// exclusive access method.
        /// </param>

        /// <param name="bypass">Possible origins of inbound traffic that can bypass the rules defined in
        /// the &#39;ipRules&#39; section.
        /// Possible values include: &#39;None&#39;, &#39;AzureServices&#39;</param>
        public NetworkRuleSet(System.Collections.Generic.IList<IpRule> ipRules = default(System.Collections.Generic.IList<IpRule>), string bypass = default(string))

        {
            this.IPRules = ipRules;
            this.Bypass = bypass;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a list of IP restriction rules that defines the inbound
        /// network(s) with allowing access to the search service endpoint. At the
        /// meantime, all other public IP networks are blocked by the firewall. These
        /// restriction rules are applied only when the &#39;publicNetworkAccess&#39; of the
        /// search service is &#39;enabled&#39;; otherwise, traffic over public interface is
        /// not allowed even with any public IP rules, and private endpoint connections
        /// would be the exclusive access method.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipRules")]
        public System.Collections.Generic.IList<IpRule> IPRules {get; set; }

        /// <summary>
        /// Gets or sets possible origins of inbound traffic that can bypass the rules
        /// defined in the &#39;ipRules&#39; section. Possible values include: &#39;None&#39;, &#39;AzureServices&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "bypass")]
        public string Bypass {get; set; }
    }
}