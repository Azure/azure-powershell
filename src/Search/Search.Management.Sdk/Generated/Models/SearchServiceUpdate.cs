// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Search.Models
{
    using System.Linq;

    /// <summary>
    /// The parameters used to update an Azure Cognitive Search service.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SearchServiceUpdate : Resource
    {
        /// <summary>
        /// Initializes a new instance of the SearchServiceUpdate class.
        /// </summary>
        public SearchServiceUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SearchServiceUpdate class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="sku">The SKU of the Search Service, which determines price tier and capacity
        /// limits. This property is required when creating a new Search Service.
        /// </param>

        /// <param name="location">The geographic location of the resource. This must be one of the supported
        /// and registered Azure Geo Regions (for example, West US, East US, Southeast
        /// Asia, and so forth). This property is required when creating a new
        /// resource.
        /// </param>

        /// <param name="tags">Tags to help categorize the resource in the Azure portal.
        /// </param>

        /// <param name="identity">The identity of the resource.
        /// </param>

        /// <param name="hostingMode">Applicable only for the standard3 SKU. You can set this property to enable
        /// up to 3 high density partitions that allow up to 1000 indexes, which is
        /// much higher than the maximum indexes allowed for any other SKU. For the
        /// standard3 SKU, the value is either &#39;default&#39; or &#39;highDensity&#39;. For all
        /// other SKUs, this value must be &#39;default&#39;.
        /// Possible values include: 'default', 'highDensity'</param>

        /// <param name="provisioningState">The state of the last provisioning operation performed on the search
        /// service. Provisioning is an intermediate state that occurs while service
        /// capacity is being established. After capacity is set up, provisioningState
        /// changes to either &#39;succeeded&#39; or &#39;failed&#39;. Client applications can poll
        /// provisioning status (the recommended polling interval is from 30 seconds to
        /// one minute) by using the Get Search Service operation to see when an
        /// operation is completed. If you are using the free service, this value tends
        /// to come back as &#39;succeeded&#39; directly in the call to Create search service.
        /// This is because the free service uses capacity that is already set up.
        /// Possible values include: 'succeeded', 'provisioning', 'failed'</param>

        /// <param name="replicaCount">The number of replicas in the search service. If specified, it must be a
        /// value between 1 and 12 inclusive for standard SKUs or between 1 and 3
        /// inclusive for basic SKU.
        /// </param>

        /// <param name="partitionCount">The number of partitions in the search service; if specified, it can be 1,
        /// 2, 3, 4, 6, or 12. Values greater than 1 are only valid for standard SKUs.
        /// For &#39;standard3&#39; services with hostingMode set to &#39;highDensity&#39;, the allowed
        /// values are between 1 and 3.
        /// </param>

        /// <param name="publicNetworkAccess">This value can be set to &#39;enabled&#39; to avoid breaking changes on existing
        /// customer resources and templates. If set to &#39;disabled&#39;, traffic over public
        /// interface is not allowed, and private endpoint connections would be the
        /// exclusive access method.
        /// Possible values include: 'enabled', 'disabled'</param>

        /// <param name="status">The status of the search service. Possible values include: &#39;running&#39;: The
        /// search service is running and no provisioning operations are underway.
        /// &#39;provisioning&#39;: The search service is being provisioned or scaled up or
        /// down. &#39;deleting&#39;: The search service is being deleted. &#39;degraded&#39;: The
        /// search service is degraded. This can occur when the underlying search units
        /// are not healthy. The search service is most likely operational, but
        /// performance might be slow and some requests might be dropped. &#39;disabled&#39;:
        /// The search service is disabled. In this state, the service will reject all
        /// API requests. &#39;error&#39;: The search service is in an error state. If your
        /// service is in the degraded, disabled, or error states, it means the Azure
        /// Cognitive Search team is actively investigating the underlying issue.
        /// Dedicated services in these states are still chargeable based on the number
        /// of search units provisioned.
        /// Possible values include: 'running', 'provisioning', 'deleting', 'degraded',
        /// 'disabled', 'error'</param>

        /// <param name="statusDetails">The details of the search service status.
        /// </param>

        /// <param name="networkRuleSet">Network specific rules that determine how the Azure Cognitive Search
        /// service may be reached.
        /// </param>

        /// <param name="encryptionWithCmk">Specifies any policy regarding encryption of resources (such as indexes)
        /// using customer manager keys within a search service.
        /// </param>

        /// <param name="disableLocalAuth">When set to true, calls to the search service will not be permitted to
        /// utilize API keys for authentication. This cannot be set to true if
        /// &#39;dataPlaneAuthOptions&#39; are defined.
        /// </param>

        /// <param name="authOptions">Defines the options for how the data plane API of a search service
        /// authenticates requests. This cannot be set if &#39;disableLocalAuth&#39; is set to
        /// true.
        /// </param>

        /// <param name="privateEndpointConnections">The list of private endpoint connections to the Azure Cognitive Search
        /// service.
        /// </param>

        /// <param name="semanticSearch">Sets options that control the availability of semantic search. This
        /// configuration is only possible for certain Azure Cognitive Search SKUs in
        /// certain locations.
        /// Possible values include: 'disabled', 'free', 'standard'</param>

        /// <param name="sharedPrivateLinkResources">The list of shared private link resources managed by the Azure Cognitive
        /// Search service.
        /// </param>
        public SearchServiceUpdate(string id = default(string), string name = default(string), string type = default(string), Sku sku = default(Sku), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Identity identity = default(Identity), HostingMode? hostingMode = default(HostingMode?), ProvisioningState? provisioningState = default(ProvisioningState?), int? replicaCount = default(int?), int? partitionCount = default(int?), PublicNetworkAccess? publicNetworkAccess = default(PublicNetworkAccess?), SearchServiceStatus? status = default(SearchServiceStatus?), string statusDetails = default(string), NetworkRuleSet networkRuleSet = default(NetworkRuleSet), EncryptionWithCmk encryptionWithCmk = default(EncryptionWithCmk), bool? disableLocalAuth = default(bool?), DataPlaneAuthOptions authOptions = default(DataPlaneAuthOptions), System.Collections.Generic.IList<PrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<PrivateEndpointConnection>), string semanticSearch = default(string), System.Collections.Generic.IList<SharedPrivateLinkResource> sharedPrivateLinkResources = default(System.Collections.Generic.IList<SharedPrivateLinkResource>))

        : base(id, name, type)
        {
            this.Sku = sku;
            this.Location = location;
            this.Tags = tags;
            this.Identity = identity;
            this.HostingMode = hostingMode;
            this.ProvisioningState = provisioningState;
            this.ReplicaCount = replicaCount;
            this.PartitionCount = partitionCount;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.Status = status;
            this.StatusDetails = statusDetails;
            this.NetworkRuleSet = networkRuleSet;
            this.EncryptionWithCmk = encryptionWithCmk;
            this.DisableLocalAuth = disableLocalAuth;
            this.AuthOptions = authOptions;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.SemanticSearch = semanticSearch;
            this.SharedPrivateLinkResources = sharedPrivateLinkResources;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the SKU of the Search Service, which determines price tier and
        /// capacity limits. This property is required when creating a new Search
        /// Service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets the geographic location of the resource. This must be one of
        /// the supported and registered Azure Geo Regions (for example, West US, East
        /// US, Southeast Asia, and so forth). This property is required when creating
        /// a new resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets tags to help categorize the resource in the Azure portal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the identity of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public Identity Identity {get; set; }

        /// <summary>
        /// Gets or sets applicable only for the standard3 SKU. You can set this
        /// property to enable up to 3 high density partitions that allow up to 1000
        /// indexes, which is much higher than the maximum indexes allowed for any
        /// other SKU. For the standard3 SKU, the value is either &#39;default&#39; or
        /// &#39;highDensity&#39;. For all other SKUs, this value must be &#39;default&#39;. Possible values include: &#39;default&#39;, &#39;highDensity&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.hostingMode")]
        public HostingMode? HostingMode {get; set; }

        /// <summary>
        /// Gets the state of the last provisioning operation performed on the search
        /// service. Provisioning is an intermediate state that occurs while service
        /// capacity is being established. After capacity is set up, provisioningState
        /// changes to either &#39;succeeded&#39; or &#39;failed&#39;. Client applications can poll
        /// provisioning status (the recommended polling interval is from 30 seconds to
        /// one minute) by using the Get Search Service operation to see when an
        /// operation is completed. If you are using the free service, this value tends
        /// to come back as &#39;succeeded&#39; directly in the call to Create search service.
        /// This is because the free service uses capacity that is already set up. Possible values include: &#39;succeeded&#39;, &#39;provisioning&#39;, &#39;failed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public ProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets the number of replicas in the search service. If specified, it
        /// must be a value between 1 and 12 inclusive for standard SKUs or between 1
        /// and 3 inclusive for basic SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicaCount")]
        public int? ReplicaCount {get; set; }

        /// <summary>
        /// Gets or sets the number of partitions in the search service; if specified,
        /// it can be 1, 2, 3, 4, 6, or 12. Values greater than 1 are only valid for
        /// standard SKUs. For &#39;standard3&#39; services with hostingMode set to
        /// &#39;highDensity&#39;, the allowed values are between 1 and 3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partitionCount")]
        public int? PartitionCount {get; set; }

        /// <summary>
        /// Gets or sets this value can be set to &#39;enabled&#39; to avoid breaking changes
        /// on existing customer resources and templates. If set to &#39;disabled&#39;, traffic
        /// over public interface is not allowed, and private endpoint connections
        /// would be the exclusive access method. Possible values include: &#39;enabled&#39;, &#39;disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicNetworkAccess")]
        public PublicNetworkAccess? PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets the status of the search service. Possible values include: &#39;running&#39;:
        /// The search service is running and no provisioning operations are underway.
        /// &#39;provisioning&#39;: The search service is being provisioned or scaled up or
        /// down. &#39;deleting&#39;: The search service is being deleted. &#39;degraded&#39;: The
        /// search service is degraded. This can occur when the underlying search units
        /// are not healthy. The search service is most likely operational, but
        /// performance might be slow and some requests might be dropped. &#39;disabled&#39;:
        /// The search service is disabled. In this state, the service will reject all
        /// API requests. &#39;error&#39;: The search service is in an error state. If your
        /// service is in the degraded, disabled, or error states, it means the Azure
        /// Cognitive Search team is actively investigating the underlying issue.
        /// Dedicated services in these states are still chargeable based on the number
        /// of search units provisioned. Possible values include: &#39;running&#39;, &#39;provisioning&#39;, &#39;deleting&#39;, &#39;degraded&#39;, &#39;disabled&#39;, &#39;error&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public SearchServiceStatus? Status {get; private set; }

        /// <summary>
        /// Gets the details of the search service status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.statusDetails")]
        public string StatusDetails {get; private set; }

        /// <summary>
        /// Gets or sets network specific rules that determine how the Azure Cognitive
        /// Search service may be reached.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.networkRuleSet")]
        public NetworkRuleSet NetworkRuleSet {get; set; }

        /// <summary>
        /// Gets or sets specifies any policy regarding encryption of resources (such
        /// as indexes) using customer manager keys within a search service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.encryptionWithCmk")]
        public EncryptionWithCmk EncryptionWithCmk {get; set; }

        /// <summary>
        /// Gets or sets when set to true, calls to the search service will not be
        /// permitted to utilize API keys for authentication. This cannot be set to
        /// true if &#39;dataPlaneAuthOptions&#39; are defined.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.disableLocalAuth")]
        public bool? DisableLocalAuth {get; set; }

        /// <summary>
        /// Gets or sets defines the options for how the data plane API of a search
        /// service authenticates requests. This cannot be set if &#39;disableLocalAuth&#39; is
        /// set to true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authOptions")]
        public DataPlaneAuthOptions AuthOptions {get; set; }

        /// <summary>
        /// Gets the list of private endpoint connections to the Azure Cognitive Search
        /// service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public System.Collections.Generic.IList<PrivateEndpointConnection> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets or sets sets options that control the availability of semantic search.
        /// This configuration is only possible for certain Azure Cognitive Search SKUs
        /// in certain locations. Possible values include: &#39;disabled&#39;, &#39;free&#39;, &#39;standard&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.semanticSearch")]
        public string SemanticSearch {get; set; }

        /// <summary>
        /// Gets the list of shared private link resources managed by the Azure
        /// Cognitive Search service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sharedPrivateLinkResources")]
        public System.Collections.Generic.IList<SharedPrivateLinkResource> SharedPrivateLinkResources {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {



            if (this.Identity != null)
            {
                this.Identity.Validate();
            }


            if (this.ReplicaCount != null)
            {
                if (this.ReplicaCount > 12)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "ReplicaCount", 12);
                }
                if (this.ReplicaCount < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "ReplicaCount", 1);
                }
            }
            if (this.PartitionCount != null)
            {
                if (this.PartitionCount > 12)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "PartitionCount", 12);
                }
                if (this.PartitionCount < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "PartitionCount", 1);
                }
            }









        }
    }
}