// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Search
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AdminKeysOperations
    /// </summary>
    public static partial class AdminKeysOperationsExtensions
    {
        /// <summary>
        /// Gets the primary and secondary admin API keys for the specified Azure Cognitive Search service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='searchManagementRequestOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='searchServiceName'>
        /// The name of the Azure Cognitive Search service associated with the specified resource group.
        /// </param>
        public static AdminKeyResult Get(this IAdminKeysOperations operations, string resourceGroupName, string searchServiceName, SearchManagementRequestOptions searchManagementRequestOptions = default(SearchManagementRequestOptions))
        {
                return ((IAdminKeysOperations)operations).GetAsync(resourceGroupName, searchServiceName, searchManagementRequestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the primary and secondary admin API keys for the specified Azure Cognitive Search service.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='searchManagementRequestOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='searchServiceName'>
        /// The name of the Azure Cognitive Search service associated with the specified resource group.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AdminKeyResult> GetAsync(this IAdminKeysOperations operations, string resourceGroupName, string searchServiceName, SearchManagementRequestOptions searchManagementRequestOptions = default(SearchManagementRequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, searchServiceName, searchManagementRequestOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='searchManagementRequestOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='searchServiceName'>
        /// The name of the Azure Cognitive Search service associated with the specified resource group.
        /// </param>
        /// <param name='keyKind'>
        /// Specifies which key to regenerate. Valid values include &#39;primary&#39; and &#39;secondary&#39;.
        /// </param>
        public static AdminKeyResult Regenerate(this IAdminKeysOperations operations, string resourceGroupName, string searchServiceName, AdminKeyKind keyKind, SearchManagementRequestOptions searchManagementRequestOptions = default(SearchManagementRequestOptions))
        {
                return ((IAdminKeysOperations)operations).RegenerateAsync(resourceGroupName, searchServiceName, keyKind, searchManagementRequestOptions).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Regenerates either the primary or secondary admin API key. You can only regenerate one key at a time.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='searchManagementRequestOptions'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group within the current subscription. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='searchServiceName'>
        /// The name of the Azure Cognitive Search service associated with the specified resource group.
        /// </param>
        /// <param name='keyKind'>
        /// Specifies which key to regenerate. Valid values include &#39;primary&#39; and &#39;secondary&#39;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<AdminKeyResult> RegenerateAsync(this IAdminKeysOperations operations, string resourceGroupName, string searchServiceName, AdminKeyKind keyKind, SearchManagementRequestOptions searchManagementRequestOptions = default(SearchManagementRequestOptions), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.RegenerateWithHttpMessagesAsync(resourceGroupName, searchServiceName, keyKind, searchManagementRequestOptions, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
