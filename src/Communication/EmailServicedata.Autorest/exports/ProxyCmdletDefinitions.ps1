
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Gets the status of the email send operation.
.Description
Gets the status of the email send operation.
.Example
Get-AzEmailServicedataEmailSendResult -Endpoint "https://contoso.unitedstates.communication.azure.com" -OperationId 1111c0de-899f-5cce-acb5-3ec493af3800

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailServicedataIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailSendResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IEmailServicedataIdentity>: Identity Parameter
  [Id <String>]: Resource identity path
  [OperationId <String>]: ID of the long running operation (GUID) returned from a previous call to send email
.Link
https://learn.microsoft.com/powershell/module/az.communication/get-azemailservicedataemailsendresult
#>
function Get-AzEmailServicedataEmailSendResult {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailSendResult])]
[CmdletBinding(DefaultParameterSetName='Get', PositionalBinding=$false)]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Uri')]
    [System.String]
    # The communication resource, for example https://my-resource.communication.azure.com
    ${Endpoint},

    [Parameter(ParameterSetName='Get', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Path')]
    [System.String]
    # ID of the long running operation (GUID) returned from a previous call to send email
    ${OperationId},

    [Parameter(ParameterSetName='GetViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailServicedataIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Get = 'Az.EmailServicedata.private\Get-AzEmailServicedataEmailSendResult_Get';
            GetViaIdentity = 'Az.EmailServicedata.private\Get-AzEmailServicedataEmailSendResult_GetViaIdentity';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}

<#
.Synopsis
Queues an email message to be sent to one or more recipients
.Description
Queues an email message to be sent to one or more recipients
.Example
$emailRecipientTo = @(
   @{
        Address = "abc@contoso.com"
        DisplayName = "abc"
    }
)

$message = @{
	ContentSubject = "Test Email"
	RecipientTo = @($emailRecipientTo)  # Array of email address objects
	SenderAddress = 'info@contoso.com'	
	ContentPlainText = "This is the first email from ACS - HTML"	
}

Send-AzEmailServicedataEmail -Message $Message -endpoint "https://contoso.unitedstates.communication.azure.com"
.Example

$emailRecipientTo = @(
   @{
        Address = "abc@contoso.com"
        DisplayName = "abc"
    },
   @{
        Address = "def@contoso.com"
        DisplayName = "def"
    }
)

$fileBytes = [System.IO.File]::ReadAllBytes("<file path>")

$emailAttachment = @(
	@{
		ContentInBase64 = $fileBytes
		ContentType = "<text/plain>"
		Name = "<test.txt>"
	}
)

$headers = @{
    "Key1" = "Value1"
    "Key2" = "Value2"
	"Importance" = "high"
}

$emailRecipientBcc = @(
   @{
        Address = "abc@contoso.com"
        DisplayName = "abc"
    }
)

$emailRecipientCc = @(
   @{
        Address = "abc@contoso.com"
        DisplayName = "abc"
    }
)

$emailRecipientReplyTo = @(
   @{
        Address = "abc@contoso.com"
        DisplayName = "abc"
    }
)

$message = @{
	ContentSubject = "Test Email"
	RecipientTo = @($emailRecipientTo)  # Array of email address objects
	SenderAddress = 'info@contoso.com'
	Attachment = @($emailAttachment) # Array of attachments
	ContentHtml = "<html><head><title>Enter title</title></head><body><h1>This is the first email from ACS - HTML</h1></body></html>"
	ContentPlainText = "This is the first email from ACS - HTML"
	Header = $headers  # Importance = high/medium/low or X-Priority = 2/3/4  
	RecipientBcc = @($emailRecipientBcc) # Array of email address objects
	RecipientCc = @($emailRecipientCc) # Array of email address objects
	ReplyTo = @($emailRecipientReplyTo) # Array of email address objects
	UserEngagementTrackingDisabled = $true
}

Send-AzEmailServicedataEmail -Message $Message -endpoint "https://contoso.unitedstates.communication.azure.com"

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailMessage
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailSendResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ATTACHMENT <IEmailAttachment[]>: List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB.
  ContentInBase64 <Byte[]>: Base64 encoded contents of the attachment
  ContentType <String>: MIME type of the content being attached.
  Name <String>: Name of the attachment

MESSAGE <IEmailMessage>: Message payload for sending an email
  ContentSubject <String>: Subject of the email message
  RecipientTo <List<IEmailAddress>>: Email To recipients
  SenderAddress <String>: Sender email address from a verified domain.
  [Attachment <List<IEmailAttachment>>]: List of attachments. Please note that we limit the total size of an email request (which includes attachments) to 10MB.
    ContentInBase64 <Byte[]>: Base64 encoded contents of the attachment
    ContentType <String>: MIME type of the content being attached.
    Name <String>: Name of the attachment
  [ContentHtml <String>]: Html version of the email message.
  [ContentPlainText <String>]: Plain text version of the email message.
  [Header <IEmailMessageHeaders>]: Custom email headers to be passed.
    [(Any) <String>]: This indicates any property can be added to this object.
  [RecipientBcc <List<IEmailAddress>>]: Email BCC recipients
    Address <String>: Email address.
    [DisplayName <String>]: Email display name.
  [RecipientCc <List<IEmailAddress>>]: Email CC recipients
  [ReplyTo <List<IEmailAddress>>]: Email addresses where recipients' replies will be sent to.
  [UserEngagementTrackingDisabled <Boolean?>]: Indicates whether user engagement tracking should be disabled for this request if the resource-level user engagement tracking setting was already enabled in the control plane.

RECIPIENTBCC <IEmailAddress[]>: Email BCC recipients
  Address <String>: Email address.
  [DisplayName <String>]: Email display name.

RECIPIENTCC <IEmailAddress[]>: Email CC recipients
  Address <String>: Email address.
  [DisplayName <String>]: Email display name.

RECIPIENTTO <IEmailAddress[]>: Email To recipients
  Address <String>: Email address.
  [DisplayName <String>]: Email display name.

REPLYTO <IEmailAddress[]>: Email addresses where recipients' replies will be sent to.
  Address <String>: Email address.
  [DisplayName <String>]: Email display name.
.Link
https://learn.microsoft.com/powershell/module/az.communication/send-azemailservicedataemail
#>
function Send-AzEmailServicedataEmail {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailSendResult])]
[CmdletBinding(DefaultParameterSetName='Send', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Uri')]
    [System.String]
    # The communication resource, for example https://my-resource.communication.azure.com
    ${Endpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Header')]
    [System.String]
    # Tracking ID sent with the request to help with debugging.
    ${ClientRequestId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Header')]
    [System.String]
    # This is the ID provided by the customer to identify the long running operation.
    # If an ID is not provided by the customer, the service will generate one.
    ${OperationId},

    [Parameter(ParameterSetName='Send', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailMessage]
    # Message payload for sending an email
    ${Message},

    [Parameter(ParameterSetName='SendExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.String]
    # Subject of the email message
    ${ContentSubject},

    [Parameter(ParameterSetName='SendExpanded', Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailAddress[]]
    # Email To recipients
    ${RecipientTo},

    [Parameter(ParameterSetName='SendExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.String]
    # Sender email address from a verified domain.
    ${SenderAddress},

    [Parameter(ParameterSetName='SendExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailAttachment[]]
    # List of attachments.
    # Please note that we limit the total size of an email request (which includes attachments) to 10MB.
    ${Attachment},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.String]
    # Html version of the email message.
    ${ContentHtml},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.String]
    # Plain text version of the email message.
    ${ContentPlainText},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailMessageHeaders]))]
    [System.Collections.Hashtable]
    # Custom email headers to be passed.
    ${Header},

    [Parameter(ParameterSetName='SendExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailAddress[]]
    # Email BCC recipients
    ${RecipientBcc},

    [Parameter(ParameterSetName='SendExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailAddress[]]
    # Email CC recipients
    ${RecipientCc},

    [Parameter(ParameterSetName='SendExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Models.IEmailAddress[]]
    # Email addresses where recipients' replies will be sent to.
    ${ReplyTo},

    [Parameter(ParameterSetName='SendExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Indicates whether user engagement tracking should be disabled for this request if the resource-level user engagement tracking setting was already enabled in the control plane.
    ${UserEngagementTrackingDisabled},

    [Parameter(ParameterSetName='SendViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Send operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='SendViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Body')]
    [System.String]
    # Json string supplied to the Send operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Send = 'Az.EmailServicedata.private\Send-AzEmailServicedataEmail_Send';
            SendExpanded = 'Az.EmailServicedata.private\Send-AzEmailServicedataEmail_SendExpanded';
            SendViaJsonFilePath = 'Az.EmailServicedata.private\Send-AzEmailServicedataEmail_SendViaJsonFilePath';
            SendViaJsonString = 'Az.EmailServicedata.private\Send-AzEmailServicedataEmail_SendViaJsonString';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.EmailServicedata.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
