// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Provides create, read, update and delete functionality for Azure SQL
    /// Database resources including servers, databases, elastic pools,
    /// recommendations, operations, and usage metrics.
    /// </summary>
    public partial class SqlManagementClient : Microsoft.Rest.ServiceClient<SqlManagementClient>, ISqlManagementClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// The subscription ID that identifies an Azure subscription.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// /// set to true a unique x-ms-client-request-id value is generated and
        /// /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IDatabasesOperations
        /// </summary>
        public virtual IDatabasesOperations Databases { get; private set; }
        /// <summary>
        /// Gets the IElasticPoolsOperations
        /// </summary>
        public virtual IElasticPoolsOperations ElasticPools { get; private set; }
        /// <summary>
        /// Gets the IElasticPoolActivitiesOperations
        /// </summary>
        public virtual IElasticPoolActivitiesOperations ElasticPoolActivities { get; private set; }
        /// <summary>
        /// Gets the IElasticPoolDatabaseActivitiesOperations
        /// </summary>
        public virtual IElasticPoolDatabaseActivitiesOperations ElasticPoolDatabaseActivities { get; private set; }
        /// <summary>
        /// Gets the IServerDevOpsAuditSettingsOperations
        /// </summary>
        public virtual IServerDevOpsAuditSettingsOperations ServerDevOpsAuditSettings { get; private set; }
        /// <summary>
        /// Gets the IServerBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IServerBlobAuditingPoliciesOperations ServerBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the IDatabaseBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IDatabaseBlobAuditingPoliciesOperations DatabaseBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the IExtendedDatabaseBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IExtendedDatabaseBlobAuditingPoliciesOperations ExtendedDatabaseBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the IExtendedServerBlobAuditingPoliciesOperations
        /// </summary>
        public virtual IExtendedServerBlobAuditingPoliciesOperations ExtendedServerBlobAuditingPolicies { get; private set; }
        /// <summary>
        /// Gets the ISyncGroupsOperations
        /// </summary>
        public virtual ISyncGroupsOperations SyncGroups { get; private set; }
        /// <summary>
        /// Gets the IDatabaseSecurityAlertPoliciesOperations
        /// </summary>
        public virtual IDatabaseSecurityAlertPoliciesOperations DatabaseSecurityAlertPolicies { get; private set; }
        /// <summary>
        /// Gets the IDatabaseVulnerabilityAssessmentRuleBaselinesOperations
        /// </summary>
        public virtual IDatabaseVulnerabilityAssessmentRuleBaselinesOperations DatabaseVulnerabilityAssessmentRuleBaselines { get; private set; }
        /// <summary>
        /// Gets the IDatabaseVulnerabilityAssessmentsOperations
        /// </summary>
        public virtual IDatabaseVulnerabilityAssessmentsOperations DatabaseVulnerabilityAssessments { get; private set; }
        /// <summary>
        /// Gets the IDatabaseVulnerabilityAssessmentScansOperations
        /// </summary>
        public virtual IDatabaseVulnerabilityAssessmentScansOperations DatabaseVulnerabilityAssessmentScans { get; private set; }
        /// <summary>
        /// Gets the IElasticPoolOperations
        /// </summary>
        public virtual IElasticPoolOperations ElasticPoolOperations { get; private set; }
        /// <summary>
        /// Gets the IEncryptionProtectorsOperations
        /// </summary>
        public virtual IEncryptionProtectorsOperations EncryptionProtectors { get; private set; }
        /// <summary>
        /// Gets the IInstancePoolsOperations
        /// </summary>
        public virtual IInstancePoolsOperations InstancePools { get; private set; }
        /// <summary>
        /// Gets the IJobAgentsOperations
        /// </summary>
        public virtual IJobAgentsOperations JobAgents { get; private set; }
        /// <summary>
        /// Gets the IJobCredentialsOperations
        /// </summary>
        public virtual IJobCredentialsOperations JobCredentials { get; private set; }
        /// <summary>
        /// Gets the IJobExecutionsOperations
        /// </summary>
        public virtual IJobExecutionsOperations JobExecutions { get; private set; }
        /// <summary>
        /// Gets the IJobsOperations
        /// </summary>
        public virtual IJobsOperations Jobs { get; private set; }
        /// <summary>
        /// Gets the IJobStepExecutionsOperations
        /// </summary>
        public virtual IJobStepExecutionsOperations JobStepExecutions { get; private set; }
        /// <summary>
        /// Gets the IJobStepsOperations
        /// </summary>
        public virtual IJobStepsOperations JobSteps { get; private set; }
        /// <summary>
        /// Gets the IJobTargetExecutionsOperations
        /// </summary>
        public virtual IJobTargetExecutionsOperations JobTargetExecutions { get; private set; }
        /// <summary>
        /// Gets the IJobTargetGroupsOperations
        /// </summary>
        public virtual IJobTargetGroupsOperations JobTargetGroups { get; private set; }
        /// <summary>
        /// Gets the IJobVersionsOperations
        /// </summary>
        public virtual IJobVersionsOperations JobVersions { get; private set; }
        /// <summary>
        /// Gets the IJobPrivateEndpointsOperations
        /// </summary>
        public virtual IJobPrivateEndpointsOperations JobPrivateEndpoints { get; private set; }
        /// <summary>
        /// Gets the ICapabilitiesOperations
        /// </summary>
        public virtual ICapabilitiesOperations Capabilities { get; private set; }
        /// <summary>
        /// Gets the ILongTermRetentionPoliciesOperations
        /// </summary>
        public virtual ILongTermRetentionPoliciesOperations LongTermRetentionPolicies { get; private set; }
        /// <summary>
        /// Gets the IManagedBackupShortTermRetentionPoliciesOperations
        /// </summary>
        public virtual IManagedBackupShortTermRetentionPoliciesOperations ManagedBackupShortTermRetentionPolicies { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseVulnerabilityAssessmentRuleBaselinesOperations
        /// </summary>
        public virtual IManagedDatabaseVulnerabilityAssessmentRuleBaselinesOperations ManagedDatabaseVulnerabilityAssessmentRuleBaselines { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseVulnerabilityAssessmentsOperations
        /// </summary>
        public virtual IManagedDatabaseVulnerabilityAssessmentsOperations ManagedDatabaseVulnerabilityAssessments { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseVulnerabilityAssessmentScansOperations
        /// </summary>
        public virtual IManagedDatabaseVulnerabilityAssessmentScansOperations ManagedDatabaseVulnerabilityAssessmentScans { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceAdministratorsOperations
        /// </summary>
        public virtual IManagedInstanceAdministratorsOperations ManagedInstanceAdministrators { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceAzureAdOnlyAuthenticationsOperations
        /// </summary>
        public virtual IManagedInstanceAzureAdOnlyAuthenticationsOperations ManagedInstanceAzureAdOnlyAuthentications { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceEncryptionProtectorsOperations
        /// </summary>
        public virtual IManagedInstanceEncryptionProtectorsOperations ManagedInstanceEncryptionProtectors { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceKeysOperations
        /// </summary>
        public virtual IManagedInstanceKeysOperations ManagedInstanceKeys { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceLongTermRetentionPoliciesOperations
        /// </summary>
        public virtual IManagedInstanceLongTermRetentionPoliciesOperations ManagedInstanceLongTermRetentionPolicies { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceOperations
        /// </summary>
        public virtual IManagedInstanceOperations ManagedInstanceOperations { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceTdeCertificatesOperations
        /// </summary>
        public virtual IManagedInstanceTdeCertificatesOperations ManagedInstanceTdeCertificates { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceVulnerabilityAssessmentsOperations
        /// </summary>
        public virtual IManagedInstanceVulnerabilityAssessmentsOperations ManagedInstanceVulnerabilityAssessments { get; private set; }
        /// <summary>
        /// Gets the IManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesOperations
        /// </summary>
        public virtual IManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesOperations ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies { get; private set; }
        /// <summary>
        /// Gets the IManagedServerSecurityAlertPoliciesOperations
        /// </summary>
        public virtual IManagedServerSecurityAlertPoliciesOperations ManagedServerSecurityAlertPolicies { get; private set; }
        /// <summary>
        /// Gets the IRecoverableManagedDatabasesOperations
        /// </summary>
        public virtual IRecoverableManagedDatabasesOperations RecoverableManagedDatabases { get; private set; }
        /// <summary>
        /// Gets the IRestorePointsOperations
        /// </summary>
        public virtual IRestorePointsOperations RestorePoints { get; private set; }
        /// <summary>
        /// Gets the IServerAzureAdAdministratorsOperations
        /// </summary>
        public virtual IServerAzureAdAdministratorsOperations ServerAzureAdAdministrators { get; private set; }
        /// <summary>
        /// Gets the IServerAzureAdOnlyAuthenticationsOperations
        /// </summary>
        public virtual IServerAzureAdOnlyAuthenticationsOperations ServerAzureAdOnlyAuthentications { get; private set; }
        /// <summary>
        /// Gets the IServerDnsAliasesOperations
        /// </summary>
        public virtual IServerDnsAliasesOperations ServerDnsAliases { get; private set; }
        /// <summary>
        /// Gets the IServerKeysOperations
        /// </summary>
        public virtual IServerKeysOperations ServerKeys { get; private set; }
        /// <summary>
        /// Gets the IServerSecurityAlertPoliciesOperations
        /// </summary>
        public virtual IServerSecurityAlertPoliciesOperations ServerSecurityAlertPolicies { get; private set; }
        /// <summary>
        /// Gets the IServerTrustGroupsOperations
        /// </summary>
        public virtual IServerTrustGroupsOperations ServerTrustGroups { get; private set; }
        /// <summary>
        /// Gets the IServerVulnerabilityAssessmentsOperations
        /// </summary>
        public virtual IServerVulnerabilityAssessmentsOperations ServerVulnerabilityAssessments { get; private set; }
        /// <summary>
        /// Gets the ISyncMembersOperations
        /// </summary>
        public virtual ISyncMembersOperations SyncMembers { get; private set; }
        /// <summary>
        /// Gets the ITdeCertificatesOperations
        /// </summary>
        public virtual ITdeCertificatesOperations TdeCertificates { get; private set; }
        /// <summary>
        /// Gets the IVirtualNetworkRulesOperations
        /// </summary>
        public virtual IVirtualNetworkRulesOperations VirtualNetworkRules { get; private set; }
        /// <summary>
        /// Gets the ITransparentDataEncryptionsOperations
        /// </summary>
        public virtual ITransparentDataEncryptionsOperations TransparentDataEncryptions { get; private set; }
        /// <summary>
        /// Gets the IBackupShortTermRetentionPoliciesOperations
        /// </summary>
        public virtual IBackupShortTermRetentionPoliciesOperations BackupShortTermRetentionPolicies { get; private set; }
        /// <summary>
        /// Gets the IDatabaseOperations
        /// </summary>
        public virtual IDatabaseOperations DatabaseOperations { get; private set; }
        /// <summary>
        /// Gets the ILedgerDigestUploadsOperations
        /// </summary>
        public virtual ILedgerDigestUploadsOperations LedgerDigestUploads { get; private set; }
        /// <summary>
        /// Gets the IOutboundFirewallRulesOperations
        /// </summary>
        public virtual IOutboundFirewallRulesOperations OutboundFirewallRules { get; private set; }
        /// <summary>
        /// Gets the IUsagesOperations
        /// </summary>
        public virtual IUsagesOperations Usages { get; private set; }
        /// <summary>
        /// Gets the ILongTermRetentionBackupsOperations
        /// </summary>
        public virtual ILongTermRetentionBackupsOperations LongTermRetentionBackups { get; private set; }
        /// <summary>
        /// Gets the ILongTermRetentionManagedInstanceBackupsOperations
        /// </summary>
        public virtual ILongTermRetentionManagedInstanceBackupsOperations LongTermRetentionManagedInstanceBackups { get; private set; }
        /// <summary>
        /// Gets the IRestorableDroppedManagedDatabasesOperations
        /// </summary>
        public virtual IRestorableDroppedManagedDatabasesOperations RestorableDroppedManagedDatabases { get; private set; }
        /// <summary>
        /// Gets the IDistributedAvailabilityGroupsOperations
        /// </summary>
        public virtual IDistributedAvailabilityGroupsOperations DistributedAvailabilityGroups { get; private set; }
        /// <summary>
        /// Gets the IServerTrustCertificatesOperations
        /// </summary>
        public virtual IServerTrustCertificatesOperations ServerTrustCertificates { get; private set; }
        /// <summary>
        /// Gets the IEndpointCertificatesOperations
        /// </summary>
        public virtual IEndpointCertificatesOperations EndpointCertificates { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseSensitivityLabelsOperations
        /// </summary>
        public virtual IManagedDatabaseSensitivityLabelsOperations ManagedDatabaseSensitivityLabels { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseRecommendedSensitivityLabelsOperations
        /// </summary>
        public virtual IManagedDatabaseRecommendedSensitivityLabelsOperations ManagedDatabaseRecommendedSensitivityLabels { get; private set; }
        /// <summary>
        /// Gets the ISensitivityLabelsOperations
        /// </summary>
        public virtual ISensitivityLabelsOperations SensitivityLabels { get; private set; }
        /// <summary>
        /// Gets the IRecommendedSensitivityLabelsOperations
        /// </summary>
        public virtual IRecommendedSensitivityLabelsOperations RecommendedSensitivityLabels { get; private set; }
        /// <summary>
        /// Gets the IIPv6FirewallRulesOperations
        /// </summary>
        public virtual IIPv6FirewallRulesOperations IPv6FirewallRules { get; private set; }
        /// <summary>
        /// Gets the IReplicationLinksOperations
        /// </summary>
        public virtual IReplicationLinksOperations ReplicationLinks { get; private set; }
        /// <summary>
        /// Gets the IVirtualClustersOperations
        /// </summary>
        public virtual IVirtualClustersOperations VirtualClusters { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseAdvancedThreatProtectionSettingsOperations
        /// </summary>
        public virtual IManagedDatabaseAdvancedThreatProtectionSettingsOperations ManagedDatabaseAdvancedThreatProtectionSettings { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceAdvancedThreatProtectionSettingsOperations
        /// </summary>
        public virtual IManagedInstanceAdvancedThreatProtectionSettingsOperations ManagedInstanceAdvancedThreatProtectionSettings { get; private set; }
        /// <summary>
        /// Gets the IDatabaseAdvancedThreatProtectionSettingsOperations
        /// </summary>
        public virtual IDatabaseAdvancedThreatProtectionSettingsOperations DatabaseAdvancedThreatProtectionSettings { get; private set; }
        /// <summary>
        /// Gets the IServerAdvancedThreatProtectionSettingsOperations
        /// </summary>
        public virtual IServerAdvancedThreatProtectionSettingsOperations ServerAdvancedThreatProtectionSettings { get; private set; }
        /// <summary>
        /// Gets the IManagedServerDnsAliasesOperations
        /// </summary>
        public virtual IManagedServerDnsAliasesOperations ManagedServerDnsAliases { get; private set; }
        /// <summary>
        /// Gets the IManagedInstanceDtcsOperations
        /// </summary>
        public virtual IManagedInstanceDtcsOperations ManagedInstanceDtcs { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseRestoreDetailsOperations
        /// </summary>
        public virtual IManagedDatabaseRestoreDetailsOperations ManagedDatabaseRestoreDetails { get; private set; }
        /// <summary>
        /// Gets the IDatabaseEncryptionProtectorsOperations
        /// </summary>
        public virtual IDatabaseEncryptionProtectorsOperations DatabaseEncryptionProtectors { get; private set; }
        /// <summary>
        /// Gets the IRecoverableDatabasesOperations
        /// </summary>
        public virtual IRecoverableDatabasesOperations RecoverableDatabases { get; private set; }
        /// <summary>
        /// Gets the IRestorableDroppedDatabasesOperations
        /// </summary>
        public virtual IRestorableDroppedDatabasesOperations RestorableDroppedDatabases { get; private set; }
        /// <summary>
        /// Gets the IInstanceFailoverGroupsOperations
        /// </summary>
        public virtual IInstanceFailoverGroupsOperations InstanceFailoverGroups { get; private set; }
        /// <summary>
        /// Gets the IServersOperations
        /// </summary>
        public virtual IServersOperations Servers { get; private set; }
        /// <summary>
        /// Gets the IServerConfigurationOptionsOperations
        /// </summary>
        public virtual IServerConfigurationOptionsOperations ServerConfigurationOptions { get; private set; }
        /// <summary>
        /// Gets the IManagedLedgerDigestUploadsOperations
        /// </summary>
        public virtual IManagedLedgerDigestUploadsOperations ManagedLedgerDigestUploads { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabasesOperations
        /// </summary>
        public virtual IManagedDatabasesOperations ManagedDatabases { get; private set; }
        /// <summary>
        /// Gets the IFailoverGroupsOperations
        /// </summary>
        public virtual IFailoverGroupsOperations FailoverGroups { get; private set; }
        /// <summary>
        /// Gets the IManagedDatabaseMoveOperations
        /// </summary>
        public virtual IManagedDatabaseMoveOperations ManagedDatabaseMoveOperations { get; private set; }
        /// <summary>
        /// Gets the IManagedInstancesOperations
        /// </summary>
        public virtual IManagedInstancesOperations ManagedInstances { get; private set; }
        /// <summary>
        /// Gets the IStartStopManagedInstanceSchedulesOperations
        /// </summary>
        public virtual IStartStopManagedInstanceSchedulesOperations StartStopManagedInstanceSchedules { get; private set; }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SqlManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        protected SqlManagementClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SqlManagementClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected SqlManagementClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SqlManagementClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected SqlManagementClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling SqlManagementClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the SqlManagementClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public SqlManagementClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.Databases = new DatabasesOperations(this);
            this.ElasticPools = new ElasticPoolsOperations(this);
            this.ElasticPoolActivities = new ElasticPoolActivitiesOperations(this);
            this.ElasticPoolDatabaseActivities = new ElasticPoolDatabaseActivitiesOperations(this);
            this.ServerDevOpsAuditSettings = new ServerDevOpsAuditSettingsOperations(this);
            this.ServerBlobAuditingPolicies = new ServerBlobAuditingPoliciesOperations(this);
            this.DatabaseBlobAuditingPolicies = new DatabaseBlobAuditingPoliciesOperations(this);
            this.ExtendedDatabaseBlobAuditingPolicies = new ExtendedDatabaseBlobAuditingPoliciesOperations(this);
            this.ExtendedServerBlobAuditingPolicies = new ExtendedServerBlobAuditingPoliciesOperations(this);
            this.SyncGroups = new SyncGroupsOperations(this);
            this.DatabaseSecurityAlertPolicies = new DatabaseSecurityAlertPoliciesOperations(this);
            this.DatabaseVulnerabilityAssessmentRuleBaselines = new DatabaseVulnerabilityAssessmentRuleBaselinesOperations(this);
            this.DatabaseVulnerabilityAssessments = new DatabaseVulnerabilityAssessmentsOperations(this);
            this.DatabaseVulnerabilityAssessmentScans = new DatabaseVulnerabilityAssessmentScansOperations(this);
            this.ElasticPoolOperations = new ElasticPoolOperations(this);
            this.EncryptionProtectors = new EncryptionProtectorsOperations(this);
            this.InstancePools = new InstancePoolsOperations(this);
            this.JobAgents = new JobAgentsOperations(this);
            this.JobCredentials = new JobCredentialsOperations(this);
            this.JobExecutions = new JobExecutionsOperations(this);
            this.Jobs = new JobsOperations(this);
            this.JobStepExecutions = new JobStepExecutionsOperations(this);
            this.JobSteps = new JobStepsOperations(this);
            this.JobTargetExecutions = new JobTargetExecutionsOperations(this);
            this.JobTargetGroups = new JobTargetGroupsOperations(this);
            this.JobVersions = new JobVersionsOperations(this);
            this.JobPrivateEndpoints = new JobPrivateEndpointsOperations(this);
            this.Capabilities = new CapabilitiesOperations(this);
            this.LongTermRetentionPolicies = new LongTermRetentionPoliciesOperations(this);
            this.ManagedBackupShortTermRetentionPolicies = new ManagedBackupShortTermRetentionPoliciesOperations(this);
            this.ManagedDatabaseVulnerabilityAssessmentRuleBaselines = new ManagedDatabaseVulnerabilityAssessmentRuleBaselinesOperations(this);
            this.ManagedDatabaseVulnerabilityAssessments = new ManagedDatabaseVulnerabilityAssessmentsOperations(this);
            this.ManagedDatabaseVulnerabilityAssessmentScans = new ManagedDatabaseVulnerabilityAssessmentScansOperations(this);
            this.ManagedInstanceAdministrators = new ManagedInstanceAdministratorsOperations(this);
            this.ManagedInstanceAzureAdOnlyAuthentications = new ManagedInstanceAzureAdOnlyAuthenticationsOperations(this);
            this.ManagedInstanceEncryptionProtectors = new ManagedInstanceEncryptionProtectorsOperations(this);
            this.ManagedInstanceKeys = new ManagedInstanceKeysOperations(this);
            this.ManagedInstanceLongTermRetentionPolicies = new ManagedInstanceLongTermRetentionPoliciesOperations(this);
            this.ManagedInstanceOperations = new ManagedInstanceOperations(this);
            this.ManagedInstanceTdeCertificates = new ManagedInstanceTdeCertificatesOperations(this);
            this.ManagedInstanceVulnerabilityAssessments = new ManagedInstanceVulnerabilityAssessmentsOperations(this);
            this.ManagedRestorableDroppedDatabaseBackupShortTermRetentionPolicies = new ManagedRestorableDroppedDatabaseBackupShortTermRetentionPoliciesOperations(this);
            this.ManagedServerSecurityAlertPolicies = new ManagedServerSecurityAlertPoliciesOperations(this);
            this.RecoverableManagedDatabases = new RecoverableManagedDatabasesOperations(this);
            this.RestorePoints = new RestorePointsOperations(this);
            this.ServerAzureAdAdministrators = new ServerAzureAdAdministratorsOperations(this);
            this.ServerAzureAdOnlyAuthentications = new ServerAzureAdOnlyAuthenticationsOperations(this);
            this.ServerDnsAliases = new ServerDnsAliasesOperations(this);
            this.ServerKeys = new ServerKeysOperations(this);
            this.ServerSecurityAlertPolicies = new ServerSecurityAlertPoliciesOperations(this);
            this.ServerTrustGroups = new ServerTrustGroupsOperations(this);
            this.ServerVulnerabilityAssessments = new ServerVulnerabilityAssessmentsOperations(this);
            this.SyncMembers = new SyncMembersOperations(this);
            this.TdeCertificates = new TdeCertificatesOperations(this);
            this.VirtualNetworkRules = new VirtualNetworkRulesOperations(this);
            this.TransparentDataEncryptions = new TransparentDataEncryptionsOperations(this);
            this.BackupShortTermRetentionPolicies = new BackupShortTermRetentionPoliciesOperations(this);
            this.DatabaseOperations = new DatabaseOperations(this);
            this.LedgerDigestUploads = new LedgerDigestUploadsOperations(this);
            this.OutboundFirewallRules = new OutboundFirewallRulesOperations(this);
            this.Usages = new UsagesOperations(this);
            this.LongTermRetentionBackups = new LongTermRetentionBackupsOperations(this);
            this.LongTermRetentionManagedInstanceBackups = new LongTermRetentionManagedInstanceBackupsOperations(this);
            this.RestorableDroppedManagedDatabases = new RestorableDroppedManagedDatabasesOperations(this);
            this.DistributedAvailabilityGroups = new DistributedAvailabilityGroupsOperations(this);
            this.ServerTrustCertificates = new ServerTrustCertificatesOperations(this);
            this.EndpointCertificates = new EndpointCertificatesOperations(this);
            this.ManagedDatabaseSensitivityLabels = new ManagedDatabaseSensitivityLabelsOperations(this);
            this.ManagedDatabaseRecommendedSensitivityLabels = new ManagedDatabaseRecommendedSensitivityLabelsOperations(this);
            this.SensitivityLabels = new SensitivityLabelsOperations(this);
            this.RecommendedSensitivityLabels = new RecommendedSensitivityLabelsOperations(this);
            this.IPv6FirewallRules = new IPv6FirewallRulesOperations(this);
            this.ReplicationLinks = new ReplicationLinksOperations(this);
            this.VirtualClusters = new VirtualClustersOperations(this);
            this.ManagedDatabaseAdvancedThreatProtectionSettings = new ManagedDatabaseAdvancedThreatProtectionSettingsOperations(this);
            this.ManagedInstanceAdvancedThreatProtectionSettings = new ManagedInstanceAdvancedThreatProtectionSettingsOperations(this);
            this.DatabaseAdvancedThreatProtectionSettings = new DatabaseAdvancedThreatProtectionSettingsOperations(this);
            this.ServerAdvancedThreatProtectionSettings = new ServerAdvancedThreatProtectionSettingsOperations(this);
            this.ManagedServerDnsAliases = new ManagedServerDnsAliasesOperations(this);
            this.ManagedInstanceDtcs = new ManagedInstanceDtcsOperations(this);
            this.ManagedDatabaseRestoreDetails = new ManagedDatabaseRestoreDetailsOperations(this);
            this.DatabaseEncryptionProtectors = new DatabaseEncryptionProtectorsOperations(this);
            this.RecoverableDatabases = new RecoverableDatabasesOperations(this);
            this.RestorableDroppedDatabases = new RestorableDroppedDatabasesOperations(this);
            this.InstanceFailoverGroups = new InstanceFailoverGroupsOperations(this);
            this.Servers = new ServersOperations(this);
            this.ServerConfigurationOptions = new ServerConfigurationOptionsOperations(this);
            this.ManagedLedgerDigestUploads = new ManagedLedgerDigestUploadsOperations(this);
            this.ManagedDatabases = new ManagedDatabasesOperations(this);
            this.FailoverGroups = new FailoverGroupsOperations(this);
            this.ManagedDatabaseMoveOperations = new ManagedDatabaseMoveOperations(this);
            this.ManagedInstances = new ManagedInstancesOperations(this);
            this.StartStopManagedInstanceSchedules = new StartStopManagedInstanceSchedulesOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}