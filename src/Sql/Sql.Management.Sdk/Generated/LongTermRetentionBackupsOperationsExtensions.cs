// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Sql
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for LongTermRetentionBackupsOperations
    /// </summary>
    public static partial class LongTermRetentionBackupsOperationsExtensions
    {
        /// <summary>
        /// Copy an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult Copy(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).CopyAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Copy an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> CopyAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CopyWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult Update(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).UpdateAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> UpdateAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackup Get(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName)
        {
                return ((ILongTermRetentionBackupsOperations)operations).GetAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackup> GetAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static void Delete(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName)
        {
                ((ILongTermRetentionBackupsOperations)operations).DeleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByDatabase(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string))
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByDatabaseAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, onlyLatestPerDatabase, databaseState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByDatabaseAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByDatabaseWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, onlyLatestPerDatabase, databaseState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByLocation(this ILongTermRetentionBackupsOperations operations, string locationName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string))
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByLocationAsync(locationName, onlyLatestPerDatabase, databaseState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByLocationAsync(this ILongTermRetentionBackupsOperations operations, string locationName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByLocationWithHttpMessagesAsync(locationName, onlyLatestPerDatabase, databaseState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByServer(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string))
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByServerAsync(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByServerAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServerWithHttpMessagesAsync(locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Copy an existing long term retention backup to a different server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult CopyByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).CopyByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Copy an existing long term retention backup to a different server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> CopyByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CopyByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult UpdateByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).UpdateByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> UpdateByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackup GetByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName)
        {
                return ((ILongTermRetentionBackupsOperations)operations).GetByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackup> GetByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static void DeleteByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName)
        {
                ((ILongTermRetentionBackupsOperations)operations).DeleteByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByResourceGroupDatabase(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string))
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByResourceGroupDatabaseAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, onlyLatestPerDatabase, databaseState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByResourceGroupDatabaseAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupDatabaseWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, onlyLatestPerDatabase, databaseState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByResourceGroupLocation(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string))
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByResourceGroupLocationAsync(resourceGroupName, locationName, onlyLatestPerDatabase, databaseState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByResourceGroupLocationAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupLocationWithHttpMessagesAsync(resourceGroupName, locationName, onlyLatestPerDatabase, databaseState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByResourceGroupServer(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string))
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByResourceGroupServerAsync(resourceGroupName, locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='onlyLatestPerDatabase'>
        /// Whether or not to only get the latest backup for each database.
        /// </param>
        /// <param name='databaseState'>
        /// Whether to query against just live databases, just deleted databases, or all databases.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByResourceGroupServerAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, bool? onlyLatestPerDatabase = default(bool?), string databaseState = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupServerWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, onlyLatestPerDatabase, databaseState, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Copy an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult BeginCopy(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).BeginCopyAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Copy an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> BeginCopyAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCopyWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult BeginUpdate(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).BeginUpdateAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> BeginUpdateAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static void BeginDelete(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName)
        {
                ((ILongTermRetentionBackupsOperations)operations).BeginDeleteAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ILongTermRetentionBackupsOperations operations, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Copy an existing long term retention backup to a different server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult BeginCopyByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).BeginCopyByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Copy an existing long term retention backup to a different server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> BeginCopyByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, CopyLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCopyByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static LongTermRetentionBackupOperationResult BeginUpdateByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters)
        {
                return ((ILongTermRetentionBackupsOperations)operations).BeginUpdateByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates an existing long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database.
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<LongTermRetentionBackupOperationResult> BeginUpdateByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, UpdateLongTermRetentionBackupParameters parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        public static void BeginDeleteByResourceGroup(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName)
        {
                ((ILongTermRetentionBackupsOperations)operations).BeginDeleteByResourceGroupAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a long term retention backup.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='locationName'>
        /// The location of the database
        /// </param>
        /// <param name='longTermRetentionServerName'>
        /// The name of the server
        /// </param>
        /// <param name='longTermRetentionDatabaseName'>
        /// The name of the database
        /// </param>
        /// <param name='backupName'>
        /// The backup name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteByResourceGroupAsync(this ILongTermRetentionBackupsOperations operations, string resourceGroupName, string locationName, string longTermRetentionServerName, string longTermRetentionDatabaseName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteByResourceGroupWithHttpMessagesAsync(resourceGroupName, locationName, longTermRetentionServerName, longTermRetentionDatabaseName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByDatabaseNext(this ILongTermRetentionBackupsOperations operations, string nextPageLink)
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByDatabaseNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByDatabaseNextAsync(this ILongTermRetentionBackupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByDatabaseNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByLocationNext(this ILongTermRetentionBackupsOperations operations, string nextPageLink)
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByLocationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByLocationNextAsync(this ILongTermRetentionBackupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByLocationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByServerNext(this ILongTermRetentionBackupsOperations operations, string nextPageLink)
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByServerNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByServerNextAsync(this ILongTermRetentionBackupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByServerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByResourceGroupDatabaseNext(this ILongTermRetentionBackupsOperations operations, string nextPageLink)
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByResourceGroupDatabaseNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all long term retention backups for a database.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByResourceGroupDatabaseNextAsync(this ILongTermRetentionBackupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupDatabaseNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByResourceGroupLocationNext(this ILongTermRetentionBackupsOperations operations, string nextPageLink)
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByResourceGroupLocationNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given location.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByResourceGroupLocationNextAsync(this ILongTermRetentionBackupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupLocationNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<LongTermRetentionBackup> ListByResourceGroupServerNext(this ILongTermRetentionBackupsOperations operations, string nextPageLink)
        {
                return ((ILongTermRetentionBackupsOperations)operations).ListByResourceGroupServerNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists the long term retention backups for a given server.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<LongTermRetentionBackup>> ListByResourceGroupServerNextAsync(this ILongTermRetentionBackupsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByResourceGroupServerNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
