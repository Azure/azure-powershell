// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// A managed database restore details.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ManagedDatabaseRestoreDetailsResult : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ManagedDatabaseRestoreDetailsResult class.
        /// </summary>
        public ManagedDatabaseRestoreDetailsResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedDatabaseRestoreDetailsResult class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="propertiesType">Restore type.
        /// </param>

        /// <param name="status">Restore status.
        /// </param>

        /// <param name="blockReason">The reason why restore is in Blocked state.
        /// </param>

        /// <param name="lastUploadedFileName">Last uploaded file name.
        /// </param>

        /// <param name="lastUploadedFileTime">Last uploaded file time.
        /// </param>

        /// <param name="lastRestoredFileName">Last restored file name.
        /// </param>

        /// <param name="lastRestoredFileTime">Last restored file time.
        /// </param>

        /// <param name="percentCompleted">Percent completed.
        /// </param>

        /// <param name="currentRestoredSizeMb">Current restored size MB.
        /// </param>

        /// <param name="currentRestorePlanSizeMb">Current restore plan size MB.
        /// </param>

        /// <param name="currentBackupType">Current backup type.
        /// </param>

        /// <param name="currentRestoringFileName">Current restoring file name.
        /// </param>

        /// <param name="numberOfFilesDetected">Number of files detected.
        /// </param>

        /// <param name="numberOfFilesQueued">Number of files queued.
        /// </param>

        /// <param name="numberOfFilesSkipped">Number of files skipped.
        /// </param>

        /// <param name="numberOfFilesRestoring">Number of files restoring.
        /// </param>

        /// <param name="numberOfFilesRestored">Number of files restored.
        /// </param>

        /// <param name="numberOfFilesUnrestorable">Number of files unrestorable.
        /// </param>

        /// <param name="fullBackupSets">Full backup sets.
        /// </param>

        /// <param name="diffBackupSets">Diff backup sets.
        /// </param>

        /// <param name="logBackupSets">Log backup sets.
        /// </param>

        /// <param name="unrestorableFiles">Unrestorable files.
        /// </param>
        public ManagedDatabaseRestoreDetailsResult(string id = default(string), string name = default(string), string type = default(string), string propertiesType = default(string), string status = default(string), string blockReason = default(string), string lastUploadedFileName = default(string), System.DateTime? lastUploadedFileTime = default(System.DateTime?), string lastRestoredFileName = default(string), System.DateTime? lastRestoredFileTime = default(System.DateTime?), int? percentCompleted = default(int?), int? currentRestoredSizeMb = default(int?), int? currentRestorePlanSizeMb = default(int?), string currentBackupType = default(string), string currentRestoringFileName = default(string), int? numberOfFilesDetected = default(int?), int? numberOfFilesQueued = default(int?), int? numberOfFilesSkipped = default(int?), int? numberOfFilesRestoring = default(int?), int? numberOfFilesRestored = default(int?), int? numberOfFilesUnrestorable = default(int?), System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties> fullBackupSets = default(System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties>), System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties> diffBackupSets = default(System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties>), System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties> logBackupSets = default(System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties>), System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsUnrestorableFileProperties> unrestorableFiles = default(System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsUnrestorableFileProperties>))

        : base(id, name, type)
        {
            this.PropertiesType = propertiesType;
            this.Status = status;
            this.BlockReason = blockReason;
            this.LastUploadedFileName = lastUploadedFileName;
            this.LastUploadedFileTime = lastUploadedFileTime;
            this.LastRestoredFileName = lastRestoredFileName;
            this.LastRestoredFileTime = lastRestoredFileTime;
            this.PercentCompleted = percentCompleted;
            this.CurrentRestoredSizeMb = currentRestoredSizeMb;
            this.CurrentRestorePlanSizeMb = currentRestorePlanSizeMb;
            this.CurrentBackupType = currentBackupType;
            this.CurrentRestoringFileName = currentRestoringFileName;
            this.NumberOfFilesDetected = numberOfFilesDetected;
            this.NumberOfFilesQueued = numberOfFilesQueued;
            this.NumberOfFilesSkipped = numberOfFilesSkipped;
            this.NumberOfFilesRestoring = numberOfFilesRestoring;
            this.NumberOfFilesRestored = numberOfFilesRestored;
            this.NumberOfFilesUnrestorable = numberOfFilesUnrestorable;
            this.FullBackupSets = fullBackupSets;
            this.DiffBackupSets = diffBackupSets;
            this.LogBackupSets = logBackupSets;
            this.UnrestorableFiles = unrestorableFiles;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets restore type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.type")]
        public string PropertiesType {get; private set; }

        /// <summary>
        /// Gets restore status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the reason why restore is in Blocked state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.blockReason")]
        public string BlockReason {get; private set; }

        /// <summary>
        /// Gets last uploaded file name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastUploadedFileName")]
        public string LastUploadedFileName {get; private set; }

        /// <summary>
        /// Gets last uploaded file time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastUploadedFileTime")]
        public System.DateTime? LastUploadedFileTime {get; private set; }

        /// <summary>
        /// Gets last restored file name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastRestoredFileName")]
        public string LastRestoredFileName {get; private set; }

        /// <summary>
        /// Gets last restored file time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastRestoredFileTime")]
        public System.DateTime? LastRestoredFileTime {get; private set; }

        /// <summary>
        /// Gets percent completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.percentCompleted")]
        public int? PercentCompleted {get; private set; }

        /// <summary>
        /// Gets current restored size MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentRestoredSizeMB")]
        public int? CurrentRestoredSizeMb {get; private set; }

        /// <summary>
        /// Gets current restore plan size MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentRestorePlanSizeMB")]
        public int? CurrentRestorePlanSizeMb {get; private set; }

        /// <summary>
        /// Gets current backup type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentBackupType")]
        public string CurrentBackupType {get; private set; }

        /// <summary>
        /// Gets current restoring file name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentRestoringFileName")]
        public string CurrentRestoringFileName {get; private set; }

        /// <summary>
        /// Gets number of files detected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfFilesDetected")]
        public int? NumberOfFilesDetected {get; private set; }

        /// <summary>
        /// Gets number of files queued.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfFilesQueued")]
        public int? NumberOfFilesQueued {get; private set; }

        /// <summary>
        /// Gets number of files skipped.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfFilesSkipped")]
        public int? NumberOfFilesSkipped {get; private set; }

        /// <summary>
        /// Gets number of files restoring.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfFilesRestoring")]
        public int? NumberOfFilesRestoring {get; private set; }

        /// <summary>
        /// Gets number of files restored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfFilesRestored")]
        public int? NumberOfFilesRestored {get; private set; }

        /// <summary>
        /// Gets number of files unrestorable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.numberOfFilesUnrestorable")]
        public int? NumberOfFilesUnrestorable {get; private set; }

        /// <summary>
        /// Gets full backup sets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fullBackupSets")]
        public System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties> FullBackupSets {get; private set; }

        /// <summary>
        /// Gets diff backup sets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.diffBackupSets")]
        public System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties> DiffBackupSets {get; private set; }

        /// <summary>
        /// Gets log backup sets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.logBackupSets")]
        public System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsBackupSetProperties> LogBackupSets {get; private set; }

        /// <summary>
        /// Gets unrestorable files.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.unrestorableFiles")]
        public System.Collections.Generic.IList<ManagedDatabaseRestoreDetailsUnrestorableFileProperties> UnrestorableFiles {get; private set; }
    }
}