// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// SQL Managed Instance DTC
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ManagedInstanceDtc : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ManagedInstanceDtc class.
        /// </summary>
        public ManagedInstanceDtc()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedInstanceDtc class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="provisioningState">Provisioning state of managed instance DTC.
        /// Possible values include: 'Created', 'InProgress', 'Succeeded', 'Failed',
        /// 'Canceled'</param>

        /// <param name="dtcEnabled">Active status of managed instance DTC.
        /// </param>

        /// <param name="securitySettings">Security settings of managed instance DTC.
        /// </param>

        /// <param name="externalDnsSuffixSearchList">External dns suffix search list of managed instance DTC.
        /// </param>

        /// <param name="dtcHostNameDnsSuffix">Host name dns suffix of managed instance DTC.
        /// </param>
        public ManagedInstanceDtc(string id = default(string), string name = default(string), string type = default(string), string provisioningState = default(string), bool? dtcEnabled = default(bool?), ManagedInstanceDtcSecuritySettings securitySettings = default(ManagedInstanceDtcSecuritySettings), System.Collections.Generic.IList<string> externalDnsSuffixSearchList = default(System.Collections.Generic.IList<string>), string dtcHostNameDnsSuffix = default(string))

        : base(id, name, type)
        {
            this.ProvisioningState = provisioningState;
            this.DtcEnabled = dtcEnabled;
            this.SecuritySettings = securitySettings;
            this.ExternalDnsSuffixSearchList = externalDnsSuffixSearchList;
            this.DtcHostNameDnsSuffix = dtcHostNameDnsSuffix;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of managed instance DTC. Possible values include: &#39;Created&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets active status of managed instance DTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dtcEnabled")]
        public bool? DtcEnabled {get; set; }

        /// <summary>
        /// Gets or sets security settings of managed instance DTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.securitySettings")]
        public ManagedInstanceDtcSecuritySettings SecuritySettings {get; set; }

        /// <summary>
        /// Gets or sets external dns suffix search list of managed instance DTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.externalDnsSuffixSearchList")]
        public System.Collections.Generic.IList<string> ExternalDnsSuffixSearchList {get; set; }

        /// <summary>
        /// Gets host name dns suffix of managed instance DTC.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dtcHostNameDnsSuffix")]
        public string DtcHostNameDnsSuffix {get; private set; }
    }
}