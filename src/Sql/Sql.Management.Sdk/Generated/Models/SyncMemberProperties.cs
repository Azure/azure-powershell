// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a sync member.
    /// </summary>
    public partial class SyncMemberProperties
    {
        /// <summary>
        /// Initializes a new instance of the SyncMemberProperties class.
        /// </summary>
        public SyncMemberProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SyncMemberProperties class.
        /// </summary>

        /// <param name="databaseType">Database type of the sync member.
        /// Possible values include: 'AzureSqlDatabase', 'SqlServerDatabase'</param>

        /// <param name="syncAgentId">ARM resource id of the sync agent in the sync member.
        /// </param>

        /// <param name="sqlServerDatabaseId">SQL Server database id of the sync member.
        /// </param>

        /// <param name="syncMemberAzureDatabaseResourceId">ARM resource id of the sync member logical database, for sync members in
        /// Azure.
        /// </param>

        /// <param name="usePrivateLinkConnection">Whether to use private link connection.
        /// </param>

        /// <param name="privateEndpointName">Private endpoint name of the sync member if use private link connection is
        /// enabled, for sync members in Azure.
        /// </param>

        /// <param name="serverName">Server name of the member database in the sync member
        /// </param>

        /// <param name="databaseName">Database name of the member database in the sync member.
        /// </param>

        /// <param name="userName">User name of the member database in the sync member.
        /// </param>

        /// <param name="password">Password of the member database in the sync member.
        /// </param>

        /// <param name="syncDirection">Sync direction of the sync member.
        /// Possible values include: 'Bidirectional', 'OneWayMemberToHub',
        /// 'OneWayHubToMember'</param>

        /// <param name="syncState">Sync state of the sync member.
        /// Possible values include: 'SyncInProgress', 'SyncSucceeded', 'SyncFailed',
        /// 'DisabledTombstoneCleanup', 'DisabledBackupRestore',
        /// 'SyncSucceededWithWarnings', 'SyncCancelling', 'SyncCancelled',
        /// 'UnProvisioned', 'Provisioning', 'Provisioned', 'ProvisionFailed',
        /// 'DeProvisioning', 'DeProvisioned', 'DeProvisionFailed', 'Reprovisioning',
        /// 'ReprovisionFailed', 'UnReprovisioned'</param>
        public SyncMemberProperties(string databaseType = default(string), string syncAgentId = default(string), System.Guid? sqlServerDatabaseId = default(System.Guid?), string syncMemberAzureDatabaseResourceId = default(string), bool? usePrivateLinkConnection = default(bool?), string privateEndpointName = default(string), string serverName = default(string), string databaseName = default(string), string userName = default(string), string password = default(string), string syncDirection = default(string), string syncState = default(string))

        {
            this.DatabaseType = databaseType;
            this.SyncAgentId = syncAgentId;
            this.SqlServerDatabaseId = sqlServerDatabaseId;
            this.SyncMemberAzureDatabaseResourceId = syncMemberAzureDatabaseResourceId;
            this.UsePrivateLinkConnection = usePrivateLinkConnection;
            this.PrivateEndpointName = privateEndpointName;
            this.ServerName = serverName;
            this.DatabaseName = databaseName;
            this.UserName = userName;
            this.Password = password;
            this.SyncDirection = syncDirection;
            this.SyncState = syncState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets database type of the sync member. Possible values include: &#39;AzureSqlDatabase&#39;, &#39;SqlServerDatabase&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseType")]
        public string DatabaseType {get; set; }

        /// <summary>
        /// Gets or sets aRM resource id of the sync agent in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncAgentId")]
        public string SyncAgentId {get; set; }

        /// <summary>
        /// Gets or sets sQL Server database id of the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sqlServerDatabaseId")]
        public System.Guid? SqlServerDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets aRM resource id of the sync member logical database, for sync
        /// members in Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncMemberAzureDatabaseResourceId")]
        public string SyncMemberAzureDatabaseResourceId {get; set; }

        /// <summary>
        /// Gets or sets whether to use private link connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usePrivateLinkConnection")]
        public bool? UsePrivateLinkConnection {get; set; }

        /// <summary>
        /// Gets private endpoint name of the sync member if use private link
        /// connection is enabled, for sync members in Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointName")]
        public string PrivateEndpointName {get; private set; }

        /// <summary>
        /// Gets or sets server name of the member database in the sync member
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; set; }

        /// <summary>
        /// Gets or sets database name of the member database in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets user name of the member database in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public string UserName {get; set; }

        /// <summary>
        /// Gets or sets password of the member database in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password {get; set; }

        /// <summary>
        /// Gets or sets sync direction of the sync member. Possible values include: &#39;Bidirectional&#39;, &#39;OneWayMemberToHub&#39;, &#39;OneWayHubToMember&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncDirection")]
        public string SyncDirection {get; set; }

        /// <summary>
        /// Gets sync state of the sync member. Possible values include: &#39;SyncInProgress&#39;, &#39;SyncSucceeded&#39;, &#39;SyncFailed&#39;, &#39;DisabledTombstoneCleanup&#39;, &#39;DisabledBackupRestore&#39;, &#39;SyncSucceededWithWarnings&#39;, &#39;SyncCancelling&#39;, &#39;SyncCancelled&#39;, &#39;UnProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;ProvisionFailed&#39;, &#39;DeProvisioning&#39;, &#39;DeProvisioned&#39;, &#39;DeProvisionFailed&#39;, &#39;Reprovisioning&#39;, &#39;ReprovisionFailed&#39;, &#39;UnReprovisioned&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncState")]
        public string SyncState {get; private set; }
    }
}