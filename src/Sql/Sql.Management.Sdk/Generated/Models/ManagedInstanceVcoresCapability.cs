// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// The managed instance virtual cores capability.
    /// </summary>
    public partial class ManagedInstanceVcoresCapability
    {
        /// <summary>
        /// Initializes a new instance of the ManagedInstanceVcoresCapability class.
        /// </summary>
        public ManagedInstanceVcoresCapability()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedInstanceVcoresCapability class.
        /// </summary>

        /// <param name="name">The virtual cores identifier.
        /// </param>

        /// <param name="value">The virtual cores value.
        /// </param>

        /// <param name="includedMaxSize">Included size.
        /// </param>

        /// <param name="supportedStorageSizes">Storage size ranges.
        /// </param>

        /// <param name="includedStorageIOps">Included storage IOps.
        /// </param>

        /// <param name="supportedStorageIOps">Storage IOps ranges.
        /// </param>

        /// <param name="iopsMinValueOverrideFactorPerSelectedStorageGb">Min IOps override factor per selected storage GB.
        /// </param>

        /// <param name="iopsIncludedValueOverrideFactorPerSelectedStorageGb">Included IOps override factor per selected storage GB.
        /// </param>

        /// <param name="includedStorageThroughputMBps">Included storage throughput MBps.
        /// </param>

        /// <param name="supportedStorageThroughputMBps">Storage throughput MBps ranges.
        /// </param>

        /// <param name="throughputMBpsMinValueOverrideFactorPerSelectedStorageGb">Min throughput MBps override factor per selected storage GB.
        /// </param>

        /// <param name="throughputMBpsIncludedValueOverrideFactorPerSelectedStorageGb">Included throughput MBps override factor per selected storage GB.
        /// </param>

        /// <param name="instancePoolSupported">True if this service objective is supported for managed instances in an
        /// instance pool.
        /// </param>

        /// <param name="standaloneSupported">True if this service objective is supported for standalone managed
        /// instances.
        /// </param>

        /// <param name="supportedMaintenanceConfigurations">List of supported maintenance configurations
        /// </param>

        /// <param name="status">The status of the capability.
        /// Possible values include: &#39;Visible&#39;, &#39;Available&#39;, &#39;Default&#39;, &#39;Disabled&#39;</param>

        /// <param name="reason">The reason for the capability not being available.
        /// </param>
        public ManagedInstanceVcoresCapability(string name = default(string), int? value = default(int?), MaxSizeCapability includedMaxSize = default(MaxSizeCapability), System.Collections.Generic.IList<MaxSizeRangeCapability> supportedStorageSizes = default(System.Collections.Generic.IList<MaxSizeRangeCapability>), long? includedStorageIOps = default(long?), MaxLimitRangeCapability supportedStorageIOps = default(MaxLimitRangeCapability), double? iopsMinValueOverrideFactorPerSelectedStorageGb = default(double?), double? iopsIncludedValueOverrideFactorPerSelectedStorageGb = default(double?), long? includedStorageThroughputMBps = default(long?), MaxLimitRangeCapability supportedStorageThroughputMBps = default(MaxLimitRangeCapability), double? throughputMBpsMinValueOverrideFactorPerSelectedStorageGb = default(double?), double? throughputMBpsIncludedValueOverrideFactorPerSelectedStorageGb = default(double?), bool? instancePoolSupported = default(bool?), bool? standaloneSupported = default(bool?), System.Collections.Generic.IList<ManagedInstanceMaintenanceConfigurationCapability> supportedMaintenanceConfigurations = default(System.Collections.Generic.IList<ManagedInstanceMaintenanceConfigurationCapability>), CapabilityStatus? status = default(CapabilityStatus?), string reason = default(string))

        {
            this.Name = name;
            this.Value = value;
            this.IncludedMaxSize = includedMaxSize;
            this.SupportedStorageSizes = supportedStorageSizes;
            this.IncludedStorageIOps = includedStorageIOps;
            this.SupportedStorageIOps = supportedStorageIOps;
            this.IopsMinValueOverrideFactorPerSelectedStorageGb = iopsMinValueOverrideFactorPerSelectedStorageGb;
            this.IopsIncludedValueOverrideFactorPerSelectedStorageGb = iopsIncludedValueOverrideFactorPerSelectedStorageGb;
            this.IncludedStorageThroughputMBps = includedStorageThroughputMBps;
            this.SupportedStorageThroughputMBps = supportedStorageThroughputMBps;
            this.ThroughputMBpsMinValueOverrideFactorPerSelectedStorageGb = throughputMBpsMinValueOverrideFactorPerSelectedStorageGb;
            this.ThroughputMBpsIncludedValueOverrideFactorPerSelectedStorageGb = throughputMBpsIncludedValueOverrideFactorPerSelectedStorageGb;
            this.InstancePoolSupported = instancePoolSupported;
            this.StandaloneSupported = standaloneSupported;
            this.SupportedMaintenanceConfigurations = supportedMaintenanceConfigurations;
            this.Status = status;
            this.Reason = reason;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the virtual cores identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the virtual cores value.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public int? Value {get; private set; }

        /// <summary>
        /// Gets included size.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedMaxSize")]
        public MaxSizeCapability IncludedMaxSize {get; private set; }

        /// <summary>
        /// Gets storage size ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedStorageSizes")]
        public System.Collections.Generic.IList<MaxSizeRangeCapability> SupportedStorageSizes {get; private set; }

        /// <summary>
        /// Gets included storage IOps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedStorageIOps")]
        public long? IncludedStorageIOps {get; private set; }

        /// <summary>
        /// Gets storage IOps ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedStorageIOps")]
        public MaxLimitRangeCapability SupportedStorageIOps {get; private set; }

        /// <summary>
        /// Gets min IOps override factor per selected storage GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "iopsMinValueOverrideFactorPerSelectedStorageGB")]
        public double? IopsMinValueOverrideFactorPerSelectedStorageGb {get; private set; }

        /// <summary>
        /// Gets included IOps override factor per selected storage GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "iopsIncludedValueOverrideFactorPerSelectedStorageGB")]
        public double? IopsIncludedValueOverrideFactorPerSelectedStorageGb {get; private set; }

        /// <summary>
        /// Gets included storage throughput MBps.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedStorageThroughputMBps")]
        public long? IncludedStorageThroughputMBps {get; private set; }

        /// <summary>
        /// Gets storage throughput MBps ranges.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedStorageThroughputMBps")]
        public MaxLimitRangeCapability SupportedStorageThroughputMBps {get; private set; }

        /// <summary>
        /// Gets min throughput MBps override factor per selected storage GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputMBpsMinValueOverrideFactorPerSelectedStorageGB")]
        public double? ThroughputMBpsMinValueOverrideFactorPerSelectedStorageGb {get; private set; }

        /// <summary>
        /// Gets included throughput MBps override factor per selected storage GB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputMBpsIncludedValueOverrideFactorPerSelectedStorageGB")]
        public double? ThroughputMBpsIncludedValueOverrideFactorPerSelectedStorageGb {get; private set; }

        /// <summary>
        /// Gets true if this service objective is supported for managed instances in
        /// an instance pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instancePoolSupported")]
        public bool? InstancePoolSupported {get; private set; }

        /// <summary>
        /// Gets true if this service objective is supported for standalone managed
        /// instances.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "standaloneSupported")]
        public bool? StandaloneSupported {get; private set; }

        /// <summary>
        /// Gets list of supported maintenance configurations
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "supportedMaintenanceConfigurations")]
        public System.Collections.Generic.IList<ManagedInstanceMaintenanceConfigurationCapability> SupportedMaintenanceConfigurations {get; private set; }

        /// <summary>
        /// Gets the status of the capability. Possible values include: &#39;Visible&#39;, &#39;Available&#39;, &#39;Default&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public CapabilityStatus? Status {get; private set; }

        /// <summary>
        /// Gets or sets the reason for the capability not being available.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reason")]
        public string Reason {get; set; }
    }
}