// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of an instance pool.
    /// </summary>
    public partial class InstancePoolProperties
    {
        /// <summary>
        /// Initializes a new instance of the InstancePoolProperties class.
        /// </summary>
        public InstancePoolProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the InstancePoolProperties class.
        /// </summary>

        /// <param name="subnetId">Resource ID of the subnet to place this instance pool in.
        /// </param>

        /// <param name="vCores">Count of vCores belonging to this instance pool.
        /// </param>

        /// <param name="licenseType">The license type. Possible values are &#39;LicenseIncluded&#39; (price for SQL
        /// license is included) and &#39;BasePrice&#39; (without SQL license price).
        /// Possible values include: 'LicenseIncluded', 'BasePrice'</param>

        /// <param name="dnsZone">The Dns Zone that the managed instance pool is in.
        /// </param>

        /// <param name="maintenanceConfigurationId">Specifies maintenance configuration id to apply to this managed instance.
        /// </param>
        public InstancePoolProperties(string subnetId, int vCores, string licenseType, string dnsZone = default(string), string maintenanceConfigurationId = default(string))

        {
            this.SubnetId = subnetId;
            this.VCores = vCores;
            this.LicenseType = licenseType;
            this.DnsZone = dnsZone;
            this.MaintenanceConfigurationId = maintenanceConfigurationId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource ID of the subnet to place this instance pool in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnetId")]
        public string SubnetId {get; set; }

        /// <summary>
        /// Gets or sets count of vCores belonging to this instance pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vCores")]
        public int VCores {get; set; }

        /// <summary>
        /// Gets or sets the license type. Possible values are &#39;LicenseIncluded&#39; (price
        /// for SQL license is included) and &#39;BasePrice&#39; (without SQL license price). Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets the Dns Zone that the managed instance pool is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsZone")]
        public string DnsZone {get; private set; }

        /// <summary>
        /// Gets or sets specifies maintenance configuration id to apply to this
        /// managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maintenanceConfigurationId")]
        public string MaintenanceConfigurationId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SubnetId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SubnetId");
            }
            if (this.LicenseType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "LicenseType");
            }




        }
    }
}