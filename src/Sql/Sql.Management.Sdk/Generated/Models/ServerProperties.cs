// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a server.
    /// </summary>
    public partial class ServerProperties
    {
        /// <summary>
        /// Initializes a new instance of the ServerProperties class.
        /// </summary>
        public ServerProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ServerProperties class.
        /// </summary>

        /// <param name="administratorLogin">Administrator username for the server. Once created it cannot be changed.
        /// </param>

        /// <param name="administratorLoginPassword">The administrator login password (required for server creation).
        /// </param>

        /// <param name="version">The version of the server.
        /// </param>

        /// <param name="state">The state of the server.
        /// </param>

        /// <param name="fullyQualifiedDomainName">The fully qualified domain name of the server.
        /// </param>

        /// <param name="privateEndpointConnections">List of private endpoint connections on a server
        /// </param>

        /// <param name="minimalTlsVersion">Minimal TLS version. Allowed values: &#39;None&#39;, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;
        /// </param>

        /// <param name="publicNetworkAccess">Whether or not public endpoint access is allowed for this server.  Value is
        /// optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39; or
        /// &#39;SecuredByPerimeter&#39;
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;SecuredByPerimeter&#39;</param>

        /// <param name="workspaceFeature">Whether or not existing server has a workspace created and if it allows
        /// connection from workspace
        /// Possible values include: &#39;Connected&#39;, &#39;Disconnected&#39;</param>

        /// <param name="primaryUserAssignedIdentityId">The resource id of a user assigned identity to be used by default.
        /// </param>

        /// <param name="federatedClientId">The Client id used for cross tenant CMK scenario
        /// </param>

        /// <param name="keyId">A CMK URI of the key to use for encryption.
        /// </param>

        /// <param name="administrators">The Azure Active Directory administrator of the server. This can only be
        /// used at server create time. If used for server update, it will be ignored
        /// or it will result in an error. For updates individual APIs will need to be
        /// used.
        /// </param>

        /// <param name="restrictOutboundNetworkAccess">Whether or not to restrict outbound network access for this server.  Value
        /// is optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="isIPv6Enabled">Whether or not to enable IPv6 support for this server.  Value is optional
        /// but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39;
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="externalGovernanceStatus">Status of external governance.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>
        public ServerProperties(string administratorLogin = default(string), string administratorLoginPassword = default(string), string version = default(string), string state = default(string), string fullyQualifiedDomainName = default(string), System.Collections.Generic.IList<ServerPrivateEndpointConnection> privateEndpointConnections = default(System.Collections.Generic.IList<ServerPrivateEndpointConnection>), string minimalTlsVersion = default(string), string publicNetworkAccess = default(string), string workspaceFeature = default(string), string primaryUserAssignedIdentityId = default(string), System.Guid? federatedClientId = default(System.Guid?), string keyId = default(string), ServerExternalAdministrator administrators = default(ServerExternalAdministrator), string restrictOutboundNetworkAccess = default(string), string isIPv6Enabled = default(string), string externalGovernanceStatus = default(string))

        {
            this.AdministratorLogin = administratorLogin;
            this.AdministratorLoginPassword = administratorLoginPassword;
            this.Version = version;
            this.State = state;
            this.FullyQualifiedDomainName = fullyQualifiedDomainName;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.MinimalTlsVersion = minimalTlsVersion;
            this.PublicNetworkAccess = publicNetworkAccess;
            this.WorkspaceFeature = workspaceFeature;
            this.PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            this.FederatedClientId = federatedClientId;
            this.KeyId = keyId;
            this.Administrators = administrators;
            this.RestrictOutboundNetworkAccess = restrictOutboundNetworkAccess;
            this.IsIPv6Enabled = isIPv6Enabled;
            this.ExternalGovernanceStatus = externalGovernanceStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets administrator username for the server. Once created it cannot
        /// be changed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorLogin")]
        public string AdministratorLogin {get; set; }

        /// <summary>
        /// Gets or sets the administrator login password (required for server
        /// creation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorLoginPassword")]
        public string AdministratorLoginPassword {get; set; }

        /// <summary>
        /// Gets or sets the version of the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; set; }

        /// <summary>
        /// Gets the state of the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets the fully qualified domain name of the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName {get; private set; }

        /// <summary>
        /// Gets list of private endpoint connections on a server
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointConnections")]
        public System.Collections.Generic.IList<ServerPrivateEndpointConnection> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets or sets minimal TLS version. Allowed values: &#39;None&#39;, &#39;1.0&#39;, &#39;1.1&#39;,
        /// &#39;1.2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minimalTlsVersion")]
        public string MinimalTlsVersion {get; set; }

        /// <summary>
        /// Gets or sets whether or not public endpoint access is allowed for this
        /// server.  Value is optional but if passed in, must be &#39;Enabled&#39; or
        /// &#39;Disabled&#39; or &#39;SecuredByPerimeter&#39; Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;, &#39;SecuredByPerimeter&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicNetworkAccess")]
        public string PublicNetworkAccess {get; set; }

        /// <summary>
        /// Gets whether or not existing server has a workspace created and if it
        /// allows connection from workspace Possible values include: &#39;Connected&#39;, &#39;Disconnected&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workspaceFeature")]
        public string WorkspaceFeature {get; private set; }

        /// <summary>
        /// Gets or sets the resource id of a user assigned identity to be used by
        /// default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryUserAssignedIdentityId")]
        public string PrimaryUserAssignedIdentityId {get; set; }

        /// <summary>
        /// Gets or sets the Client id used for cross tenant CMK scenario
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "federatedClientId")]
        public System.Guid? FederatedClientId {get; set; }

        /// <summary>
        /// Gets or sets a CMK URI of the key to use for encryption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyId")]
        public string KeyId {get; set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory administrator of the server. This
        /// can only be used at server create time. If used for server update, it will
        /// be ignored or it will result in an error. For updates individual APIs will
        /// need to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administrators")]
        public ServerExternalAdministrator Administrators {get; set; }

        /// <summary>
        /// Gets or sets whether or not to restrict outbound network access for this
        /// server.  Value is optional but if passed in, must be &#39;Enabled&#39; or
        /// &#39;Disabled&#39; Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restrictOutboundNetworkAccess")]
        public string RestrictOutboundNetworkAccess {get; set; }

        /// <summary>
        /// Gets or sets whether or not to enable IPv6 support for this server.  Value
        /// is optional but if passed in, must be &#39;Enabled&#39; or &#39;Disabled&#39; Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isIPv6Enabled")]
        public string IsIPv6Enabled {get; set; }

        /// <summary>
        /// Gets status of external governance. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalGovernanceStatus")]
        public string ExternalGovernanceStatus {get; private set; }
    }
}