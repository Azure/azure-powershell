// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of a managed instance.
    /// </summary>
    public partial class ManagedInstanceProperties
    {
        /// <summary>
        /// Initializes a new instance of the ManagedInstanceProperties class.
        /// </summary>
        public ManagedInstanceProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedInstanceProperties class.
        /// </summary>

        /// <param name="provisioningState">Provisioning state of managed instance.
        /// Possible values include: &#39;Created&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;,
        /// &#39;Canceled&#39;</param>

        /// <param name="managedInstanceCreateMode">Specifies the mode of database creation.
        /// Default: Regular instance creation.
        /// Restore: Creates an instance by restoring a set of backups to specific
        /// point in time. RestorePointInTime and SourceManagedInstanceId must be
        /// specified.
        /// Possible values include: &#39;Default&#39;, &#39;PointInTimeRestore&#39;</param>

        /// <param name="fullyQualifiedDomainName">The fully qualified domain name of the managed instance.
        /// </param>

        /// <param name="isGeneralPurposeV2">Whether or not this is a GPv2 variant of General Purpose edition.
        /// </param>

        /// <param name="administratorLogin">Administrator username for the managed instance. Can only be specified when
        /// the managed instance is being created (and is required for creation).
        /// </param>

        /// <param name="administratorLoginPassword">The administrator login password (required for managed instance creation).
        /// </param>

        /// <param name="subnetId">Subnet resource ID for the managed instance.
        /// </param>

        /// <param name="state">The state of the managed instance.
        /// </param>

        /// <param name="licenseType">The license type. Possible values are &#39;LicenseIncluded&#39; (regular price
        /// inclusive of a new SQL license) and &#39;BasePrice&#39; (discounted AHB price for
        /// bringing your own SQL licenses).
        /// Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;</param>

        /// <param name="hybridSecondaryUsage">Hybrid secondary usage. Possible values are &#39;Active&#39; (default value) and
        /// &#39;Passive&#39; (customer uses the secondary as Passive DR).
        /// Possible values include: &#39;Active&#39;, &#39;Passive&#39;</param>

        /// <param name="hybridSecondaryUsageDetected">Hybrid secondary usage detected. Possible values are &#39;Active&#39; (customer
        /// does not meet the requirements to use the secondary as Passive DR) and
        /// &#39;Passive&#39; (customer meets the requirements to use the secondary as Passive
        /// DR).
        /// Possible values include: &#39;Active&#39;, &#39;Passive&#39;</param>

        /// <param name="vCores">The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
        /// </param>

        /// <param name="storageSizeInGb">Storage size in GB. Minimum value: 32. Maximum value: 16384. Increments of
        /// 32 GB allowed only. Maximum value depends on the selected hardware family
        /// and number of vCores.
        /// </param>

        /// <param name="storageIOps">Storage IOps. Minimum value: 120. Maximum value: 120000. Increments of 1
        /// IOps allowed only. Maximum value depends on the selected hardware family
        /// and number of vCores.
        /// </param>

        /// <param name="storageThroughputMBps">Storage throughput in MBps. Minimum value: 25. Maximum value: 4000.
        /// Increments of 1 MBps allowed only. Maximum value depends on the selected
        /// hardware family and number of vCores.
        /// </param>

        /// <param name="collation">Collation of the managed instance.
        /// </param>

        /// <param name="dnsZone">The Dns Zone that the managed instance is in.
        /// </param>

        /// <param name="dnsZonePartner">The resource id of another managed instance whose DNS zone this managed
        /// instance will share after creation.
        /// </param>

        /// <param name="publicDataEndpointEnabled">Whether or not the public data endpoint is enabled.
        /// </param>

        /// <param name="sourceManagedInstanceId">The resource identifier of the source managed instance associated with
        /// create operation of this instance.
        /// </param>

        /// <param name="restorePointInTime">Specifies the point in time (ISO8601 format) of the source database that
        /// will be restored to create the new database.
        /// </param>

        /// <param name="proxyOverride">Connection type used for connecting to the instance.
        /// Possible values include: &#39;Proxy&#39;, &#39;Redirect&#39;, &#39;Default&#39;</param>

        /// <param name="timezoneId">Id of the timezone. Allowed values are timezones supported by Windows.
        /// Windows keeps details on supported timezones, including the id, in registry
        /// under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
        /// You can get those registry values via SQL Server by querying SELECT name AS
        /// timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is &#34;Pacific Standard Time&#34; or &#34;W. Europe
        /// Standard Time&#34;.
        /// </param>

        /// <param name="instancePoolId">The Id of the instance pool this managed server belongs to.
        /// </param>

        /// <param name="maintenanceConfigurationId">Specifies maintenance configuration id to apply to this managed instance.
        /// </param>

        /// <param name="privateEndpointConnections">List of private endpoint connections on a managed instance.
        /// </param>

        /// <param name="minimalTlsVersion">Minimal TLS version. Allowed values: &#39;None&#39;, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;
        /// </param>

        /// <param name="currentBackupStorageRedundancy">The storage account type used to store backups for this instance. The
        /// options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage),
        /// Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="requestedBackupStorageRedundancy">The storage account type to be used to store backups for this instance. The
        /// options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage),
        /// Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="zoneRedundant">Whether or not the multi-az is enabled.
        /// </param>

        /// <param name="primaryUserAssignedIdentityId">The resource id of a user assigned identity to be used by default.
        /// </param>

        /// <param name="keyId">A CMK URI of the key to use for encryption.
        /// </param>

        /// <param name="administrators">The Azure Active Directory administrator of the instance. This can only be
        /// used at instance create time. If used for instance update, it will be
        /// ignored or it will result in an error. For updates individual APIs will
        /// need to be used.
        /// </param>

        /// <param name="servicePrincipal">The managed instance&#39;s service principal.
        /// </param>

        /// <param name="virtualClusterId">Virtual cluster resource id for the Managed Instance.
        /// </param>

        /// <param name="externalGovernanceStatus">Status of external governance.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="pricingModel">Weather or not Managed Instance is freemium.
        /// Possible values include: &#39;Regular&#39;, &#39;Freemium&#39;</param>

        /// <param name="createTime">Specifies the point in time (ISO8601 format) of the Managed Instance
        /// creation.
        /// </param>

        /// <param name="authenticationMetadata">The managed instance&#39;s authentication metadata lookup mode.
        /// Possible values include: &#39;AzureAD&#39;, &#39;Paired&#39;, &#39;Windows&#39;</param>

        /// <param name="databaseFormat">Specifies the internal format of instance databases specific to the SQL
        /// engine version.
        /// Possible values include: &#39;AlwaysUpToDate&#39;, &#39;SQLServer2022&#39;</param>
        public ManagedInstanceProperties(string provisioningState = default(string), string managedInstanceCreateMode = default(string), string fullyQualifiedDomainName = default(string), bool? isGeneralPurposeV2 = default(bool?), string administratorLogin = default(string), string administratorLoginPassword = default(string), string subnetId = default(string), string state = default(string), string licenseType = default(string), string hybridSecondaryUsage = default(string), string hybridSecondaryUsageDetected = default(string), int? vCores = default(int?), int? storageSizeInGb = default(int?), int? storageIOps = default(int?), int? storageThroughputMBps = default(int?), string collation = default(string), string dnsZone = default(string), string dnsZonePartner = default(string), bool? publicDataEndpointEnabled = default(bool?), string sourceManagedInstanceId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), string proxyOverride = default(string), string timezoneId = default(string), string instancePoolId = default(string), string maintenanceConfigurationId = default(string), System.Collections.Generic.IList<ManagedInstancePecProperty> privateEndpointConnections = default(System.Collections.Generic.IList<ManagedInstancePecProperty>), string minimalTlsVersion = default(string), string currentBackupStorageRedundancy = default(string), string requestedBackupStorageRedundancy = default(string), bool? zoneRedundant = default(bool?), string primaryUserAssignedIdentityId = default(string), string keyId = default(string), ManagedInstanceExternalAdministrator administrators = default(ManagedInstanceExternalAdministrator), ServicePrincipal servicePrincipal = default(ServicePrincipal), string virtualClusterId = default(string), string externalGovernanceStatus = default(string), string pricingModel = default(string), System.DateTime? createTime = default(System.DateTime?), string authenticationMetadata = default(string), string databaseFormat = default(string))

        {
            this.ProvisioningState = provisioningState;
            this.ManagedInstanceCreateMode = managedInstanceCreateMode;
            this.FullyQualifiedDomainName = fullyQualifiedDomainName;
            this.IsGeneralPurposeV2 = isGeneralPurposeV2;
            this.AdministratorLogin = administratorLogin;
            this.AdministratorLoginPassword = administratorLoginPassword;
            this.SubnetId = subnetId;
            this.State = state;
            this.LicenseType = licenseType;
            this.HybridSecondaryUsage = hybridSecondaryUsage;
            this.HybridSecondaryUsageDetected = hybridSecondaryUsageDetected;
            this.VCores = vCores;
            this.StorageSizeInGb = storageSizeInGb;
            this.StorageIOps = storageIOps;
            this.StorageThroughputMBps = storageThroughputMBps;
            this.Collation = collation;
            this.DnsZone = dnsZone;
            this.DnsZonePartner = dnsZonePartner;
            this.PublicDataEndpointEnabled = publicDataEndpointEnabled;
            this.SourceManagedInstanceId = sourceManagedInstanceId;
            this.RestorePointInTime = restorePointInTime;
            this.ProxyOverride = proxyOverride;
            this.TimezoneId = timezoneId;
            this.InstancePoolId = instancePoolId;
            this.MaintenanceConfigurationId = maintenanceConfigurationId;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.MinimalTlsVersion = minimalTlsVersion;
            this.CurrentBackupStorageRedundancy = currentBackupStorageRedundancy;
            this.RequestedBackupStorageRedundancy = requestedBackupStorageRedundancy;
            this.ZoneRedundant = zoneRedundant;
            this.PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            this.KeyId = keyId;
            this.Administrators = administrators;
            this.ServicePrincipal = servicePrincipal;
            this.VirtualClusterId = virtualClusterId;
            this.ExternalGovernanceStatus = externalGovernanceStatus;
            this.PricingModel = pricingModel;
            this.CreateTime = createTime;
            this.AuthenticationMetadata = authenticationMetadata;
            this.DatabaseFormat = databaseFormat;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets provisioning state of managed instance. Possible values include: &#39;Created&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets specifies the mode of database creation.
        /// Default: Regular instance creation.
        /// Restore: Creates an instance by restoring a set of backups to specific
        /// point in time. RestorePointInTime and SourceManagedInstanceId must be
        /// specified. Possible values include: &#39;Default&#39;, &#39;PointInTimeRestore&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "managedInstanceCreateMode")]
        public string ManagedInstanceCreateMode {get; set; }

        /// <summary>
        /// Gets the fully qualified domain name of the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName {get; private set; }

        /// <summary>
        /// Gets or sets whether or not this is a GPv2 variant of General Purpose
        /// edition.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isGeneralPurposeV2")]
        public bool? IsGeneralPurposeV2 {get; set; }

        /// <summary>
        /// Gets or sets administrator username for the managed instance. Can only be
        /// specified when the managed instance is being created (and is required for
        /// creation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorLogin")]
        public string AdministratorLogin {get; set; }

        /// <summary>
        /// Gets or sets the administrator login password (required for managed
        /// instance creation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorLoginPassword")]
        public string AdministratorLoginPassword {get; set; }

        /// <summary>
        /// Gets or sets subnet resource ID for the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnetId")]
        public string SubnetId {get; set; }

        /// <summary>
        /// Gets the state of the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets or sets the license type. Possible values are &#39;LicenseIncluded&#39;
        /// (regular price inclusive of a new SQL license) and &#39;BasePrice&#39; (discounted
        /// AHB price for bringing your own SQL licenses). Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets hybrid secondary usage. Possible values are &#39;Active&#39; (default
        /// value) and &#39;Passive&#39; (customer uses the secondary as Passive DR). Possible values include: &#39;Active&#39;, &#39;Passive&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hybridSecondaryUsage")]
        public string HybridSecondaryUsage {get; set; }

        /// <summary>
        /// Gets hybrid secondary usage detected. Possible values are &#39;Active&#39;
        /// (customer does not meet the requirements to use the secondary as Passive
        /// DR) and &#39;Passive&#39; (customer meets the requirements to use the secondary as
        /// Passive DR). Possible values include: &#39;Active&#39;, &#39;Passive&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hybridSecondaryUsageDetected")]
        public string HybridSecondaryUsageDetected {get; private set; }

        /// <summary>
        /// Gets or sets the number of vCores. Allowed values: 8, 16, 24, 32, 40, 64,
        /// 80.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vCores")]
        public int? VCores {get; set; }

        /// <summary>
        /// Gets or sets storage size in GB. Minimum value: 32. Maximum value: 16384.
        /// Increments of 32 GB allowed only. Maximum value depends on the selected
        /// hardware family and number of vCores.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageSizeInGB")]
        public int? StorageSizeInGb {get; set; }

        /// <summary>
        /// Gets or sets storage IOps. Minimum value: 120. Maximum value: 120000.
        /// Increments of 1 IOps allowed only. Maximum value depends on the selected
        /// hardware family and number of vCores.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageIOps")]
        public int? StorageIOps {get; set; }

        /// <summary>
        /// Gets or sets storage throughput in MBps. Minimum value: 25. Maximum value:
        /// 4000. Increments of 1 MBps allowed only. Maximum value depends on the
        /// selected hardware family and number of vCores.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageThroughputMBps")]
        public int? StorageThroughputMBps {get; set; }

        /// <summary>
        /// Gets or sets collation of the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collation")]
        public string Collation {get; set; }

        /// <summary>
        /// Gets the Dns Zone that the managed instance is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsZone")]
        public string DnsZone {get; private set; }

        /// <summary>
        /// Gets or sets the resource id of another managed instance whose DNS zone
        /// this managed instance will share after creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dnsZonePartner")]
        public string DnsZonePartner {get; set; }

        /// <summary>
        /// Gets or sets whether or not the public data endpoint is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publicDataEndpointEnabled")]
        public bool? PublicDataEndpointEnabled {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source managed instance
        /// associated with create operation of this instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceManagedInstanceId")]
        public string SourceManagedInstanceId {get; set; }

        /// <summary>
        /// Gets or sets specifies the point in time (ISO8601 format) of the source
        /// database that will be restored to create the new database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restorePointInTime")]
        public System.DateTime? RestorePointInTime {get; set; }

        /// <summary>
        /// Gets or sets connection type used for connecting to the instance. Possible values include: &#39;Proxy&#39;, &#39;Redirect&#39;, &#39;Default&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "proxyOverride")]
        public string ProxyOverride {get; set; }

        /// <summary>
        /// Gets or sets id of the timezone. Allowed values are timezones supported by
        /// Windows.
        /// Windows keeps details on supported timezones, including the id, in registry
        /// under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
        /// You can get those registry values via SQL Server by querying SELECT name AS
        /// timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is &#34;Pacific Standard Time&#34; or &#34;W. Europe
        /// Standard Time&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timezoneId")]
        public string TimezoneId {get; set; }

        /// <summary>
        /// Gets or sets the Id of the instance pool this managed server belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instancePoolId")]
        public string InstancePoolId {get; set; }

        /// <summary>
        /// Gets or sets specifies maintenance configuration id to apply to this
        /// managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maintenanceConfigurationId")]
        public string MaintenanceConfigurationId {get; set; }

        /// <summary>
        /// Gets list of private endpoint connections on a managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointConnections")]
        public System.Collections.Generic.IList<ManagedInstancePecProperty> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets or sets minimal TLS version. Allowed values: &#39;None&#39;, &#39;1.0&#39;, &#39;1.1&#39;,
        /// &#39;1.2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minimalTlsVersion")]
        public string MinimalTlsVersion {get; set; }

        /// <summary>
        /// Gets the storage account type used to store backups for this instance. The
        /// options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage),
        /// Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage) Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentBackupStorageRedundancy")]
        public string CurrentBackupStorageRedundancy {get; private set; }

        /// <summary>
        /// Gets or sets the storage account type to be used to store backups for this
        /// instance. The options are Local (LocallyRedundantStorage), Zone
        /// (ZoneRedundantStorage), Geo (GeoRedundantStorage) and
        /// GeoZone(GeoZoneRedundantStorage) Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestedBackupStorageRedundancy")]
        public string RequestedBackupStorageRedundancy {get; set; }

        /// <summary>
        /// Gets or sets whether or not the multi-az is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zoneRedundant")]
        public bool? ZoneRedundant {get; set; }

        /// <summary>
        /// Gets or sets the resource id of a user assigned identity to be used by
        /// default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "primaryUserAssignedIdentityId")]
        public string PrimaryUserAssignedIdentityId {get; set; }

        /// <summary>
        /// Gets or sets a CMK URI of the key to use for encryption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keyId")]
        public string KeyId {get; set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory administrator of the instance. This
        /// can only be used at instance create time. If used for instance update, it
        /// will be ignored or it will result in an error. For updates individual APIs
        /// will need to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administrators")]
        public ManagedInstanceExternalAdministrator Administrators {get; set; }

        /// <summary>
        /// Gets or sets the managed instance&#39;s service principal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "servicePrincipal")]
        public ServicePrincipal ServicePrincipal {get; set; }

        /// <summary>
        /// Gets virtual cluster resource id for the Managed Instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "virtualClusterId")]
        public string VirtualClusterId {get; private set; }

        /// <summary>
        /// Gets status of external governance. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalGovernanceStatus")]
        public string ExternalGovernanceStatus {get; private set; }

        /// <summary>
        /// Gets or sets weather or not Managed Instance is freemium. Possible values include: &#39;Regular&#39;, &#39;Freemium&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pricingModel")]
        public string PricingModel {get; set; }

        /// <summary>
        /// Gets specifies the point in time (ISO8601 format) of the Managed Instance
        /// creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createTime")]
        public System.DateTime? CreateTime {get; private set; }

        /// <summary>
        /// Gets or sets the managed instance&#39;s authentication metadata lookup mode. Possible values include: &#39;AzureAD&#39;, &#39;Paired&#39;, &#39;Windows&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationMetadata")]
        public string AuthenticationMetadata {get; set; }

        /// <summary>
        /// Gets or sets specifies the internal format of instance databases specific
        /// to the SQL engine version. Possible values include: &#39;AlwaysUpToDate&#39;, &#39;SQLServer2022&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseFormat")]
        public string DatabaseFormat {get; set; }
    }
}