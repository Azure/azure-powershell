// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Database metrics.
    /// </summary>
    public partial class Metric
    {
        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>
        public Metric()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Metric class.
        /// </summary>

        /// <param name="startTime">The start time for the metric (ISO-8601 format).
        /// </param>

        /// <param name="endTime">The end time for the metric (ISO-8601 format).
        /// </param>

        /// <param name="timeGrain">The time step to be used to summarize the metric values.
        /// </param>

        /// <param name="unit">The unit of the metric.
        /// Possible values include: &#39;count&#39;, &#39;bytes&#39;, &#39;seconds&#39;, &#39;percent&#39;,
        /// &#39;countPerSecond&#39;, &#39;bytesPerSecond&#39;</param>

        /// <param name="name">The name information for the metric.
        /// </param>

        /// <param name="metricValues">The metric values for the specified time window and timestep.
        /// </param>
        public Metric(System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), string timeGrain = default(string), string unit = default(string), MetricName name = default(MetricName), System.Collections.Generic.IList<MetricValue> metricValues = default(System.Collections.Generic.IList<MetricValue>))

        {
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.TimeGrain = timeGrain;
            this.Unit = unit;
            this.Name = name;
            this.MetricValues = metricValues;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the start time for the metric (ISO-8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets the end time for the metric (ISO-8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; private set; }

        /// <summary>
        /// Gets the time step to be used to summarize the metric values.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeGrain")]
        public string TimeGrain {get; private set; }

        /// <summary>
        /// Gets the unit of the metric. Possible values include: &#39;count&#39;, &#39;bytes&#39;, &#39;seconds&#39;, &#39;percent&#39;, &#39;countPerSecond&#39;, &#39;bytesPerSecond&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unit")]
        public string Unit {get; private set; }

        /// <summary>
        /// Gets the name information for the metric.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public MetricName Name {get; private set; }

        /// <summary>
        /// Gets the metric values for the specified time window and timestep.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metricValues")]
        public System.Collections.Generic.IList<MetricValue> MetricValues {get; private set; }
    }
}