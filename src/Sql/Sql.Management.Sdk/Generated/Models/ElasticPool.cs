// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// An elastic pool.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ElasticPool : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the ElasticPool class.
        /// </summary>
        public ElasticPool()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ElasticPool class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="sku">The elastic pool SKU.
        /// The list of SKUs may vary by region and support offer. To determine the
        /// SKUs (including the SKU name, tier/edition, family, and capacity) that are
        /// available to your subscription in an Azure region, use the
        /// `Capabilities_ListByLocation` REST API or the following command:
        /// ```azurecli
        /// az sql elastic-pool list-editions -l &lt;location&gt; -o table
        /// ````
        /// </param>

        /// <param name="kind">Kind of elastic pool. This is metadata used for the Azure portal
        /// experience.
        /// </param>

        /// <param name="state">The state of the elastic pool.
        /// Possible values include: 'Creating', 'Ready', 'Disabled'</param>

        /// <param name="creationDate">The creation date of the elastic pool (ISO8601 format).
        /// </param>

        /// <param name="maxSizeBytes">The storage limit for the database elastic pool in bytes.
        /// </param>

        /// <param name="minCapacity">Minimal capacity that serverless pool will not shrink below, if not paused
        /// </param>

        /// <param name="perDatabaseSettings">The per database settings for the elastic pool.
        /// </param>

        /// <param name="zoneRedundant">Whether or not this elastic pool is zone redundant, which means the
        /// replicas of this elastic pool will be spread across multiple availability
        /// zones.
        /// </param>

        /// <param name="licenseType">The license type to apply for this elastic pool.
        /// Possible values include: 'LicenseIncluded', 'BasePrice'</param>

        /// <param name="maintenanceConfigurationId">Maintenance configuration id assigned to the elastic pool. This
        /// configuration defines the period when the maintenance updates will will
        /// occur.
        /// </param>

        /// <param name="highAvailabilityReplicaCount">The number of secondary replicas associated with the elastic pool that are
        /// used to provide high availability. Applicable only to Hyperscale elastic
        /// pools.
        /// </param>

        /// <param name="preferredEnclaveType">Type of enclave requested on the elastic pool.
        /// Possible values include: 'Default', 'VBS'</param>

        /// <param name="availabilityZone">Specifies the availability zone the pool&#39;s primary replica is pinned to.
        /// Possible values include: 'NoPreference', '1', '2', '3'</param>
        public ElasticPool(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), string kind = default(string), string state = default(string), System.DateTime? creationDate = default(System.DateTime?), long? maxSizeBytes = default(long?), double? minCapacity = default(double?), ElasticPoolPerDatabaseSettings perDatabaseSettings = default(ElasticPoolPerDatabaseSettings), bool? zoneRedundant = default(bool?), string licenseType = default(string), string maintenanceConfigurationId = default(string), int? highAvailabilityReplicaCount = default(int?), string preferredEnclaveType = default(string), string availabilityZone = default(string))

        : base(location, id, name, type, tags)
        {
            this.Sku = sku;
            this.Kind = kind;
            this.State = state;
            this.CreationDate = creationDate;
            this.MaxSizeBytes = maxSizeBytes;
            this.MinCapacity = minCapacity;
            this.PerDatabaseSettings = perDatabaseSettings;
            this.ZoneRedundant = zoneRedundant;
            this.LicenseType = licenseType;
            this.MaintenanceConfigurationId = maintenanceConfigurationId;
            this.HighAvailabilityReplicaCount = highAvailabilityReplicaCount;
            this.PreferredEnclaveType = preferredEnclaveType;
            this.AvailabilityZone = availabilityZone;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the elastic pool SKU.
        /// The list of SKUs may vary by region and support offer. To determine the
        /// SKUs (including the SKU name, tier/edition, family, and capacity) that are
        /// available to your subscription in an Azure region, use the
        /// `Capabilities_ListByLocation` REST API or the following command:
        /// ```azurecli
        /// az sql elastic-pool list-editions -l &lt;location&gt; -o table
        /// ````
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets kind of elastic pool. This is metadata used for the Azure portal
        /// experience.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kind")]
        public string Kind {get; private set; }

        /// <summary>
        /// Gets the state of the elastic pool. Possible values include: &#39;Creating&#39;, &#39;Ready&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets the creation date of the elastic pool (ISO8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate {get; private set; }

        /// <summary>
        /// Gets or sets the storage limit for the database elastic pool in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxSizeBytes")]
        public long? MaxSizeBytes {get; set; }

        /// <summary>
        /// Gets or sets minimal capacity that serverless pool will not shrink below,
        /// if not paused
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minCapacity")]
        public double? MinCapacity {get; set; }

        /// <summary>
        /// Gets or sets the per database settings for the elastic pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.perDatabaseSettings")]
        public ElasticPoolPerDatabaseSettings PerDatabaseSettings {get; set; }

        /// <summary>
        /// Gets or sets whether or not this elastic pool is zone redundant, which
        /// means the replicas of this elastic pool will be spread across multiple
        /// availability zones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.zoneRedundant")]
        public bool? ZoneRedundant {get; set; }

        /// <summary>
        /// Gets or sets the license type to apply for this elastic pool. Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets maintenance configuration id assigned to the elastic pool.
        /// This configuration defines the period when the maintenance updates will
        /// will occur.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceConfigurationId")]
        public string MaintenanceConfigurationId {get; set; }

        /// <summary>
        /// Gets or sets the number of secondary replicas associated with the elastic
        /// pool that are used to provide high availability. Applicable only to
        /// Hyperscale elastic pools.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.highAvailabilityReplicaCount")]
        public int? HighAvailabilityReplicaCount {get; set; }

        /// <summary>
        /// Gets or sets type of enclave requested on the elastic pool. Possible values include: &#39;Default&#39;, &#39;VBS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.preferredEnclaveType")]
        public string PreferredEnclaveType {get; set; }

        /// <summary>
        /// Gets or sets specifies the availability zone the pool&#39;s primary replica is
        /// pinned to. Possible values include: &#39;NoPreference&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.availabilityZone")]
        public string AvailabilityZone {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }







        }
    }
}