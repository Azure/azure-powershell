// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// A failover group.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FailoverGroup : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the FailoverGroup class.
        /// </summary>
        public FailoverGroup()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FailoverGroup class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="readWriteEndpoint">Read-write endpoint of the failover group instance.
        /// </param>

        /// <param name="readOnlyEndpoint">Read-only endpoint of the failover group instance.
        /// </param>

        /// <param name="replicationRole">Local replication role of the failover group instance.
        /// Possible values include: 'Primary', 'Secondary'</param>

        /// <param name="replicationState">Replication state of the failover group instance.
        /// </param>

        /// <param name="partnerServers">List of partner server information for the failover group.
        /// </param>

        /// <param name="databases">List of databases in the failover group.
        /// </param>
        public FailoverGroup(string id = default(string), string name = default(string), string type = default(string), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), FailoverGroupReadWriteEndpoint readWriteEndpoint = default(FailoverGroupReadWriteEndpoint), FailoverGroupReadOnlyEndpoint readOnlyEndpoint = default(FailoverGroupReadOnlyEndpoint), string replicationRole = default(string), string replicationState = default(string), System.Collections.Generic.IList<PartnerInfo> partnerServers = default(System.Collections.Generic.IList<PartnerInfo>), System.Collections.Generic.IList<string> databases = default(System.Collections.Generic.IList<string>))

        : base(id, name, type)
        {
            this.Location = location;
            this.Tags = tags;
            this.ReadWriteEndpoint = readWriteEndpoint;
            this.ReadOnlyEndpoint = readOnlyEndpoint;
            this.ReplicationRole = replicationRole;
            this.ReplicationState = replicationState;
            this.PartnerServers = partnerServers;
            this.Databases = databases;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets resource location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; private set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets read-write endpoint of the failover group instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.readWriteEndpoint")]
        public FailoverGroupReadWriteEndpoint ReadWriteEndpoint {get; set; }

        /// <summary>
        /// Gets or sets read-only endpoint of the failover group instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.readOnlyEndpoint")]
        public FailoverGroupReadOnlyEndpoint ReadOnlyEndpoint {get; set; }

        /// <summary>
        /// Gets local replication role of the failover group instance. Possible values include: &#39;Primary&#39;, &#39;Secondary&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicationRole")]
        public string ReplicationRole {get; private set; }

        /// <summary>
        /// Gets replication state of the failover group instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.replicationState")]
        public string ReplicationState {get; private set; }

        /// <summary>
        /// Gets or sets list of partner server information for the failover group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.partnerServers")]
        public System.Collections.Generic.IList<PartnerInfo> PartnerServers {get; set; }

        /// <summary>
        /// Gets or sets list of databases in the failover group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databases")]
        public System.Collections.Generic.IList<string> Databases {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.ReadWriteEndpoint != null)
            {
                this.ReadWriteEndpoint.Validate();
            }



            if (this.PartnerServers != null)
            {
                foreach (var element in this.PartnerServers)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}