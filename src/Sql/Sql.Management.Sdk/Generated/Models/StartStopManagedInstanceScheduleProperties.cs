// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of managed instance&#39;s Start/Stop schedule.
    /// </summary>
    public partial class StartStopManagedInstanceScheduleProperties
    {
        /// <summary>
        /// Initializes a new instance of the StartStopManagedInstanceScheduleProperties class.
        /// </summary>
        public StartStopManagedInstanceScheduleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StartStopManagedInstanceScheduleProperties class.
        /// </summary>

        /// <param name="description">The description of the schedule.
        /// </param>

        /// <param name="timeZoneId">The time zone of the schedule.
        /// </param>

        /// <param name="scheduleList">Schedule list.
        /// </param>

        /// <param name="nextRunAction">Next action to be executed (Start or Stop)
        /// </param>

        /// <param name="nextExecutionTime">Timestamp when the next action will be executed in the corresponding
        /// schedule time zone.
        /// </param>
        public StartStopManagedInstanceScheduleProperties(System.Collections.Generic.IList<ScheduleItem> scheduleList, string description = default(string), string timeZoneId = default(string), string nextRunAction = default(string), string nextExecutionTime = default(string))

        {
            this.Description = description;
            this.TimeZoneId = timeZoneId;
            this.ScheduleList = scheduleList;
            this.NextRunAction = nextRunAction;
            this.NextExecutionTime = nextExecutionTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the description of the schedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the time zone of the schedule.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeZoneId")]
        public string TimeZoneId {get; set; }

        /// <summary>
        /// Gets or sets schedule list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scheduleList")]
        public System.Collections.Generic.IList<ScheduleItem> ScheduleList {get; set; }

        /// <summary>
        /// Gets next action to be executed (Start or Stop)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextRunAction")]
        public string NextRunAction {get; private set; }

        /// <summary>
        /// Gets timestamp when the next action will be executed in the corresponding
        /// schedule time zone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nextExecutionTime")]
        public string NextExecutionTime {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ScheduleList == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ScheduleList");
            }


            if (this.ScheduleList != null)
            {
                foreach (var element in this.ScheduleList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}