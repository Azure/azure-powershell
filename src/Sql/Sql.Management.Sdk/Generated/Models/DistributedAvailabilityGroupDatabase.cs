// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Database specific information
    /// </summary>
    public partial class DistributedAvailabilityGroupDatabase
    {
        /// <summary>
        /// Initializes a new instance of the DistributedAvailabilityGroupDatabase class.
        /// </summary>
        public DistributedAvailabilityGroupDatabase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DistributedAvailabilityGroupDatabase class.
        /// </summary>

        /// <param name="databaseName">The name of the database in link
        /// </param>

        /// <param name="instanceReplicaId">Managed instance replica id
        /// </param>

        /// <param name="partnerReplicaId">SQL server replica id
        /// </param>

        /// <param name="replicaState">Current link state
        /// </param>

        /// <param name="seedingProgress">Seeding progress
        /// </param>

        /// <param name="synchronizationHealth">Link health state
        /// Possible values include: &#39;NOT_HEALTHY&#39;, &#39;PARTIALLY_HEALTHY&#39;, &#39;HEALTHY&#39;</param>

        /// <param name="connectedState">Link connected state
        /// Possible values include: &#39;DISCONNECTED&#39;, &#39;CONNECTED&#39;</param>

        /// <param name="lastReceivedLsn">Last received LSN
        /// </param>

        /// <param name="lastReceivedTime">Last received LSN time
        /// </param>

        /// <param name="lastSentLsn">Last sent LSN
        /// </param>

        /// <param name="lastSentTime">Last sent LSN time
        /// </param>

        /// <param name="lastCommitLsn">Last commit LSN
        /// </param>

        /// <param name="lastCommitTime">Last commit LSN time
        /// </param>

        /// <param name="lastHardenedLsn">Last hardened LSN
        /// </param>

        /// <param name="lastHardenedTime">Last hardened LSN time
        /// </param>

        /// <param name="lastBackupLsn">Last backup LSN
        /// </param>

        /// <param name="lastBackupTime">Last backup LSN time
        /// </param>

        /// <param name="mostRecentLinkError">The most recent link connection error description
        /// </param>

        /// <param name="partnerAuthCertValidity">SQL server certificate validity
        /// </param>

        /// <param name="instanceSendReplicationLagSeconds">Replication lag when Managed Instance link side is primary
        /// </param>

        /// <param name="instanceRedoReplicationLagSeconds">Redo lag when Managed Instance link side is primary
        /// </param>
        public DistributedAvailabilityGroupDatabase(string databaseName = default(string), System.Guid? instanceReplicaId = default(System.Guid?), System.Guid? partnerReplicaId = default(System.Guid?), string replicaState = default(string), string seedingProgress = default(string), string synchronizationHealth = default(string), string connectedState = default(string), string lastReceivedLsn = default(string), System.DateTime? lastReceivedTime = default(System.DateTime?), string lastSentLsn = default(string), System.DateTime? lastSentTime = default(System.DateTime?), string lastCommitLsn = default(string), System.DateTime? lastCommitTime = default(System.DateTime?), string lastHardenedLsn = default(string), System.DateTime? lastHardenedTime = default(System.DateTime?), string lastBackupLsn = default(string), System.DateTime? lastBackupTime = default(System.DateTime?), string mostRecentLinkError = default(string), CertificateInfo partnerAuthCertValidity = default(CertificateInfo), int? instanceSendReplicationLagSeconds = default(int?), int? instanceRedoReplicationLagSeconds = default(int?))

        {
            this.DatabaseName = databaseName;
            this.InstanceReplicaId = instanceReplicaId;
            this.PartnerReplicaId = partnerReplicaId;
            this.ReplicaState = replicaState;
            this.SeedingProgress = seedingProgress;
            this.SynchronizationHealth = synchronizationHealth;
            this.ConnectedState = connectedState;
            this.LastReceivedLsn = lastReceivedLsn;
            this.LastReceivedTime = lastReceivedTime;
            this.LastSentLsn = lastSentLsn;
            this.LastSentTime = lastSentTime;
            this.LastCommitLsn = lastCommitLsn;
            this.LastCommitTime = lastCommitTime;
            this.LastHardenedLsn = lastHardenedLsn;
            this.LastHardenedTime = lastHardenedTime;
            this.LastBackupLsn = lastBackupLsn;
            this.LastBackupTime = lastBackupTime;
            this.MostRecentLinkError = mostRecentLinkError;
            this.PartnerAuthCertValidity = partnerAuthCertValidity;
            this.InstanceSendReplicationLagSeconds = instanceSendReplicationLagSeconds;
            this.InstanceRedoReplicationLagSeconds = instanceRedoReplicationLagSeconds;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the database in link
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets managed instance replica id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceReplicaId")]
        public System.Guid? InstanceReplicaId {get; private set; }

        /// <summary>
        /// Gets sQL server replica id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerReplicaId")]
        public System.Guid? PartnerReplicaId {get; private set; }

        /// <summary>
        /// Gets current link state
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicaState")]
        public string ReplicaState {get; private set; }

        /// <summary>
        /// Gets seeding progress
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "seedingProgress")]
        public string SeedingProgress {get; private set; }

        /// <summary>
        /// Gets link health state Possible values include: &#39;NOT_HEALTHY&#39;, &#39;PARTIALLY_HEALTHY&#39;, &#39;HEALTHY&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "synchronizationHealth")]
        public string SynchronizationHealth {get; private set; }

        /// <summary>
        /// Gets link connected state Possible values include: &#39;DISCONNECTED&#39;, &#39;CONNECTED&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectedState")]
        public string ConnectedState {get; private set; }

        /// <summary>
        /// Gets last received LSN
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastReceivedLsn")]
        public string LastReceivedLsn {get; private set; }

        /// <summary>
        /// Gets last received LSN time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastReceivedTime")]
        public System.DateTime? LastReceivedTime {get; private set; }

        /// <summary>
        /// Gets last sent LSN
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastSentLsn")]
        public string LastSentLsn {get; private set; }

        /// <summary>
        /// Gets last sent LSN time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastSentTime")]
        public System.DateTime? LastSentTime {get; private set; }

        /// <summary>
        /// Gets last commit LSN
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastCommitLsn")]
        public string LastCommitLsn {get; private set; }

        /// <summary>
        /// Gets last commit LSN time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastCommitTime")]
        public System.DateTime? LastCommitTime {get; private set; }

        /// <summary>
        /// Gets last hardened LSN
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHardenedLsn")]
        public string LastHardenedLsn {get; private set; }

        /// <summary>
        /// Gets last hardened LSN time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastHardenedTime")]
        public System.DateTime? LastHardenedTime {get; private set; }

        /// <summary>
        /// Gets last backup LSN
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBackupLsn")]
        public string LastBackupLsn {get; private set; }

        /// <summary>
        /// Gets last backup LSN time
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBackupTime")]
        public System.DateTime? LastBackupTime {get; private set; }

        /// <summary>
        /// Gets the most recent link connection error description
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mostRecentLinkError")]
        public string MostRecentLinkError {get; private set; }

        /// <summary>
        /// Gets sQL server certificate validity
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerAuthCertValidity")]
        public CertificateInfo PartnerAuthCertValidity {get; private set; }

        /// <summary>
        /// Gets replication lag when Managed Instance link side is primary
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceSendReplicationLagSeconds")]
        public int? InstanceSendReplicationLagSeconds {get; private set; }

        /// <summary>
        /// Gets redo lag when Managed Instance link side is primary
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "instanceRedoReplicationLagSeconds")]
        public int? InstanceRedoReplicationLagSeconds {get; private set; }
    }
}