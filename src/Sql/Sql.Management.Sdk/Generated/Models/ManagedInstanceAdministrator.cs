// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// An Azure SQL managed instance administrator.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ManagedInstanceAdministrator : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the ManagedInstanceAdministrator class.
        /// </summary>
        public ManagedInstanceAdministrator()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedInstanceAdministrator class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="administratorType">Type of the managed instance administrator.
        /// Possible values include: &#39;ActiveDirectory&#39;</param>

        /// <param name="login">Login name of the managed instance administrator.
        /// </param>

        /// <param name="sid">SID (object ID) of the managed instance administrator.
        /// </param>

        /// <param name="tenantId">Tenant ID of the managed instance administrator.
        /// </param>
        public ManagedInstanceAdministrator(string id = default(string), string name = default(string), string type = default(string), string administratorType = default(string), string login = default(string), System.Guid? sid = default(System.Guid?), System.Guid? tenantId = default(System.Guid?))

        : base(id, name, type)
        {
            this.AdministratorType = administratorType;
            this.Login = login;
            this.Sid = sid;
            this.TenantId = tenantId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets type of the managed instance administrator. Possible values include: &#39;ActiveDirectory&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.administratorType")]
        public string AdministratorType {get; set; }

        /// <summary>
        /// Gets or sets login name of the managed instance administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.login")]
        public string Login {get; set; }

        /// <summary>
        /// Gets or sets sID (object ID) of the managed instance administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sid")]
        public System.Guid? Sid {get; set; }

        /// <summary>
        /// Gets or sets tenant ID of the managed instance administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.tenantId")]
        public System.Guid? TenantId {get; set; }
    }
}