// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Contains the information necessary to perform import operation for new
    /// database.
    /// </summary>
    public partial class ImportNewDatabaseDefinition
    {
        /// <summary>
        /// Initializes a new instance of the ImportNewDatabaseDefinition class.
        /// </summary>
        public ImportNewDatabaseDefinition()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ImportNewDatabaseDefinition class.
        /// </summary>

        /// <param name="databaseName">Name of the import database.
        /// </param>

        /// <param name="edition">Edition of the import database.
        /// </param>

        /// <param name="serviceObjectiveName">Service level objective name of the import database.
        /// </param>

        /// <param name="maxSizeBytes">Max size in bytes for the import database.
        /// </param>

        /// <param name="storageKeyType">Storage key type.
        /// Possible values include: &#39;SharedAccessKey&#39;, &#39;StorageAccessKey&#39;</param>

        /// <param name="storageKey">Storage key.
        /// </param>

        /// <param name="storageUri">Storage Uri.
        /// </param>

        /// <param name="administratorLogin">Administrator login name.
        /// </param>

        /// <param name="administratorLoginPassword">Administrator login password.
        /// </param>

        /// <param name="authenticationType">Authentication type.
        /// </param>

        /// <param name="networkIsolation">Optional resource information to enable network isolation for request.
        /// </param>
        public ImportNewDatabaseDefinition(string storageKeyType, string storageKey, string storageUri, string administratorLogin, string administratorLoginPassword, string databaseName = default(string), string edition = default(string), string serviceObjectiveName = default(string), string maxSizeBytes = default(string), string authenticationType = default(string), NetworkIsolationSettings networkIsolation = default(NetworkIsolationSettings))

        {
            this.DatabaseName = databaseName;
            this.Edition = edition;
            this.ServiceObjectiveName = serviceObjectiveName;
            this.MaxSizeBytes = maxSizeBytes;
            this.StorageKeyType = storageKeyType;
            this.StorageKey = storageKey;
            this.StorageUri = storageUri;
            this.AdministratorLogin = administratorLogin;
            this.AdministratorLoginPassword = administratorLoginPassword;
            this.AuthenticationType = authenticationType;
            this.NetworkIsolation = networkIsolation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets name of the import database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets edition of the import database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "edition")]
        public string Edition {get; set; }

        /// <summary>
        /// Gets or sets service level objective name of the import database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceObjectiveName")]
        public string ServiceObjectiveName {get; set; }

        /// <summary>
        /// Gets or sets max size in bytes for the import database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxSizeBytes")]
        public string MaxSizeBytes {get; set; }

        /// <summary>
        /// Gets or sets storage key type. Possible values include: &#39;SharedAccessKey&#39;, &#39;StorageAccessKey&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageKeyType")]
        public string StorageKeyType {get; set; }

        /// <summary>
        /// Gets or sets storage key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageKey")]
        public string StorageKey {get; set; }

        /// <summary>
        /// Gets or sets storage Uri.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageUri")]
        public string StorageUri {get; set; }

        /// <summary>
        /// Gets or sets administrator login name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorLogin")]
        public string AdministratorLogin {get; set; }

        /// <summary>
        /// Gets or sets administrator login password.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorLoginPassword")]
        public string AdministratorLoginPassword {get; set; }

        /// <summary>
        /// Gets or sets authentication type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets optional resource information to enable network isolation for
        /// request.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkIsolation")]
        public NetworkIsolationSettings NetworkIsolation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.StorageKeyType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageKeyType");
            }
            if (this.StorageKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageKey");
            }
            if (this.StorageUri == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "StorageUri");
            }
            if (this.AdministratorLogin == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AdministratorLogin");
            }
            if (this.AdministratorLoginPassword == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AdministratorLoginPassword");
            }











        }
    }
}