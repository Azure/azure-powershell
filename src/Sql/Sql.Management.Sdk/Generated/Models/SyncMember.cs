// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// An Azure SQL Database sync member.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SyncMember : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SyncMember class.
        /// </summary>
        public SyncMember()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SyncMember class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="syncDirection">Sync direction of the sync member.
        /// Possible values include: &#39;Bidirectional&#39;, &#39;OneWayMemberToHub&#39;,
        /// &#39;OneWayHubToMember&#39;</param>

        /// <param name="databaseType">Database type of the sync member.
        /// Possible values include: &#39;AzureSqlDatabase&#39;, &#39;SqlServerDatabase&#39;</param>

        /// <param name="syncAgentId">ARM resource id of the sync agent in the sync member.
        /// </param>

        /// <param name="sqlServerDatabaseId">SQL Server database id of the sync member.
        /// </param>

        /// <param name="syncMemberAzureDatabaseResourceId">ARM resource id of the sync member logical database, for sync members in
        /// Azure.
        /// </param>

        /// <param name="usePrivateLinkConnection">Whether to use private link connection.
        /// </param>

        /// <param name="privateEndpointName">Private endpoint name of the sync member if use private link connection is
        /// enabled, for sync members in Azure.
        /// </param>

        /// <param name="serverName">Server name of the member database in the sync member
        /// </param>

        /// <param name="databaseName">Database name of the member database in the sync member.
        /// </param>

        /// <param name="userName">User name of the member database in the sync member.
        /// </param>

        /// <param name="password">Password of the member database in the sync member.
        /// </param>

        /// <param name="syncState">Sync state of the sync member.
        /// Possible values include: &#39;SyncInProgress&#39;, &#39;SyncSucceeded&#39;, &#39;SyncFailed&#39;,
        /// &#39;DisabledTombstoneCleanup&#39;, &#39;DisabledBackupRestore&#39;,
        /// &#39;SyncSucceededWithWarnings&#39;, &#39;SyncCancelling&#39;, &#39;SyncCancelled&#39;,
        /// &#39;UnProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;ProvisionFailed&#39;,
        /// &#39;DeProvisioning&#39;, &#39;DeProvisioned&#39;, &#39;DeProvisionFailed&#39;, &#39;Reprovisioning&#39;,
        /// &#39;ReprovisionFailed&#39;, &#39;UnReprovisioned&#39;</param>
        public SyncMember(string id = default(string), string name = default(string), string type = default(string), string syncDirection = default(string), string databaseType = default(string), string syncAgentId = default(string), System.Guid? sqlServerDatabaseId = default(System.Guid?), string syncMemberAzureDatabaseResourceId = default(string), bool? usePrivateLinkConnection = default(bool?), string privateEndpointName = default(string), string serverName = default(string), string databaseName = default(string), string userName = default(string), string password = default(string), string syncState = default(string))

        : base(id, name, type)
        {
            this.SyncDirection = syncDirection;
            this.DatabaseType = databaseType;
            this.SyncAgentId = syncAgentId;
            this.SqlServerDatabaseId = sqlServerDatabaseId;
            this.SyncMemberAzureDatabaseResourceId = syncMemberAzureDatabaseResourceId;
            this.UsePrivateLinkConnection = usePrivateLinkConnection;
            this.PrivateEndpointName = privateEndpointName;
            this.ServerName = serverName;
            this.DatabaseName = databaseName;
            this.UserName = userName;
            this.Password = password;
            this.SyncState = syncState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sync direction of the sync member. Possible values include: &#39;Bidirectional&#39;, &#39;OneWayMemberToHub&#39;, &#39;OneWayHubToMember&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.syncDirection")]
        public string SyncDirection {get; set; }

        /// <summary>
        /// Gets or sets database type of the sync member. Possible values include: &#39;AzureSqlDatabase&#39;, &#39;SqlServerDatabase&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databaseType")]
        public string DatabaseType {get; set; }

        /// <summary>
        /// Gets or sets aRM resource id of the sync agent in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.syncAgentId")]
        public string SyncAgentId {get; set; }

        /// <summary>
        /// Gets or sets sQL Server database id of the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sqlServerDatabaseId")]
        public System.Guid? SqlServerDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets aRM resource id of the sync member logical database, for sync
        /// members in Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.syncMemberAzureDatabaseResourceId")]
        public string SyncMemberAzureDatabaseResourceId {get; set; }

        /// <summary>
        /// Gets or sets whether to use private link connection.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.usePrivateLinkConnection")]
        public bool? UsePrivateLinkConnection {get; set; }

        /// <summary>
        /// Gets private endpoint name of the sync member if use private link
        /// connection is enabled, for sync members in Azure.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointName")]
        public string PrivateEndpointName {get; private set; }

        /// <summary>
        /// Gets or sets server name of the member database in the sync member
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serverName")]
        public string ServerName {get; set; }

        /// <summary>
        /// Gets or sets database name of the member database in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets user name of the member database in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userName")]
        public string UserName {get; set; }

        /// <summary>
        /// Gets or sets password of the member database in the sync member.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.password")]
        public string Password {get; set; }

        /// <summary>
        /// Gets sync state of the sync member. Possible values include: &#39;SyncInProgress&#39;, &#39;SyncSucceeded&#39;, &#39;SyncFailed&#39;, &#39;DisabledTombstoneCleanup&#39;, &#39;DisabledBackupRestore&#39;, &#39;SyncSucceededWithWarnings&#39;, &#39;SyncCancelling&#39;, &#39;SyncCancelled&#39;, &#39;UnProvisioned&#39;, &#39;Provisioning&#39;, &#39;Provisioned&#39;, &#39;ProvisionFailed&#39;, &#39;DeProvisioning&#39;, &#39;DeProvisioned&#39;, &#39;DeProvisionFailed&#39;, &#39;Reprovisioning&#39;, &#39;ReprovisionFailed&#39;, &#39;UnReprovisioned&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.syncState")]
        public string SyncState {get; private set; }
    }
}