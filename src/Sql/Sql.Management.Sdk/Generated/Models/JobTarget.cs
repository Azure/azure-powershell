// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// A job target, for example a specific database or a container of databases
    /// that is evaluated during job execution.
    /// </summary>
    public partial class JobTarget
    {
        /// <summary>
        /// Initializes a new instance of the JobTarget class.
        /// </summary>
        public JobTarget()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobTarget class.
        /// </summary>

        /// <param name="membershipType">Whether the target is included or excluded from the group.
        /// Possible values include: &#39;Include&#39;, &#39;Exclude&#39;</param>

        /// <param name="type">The target type.
        /// Possible values include: &#39;TargetGroup&#39;, &#39;SqlDatabase&#39;, &#39;SqlElasticPool&#39;,
        /// &#39;SqlShardMap&#39;, &#39;SqlServer&#39;</param>

        /// <param name="serverName">The target server name.
        /// </param>

        /// <param name="databaseName">The target database name.
        /// </param>

        /// <param name="elasticPoolName">The target elastic pool name.
        /// </param>

        /// <param name="shardMapName">The target shard map.
        /// </param>

        /// <param name="refreshCredential">The resource ID of the credential that is used during job execution to
        /// connect to the target and determine the list of databases inside the
        /// target.
        /// </param>
        public JobTarget(string type, JobTargetGroupMembershipType? membershipType = default(JobTargetGroupMembershipType?), string serverName = default(string), string databaseName = default(string), string elasticPoolName = default(string), string shardMapName = default(string), string refreshCredential = default(string))

        {
            this.MembershipType = membershipType;
            this.Type = type;
            this.ServerName = serverName;
            this.DatabaseName = databaseName;
            this.ElasticPoolName = elasticPoolName;
            this.ShardMapName = shardMapName;
            this.RefreshCredential = refreshCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets whether the target is included or excluded from the group. Possible values include: &#39;Include&#39;, &#39;Exclude&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "membershipType")]
        public JobTargetGroupMembershipType? MembershipType {get; set; }

        /// <summary>
        /// Gets or sets the target type. Possible values include: &#39;TargetGroup&#39;, &#39;SqlDatabase&#39;, &#39;SqlElasticPool&#39;, &#39;SqlShardMap&#39;, &#39;SqlServer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets the target server name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; set; }

        /// <summary>
        /// Gets or sets the target database name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; set; }

        /// <summary>
        /// Gets or sets the target elastic pool name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "elasticPoolName")]
        public string ElasticPoolName {get; set; }

        /// <summary>
        /// Gets or sets the target shard map.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shardMapName")]
        public string ShardMapName {get; set; }

        /// <summary>
        /// Gets or sets the resource ID of the credential that is used during job
        /// execution to connect to the target and determine the list of databases
        /// inside the target.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "refreshCredential")]
        public string RefreshCredential {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }







        }
    }
}