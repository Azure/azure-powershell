// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// A restorable dropped database resource.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class RestorableDroppedDatabase : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the RestorableDroppedDatabase class.
        /// </summary>
        public RestorableDroppedDatabase()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RestorableDroppedDatabase class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="sku">The name and tier of the SKU.
        /// </param>

        /// <param name="location">Resource location.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="databaseName">The name of the database.
        /// </param>

        /// <param name="maxSizeBytes">The max size of the database expressed in bytes.
        /// </param>

        /// <param name="creationDate">The creation date of the database (ISO8601 format).
        /// </param>

        /// <param name="deletionDate">The deletion date of the database (ISO8601 format).
        /// </param>

        /// <param name="earliestRestoreDate">The earliest restore date of the database (ISO8601 format).
        /// </param>

        /// <param name="backupStorageRedundancy">The storage account type used to store backups for this database.
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="keys">The resource ids of the user assigned identities to use
        /// </param>
        public RestorableDroppedDatabase(string id = default(string), string name = default(string), string type = default(string), Sku sku = default(Sku), string location = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string databaseName = default(string), long? maxSizeBytes = default(long?), System.DateTime? creationDate = default(System.DateTime?), System.DateTime? deletionDate = default(System.DateTime?), System.DateTime? earliestRestoreDate = default(System.DateTime?), string backupStorageRedundancy = default(string), System.Collections.Generic.IDictionary<string, DatabaseKey> keys = default(System.Collections.Generic.IDictionary<string, DatabaseKey>))

        : base(id, name, type)
        {
            this.Sku = sku;
            this.Location = location;
            this.Tags = tags;
            this.DatabaseName = databaseName;
            this.MaxSizeBytes = maxSizeBytes;
            this.CreationDate = creationDate;
            this.DeletionDate = deletionDate;
            this.EarliestRestoreDate = earliestRestoreDate;
            this.BackupStorageRedundancy = backupStorageRedundancy;
            this.Keys = keys;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name and tier of the SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets resource location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets the name of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.databaseName")]
        public string DatabaseName {get; private set; }

        /// <summary>
        /// Gets the max size of the database expressed in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maxSizeBytes")]
        public long? MaxSizeBytes {get; private set; }

        /// <summary>
        /// Gets the creation date of the database (ISO8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationDate")]
        public System.DateTime? CreationDate {get; private set; }

        /// <summary>
        /// Gets the deletion date of the database (ISO8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deletionDate")]
        public System.DateTime? DeletionDate {get; private set; }

        /// <summary>
        /// Gets the earliest restore date of the database (ISO8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate {get; private set; }

        /// <summary>
        /// Gets the storage account type used to store backups for this database. Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.backupStorageRedundancy")]
        public string BackupStorageRedundancy {get; private set; }

        /// <summary>
        /// Gets or sets the resource ids of the user assigned identities to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keys")]
        public System.Collections.Generic.IDictionary<string, DatabaseKey> Keys {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }





        }
    }
}