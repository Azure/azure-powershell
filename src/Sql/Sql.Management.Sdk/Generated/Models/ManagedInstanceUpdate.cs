// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// An update request for an Azure SQL Database managed instance.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class ManagedInstanceUpdate
    {
        /// <summary>
        /// Initializes a new instance of the ManagedInstanceUpdate class.
        /// </summary>
        public ManagedInstanceUpdate()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedInstanceUpdate class.
        /// </summary>

        /// <param name="sku">Managed instance sku
        /// </param>

        /// <param name="identity">Managed instance identity
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="servicePrincipal">The managed instance&#39;s service principal.
        /// </param>

        /// <param name="provisioningState">
        /// Possible values include: 'Creating', 'Deleting', 'Updating', 'Unknown',
        /// 'Succeeded', 'Failed', 'Accepted', 'Created', 'Deleted', 'Unrecognized',
        /// 'Running', 'Canceled', 'NotSpecified', 'Registering', 'TimedOut'</param>

        /// <param name="managedInstanceCreateMode">Specifies the mode of database creation.
        /// Default: Regular instance creation.
        /// Restore: Creates an instance by restoring a set of backups to specific
        /// point in time. RestorePointInTime and SourceManagedInstanceId must be
        /// specified.
        /// Possible values include: 'Default', 'PointInTimeRestore'</param>

        /// <param name="fullyQualifiedDomainName">The fully qualified domain name of the managed instance.
        /// </param>

        /// <param name="administratorLogin">Administrator username for the managed instance. Can only be specified when
        /// the managed instance is being created (and is required for creation).
        /// </param>

        /// <param name="administratorLoginPassword">The administrator login password (required for managed instance creation).
        /// </param>

        /// <param name="subnetId">Subnet resource ID for the managed instance.
        /// </param>

        /// <param name="state">The state of the managed instance.
        /// </param>

        /// <param name="licenseType">The license type. Possible values are &#39;LicenseIncluded&#39; (regular price
        /// inclusive of a new SQL license) and &#39;BasePrice&#39; (discounted AHB price for
        /// bringing your own SQL licenses).
        /// Possible values include: 'LicenseIncluded', 'BasePrice'</param>

        /// <param name="vCores">The number of vCores. Allowed values: 8, 16, 24, 32, 40, 64, 80.
        /// </param>

        /// <param name="storageSizeInGb">Storage size in GB. Minimum value: 32. Maximum value: 16384. Increments of
        /// 32 GB allowed only. Maximum value depends on the selected hardware family
        /// and number of vCores.
        /// </param>

        /// <param name="collation">Collation of the managed instance.
        /// </param>

        /// <param name="dnsZone">The Dns Zone that the managed instance is in.
        /// </param>

        /// <param name="dnsZonePartner">The resource id of another managed instance whose DNS zone this managed
        /// instance will share after creation.
        /// </param>

        /// <param name="publicDataEndpointEnabled">Whether or not the public data endpoint is enabled.
        /// </param>

        /// <param name="sourceManagedInstanceId">The resource identifier of the source managed instance associated with
        /// create operation of this instance.
        /// </param>

        /// <param name="restorePointInTime">Specifies the point in time (ISO8601 format) of the source database that
        /// will be restored to create the new database.
        /// </param>

        /// <param name="proxyOverride">Connection type used for connecting to the instance.
        /// Possible values include: 'Proxy', 'Redirect', 'Default'</param>

        /// <param name="timezoneId">Id of the timezone. Allowed values are timezones supported by Windows.
        /// Windows keeps details on supported timezones, including the id, in registry
        /// under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
        /// You can get those registry values via SQL Server by querying SELECT name AS
        /// timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is &#34;Pacific Standard Time&#34; or &#34;W. Europe
        /// Standard Time&#34;.
        /// </param>

        /// <param name="instancePoolId">The Id of the instance pool this managed server belongs to.
        /// </param>

        /// <param name="maintenanceConfigurationId">Specifies maintenance configuration id to apply to this managed instance.
        /// </param>

        /// <param name="privateEndpointConnections">List of private endpoint connections on a managed instance.
        /// </param>

        /// <param name="minimalTlsVersion">Minimal TLS version. Allowed values: &#39;None&#39;, &#39;1.0&#39;, &#39;1.1&#39;, &#39;1.2&#39;
        /// </param>

        /// <param name="currentBackupStorageRedundancy">The storage account type used to store backups for this instance. The
        /// options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage),
        /// Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// Possible values include: 'Geo', 'Local', 'Zone', 'GeoZone'</param>

        /// <param name="requestedBackupStorageRedundancy">The storage account type to be used to store backups for this instance. The
        /// options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage),
        /// Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage)
        /// Possible values include: 'Geo', 'Local', 'Zone', 'GeoZone'</param>

        /// <param name="zoneRedundant">Whether or not the multi-az is enabled.
        /// </param>

        /// <param name="primaryUserAssignedIdentityId">The resource id of a user assigned identity to be used by default.
        /// </param>

        /// <param name="keyId">A CMK URI of the key to use for encryption.
        /// </param>

        /// <param name="administrators">The Azure Active Directory administrator of the instance. This can only be
        /// used at instance create time. If used for instance update, it will be
        /// ignored or it will result in an error. For updates individual APIs will
        /// need to be used.
        /// </param>
        public ManagedInstanceUpdate(Sku sku = default(Sku), ResourceIdentity identity = default(ResourceIdentity), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), ServicePrincipal servicePrincipal = default(ServicePrincipal), string provisioningState = default(string), string managedInstanceCreateMode = default(string), string fullyQualifiedDomainName = default(string), string administratorLogin = default(string), string administratorLoginPassword = default(string), string subnetId = default(string), string state = default(string), string licenseType = default(string), int? vCores = default(int?), int? storageSizeInGb = default(int?), string collation = default(string), string dnsZone = default(string), string dnsZonePartner = default(string), bool? publicDataEndpointEnabled = default(bool?), string sourceManagedInstanceId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), string proxyOverride = default(string), string timezoneId = default(string), string instancePoolId = default(string), string maintenanceConfigurationId = default(string), System.Collections.Generic.IList<ManagedInstancePecProperty> privateEndpointConnections = default(System.Collections.Generic.IList<ManagedInstancePecProperty>), string minimalTlsVersion = default(string), string currentBackupStorageRedundancy = default(string), string requestedBackupStorageRedundancy = default(string), bool? zoneRedundant = default(bool?), string primaryUserAssignedIdentityId = default(string), string keyId = default(string), ManagedInstanceExternalAdministrator administrators = default(ManagedInstanceExternalAdministrator))

        {
            this.Sku = sku;
            this.Identity = identity;
            this.Tags = tags;
            this.ServicePrincipal = servicePrincipal;
            this.ProvisioningState = provisioningState;
            this.ManagedInstanceCreateMode = managedInstanceCreateMode;
            this.FullyQualifiedDomainName = fullyQualifiedDomainName;
            this.AdministratorLogin = administratorLogin;
            this.AdministratorLoginPassword = administratorLoginPassword;
            this.SubnetId = subnetId;
            this.State = state;
            this.LicenseType = licenseType;
            this.VCores = vCores;
            this.StorageSizeInGb = storageSizeInGb;
            this.Collation = collation;
            this.DnsZone = dnsZone;
            this.DnsZonePartner = dnsZonePartner;
            this.PublicDataEndpointEnabled = publicDataEndpointEnabled;
            this.SourceManagedInstanceId = sourceManagedInstanceId;
            this.RestorePointInTime = restorePointInTime;
            this.ProxyOverride = proxyOverride;
            this.TimezoneId = timezoneId;
            this.InstancePoolId = instancePoolId;
            this.MaintenanceConfigurationId = maintenanceConfigurationId;
            this.PrivateEndpointConnections = privateEndpointConnections;
            this.MinimalTlsVersion = minimalTlsVersion;
            this.CurrentBackupStorageRedundancy = currentBackupStorageRedundancy;
            this.RequestedBackupStorageRedundancy = requestedBackupStorageRedundancy;
            this.ZoneRedundant = zoneRedundant;
            this.PrimaryUserAssignedIdentityId = primaryUserAssignedIdentityId;
            this.KeyId = keyId;
            this.Administrators = administrators;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets managed instance sku
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets managed instance identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "identity")]
        public ResourceIdentity Identity {get; set; }

        /// <summary>
        /// Gets or sets resource tags.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the managed instance&#39;s service principal.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.servicePrincipal")]
        public ServicePrincipal ServicePrincipal {get; set; }

        /// <summary>
        /// Gets Possible values include: &#39;Creating&#39;, &#39;Deleting&#39;, &#39;Updating&#39;, &#39;Unknown&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Accepted&#39;, &#39;Created&#39;, &#39;Deleted&#39;, &#39;Unrecognized&#39;, &#39;Running&#39;, &#39;Canceled&#39;, &#39;NotSpecified&#39;, &#39;Registering&#39;, &#39;TimedOut&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets specifies the mode of database creation.
        /// Default: Regular instance creation.
        /// Restore: Creates an instance by restoring a set of backups to specific
        /// point in time. RestorePointInTime and SourceManagedInstanceId must be
        /// specified. Possible values include: &#39;Default&#39;, &#39;PointInTimeRestore&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.managedInstanceCreateMode")]
        public string ManagedInstanceCreateMode {get; set; }

        /// <summary>
        /// Gets the fully qualified domain name of the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.fullyQualifiedDomainName")]
        public string FullyQualifiedDomainName {get; private set; }

        /// <summary>
        /// Gets or sets administrator username for the managed instance. Can only be
        /// specified when the managed instance is being created (and is required for
        /// creation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.administratorLogin")]
        public string AdministratorLogin {get; set; }

        /// <summary>
        /// Gets or sets the administrator login password (required for managed
        /// instance creation).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.administratorLoginPassword")]
        public string AdministratorLoginPassword {get; set; }

        /// <summary>
        /// Gets or sets subnet resource ID for the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.subnetId")]
        public string SubnetId {get; set; }

        /// <summary>
        /// Gets the state of the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets or sets the license type. Possible values are &#39;LicenseIncluded&#39;
        /// (regular price inclusive of a new SQL license) and &#39;BasePrice&#39; (discounted
        /// AHB price for bringing your own SQL licenses). Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets the number of vCores. Allowed values: 8, 16, 24, 32, 40, 64,
        /// 80.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.vCores")]
        public int? VCores {get; set; }

        /// <summary>
        /// Gets or sets storage size in GB. Minimum value: 32. Maximum value: 16384.
        /// Increments of 32 GB allowed only. Maximum value depends on the selected
        /// hardware family and number of vCores.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.storageSizeInGB")]
        public int? StorageSizeInGb {get; set; }

        /// <summary>
        /// Gets or sets collation of the managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.collation")]
        public string Collation {get; set; }

        /// <summary>
        /// Gets the Dns Zone that the managed instance is in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsZone")]
        public string DnsZone {get; private set; }

        /// <summary>
        /// Gets or sets the resource id of another managed instance whose DNS zone
        /// this managed instance will share after creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dnsZonePartner")]
        public string DnsZonePartner {get; set; }

        /// <summary>
        /// Gets or sets whether or not the public data endpoint is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.publicDataEndpointEnabled")]
        public bool? PublicDataEndpointEnabled {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source managed instance
        /// associated with create operation of this instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceManagedInstanceId")]
        public string SourceManagedInstanceId {get; set; }

        /// <summary>
        /// Gets or sets specifies the point in time (ISO8601 format) of the source
        /// database that will be restored to create the new database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.restorePointInTime")]
        public System.DateTime? RestorePointInTime {get; set; }

        /// <summary>
        /// Gets or sets connection type used for connecting to the instance. Possible values include: &#39;Proxy&#39;, &#39;Redirect&#39;, &#39;Default&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.proxyOverride")]
        public string ProxyOverride {get; set; }

        /// <summary>
        /// Gets or sets id of the timezone. Allowed values are timezones supported by
        /// Windows.
        /// Windows keeps details on supported timezones, including the id, in registry
        /// under
        /// KEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Time Zones.
        /// You can get those registry values via SQL Server by querying SELECT name AS
        /// timezone_id FROM sys.time_zone_info.
        /// List of Ids can also be obtained by executing
        /// [System.TimeZoneInfo]::GetSystemTimeZones() in PowerShell.
        /// An example of valid timezone id is &#34;Pacific Standard Time&#34; or &#34;W. Europe
        /// Standard Time&#34;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.timezoneId")]
        public string TimezoneId {get; set; }

        /// <summary>
        /// Gets or sets the Id of the instance pool this managed server belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.instancePoolId")]
        public string InstancePoolId {get; set; }

        /// <summary>
        /// Gets or sets specifies maintenance configuration id to apply to this
        /// managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.maintenanceConfigurationId")]
        public string MaintenanceConfigurationId {get; set; }

        /// <summary>
        /// Gets list of private endpoint connections on a managed instance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.privateEndpointConnections")]
        public System.Collections.Generic.IList<ManagedInstancePecProperty> PrivateEndpointConnections {get; private set; }

        /// <summary>
        /// Gets or sets minimal TLS version. Allowed values: &#39;None&#39;, &#39;1.0&#39;, &#39;1.1&#39;,
        /// &#39;1.2&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.minimalTlsVersion")]
        public string MinimalTlsVersion {get; set; }

        /// <summary>
        /// Gets the storage account type used to store backups for this instance. The
        /// options are Local (LocallyRedundantStorage), Zone (ZoneRedundantStorage),
        /// Geo (GeoRedundantStorage) and GeoZone(GeoZoneRedundantStorage) Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentBackupStorageRedundancy")]
        public string CurrentBackupStorageRedundancy {get; private set; }

        /// <summary>
        /// Gets or sets the storage account type to be used to store backups for this
        /// instance. The options are Local (LocallyRedundantStorage), Zone
        /// (ZoneRedundantStorage), Geo (GeoRedundantStorage) and
        /// GeoZone(GeoZoneRedundantStorage) Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.requestedBackupStorageRedundancy")]
        public string RequestedBackupStorageRedundancy {get; set; }

        /// <summary>
        /// Gets or sets whether or not the multi-az is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.zoneRedundant")]
        public bool? ZoneRedundant {get; set; }

        /// <summary>
        /// Gets or sets the resource id of a user assigned identity to be used by
        /// default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.primaryUserAssignedIdentityId")]
        public string PrimaryUserAssignedIdentityId {get; set; }

        /// <summary>
        /// Gets or sets a CMK URI of the key to use for encryption.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.keyId")]
        public string KeyId {get; set; }

        /// <summary>
        /// Gets or sets the Azure Active Directory administrator of the instance. This
        /// can only be used at instance create time. If used for instance update, it
        /// will be ignored or it will result in an error. For updates individual APIs
        /// will need to be used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.administrators")]
        public ManagedInstanceExternalAdministrator Administrators {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Sku != null)
            {
                this.Sku.Validate();
            }



















            if (this.PrivateEndpointConnections != null)
            {
                foreach (var element in this.PrivateEndpointConnections)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }






        }
    }
}