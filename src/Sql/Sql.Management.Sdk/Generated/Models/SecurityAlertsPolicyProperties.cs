// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a security alert policy.
    /// </summary>
    public partial class SecurityAlertsPolicyProperties
    {
        /// <summary>
        /// Initializes a new instance of the SecurityAlertsPolicyProperties class.
        /// </summary>
        public SecurityAlertsPolicyProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecurityAlertsPolicyProperties class.
        /// </summary>

        /// <param name="state">Specifies the state of the policy, whether it is enabled or disabled or a
        /// policy has not been applied yet on the specific database.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="disabledAlerts">Specifies an array of alerts that are disabled. Allowed values are:
        /// Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly,
        /// Data_Exfiltration, Unsafe_Action, Brute_Force
        /// </param>

        /// <param name="emailAddresses">Specifies an array of e-mail addresses to which the alert is sent.
        /// </param>

        /// <param name="emailAccountAdmins">Specifies that the alert is sent to the account administrators.
        /// </param>

        /// <param name="storageEndpoint">Specifies the blob storage endpoint (e.g.
        /// https://MyAccount.blob.core.windows.net). This blob storage will hold all
        /// Threat Detection audit logs.
        /// </param>

        /// <param name="storageAccountAccessKey">Specifies the identifier key of the Threat Detection audit storage account.
        /// </param>

        /// <param name="retentionDays">Specifies the number of days to keep in the Threat Detection audit logs.
        /// </param>

        /// <param name="creationTime">Specifies the UTC creation time of the policy.
        /// </param>
        public SecurityAlertsPolicyProperties(SecurityAlertsPolicyState state, System.Collections.Generic.IList<string> disabledAlerts = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> emailAddresses = default(System.Collections.Generic.IList<string>), bool? emailAccountAdmins = default(bool?), string storageEndpoint = default(string), string storageAccountAccessKey = default(string), int? retentionDays = default(int?), System.DateTime? creationTime = default(System.DateTime?))

        {
            this.State = state;
            this.DisabledAlerts = disabledAlerts;
            this.EmailAddresses = emailAddresses;
            this.EmailAccountAdmins = emailAccountAdmins;
            this.StorageEndpoint = storageEndpoint;
            this.StorageAccountAccessKey = storageAccountAccessKey;
            this.RetentionDays = retentionDays;
            this.CreationTime = creationTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the state of the policy, whether it is enabled or
        /// disabled or a policy has not been applied yet on the specific database. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public SecurityAlertsPolicyState State {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of alerts that are disabled. Allowed values
        /// are: Sql_Injection, Sql_Injection_Vulnerability, Access_Anomaly,
        /// Data_Exfiltration, Unsafe_Action, Brute_Force
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "disabledAlerts")]
        public System.Collections.Generic.IList<string> DisabledAlerts {get; set; }

        /// <summary>
        /// Gets or sets specifies an array of e-mail addresses to which the alert is
        /// sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "emailAddresses")]
        public System.Collections.Generic.IList<string> EmailAddresses {get; set; }

        /// <summary>
        /// Gets or sets specifies that the alert is sent to the account
        /// administrators.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "emailAccountAdmins")]
        public bool? EmailAccountAdmins {get; set; }

        /// <summary>
        /// Gets or sets specifies the blob storage endpoint (e.g.
        /// https://MyAccount.blob.core.windows.net). This blob storage will hold all
        /// Threat Detection audit logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageEndpoint")]
        public string StorageEndpoint {get; set; }

        /// <summary>
        /// Gets or sets specifies the identifier key of the Threat Detection audit
        /// storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountAccessKey")]
        public string StorageAccountAccessKey {get; set; }

        /// <summary>
        /// Gets or sets specifies the number of days to keep in the Threat Detection
        /// audit logs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "retentionDays")]
        public int? RetentionDays {get; set; }

        /// <summary>
        /// Gets specifies the UTC creation time of the policy.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationTime")]
        public System.DateTime? CreationTime {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {





        }
    }
}