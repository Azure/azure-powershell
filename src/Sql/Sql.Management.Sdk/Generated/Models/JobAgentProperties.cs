// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a job agent.
    /// </summary>
    public partial class JobAgentProperties
    {
        /// <summary>
        /// Initializes a new instance of the JobAgentProperties class.
        /// </summary>
        public JobAgentProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the JobAgentProperties class.
        /// </summary>

        /// <param name="databaseId">Resource ID of the database to store job metadata in.
        /// </param>

        /// <param name="state">The state of the job agent.
        /// Possible values include: &#39;Creating&#39;, &#39;Ready&#39;, &#39;Updating&#39;, &#39;Deleting&#39;,
        /// &#39;Disabled&#39;</param>
        public JobAgentProperties(string databaseId, string state = default(string))

        {
            this.DatabaseId = databaseId;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets resource ID of the database to store job metadata in.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseId")]
        public string DatabaseId {get; set; }

        /// <summary>
        /// Gets the state of the job agent. Possible values include: &#39;Creating&#39;, &#39;Ready&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DatabaseId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DatabaseId");
            }


        }
    }
}