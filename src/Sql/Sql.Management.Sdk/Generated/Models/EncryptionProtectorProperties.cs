// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties for an encryption protector execution.
    /// </summary>
    public partial class EncryptionProtectorProperties
    {
        /// <summary>
        /// Initializes a new instance of the EncryptionProtectorProperties class.
        /// </summary>
        public EncryptionProtectorProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the EncryptionProtectorProperties class.
        /// </summary>

        /// <param name="subregion">Subregion of the encryption protector.
        /// </param>

        /// <param name="serverKeyName">The name of the server key.
        /// </param>

        /// <param name="serverKeyType">The encryption protector type like &#39;ServiceManaged&#39;, &#39;AzureKeyVault&#39;.
        /// Possible values include: 'ServiceManaged', 'AzureKeyVault'</param>

        /// <param name="uri">The URI of the server key.
        /// </param>

        /// <param name="thumbprint">Thumbprint of the server key.
        /// </param>

        /// <param name="autoRotationEnabled">Key auto rotation opt-in flag. Either true or false.
        /// </param>
        public EncryptionProtectorProperties(string serverKeyType, string subregion = default(string), string serverKeyName = default(string), string uri = default(string), string thumbprint = default(string), bool? autoRotationEnabled = default(bool?))

        {
            this.Subregion = subregion;
            this.ServerKeyName = serverKeyName;
            this.ServerKeyType = serverKeyType;
            this.Uri = uri;
            this.Thumbprint = thumbprint;
            this.AutoRotationEnabled = autoRotationEnabled;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets subregion of the encryption protector.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subregion")]
        public string Subregion {get; private set; }

        /// <summary>
        /// Gets or sets the name of the server key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverKeyName")]
        public string ServerKeyName {get; set; }

        /// <summary>
        /// Gets or sets the encryption protector type like &#39;ServiceManaged&#39;,
        /// &#39;AzureKeyVault&#39;. Possible values include: &#39;ServiceManaged&#39;, &#39;AzureKeyVault&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverKeyType")]
        public string ServerKeyType {get; set; }

        /// <summary>
        /// Gets the URI of the server key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "uri")]
        public string Uri {get; private set; }

        /// <summary>
        /// Gets thumbprint of the server key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "thumbprint")]
        public string Thumbprint {get; private set; }

        /// <summary>
        /// Gets or sets key auto rotation opt-in flag. Either true or false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoRotationEnabled")]
        public bool? AutoRotationEnabled {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ServerKeyType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServerKeyType");
            }





        }
    }
}