// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// The database&#39;s properties.
    /// </summary>
    public partial class DatabaseProperties
    {
        /// <summary>
        /// Initializes a new instance of the DatabaseProperties class.
        /// </summary>
        public DatabaseProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DatabaseProperties class.
        /// </summary>

        /// <param name="createMode">Specifies the mode of database creation.
        /// Default: regular database creation.
        /// Copy: creates a database as a copy of an existing database.
        /// sourceDatabaseId must be specified as the resource ID of the source
        /// database.
        /// Secondary: creates a database as a secondary replica of an existing
        /// database. sourceDatabaseId must be specified as the resource ID of the
        /// existing primary database.
        /// PointInTimeRestore: Creates a database by restoring a point in time backup
        /// of an existing database. sourceDatabaseId must be specified as the resource
        /// ID of the existing database, and restorePointInTime must be specified.
        /// Recovery: Creates a database by restoring a geo-replicated backup.
        /// sourceDatabaseId must be specified as the recoverable database resource ID
        /// to restore.
        /// Restore: Creates a database by restoring a backup of a deleted database.
        /// sourceDatabaseId must be specified. If sourceDatabaseId is the database&#39;s
        /// original resource ID, then sourceDatabaseDeletionDate must be specified.
        /// Otherwise sourceDatabaseId must be the restorable dropped database resource
        /// ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also
        /// be specified to restore from an earlier point in time.
        /// RestoreLongTermRetentionBackup: Creates a database by restoring from a long
        /// term retention vault. recoveryServicesRecoveryPointResourceId must be
        /// specified as the recovery point resource ID.
        /// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
        /// DataWarehouse edition.
        /// Possible values include: &#39;Default&#39;, &#39;Copy&#39;, &#39;Secondary&#39;,
        /// &#39;PointInTimeRestore&#39;, &#39;Restore&#39;, &#39;Recovery&#39;, &#39;RestoreExternalBackup&#39;,
        /// &#39;RestoreExternalBackupSecondary&#39;, &#39;RestoreLongTermRetentionBackup&#39;,
        /// &#39;OnlineSecondary&#39;</param>

        /// <param name="collation">The collation of the database.
        /// </param>

        /// <param name="maxSizeBytes">The max size of the database expressed in bytes.
        /// </param>

        /// <param name="sampleName">The name of the sample schema to apply when creating this database.
        /// Possible values include: &#39;AdventureWorksLT&#39;, &#39;WideWorldImportersStd&#39;,
        /// &#39;WideWorldImportersFull&#39;</param>

        /// <param name="elasticPoolId">The resource identifier of the elastic pool containing this database.
        /// </param>

        /// <param name="sourceDatabaseId">The resource identifier of the source database associated with create
        /// operation of this database.
        /// </param>

        /// <param name="status">The status of the database.
        /// Possible values include: &#39;Online&#39;, &#39;Restoring&#39;, &#39;RecoveryPending&#39;,
        /// &#39;Recovering&#39;, &#39;Suspect&#39;, &#39;Offline&#39;, &#39;Standby&#39;, &#39;Shutdown&#39;, &#39;EmergencyMode&#39;,
        /// &#39;AutoClosed&#39;, &#39;Copying&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;OfflineSecondary&#39;,
        /// &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;,
        /// &#39;OfflineChangingDwPerformanceTiers&#39;, &#39;OnlineChangingDwPerformanceTiers&#39;,
        /// &#39;Disabled&#39;, &#39;Stopping&#39;, &#39;Stopped&#39;, &#39;Starting&#39;</param>

        /// <param name="databaseId">The ID of the database.
        /// </param>

        /// <param name="creationDate">The creation date of the database (ISO8601 format).
        /// </param>

        /// <param name="currentServiceObjectiveName">The current service level objective name of the database.
        /// </param>

        /// <param name="requestedServiceObjectiveName">The requested service level objective name of the database.
        /// </param>

        /// <param name="defaultSecondaryLocation">The default secondary region for this database.
        /// </param>

        /// <param name="failoverGroupId">Failover Group resource identifier that this database belongs to.
        /// </param>

        /// <param name="restorePointInTime">Specifies the point in time (ISO8601 format) of the source database that
        /// will be restored to create the new database.
        /// </param>

        /// <param name="sourceDatabaseDeletionDate">Specifies the time that the database was deleted.
        /// </param>

        /// <param name="recoveryServicesRecoveryPointId">The resource identifier of the recovery point associated with create
        /// operation of this database.
        /// </param>

        /// <param name="longTermRetentionBackupResourceId">The resource identifier of the long term retention backup associated with
        /// create operation of this database.
        /// </param>

        /// <param name="recoverableDatabaseId">The resource identifier of the recoverable database associated with create
        /// operation of this database.
        /// </param>

        /// <param name="restorableDroppedDatabaseId">The resource identifier of the restorable dropped database associated with
        /// create operation of this database.
        /// </param>

        /// <param name="catalogCollation">Collation of the metadata catalog.
        /// Possible values include: &#39;DATABASE_DEFAULT&#39;, &#39;SQL_Latin1_General_CP1_CI_AS&#39;</param>

        /// <param name="zoneRedundant">Whether or not this database is zone redundant, which means the replicas of
        /// this database will be spread across multiple availability zones.
        /// </param>

        /// <param name="licenseType">The license type to apply for this database. `LicenseIncluded` if you need
        /// a license, or `BasePrice` if you have a license and are eligible for the
        /// Azure Hybrid Benefit.
        /// Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;</param>

        /// <param name="maxLogSizeBytes">The max log size for this database.
        /// </param>

        /// <param name="earliestRestoreDate">This records the earliest start date and time that restore is available for
        /// this database (ISO8601 format).
        /// </param>

        /// <param name="readScale">The state of read-only routing. If enabled, connections that have
        /// application intent set to readonly in their connection string may be routed
        /// to a readonly secondary replica in the same region. Not applicable to a
        /// Hyperscale database within an elastic pool.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="highAvailabilityReplicaCount">The number of secondary replicas associated with the database that are used
        /// to provide high availability. Not applicable to a Hyperscale database
        /// within an elastic pool.
        /// </param>

        /// <param name="secondaryType">The secondary type of the database if it is a secondary.  Valid values are
        /// Geo, Named and Standby.
        /// Possible values include: &#39;Geo&#39;, &#39;Named&#39;, &#39;Standby&#39;</param>

        /// <param name="currentSku">The name and tier of the SKU.
        /// </param>

        /// <param name="autoPauseDelay">Time in minutes after which database is automatically paused. A value of -1
        /// means that automatic pause is disabled
        /// </param>

        /// <param name="currentBackupStorageRedundancy">The storage account type used to store backups for this database.
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="requestedBackupStorageRedundancy">The storage account type to be used to store backups for this database.
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="minCapacity">Minimal capacity that database will always have allocated, if not paused
        /// </param>

        /// <param name="pausedDate">The date when database was paused by user configuration or action(ISO8601
        /// format). Null if the database is ready.
        /// </param>

        /// <param name="resumedDate">The date when database was resumed by user action or database login
        /// (ISO8601 format). Null if the database is paused.
        /// </param>

        /// <param name="maintenanceConfigurationId">Maintenance configuration id assigned to the database. This configuration
        /// defines the period when the maintenance updates will occur.
        /// </param>

        /// <param name="isLedgerOn">Whether or not this database is a ledger database, which means all tables
        /// in the database are ledger tables. Note: the value of this property cannot
        /// be changed after the database has been created.
        /// </param>

        /// <param name="isInfraEncryptionEnabled">Infra encryption is enabled for this database.
        /// </param>

        /// <param name="federatedClientId">The Client id used for cross tenant per database CMK scenario
        /// </param>

        /// <param name="keys">The resource ids of the user assigned identities to use
        /// </param>

        /// <param name="encryptionProtector">The azure key vault URI of the database if it&#39;s configured with per
        /// Database Customer Managed Keys.
        /// </param>

        /// <param name="preferredEnclaveType">Type of enclave requested on the database i.e. Default or VBS enclaves.
        /// Possible values include: &#39;Default&#39;, &#39;VBS&#39;</param>

        /// <param name="useFreeLimit">Whether or not the database uses free monthly limits. Allowed on one
        /// database in a subscription.
        /// </param>

        /// <param name="freeLimitExhaustionBehavior">Specifies the behavior when monthly free limits are exhausted for the free
        /// database.
        /// AutoPause: The database will be auto paused upon exhaustion of free limits
        /// for remainder of the month.
        /// BillForUsage: The database will continue to be online upon exhaustion of
        /// free limits and any overage will be billed.
        /// Possible values include: &#39;AutoPause&#39;, &#39;BillOverUsage&#39;</param>

        /// <param name="sourceResourceId">The resource identifier of the source associated with the create operation
        /// of this database.
        /// This property is only supported for DataWarehouse edition and allows to
        /// restore across subscriptions.
        /// When sourceResourceId is specified, sourceDatabaseId,
        /// recoverableDatabaseId, restorableDroppedDatabaseId and
        /// sourceDatabaseDeletionDate must not be specified and CreateMode must be
        /// PointInTimeRestore, Restore or Recover.
        /// When createMode is PointInTimeRestore, sourceResourceId must be the
        /// resource ID of the existing database or existing sql pool, and
        /// restorePointInTime must be specified.
        /// When createMode is Restore, sourceResourceId must be the resource ID of
        /// restorable dropped database or restorable dropped sql pool.
        /// When createMode is Recover, sourceResourceId must be the resource ID of
        /// recoverable database or recoverable sql pool.
        /// When source subscription belongs to a different tenant than target
        /// subscription, “x-ms-authorization-auxiliary” header must contain
        /// authentication token for the source tenant. For more details about
        /// “x-ms-authorization-auxiliary” header see
        /// https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant
        /// </param>

        /// <param name="manualCutover">Whether or not customer controlled manual cutover needs to be done during
        /// Update Database operation to Hyperscale tier.
        /// This property is only applicable when scaling database from Business
        /// Critical/General Purpose/Premium/Standard tier to Hyperscale tier.
        /// When manualCutover is specified, the scaling operation will wait for user
        /// input to trigger cutover to Hyperscale database.
        /// To trigger cutover, please provide &#39;performCutover&#39; parameter when the
        /// Scaling operation is in Waiting state.
        /// </param>

        /// <param name="performCutover">To trigger customer controlled manual cutover during the wait state while
        /// Scaling operation is in progress.
        /// This property parameter is only applicable for scaling operations that are
        /// initiated along with &#39;manualCutover&#39; parameter.
        /// This property is only applicable when scaling database from Business
        /// Critical/General Purpose/Premium/Standard tier to Hyperscale tier is
        /// already in progress.
        /// When performCutover is specified, the scaling operation will trigger
        /// cutover and perform role-change to Hyperscale database.
        /// </param>

        /// <param name="availabilityZone">Specifies the availability zone the database is pinned to.
        /// Possible values include: &#39;NoPreference&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;</param>

        /// <param name="encryptionProtectorAutoRotation">The flag to enable or disable auto rotation of database encryption
        /// protector AKV key.
        /// </param>
        public DatabaseProperties(string createMode = default(string), string collation = default(string), long? maxSizeBytes = default(long?), string sampleName = default(string), string elasticPoolId = default(string), string sourceDatabaseId = default(string), string status = default(string), System.Guid? databaseId = default(System.Guid?), System.DateTime? creationDate = default(System.DateTime?), string currentServiceObjectiveName = default(string), string requestedServiceObjectiveName = default(string), string defaultSecondaryLocation = default(string), string failoverGroupId = default(string), System.DateTime? restorePointInTime = default(System.DateTime?), System.DateTime? sourceDatabaseDeletionDate = default(System.DateTime?), string recoveryServicesRecoveryPointId = default(string), string longTermRetentionBackupResourceId = default(string), string recoverableDatabaseId = default(string), string restorableDroppedDatabaseId = default(string), string catalogCollation = default(string), bool? zoneRedundant = default(bool?), string licenseType = default(string), long? maxLogSizeBytes = default(long?), System.DateTime? earliestRestoreDate = default(System.DateTime?), string readScale = default(string), int? highAvailabilityReplicaCount = default(int?), string secondaryType = default(string), Sku currentSku = default(Sku), int? autoPauseDelay = default(int?), string currentBackupStorageRedundancy = default(string), string requestedBackupStorageRedundancy = default(string), double? minCapacity = default(double?), System.DateTime? pausedDate = default(System.DateTime?), System.DateTime? resumedDate = default(System.DateTime?), string maintenanceConfigurationId = default(string), bool? isLedgerOn = default(bool?), bool? isInfraEncryptionEnabled = default(bool?), System.Guid? federatedClientId = default(System.Guid?), System.Collections.Generic.IDictionary<string, DatabaseKey> keys = default(System.Collections.Generic.IDictionary<string, DatabaseKey>), string encryptionProtector = default(string), string preferredEnclaveType = default(string), bool? useFreeLimit = default(bool?), string freeLimitExhaustionBehavior = default(string), string sourceResourceId = default(string), bool? manualCutover = default(bool?), bool? performCutover = default(bool?), string availabilityZone = default(string), bool? encryptionProtectorAutoRotation = default(bool?))

        {
            this.CreateMode = createMode;
            this.Collation = collation;
            this.MaxSizeBytes = maxSizeBytes;
            this.SampleName = sampleName;
            this.ElasticPoolId = elasticPoolId;
            this.SourceDatabaseId = sourceDatabaseId;
            this.Status = status;
            this.DatabaseId = databaseId;
            this.CreationDate = creationDate;
            this.CurrentServiceObjectiveName = currentServiceObjectiveName;
            this.RequestedServiceObjectiveName = requestedServiceObjectiveName;
            this.DefaultSecondaryLocation = defaultSecondaryLocation;
            this.FailoverGroupId = failoverGroupId;
            this.RestorePointInTime = restorePointInTime;
            this.SourceDatabaseDeletionDate = sourceDatabaseDeletionDate;
            this.RecoveryServicesRecoveryPointId = recoveryServicesRecoveryPointId;
            this.LongTermRetentionBackupResourceId = longTermRetentionBackupResourceId;
            this.RecoverableDatabaseId = recoverableDatabaseId;
            this.RestorableDroppedDatabaseId = restorableDroppedDatabaseId;
            this.CatalogCollation = catalogCollation;
            this.ZoneRedundant = zoneRedundant;
            this.LicenseType = licenseType;
            this.MaxLogSizeBytes = maxLogSizeBytes;
            this.EarliestRestoreDate = earliestRestoreDate;
            this.ReadScale = readScale;
            this.HighAvailabilityReplicaCount = highAvailabilityReplicaCount;
            this.SecondaryType = secondaryType;
            this.CurrentSku = currentSku;
            this.AutoPauseDelay = autoPauseDelay;
            this.CurrentBackupStorageRedundancy = currentBackupStorageRedundancy;
            this.RequestedBackupStorageRedundancy = requestedBackupStorageRedundancy;
            this.MinCapacity = minCapacity;
            this.PausedDate = pausedDate;
            this.ResumedDate = resumedDate;
            this.MaintenanceConfigurationId = maintenanceConfigurationId;
            this.IsLedgerOn = isLedgerOn;
            this.IsInfraEncryptionEnabled = isInfraEncryptionEnabled;
            this.FederatedClientId = federatedClientId;
            this.Keys = keys;
            this.EncryptionProtector = encryptionProtector;
            this.PreferredEnclaveType = preferredEnclaveType;
            this.UseFreeLimit = useFreeLimit;
            this.FreeLimitExhaustionBehavior = freeLimitExhaustionBehavior;
            this.SourceResourceId = sourceResourceId;
            this.ManualCutover = manualCutover;
            this.PerformCutover = performCutover;
            this.AvailabilityZone = availabilityZone;
            this.EncryptionProtectorAutoRotation = encryptionProtectorAutoRotation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets specifies the mode of database creation.
        /// Default: regular database creation.
        /// Copy: creates a database as a copy of an existing database.
        /// sourceDatabaseId must be specified as the resource ID of the source
        /// database.
        /// Secondary: creates a database as a secondary replica of an existing
        /// database. sourceDatabaseId must be specified as the resource ID of the
        /// existing primary database.
        /// PointInTimeRestore: Creates a database by restoring a point in time backup
        /// of an existing database. sourceDatabaseId must be specified as the resource
        /// ID of the existing database, and restorePointInTime must be specified.
        /// Recovery: Creates a database by restoring a geo-replicated backup.
        /// sourceDatabaseId must be specified as the recoverable database resource ID
        /// to restore.
        /// Restore: Creates a database by restoring a backup of a deleted database.
        /// sourceDatabaseId must be specified. If sourceDatabaseId is the database&#39;s
        /// original resource ID, then sourceDatabaseDeletionDate must be specified.
        /// Otherwise sourceDatabaseId must be the restorable dropped database resource
        /// ID and sourceDatabaseDeletionDate is ignored. restorePointInTime may also
        /// be specified to restore from an earlier point in time.
        /// RestoreLongTermRetentionBackup: Creates a database by restoring from a long
        /// term retention vault. recoveryServicesRecoveryPointResourceId must be
        /// specified as the recovery point resource ID.
        /// Copy, Secondary, and RestoreLongTermRetentionBackup are not supported for
        /// DataWarehouse edition. Possible values include: &#39;Default&#39;, &#39;Copy&#39;, &#39;Secondary&#39;, &#39;PointInTimeRestore&#39;, &#39;Restore&#39;, &#39;Recovery&#39;, &#39;RestoreExternalBackup&#39;, &#39;RestoreExternalBackupSecondary&#39;, &#39;RestoreLongTermRetentionBackup&#39;, &#39;OnlineSecondary&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createMode")]
        public string CreateMode {get; set; }

        /// <summary>
        /// Gets or sets the collation of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collation")]
        public string Collation {get; set; }

        /// <summary>
        /// Gets or sets the max size of the database expressed in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxSizeBytes")]
        public long? MaxSizeBytes {get; set; }

        /// <summary>
        /// Gets or sets the name of the sample schema to apply when creating this
        /// database. Possible values include: &#39;AdventureWorksLT&#39;, &#39;WideWorldImportersStd&#39;, &#39;WideWorldImportersFull&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sampleName")]
        public string SampleName {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the elastic pool containing this
        /// database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "elasticPoolId")]
        public string ElasticPoolId {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source database associated with
        /// create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceDatabaseId")]
        public string SourceDatabaseId {get; set; }

        /// <summary>
        /// Gets the status of the database. Possible values include: &#39;Online&#39;, &#39;Restoring&#39;, &#39;RecoveryPending&#39;, &#39;Recovering&#39;, &#39;Suspect&#39;, &#39;Offline&#39;, &#39;Standby&#39;, &#39;Shutdown&#39;, &#39;EmergencyMode&#39;, &#39;AutoClosed&#39;, &#39;Copying&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;OfflineSecondary&#39;, &#39;Pausing&#39;, &#39;Paused&#39;, &#39;Resuming&#39;, &#39;Scaling&#39;, &#39;OfflineChangingDwPerformanceTiers&#39;, &#39;OnlineChangingDwPerformanceTiers&#39;, &#39;Disabled&#39;, &#39;Stopping&#39;, &#39;Stopped&#39;, &#39;Starting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the ID of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseId")]
        public System.Guid? DatabaseId {get; private set; }

        /// <summary>
        /// Gets the creation date of the database (ISO8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationDate")]
        public System.DateTime? CreationDate {get; private set; }

        /// <summary>
        /// Gets the current service level objective name of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentServiceObjectiveName")]
        public string CurrentServiceObjectiveName {get; private set; }

        /// <summary>
        /// Gets the requested service level objective name of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestedServiceObjectiveName")]
        public string RequestedServiceObjectiveName {get; private set; }

        /// <summary>
        /// Gets the default secondary region for this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultSecondaryLocation")]
        public string DefaultSecondaryLocation {get; private set; }

        /// <summary>
        /// Gets failover Group resource identifier that this database belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverGroupId")]
        public string FailoverGroupId {get; private set; }

        /// <summary>
        /// Gets or sets specifies the point in time (ISO8601 format) of the source
        /// database that will be restored to create the new database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restorePointInTime")]
        public System.DateTime? RestorePointInTime {get; set; }

        /// <summary>
        /// Gets or sets specifies the time that the database was deleted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceDatabaseDeletionDate")]
        public System.DateTime? SourceDatabaseDeletionDate {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the recovery point associated with
        /// create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoveryServicesRecoveryPointId")]
        public string RecoveryServicesRecoveryPointId {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the long term retention backup
        /// associated with create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "longTermRetentionBackupResourceId")]
        public string LongTermRetentionBackupResourceId {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the recoverable database associated
        /// with create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoverableDatabaseId")]
        public string RecoverableDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the restorable dropped database
        /// associated with create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restorableDroppedDatabaseId")]
        public string RestorableDroppedDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets collation of the metadata catalog. Possible values include: &#39;DATABASE_DEFAULT&#39;, &#39;SQL_Latin1_General_CP1_CI_AS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "catalogCollation")]
        public string CatalogCollation {get; set; }

        /// <summary>
        /// Gets or sets whether or not this database is zone redundant, which means
        /// the replicas of this database will be spread across multiple availability
        /// zones.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "zoneRedundant")]
        public bool? ZoneRedundant {get; set; }

        /// <summary>
        /// Gets or sets the license type to apply for this database. `LicenseIncluded`
        /// if you need a license, or `BasePrice` if you have a license and are
        /// eligible for the Azure Hybrid Benefit. Possible values include: &#39;LicenseIncluded&#39;, &#39;BasePrice&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets the max log size for this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maxLogSizeBytes")]
        public long? MaxLogSizeBytes {get; private set; }

        /// <summary>
        /// Gets this records the earliest start date and time that restore is
        /// available for this database (ISO8601 format).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "earliestRestoreDate")]
        public System.DateTime? EarliestRestoreDate {get; private set; }

        /// <summary>
        /// Gets or sets the state of read-only routing. If enabled, connections that
        /// have application intent set to readonly in their connection string may be
        /// routed to a readonly secondary replica in the same region. Not applicable
        /// to a Hyperscale database within an elastic pool. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "readScale")]
        public string ReadScale {get; set; }

        /// <summary>
        /// Gets or sets the number of secondary replicas associated with the database
        /// that are used to provide high availability. Not applicable to a Hyperscale
        /// database within an elastic pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "highAvailabilityReplicaCount")]
        public int? HighAvailabilityReplicaCount {get; set; }

        /// <summary>
        /// Gets or sets the secondary type of the database if it is a secondary. 
        /// Valid values are Geo, Named and Standby. Possible values include: &#39;Geo&#39;, &#39;Named&#39;, &#39;Standby&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "secondaryType")]
        public string SecondaryType {get; set; }

        /// <summary>
        /// Gets the name and tier of the SKU.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentSku")]
        public Sku CurrentSku {get; private set; }

        /// <summary>
        /// Gets or sets time in minutes after which database is automatically paused.
        /// A value of -1 means that automatic pause is disabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoPauseDelay")]
        public int? AutoPauseDelay {get; set; }

        /// <summary>
        /// Gets the storage account type used to store backups for this database. Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentBackupStorageRedundancy")]
        public string CurrentBackupStorageRedundancy {get; private set; }

        /// <summary>
        /// Gets or sets the storage account type to be used to store backups for this
        /// database. Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestedBackupStorageRedundancy")]
        public string RequestedBackupStorageRedundancy {get; set; }

        /// <summary>
        /// Gets or sets minimal capacity that database will always have allocated, if
        /// not paused
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "minCapacity")]
        public double? MinCapacity {get; set; }

        /// <summary>
        /// Gets the date when database was paused by user configuration or
        /// action(ISO8601 format). Null if the database is ready.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "pausedDate")]
        public System.DateTime? PausedDate {get; private set; }

        /// <summary>
        /// Gets the date when database was resumed by user action or database login
        /// (ISO8601 format). Null if the database is paused.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resumedDate")]
        public System.DateTime? ResumedDate {get; private set; }

        /// <summary>
        /// Gets or sets maintenance configuration id assigned to the database. This
        /// configuration defines the period when the maintenance updates will occur.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "maintenanceConfigurationId")]
        public string MaintenanceConfigurationId {get; set; }

        /// <summary>
        /// Gets or sets whether or not this database is a ledger database, which means
        /// all tables in the database are ledger tables. Note: the value of this
        /// property cannot be changed after the database has been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isLedgerOn")]
        public bool? IsLedgerOn {get; set; }

        /// <summary>
        /// Gets infra encryption is enabled for this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isInfraEncryptionEnabled")]
        public bool? IsInfraEncryptionEnabled {get; private set; }

        /// <summary>
        /// Gets or sets the Client id used for cross tenant per database CMK scenario
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "federatedClientId")]
        public System.Guid? FederatedClientId {get; set; }

        /// <summary>
        /// Gets or sets the resource ids of the user assigned identities to use
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "keys")]
        public System.Collections.Generic.IDictionary<string, DatabaseKey> Keys {get; set; }

        /// <summary>
        /// Gets or sets the azure key vault URI of the database if it&#39;s configured
        /// with per Database Customer Managed Keys.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionProtector")]
        public string EncryptionProtector {get; set; }

        /// <summary>
        /// Gets or sets type of enclave requested on the database i.e. Default or VBS
        /// enclaves. Possible values include: &#39;Default&#39;, &#39;VBS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferredEnclaveType")]
        public string PreferredEnclaveType {get; set; }

        /// <summary>
        /// Gets or sets whether or not the database uses free monthly limits. Allowed
        /// on one database in a subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "useFreeLimit")]
        public bool? UseFreeLimit {get; set; }

        /// <summary>
        /// Gets or sets specifies the behavior when monthly free limits are exhausted
        /// for the free database.
        /// AutoPause: The database will be auto paused upon exhaustion of free limits
        /// for remainder of the month.
        /// BillForUsage: The database will continue to be online upon exhaustion of
        /// free limits and any overage will be billed. Possible values include: &#39;AutoPause&#39;, &#39;BillOverUsage&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "freeLimitExhaustionBehavior")]
        public string FreeLimitExhaustionBehavior {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source associated with the
        /// create operation of this database.
        /// This property is only supported for DataWarehouse edition and allows to
        /// restore across subscriptions.
        /// When sourceResourceId is specified, sourceDatabaseId,
        /// recoverableDatabaseId, restorableDroppedDatabaseId and
        /// sourceDatabaseDeletionDate must not be specified and CreateMode must be
        /// PointInTimeRestore, Restore or Recover.
        /// When createMode is PointInTimeRestore, sourceResourceId must be the
        /// resource ID of the existing database or existing sql pool, and
        /// restorePointInTime must be specified.
        /// When createMode is Restore, sourceResourceId must be the resource ID of
        /// restorable dropped database or restorable dropped sql pool.
        /// When createMode is Recover, sourceResourceId must be the resource ID of
        /// recoverable database or recoverable sql pool.
        /// When source subscription belongs to a different tenant than target
        /// subscription, “x-ms-authorization-auxiliary” header must contain
        /// authentication token for the source tenant. For more details about
        /// “x-ms-authorization-auxiliary” header see
        /// https://docs.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceResourceId")]
        public string SourceResourceId {get; set; }

        /// <summary>
        /// Gets or sets whether or not customer controlled manual cutover needs to be
        /// done during Update Database operation to Hyperscale tier.
        /// This property is only applicable when scaling database from Business
        /// Critical/General Purpose/Premium/Standard tier to Hyperscale tier.
        /// When manualCutover is specified, the scaling operation will wait for user
        /// input to trigger cutover to Hyperscale database.
        /// To trigger cutover, please provide &#39;performCutover&#39; parameter when the
        /// Scaling operation is in Waiting state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "manualCutover")]
        public bool? ManualCutover {get; set; }

        /// <summary>
        /// Gets or sets to trigger customer controlled manual cutover during the wait
        /// state while Scaling operation is in progress.
        /// This property parameter is only applicable for scaling operations that are
        /// initiated along with &#39;manualCutover&#39; parameter.
        /// This property is only applicable when scaling database from Business
        /// Critical/General Purpose/Premium/Standard tier to Hyperscale tier is
        /// already in progress.
        /// When performCutover is specified, the scaling operation will trigger
        /// cutover and perform role-change to Hyperscale database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "performCutover")]
        public bool? PerformCutover {get; set; }

        /// <summary>
        /// Gets or sets specifies the availability zone the database is pinned to. Possible values include: &#39;NoPreference&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "availabilityZone")]
        public string AvailabilityZone {get; set; }

        /// <summary>
        /// Gets or sets the flag to enable or disable auto rotation of database
        /// encryption protector AKV key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionProtectorAutoRotation")]
        public bool? EncryptionProtectorAutoRotation {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


















            if (this.CurrentSku != null)
            {
                this.CurrentSku.Validate();
            }









        }
    }
}