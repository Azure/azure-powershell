// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a sync group.
    /// </summary>
    public partial class SyncGroupProperties
    {
        /// <summary>
        /// Initializes a new instance of the SyncGroupProperties class.
        /// </summary>
        public SyncGroupProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SyncGroupProperties class.
        /// </summary>

        /// <param name="interval">Sync interval of the sync group.
        /// </param>

        /// <param name="lastSyncTime">Last sync time of the sync group.
        /// </param>

        /// <param name="conflictResolutionPolicy">Conflict resolution policy of the sync group.
        /// Possible values include: 'HubWin', 'MemberWin'</param>

        /// <param name="syncDatabaseId">ARM resource id of the sync database in the sync group.
        /// </param>

        /// <param name="hubDatabaseUserName">User name for the sync group hub database credential.
        /// </param>

        /// <param name="hubDatabasePassword">Password for the sync group hub database credential.
        /// </param>

        /// <param name="syncState">Sync state of the sync group.
        /// Possible values include: 'NotReady', 'Error', 'Warning', 'Progressing',
        /// 'Good'</param>

        /// <param name="schema">Sync schema of the sync group.
        /// </param>

        /// <param name="enableConflictLogging">If conflict logging is enabled.
        /// </param>

        /// <param name="conflictLoggingRetentionInDays">Conflict logging retention period.
        /// </param>

        /// <param name="usePrivateLinkConnection">If use private link connection is enabled.
        /// </param>

        /// <param name="privateEndpointName">Private endpoint name of the sync group if use private link connection is
        /// enabled.
        /// </param>
        public SyncGroupProperties(int? interval = default(int?), System.DateTime? lastSyncTime = default(System.DateTime?), string conflictResolutionPolicy = default(string), string syncDatabaseId = default(string), string hubDatabaseUserName = default(string), string hubDatabasePassword = default(string), string syncState = default(string), SyncGroupSchema schema = default(SyncGroupSchema), bool? enableConflictLogging = default(bool?), int? conflictLoggingRetentionInDays = default(int?), bool? usePrivateLinkConnection = default(bool?), string privateEndpointName = default(string))

        {
            this.Interval = interval;
            this.LastSyncTime = lastSyncTime;
            this.ConflictResolutionPolicy = conflictResolutionPolicy;
            this.SyncDatabaseId = syncDatabaseId;
            this.HubDatabaseUserName = hubDatabaseUserName;
            this.HubDatabasePassword = hubDatabasePassword;
            this.SyncState = syncState;
            this.Schema = schema;
            this.EnableConflictLogging = enableConflictLogging;
            this.ConflictLoggingRetentionInDays = conflictLoggingRetentionInDays;
            this.UsePrivateLinkConnection = usePrivateLinkConnection;
            this.PrivateEndpointName = privateEndpointName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets sync interval of the sync group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interval")]
        public int? Interval {get; set; }

        /// <summary>
        /// Gets last sync time of the sync group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastSyncTime")]
        public System.DateTime? LastSyncTime {get; private set; }

        /// <summary>
        /// Gets or sets conflict resolution policy of the sync group. Possible values include: &#39;HubWin&#39;, &#39;MemberWin&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "conflictResolutionPolicy")]
        public string ConflictResolutionPolicy {get; set; }

        /// <summary>
        /// Gets or sets aRM resource id of the sync database in the sync group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncDatabaseId")]
        public string SyncDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets user name for the sync group hub database credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hubDatabaseUserName")]
        public string HubDatabaseUserName {get; set; }

        /// <summary>
        /// Gets or sets password for the sync group hub database credential.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hubDatabasePassword")]
        public string HubDatabasePassword {get; set; }

        /// <summary>
        /// Gets sync state of the sync group. Possible values include: &#39;NotReady&#39;, &#39;Error&#39;, &#39;Warning&#39;, &#39;Progressing&#39;, &#39;Good&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "syncState")]
        public string SyncState {get; private set; }

        /// <summary>
        /// Gets or sets sync schema of the sync group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "schema")]
        public SyncGroupSchema Schema {get; set; }

        /// <summary>
        /// Gets or sets if conflict logging is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "enableConflictLogging")]
        public bool? EnableConflictLogging {get; set; }

        /// <summary>
        /// Gets or sets conflict logging retention period.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "conflictLoggingRetentionInDays")]
        public int? ConflictLoggingRetentionInDays {get; set; }

        /// <summary>
        /// Gets or sets if use private link connection is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usePrivateLinkConnection")]
        public bool? UsePrivateLinkConnection {get; set; }

        /// <summary>
        /// Gets private endpoint name of the sync group if use private link connection
        /// is enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "privateEndpointName")]
        public string PrivateEndpointName {get; private set; }
    }
}