// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a long term retention backup
    /// </summary>
    public partial class LongTermRetentionBackupProperties
    {
        /// <summary>
        /// Initializes a new instance of the LongTermRetentionBackupProperties class.
        /// </summary>
        public LongTermRetentionBackupProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LongTermRetentionBackupProperties class.
        /// </summary>

        /// <param name="serverName">The server name that the backup database belong to.
        /// </param>

        /// <param name="serverCreateTime">The create time of the server.
        /// </param>

        /// <param name="databaseName">The name of the database the backup belong to
        /// </param>

        /// <param name="databaseDeletionTime">The delete time of the database
        /// </param>

        /// <param name="backupTime">The time the backup was taken
        /// </param>

        /// <param name="backupExpirationTime">The time the long term retention backup will expire.
        /// </param>

        /// <param name="backupStorageRedundancy">The storage redundancy type of the backup
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="requestedBackupStorageRedundancy">The storage redundancy type of the backup
        /// Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;</param>

        /// <param name="isBackupImmutable">The setting whether the LTR backup is immutable
        /// </param>

        /// <param name="timeBasedImmutability">The setting for whether or not time-based immutability is enabled for the
        /// LTR backup. When time-based immutability is enabled and locked, the backup
        /// cannot be deleted until BackupExpirationTime.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="timeBasedImmutabilityMode">The time-based immutability mode. Only applicable if time-based
        /// immutability is enabled.
        /// Possible values include: &#39;Locked&#39;, &#39;Unlocked&#39;</param>

        /// <param name="legalHoldImmutability">The setting for whether LegalHold is enabled or disabled on the LTR backup.
        /// When LegalHold is enabled, the backup cannot be deleted until the LegalHold
        /// is removed.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="backupStorageAccessTier">The BackupStorageAccessTier for the LTR backup
        /// Possible values include: &#39;Hot&#39;, &#39;Archive&#39;</param>
        public LongTermRetentionBackupProperties(string serverName = default(string), System.DateTime? serverCreateTime = default(System.DateTime?), string databaseName = default(string), System.DateTime? databaseDeletionTime = default(System.DateTime?), System.DateTime? backupTime = default(System.DateTime?), System.DateTime? backupExpirationTime = default(System.DateTime?), string backupStorageRedundancy = default(string), string requestedBackupStorageRedundancy = default(string), bool? isBackupImmutable = default(bool?), string timeBasedImmutability = default(string), string timeBasedImmutabilityMode = default(string), string legalHoldImmutability = default(string), string backupStorageAccessTier = default(string))

        {
            this.ServerName = serverName;
            this.ServerCreateTime = serverCreateTime;
            this.DatabaseName = databaseName;
            this.DatabaseDeletionTime = databaseDeletionTime;
            this.BackupTime = backupTime;
            this.BackupExpirationTime = backupExpirationTime;
            this.BackupStorageRedundancy = backupStorageRedundancy;
            this.RequestedBackupStorageRedundancy = requestedBackupStorageRedundancy;
            this.IsBackupImmutable = isBackupImmutable;
            this.TimeBasedImmutability = timeBasedImmutability;
            this.TimeBasedImmutabilityMode = timeBasedImmutabilityMode;
            this.LegalHoldImmutability = legalHoldImmutability;
            this.BackupStorageAccessTier = backupStorageAccessTier;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the server name that the backup database belong to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; private set; }

        /// <summary>
        /// Gets the create time of the server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverCreateTime")]
        public System.DateTime? ServerCreateTime {get; private set; }

        /// <summary>
        /// Gets the name of the database the backup belong to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseName")]
        public string DatabaseName {get; private set; }

        /// <summary>
        /// Gets the delete time of the database
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "databaseDeletionTime")]
        public System.DateTime? DatabaseDeletionTime {get; private set; }

        /// <summary>
        /// Gets the time the backup was taken
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupTime")]
        public System.DateTime? BackupTime {get; private set; }

        /// <summary>
        /// Gets the time the long term retention backup will expire.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupExpirationTime")]
        public System.DateTime? BackupExpirationTime {get; private set; }

        /// <summary>
        /// Gets the storage redundancy type of the backup Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupStorageRedundancy")]
        public string BackupStorageRedundancy {get; private set; }

        /// <summary>
        /// Gets or sets the storage redundancy type of the backup Possible values include: &#39;Geo&#39;, &#39;Local&#39;, &#39;Zone&#39;, &#39;GeoZone&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "requestedBackupStorageRedundancy")]
        public string RequestedBackupStorageRedundancy {get; set; }

        /// <summary>
        /// Gets or sets the setting whether the LTR backup is immutable
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isBackupImmutable")]
        public bool? IsBackupImmutable {get; set; }

        /// <summary>
        /// Gets or sets the setting for whether or not time-based immutability is
        /// enabled for the LTR backup. When time-based immutability is enabled and
        /// locked, the backup cannot be deleted until BackupExpirationTime. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeBasedImmutability")]
        public string TimeBasedImmutability {get; set; }

        /// <summary>
        /// Gets or sets the time-based immutability mode. Only applicable if
        /// time-based immutability is enabled. Possible values include: &#39;Locked&#39;, &#39;Unlocked&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "timeBasedImmutabilityMode")]
        public string TimeBasedImmutabilityMode {get; set; }

        /// <summary>
        /// Gets or sets the setting for whether LegalHold is enabled or disabled on
        /// the LTR backup. When LegalHold is enabled, the backup cannot be deleted
        /// until the LegalHold is removed. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "legalHoldImmutability")]
        public string LegalHoldImmutability {get; set; }

        /// <summary>
        /// Gets the BackupStorageAccessTier for the LTR backup Possible values include: &#39;Hot&#39;, &#39;Archive&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupStorageAccessTier")]
        public string BackupStorageAccessTier {get; private set; }
    }
}