// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// The managed database&#39;s properties.
    /// </summary>
    public partial class ManagedDatabaseProperties
    {
        /// <summary>
        /// Initializes a new instance of the ManagedDatabaseProperties class.
        /// </summary>
        public ManagedDatabaseProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedDatabaseProperties class.
        /// </summary>

        /// <param name="collation">Collation of the managed database.
        /// </param>

        /// <param name="status">Status of the database.
        /// Possible values include: 'Online', 'Offline', 'Shutdown', 'Creating',
        /// 'Inaccessible', 'Restoring', 'Updating', 'Stopping', 'Stopped', 'Starting',
        /// 'DbMoving', 'DbCopying'</param>

        /// <param name="creationDate">Creation date of the database.
        /// </param>

        /// <param name="earliestRestorePoint">Earliest restore point in time for point in time restore.
        /// </param>

        /// <param name="restorePointInTime">Conditional. If createMode is PointInTimeRestore, this value is required.
        /// Specifies the point in time (ISO8601 format) of the source database that
        /// will be restored to create the new database.
        /// </param>

        /// <param name="defaultSecondaryLocation">Geo paired region.
        /// </param>

        /// <param name="catalogCollation">Collation of the metadata catalog.
        /// Possible values include: 'DATABASE_DEFAULT', 'SQL_Latin1_General_CP1_CI_AS'</param>

        /// <param name="createMode">Managed database create mode. PointInTimeRestore: Create a database by
        /// restoring a point in time backup of an existing database.
        /// SourceDatabaseName, SourceManagedInstanceName and PointInTime must be
        /// specified. RestoreExternalBackup: Create a database by restoring from
        /// external backup files. Collation, StorageContainerUri and
        /// StorageContainerSasToken must be specified. Recovery: Creates a database by
        /// restoring a geo-replicated backup. RecoverableDatabaseId must be specified
        /// as the recoverable database resource ID to restore.
        /// RestoreLongTermRetentionBackup: Create a database by restoring from a long
        /// term retention backup (longTermRetentionBackupResourceId required).
        /// Possible values include: 'Default', 'RestoreExternalBackup',
        /// 'PointInTimeRestore', 'Recovery', 'RestoreLongTermRetentionBackup'</param>

        /// <param name="storageContainerUri">Conditional. If createMode is RestoreExternalBackup, this value is
        /// required. Specifies the uri of the storage container where backups for this
        /// restore are stored.
        /// </param>

        /// <param name="sourceDatabaseId">The resource identifier of the source database associated with create
        /// operation of this database.
        /// </param>

        /// <param name="crossSubscriptionSourceDatabaseId">The resource identifier of the cross-subscription source database
        /// associated with create operation of this database.
        /// </param>

        /// <param name="restorableDroppedDatabaseId">The restorable dropped database resource id to restore when creating this
        /// database.
        /// </param>

        /// <param name="crossSubscriptionRestorableDroppedDatabaseId">The restorable cross-subscription dropped database resource id to restore
        /// when creating this database.
        /// </param>

        /// <param name="storageContainerIdentity">Conditional. If createMode is RestoreExternalBackup, this value is used.
        /// Specifies the identity used for storage container authentication. Can be
        /// &#39;SharedAccessSignature&#39; or &#39;ManagedIdentity&#39;; if not specified
        /// &#39;SharedAccessSignature&#39; is assumed.
        /// </param>

        /// <param name="storageContainerSasToken">Conditional. If createMode is RestoreExternalBackup and
        /// storageContainerIdentity is not ManagedIdentity, this value is required.
        /// Specifies the storage container sas token.
        /// </param>

        /// <param name="failoverGroupId">Instance Failover Group resource identifier that this managed database
        /// belongs to.
        /// </param>

        /// <param name="recoverableDatabaseId">The resource identifier of the recoverable database associated with create
        /// operation of this database.
        /// </param>

        /// <param name="longTermRetentionBackupResourceId">The name of the Long Term Retention backup to be used for restore of this
        /// managed database.
        /// </param>

        /// <param name="autoCompleteRestore">Whether to auto complete restore of this managed database.
        /// </param>

        /// <param name="lastBackupName">Last backup file name for restore of this managed database.
        /// </param>

        /// <param name="crossSubscriptionTargetManagedInstanceId">Target managed instance id used in cross-subscription restore.
        /// </param>

        /// <param name="isLedgerOn">Whether or not this database is a ledger database, which means all tables
        /// in the database are ledger tables. Note: the value of this property cannot
        /// be changed after the database has been created.
        /// </param>
        public ManagedDatabaseProperties(string collation = default(string), string status = default(string), System.DateTime? creationDate = default(System.DateTime?), System.DateTime? earliestRestorePoint = default(System.DateTime?), System.DateTime? restorePointInTime = default(System.DateTime?), string defaultSecondaryLocation = default(string), string catalogCollation = default(string), string createMode = default(string), string storageContainerUri = default(string), string sourceDatabaseId = default(string), string crossSubscriptionSourceDatabaseId = default(string), string restorableDroppedDatabaseId = default(string), string crossSubscriptionRestorableDroppedDatabaseId = default(string), string storageContainerIdentity = default(string), string storageContainerSasToken = default(string), string failoverGroupId = default(string), string recoverableDatabaseId = default(string), string longTermRetentionBackupResourceId = default(string), bool? autoCompleteRestore = default(bool?), string lastBackupName = default(string), string crossSubscriptionTargetManagedInstanceId = default(string), bool? isLedgerOn = default(bool?))

        {
            this.Collation = collation;
            this.Status = status;
            this.CreationDate = creationDate;
            this.EarliestRestorePoint = earliestRestorePoint;
            this.RestorePointInTime = restorePointInTime;
            this.DefaultSecondaryLocation = defaultSecondaryLocation;
            this.CatalogCollation = catalogCollation;
            this.CreateMode = createMode;
            this.StorageContainerUri = storageContainerUri;
            this.SourceDatabaseId = sourceDatabaseId;
            this.CrossSubscriptionSourceDatabaseId = crossSubscriptionSourceDatabaseId;
            this.RestorableDroppedDatabaseId = restorableDroppedDatabaseId;
            this.CrossSubscriptionRestorableDroppedDatabaseId = crossSubscriptionRestorableDroppedDatabaseId;
            this.StorageContainerIdentity = storageContainerIdentity;
            this.StorageContainerSasToken = storageContainerSasToken;
            this.FailoverGroupId = failoverGroupId;
            this.RecoverableDatabaseId = recoverableDatabaseId;
            this.LongTermRetentionBackupResourceId = longTermRetentionBackupResourceId;
            this.AutoCompleteRestore = autoCompleteRestore;
            this.LastBackupName = lastBackupName;
            this.CrossSubscriptionTargetManagedInstanceId = crossSubscriptionTargetManagedInstanceId;
            this.IsLedgerOn = isLedgerOn;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets collation of the managed database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "collation")]
        public string Collation {get; set; }

        /// <summary>
        /// Gets status of the database. Possible values include: &#39;Online&#39;, &#39;Offline&#39;, &#39;Shutdown&#39;, &#39;Creating&#39;, &#39;Inaccessible&#39;, &#39;Restoring&#39;, &#39;Updating&#39;, &#39;Stopping&#39;, &#39;Stopped&#39;, &#39;Starting&#39;, &#39;DbMoving&#39;, &#39;DbCopying&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets creation date of the database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationDate")]
        public System.DateTime? CreationDate {get; private set; }

        /// <summary>
        /// Gets earliest restore point in time for point in time restore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "earliestRestorePoint")]
        public System.DateTime? EarliestRestorePoint {get; private set; }

        /// <summary>
        /// Gets or sets conditional. If createMode is PointInTimeRestore, this value
        /// is required. Specifies the point in time (ISO8601 format) of the source
        /// database that will be restored to create the new database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restorePointInTime")]
        public System.DateTime? RestorePointInTime {get; set; }

        /// <summary>
        /// Gets geo paired region.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultSecondaryLocation")]
        public string DefaultSecondaryLocation {get; private set; }

        /// <summary>
        /// Gets or sets collation of the metadata catalog. Possible values include: &#39;DATABASE_DEFAULT&#39;, &#39;SQL_Latin1_General_CP1_CI_AS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "catalogCollation")]
        public string CatalogCollation {get; set; }

        /// <summary>
        /// Gets or sets managed database create mode. PointInTimeRestore: Create a
        /// database by restoring a point in time backup of an existing database.
        /// SourceDatabaseName, SourceManagedInstanceName and PointInTime must be
        /// specified. RestoreExternalBackup: Create a database by restoring from
        /// external backup files. Collation, StorageContainerUri and
        /// StorageContainerSasToken must be specified. Recovery: Creates a database by
        /// restoring a geo-replicated backup. RecoverableDatabaseId must be specified
        /// as the recoverable database resource ID to restore.
        /// RestoreLongTermRetentionBackup: Create a database by restoring from a long
        /// term retention backup (longTermRetentionBackupResourceId required). Possible values include: &#39;Default&#39;, &#39;RestoreExternalBackup&#39;, &#39;PointInTimeRestore&#39;, &#39;Recovery&#39;, &#39;RestoreLongTermRetentionBackup&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "createMode")]
        public string CreateMode {get; set; }

        /// <summary>
        /// Gets or sets conditional. If createMode is RestoreExternalBackup, this
        /// value is required. Specifies the uri of the storage container where backups
        /// for this restore are stored.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageContainerUri")]
        public string StorageContainerUri {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the source database associated with
        /// create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceDatabaseId")]
        public string SourceDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets the resource identifier of the cross-subscription source
        /// database associated with create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crossSubscriptionSourceDatabaseId")]
        public string CrossSubscriptionSourceDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets the restorable dropped database resource id to restore when
        /// creating this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restorableDroppedDatabaseId")]
        public string RestorableDroppedDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets the restorable cross-subscription dropped database resource id
        /// to restore when creating this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crossSubscriptionRestorableDroppedDatabaseId")]
        public string CrossSubscriptionRestorableDroppedDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets conditional. If createMode is RestoreExternalBackup, this
        /// value is used. Specifies the identity used for storage container
        /// authentication. Can be &#39;SharedAccessSignature&#39; or &#39;ManagedIdentity&#39;; if not
        /// specified &#39;SharedAccessSignature&#39; is assumed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageContainerIdentity")]
        public string StorageContainerIdentity {get; set; }

        /// <summary>
        /// Gets or sets conditional. If createMode is RestoreExternalBackup and
        /// storageContainerIdentity is not ManagedIdentity, this value is required.
        /// Specifies the storage container sas token.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageContainerSasToken")]
        public string StorageContainerSasToken {get; set; }

        /// <summary>
        /// Gets instance Failover Group resource identifier that this managed database
        /// belongs to.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "failoverGroupId")]
        public string FailoverGroupId {get; private set; }

        /// <summary>
        /// Gets or sets the resource identifier of the recoverable database associated
        /// with create operation of this database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "recoverableDatabaseId")]
        public string RecoverableDatabaseId {get; set; }

        /// <summary>
        /// Gets or sets the name of the Long Term Retention backup to be used for
        /// restore of this managed database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "longTermRetentionBackupResourceId")]
        public string LongTermRetentionBackupResourceId {get; set; }

        /// <summary>
        /// Gets or sets whether to auto complete restore of this managed database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoCompleteRestore")]
        public bool? AutoCompleteRestore {get; set; }

        /// <summary>
        /// Gets or sets last backup file name for restore of this managed database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastBackupName")]
        public string LastBackupName {get; set; }

        /// <summary>
        /// Gets or sets target managed instance id used in cross-subscription restore.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "crossSubscriptionTargetManagedInstanceId")]
        public string CrossSubscriptionTargetManagedInstanceId {get; set; }

        /// <summary>
        /// Gets or sets whether or not this database is a ledger database, which means
        /// all tables in the database are ledger tables. Note: the value of this
        /// property cannot be changed after the database has been created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isLedgerOn")]
        public bool? IsLedgerOn {get; set; }
    }
}