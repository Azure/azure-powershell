// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Contains the operation result properties for managed database move
    /// operation.
    /// </summary>
    public partial class ManagedDatabaseMoveOperationResultProperties
    {
        /// <summary>
        /// Initializes a new instance of the ManagedDatabaseMoveOperationResultProperties class.
        /// </summary>
        public ManagedDatabaseMoveOperationResultProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ManagedDatabaseMoveOperationResultProperties class.
        /// </summary>

        /// <param name="operation">The name of operation.
        /// </param>

        /// <param name="operationFriendlyName">The friendly name of operation.
        /// </param>

        /// <param name="startTime">The operation start time.
        /// </param>

        /// <param name="state">The operation state.
        /// Possible values include: &#39;Pending&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;,
        /// &#39;CancelInProgress&#39;, &#39;Cancelled&#39;</param>

        /// <param name="operationMode">Operation mode.
        /// Possible values include: &#39;Move&#39;, &#39;Copy&#39;</param>

        /// <param name="sourceManagedInstanceName">Source Managed Instance name.
        /// </param>

        /// <param name="targetManagedInstanceName">Target Managed Instance name.
        /// </param>

        /// <param name="sourceManagedInstanceId">Source Managed Instance resource id.
        /// </param>

        /// <param name="targetManagedInstanceId">Target Managed instance resource id.
        /// </param>

        /// <param name="sourceDatabaseName">Source database name.
        /// </param>

        /// <param name="targetDatabaseName">Target database name.
        /// </param>

        /// <param name="isCancellable">Is move operation cancellable.
        /// </param>

        /// <param name="errorCode">The operation error code.
        /// </param>

        /// <param name="errorDescription">The operation error description.
        /// </param>

        /// <param name="errorSeverity">The operation error severity.
        /// </param>

        /// <param name="isUserError">Whether or not the error is a user error.
        /// </param>
        public ManagedDatabaseMoveOperationResultProperties(string operation = default(string), string operationFriendlyName = default(string), System.DateTime? startTime = default(System.DateTime?), string state = default(string), string operationMode = default(string), string sourceManagedInstanceName = default(string), string targetManagedInstanceName = default(string), string sourceManagedInstanceId = default(string), string targetManagedInstanceId = default(string), string sourceDatabaseName = default(string), string targetDatabaseName = default(string), bool? isCancellable = default(bool?), int? errorCode = default(int?), string errorDescription = default(string), int? errorSeverity = default(int?), bool? isUserError = default(bool?))

        {
            this.Operation = operation;
            this.OperationFriendlyName = operationFriendlyName;
            this.StartTime = startTime;
            this.State = state;
            this.OperationMode = operationMode;
            this.SourceManagedInstanceName = sourceManagedInstanceName;
            this.TargetManagedInstanceName = targetManagedInstanceName;
            this.SourceManagedInstanceId = sourceManagedInstanceId;
            this.TargetManagedInstanceId = targetManagedInstanceId;
            this.SourceDatabaseName = sourceDatabaseName;
            this.TargetDatabaseName = targetDatabaseName;
            this.IsCancellable = isCancellable;
            this.ErrorCode = errorCode;
            this.ErrorDescription = errorDescription;
            this.ErrorSeverity = errorSeverity;
            this.IsUserError = isUserError;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the name of operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operation")]
        public string Operation {get; private set; }

        /// <summary>
        /// Gets the friendly name of operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operationFriendlyName")]
        public string OperationFriendlyName {get; private set; }

        /// <summary>
        /// Gets the operation start time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets the operation state. Possible values include: &#39;Pending&#39;, &#39;InProgress&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;CancelInProgress&#39;, &#39;Cancelled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; private set; }

        /// <summary>
        /// Gets operation mode. Possible values include: &#39;Move&#39;, &#39;Copy&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "operationMode")]
        public string OperationMode {get; private set; }

        /// <summary>
        /// Gets source Managed Instance name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceManagedInstanceName")]
        public string SourceManagedInstanceName {get; private set; }

        /// <summary>
        /// Gets target Managed Instance name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetManagedInstanceName")]
        public string TargetManagedInstanceName {get; private set; }

        /// <summary>
        /// Gets source Managed Instance resource id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceManagedInstanceId")]
        public string SourceManagedInstanceId {get; private set; }

        /// <summary>
        /// Gets target Managed instance resource id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetManagedInstanceId")]
        public string TargetManagedInstanceId {get; private set; }

        /// <summary>
        /// Gets source database name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceDatabaseName")]
        public string SourceDatabaseName {get; private set; }

        /// <summary>
        /// Gets target database name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDatabaseName")]
        public string TargetDatabaseName {get; private set; }

        /// <summary>
        /// Gets is move operation cancellable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isCancellable")]
        public bool? IsCancellable {get; private set; }

        /// <summary>
        /// Gets the operation error code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorCode")]
        public int? ErrorCode {get; private set; }

        /// <summary>
        /// Gets the operation error description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorDescription")]
        public string ErrorDescription {get; private set; }

        /// <summary>
        /// Gets the operation error severity.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errorSeverity")]
        public int? ErrorSeverity {get; private set; }

        /// <summary>
        /// Gets whether or not the error is a user error.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isUserError")]
        public bool? IsUserError {get; private set; }
    }
}