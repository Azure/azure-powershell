// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// A virtual network rule.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class VirtualNetworkRule : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the VirtualNetworkRule class.
        /// </summary>
        public VirtualNetworkRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualNetworkRule class.
        /// </summary>

        /// <param name="id">Resource ID.
        /// </param>

        /// <param name="name">Resource name.
        /// </param>

        /// <param name="type">Resource type.
        /// </param>

        /// <param name="virtualNetworkSubnetId">The ARM resource id of the virtual network subnet.
        /// </param>

        /// <param name="ignoreMissingVnetServiceEndpoint">Create firewall rule before the virtual network has vnet service endpoint
        /// enabled.
        /// </param>

        /// <param name="state">Virtual Network Rule State
        /// Possible values include: 'Initializing', 'InProgress', 'Ready', 'Failed',
        /// 'Deleting', 'Unknown'</param>
        public VirtualNetworkRule(string id = default(string), string name = default(string), string type = default(string), string virtualNetworkSubnetId = default(string), bool? ignoreMissingVnetServiceEndpoint = default(bool?), string state = default(string))

        : base(id, name, type)
        {
            this.VirtualNetworkSubnetId = virtualNetworkSubnetId;
            this.IgnoreMissingVnetServiceEndpoint = ignoreMissingVnetServiceEndpoint;
            this.State = state;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the ARM resource id of the virtual network subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.virtualNetworkSubnetId")]
        public string VirtualNetworkSubnetId {get; set; }

        /// <summary>
        /// Gets or sets create firewall rule before the virtual network has vnet
        /// service endpoint enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.ignoreMissingVnetServiceEndpoint")]
        public bool? IgnoreMissingVnetServiceEndpoint {get; set; }

        /// <summary>
        /// Gets virtual Network Rule State Possible values include: &#39;Initializing&#39;, &#39;InProgress&#39;, &#39;Ready&#39;, &#39;Failed&#39;, &#39;Deleting&#39;, &#39;Unknown&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.state")]
        public string State {get; private set; }
    }
}