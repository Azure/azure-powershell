// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a active directory administrator.
    /// </summary>
    public partial class AdministratorProperties
    {
        /// <summary>
        /// Initializes a new instance of the AdministratorProperties class.
        /// </summary>
        public AdministratorProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AdministratorProperties class.
        /// </summary>

        /// <param name="login">Login name of the server administrator.
        /// </param>

        /// <param name="sid">SID (object ID) of the server administrator.
        /// </param>

        /// <param name="tenantId">Tenant ID of the administrator.
        /// </param>

        /// <param name="azureAdOnlyAuthentication">Azure Active Directory only Authentication enabled.
        /// </param>
        public AdministratorProperties(string login, System.Guid sid, System.Guid? tenantId = default(System.Guid?), bool? azureAdOnlyAuthentication = default(bool?))

        {
            this.Login = login;
            this.Sid = sid;
            this.TenantId = tenantId;
            this.AzureAdOnlyAuthentication = azureAdOnlyAuthentication;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for AdministratorProperties class.
        /// </summary>
        static AdministratorProperties()
        {
            AdministratorType = "ActiveDirectory";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets login name of the server administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "login")]
        public string Login {get; set; }

        /// <summary>
        /// Gets or sets sID (object ID) of the server administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sid")]
        public System.Guid Sid {get; set; }

        /// <summary>
        /// Gets or sets tenant ID of the administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tenantId")]
        public System.Guid? TenantId {get; set; }

        /// <summary>
        /// Gets azure Active Directory only Authentication enabled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureADOnlyAuthentication")]
        public bool? AzureAdOnlyAuthentication {get; private set; }
        /// <summary>
        /// Gets or sets type of the sever administrator.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administratorType")]
        public static string AdministratorType {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Login == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Login");
            }


        }
    }
}