// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Sql.Models
{
    using System.Linq;

    /// <summary>
    /// Properties of a replication link.
    /// </summary>
    public partial class ReplicationLinkProperties
    {
        /// <summary>
        /// Initializes a new instance of the ReplicationLinkProperties class.
        /// </summary>
        public ReplicationLinkProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ReplicationLinkProperties class.
        /// </summary>

        /// <param name="partnerServer">Resource partner server.
        /// </param>

        /// <param name="partnerDatabase">Resource partner database.
        /// </param>

        /// <param name="partnerLocation">Resource partner location.
        /// </param>

        /// <param name="role">Local replication role.
        /// Possible values include: 'Primary', 'Secondary', 'NonReadableSecondary',
        /// 'Source', 'Copy'</param>

        /// <param name="partnerRole">Partner replication role.
        /// Possible values include: 'Primary', 'Secondary', 'NonReadableSecondary',
        /// 'Source', 'Copy'</param>

        /// <param name="replicationMode">Replication mode.
        /// </param>

        /// <param name="startTime">Time at which the link was created.
        /// </param>

        /// <param name="percentComplete">Seeding completion percentage for the link.
        /// </param>

        /// <param name="replicationState">Replication state (PENDING, SEEDING, CATCHUP, SUSPENDED).
        /// Possible values include: 'PENDING', 'SEEDING', 'CATCH_UP', 'SUSPENDED'</param>

        /// <param name="isTerminationAllowed">Whether the user is currently allowed to terminate the link.
        /// </param>

        /// <param name="linkType">Link type (GEO, NAMED, STANDBY).
        /// Possible values include: 'GEO', 'NAMED', 'STANDBY'</param>
        public ReplicationLinkProperties(string partnerServer = default(string), string partnerDatabase = default(string), string partnerLocation = default(string), ReplicationRole? role = default(ReplicationRole?), ReplicationRole? partnerRole = default(ReplicationRole?), string replicationMode = default(string), System.DateTime? startTime = default(System.DateTime?), int? percentComplete = default(int?), string replicationState = default(string), bool? isTerminationAllowed = default(bool?), string linkType = default(string))

        {
            this.PartnerServer = partnerServer;
            this.PartnerDatabase = partnerDatabase;
            this.PartnerLocation = partnerLocation;
            this.Role = role;
            this.PartnerRole = partnerRole;
            this.ReplicationMode = replicationMode;
            this.StartTime = startTime;
            this.PercentComplete = percentComplete;
            this.ReplicationState = replicationState;
            this.IsTerminationAllowed = isTerminationAllowed;
            this.LinkType = linkType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets resource partner server.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerServer")]
        public string PartnerServer {get; private set; }

        /// <summary>
        /// Gets resource partner database.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerDatabase")]
        public string PartnerDatabase {get; private set; }

        /// <summary>
        /// Gets resource partner location.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerLocation")]
        public string PartnerLocation {get; private set; }

        /// <summary>
        /// Gets local replication role. Possible values include: &#39;Primary&#39;, &#39;Secondary&#39;, &#39;NonReadableSecondary&#39;, &#39;Source&#39;, &#39;Copy&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "role")]
        public ReplicationRole? Role {get; private set; }

        /// <summary>
        /// Gets partner replication role. Possible values include: &#39;Primary&#39;, &#39;Secondary&#39;, &#39;NonReadableSecondary&#39;, &#39;Source&#39;, &#39;Copy&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "partnerRole")]
        public ReplicationRole? PartnerRole {get; private set; }

        /// <summary>
        /// Gets replication mode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicationMode")]
        public string ReplicationMode {get; private set; }

        /// <summary>
        /// Gets time at which the link was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets seeding completion percentage for the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentComplete")]
        public int? PercentComplete {get; private set; }

        /// <summary>
        /// Gets replication state (PENDING, SEEDING, CATCHUP, SUSPENDED). Possible values include: &#39;PENDING&#39;, &#39;SEEDING&#39;, &#39;CATCH_UP&#39;, &#39;SUSPENDED&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "replicationState")]
        public string ReplicationState {get; private set; }

        /// <summary>
        /// Gets whether the user is currently allowed to terminate the link.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isTerminationAllowed")]
        public bool? IsTerminationAllowed {get; private set; }

        /// <summary>
        /// Gets link type (GEO, NAMED, STANDBY). Possible values include: &#39;GEO&#39;, &#39;NAMED&#39;, &#39;STANDBY&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linkType")]
        public string LinkType {get; private set; }
    }
}