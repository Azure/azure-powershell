// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Sql
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ServerTrustCertificatesOperations
    /// </summary>
    public static partial class ServerTrustCertificatesOperationsExtensions
    {
        /// <summary>
        /// Gets a list of server trust certificates that were uploaded from box to the given Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ServerTrustCertificate> ListByInstance(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName)
        {
                return ((IServerTrustCertificatesOperations)operations).ListByInstanceAsync(resourceGroupName, managedInstanceName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of server trust certificates that were uploaded from box to the given Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ServerTrustCertificate>> ListByInstanceAsync(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByInstanceWithHttpMessagesAsync(resourceGroupName, managedInstanceName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a server trust certificate that was uploaded from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to get.
        /// </param>
        public static ServerTrustCertificate Get(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName)
        {
                return ((IServerTrustCertificatesOperations)operations).GetAsync(resourceGroupName, managedInstanceName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a server trust certificate that was uploaded from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to get.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ServerTrustCertificate> GetAsync(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, managedInstanceName, certificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Uploads a server trust certificate from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to upload.
        /// </param>
        public static ServerTrustCertificate CreateOrUpdate(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, ServerTrustCertificate parameters)
        {
                return ((IServerTrustCertificatesOperations)operations).CreateOrUpdateAsync(resourceGroupName, managedInstanceName, certificateName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Uploads a server trust certificate from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to upload.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ServerTrustCertificate> CreateOrUpdateAsync(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, ServerTrustCertificate parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, managedInstanceName, certificateName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to delete.
        /// </param>
        public static void Delete(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName)
        {
                ((IServerTrustCertificatesOperations)operations).DeleteAsync(resourceGroupName, managedInstanceName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, managedInstanceName, certificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Uploads a server trust certificate from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to upload.
        /// </param>
        public static ServerTrustCertificate BeginCreateOrUpdate(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, ServerTrustCertificate parameters)
        {
                return ((IServerTrustCertificatesOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, managedInstanceName, certificateName, parameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Uploads a server trust certificate from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to upload.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ServerTrustCertificate> BeginCreateOrUpdateAsync(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, ServerTrustCertificate parameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, managedInstanceName, certificateName, parameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to delete.
        /// </param>
        public static void BeginDelete(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName)
        {
                ((IServerTrustCertificatesOperations)operations).BeginDeleteAsync(resourceGroupName, managedInstanceName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes a server trust certificate that was uploaded from box to Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
        /// </param>
        /// <param name='managedInstanceName'>
        /// The name of the managed instance.
        /// </param>
        /// <param name='certificateName'>
        /// Name of of the certificate to delete.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IServerTrustCertificatesOperations operations, string resourceGroupName, string managedInstanceName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, managedInstanceName, certificateName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets a list of server trust certificates that were uploaded from box to the given Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ServerTrustCertificate> ListByInstanceNext(this IServerTrustCertificatesOperations operations, string nextPageLink)
        {
                return ((IServerTrustCertificatesOperations)operations).ListByInstanceNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a list of server trust certificates that were uploaded from box to the given Sql Managed Instance.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ServerTrustCertificate>> ListByInstanceNextAsync(this IServerTrustCertificatesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByInstanceNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
