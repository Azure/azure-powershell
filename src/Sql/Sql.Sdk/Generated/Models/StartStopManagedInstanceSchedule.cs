// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.Sql.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Managed instance's Start/Stop schedule.
    /// </summary>
    [Rest.Serialization.JsonTransformation]
    public partial class StartStopManagedInstanceSchedule : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the StartStopManagedInstanceSchedule
        /// class.
        /// </summary>
        public StartStopManagedInstanceSchedule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StartStopManagedInstanceSchedule
        /// class.
        /// </summary>
        /// <param name="scheduleList">Schedule list.</param>
        /// <param name="id">Resource ID.</param>
        /// <param name="name">Resource name.</param>
        /// <param name="type">Resource type.</param>
        /// <param name="systemData">System data of the scheduled
        /// resource.</param>
        /// <param name="description">The description of the schedule.</param>
        /// <param name="timeZoneId">The time zone of the schedule.</param>
        /// <param name="nextRunAction">Next action to be executed (Start or
        /// Stop)</param>
        /// <param name="nextExecutionTime">Timestamp when the next action will
        /// be executed in the corresponding schedule time zone.</param>
        public StartStopManagedInstanceSchedule(IList<ScheduleItem> scheduleList, string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string description = default(string), string timeZoneId = default(string), string nextRunAction = default(string), string nextExecutionTime = default(string))
            : base(id, name, type)
        {
            SystemData = systemData;
            Description = description;
            TimeZoneId = timeZoneId;
            ScheduleList = scheduleList;
            NextRunAction = nextRunAction;
            NextExecutionTime = nextExecutionTime;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets system data of the scheduled resource.
        /// </summary>
        [JsonProperty(PropertyName = "systemData")]
        public SystemData SystemData { get; private set; }

        /// <summary>
        /// Gets or sets the description of the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the time zone of the schedule.
        /// </summary>
        [JsonProperty(PropertyName = "properties.timeZoneId")]
        public string TimeZoneId { get; set; }

        /// <summary>
        /// Gets or sets schedule list.
        /// </summary>
        [JsonProperty(PropertyName = "properties.scheduleList")]
        public IList<ScheduleItem> ScheduleList { get; set; }

        /// <summary>
        /// Gets next action to be executed (Start or Stop)
        /// </summary>
        [JsonProperty(PropertyName = "properties.nextRunAction")]
        public string NextRunAction { get; private set; }

        /// <summary>
        /// Gets timestamp when the next action will be executed in the
        /// corresponding schedule time zone.
        /// </summary>
        [JsonProperty(PropertyName = "properties.nextExecutionTime")]
        public string NextExecutionTime { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ScheduleList == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ScheduleList");
            }
            if (ScheduleList != null)
            {
                foreach (var element in ScheduleList)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
