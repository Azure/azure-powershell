// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Sql.AdvancedThreatProtection.Services;
using Microsoft.Azure.Commands.Sql.Common;
using Microsoft.Azure.Commands.Sql.Properties;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services;
using Microsoft.Azure.Management.Internal.Resources.Utilities.Models;
using System;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Cmdlet
{
    /// <summary>
    /// The base class for set policy Azure Sql Database Vulnerability Assessment Management Cmdlet
    /// </summary>
    public abstract class SqlDatabaseVulnerabilityAssessmentAtpCmdletBase<M, A> : AzureSqlDatabaseCmdletBase<M, A> where A: BaseSqlVulnerabilityAssessmentAdapter
    {
        protected override M ApplyUserInputToModel(M model)
        {
            base.ApplyUserInputToModel(model);

            // Verify that ATP is ON - if ATP is off the GetServerAdvancedThreatProtectionPolicy() will throw a not found exception
            var sqlAdvancedThreatProtectionAdapter = new SqlAdvancedThreatProtectionAdapter(DefaultProfile.DefaultContext);
            var atpPolicy = sqlAdvancedThreatProtectionAdapter.GetServerAdvancedThreatProtectionPolicy(ResourceGroupName, ServerName);
            if (!atpPolicy.IsEnabled)
            {
                throw new Exception(Properties.Resources.ServerAdvancedThreatProtectionIsNotDefined);
            }

            return model;
        }

        /// <summary>
        /// Overriding to add warning message in case cmdlet is on master
        /// </summary>
        public override void ExecuteCmdlet()
        {
            if (DatabaseName.ToLower() == "master")
            {
                WriteWarning(Resources.VulnerabilityAssessmentOperationIsNotAvailableOnMasterDatabase);
                return;
            }

            base.ExecuteCmdlet();
        }
    }
}
