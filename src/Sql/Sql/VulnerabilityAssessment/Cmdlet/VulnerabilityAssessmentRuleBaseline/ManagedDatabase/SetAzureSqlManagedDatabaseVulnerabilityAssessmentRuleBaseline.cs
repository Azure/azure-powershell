// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using System.Management.Automation;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Cmdlet.VulnerabilityAssessmentRuleBaseline
{
    /// <summary>
    /// Sets the Vulnerability Assessment baseline properties for a specific rule.
    /// </summary>
    [Cmdlet("Set", ResourceManager.Common.AzureRMConstants.AzureRMPrefix + "SqlInstanceDatabaseVulnerabilityAssessmentRuleBaseline", SupportsShouldProcess = true), OutputType(typeof(ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel))]
    public class SetAzureSqlManagedDatabaseVulnerabilityAssessmentRuleBaseline : SqlVulnerabilityAssessmentAtpCmdletBase<ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel, SqlVulnerabilityAssessmentRuleBaselineAdapter>
    {
        protected const string SetByInputObjectParameterSet = "SetByInputObjectParameterSet";

        protected const string SetByNameParameterSet = "SetByNameParameterSet";

        /// <summary>
        /// Vulnerability Assessment rule baseline object to set
        /// </summary>
        [Parameter(ParameterSetName = SetByInputObjectParameterSet,
            Mandatory = true,
            ValueFromPipeline = true,
            HelpMessage = "The Vulnerability Assessment rule baseline object to set")]
        [ValidateNotNullOrEmpty]
        public ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel InputObject { get; set; }

        /// <summary>
        /// Gets or sets the Vulnerability Assessment Baseline result
        /// </summary>
        [Parameter(Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The results to set as baseline for the rule in all future scans")]
        [ValidateNotNullOrEmpty]
        public string[][] BaselineResult { get; set; }

        /// <summary>
        /// Gets or sets the name of the managed instance to use.
        /// </summary>
        [Parameter(ParameterSetName = SetByNameParameterSet,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 1,
            HelpMessage = "SQL Managed Instance name.")]
        [ValidateNotNullOrEmpty]
        public string InstanceName { get; set; }

        /// <summary>
        /// Gets or sets the name of the managed database to use.
        /// </summary>
        [Parameter(ParameterSetName = SetByNameParameterSet,
            Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            Position = 2,
            HelpMessage = "SQL Managed Database name.")]
        [ValidateNotNullOrEmpty]
        public string DatabaseName { get; set; }

        /// <summary>
        /// Gets or sets the rule ID which identifies the rule to set the baseline results to.
        /// </summary>
        [Parameter(Mandatory = true,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "The rule ID which identifies the rule to set the baseline results to.")]
        [ValidateNotNullOrEmpty]
        public string RuleId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the baseline results should apply on a server level rule identified by the RuleId
        /// </summary>
        [Parameter(Mandatory = false,
            ValueFromPipelineByPropertyName = true,
            HelpMessage = "Specifies whether the baseline results should apply on a server level rule identified by the RuleId")]
        public SwitchParameter RuleAppliesToMaster { get; set; }

        /// <summary>
        /// Creation and initialization of the ModelAdapter object
        /// </summary>
        /// <returns>An initialized and ready to use ModelAdapter object</returns>
        protected override SqlVulnerabilityAssessmentRuleBaselineAdapter InitModelAdapter()
        {
            return new SqlVulnerabilityAssessmentRuleBaselineAdapter(DefaultProfile.DefaultContext);
        }

        protected override string GetResourceGroupName()
        {
            if (string.Equals(this.ParameterSetName, SetByInputObjectParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel databaseInputObject = InputObject as ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel;

                if (databaseInputObject == null)
                {
                    throw new Exception(Properties.Resources.VulnerabilityAssessmentWrongParameterType);
                }

                return databaseInputObject.ResourceGroupName;
            }

            return base.GetResourceGroupName();
        }

        protected override string GetServerName()
        {
            if (string.Equals(this.ParameterSetName, SetByInputObjectParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel databaseInputObject = InputObject as ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel;

                if (databaseInputObject == null)
                {
                    throw new Exception(Properties.Resources.VulnerabilityAssessmentWrongParameterType);
                }

                return databaseInputObject.InstanceName;
            }

            return InstanceName;
        }

        protected override string GetDatabaseName()
        {
            if (string.Equals(this.ParameterSetName, SetByInputObjectParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel databaseInputObject = InputObject as ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel;

                if (databaseInputObject == null)
                {
                    throw new Exception(Properties.Resources.VulnerabilityAssessmentWrongParameterType);
                }

                return databaseInputObject.DatabaseName;
            }

            return DatabaseName;
        }

        protected override ApplyToType GetResourceTypeVaAppliesTo()
        {
            return ApplyToType.ManagedDatabase;
        }

        /// <summary>
        /// Updates the given model element with the cmdlet specific operation 
        /// </summary>
        /// <param name="model">A model object</param>
        protected override ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel ApplyUserInputToModel(ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel model)
        {
            base.ApplyUserInputToModel(model);

            if (string.Equals(this.ParameterSetName, SetByInputObjectParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                model.BaselineResult = InputObject.BaselineResult;
                model.RuleId = InputObject.RuleId;
                return model;
            }

            model.BaselineResult = new List<VulnerabilityAssessmentRuleBaselineRowModel>();
            foreach (var baselineResult in BaselineResult)
            {
                var ruleBaselineItem = new VulnerabilityAssessmentRuleBaselineRowModel()
                {
                    Result = baselineResult
                };

                model.BaselineResult.Add(ruleBaselineItem);
            }

            model.RuleId = RuleId;
            model.RuleAppliesToMaster = RuleAppliesToMaster.IsPresent;
            return model;
        }

        /// <summary>
        /// Provides the model element that this cmdlet operates on
        /// </summary>
        /// <returns>A model object</returns>
        protected override ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel GetEntity()
        {
            if (string.Equals(this.ParameterSetName, SetByInputObjectParameterSet, StringComparison.OrdinalIgnoreCase))
            {
                return InputObject;
            }

            // No need to get the entity from the backend
            var model = new VulnerabilityAssessmentRuleBaselineModel()
            {
                ResourceGroupName = ResourceGroupName,
                RuleId = RuleId,
                RuleAppliesToMaster = RuleAppliesToMaster.IsPresent
            };

            return new ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel(model, InstanceName, DatabaseName);
        }

        /// <summary>
        /// This method is responsible to call the right API in the communication layer that will eventually send the information in the 
        /// object to the REST endpoint
        /// </summary>
        /// <param name="model">The model object with the data to be sent to the REST endpoints</param>
        protected override ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel PersistChanges(ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel model)
        {
            ModelAdapter.SetVulnerabilityAssessmentRuleBaseline(model, GetServerName(), GetDatabaseName(), GetResourceTypeVaAppliesTo());
            return model;
        }


        /// <summary>
        /// Transforms the given model object to be an object that is written out
        /// </summary>
        /// <param name="model">The about to be written model object</param>
        /// <returns>The prepared object to be written out</returns>
        protected override object TransformModelToOutputObject(ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel model)
        {
            return new ManagedDatabaseVulnerabilityAssessmentRuleBaselineModel(model, GetServerName(), GetDatabaseName());
        }

    }
}
