// ----------------------------------------------------------------------------------
//
// Copyright Microsoft Corporation
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ----------------------------------------------------------------------------------

using Microsoft.Azure.Commands.Common.Authentication.Abstractions;
using Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model;
using Microsoft.Azure.Management.Sql.Models;
// TODO: Remove IfDef code
#if !NETSTANDARD
using Microsoft.WindowsAzure.Storage.Blob;
#endif
using System;
using System.Linq;

namespace Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Services
{
    /// <summary>
    /// The base SqlVulnerabilityAssessmentAdapter class is responsible for transforming the data that was received form the endpoints to the cmdlets model of vulnerability assessment and vice versa
    /// </summary>
    public class BaseSqlVulnerabilityAssessmentAdapter
    {
        /// <summary>
        /// Gets or sets the Azure subscription
        /// </summary>
        protected IAzureSubscription Subscription { get; set; }

        /// <summary>
        /// The Vulnerability Assessment endpoints communicator used by this adapter
        /// </summary>
        protected VulnerabilityAssessmentEndpointsCommunicator VulnerabilityAssessmentCommunicator { get; set; }

        /// <summary>
        /// Gets or sets the Azure profile
        /// </summary>
        public IAzureContext Context { get; set; }

        public BaseSqlVulnerabilityAssessmentAdapter(IAzureContext context)
        {
            Context = context;
            Subscription = context?.Subscription;
            VulnerabilityAssessmentCommunicator = new VulnerabilityAssessmentEndpointsCommunicator(Context);
        }

        /// <summary>
        /// Provides a Vulnerability Assessment settings model for the given database
        /// </summary>
        public VulnerabilityAssessmentSettingsModel GetVulnerabilityAssessmentSettings(string resourceGroup, string serverName, string databaseName, ApplyToType applyToType)
        {
            switch (applyToType)
            {
                case ApplyToType.Database:
                    var vaDbSettings = VulnerabilityAssessmentCommunicator.GetDatabaseVulnerabilityAssessmentSettings(resourceGroup, serverName, databaseName);
                    return ConvertSettingsToModel(resourceGroup, vaDbSettings.RecurringScans, vaDbSettings.StorageContainerPath);
                case ApplyToType.ManagedDatabase:
                    var vaManagedDbSettings = VulnerabilityAssessmentCommunicator.GetManagedDatabaseVulnerabilityAssessmentSettings(resourceGroup, serverName, databaseName);
                    return ConvertSettingsToModel(resourceGroup, vaManagedDbSettings.RecurringScans, vaManagedDbSettings.StorageContainerPath);
                case ApplyToType.Server:
                    var vaServerSettings = VulnerabilityAssessmentCommunicator.GetServerVulnerabilityAssessmentSettings(resourceGroup, serverName);
                    return ConvertSettingsToModel(resourceGroup, vaServerSettings.RecurringScans, vaServerSettings.StorageContainerPath);
                case ApplyToType.ManagedInstance:
                    var vaManagedInstanceSettings = VulnerabilityAssessmentCommunicator.GetManagedInstanceVulnerabilityAssessmentSettings(resourceGroup, serverName);
                    return ConvertSettingsToModel(resourceGroup, vaManagedInstanceSettings.RecurringScans, vaManagedInstanceSettings.StorageContainerPath);
                default:
                    throw new Exception(Properties.Resources.VulnerabilityAssessmentTypeNotSupported);
            }
        }

        /// <summary>
        /// Provides a Vulnerability Assessment settings model for the given database
        /// </summary>
        public VulnerabilityAssessmentSettingsModel ConvertSettingsToModel(string resourceGroup, VulnerabilityAssessmentRecurringScansProperties recurringScans, string storageContainerPath)
        {
            if (recurringScans == null)
            {
                // This should never happen
                recurringScans = new VulnerabilityAssessmentRecurringScansProperties
                {
                    IsEnabled = false,
                    EmailSubscriptionAdmins = true,
                    Emails = null
                };
            }

            // Getting storage info from StorageContainerPath
            var storageAccountName = string.Empty;
            var storageBlobContainerName = string.Empty;
            if (!string.IsNullOrEmpty(storageContainerPath))
            {
                // StorageContainerPath is in the format of : "https://va1storage.blob.core.windows.net/vulnerability-assessment"
                var storageAccountNamePart = storageContainerPath.Split(new[] { "https://" }, StringSplitOptions.RemoveEmptyEntries)[0];
                if (!string.IsNullOrEmpty(storageAccountNamePart))
                {
                    storageAccountName = storageAccountNamePart.Split(new[] { "." }, StringSplitOptions.RemoveEmptyEntries)[0];
                }

                storageBlobContainerName = storageContainerPath.Split(new[] { "/" }, StringSplitOptions.RemoveEmptyEntries).LastOrDefault();
            }

            var vulnerabilityAssessmentSettingsModel = new VulnerabilityAssessmentSettingsModel
            {
                ResourceGroupName = resourceGroup,
                StorageAccountName = storageAccountName,
                ScanResultsContainerName = storageBlobContainerName,
                RecurringScansInterval = recurringScans.IsEnabled.Value
                    ? RecurringScansInterval.Weekly
                    : RecurringScansInterval.None,
                EmailAdmins = recurringScans.EmailSubscriptionAdmins.Value,
                NotificationEmail = recurringScans.Emails?.ToArray()
            };

            return vulnerabilityAssessmentSettingsModel;
        }
    }
}
