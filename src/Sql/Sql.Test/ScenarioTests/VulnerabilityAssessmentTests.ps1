# ----------------------------------------------------------------------------------
#
# Copyright Microsoft Corporation
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------------

<#
.SYNOPSIS
Tests for vulnerability assessment server settings scenarios 
#>
function Test-VulnerabilityAssessmentServerSettingsTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	$serverLogin = "testusername"
	<#[SuppressMessage("Microsoft.Security", "CS002:SecretInNextLine", Justification="Test passwords only valid for the duration of the test")]#>
	$serverPassword = "t357ingP@s5w0rd!Sec"
	$credentials = new-object System.Management.Automation.PSCredential($serverLogin, ($serverPassword | ConvertTo-SecureString -asPlainText -Force))
	$location = "West Central US"
	$serverVersion = "12.0"

	try
	{
		# Turn on ATP
		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment

		Assert-ThrowsContains -script { Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		 -StorageAccountName $params.storageAccount -EmailAdmins $true -NotificationEmail @("invalidMail") -RecurringScansInterval Weekly } `
		 -message "One or more of the email addresses you entered are not valid.."

		Assert-ThrowsContains -script { Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		 -BlobStorageSasUri "https://invalid.blob.core.windows.netXXXXXXXXXXXXXXX"} `
		 -message "Invalid BlobStorageSasUri parameter value. The value should be in format of https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX."

		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
			 -StorageAccountName $params.storageAccount

		# Get Vulnerability Assessment settings
		$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName 
		
		# Validate the settings
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $settings.StorageAccountName	
		Assert-AreEqual None $settings.RecurringScansInterval
		Assert-AreEqual $true $settings.EmailAdmins
		Assert-AreEqualArray @() $settings.NotificationEmail

		# Set Vulnerability Assessment settings with all optional values (SetSettingsWithStorageAccountNameParameterSet parameter set)
		$testEmailAdmins = $true
		$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::Weekly

		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
			  -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
			  -NotificationEmail $testNotificationEmail

		# Get Vulnerability Assessment settings
		$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName 

		# Validate the settings
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-AreEqualArray $testNotificationEmail $settings.NotificationEmail

		# Clear the settings
		Clear-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName

		# Test Get and expect a default policy
		$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName

		# Validate settings are default policy
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual "" $settings.ScanResultsContainerName
		Assert-AreEqual "" $settings.StorageAccountName	
		Assert-AreEqual None $settings.RecurringScansInterval
		Assert-AreEqual $true $settings.EmailAdmins
		Assert-Null $settings.NotificationEmail

		# Update Vulnerability Assessment settings with all optional values (UpdateSettingsWithBlobStorageSasUri parameter set)
		$testScanResultsContainerName = "custom-container"
		$testStorageName = "storage1"
		$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::None

		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		 -BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
		 -NotificationEmail $testNotificationEmail
		
		# Test piping of set settings from resource object
		$newServerName = "newservername" +$testSuffix;
		$testNewNotificationEmail = @("test3@mailTest.com", "test4@mailTest.com")
		$testStorageName = $params.storageAccount
		$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::None

		New-AzSqlServer -ResourceGroupName $params.rgname -ServerName $newServerName -Location $location -ServerVersion $serverVersion -SqlAdministratorCredentials $credentials

		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $newServerName -DoNotConfigureVulnerabilityAssessment

		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $newServerName `
		 -BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
		 -NotificationEmail $testNewNotificationEmail

    	Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $newServerName | Update-AzSqlServerVulnerabilityAssessmentSetting `
			 -ResourceGroupName $params.rgname -ServerName $params.serverName
		$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName 

		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerName
		Assert-AreEqual $testStorageName $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail

		# Test piping of get settings from parent object
		$settings = Get-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Get-AzSqlServerVulnerabilityAssessmentSetting 
		 
		# Validate the settings
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerName
		Assert-AreEqual $testStorageName $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail

		# Test piping of clear settings from resource object
		$settings = Get-AzSqlServer -ResourceGroupName $params.rgname -ServerName $params.serverName | Clear-AzSqlServerVulnerabilityAssessmentSetting 
		 
		# Validate settings are null
		Assert-Null $settings

		# Test setting recurring scans without providing email addresses
		$testEmailAdmins = $false
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::Weekly
		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
			  -StorageAccountName $params.storageAccount -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins

		# Validate the settings
		$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName 
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $params.storageAccount $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-Null $settings.NotificationEmail

		# Clear the settings again
		Clear-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName

		# Test WhatIf parameter of Update-AzSqlDatabaseVulnerabilityAssessmentSetting
		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		  -StorageAccountName $params.storageAccount -WhatIf
		
		# See that a default policy is returned because set settings was run with WhatIf
		$settings = Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName

		# Validate settings are default policy
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual "" $settings.ScanResultsContainerName
		Assert-AreEqual "" $settings.StorageAccountName	
		Assert-AreEqual None $settings.RecurringScansInterval
		Assert-AreEqual $true $settings.EmailAdmins
		Assert-Null $settings.NotificationEmail

		# Test WhatIf parameter of Clear-AzSqlDatabaseVulnerabilityAssessmentSetting
		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		 -BlobStorageSasUri $testBlobStorageSasUri

		Clear-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-WhatIf
		
		# See no exception is thrown because clear was run with WhatIf
		Get-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests that we get a "Vulnerability Assessment settings not defined" error for all vulnerability assessment cmdlets 
#>
function Test-VulnerabilityAssessmentWithSettingsNotDefinedTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		$ruleId = "VA2031"
		$scanId = "myCustomScanId"
		$baselineResults = @(@("userA", "SELECT"),@("userB", "SELECT"))
		
		# Turn on ATP
		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment

		# Baseline related cmdlets
		Assert-Throws { Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -BaselineResult $baselineResults }

		Assert-Throws { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId }

		Assert-Throws { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId }

		# Scan related cmdlets
		Assert-Throws { Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId }

		Assert-Throws { Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId }

		Assert-Throws { Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId }
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment settings scenarios 
#>
function Test-VulnerabilityAssessmentSettingsTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment

		Assert-ThrowsContains -script { Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -StorageAccountName $params.storageAccount -EmailAdmins $true -NotificationEmail @("invalidMail") -RecurringScansInterval Weekly } `
		 -message "One or more of the email addresses you entered are not valid.."

		Assert-ThrowsContains -script { Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -BlobStorageSasUri "https://invalid.blob.core.windows.netXXXXXXXXXXXXXXX"} `
		 -message "Invalid BlobStorageSasUri parameter value. The value should be in format of https://mystorage.blob.core.windows.net/vulnerability-assessment?st=XXXXXX."

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
			 -StorageAccountName $params.storageAccount

		# Get Vulnerability Assessment settings
		$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 
		
		# Validate the settings
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $params.databaseName $settings.DatabaseName
		Assert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $settings.StorageAccountName	
		Assert-AreEqual None $settings.RecurringScansInterval
		Assert-AreEqual $true $settings.EmailAdmins
		Assert-AreEqualArray @() $settings.NotificationEmail

		# Set Vulnerability Assessment settings with all optional values (SetSettingsWithStorageAccountNameParameterSet parameter set)
		$testEmailAdmins = $true
		$testNotificationEmail = @("test1@mailTest.com", "test2@mailTest.com")
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::Weekly

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
			  -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
			  -NotificationEmail $testNotificationEmail

		# Get Vulnerability Assessment settings
		$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 

		# Validate the settings
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $params.databaseName $settings.DatabaseName
		Assert-AreEqual "vulnerability-assessment" $settings.ScanResultsContainerName
		Assert-AreEqual $params.storageAccount $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-AreEqualArray $testNotificationEmail $settings.NotificationEmail

		# Clear the settings
		Clear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		# Test Get and expect a default policy
		$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		# Validate settings are default policy
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual "" $settings.ScanResultsContainerName
		Assert-AreEqual "" $settings.StorageAccountName	
		Assert-AreEqual None $settings.RecurringScansInterval
		Assert-AreEqual $true $settings.EmailAdmins
		Assert-Null $settings.NotificationEmail

		# Update Vulnerability Assessment settings with all optional values (UpdateSettingsWithBlobStorageSasUri parameter set)
		$testScanResultsContainerName = "custom-container"
		$testStorageName = "storage1"
		$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::None

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
		 -NotificationEmail $testNotificationEmail
		
		# Test piping of set settings from resource object
		$newDatabaseName = "newDatabaseName";
		$testNewNotificationEmail = @("test3@mailTest.com", "test4@mailTest.com")
		$testStorageName = $params.storageAccount
		$testBlobStorageSasUri = "https://" + $testStorageName +".blob.core.windows.net/" + $testScanResultsContainerName + "?st=XXXXXXXXXXXXXXX"
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::None

		New-AzSqlDatabase -DatabaseName $newDatabaseName -ResourceGroupName $params.rgname -ServerName $params.serverName -Edition Basic 

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $newDatabaseName `
		 -BlobStorageSasUri $testBlobStorageSasUri -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins `
		 -NotificationEmail $testNewNotificationEmail

    	Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $newDatabaseName | Update-AzSqlDatabaseVulnerabilityAssessmentSetting `
			 -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName
		$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 

		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $params.databaseName $settings.DatabaseName
		Assert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerName
		Assert-AreEqual $testStorageName $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail

		# Test piping of get settings from parent object
		$settings = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentSetting 
		 
		# Validate the settings
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $params.databaseName $settings.DatabaseName
		Assert-AreEqual $testScanResultsContainerName $settings.ScanResultsContainerName
		Assert-AreEqual $testStorageName $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-AreEqualArray $testNewNotificationEmail $settings.NotificationEmail

		# Test piping of clear settings from resource object
		$settings = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Clear-AzSqlDatabaseVulnerabilityAssessmentSetting 
		 
		# Validate settings are null
		Assert-Null $settings

		# Test setting recurring scans without providing email addresses
		$testEmailAdmins = $false
		$testRecurringScansInterval = [Microsoft.Azure.Commands.Sql.VulnerabilityAssessment.Model.RecurringScansInterval]::Weekly
		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
			  -StorageAccountName $params.storageAccount -RecurringScansInterval $testRecurringScansInterval -EmailAdmins $testEmailAdmins

		# Validate the settings
		$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual $params.databaseName $settings.DatabaseName
		Assert-AreEqual $params.storageAccount $settings.StorageAccountName	
		Assert-AreEqual $testRecurringScansInterval $settings.RecurringScansInterval
		Assert-AreEqual $testEmailAdmins $settings.EmailAdmins
		Assert-Null $settings.NotificationEmail

		# Clear the settings again
		Clear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		# Test WhatIf parameter of Update-AzSqlDatabaseVulnerabilityAssessmentSetting
		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		  -StorageAccountName $params.storageAccount -WhatIf
		
		# See that a default policy is returned because set settings was run with WhatIf
		$settings = Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		# Validate settings are default policy
		Assert-AreEqual $params.rgname $settings.ResourceGroupName
		Assert-AreEqual $params.serverName $settings.ServerName
		Assert-AreEqual "" $settings.ScanResultsContainerName
		Assert-AreEqual "" $settings.StorageAccountName	
		Assert-AreEqual None $settings.RecurringScansInterval
		Assert-AreEqual $true $settings.EmailAdmins
		Assert-Null $settings.NotificationEmail

		# Test WhatIf parameter of Clear-AzSqlDatabaseVulnerabilityAssessmentSetting
		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		 -BlobStorageSasUri $testBlobStorageSasUri

		Clear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-WhatIf
		
		# See no exception is thrown because clear was run with WhatIf
		Get-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment baseline scenarios 
#>
function Test-VulnerabilityAssessmentBaselineTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
			 -StorageAccountName $params.storageAccount

		$ruleId = "VA2108"

		# Get and remove baseline for non existing baseline
		$baselineDoesntExistsErrorMessage = "Baseline does not exist for rule 'VA2108'."
		Assert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		Assert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		# Set baseline
		$baselineToSet = @( 'Principal1', 'db_ddladmin', 'SQL_USER', 'None'), @( 'Principal2', 'db_ddladmin', 'SQL_USER', 'None')
		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet
		
		# Get baseline and compare with what we sent
		$baseline = Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId

		Assert-AreEqual $params.rgname $baseline.ResourceGroupName
		Assert-AreEqual $params.serverName $baseline.ServerName
		Assert-AreEqual $params.databaseName $baseline.DatabaseName
		Assert-AreEqual $ruleId $baseline.RuleId
		Assert-AreEqual $false $baseline.RuleAppliesToMaster
		Assert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].Result
		Assert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result

		# Set baseline
		$baselineToSet = @( 'Principal3', 'db_ddladmin', 'SQL_USER', 'None'), @( 'Principal4', 'db_ddladmin', 'SQL_USER', 'None')
		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet
		
		# Get baseline and compare with what we sent
		$baseline = Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId

		Assert-AreEqual $params.rgname $baseline.ResourceGroupName
		Assert-AreEqual $params.serverName $baseline.ServerName
		Assert-AreEqual $params.databaseName $baseline.DatabaseName
		Assert-AreEqual $ruleId $baseline.RuleId
		Assert-AreEqual $false $baseline.RuleAppliesToMaster
		Assert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].Result
		Assert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result

		# Clear baseline
		Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId

		# Get and remove baseline for non existing baseline
		Assert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		Assert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		# Test RuleAppliesToMaster parameter
		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet

		# We expect no baseline to be found on the master
		Assert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -RuleAppliesToMaster } -message $baselineDoesntExistsErrorMessage

		Assert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -RuleAppliesToMaster} -message $baselineDoesntExistsErrorMessage

		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -RuleAppliesToMaster -BaselineResult $baselineToSet

		$baseline = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName`
		| Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -RuleId $ruleId -RuleAppliesToMaster
		Assert-AreEqual $params.rgname $baseline.ResourceGroupName
		Assert-AreEqual $params.serverName $baseline.ServerName
		Assert-AreEqual $params.databaseName $baseline.DatabaseName
		Assert-AreEqual $ruleId $baseline.RuleId
		Assert-AreEqual $true $baseline.RuleAppliesToMaster
		Assert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].Result
		Assert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result

		Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -RuleAppliesToMaster

		# piping scenario
		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet
		
		Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId | Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline

		$baseline = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline `
		-RuleId $ruleId
		Assert-AreEqual $params.rgname $baseline.ResourceGroupName
		Assert-AreEqual $params.serverName $baseline.ServerName
		Assert-AreEqual $params.databaseName $baseline.DatabaseName
		Assert-AreEqual $ruleId $baseline.RuleId
		Assert-AreEqual $false $baseline.RuleAppliesToMaster
		Assert-AreEqualArray $baselineToSet[0] $baseline.BaselineResult[0].Result
		Assert-AreEqualArray $baselineToSet[1] $baseline.BaselineResult[1].Result

		Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline `
		-RuleId $ruleId
		Assert-ThrowsContains -script { Get-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		# Test WhatIf parameter of Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline
		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet -WhatIf
		
		# See that exception is thrown because set settings was run with WhatIf
		Assert-ThrowsContains -script { Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId } -message $baselineDoesntExistsErrorMessage

		# Test WhatIf parameter of Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline
		Set-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId -BaselineResult $baselineToSet

		Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -RuleId $ruleId -WhatIf
		
		# See no exception is thrown because clear was run with WhatIf
		Clear-AzSqlDatabaseVulnerabilityAssessmentRuleBaseline -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-RuleId $ruleId
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment scan , scan record get and list scenarios 
#>
function Test-VulnerabilityAssessmentScanRecordGetListTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
			 -StorageAccountName $params.storageAccount
	
		# Trigger scan without scan ID
		try
		{
			Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 
		}
		catch
		{
			if ((Get-SqlTestMode) -eq 'Playback')
			{
				# This command generated a scanId of DateTime.UtcNow.ToString("yyyyMMdd_HHmmss")
				# So the recording will always fail
			}
			else
			{
				throw;
			}
		}

		# Trigger scan  as a Job with scan ID
		$scanId1 = "cmdletGetListScan"
		$scanJob = Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId1 -AsJob
		$scanJob | Wait-Job
		$scanRecord1 = $scanJob | Receive-Job

		# Validate the scan record that we got from the scan
		Assert-AreEqual $params.rgname $scanRecord1.ResourceGroupName
		Assert-AreEqual $params.serverName $scanRecord1.ServerName 
		Assert-AreEqual $params.databaseName $scanRecord1.DatabaseName 
		Assert-AreEqual $scanId1 $scanRecord1.ScanId
		Assert-AreEqual "OnDemand" $scanRecord1.TriggerType

		# Validate the scan record that we got from the get scan record cmdlet
		$scanRecord1FromGet = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName -ScanId $scanId1

		Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupName
		Assert-AreEqual $scanRecord1FromGet.ServerName $scanRecord1.ServerName
		Assert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseName
		Assert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanId
		Assert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerType
		Assert-AreEqual $scanRecord1FromGet.State $scanRecord1.State
		Assert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTime
		Assert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTime
		Assert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.Errors
		Assert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPath
		Assert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks

		# Validate the scan record that we got from the get scan record cmdlet with piping
		$scanRecord1FromGet = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord `
		-ScanId $scanId1

		Assert-AreEqual $scanRecord1FromGet.ResourceGroupName $scanRecord1.ResourceGroupName
		Assert-AreEqual $scanRecord1FromGet.ServerName $scanRecord1.ServerName
		Assert-AreEqual $scanRecord1FromGet.DatabaseName $scanRecord1.DatabaseName
		Assert-AreEqual $scanRecord1FromGet.ScanId $scanRecord1.ScanId
		Assert-AreEqual $scanRecord1FromGet.TriggerType $scanRecord1.TriggerType
		Assert-AreEqual $scanRecord1FromGet.State $scanRecord1.State
		Assert-AreEqual $scanRecord1FromGet.StartTime $scanRecord1.StartTime
		Assert-AreEqual $scanRecord1FromGet.EndTime $scanRecord1.EndTime
		Assert-AreEqual $scanRecord1FromGet.Errors $scanRecord1.Errors
		Assert-AreEqual $scanRecord1FromGet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPath
		Assert-AreEqual $scanRecord1FromGet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks

		# Verify list scans
		$excpectedScanCount = 2
		$scanRecordList = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName 
		Assert-AreEqual $excpectedScanCount $scanRecordList.Count

		$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]
		Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupName
		Assert-AreEqual $scanRecord1FromListCmdlet.ServerName $scanRecord1.ServerName
		Assert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseName
		Assert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanId
		Assert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerType
		Assert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.State
		Assert-AreEqual $scanRecord1FromListCmdlet.StartTime $scanRecord1.StartTime
		Assert-AreEqual $scanRecord1FromListCmdlet.EndTime $scanRecord1.EndTime
		Assert-AreEqual $scanRecord1FromListCmdlet.Errors $scanRecord1.Errors
		Assert-AreEqual $scanRecord1FromListCmdlet.ScanResultsLocationPath $scanRecord1.ScanResultsLocationPath
		Assert-AreEqual $scanRecord1FromListCmdlet.NumberOfFailedSecurityChecks $scanRecord1.NumberOfFailedSecurityChecks

		# Run scan with piping
		$excpectedScanCount = $excpectedScanCount + 1
		Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		| Start-AzSqlDatabaseVulnerabilityAssessmentScan -ScanId $scanId1

		# Verify list scans with piping
		$scanRecordList = Get-AzSqlDatabase -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName | Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord 
		Assert-AreEqual $excpectedScanCount $scanRecordList.Count

		$scanRecord1FromListCmdlet = $scanRecordList[$excpectedScanCount-1]
		Assert-AreEqual $scanRecord1FromListCmdlet.ResourceGroupName $scanRecord1.ResourceGroupName
		Assert-AreEqual $scanRecord1FromListCmdlet.ServerName $scanRecord1.ServerName
		Assert-AreEqual $scanRecord1FromListCmdlet.DatabaseName $scanRecord1.DatabaseName
		Assert-AreEqual $scanRecord1FromListCmdlet.ScanId $scanRecord1.ScanId
		Assert-AreEqual $scanRecord1FromListCmdlet.TriggerType $scanRecord1.TriggerType
		Assert-AreEqual $scanRecord1FromListCmdlet.State $scanRecord1.State


		# Test WhatIf parameter of Start-AzSqlDatabaseVulnerabilityAssessmentScan
		$scanRecordList = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName
		$scansCount = $scanRecordList.Count

		Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-WhatIf

		# Verify no new scan was made
		$scanRecordList = Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName
		Assert-AreEqual $scansCount $scanRecordList.Count
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Tests for vulnerability assessment scan Convert scenarios 
#>
function Test-VulnerabilityAssessmentScanConvertTest
{
	# Setup
	$testSuffix = getAssetName
	Create-VulnerabilityAssessmentTestEnvironment $testSuffix
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix

	try
	{
		# Turn on ATP
		Enable-AzSqlServerAdvancedThreatProtection -ResourceGroupName $params.rgname -ServerName $params.serverName -DoNotConfigureVulnerabilityAssessment

		Update-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
			 -StorageAccountName $params.storageAccount

		# Convert scan without providing scan ID
		Assert-ThrowsContains -script { Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName `
		-DatabaseName $params.databaseName } -message "ScanId is a required parameter for this cmdlet. Please explicitly provide it or pass the Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord output via pipe."

		# Trigger a new scan
		$scanId = "cmdletConvertScan"
		Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId

		# Convert the scan
		$convertScanObject = Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-ScanId $scanId
	
		Assert-AreEqual $params.rgname $convertScanObject.ResourceGroupName
		Assert-AreEqual $params.serverName $convertScanObject.ServerName
		Assert-AreEqual $params.databaseName $convertScanObject.DatabaseName
		Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($scanId) }
		Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($params.storageAccount) }

		# Convert the scan (piping scenario)
		$scanId = "cmdletConvertScan1"
		Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId

		$convertScanObject =  Get-AzSqlDatabaseVulnerabilityAssessmentScanRecord -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-ScanId $scanId | Convert-AzSqlDatabaseVulnerabilityAssessmentScan
	
		Assert-AreEqual $params.rgname $convertScanObject.ResourceGroupName
		Assert-AreEqual $params.serverName $convertScanObject.ServerName
		Assert-AreEqual $params.databaseName $convertScanObject.DatabaseName
		Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($scanId) }
		Assert-True -script  { $convertScanObject.ExportedReportLocation.Contains($params.storageAccount) }

		# Test WhatIf parameter of Convert-AzSqlDatabaseVulnerabilityAssessmentScan
		$convertScanObject = Convert-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName `
		-ScanId $scanId -WhatIf
		Assert-Null $convertScanObject.ExportedReportLocation

		# Clear database settings and define server settings
		Clear-AzSqlDatabaseVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName

		Update-AzSqlServerVulnerabilityAssessmentSetting -ResourceGroupName $params.rgname -ServerName $params.serverName -StorageAccountName $params.storageAccount

		# Run a scan and see that no exception is thrown
		Start-AzSqlDatabaseVulnerabilityAssessmentScan -ResourceGroupName $params.rgname -ServerName $params.serverName -DatabaseName $params.databaseName -ScanId $scanId
	}
	finally
	{
		# Cleanup
		Remove-VulnerabilityAssessmentTestEnvironment $testSuffix
	}
}

<#
.SYNOPSIS
Creates the test environment needed to perform the tests
#>
function Create-VulnerabilityAssessmentTestEnvironment ($testSuffix, $location = "West Central US", $serverVersion = "12.0")
{
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix
	Create-TestEnvironmentWithParams $params $location $serverVersion
}

<#
.SYNOPSIS
Gets the values of the parameters used at the tests
#>
function Get-SqlVulnerabilityAssessmentTestEnvironmentParameters ($testSuffix)
{
	return @{ rgname = "sql-va-cmdlet-test-rg" +$testSuffix;
			  serverName = "sql-va-cmdlet-server" +$testSuffix;
			  databaseName = "sql-va-cmdlet-db" + $testSuffix;
			  storageAccount = "sqlvacmdlets" +$testSuffix
		}
}

<#
.SYNOPSIS
Removes the test environment that was needed to perform the tests
#>
function Remove-VulnerabilityAssessmentTestEnvironment ($testSuffix)
{
	$params = Get-SqlVulnerabilityAssessmentTestEnvironmentParameters $testSuffix
	Remove-AzResourceGroup -Name $params.rgname -Force
}