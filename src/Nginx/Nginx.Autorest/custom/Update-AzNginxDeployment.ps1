
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update the NGINX deployment
.Description
Update the NGINX deployment
.Example
Update-AzNginxDeployment -Name nginx-test -ResourceGroupName nginx-test-rg -EnableDiagnosticsSupport
.Example
Update-AzNginxDeployment -Name nginx-test -ResourceGroupName nginx-test-rg -EnableDiagnosticsSupport:$false

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxDeployment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AUTOSCALESETTINGPROFILE <IScaleProfile[]>: .
  CapacityMax <Int32>: The maximum number of NCUs the deployment can be autoscaled to.
  CapacityMin <Int32>: The minimum number of NCUs the deployment can be autoscaled to.
  Name <String>: 

INPUTOBJECT <INginxIdentity>: Identity Parameter
  [CertificateName <String>]: The name of certificate
  [ConfigurationName <String>]: The name of configuration, only 'default' is supported value due to the singleton of NGINX conf
  [DeploymentName <String>]: The name of targeted NGINX deployment
  [Id <String>]: Resource identity path
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.nginx/update-aznginxdeployment
#>
function Update-AzNginxDeployment {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxDeployment])]
    [CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
        [Alias('DeploymentName')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
        [System.String]
        # The name of targeted NGINX deployment
        ${Name},

        [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
        [System.String]
        # The name of the resource group.
        # The name is case insensitive.
        ${ResourceGroupName},

        [Parameter(ParameterSetName='UpdateExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
        [System.String]
        # The ID of the target subscription.
        ${SubscriptionId},

        [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxIdentity]
        # Identity Parameter
        ${InputObject},

        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.IScaleProfile[]]
        # .
        ${AutoScaleSettingProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String]
        # Channel used for autoupgrade.
        ${AutoUpgradeProfileUpgradeChannel},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # .
        ${EnableDiagnosticsSupport},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.Nullable[System.Boolean]]
        # Determines whether to enable a system-assigned identity for the resource.
        ${EnableSystemAssignedIdentity},
        
        [Parameter()]
        [AllowEmptyCollection()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String[]]
        # The array of user assigned identities associated with the resource.
        # The elements in array will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.'
        ${UserAssignedIdentity},
        
        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String]
        # .
        ${Location},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxNetworkProfile]
        # .
        ${NetworkProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.Int32]
        # .
        ${ScalingPropertyCapacity},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String]
        # Name of the SKU.
        ${SkuName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String]
        # .
        ${StorageAccountContainerName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String]
        # .
        ${StorageAccountName},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxDeploymentTags]))]
        [System.Collections.Hashtable]
        # Dictionary of <string>
        ${Tag},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
        [System.String]
        # The preferred support contact email address of the user used for sending alerts and notification.
        # Can be an empty string or a valid email address.
        ${UserProfilePreferredEmail},

        [Parameter()]
        [Alias('AzureRMContext', 'AzureCredential')]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Azure')]
        [System.Management.Automation.PSObject]
        # The DefaultProfile parameter is not functional.
        # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
        ${DefaultProfile},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    process {
        if ($PSBoundParameters.ContainsKey('EnableSystemAssignedIdentity') -or $PSBoundParameters.ContainsKey('UserAssignedIdentity') ) {
            # Get Deployment
            $parameterSet = $PSCmdlet.ParameterSetName
            if (('UpdateExpanded') -contains $parameterSet) {
                $Name = $PSBoundParameters.Name
                $ResourceGroupName = $PSBoundParameters.ResourceGroupName
                $SubscriptionId = $PSBoundParameters.SubscriptionId
                $deployment = Az.Nginx.private\Get-AzNginxDeployment -Name $Name -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
            }
            elseif (('UpdateViaIdentityExpanded') -contains $parameterSet) {
                $Name = $PSBoundParameters.InputObject.DeploymentName
                $ResourceGroupName = $PSBoundParameters.InputObject.ResourceGroupName
                $SubscriptionId = $PSBoundParameters.InputObject.SubscriptionId
                $deployment = Az.Nginx.private\Get-AzNginxDeployment -Name $Name -ResourceGroupName $ResourceGroupName -SubscriptionId $SubscriptionId
            }

            if ($null -eq $deployment) {
                throw "NGINX deployment '$Name' was not found in resource group '$ResourceGroupName' in subscription '$SubscriptionId'. Please verify the deployment name and resource group are correct."
            }

            # If user input UserAssignedIdentity
            if ($PSBoundParameters.ContainsKey('UserAssignedIdentity')) {
                $userIdentityObject = [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.IdentityPropertiesUserAssignedIdentities]::New()
                $PSBoundParameters.IdentityUserAssignedIdentity = @{}
                foreach ($item in $PSBoundParameters.UserAssignedIdentity) {
                    $PSBoundParameters.IdentityUserAssignedIdentity.Add($item, $userIdentityObject )
                }
        
                if ($deployment.IdentityUserAssignedIdentity.Count -gt 0) {
                    $deployment.IdentityUserAssignedIdentity.Keys | ForEach-Object {
                        if (-NOT($_ -in $UserAssignedIdentity)) {
                        $PSBoundParameters.IdentityUserAssignedIdentity.Add($_, $null)
                        }
                    }
                }
            }

            # calculate IdentityType
            $supportsSystemAssignedIdentity = $EnableSystemAssignedIdentity -or (($null -eq $EnableSystemAssignedIdentity) -and ($deployment.IdentityType.Contains('SystemAssigned')))
            $supportsUserAssignedIdentity = ($PSBoundParameters.ContainsKey('UserAssignedIdentity') -and $UserAssignedIdentity.Length -gt 0) -or ((-not $PSBoundParameters.ContainsKey('UserAssignedIdentity')) -and ($deployment.IdentityType.Contains('UserAssigned')));
            if (($supportsSystemAssignedIdentity -and $supportsUserAssignedIdentity)) {
                $PSBoundParameters.Add("IdentityType", "SystemAssigned,UserAssigned")
            }
            elseif ($supportsUserAssignedIdentity -and (-not $supportsSystemAssignedIdentity)) {
                $PSBoundParameters.Add("IdentityType", "UserAssigned")
            }
            elseif ((-not $supportsUserAssignedIdentity) -and $supportsSystemAssignedIdentity) {
                $PSBoundParameters.Add("IdentityType", "SystemAssigned")
            }
            else {
                $PSBoundParameters.Add("IdentityType", "None")
            }

            # remove EnableSystemAssignedIdentity 
            if ($PSBoundParameters.ContainsKey('EnableSystemAssignedIdentity')) {
                $null = $PSBoundParameters.Remove("EnableSystemAssignedIdentity")
            }
            # remove UserAssignedIdentity 
            if ($PSBoundParameters.ContainsKey('UserAssignedIdentity')) {
                $null = $PSBoundParameters.Remove('UserAssignedIdentity')
            }
        }
        Az.Nginx.internal\Update-AzNginxDeployment @PSBoundParameters
    }
}
