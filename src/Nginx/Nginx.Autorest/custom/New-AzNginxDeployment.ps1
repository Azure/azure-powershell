
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create the NGINX deployment
.Description
Create the NGINX deployment
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxDeployment
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

AUTOSCALESETTINGPROFILE <IScaleProfile[]>: .
  CapacityMax <Int32>: The maximum number of NCUs the deployment can be autoscaled to.
  CapacityMin <Int32>: The minimum number of NCUs the deployment can be autoscaled to.
  Name <String>: 

NETWORKPROFILE <INginxNetworkProfile>: .
  [FrontEndIPConfiguration <INginxFrontendIPConfiguration>]: 
    [PrivateIPAddress <List<INginxPrivateIPAddress>>]: 
      [PrivateIPAddress <String>]: 
      [PrivateIPAllocationMethod <String>]: 
      [SubnetId <String>]: 
    [PublicIPAddress <List<INginxPublicIPAddress>>]: 
      [Id <String>]: 
  [NetworkInterfaceConfiguration <INginxNetworkInterfaceConfiguration>]: 
    [SubnetId <String>]: 
.Link
https://learn.microsoft.com/powershell/module/az.nginx/new-aznginxdeployment
#>
function New-AzNginxDeployment {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxDeployment])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('DeploymentName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [System.String]
    # The name of targeted NGINX deployment
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # .
    ${Location},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxNetworkProfile]
    # .
    ${NetworkProfile},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # Name of the SKU.
    ${SkuName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.IScaleProfile[]]
    # .
    ${AutoScaleSettingProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # .
    ${EnableDiagnosticsSupport},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Determines whether to enable a system-assigned identity for the resource.
    ${EnableSystemAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # The managed resource group to deploy VNet injection related network resources.
    ${ManagedResourceGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.Int32]
    # .
    ${ScalingPropertyCapacity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # .
    ${StorageAccountContainerName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # .
    ${StorageAccountName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxDeploymentTags]))]
    [System.Collections.Hashtable]
    # Dictionary of <string>
    ${Tag},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String[]]
    # The array of user assigned identities associated with the resource.
    # The elements in array will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.'
    ${UserAssignedIdentity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # The preferred support contact email address of the user used for sending alerts and notification.
    # Can be an empty string or a valid email address.
    ${UserProfilePreferredEmail},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)
    process {
        if ($PSBoundParameters.ContainsKey('EnableSystemAssignedIdentity') -or $PSBoundParameters.ContainsKey('UserAssignedIdentity') ) {
            # calculate IdentityType
            $supportsSystemAssignedIdentity = $PSBoundParameters.ContainsKey('EnableSystemAssignedIdentity')
            $supportsUserAssignedIdentity = $PSBoundParameters.ContainsKey("UserAssignedIdentity") -and $UserAssignedIdentity.Length -gt 0
            if (($supportsSystemAssignedIdentity -and $supportsUserAssignedIdentity)) {
                $PSBoundParameters.Add("IdentityType", "SystemAssigned,UserAssigned")
            }
            elseif ($supportsUserAssignedIdentity -and (-not $supportsSystemAssignedIdentity)) {
                $PSBoundParameters.Add("IdentityType", "UserAssigned")
            }
            elseif ((-not $supportsUserAssignedIdentity) -and $supportsSystemAssignedIdentity) {
                $PSBoundParameters.Add("IdentityType", "SystemAssigned")
            }
            else {
                $PSBoundParameters.Add("IdentityType", "None")
            }

            # remove EnableSystemAssignedIdentity 
            if ($PSBoundParameters.ContainsKey('EnableSystemAssignedIdentity')) {
                $null = $PSBoundParameters.Remove("EnableSystemAssignedIdentity")
            }

            # If user input UserAssignedIdentity
            if ($PSBoundParameters.ContainsKey('UserAssignedIdentity')) {
                $userIdentityObject = [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.IdentityPropertiesUserAssignedIdentities]::New()
                $PSBoundParameters.IdentityUserAssignedIdentity = @{}
                foreach ($item in $PSBoundParameters.UserAssignedIdentity) {
                    $PSBoundParameters.IdentityUserAssignedIdentity.Add($item, $userIdentityObject )
                }
      
                $null = $PSBoundParameters.Remove('UserAssignedIdentity')
            }
        }
        Az.Nginx.internal\New-AzNginxDeployment @PSBoundParameters
    }
}
