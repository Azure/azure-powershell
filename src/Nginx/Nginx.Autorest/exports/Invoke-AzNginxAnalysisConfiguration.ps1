
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Analyze an NGINX configuration without applying it to the NGINXaaS deployment
.Description
Analyze an NGINX configuration without applying it to the NGINXaaS deployment
.Example
$confFile = New-AzNginxConfigurationFileObject -VirtualPath "nginx.conf" -Content 'xxxx'
        
# configuration analysis
$confAnalysis = Invoke-AzNginxAnalysisConfiguration -ConfigurationName default -DeploymentName xxxx -ResourceGroupName xxxx -ConfigFile $confFile -ConfigRootFile "nginx.conf"

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.Api202401Preview.IAnalysisCreate
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.Api202401Preview.IAnalysisResult
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODY <IAnalysisCreate>: The request body for creating an analysis for an NGINX configuration.
  [ConfigFile <INginxConfigurationFile[]>]: 
    [Content <String>]: 
    [VirtualPath <String>]: 
  [ConfigProtectedFile <INginxConfigurationFile[]>]: 
  [ConfigRootFile <String>]: The root file of the NGINX config file(s). It must match one of the files' filepath.
  [PackageData <String>]: 
  [PackageProtectedFile <String[]>]: 

CONFIGFILE <INginxConfigurationFile[]>: .
  [Content <String>]: 
  [VirtualPath <String>]: 

CONFIGPROTECTEDFILE <INginxConfigurationFile[]>: .
  [Content <String>]: 
  [VirtualPath <String>]: 

INPUTOBJECT <INginxIdentity>: Identity Parameter
  [CertificateName <String>]: The name of certificate
  [ConfigurationName <String>]: The name of configuration, only 'default' is supported value due to the singleton of NGINX conf
  [DeploymentName <String>]: The name of targeted NGINX deployment
  [Id <String>]: Resource identity path
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription.
.Link
https://learn.microsoft.com/powershell/module/az.nginx/invoke-aznginxanalysisconfiguration
#>
function Invoke-AzNginxAnalysisConfiguration {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.Api202401Preview.IAnalysisResult])]
[CmdletBinding(DefaultParameterSetName='AnalysisExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Analysis', Mandatory)]
    [Parameter(ParameterSetName='AnalysisExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [System.String]
    # The name of configuration, only 'default' is supported value due to the singleton of NGINX conf
    ${ConfigurationName},

    [Parameter(ParameterSetName='Analysis', Mandatory)]
    [Parameter(ParameterSetName='AnalysisExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [System.String]
    # The name of targeted NGINX deployment
    ${DeploymentName},

    [Parameter(ParameterSetName='Analysis', Mandatory)]
    [Parameter(ParameterSetName='AnalysisExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Analysis')]
    [Parameter(ParameterSetName='AnalysisExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='AnalysisViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AnalysisViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.INginxIdentity]
    # Identity Parameter
    # To construct, see NOTES section for INPUTOBJECT properties and create a hash table.
    ${InputObject},

    [Parameter(ParameterSetName='Analysis', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='AnalysisViaIdentity', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.Api202401Preview.IAnalysisCreate]
    # The request body for creating an analysis for an NGINX configuration.
    # To construct, see NOTES section for BODY properties and create a hash table.
    ${Body},

    [Parameter(ParameterSetName='AnalysisExpanded')]
    [Parameter(ParameterSetName='AnalysisViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.Api202401Preview.INginxConfigurationFile[]]
    # .
    # To construct, see NOTES section for CONFIGFILE properties and create a hash table.
    ${ConfigFile},

    [Parameter(ParameterSetName='AnalysisExpanded')]
    [Parameter(ParameterSetName='AnalysisViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Models.Api202401Preview.INginxConfigurationFile[]]
    # .
    # To construct, see NOTES section for CONFIGPROTECTEDFILE properties and create a hash table.
    ${ConfigProtectedFile},

    [Parameter(ParameterSetName='AnalysisExpanded')]
    [Parameter(ParameterSetName='AnalysisViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # The root file of the NGINX config file(s).
    # It must match one of the files' filepath.
    ${ConfigRootFile},

    [Parameter(ParameterSetName='AnalysisExpanded')]
    [Parameter(ParameterSetName='AnalysisViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String]
    # .
    ${PackageData},

    [Parameter(ParameterSetName='AnalysisExpanded')]
    [Parameter(ParameterSetName='AnalysisViaIdentityExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Body')]
    [System.String[]]
    # .
    ${PackageProtectedFile},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Nginx.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Analysis = 'Az.Nginx.private\Invoke-AzNginxAnalysisConfiguration_Analysis';
            AnalysisExpanded = 'Az.Nginx.private\Invoke-AzNginxAnalysisConfiguration_AnalysisExpanded';
            AnalysisViaIdentity = 'Az.Nginx.private\Invoke-AzNginxAnalysisConfiguration_AnalysisViaIdentity';
            AnalysisViaIdentityExpanded = 'Az.Nginx.private\Invoke-AzNginxAnalysisConfiguration_AnalysisViaIdentityExpanded';
        }
        if (('Analysis', 'AnalysisExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Nginx.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Nginx.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
