
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for license information.
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Revoke a certificate under a certificate profile.
.Description
Revoke a certificate under a certificate profile.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Models.IRevokeCertificate
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Models.ITrustedSigningIdentity
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODY <IRevokeCertificate>: Defines the certificate revocation properties.
  EffectiveAt <DateTime>: The timestamp when the revocation is effective.
  Reason <String>: Reason for the revocation.
  SerialNumber <String>: Serial number of the certificate.
  Thumbprint <String>: Thumbprint of the certificate.
  [Remark <String>]: Remarks for the revocation.

CODESIGNINGACCOUNTINPUTOBJECT <ITrustedSigningIdentity>: Identity Parameter
  [AccountName <String>]: Trusted Signing account name.
  [Id <String>]: Resource identity path
  [ProfileName <String>]: Certificate profile name.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

INPUTOBJECT <ITrustedSigningIdentity>: Identity Parameter
  [AccountName <String>]: Trusted Signing account name.
  [Id <String>]: Resource identity path
  [ProfileName <String>]: Certificate profile name.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
.Link
https://learn.microsoft.com/powershell/module/az.trustedsigning/revoke-aztrustedsigningcertificateprofilecertificate
#>
function Revoke-AzTrustedSigningCertificateProfileCertificate {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='RevokeExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Path')]
    [System.String]
    # Trusted Signing account name.
    ${AccountName},

    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccount', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Path')]
    [System.String]
    # Certificate profile name.
    ${ProfileName},

    [Parameter(ParameterSetName='Revoke', Mandatory)]
    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Revoke')]
    [Parameter(ParameterSetName='RevokeExpanded')]
    [Parameter(ParameterSetName='RevokeViaJsonFilePath')]
    [Parameter(ParameterSetName='RevokeViaJsonString')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RevokeViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Models.ITrustedSigningIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccount', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Models.ITrustedSigningIdentity]
    # Identity Parameter
    ${CodeSigningAccountInputObject},

    [Parameter(ParameterSetName='Revoke', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RevokeViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccount', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Models.IRevokeCertificate]
    # Defines the certificate revocation properties.
    ${Body},

    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.DateTime]
    # The timestamp when the revocation is effective.
    ${EffectiveAt},

    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.String]
    # Reason for the revocation.
    ${Reason},

    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.String]
    # Serial number of the certificate.
    ${SerialNumber},

    [Parameter(ParameterSetName='RevokeExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded', Mandatory)]
    [Parameter(ParameterSetName='RevokeViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.String]
    # Thumbprint of the certificate.
    ${Thumbprint},

    [Parameter(ParameterSetName='RevokeExpanded')]
    [Parameter(ParameterSetName='RevokeViaIdentityCodeSigningAccountExpanded')]
    [Parameter(ParameterSetName='RevokeViaIdentityExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.String]
    # Remarks for the revocation.
    ${Remark},

    [Parameter(ParameterSetName='RevokeViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Revoke operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='RevokeViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Body')]
    [System.String]
    # Json string supplied to the Revoke operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Revoke = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_Revoke';
            RevokeExpanded = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeExpanded';
            RevokeViaIdentity = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeViaIdentity';
            RevokeViaIdentityCodeSigningAccount = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeViaIdentityCodeSigningAccount';
            RevokeViaIdentityCodeSigningAccountExpanded = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeViaIdentityCodeSigningAccountExpanded';
            RevokeViaIdentityExpanded = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeViaIdentityExpanded';
            RevokeViaJsonFilePath = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeViaJsonFilePath';
            RevokeViaJsonString = 'Az.TrustedSigning.private\Revoke-AzTrustedSigningCertificateProfileCertificate_RevokeViaJsonString';
        }
        if (('Revoke', 'RevokeExpanded', 'RevokeViaJsonFilePath', 'RevokeViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.TrustedSigning.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
