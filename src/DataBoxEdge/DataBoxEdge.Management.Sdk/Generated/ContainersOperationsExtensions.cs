// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.DataBoxEdge
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ContainersOperations
    /// </summary>
    public static partial class ContainersOperationsExtensions
    {
        /// <summary>
        /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
        /// Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The storage Account name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Container> ListByStorageAccount(this IContainersOperations operations, string deviceName, string storageAccountName, string resourceGroupName)
        {
                return ((IContainersOperations)operations).ListByStorageAccountAsync(deviceName, storageAccountName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
        /// Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The storage Account name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Container>> ListByStorageAccountAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByStorageAccountWithHttpMessagesAsync(deviceName, storageAccountName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets a container by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container Name
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static Container Get(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
        {
                return ((IContainersOperations)operations).GetAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets a container by name.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container Name
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Container> GetAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a new container or updates an existing container on the device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static Container CreateOrUpdate(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, string dataFormat)
        {
                return ((IContainersOperations)operations).CreateOrUpdateAsync(deviceName, storageAccountName, containerName, resourceGroupName, dataFormat).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new container or updates an existing container on the device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Container> CreateOrUpdateAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, string dataFormat, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, dataFormat, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the container on the Data Box Edge/Data Box Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static void Delete(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
        {
                ((IContainersOperations)operations).DeleteAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the container on the Data Box Edge/Data Box Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Refreshes the container metadata with the data from the cloud.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static void Refresh(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
        {
                ((IContainersOperations)operations).RefreshAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Refreshes the container metadata with the data from the cloud.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task RefreshAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.RefreshWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Creates a new container or updates an existing container on the device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static Container BeginCreateOrUpdate(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, string dataFormat)
        {
                return ((IContainersOperations)operations).BeginCreateOrUpdateAsync(deviceName, storageAccountName, containerName, resourceGroupName, dataFormat).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a new container or updates an existing container on the device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Container> BeginCreateOrUpdateAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, string dataFormat, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, dataFormat, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the container on the Data Box Edge/Data Box Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static void BeginDelete(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
        {
                ((IContainersOperations)operations).BeginDeleteAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the container on the Data Box Edge/Data Box Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Refreshes the container metadata with the data from the cloud.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        public static void BeginRefresh(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName)
        {
                ((IContainersOperations)operations).BeginRefreshAsync(deviceName, storageAccountName, containerName, resourceGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Refreshes the container metadata with the data from the cloud.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='deviceName'>
        /// The device name.
        /// </param>
        /// <param name='storageAccountName'>
        /// The Storage Account Name
        /// </param>
        /// <param name='containerName'>
        /// The container name.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The resource group name.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginRefreshAsync(this IContainersOperations operations, string deviceName, string storageAccountName, string containerName, string resourceGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginRefreshWithHttpMessagesAsync(deviceName, storageAccountName, containerName, resourceGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
        /// Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Container> ListByStorageAccountNext(this IContainersOperations operations, string nextPageLink)
        {
                return ((IContainersOperations)operations).ListByStorageAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all the containers of a storage Account in a Data Box Edge/Data Box
        /// Gateway device.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Container>> ListByStorageAccountNextAsync(this IContainersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByStorageAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
