// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// A device job.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Job
    {
        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>
        public Job()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Job class.
        /// </summary>

        /// <param name="id">The path ID that uniquely identifies the object.
        /// </param>

        /// <param name="name">The name of the object.
        /// </param>

        /// <param name="type">The hierarchical type of the object.
        /// </param>

        /// <param name="status">The current status of the job.
        /// Possible values include: &#39;Invalid&#39;, &#39;Running&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;,
        /// &#39;Canceled&#39;, &#39;Paused&#39;, &#39;Scheduled&#39;</param>

        /// <param name="startTime">The UTC date and time at which the job started.
        /// </param>

        /// <param name="endTime">The UTC date and time at which the job completed.
        /// </param>

        /// <param name="percentComplete">The percentage of the job that is complete.
        /// </param>

        /// <param name="error">The error details.
        /// </param>

        /// <param name="jobType">The type of the job.
        /// Possible values include: &#39;Invalid&#39;, &#39;ScanForUpdates&#39;, &#39;DownloadUpdates&#39;,
        /// &#39;InstallUpdates&#39;, &#39;RefreshShare&#39;, &#39;RefreshContainer&#39;</param>

        /// <param name="currentStage">Current stage of the update operation.
        /// Possible values include: &#39;Unknown&#39;, &#39;Initial&#39;, &#39;ScanStarted&#39;,
        /// &#39;ScanComplete&#39;, &#39;ScanFailed&#39;, &#39;DownloadStarted&#39;, &#39;DownloadComplete&#39;,
        /// &#39;DownloadFailed&#39;, &#39;InstallStarted&#39;, &#39;InstallComplete&#39;, &#39;InstallFailed&#39;,
        /// &#39;RebootInitiated&#39;, &#39;Success&#39;, &#39;Failure&#39;, &#39;RescanStarted&#39;, &#39;RescanComplete&#39;,
        /// &#39;RescanFailed&#39;</param>

        /// <param name="downloadProgress">The download progress.
        /// </param>

        /// <param name="installProgress">The install progress.
        /// </param>

        /// <param name="totalRefreshErrors">Total number of errors encountered during the refresh process.
        /// </param>

        /// <param name="errorManifestFile">Local share/remote container relative path to the error manifest file of
        /// the refresh.
        /// </param>

        /// <param name="refreshedEntityId">ARM ID of the entity that was refreshed.
        /// </param>

        /// <param name="folder">If only subfolders need to be refreshed, then the subfolder path inside the
        /// share or container. (The path is empty if there are no subfolders.)
        /// </param>
        public Job(string id = default(string), string name = default(string), string type = default(string), string status = default(string), System.DateTime? startTime = default(System.DateTime?), System.DateTime? endTime = default(System.DateTime?), int? percentComplete = default(int?), JobErrorDetails error = default(JobErrorDetails), string jobType = default(string), string currentStage = default(string), UpdateDownloadProgress downloadProgress = default(UpdateDownloadProgress), UpdateInstallProgress installProgress = default(UpdateInstallProgress), int? totalRefreshErrors = default(int?), string errorManifestFile = default(string), string refreshedEntityId = default(string), string folder = default(string))

        {
            this.Id = id;
            this.Name = name;
            this.Type = type;
            this.Status = status;
            this.StartTime = startTime;
            this.EndTime = endTime;
            this.PercentComplete = percentComplete;
            this.Error = error;
            this.JobType = jobType;
            this.CurrentStage = currentStage;
            this.DownloadProgress = downloadProgress;
            this.InstallProgress = installProgress;
            this.TotalRefreshErrors = totalRefreshErrors;
            this.ErrorManifestFile = errorManifestFile;
            this.RefreshedEntityId = refreshedEntityId;
            this.Folder = folder;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the path ID that uniquely identifies the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "id")]
        public string Id {get; private set; }

        /// <summary>
        /// Gets the name of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; private set; }

        /// <summary>
        /// Gets the hierarchical type of the object.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; private set; }

        /// <summary>
        /// Gets the current status of the job. Possible values include: &#39;Invalid&#39;, &#39;Running&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Paused&#39;, &#39;Scheduled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets the UTC date and time at which the job started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; private set; }

        /// <summary>
        /// Gets the UTC date and time at which the job completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "endTime")]
        public System.DateTime? EndTime {get; private set; }

        /// <summary>
        /// Gets the percentage of the job that is complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentComplete")]
        public int? PercentComplete {get; private set; }

        /// <summary>
        /// Gets the error details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public JobErrorDetails Error {get; private set; }

        /// <summary>
        /// Gets the type of the job. Possible values include: &#39;Invalid&#39;, &#39;ScanForUpdates&#39;, &#39;DownloadUpdates&#39;, &#39;InstallUpdates&#39;, &#39;RefreshShare&#39;, &#39;RefreshContainer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.jobType")]
        public string JobType {get; private set; }

        /// <summary>
        /// Gets current stage of the update operation. Possible values include: &#39;Unknown&#39;, &#39;Initial&#39;, &#39;ScanStarted&#39;, &#39;ScanComplete&#39;, &#39;ScanFailed&#39;, &#39;DownloadStarted&#39;, &#39;DownloadComplete&#39;, &#39;DownloadFailed&#39;, &#39;InstallStarted&#39;, &#39;InstallComplete&#39;, &#39;InstallFailed&#39;, &#39;RebootInitiated&#39;, &#39;Success&#39;, &#39;Failure&#39;, &#39;RescanStarted&#39;, &#39;RescanComplete&#39;, &#39;RescanFailed&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.currentStage")]
        public string CurrentStage {get; private set; }

        /// <summary>
        /// Gets the download progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.downloadProgress")]
        public UpdateDownloadProgress DownloadProgress {get; private set; }

        /// <summary>
        /// Gets the install progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.installProgress")]
        public UpdateInstallProgress InstallProgress {get; private set; }

        /// <summary>
        /// Gets total number of errors encountered during the refresh process.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.totalRefreshErrors")]
        public int? TotalRefreshErrors {get; private set; }

        /// <summary>
        /// Gets local share/remote container relative path to the error manifest file
        /// of the refresh.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.errorManifestFile")]
        public string ErrorManifestFile {get; private set; }

        /// <summary>
        /// Gets aRM ID of the entity that was refreshed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.refreshedEntityId")]
        public string RefreshedEntityId {get; private set; }

        /// <summary>
        /// Gets or sets if only subfolders need to be refreshed, then the subfolder
        /// path inside the share or container. (The path is empty if there are no
        /// subfolders.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.folder")]
        public string Folder {get; private set; }
    }
}