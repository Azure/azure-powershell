// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The upload certificate request.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class UploadCertificateRequest
    {
        /// <summary>
        /// Initializes a new instance of the UploadCertificateRequest class.
        /// </summary>
        public UploadCertificateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UploadCertificateRequest class.
        /// </summary>

        /// <param name="authenticationType">The authentication type.
        /// Possible values include: &#39;Invalid&#39;, &#39;AzureActiveDirectory&#39;</param>

        /// <param name="certificate">The base64 encoded certificate raw data.
        /// </param>
        public UploadCertificateRequest(string certificate, string authenticationType = default(string))

        {
            this.AuthenticationType = authenticationType;
            this.Certificate = certificate;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the authentication type. Possible values include: &#39;Invalid&#39;, &#39;AzureActiveDirectory&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.authenticationType")]
        public string AuthenticationType {get; set; }

        /// <summary>
        /// Gets or sets the base64 encoded certificate raw data.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.certificate")]
        public string Certificate {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Certificate == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Certificate");
            }


        }
    }
}