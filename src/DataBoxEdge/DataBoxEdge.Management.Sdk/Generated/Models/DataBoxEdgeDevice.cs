// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The Data Box Edge/Gateway device.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class DataBoxEdgeDevice : ARMBaseModel
    {
        /// <summary>
        /// Initializes a new instance of the DataBoxEdgeDevice class.
        /// </summary>
        public DataBoxEdgeDevice()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DataBoxEdgeDevice class.
        /// </summary>

        /// <param name="id">The path ID that uniquely identifies the object.
        /// </param>

        /// <param name="name">The object name.
        /// </param>

        /// <param name="type">The hierarchical type of the object.
        /// </param>

        /// <param name="location">The location of the device. This is a supported and registered Azure
        /// geographical region (for example, West US, East US, or Southeast Asia). The
        /// geographical region of a device cannot be changed once it is created, but
        /// if an identical geographical region is specified on update, the request
        /// will succeed.
        /// </param>

        /// <param name="tags">The list of tags that describe the device. These tags can be used to view
        /// and group this device (across resource groups).
        /// </param>

        /// <param name="sku">The SKU type.
        /// </param>

        /// <param name="etag">The etag for the devices.
        /// </param>

        /// <param name="deviceType">The type of the Data Box Edge/Gateway device.
        /// Possible values include: &#39;DataBoxEdgeDevice&#39;</param>

        /// <param name="dataBoxEdgeDeviceStatus">The status of the Data Box Edge/Gateway device.
        /// Possible values include: &#39;ReadyToSetup&#39;, &#39;Online&#39;, &#39;Offline&#39;,
        /// &#39;NeedsAttention&#39;, &#39;Disconnected&#39;, &#39;PartiallyDisconnected&#39;, &#39;Maintenance&#39;</param>

        /// <param name="serialNumber">The Serial Number of Data Box Edge/Gateway device.
        /// </param>

        /// <param name="description">The Description of the Data Box Edge/Gateway device.
        /// </param>

        /// <param name="modelDescription">The description of the Data Box Edge/Gateway device model.
        /// </param>

        /// <param name="friendlyName">The Data Box Edge/Gateway device name.
        /// </param>

        /// <param name="culture">The Data Box Edge/Gateway device culture.
        /// </param>

        /// <param name="deviceModel">The Data Box Edge/Gateway device model.
        /// </param>

        /// <param name="deviceSoftwareVersion">The Data Box Edge/Gateway device software version.
        /// </param>

        /// <param name="deviceLocalCapacity">The Data Box Edge/Gateway device local capacity in MB.
        /// </param>

        /// <param name="timeZone">The Data Box Edge/Gateway device timezone.
        /// </param>

        /// <param name="deviceHcsVersion">The device software version number of the device (eg: 1.2.18105.6).
        /// </param>

        /// <param name="configuredRoleTypes">Type of compute roles configured.
        /// </param>

        /// <param name="nodeCount">The number of nodes in the cluster.
        /// </param>
        public DataBoxEdgeDevice(string location, string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), Sku sku = default(Sku), string etag = default(string), string deviceType = default(string), string dataBoxEdgeDeviceStatus = default(string), string serialNumber = default(string), string description = default(string), string modelDescription = default(string), string friendlyName = default(string), string culture = default(string), string deviceModel = default(string), string deviceSoftwareVersion = default(string), long? deviceLocalCapacity = default(long?), string timeZone = default(string), string deviceHcsVersion = default(string), System.Collections.Generic.IList<string> configuredRoleTypes = default(System.Collections.Generic.IList<string>), int? nodeCount = default(int?))

        : base(id, name, type)
        {
            this.Location = location;
            this.Tags = tags;
            this.Sku = sku;
            this.Etag = etag;
            this.DeviceType = deviceType;
            this.DataBoxEdgeDeviceStatus = dataBoxEdgeDeviceStatus;
            this.SerialNumber = serialNumber;
            this.Description = description;
            this.ModelDescription = modelDescription;
            this.FriendlyName = friendlyName;
            this.Culture = culture;
            this.DeviceModel = deviceModel;
            this.DeviceSoftwareVersion = deviceSoftwareVersion;
            this.DeviceLocalCapacity = deviceLocalCapacity;
            this.TimeZone = timeZone;
            this.DeviceHcsVersion = deviceHcsVersion;
            this.ConfiguredRoleTypes = configuredRoleTypes;
            this.NodeCount = nodeCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the location of the device. This is a supported and registered
        /// Azure geographical region (for example, West US, East US, or Southeast
        /// Asia). The geographical region of a device cannot be changed once it is
        /// created, but if an identical geographical region is specified on update,
        /// the request will succeed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "location")]
        public string Location {get; set; }

        /// <summary>
        /// Gets or sets the list of tags that describe the device. These tags can be
        /// used to view and group this device (across resource groups).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "tags")]
        public System.Collections.Generic.IDictionary<string, string> Tags {get; set; }

        /// <summary>
        /// Gets or sets the SKU type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sku")]
        public Sku Sku {get; set; }

        /// <summary>
        /// Gets or sets the etag for the devices.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets the type of the Data Box Edge/Gateway device. Possible values include: &#39;DataBoxEdgeDevice&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deviceType")]
        public string DeviceType {get; private set; }

        /// <summary>
        /// Gets or sets the status of the Data Box Edge/Gateway device. Possible values include: &#39;ReadyToSetup&#39;, &#39;Online&#39;, &#39;Offline&#39;, &#39;NeedsAttention&#39;, &#39;Disconnected&#39;, &#39;PartiallyDisconnected&#39;, &#39;Maintenance&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataBoxEdgeDeviceStatus")]
        public string DataBoxEdgeDeviceStatus {get; set; }

        /// <summary>
        /// Gets the Serial Number of Data Box Edge/Gateway device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.serialNumber")]
        public string SerialNumber {get; private set; }

        /// <summary>
        /// Gets or sets the Description of the Data Box Edge/Gateway device.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets the description of the Data Box Edge/Gateway device model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.modelDescription")]
        public string ModelDescription {get; set; }

        /// <summary>
        /// Gets or sets the Data Box Edge/Gateway device name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.friendlyName")]
        public string FriendlyName {get; set; }

        /// <summary>
        /// Gets the Data Box Edge/Gateway device culture.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.culture")]
        public string Culture {get; private set; }

        /// <summary>
        /// Gets the Data Box Edge/Gateway device model.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deviceModel")]
        public string DeviceModel {get; private set; }

        /// <summary>
        /// Gets the Data Box Edge/Gateway device software version.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deviceSoftwareVersion")]
        public string DeviceSoftwareVersion {get; private set; }

        /// <summary>
        /// Gets the Data Box Edge/Gateway device local capacity in MB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deviceLocalCapacity")]
        public long? DeviceLocalCapacity {get; private set; }

        /// <summary>
        /// Gets the Data Box Edge/Gateway device timezone.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.timeZone")]
        public string TimeZone {get; private set; }

        /// <summary>
        /// Gets the device software version number of the device (eg: 1.2.18105.6).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.deviceHcsVersion")]
        public string DeviceHcsVersion {get; private set; }

        /// <summary>
        /// Gets type of compute roles configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.configuredRoleTypes")]
        public System.Collections.Generic.IList<string> ConfiguredRoleTypes {get; private set; }

        /// <summary>
        /// Gets the number of nodes in the cluster.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.nodeCount")]
        public int? NodeCount {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Location == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Location");
            }
















        }
    }
}