// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// Trigger details.
    /// </summary>
    [Newtonsoft.Json.JsonObject("FileEvent")]
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class FileEventTrigger : Trigger
    {
        /// <summary>
        /// Initializes a new instance of the FileEventTrigger class.
        /// </summary>
        public FileEventTrigger()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FileEventTrigger class.
        /// </summary>

        /// <param name="id">The path ID that uniquely identifies the object.
        /// </param>

        /// <param name="name">The object name.
        /// </param>

        /// <param name="type">The hierarchical type of the object.
        /// </param>

        /// <param name="sourceInfo">File event source details.
        /// </param>

        /// <param name="sinkInfo">Role sink info.
        /// </param>

        /// <param name="customContextTag">A custom context tag typically used to correlate the trigger against its
        /// usage. For example, if a periodic timer trigger is intended for certain
        /// specific IoT modules in the device, the tag can be the name or the image
        /// URL of the module.
        /// </param>
        public FileEventTrigger(FileSourceInfo sourceInfo, RoleSinkInfo sinkInfo, string id = default(string), string name = default(string), string type = default(string), string customContextTag = default(string))

        : base(id, name, type)
        {
            this.SourceInfo = sourceInfo;
            this.SinkInfo = sinkInfo;
            this.CustomContextTag = customContextTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets file event source details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sourceInfo")]
        public FileSourceInfo SourceInfo {get; set; }

        /// <summary>
        /// Gets or sets role sink info.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sinkInfo")]
        public RoleSinkInfo SinkInfo {get; set; }

        /// <summary>
        /// Gets or sets a custom context tag typically used to correlate the trigger
        /// against its usage. For example, if a periodic timer trigger is intended for
        /// certain specific IoT modules in the device, the tag can be the name or the
        /// image URL of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.customContextTag")]
        public string CustomContextTag {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceInfo");
            }
            if (this.SinkInfo == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SinkInfo");
            }
            if (this.SourceInfo != null)
            {
                this.SourceInfo.Validate();
            }
            if (this.SinkInfo != null)
            {
                this.SinkInfo.Validate();
            }

        }
    }
}