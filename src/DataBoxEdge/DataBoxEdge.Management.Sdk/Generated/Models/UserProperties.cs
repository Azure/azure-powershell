// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The user properties.
    /// </summary>
    public partial class UserProperties
    {
        /// <summary>
        /// Initializes a new instance of the UserProperties class.
        /// </summary>
        public UserProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserProperties class.
        /// </summary>

        /// <param name="encryptedPassword">The password details.
        /// </param>

        /// <param name="shareAccessRights">List of shares that the user has rights on. This field should not be
        /// specified during user creation.
        /// </param>

        /// <param name="userType">Type of the user.
        /// Possible values include: &#39;Share&#39;, &#39;LocalManagement&#39;, &#39;ARM&#39;</param>
        public UserProperties(string userType, AsymmetricEncryptedSecret encryptedPassword = default(AsymmetricEncryptedSecret), System.Collections.Generic.IList<ShareAccessRight> shareAccessRights = default(System.Collections.Generic.IList<ShareAccessRight>))

        {
            this.EncryptedPassword = encryptedPassword;
            this.ShareAccessRights = shareAccessRights;
            this.UserType = userType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the password details.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptedPassword")]
        public AsymmetricEncryptedSecret EncryptedPassword {get; set; }

        /// <summary>
        /// Gets or sets list of shares that the user has rights on. This field should
        /// not be specified during user creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shareAccessRights")]
        public System.Collections.Generic.IList<ShareAccessRight> ShareAccessRights {get; set; }

        /// <summary>
        /// Gets or sets type of the user. Possible values include: &#39;Share&#39;, &#39;LocalManagement&#39;, &#39;ARM&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userType")]
        public string UserType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.UserType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UserType");
            }
            if (this.EncryptedPassword != null)
            {
                this.EncryptedPassword.Validate();
            }
            if (this.ShareAccessRights != null)
            {
                foreach (var element in this.ShareAccessRights)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}