// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The shipping address of the customer.
    /// </summary>
    public partial class Address
    {
        /// <summary>
        /// Initializes a new instance of the Address class.
        /// </summary>
        public Address()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Address class.
        /// </summary>

        /// <param name="addressLine1">The address line1.
        /// </param>

        /// <param name="addressLine2">The address line2.
        /// </param>

        /// <param name="addressLine3">The address line3.
        /// </param>

        /// <param name="postalCode">The postal code.
        /// </param>

        /// <param name="city">The city name.
        /// </param>

        /// <param name="state">The state name.
        /// </param>

        /// <param name="country">The country name.
        /// </param>
        public Address(string addressLine1, string postalCode, string city, string state, string country, string addressLine2 = default(string), string addressLine3 = default(string))

        {
            this.AddressLine1 = addressLine1;
            this.AddressLine2 = addressLine2;
            this.AddressLine3 = addressLine3;
            this.PostalCode = postalCode;
            this.City = city;
            this.State = state;
            this.Country = country;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the address line1.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressLine1")]
        public string AddressLine1 {get; set; }

        /// <summary>
        /// Gets or sets the address line2.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressLine2")]
        public string AddressLine2 {get; set; }

        /// <summary>
        /// Gets or sets the address line3.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "addressLine3")]
        public string AddressLine3 {get; set; }

        /// <summary>
        /// Gets or sets the postal code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "postalCode")]
        public string PostalCode {get; set; }

        /// <summary>
        /// Gets or sets the city name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "city")]
        public string City {get; set; }

        /// <summary>
        /// Gets or sets the state name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "state")]
        public string State {get; set; }

        /// <summary>
        /// Gets or sets the country name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "country")]
        public string Country {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AddressLine1 == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AddressLine1");
            }
            if (this.PostalCode == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PostalCode");
            }
            if (this.City == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "City");
            }
            if (this.State == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "State");
            }
            if (this.Country == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Country");
            }







        }
    }
}