// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of security settings.
    /// </summary>
    public partial class SecuritySettingsProperties
    {
        /// <summary>
        /// Initializes a new instance of the SecuritySettingsProperties class.
        /// </summary>
        public SecuritySettingsProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SecuritySettingsProperties class.
        /// </summary>

        /// <param name="deviceAdminPassword">Device administrator password as an encrypted string (encrypted using RSA
        /// PKCS #1) is used to sign into the  local web UI of the device. The Actual
        /// password should have at least 8 characters that are a combination of 
        /// uppercase, lowercase, numeric, and special characters.
        /// </param>
        public SecuritySettingsProperties(AsymmetricEncryptedSecret deviceAdminPassword)

        {
            this.DeviceAdminPassword = deviceAdminPassword;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets device administrator password as an encrypted string
        /// (encrypted using RSA PKCS #1) is used to sign into the  local web UI of the
        /// device. The Actual password should have at least 8 characters that are a
        /// combination of  uppercase, lowercase, numeric, and special characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deviceAdminPassword")]
        public AsymmetricEncryptedSecret DeviceAdminPassword {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.DeviceAdminPassword == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DeviceAdminPassword");
            }
            if (this.DeviceAdminPassword != null)
            {
                this.DeviceAdminPassword.Validate();
            }
        }
    }
}