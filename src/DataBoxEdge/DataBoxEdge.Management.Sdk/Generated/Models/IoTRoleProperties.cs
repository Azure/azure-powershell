// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// IoT role properties.
    /// </summary>
    public partial class IoTRoleProperties
    {
        /// <summary>
        /// Initializes a new instance of the IoTRoleProperties class.
        /// </summary>
        public IoTRoleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the IoTRoleProperties class.
        /// </summary>

        /// <param name="hostPlatform">Host OS supported by the IoT role.
        /// Possible values include: &#39;Windows&#39;, &#39;Linux&#39;</param>

        /// <param name="ioTDeviceDetails">IoT device metadata to which data box edge device needs to be connected.
        /// </param>

        /// <param name="ioTEdgeDeviceDetails">IoT edge device to which the IoT role needs to be configured.
        /// </param>

        /// <param name="shareMappings">Mount points of shares in role(s).
        /// </param>

        /// <param name="roleStatus">Role status.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>
        public IoTRoleProperties(string hostPlatform, IoTDeviceInfo ioTDeviceDetails, IoTDeviceInfo ioTEdgeDeviceDetails, string roleStatus, System.Collections.Generic.IList<MountPointMap> shareMappings = default(System.Collections.Generic.IList<MountPointMap>))

        {
            this.HostPlatform = hostPlatform;
            this.IoTDeviceDetails = ioTDeviceDetails;
            this.IoTEdgeDeviceDetails = ioTEdgeDeviceDetails;
            this.ShareMappings = shareMappings;
            this.RoleStatus = roleStatus;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets host OS supported by the IoT role. Possible values include: &#39;Windows&#39;, &#39;Linux&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "hostPlatform")]
        public string HostPlatform {get; set; }

        /// <summary>
        /// Gets or sets ioT device metadata to which data box edge device needs to be
        /// connected.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ioTDeviceDetails")]
        public IoTDeviceInfo IoTDeviceDetails {get; set; }

        /// <summary>
        /// Gets or sets ioT edge device to which the IoT role needs to be configured.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ioTEdgeDeviceDetails")]
        public IoTDeviceInfo IoTEdgeDeviceDetails {get; set; }

        /// <summary>
        /// Gets or sets mount points of shares in role(s).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shareMappings")]
        public System.Collections.Generic.IList<MountPointMap> ShareMappings {get; set; }

        /// <summary>
        /// Gets or sets role status. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "roleStatus")]
        public string RoleStatus {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.HostPlatform == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "HostPlatform");
            }
            if (this.IoTDeviceDetails == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IoTDeviceDetails");
            }
            if (this.IoTEdgeDeviceDetails == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "IoTEdgeDeviceDetails");
            }
            if (this.RoleStatus == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RoleStatus");
            }

            if (this.IoTDeviceDetails != null)
            {
                this.IoTDeviceDetails.Validate();
            }
            if (this.IoTEdgeDeviceDetails != null)
            {
                this.IoTEdgeDeviceDetails.Validate();
            }
            if (this.ShareMappings != null)
            {
                foreach (var element in this.ShareMappings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}