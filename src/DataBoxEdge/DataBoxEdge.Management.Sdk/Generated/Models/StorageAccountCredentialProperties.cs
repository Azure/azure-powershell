// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The storage account credential properties.
    /// </summary>
    public partial class StorageAccountCredentialProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountCredentialProperties class.
        /// </summary>
        public StorageAccountCredentialProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountCredentialProperties class.
        /// </summary>

        /// <param name="alias">Alias for the storage account.
        /// </param>

        /// <param name="userName">Username for the storage account.
        /// </param>

        /// <param name="accountKey">Encrypted storage key.
        /// </param>

        /// <param name="connectionString">Connection string for the storage account. Use this string if username and
        /// account key are not specified.
        /// </param>

        /// <param name="sslStatus">Signifies whether SSL needs to be enabled or not.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="blobDomainName">Blob end point for private clouds.
        /// </param>

        /// <param name="accountType">Type of storage accessed on the storage account.
        /// Possible values include: &#39;GeneralPurposeStorage&#39;, &#39;BlobStorage&#39;</param>

        /// <param name="storageAccountId">Id of the storage account.
        /// </param>
        public StorageAccountCredentialProperties(string alias, string sslStatus, string accountType, string userName = default(string), AsymmetricEncryptedSecret accountKey = default(AsymmetricEncryptedSecret), string connectionString = default(string), string blobDomainName = default(string), string storageAccountId = default(string))

        {
            this.Alias = alias;
            this.UserName = userName;
            this.AccountKey = accountKey;
            this.ConnectionString = connectionString;
            this.SslStatus = sslStatus;
            this.BlobDomainName = blobDomainName;
            this.AccountType = accountType;
            this.StorageAccountId = storageAccountId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets alias for the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "alias")]
        public string Alias {get; set; }

        /// <summary>
        /// Gets or sets username for the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public string UserName {get; set; }

        /// <summary>
        /// Gets or sets encrypted storage key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountKey")]
        public AsymmetricEncryptedSecret AccountKey {get; set; }

        /// <summary>
        /// Gets or sets connection string for the storage account. Use this string if
        /// username and account key are not specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "connectionString")]
        public string ConnectionString {get; set; }

        /// <summary>
        /// Gets or sets signifies whether SSL needs to be enabled or not. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sslStatus")]
        public string SslStatus {get; set; }

        /// <summary>
        /// Gets or sets blob end point for private clouds.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blobDomainName")]
        public string BlobDomainName {get; set; }

        /// <summary>
        /// Gets or sets type of storage accessed on the storage account. Possible values include: &#39;GeneralPurposeStorage&#39;, &#39;BlobStorage&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountType")]
        public string AccountType {get; set; }

        /// <summary>
        /// Gets or sets id of the storage account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountId")]
        public string StorageAccountId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Alias == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Alias");
            }
            if (this.SslStatus == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SslStatus");
            }
            if (this.AccountType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccountType");
            }


            if (this.AccountKey != null)
            {
                this.AccountKey.Validate();
            }





        }
    }
}