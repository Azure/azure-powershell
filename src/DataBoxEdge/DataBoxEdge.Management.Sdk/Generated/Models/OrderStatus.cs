// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a single status change.
    /// </summary>
    public partial class OrderStatus
    {
        /// <summary>
        /// Initializes a new instance of the OrderStatus class.
        /// </summary>
        public OrderStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OrderStatus class.
        /// </summary>

        /// <param name="status">Status of the order as per the allowed status types.
        /// Possible values include: &#39;Untracked&#39;, &#39;AwaitingFulfilment&#39;,
        /// &#39;AwaitingPreparation&#39;, &#39;AwaitingShipment&#39;, &#39;Shipped&#39;, &#39;Arriving&#39;,
        /// &#39;Delivered&#39;, &#39;ReplacementRequested&#39;, &#39;LostDevice&#39;, &#39;Declined&#39;,
        /// &#39;ReturnInitiated&#39;, &#39;AwaitingReturnShipment&#39;, &#39;ShippedBack&#39;,
        /// &#39;CollectedAtMicrosoft&#39;</param>

        /// <param name="updateDateTime">Time of status update.
        /// </param>

        /// <param name="comments">Comments related to this status change.
        /// </param>

        /// <param name="additionalOrderDetails">Dictionary to hold generic information which is not stored
        /// by the already existing properties
        /// </param>
        public OrderStatus(string status, System.DateTime? updateDateTime = default(System.DateTime?), string comments = default(string), System.Collections.Generic.IDictionary<string, string> additionalOrderDetails = default(System.Collections.Generic.IDictionary<string, string>))

        {
            this.Status = status;
            this.UpdateDateTime = updateDateTime;
            this.Comments = comments;
            this.AdditionalOrderDetails = additionalOrderDetails;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets status of the order as per the allowed status types. Possible values include: &#39;Untracked&#39;, &#39;AwaitingFulfilment&#39;, &#39;AwaitingPreparation&#39;, &#39;AwaitingShipment&#39;, &#39;Shipped&#39;, &#39;Arriving&#39;, &#39;Delivered&#39;, &#39;ReplacementRequested&#39;, &#39;LostDevice&#39;, &#39;Declined&#39;, &#39;ReturnInitiated&#39;, &#39;AwaitingReturnShipment&#39;, &#39;ShippedBack&#39;, &#39;CollectedAtMicrosoft&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; set; }

        /// <summary>
        /// Gets time of status update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "updateDateTime")]
        public System.DateTime? UpdateDateTime {get; private set; }

        /// <summary>
        /// Gets or sets comments related to this status change.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "comments")]
        public string Comments {get; set; }

        /// <summary>
        /// Gets dictionary to hold generic information which is not stored
        /// by the already existing properties
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "additionalOrderDetails")]
        public System.Collections.Generic.IDictionary<string, string> AdditionalOrderDetails {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Status == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Status");
            }



        }
    }
}