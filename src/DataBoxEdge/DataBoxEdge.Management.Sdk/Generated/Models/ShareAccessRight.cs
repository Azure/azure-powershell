// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// Specifies the mapping between this particular user and the type of access
    /// he has on shares on this device.
    /// </summary>
    public partial class ShareAccessRight
    {
        /// <summary>
        /// Initializes a new instance of the ShareAccessRight class.
        /// </summary>
        public ShareAccessRight()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ShareAccessRight class.
        /// </summary>

        /// <param name="shareId">The share ID.
        /// </param>

        /// <param name="accessType">Type of access to be allowed on the share for this user.
        /// Possible values include: &#39;Change&#39;, &#39;Read&#39;, &#39;Custom&#39;</param>
        public ShareAccessRight(string shareId, string accessType)

        {
            this.ShareId = shareId;
            this.AccessType = accessType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the share ID.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "shareId")]
        public string ShareId {get; set; }

        /// <summary>
        /// Gets or sets type of access to be allowed on the share for this user. Possible values include: &#39;Change&#39;, &#39;Read&#39;, &#39;Custom&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accessType")]
        public string AccessType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ShareId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ShareId");
            }
            if (this.AccessType == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccessType");
            }


        }
    }
}