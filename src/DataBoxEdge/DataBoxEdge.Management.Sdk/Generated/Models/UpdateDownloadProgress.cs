// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// Details about the download progress of update.
    /// </summary>
    public partial class UpdateDownloadProgress
    {
        /// <summary>
        /// Initializes a new instance of the UpdateDownloadProgress class.
        /// </summary>
        public UpdateDownloadProgress()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UpdateDownloadProgress class.
        /// </summary>

        /// <param name="downloadPhase">The download phase.
        /// Possible values include: &#39;Unknown&#39;, &#39;Initializing&#39;, &#39;Downloading&#39;,
        /// &#39;Verifying&#39;</param>

        /// <param name="percentComplete">Percentage of completion.
        /// </param>

        /// <param name="totalBytesToDownload">Total bytes to download.
        /// </param>

        /// <param name="totalBytesDownloaded">Total bytes downloaded.
        /// </param>

        /// <param name="numberOfUpdatesToDownload">Number of updates to download.
        /// </param>

        /// <param name="numberOfUpdatesDownloaded">Number of updates downloaded.
        /// </param>
        public UpdateDownloadProgress(string downloadPhase = default(string), int? percentComplete = default(int?), double? totalBytesToDownload = default(double?), double? totalBytesDownloaded = default(double?), int? numberOfUpdatesToDownload = default(int?), int? numberOfUpdatesDownloaded = default(int?))

        {
            this.DownloadPhase = downloadPhase;
            this.PercentComplete = percentComplete;
            this.TotalBytesToDownload = totalBytesToDownload;
            this.TotalBytesDownloaded = totalBytesDownloaded;
            this.NumberOfUpdatesToDownload = numberOfUpdatesToDownload;
            this.NumberOfUpdatesDownloaded = numberOfUpdatesDownloaded;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets the download phase. Possible values include: &#39;Unknown&#39;, &#39;Initializing&#39;, &#39;Downloading&#39;, &#39;Verifying&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "downloadPhase")]
        public string DownloadPhase {get; private set; }

        /// <summary>
        /// Gets percentage of completion.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "percentComplete")]
        public int? PercentComplete {get; private set; }

        /// <summary>
        /// Gets total bytes to download.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalBytesToDownload")]
        public double? TotalBytesToDownload {get; private set; }

        /// <summary>
        /// Gets total bytes downloaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalBytesDownloaded")]
        public double? TotalBytesDownloaded {get; private set; }

        /// <summary>
        /// Gets number of updates to download.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfUpdatesToDownload")]
        public int? NumberOfUpdatesToDownload {get; private set; }

        /// <summary>
        /// Gets number of updates downloaded.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "numberOfUpdatesDownloaded")]
        public int? NumberOfUpdatesDownloaded {get; private set; }
    }
}