// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// Represents a share on the  Data Box Edge/Gateway device.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Share : ARMBaseModel
    {
        /// <summary>
        /// Initializes a new instance of the Share class.
        /// </summary>
        public Share()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Share class.
        /// </summary>

        /// <param name="id">The path ID that uniquely identifies the object.
        /// </param>

        /// <param name="name">The object name.
        /// </param>

        /// <param name="type">The hierarchical type of the object.
        /// </param>

        /// <param name="shareStatus">Current status of the share.
        /// Possible values include: &#39;Offline&#39;, &#39;Unknown&#39;, &#39;OK&#39;, &#39;Updating&#39;,
        /// &#39;NeedsAttention&#39;</param>

        /// <param name="monitoringStatus">Current monitoring status of the share.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="refreshDetails">Details of the refresh job on this share.
        /// </param>

        /// <param name="dataPolicy">Data policy of the share.
        /// Possible values include: &#39;Cloud&#39;, &#39;Local&#39;</param>

        /// <param name="description">Description for the share.
        /// </param>

        /// <param name="azureContainerInfo">Azure container mapping for the share.
        /// </param>

        /// <param name="accessProtocol">Access protocol to be used by the share.
        /// Possible values include: &#39;SMB&#39;, &#39;NFS&#39;</param>

        /// <param name="userAccessRights">Mapping of users and corresponding access rights on the share (required for
        /// SMB protocol).
        /// </param>

        /// <param name="clientAccessRights">List of IP addresses and corresponding access rights on the share(required
        /// for NFS protocol).
        /// </param>

        /// <param name="shareMappings">Share mount point to the role.
        /// </param>
        public Share(string shareStatus, string monitoringStatus, string accessProtocol, string id = default(string), string name = default(string), string type = default(string), RefreshDetails refreshDetails = default(RefreshDetails), string dataPolicy = default(string), string description = default(string), AzureContainerInfo azureContainerInfo = default(AzureContainerInfo), System.Collections.Generic.IList<UserAccessRight> userAccessRights = default(System.Collections.Generic.IList<UserAccessRight>), System.Collections.Generic.IList<ClientAccessRight> clientAccessRights = default(System.Collections.Generic.IList<ClientAccessRight>), System.Collections.Generic.IList<MountPointMap> shareMappings = default(System.Collections.Generic.IList<MountPointMap>))

        : base(id, name, type)
        {
            this.ShareStatus = shareStatus;
            this.MonitoringStatus = monitoringStatus;
            this.RefreshDetails = refreshDetails;
            this.DataPolicy = dataPolicy;
            this.Description = description;
            this.AzureContainerInfo = azureContainerInfo;
            this.AccessProtocol = accessProtocol;
            this.UserAccessRights = userAccessRights;
            this.ClientAccessRights = clientAccessRights;
            this.ShareMappings = shareMappings;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets current status of the share. Possible values include: &#39;Offline&#39;, &#39;Unknown&#39;, &#39;OK&#39;, &#39;Updating&#39;, &#39;NeedsAttention&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareStatus")]
        public string ShareStatus {get; set; }

        /// <summary>
        /// Gets or sets current monitoring status of the share. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.monitoringStatus")]
        public string MonitoringStatus {get; set; }

        /// <summary>
        /// Gets or sets details of the refresh job on this share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.refreshDetails")]
        public RefreshDetails RefreshDetails {get; set; }

        /// <summary>
        /// Gets or sets data policy of the share. Possible values include: &#39;Cloud&#39;, &#39;Local&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.dataPolicy")]
        public string DataPolicy {get; set; }

        /// <summary>
        /// Gets or sets description for the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets azure container mapping for the share.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.azureContainerInfo")]
        public AzureContainerInfo AzureContainerInfo {get; set; }

        /// <summary>
        /// Gets or sets access protocol to be used by the share. Possible values include: &#39;SMB&#39;, &#39;NFS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.accessProtocol")]
        public string AccessProtocol {get; set; }

        /// <summary>
        /// Gets or sets mapping of users and corresponding access rights on the share
        /// (required for SMB protocol).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.userAccessRights")]
        public System.Collections.Generic.IList<UserAccessRight> UserAccessRights {get; set; }

        /// <summary>
        /// Gets or sets list of IP addresses and corresponding access rights on the
        /// share(required for NFS protocol).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.clientAccessRights")]
        public System.Collections.Generic.IList<ClientAccessRight> ClientAccessRights {get; set; }

        /// <summary>
        /// Gets share mount point to the role.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.shareMappings")]
        public System.Collections.Generic.IList<MountPointMap> ShareMappings {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ShareStatus == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ShareStatus");
            }
            if (this.MonitoringStatus == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "MonitoringStatus");
            }
            if (this.AccessProtocol == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccessProtocol");
            }





            if (this.AzureContainerInfo != null)
            {
                this.AzureContainerInfo.Validate();
            }

            if (this.UserAccessRights != null)
            {
                foreach (var element in this.UserAccessRights)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ClientAccessRights != null)
            {
                foreach (var element in this.ClientAccessRights)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ShareMappings != null)
            {
                foreach (var element in this.ShareMappings)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}