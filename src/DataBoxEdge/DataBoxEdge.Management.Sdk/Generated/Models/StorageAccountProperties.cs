// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.DataBoxEdge.Models
{
    using System.Linq;

    /// <summary>
    /// The storage account properties.
    /// </summary>
    public partial class StorageAccountProperties
    {
        /// <summary>
        /// Initializes a new instance of the StorageAccountProperties class.
        /// </summary>
        public StorageAccountProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StorageAccountProperties class.
        /// </summary>

        /// <param name="description">Description for the storage Account.
        /// </param>

        /// <param name="storageAccountStatus">Current status of the storage account
        /// Possible values include: &#39;OK&#39;, &#39;Offline&#39;, &#39;Unknown&#39;, &#39;Updating&#39;,
        /// &#39;NeedsAttention&#39;</param>

        /// <param name="dataPolicy">Data policy of the storage Account.
        /// Possible values include: &#39;Cloud&#39;, &#39;Local&#39;</param>

        /// <param name="storageAccountCredentialId">Storage Account Credential Id
        /// </param>

        /// <param name="blobEndpoint">BlobEndpoint of Storage Account
        /// </param>

        /// <param name="containerCount">The Container Count. Present only for Storage Accounts with DataPolicy set
        /// to Cloud.
        /// </param>
        public StorageAccountProperties(string description = default(string), string storageAccountStatus = default(string), string dataPolicy = default(string), string storageAccountCredentialId = default(string), string blobEndpoint = default(string), int? containerCount = default(int?))

        {
            this.Description = description;
            this.StorageAccountStatus = storageAccountStatus;
            this.DataPolicy = dataPolicy;
            this.StorageAccountCredentialId = storageAccountCredentialId;
            this.BlobEndpoint = blobEndpoint;
            this.ContainerCount = containerCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets description for the storage Account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets current status of the storage account Possible values include: &#39;OK&#39;, &#39;Offline&#39;, &#39;Unknown&#39;, &#39;Updating&#39;, &#39;NeedsAttention&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountStatus")]
        public string StorageAccountStatus {get; set; }

        /// <summary>
        /// Gets or sets data policy of the storage Account. Possible values include: &#39;Cloud&#39;, &#39;Local&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataPolicy")]
        public string DataPolicy {get; set; }

        /// <summary>
        /// Gets or sets storage Account Credential Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "storageAccountCredentialId")]
        public string StorageAccountCredentialId {get; set; }

        /// <summary>
        /// Gets blobEndpoint of Storage Account
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "blobEndpoint")]
        public string BlobEndpoint {get; private set; }

        /// <summary>
        /// Gets the Container Count. Present only for Storage Accounts with DataPolicy
        /// set to Cloud.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerCount")]
        public int? ContainerCount {get; private set; }
    }
}