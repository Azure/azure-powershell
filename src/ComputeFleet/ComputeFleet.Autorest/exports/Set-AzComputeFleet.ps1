# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Set Fleet resource
.Description
Set Fleet resource
.Example
Set-AzComputeFleet -SubscriptionId "00000000-0000-0000-0000-000000000000" -ResourceGroupName azure-rg-test -FleetName testFleet -Resource <resource>

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IFleet
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IFleet
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <IFleet>: Identity Parameter
  [Id <String>]: Resource identity path
  [FleetName <String>]: Fleet resource name
  [ResourceGroupName <String>]: Resource group name
  [SubscriptionId <String>]: Microsoft Azure subscription id
.Link
https://learn.microsoft.com/powershell/module/az.computefleet/set-azcomputefleet
#>
function Set-AzComputeFleet {
    [OutputType([Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IFleet])]
    [CmdletBinding(PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
    param(
        [Parameter(ParameterSetName='Set', Mandatory)]
        [Parameter(ParameterSetName='SetExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Runtime.DefaultInfo(Script = '(Get-AzContext).Subscription.Id')]
        [System.String]
        # Microsoft Azure subscription id
        ${SubscriptionId},

        [Parameter(ParameterSetName='Set', Mandatory)]
        [Parameter(ParameterSetName='SetExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Path')]
        [System.String]
        # Resource group name
        ${ResourceGroupName},

        [Parameter(ParameterSetName='Set', Mandatory)]
        [Parameter(ParameterSetName='SetExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Path')]
        [System.String]
        # Fleet name
        ${FleetName},

        [Parameter(ParameterSetName='Set', Mandatory, ValueFromPipeline)]
        [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IFleet]
        # An Compute Fleet resource
        ${Resource},

        [Parameter(ParameterSetName='SetExpanded', Mandatory)]
        [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Path')]
        [System.String]
        # The geo-location where the resource lives
        ${Location},
        
        [Parameter(ParameterSetName='SetViaIdentity', Mandatory, ValueFromPipeline)]
        [Parameter(ParameterSetName='SetViaIdentityExpanded', Mandatory, ValueFromPipeline)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Path')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IFleetIdentity]
        # Identity Parameter
        ${InputObject},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.ILocationProfile]
        # The list of location profiles
        ${LocationProfiles},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # The flag that enables or disables hibernation capability on the VM
        ${HibernationEnabled},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # The flag that enables or disables a capability to have one or more managed data disks with UltraSSD_LRS storage account type on the VM or VMSS.Managed disks with storage account type UltraSSD_LRS can be added to a virtual machine or virtual machine scale set only if this property is enabled
        ${UltraSSDEnabled},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IBaseVirtualMachineProfile]
        # Base Virtual Machine Profile Properties to be specified according to \"specification/compute/resource-manager/Microsoft.Compute/ComputeRP/stable/{computeApiVersion}/virtualMachineScaleSet.json#/definitions/VirtualMachineScaleSetVMProfile\"
        ${BaseVirtualMachineProfile},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # Specifies the Microsoft.Compute API version to use when creating underlying Virtual Machine scale sets and Virtual Machines.The default value will be the latest supported computeApiVersion by Compute Fleet
        ${ComputeApiVersion},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Int]
        # Specifies the number of fault domains to use when creating the underlying VMSS.A fault domain is a logical group of hardware within an Azure datacenter.VMs in the same fault domain share a common power source and network switch.If not specified, defaults to 1, which represents \"Max Spreading\" (using as many fault domains as possible).This property cannot be updated.
        ${PlatformFaultDomainCount},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.ManagedServiceIdentityType]
        # The type of managed identity assigned to this resource
        ${IdentityType},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IManagedServiceIdentitySetUserAssignedIdentities]
        # The identities assigned to this resource by the user
        ${UserAssignedIdentities},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # A user defined name of the 3rd Party Artifact that is being procured
        ${PlanName},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding
        ${PlanProduct},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # A publisher provided promotion code as provisioned in Data Market for the said product/artifact
        ${PlanPromotionCode},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic
        ${PlanPublisher},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # The version of the desired product/artifact
        ${PlanVersion},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy]
        # Allocation strategy to follow when determining the VM sizes distribution for Regular VMs
        ${RegularPriorityAllocationStrategy},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Int]
        # Total capacity to achieve. It is currently in terms of number of VMs
        ${RegularPriorityProfileCapacity},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Int]
        # Minimum capacity to achieve which cannot be updated. If we will not be able to "guarantee" minimum capacity, we will reject the request in the sync path itself
        ${RegularPriorityProfileMinCapacity},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.SpotAllocationStrategy]
        # Allocation strategy to follow when determining the VM sizes distribution for Spot VMs
        ${SpotPriorityProfileAllocationStrategy},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Int]
        # Total capacity to achieve. It is currently in terms of number of VMs
        ${SpotPriorityProfileCapacity},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.EvictionPolicy]
        # Eviction Policy to follow when evicting Spot VMs
        ${SpotPriorityProfileEvictionPolicy},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Management.Automation.SwitchParameter]
        # Flag to enable/disable continuous goal seeking for the desired capacity and restoration of evicted Spot VMs.If maintain is enabled, AzureFleetRP will use all VM sizes in vmSizesProfile to create new VMs (if VMs are evicted deleted)or update existing VMs with new VM sizes (if VMs are evicted deallocated or failed to allocate due to capacity constraint) in order to achieve the desired capacity.Maintain is enabled by default
        ${SpotPriorityProfileMaintain},
        
        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Float]
        # Price per hour of each Spot VM will never exceed this
        ${SpotPriorityProfileMaxPricePerVM},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.Int]
        # Minimum capacity to achieve which cannot be updated. If we will not be able to ""guarantee"" minimum capacity, we will reject the request in the sync path itself
        ${SpotPriorityProfileMinCapacity},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IFleetSetTags]
        # Resource tags
        ${Tags},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IVMAttributes]
        # Attribute based Fleet
        ${VMAttributes},
        
        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Models.IVMSizeProfile]
        # List of VM sizes supported for Compute Fleet
        ${VMSizesProfile},

        [Parameter(ParameterSetName='SetExpanded')]
        [Parameter(ParameterSetName='SetViaIdentityExpanded')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Body')]
        [System.String]
        # Zones in which the Compute Fleet is available
        ${Zones},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command as a job
        ${AsJob},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Wait for .NET debugger to attach
        ${Break},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be appended to the front of the pipeline
        ${HttpPipelineAppend},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Runtime.SendAsyncStep[]]
        # SendAsync Pipeline Steps to be prepended to the front of the pipeline
        ${HttpPipelinePrepend},

        [Parameter()]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Run the command asynchronously
        ${NoWait},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [System.Uri]
        # The URI for the proxy server to use
        ${Proxy},

        [Parameter(DontShow)]
        [ValidateNotNull()]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [System.Management.Automation.PSCredential]
        # Credentials for a proxy server to use for the remote call
        ${ProxyCredential},

        [Parameter(DontShow)]
        [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Category('Runtime')]
        [System.Management.Automation.SwitchParameter]
        # Use the default credentials for the proxy
        ${ProxyUseDefaultCredentials}
    )

    begin {
        try {
            $outBuffer = $null
            if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
                $PSBoundParameters['OutBuffer'] = 1
            }
            $parameterSet = $PSCmdlet.ParameterSetName

            if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
                [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
            }         
            $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
            if ($preTelemetryId -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
                [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
            } else {
                $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
                if ($internalCalledCmdlets -eq '') {
                    [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
                } else {
                    [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
                }
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
            }

            $mapping = @{
                Set = 'Az.ComputeFleet.private\Set-Fleet_Update';
                SetExpanded = 'Az.ComputeFleet.private\Set-Fleet_UpdateExpanded';
                SetViaIdentity = 'Az.ComputeFleet.private\Set-Fleet_UpdateViaIdentity';
                SetViaIdentityExpanded = 'Az.ComputeFleet.private\Set-Fleet_UpdateViaIdentityExpanded';
            }
            $cmdInfo = Get-Command -Name $mapping[$parameterSet]
            [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
                [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
                [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
            }
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
            $scriptCmd = {& $wrappedCmd @PSBoundParameters}
            $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
            $steppablePipeline.Begin($PSCmdlet)
        } catch {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            throw
        }
    }

    process {
        try {
            $steppablePipeline.Process($_)
        } catch {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            throw
        }

        finally {
            $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
            $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }

    }
    end {
        try {
            $steppablePipeline.End()

            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
            if ($preTelemetryId -eq '') {
                [Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

        } catch {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
            throw
        }
    }
}