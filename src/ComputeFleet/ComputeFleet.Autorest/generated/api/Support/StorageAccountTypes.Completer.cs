// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/powershell@3.0.512)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support
{

    /// <summary>
    /// Specifies the storage account type for the managed disk. Managed OS disk
    /// storage account type can only be set when you create the scale set. NOTE:
    /// UltraSSD_LRS can only be used with data disks. It cannot be used with OS Disk.
    /// Standard_LRS uses Standard HDD. StandardSSD_LRS uses Standard SSD. Premium_LRS
    /// uses Premium SSD. UltraSSD_LRS uses Ultra disk. Premium_ZRS uses Premium SSD
    /// zone redundant storage. StandardSSD_ZRS uses Standard SSD zone redundant
    /// storage. For more information regarding disks supported for Windows Virtual
    /// Machines, refer to
    /// https://docs.microsoft.com/azure/virtual-machines/windows/disks-types and, for
    /// Linux Virtual Machines, refer to
    /// https://docs.microsoft.com/azure/virtual-machines/linux/disks-types
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.StorageAccountTypesTypeConverter))]
    public partial struct StorageAccountTypes :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Standard_LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Standard_LRS'", "Standard_LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "Standard_LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Premium_LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Premium_LRS'", "Premium_LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "Premium_LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StandardSSD_LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StandardSSD_LRS'", "StandardSSD_LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "StandardSSD_LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "UltraSSD_LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'UltraSSD_LRS'", "UltraSSD_LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "UltraSSD_LRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Premium_ZRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Premium_ZRS'", "Premium_ZRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "Premium_ZRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StandardSSD_ZRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StandardSSD_ZRS'", "StandardSSD_ZRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "StandardSSD_ZRS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PremiumV2_LRS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PremiumV2_LRS'", "PremiumV2_LRS", global::System.Management.Automation.CompletionResultType.ParameterValue, "PremiumV2_LRS");
            }
        }
    }
}