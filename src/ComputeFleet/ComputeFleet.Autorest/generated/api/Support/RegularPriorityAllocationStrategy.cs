// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/powershell@3.0.512)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support
{

    /// <summary>Regular VM Allocation strategy types for Compute Fleet</summary>
    public partial struct RegularPriorityAllocationStrategy :
        System.IEquatable<RegularPriorityAllocationStrategy>
    {
        /// <summary>Default. VM sizes distribution will be determined to optimize for price.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy LowestPrice = @"LowestPrice";

        /// <summary>
        /// VM sizes distribution will be determined to optimize for the 'priority' as specified for each vm size.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy Prioritized = @"Prioritized";

        /// <summary>
        /// the value for an instance of the <see cref="RegularPriorityAllocationStrategy" /> Enum.
        /// </summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to RegularPriorityAllocationStrategy</summary>
        /// <param name="value">the value to convert to an instance of <see cref="RegularPriorityAllocationStrategy" />.</param>
        internal static object CreateFrom(object value)
        {
            return new RegularPriorityAllocationStrategy(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type RegularPriorityAllocationStrategy</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>
        /// Compares values of enum type RegularPriorityAllocationStrategy (override for Object)
        /// </summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is RegularPriorityAllocationStrategy && Equals((RegularPriorityAllocationStrategy)obj);
        }

        /// <summary>Returns hashCode for enum RegularPriorityAllocationStrategy</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>
        /// Creates an instance of the <see cref="RegularPriorityAllocationStrategy"/> Enum class.
        /// </summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private RegularPriorityAllocationStrategy(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for RegularPriorityAllocationStrategy</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to RegularPriorityAllocationStrategy</summary>
        /// <param name="value">the value to convert to an instance of <see cref="RegularPriorityAllocationStrategy" />.</param>

        public static implicit operator RegularPriorityAllocationStrategy(string value)
        {
            return new RegularPriorityAllocationStrategy(value);
        }

        /// <summary>Implicit operator to convert RegularPriorityAllocationStrategy to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="RegularPriorityAllocationStrategy" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum RegularPriorityAllocationStrategy</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy e1, Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum RegularPriorityAllocationStrategy</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy e1, Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.RegularPriorityAllocationStrategy e2)
        {
            return e2.Equals(e1);
        }
    }
}