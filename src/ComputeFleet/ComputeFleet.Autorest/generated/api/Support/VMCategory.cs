// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.10.3, generator: @autorest/powershell@3.0.512)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support
{

    /// <summary>
    /// VMCategories defined for Azure VMs.
    /// See: https://learn.microsoft.com/en-us/azure/virtual-machines/sizes/overview?tabs=breakdownseries%2Cgeneralsizelist%2Ccomputesizelist%2Cmemorysizelist%2Cstoragesizelist%2Cgpusizelist%2Cfpgasizelist%2Chpcsizelist#general-purpose
    /// </summary>
    public partial struct VMCategory :
        System.IEquatable<VMCategory>
    {
        /// <summary>
        /// Compute optimized VM sizes have a high CPU-to-memory ratio. These sizes are good for medium traffic web servers, network
        /// appliances, batch processes, and application servers.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory ComputeOptimized = @"ComputeOptimized";

        /// <summary>
        /// FPGA optimized VM sizes are specialized virtual machines available with single or multiple FPGA.
        /// These sizes are designed for compute-intensive workloads. This article provides information about the number and type
        /// of FPGA, vCPUs, data disks, and NICs.
        /// Storage throughput and network bandwidth are also included for each size in this grouping.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory FpgaAccelerated = @"FpgaAccelerated";

        /// <summary>
        /// General purpose VM sizes provide balanced CPU-to-memory ratio. Ideal for testing and development, small to medium databases,
        /// and low to medium traffic web servers.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory GeneralPurpose = @"GeneralPurpose";

        /// <summary>
        /// GPU optimized VM sizes are specialized virtual machines available with single, multiple, or fractional GPUs.
        /// These sizes are designed for compute-intensive, graphics-intensive, and visualization workloads.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory GpuAccelerated = @"GpuAccelerated";

        /// <summary>
        /// Azure High Performance Compute VMs are optimized for various HPC workloads such as computational fluid dynamics, finite
        /// element analysis, frontend and backend EDA,
        /// rendering, molecular dynamics, computational geo science, weather simulation, and financial risk analysis.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory HighPerformanceCompute = @"HighPerformanceCompute";

        /// <summary>
        /// Memory optimized VM sizes offer a high memory-to-CPU ratio that is great for relational database servers, medium to large
        /// caches, and in-memory analytics.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory MemoryOptimized = @"MemoryOptimized";

        /// <summary>
        /// Storage optimized virtual machine (VM) sizes offer high disk throughput and IO, and are ideal for Big Data, SQL, NoSQL
        /// databases, data warehousing, and large transactional databases.
        /// Examples include Cassandra, MongoDB, Cloudera, and Redis.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory StorageOptimized = @"StorageOptimized";

        /// <summary>the value for an instance of the <see cref="VMCategory" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to VMCategory</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VMCategory" />.</param>
        internal static object CreateFrom(object value)
        {
            return new VMCategory(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type VMCategory</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type VMCategory (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is VMCategory && Equals((VMCategory)obj);
        }

        /// <summary>Returns hashCode for enum VMCategory</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for VMCategory</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Creates an instance of the <see cref="VMCategory"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private VMCategory(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Implicit operator to convert string to VMCategory</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VMCategory" />.</param>

        public static implicit operator VMCategory(string value)
        {
            return new VMCategory(value);
        }

        /// <summary>Implicit operator to convert VMCategory to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="VMCategory" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum VMCategory</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory e1, Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum VMCategory</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory e1, Microsoft.Azure.PowerShell.Cmdlets.ComputeFleet.Support.VMCategory e2)
        {
            return e2.Equals(e1);
        }
    }
}