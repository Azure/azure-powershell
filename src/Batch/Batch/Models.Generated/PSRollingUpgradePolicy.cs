// -----------------------------------------------------------------------------
﻿//
﻿// Copyright Microsoft Corporation
﻿// Licensed under the Apache License, Version 2.0 (the "License");
﻿// you may not use this file except in compliance with the License.
﻿// You may obtain a copy of the License at
﻿// http://www.apache.org/licenses/LICENSE-2.0
﻿// Unless required by applicable law or agreed to in writing, software
﻿// distributed under the License is distributed on an "AS IS" BASIS,
﻿// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
﻿// See the License for the specific language governing permissions and
﻿// limitations under the License.
﻿// -----------------------------------------------------------------------------
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:5.0.17
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Azure.Commands.Batch.Models
{
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using Microsoft.Azure.Batch;
    
    
    public partial class PSRollingUpgradePolicy
    {
        
        internal Microsoft.Azure.Batch.RollingUpgradePolicy omObject;
        
        public PSRollingUpgradePolicy()
        {
            this.omObject = new Microsoft.Azure.Batch.RollingUpgradePolicy();
        }
        
        internal PSRollingUpgradePolicy(Microsoft.Azure.Batch.RollingUpgradePolicy omObject)
        {
            if ((omObject == null))
            {
                throw new System.ArgumentNullException("omObject");
            }
            this.omObject = omObject;
        }
        
        public System.Boolean? EnableCrossZoneUpgrade
        {
            get
            {
                return this.omObject.EnableCrossZoneUpgrade;
            }
            set
            {
                this.omObject.EnableCrossZoneUpgrade = value;
            }
        }
        
        public System.Int32? MaxBatchInstancePercent
        {
            get
            {
                return this.omObject.MaxBatchInstancePercent;
            }
            set
            {
                this.omObject.MaxBatchInstancePercent = value;
            }
        }
        
        public System.Int32? MaxUnhealthyInstancePercent
        {
            get
            {
                return this.omObject.MaxUnhealthyInstancePercent;
            }
            set
            {
                this.omObject.MaxUnhealthyInstancePercent = value;
            }
        }
        
        public System.Int32? MaxUnhealthyUpgradedInstancePercent
        {
            get
            {
                return this.omObject.MaxUnhealthyUpgradedInstancePercent;
            }
            set
            {
                this.omObject.MaxUnhealthyUpgradedInstancePercent = value;
            }
        }
        
        public System.TimeSpan? PauseTimeBetweenBatches
        {
            get
            {
                return this.omObject.PauseTimeBetweenBatches;
            }
            set
            {
                this.omObject.PauseTimeBetweenBatches = value;
            }
        }
        
        public System.Boolean? PrioritizeUnhealthyInstances
        {
            get
            {
                return this.omObject.PrioritizeUnhealthyInstances;
            }
            set
            {
                this.omObject.PrioritizeUnhealthyInstances = value;
            }
        }
        
        public System.Boolean? RollbackFailedInstancesOnPolicyBreach
        {
            get
            {
                return this.omObject.RollbackFailedInstancesOnPolicyBreach;
            }
            set
            {
                this.omObject.RollbackFailedInstancesOnPolicyBreach = value;
            }
        }
    }
}
