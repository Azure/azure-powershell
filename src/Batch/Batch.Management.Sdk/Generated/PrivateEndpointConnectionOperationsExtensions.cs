// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Batch
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for PrivateEndpointConnectionOperations
    /// </summary>
    public static partial class PrivateEndpointConnectionOperationsExtensions
    {
        /// <summary>
        /// Lists all of the private endpoint connections in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='maxresults'>
        /// The maximum number of items to return in the response.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateEndpointConnection> ListByBatchAccount(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, int? maxresults = default(int?))
        {
                return ((IPrivateEndpointConnectionOperations)operations).ListByBatchAccountAsync(resourceGroupName, accountName, maxresults).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the private endpoint connections in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='maxresults'>
        /// The maximum number of items to return in the response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateEndpointConnection>> ListByBatchAccountAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, int? maxresults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBatchAccountWithHttpMessagesAsync(resourceGroupName, accountName, maxresults, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets information about the specified private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        public static PrivateEndpointConnection Get(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionOperations)operations).GetAsync(resourceGroupName, accountName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about the specified private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> GetAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Updates the properties of an existing private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='ifMatch'>
        /// The state (ETag) version of the private endpoint connection to update. This
        /// value can be omitted or set to &#34;*&#34; to apply the operation unconditionally.
        /// </param>
        public static PrivateEndpointConnection Update(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState), string ifMatch = default(string))
        {
                return ((IPrivateEndpointConnectionOperations)operations).UpdateAsync(resourceGroupName, accountName, privateEndpointConnectionName, privateLinkServiceConnectionState, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the properties of an existing private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='ifMatch'>
        /// The state (ETag) version of the private endpoint connection to update. This
        /// value can be omitted or set to &#34;*&#34; to apply the operation unconditionally.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> UpdateAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionName, privateLinkServiceConnectionState, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        public static PrivateEndpointConnectionDeleteHeaders Delete(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionOperations)operations).DeleteAsync(resourceGroupName, accountName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnectionDeleteHeaders> DeleteAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Updates the properties of an existing private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='ifMatch'>
        /// The state (ETag) version of the private endpoint connection to update. This
        /// value can be omitted or set to &#34;*&#34; to apply the operation unconditionally.
        /// </param>
        public static PrivateEndpointConnection BeginUpdate(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState), string ifMatch = default(string))
        {
                return ((IPrivateEndpointConnectionOperations)operations).BeginUpdateAsync(resourceGroupName, accountName, privateEndpointConnectionName, privateLinkServiceConnectionState, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Updates the properties of an existing private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='ifMatch'>
        /// The state (ETag) version of the private endpoint connection to update. This
        /// value can be omitted or set to &#34;*&#34; to apply the operation unconditionally.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnection> BeginUpdateAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, PrivateLinkServiceConnectionState privateLinkServiceConnectionState = default(PrivateLinkServiceConnectionState), string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionName, privateLinkServiceConnectionState, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes the specified private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        public static PrivateEndpointConnectionDeleteHeaders BeginDelete(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName)
        {
                return ((IPrivateEndpointConnectionOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, privateEndpointConnectionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes the specified private endpoint connection.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='privateEndpointConnectionName'>
        /// The private endpoint connection name. This must be unique within the
        /// account.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<PrivateEndpointConnectionDeleteHeaders> BeginDeleteAsync(this IPrivateEndpointConnectionOperations operations, string resourceGroupName, string accountName, string privateEndpointConnectionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, privateEndpointConnectionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Lists all of the private endpoint connections in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<PrivateEndpointConnection> ListByBatchAccountNext(this IPrivateEndpointConnectionOperations operations, string nextPageLink)
        {
                return ((IPrivateEndpointConnectionOperations)operations).ListByBatchAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the private endpoint connections in the specified account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<PrivateEndpointConnection>> ListByBatchAccountNextAsync(this IPrivateEndpointConnectionOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBatchAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
