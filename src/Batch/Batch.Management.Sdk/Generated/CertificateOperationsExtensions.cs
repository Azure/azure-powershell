// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Batch
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for CertificateOperations
    /// </summary>
    public static partial class CertificateOperationsExtensions
    {
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='maxresults'>
        /// The maximum number of items to return in the response.
        /// </param>
        /// <param name='select'>
        /// Comma separated list of properties that should be returned. e.g.
        /// &#34;properties/provisioningState&#34;. Only top level properties under properties/
        /// are valid for selection.
        /// </param>
        /// <param name='filter'>
        /// OData filter expression. Valid properties for filtering are
        /// &#34;properties/provisioningState&#34;,
        /// &#34;properties/provisioningStateTransitionTime&#34;, &#34;name&#34;.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Certificate> ListByBatchAccount(this ICertificateOperations operations, string resourceGroupName, string accountName, int? maxresults = default(int?), string select = default(string), string filter = default(string))
        {
                return ((ICertificateOperations)operations).ListByBatchAccountAsync(resourceGroupName, accountName, maxresults, select, filter).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='maxresults'>
        /// The maximum number of items to return in the response.
        /// </param>
        /// <param name='select'>
        /// Comma separated list of properties that should be returned. e.g.
        /// &#34;properties/provisioningState&#34;. Only top level properties under properties/
        /// are valid for selection.
        /// </param>
        /// <param name='filter'>
        /// OData filter expression. Valid properties for filtering are
        /// &#34;properties/provisioningState&#34;,
        /// &#34;properties/provisioningStateTransitionTime&#34;, &#34;name&#34;.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Certificate>> ListByBatchAccountAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, int? maxresults = default(int?), string select = default(string), string filter = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBatchAccountWithHttpMessagesAsync(resourceGroupName, accountName, maxresults, select, filter, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='ifMatch'>
        /// The entity state (ETag) version of the certificate to update. A value of
        /// &#34;*&#34; can be used to apply the operation only if the certificate already
        /// exists. If omitted, this operation will always be applied.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Set to &#39;*&#39; to allow a new certificate to be created, but to prevent
        /// updating an existing certificate. Other values will be ignored.
        /// </param>
        public static Certificate Create(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, CertificateCreateOrUpdateParameters parameters, string ifMatch = default(string), string ifNoneMatch = default(string))
        {
                return ((ICertificateOperations)operations).CreateAsync(resourceGroupName, accountName, certificateName, parameters, ifMatch, ifNoneMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='ifMatch'>
        /// The entity state (ETag) version of the certificate to update. A value of
        /// &#34;*&#34; can be used to apply the operation only if the certificate already
        /// exists. If omitted, this operation will always be applied.
        /// </param>
        /// <param name='ifNoneMatch'>
        /// Set to &#39;*&#39; to allow a new certificate to be created, but to prevent
        /// updating an existing certificate. Other values will be ignored.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Certificate> CreateAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, CertificateCreateOrUpdateParameters parameters, string ifMatch = default(string), string ifNoneMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, certificateName, parameters, ifMatch, ifNoneMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='ifMatch'>
        /// The entity state (ETag) version of the certificate to update. This value
        /// can be omitted or set to &#34;*&#34; to apply the operation unconditionally.
        /// </param>
        public static Certificate Update(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, CertificateCreateOrUpdateParameters parameters, string ifMatch = default(string))
        {
                return ((ICertificateOperations)operations).UpdateAsync(resourceGroupName, accountName, certificateName, parameters, ifMatch).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='ifMatch'>
        /// The entity state (ETag) version of the certificate to update. This value
        /// can be omitted or set to &#34;*&#34; to apply the operation unconditionally.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Certificate> UpdateAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, CertificateCreateOrUpdateParameters parameters, string ifMatch = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, certificateName, parameters, ifMatch, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        public static CertificateDeleteHeaders Delete(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName)
        {
                return ((ICertificateOperations)operations).DeleteAsync(resourceGroupName, accountName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CertificateDeleteHeaders> DeleteAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, certificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        public static Certificate Get(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName)
        {
                return ((ICertificateOperations)operations).GetAsync(resourceGroupName, accountName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Certificate> GetAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, certificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// If you try to delete a certificate that is being used by a pool or compute
        /// node, the status of the certificate changes to deleteFailed. If you decide
        /// that you want to continue using the certificate, you can use this operation
        /// to set the status of the certificate back to active. If you intend to
        /// delete the certificate, you do not need to run this operation after the
        /// deletion failed. You must make sure that the certificate is not being used
        /// by any resources, and then you can try again to delete the certificate.
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        public static Certificate CancelDeletion(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName)
        {
                return ((ICertificateOperations)operations).CancelDeletionAsync(resourceGroupName, accountName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// If you try to delete a certificate that is being used by a pool or compute
        /// node, the status of the certificate changes to deleteFailed. If you decide
        /// that you want to continue using the certificate, you can use this operation
        /// to set the status of the certificate back to active. If you intend to
        /// delete the certificate, you do not need to run this operation after the
        /// deletion failed. You must make sure that the certificate is not being used
        /// by any resources, and then you can try again to delete the certificate.
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Certificate> CancelDeletionAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CancelDeletionWithHttpMessagesAsync(resourceGroupName, accountName, certificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        public static CertificateDeleteHeaders BeginDelete(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName)
        {
                return ((ICertificateOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, certificateName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='certificateName'>
        /// The identifier for the certificate. This must be made up of algorithm and
        /// thumbprint separated by a dash, and must match the certificate data in the
        /// request. For example SHA1-a3d1c5.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<CertificateDeleteHeaders> BeginDeleteAsync(this ICertificateOperations operations, string resourceGroupName, string accountName, string certificateName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, certificateName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<Certificate> ListByBatchAccountNext(this ICertificateOperations operations, string nextPageLink)
        {
                return ((ICertificateOperations)operations).ListByBatchAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Warning: This operation is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<Certificate>> ListByBatchAccountNextAsync(this ICertificateOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByBatchAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
