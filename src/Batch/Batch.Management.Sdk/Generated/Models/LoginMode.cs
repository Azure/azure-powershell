// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{

    /// <summary>
    /// Defines values for LoginMode.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum LoginMode
    {
        /// <summary>
        /// The LOGON32_LOGON_BATCH Win32 login mode. The batch login mode is
        /// recommended for long running parallel processes.
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "Batch")]
        Batch,
        /// <summary>
        /// The LOGON32_LOGON_INTERACTIVE Win32 login mode. Some applications require
        /// having permissions associated with the interactive login mode. If this is
        /// the case for an application used in your task, then this option is
        /// recommended.
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "Interactive")]
        Interactive
    }
    internal static class LoginModeEnumExtension
    {
        internal static string ToSerializedValue(this LoginMode? value)
        {
            return value == null ? null : ((LoginMode)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this LoginMode value)
        {
            switch( value )
            {
                case LoginMode.Batch:
                    return "Batch";
                case LoginMode.Interactive:
                    return "Interactive";
            }
            return null;
        }
        internal static LoginMode? ParseLoginMode(this string value)
        {
            switch( value )
            {
                case "Batch":
                    return LoginMode.Batch;
                case "Interactive":
                    return LoginMode.Interactive;
            }
            return null;
        }
    }
}