// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Contains information about a certificate.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class CertificateCreateOrUpdateParameters : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the CertificateCreateOrUpdateParameters class.
        /// </summary>
        public CertificateCreateOrUpdateParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateCreateOrUpdateParameters class.
        /// </summary>

        /// <param name="id">The ID of the resource.
        /// </param>

        /// <param name="name">The name of the resource.
        /// </param>

        /// <param name="type">The type of the resource.
        /// </param>

        /// <param name="etag">The ETag of the resource, used for concurrency statements.
        /// </param>

        /// <param name="thumbprintAlgorithm">This must match the first portion of the certificate name. Currently
        /// required to be &#39;SHA1&#39;.
        /// </param>

        /// <param name="thumbprint">This must match the thumbprint from the name.
        /// </param>

        /// <param name="format">The format of the certificate - either Pfx or Cer. If omitted, the default
        /// is Pfx.
        /// Possible values include: &#39;Pfx&#39;, &#39;Cer&#39;</param>

        /// <param name="data">The maximum size is 10KB.
        /// </param>

        /// <param name="password">This must not be specified if the certificate format is Cer.
        /// </param>
        public CertificateCreateOrUpdateParameters(string id = default(string), string name = default(string), string type = default(string), string etag = default(string), string thumbprintAlgorithm = default(string), string thumbprint = default(string), CertificateFormat format = default(CertificateFormat), string data = default(string), string password = default(string))

        : base(id, name, type, etag)
        {
            this.ThumbprintAlgorithm = thumbprintAlgorithm;
            this.Thumbprint = thumbprint;
            this.Format = format;
            this.Data = data;
            this.Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets this must match the first portion of the certificate name.
        /// Currently required to be &#39;SHA1&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.thumbprintAlgorithm")]
        public string ThumbprintAlgorithm {get; set; }

        /// <summary>
        /// Gets or sets this must match the thumbprint from the name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.thumbprint")]
        public string Thumbprint {get; set; }

        /// <summary>
        /// Gets or sets the format of the certificate - either Pfx or Cer. If omitted,
        /// the default is Pfx. Possible values include: &#39;Pfx&#39;, &#39;Cer&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.format")]
        public CertificateFormat Format {get; set; }

        /// <summary>
        /// Gets or sets the maximum size is 10KB.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.data")]
        public string Data {get; set; }

        /// <summary>
        /// Gets or sets this must not be specified if the certificate format is Cer.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.password")]
        public string Password {get; set; }
    }
}