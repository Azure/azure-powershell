// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Information used to connect to an Azure Fileshare.
    /// </summary>
    /// <remarks>
    /// Information used to connect to an Azure Fileshare.
    /// </remarks>
    public partial class AzureFileShareConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the AzureFileShareConfiguration class.
        /// </summary>
        public AzureFileShareConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AzureFileShareConfiguration class.
        /// </summary>

        /// <param name="accountName">The Azure Storage account name.
        /// </param>

        /// <param name="azureFileUrl">This is of the form &#39;https://{account}.file.core.windows.net/&#39;.
        /// </param>

        /// <param name="accountKey">The Azure Storage account key.
        /// </param>

        /// <param name="relativeMountPath">All file systems are mounted relative to the Batch mounts directory,
        /// accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </param>

        /// <param name="mountOptions">These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
        /// </param>
        public AzureFileShareConfiguration(string accountName, string azureFileUrl, string accountKey, string relativeMountPath, string mountOptions = default(string))

        {
            this.AccountName = accountName;
            this.AzureFileUrl = azureFileUrl;
            this.AccountKey = accountKey;
            this.RelativeMountPath = relativeMountPath;
            this.MountOptions = mountOptions;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Azure Storage account name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountName")]
        public string AccountName {get; set; }

        /// <summary>
        /// Gets or sets this is of the form
        /// &#39;https://{account}.file.core.windows.net/&#39;.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "azureFileUrl")]
        public string AzureFileUrl {get; set; }

        /// <summary>
        /// Gets or sets the Azure Storage account key.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "accountKey")]
        public string AccountKey {get; set; }

        /// <summary>
        /// Gets or sets all file systems are mounted relative to the Batch mounts
        /// directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment
        /// variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relativeMountPath")]
        public string RelativeMountPath {get; set; }

        /// <summary>
        /// Gets or sets these are &#39;net use&#39; options in Windows and &#39;mount&#39; options in
        /// Linux.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mountOptions")]
        public string MountOptions {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.AccountName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccountName");
            }
            if (this.AzureFileUrl == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AzureFileUrl");
            }
            if (this.AccountKey == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "AccountKey");
            }
            if (this.RelativeMountPath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RelativeMountPath");
            }





        }
    }
}