// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// AutoScale settings for the pool.
    /// </summary>
    /// <remarks>
    /// AutoScale settings for the pool.
    /// </remarks>
    public partial class AutoScaleSettings
    {
        /// <summary>
        /// Initializes a new instance of the AutoScaleSettings class.
        /// </summary>
        public AutoScaleSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the AutoScaleSettings class.
        /// </summary>

        /// <param name="formula">A formula for the desired number of compute nodes in the pool.
        /// </param>

        /// <param name="evaluationInterval">If omitted, the default value is 15 minutes (PT15M).
        /// </param>
        public AutoScaleSettings(string formula, System.TimeSpan? evaluationInterval = default(System.TimeSpan?))

        {
            this.Formula = formula;
            this.EvaluationInterval = evaluationInterval;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a formula for the desired number of compute nodes in the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "formula")]
        public string Formula {get; set; }

        /// <summary>
        /// Gets or sets if omitted, the default value is 15 minutes (PT15M).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "evaluationInterval")]
        public System.TimeSpan? EvaluationInterval {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Formula == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Formula");
            }

        }
    }
}