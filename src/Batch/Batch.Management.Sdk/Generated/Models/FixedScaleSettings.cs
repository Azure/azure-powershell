// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Fixed scale settings for the pool.
    /// </summary>
    /// <remarks>
    /// Fixed scale settings for the pool.
    /// </remarks>
    public partial class FixedScaleSettings
    {
        /// <summary>
        /// Initializes a new instance of the FixedScaleSettings class.
        /// </summary>
        public FixedScaleSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the FixedScaleSettings class.
        /// </summary>

        /// <param name="resizeTimeout">The default value is 15 minutes. Timeout values use ISO 8601 format. For
        /// example, use PT10M for 10 minutes. The minimum value is 5 minutes. If you
        /// specify a value less than 5 minutes, the Batch service rejects the request
        /// with an error; if you are calling the REST API directly, the HTTP status
        /// code is 400 (Bad Request).
        /// </param>

        /// <param name="targetDedicatedNodes">At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
        /// </param>

        /// <param name="targetLowPriorityNodes">At least one of targetDedicatedNodes, targetLowPriorityNodes must be set.
        /// </param>

        /// <param name="nodeDeallocationOption">If omitted, the default value is Requeue.
        /// Possible values include: &#39;Requeue&#39;, &#39;Terminate&#39;, &#39;TaskCompletion&#39;,
        /// &#39;RetainedData&#39;</param>
        public FixedScaleSettings(System.TimeSpan? resizeTimeout = default(System.TimeSpan?), int? targetDedicatedNodes = default(int?), int? targetLowPriorityNodes = default(int?), ComputeNodeDeallocationOption? nodeDeallocationOption = default(ComputeNodeDeallocationOption?))

        {
            this.ResizeTimeout = resizeTimeout;
            this.TargetDedicatedNodes = targetDedicatedNodes;
            this.TargetLowPriorityNodes = targetLowPriorityNodes;
            this.NodeDeallocationOption = nodeDeallocationOption;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the default value is 15 minutes. Timeout values use ISO 8601
        /// format. For example, use PT10M for 10 minutes. The minimum value is 5
        /// minutes. If you specify a value less than 5 minutes, the Batch service
        /// rejects the request with an error; if you are calling the REST API
        /// directly, the HTTP status code is 400 (Bad Request).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resizeTimeout")]
        public System.TimeSpan? ResizeTimeout {get; set; }

        /// <summary>
        /// Gets or sets at least one of targetDedicatedNodes, targetLowPriorityNodes
        /// must be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDedicatedNodes")]
        public int? TargetDedicatedNodes {get; set; }

        /// <summary>
        /// Gets or sets at least one of targetDedicatedNodes, targetLowPriorityNodes
        /// must be set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetLowPriorityNodes")]
        public int? TargetLowPriorityNodes {get; set; }

        /// <summary>
        /// Gets or sets if omitted, the default value is Requeue. Possible values include: &#39;Requeue&#39;, &#39;Terminate&#39;, &#39;TaskCompletion&#39;, &#39;RetainedData&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeDeallocationOption")]
        public ComputeNodeDeallocationOption? NodeDeallocationOption {get; set; }
    }
}