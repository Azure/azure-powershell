// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// A network security group rule to apply to an inbound endpoint.
    /// </summary>
    /// <remarks>
    /// A network security group rule to apply to an inbound endpoint.
    /// </remarks>
    public partial class NetworkSecurityGroupRule
    {
        /// <summary>
        /// Initializes a new instance of the NetworkSecurityGroupRule class.
        /// </summary>
        public NetworkSecurityGroupRule()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkSecurityGroupRule class.
        /// </summary>

        /// <param name="priority">Priorities within a pool must be unique and are evaluated in order of
        /// priority. The lower the number the higher the priority. For example, rules
        /// could be specified with order numbers of 150, 250, and 350. The rule with
        /// the order number of 150 takes precedence over the rule that has an order of
        /// 250. Allowed priorities are 150 to 4096. If any reserved or duplicate
        /// values are provided the request fails with HTTP status code 400.
        /// </param>

        /// <param name="access">The action that should be taken for a specified IP address, subnet range or
        /// tag.
        /// Possible values include: &#39;Allow&#39;, &#39;Deny&#39;</param>

        /// <param name="sourceAddressPrefix">Valid values are a single IP address (i.e. 10.10.10.10), IP subnet (i.e.
        /// 192.168.1.0/24), default tag, or * (for all addresses).  If any other
        /// values are provided the request fails with HTTP status code 400.
        /// </param>

        /// <param name="sourcePortRanges">Valid values are &#39;*&#39; (for all ports 0 - 65535) or arrays of ports or port
        /// ranges (i.e. 100-200). The ports should in the range of 0 to 65535 and the
        /// port ranges or ports can&#39;t overlap. If any other values are provided the
        /// request fails with HTTP status code 400. Default value will be *.
        /// </param>
        public NetworkSecurityGroupRule(int priority, NetworkSecurityGroupRuleAccess access, string sourceAddressPrefix, System.Collections.Generic.IList<string> sourcePortRanges = default(System.Collections.Generic.IList<string>))

        {
            this.Priority = priority;
            this.Access = access;
            this.SourceAddressPrefix = sourceAddressPrefix;
            this.SourcePortRanges = sourcePortRanges;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets priorities within a pool must be unique and are evaluated in
        /// order of priority. The lower the number the higher the priority. For
        /// example, rules could be specified with order numbers of 150, 250, and 350.
        /// The rule with the order number of 150 takes precedence over the rule that
        /// has an order of 250. Allowed priorities are 150 to 4096. If any reserved or
        /// duplicate values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "priority")]
        public int Priority {get; set; }

        /// <summary>
        /// Gets or sets the action that should be taken for a specified IP address,
        /// subnet range or tag. Possible values include: &#39;Allow&#39;, &#39;Deny&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "access")]
        public NetworkSecurityGroupRuleAccess Access {get; set; }

        /// <summary>
        /// Gets or sets valid values are a single IP address (i.e. 10.10.10.10), IP
        /// subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).  If
        /// any other values are provided the request fails with HTTP status code 400.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceAddressPrefix")]
        public string SourceAddressPrefix {get; set; }

        /// <summary>
        /// Gets or sets valid values are &#39;*&#39; (for all ports 0 - 65535) or arrays of
        /// ports or port ranges (i.e. 100-200). The ports should in the range of 0 to
        /// 65535 and the port ranges or ports can&#39;t overlap. If any other values are
        /// provided the request fails with HTTP status code 400. Default value will be
        /// *.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourcePortRanges")]
        public System.Collections.Generic.IList<string> SourcePortRanges {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.SourceAddressPrefix == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "SourceAddressPrefix");
            }



        }
    }
}