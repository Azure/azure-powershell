// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Properties used to create a user on an Azure Batch node.
    /// </summary>
    /// <remarks>
    /// Properties used to create a user on an Azure Batch node.
    /// </remarks>
    public partial class UserAccount
    {
        /// <summary>
        /// Initializes a new instance of the UserAccount class.
        /// </summary>
        public UserAccount()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the UserAccount class.
        /// </summary>

        /// <param name="name">The name of the user account. Names can contain any Unicode characters up
        /// to a maximum length of 20.
        /// </param>

        /// <param name="password">The password for the user account.
        /// </param>

        /// <param name="elevationLevel">nonAdmin - The auto user is a standard user without elevated access. admin
        /// - The auto user is a user with elevated access and operates with full
        /// Administrator permissions. The default value is nonAdmin.
        /// Possible values include: &#39;NonAdmin&#39;, &#39;Admin&#39;</param>

        /// <param name="linuxUserConfiguration">This property is ignored if specified on a Windows pool. If not specified,
        /// the user is created with the default options.
        /// </param>

        /// <param name="windowsUserConfiguration">This property can only be specified if the user is on a Windows pool. If
        /// not specified and on a Windows pool, the user is created with the default
        /// options.
        /// </param>
        public UserAccount(string name, string password, ElevationLevel? elevationLevel = default(ElevationLevel?), LinuxUserConfiguration linuxUserConfiguration = default(LinuxUserConfiguration), WindowsUserConfiguration windowsUserConfiguration = default(WindowsUserConfiguration))

        {
            this.Name = name;
            this.Password = password;
            this.ElevationLevel = elevationLevel;
            this.LinuxUserConfiguration = linuxUserConfiguration;
            this.WindowsUserConfiguration = windowsUserConfiguration;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the name of the user account. Names can contain any Unicode
        /// characters up to a maximum length of 20.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "name")]
        public string Name {get; set; }

        /// <summary>
        /// Gets or sets the password for the user account.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password {get; set; }

        /// <summary>
        /// Gets or sets nonAdmin - The auto user is a standard user without elevated
        /// access. admin - The auto user is a user with elevated access and operates
        /// with full Administrator permissions. The default value is nonAdmin. Possible values include: &#39;NonAdmin&#39;, &#39;Admin&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "elevationLevel")]
        public ElevationLevel? ElevationLevel {get; set; }

        /// <summary>
        /// Gets or sets this property is ignored if specified on a Windows pool. If
        /// not specified, the user is created with the default options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "linuxUserConfiguration")]
        public LinuxUserConfiguration LinuxUserConfiguration {get; set; }

        /// <summary>
        /// Gets or sets this property can only be specified if the user is on a
        /// Windows pool. If not specified and on a Windows pool, the user is created
        /// with the default options.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "windowsUserConfiguration")]
        public WindowsUserConfiguration WindowsUserConfiguration {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Name == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Name");
            }
            if (this.Password == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Password");
            }





        }
    }
}