// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Information used to connect to a CIFS file system.
    /// </summary>
    /// <remarks>
    /// Information used to connect to a CIFS file system.
    /// </remarks>
    public partial class CifsMountConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the CifsMountConfiguration class.
        /// </summary>
        public CifsMountConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CifsMountConfiguration class.
        /// </summary>

        /// <param name="userName">The user to use for authentication against the CIFS file system.
        /// </param>

        /// <param name="source">The URI of the file system to mount.
        /// </param>

        /// <param name="relativeMountPath">All file systems are mounted relative to the Batch mounts directory,
        /// accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment variable.
        /// </param>

        /// <param name="mountOptions">These are &#39;net use&#39; options in Windows and &#39;mount&#39; options in Linux.
        /// </param>

        /// <param name="password">The password to use for authentication against the CIFS file system.
        /// </param>
        public CifsMountConfiguration(string userName, string source, string relativeMountPath, string password, string mountOptions = default(string))

        {
            this.UserName = userName;
            this.Source = source;
            this.RelativeMountPath = relativeMountPath;
            this.MountOptions = mountOptions;
            this.Password = password;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the user to use for authentication against the CIFS file
        /// system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userName")]
        public string UserName {get; set; }

        /// <summary>
        /// Gets or sets the URI of the file system to mount.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "source")]
        public string Source {get; set; }

        /// <summary>
        /// Gets or sets all file systems are mounted relative to the Batch mounts
        /// directory, accessible via the AZ_BATCH_NODE_MOUNTS_DIR environment
        /// variable.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "relativeMountPath")]
        public string RelativeMountPath {get; set; }

        /// <summary>
        /// Gets or sets these are &#39;net use&#39; options in Windows and &#39;mount&#39; options in
        /// Linux.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mountOptions")]
        public string MountOptions {get; set; }

        /// <summary>
        /// Gets or sets the password to use for authentication against the CIFS file
        /// system.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.UserName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "UserName");
            }
            if (this.Source == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Source");
            }
            if (this.RelativeMountPath == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "RelativeMountPath");
            }
            if (this.Password == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Password");
            }





        }
    }
}