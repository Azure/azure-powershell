// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Describes either the current operation (if the pool AllocationState is
    /// Resizing) or the previously completed operation (if the AllocationState is
    /// Steady).
    /// </summary>
    /// <remarks>
    /// Describes either the current operation (if the pool AllocationState is
    /// Resizing) or the previously completed operation (if the AllocationState is
    /// Steady).
    /// </remarks>
    public partial class ResizeOperationStatus
    {
        /// <summary>
        /// Initializes a new instance of the ResizeOperationStatus class.
        /// </summary>
        public ResizeOperationStatus()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ResizeOperationStatus class.
        /// </summary>

        /// <param name="targetDedicatedNodes">The desired number of dedicated compute nodes in the pool.
        /// </param>

        /// <param name="targetLowPriorityNodes">The desired number of Spot/low-priority compute nodes in the pool.
        /// </param>

        /// <param name="resizeTimeout">The default value is 15 minutes. The minimum value is 5 minutes. If you
        /// specify a value less than 5 minutes, the Batch service returns an error; if
        /// you are calling the REST API directly, the HTTP status code is 400 (Bad
        /// Request).
        /// </param>

        /// <param name="nodeDeallocationOption">The default value is requeue.
        /// Possible values include: &#39;Requeue&#39;, &#39;Terminate&#39;, &#39;TaskCompletion&#39;,
        /// &#39;RetainedData&#39;</param>

        /// <param name="startTime">The time when this resize operation was started.
        /// </param>

        /// <param name="errors">This property is set only if an error occurred during the last pool resize,
        /// and only when the pool allocationState is Steady.
        /// </param>
        public ResizeOperationStatus(int? targetDedicatedNodes = default(int?), int? targetLowPriorityNodes = default(int?), System.TimeSpan? resizeTimeout = default(System.TimeSpan?), ComputeNodeDeallocationOption? nodeDeallocationOption = default(ComputeNodeDeallocationOption?), System.DateTime? startTime = default(System.DateTime?), System.Collections.Generic.IList<ResizeError> errors = default(System.Collections.Generic.IList<ResizeError>))

        {
            this.TargetDedicatedNodes = targetDedicatedNodes;
            this.TargetLowPriorityNodes = targetLowPriorityNodes;
            this.ResizeTimeout = resizeTimeout;
            this.NodeDeallocationOption = nodeDeallocationOption;
            this.StartTime = startTime;
            this.Errors = errors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the desired number of dedicated compute nodes in the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetDedicatedNodes")]
        public int? TargetDedicatedNodes {get; set; }

        /// <summary>
        /// Gets or sets the desired number of Spot/low-priority compute nodes in the
        /// pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetLowPriorityNodes")]
        public int? TargetLowPriorityNodes {get; set; }

        /// <summary>
        /// Gets or sets the default value is 15 minutes. The minimum value is 5
        /// minutes. If you specify a value less than 5 minutes, the Batch service
        /// returns an error; if you are calling the REST API directly, the HTTP status
        /// code is 400 (Bad Request).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resizeTimeout")]
        public System.TimeSpan? ResizeTimeout {get; set; }

        /// <summary>
        /// Gets or sets the default value is requeue. Possible values include: &#39;Requeue&#39;, &#39;Terminate&#39;, &#39;TaskCompletion&#39;, &#39;RetainedData&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeDeallocationOption")]
        public ComputeNodeDeallocationOption? NodeDeallocationOption {get; set; }

        /// <summary>
        /// Gets or sets the time when this resize operation was started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTime")]
        public System.DateTime? StartTime {get; set; }

        /// <summary>
        /// Gets or sets this property is set only if an error occurred during the last
        /// pool resize, and only when the pool allocationState is Steady.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "errors")]
        public System.Collections.Generic.IList<ResizeError> Errors {get; set; }
    }
}