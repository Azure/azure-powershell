// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// The configuration for container-enabled pools.
    /// </summary>
    /// <remarks>
    /// The configuration for container-enabled pools.
    /// </remarks>
    public partial class ContainerConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the ContainerConfiguration class.
        /// </summary>
        public ContainerConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ContainerConfiguration class.
        /// </summary>

        /// <param name="type">The container technology to be used.
        /// Possible values include: &#39;DockerCompatible&#39;, &#39;CriCompatible&#39;</param>

        /// <param name="containerImageNames">This is the full image reference, as would be specified to &#34;docker pull&#34;.
        /// An image will be sourced from the default Docker registry unless the image
        /// is fully qualified with an alternative registry.
        /// </param>

        /// <param name="containerRegistries">If any images must be downloaded from a private registry which requires
        /// credentials, then those credentials must be provided here.
        /// </param>
        public ContainerConfiguration(string type, System.Collections.Generic.IList<string> containerImageNames = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<ContainerRegistry> containerRegistries = default(System.Collections.Generic.IList<ContainerRegistry>))

        {
            this.Type = type;
            this.ContainerImageNames = containerImageNames;
            this.ContainerRegistries = containerRegistries;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the container technology to be used. Possible values include: &#39;DockerCompatible&#39;, &#39;CriCompatible&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "type")]
        public string Type {get; set; }

        /// <summary>
        /// Gets or sets this is the full image reference, as would be specified to
        /// &#34;docker pull&#34;. An image will be sourced from the default Docker registry
        /// unless the image is fully qualified with an alternative registry.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerImageNames")]
        public System.Collections.Generic.IList<string> ContainerImageNames {get; set; }

        /// <summary>
        /// Gets or sets if any images must be downloaded from a private registry which
        /// requires credentials, then those credentials must be provided here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerRegistries")]
        public System.Collections.Generic.IList<ContainerRegistry> ContainerRegistries {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Type == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Type");
            }



        }
    }
}