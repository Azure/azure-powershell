// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// The container settings for a task.
    /// </summary>
    /// <remarks>
    /// The container settings for a task.
    /// </remarks>
    public partial class TaskContainerSettings
    {
        /// <summary>
        /// Initializes a new instance of the TaskContainerSettings class.
        /// </summary>
        public TaskContainerSettings()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TaskContainerSettings class.
        /// </summary>

        /// <param name="containerRunOptions">These additional options are supplied as arguments to the &#34;docker create&#34;
        /// command, in addition to those controlled by the Batch Service.
        /// </param>

        /// <param name="imageName">This is the full image reference, as would be specified to &#34;docker pull&#34;.
        /// If no tag is provided as part of the image name, the tag &#34;:latest&#34; is used
        /// as a default.
        /// </param>

        /// <param name="registry">This setting can be omitted if was already provided at pool creation.
        /// </param>

        /// <param name="workingDirectory">A flag to indicate where the container task working directory is. The
        /// default is &#39;taskWorkingDirectory&#39;.
        /// Possible values include: &#39;TaskWorkingDirectory&#39;, &#39;ContainerImageDefault&#39;</param>
        public TaskContainerSettings(string imageName, string containerRunOptions = default(string), ContainerRegistry registry = default(ContainerRegistry), ContainerWorkingDirectory? workingDirectory = default(ContainerWorkingDirectory?))

        {
            this.ContainerRunOptions = containerRunOptions;
            this.ImageName = imageName;
            this.Registry = registry;
            this.WorkingDirectory = workingDirectory;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets these additional options are supplied as arguments to the
        /// &#34;docker create&#34; command, in addition to those controlled by the Batch
        /// Service.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerRunOptions")]
        public string ContainerRunOptions {get; set; }

        /// <summary>
        /// Gets or sets this is the full image reference, as would be specified to
        /// &#34;docker pull&#34;. If no tag is provided as part of the image name, the tag
        /// &#34;:latest&#34; is used as a default.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "imageName")]
        public string ImageName {get; set; }

        /// <summary>
        /// Gets or sets this setting can be omitted if was already provided at pool
        /// creation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "registry")]
        public ContainerRegistry Registry {get; set; }

        /// <summary>
        /// Gets or sets a flag to indicate where the container task working directory
        /// is. The default is &#39;taskWorkingDirectory&#39;. Possible values include: &#39;TaskWorkingDirectory&#39;, &#39;ContainerImageDefault&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "workingDirectory")]
        public ContainerWorkingDirectory? WorkingDirectory {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ImageName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ImageName");
            }




        }
    }
}