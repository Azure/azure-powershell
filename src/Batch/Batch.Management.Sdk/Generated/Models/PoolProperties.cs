// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// Pool properties.
    /// </summary>
    public partial class PoolProperties
    {
        /// <summary>
        /// Initializes a new instance of the PoolProperties class.
        /// </summary>
        public PoolProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PoolProperties class.
        /// </summary>

        /// <param name="displayName">The display name need not be unique and can contain any Unicode characters
        /// up to a maximum length of 1024.
        /// </param>

        /// <param name="lastModified">This is the last time at which the pool level data, such as the
        /// targetDedicatedNodes or autoScaleSettings, changed. It does not factor in
        /// node-level changes such as a compute node changing state.
        /// </param>

        /// <param name="creationTime">The creation time of the pool.
        /// </param>

        /// <param name="provisioningState">The current state of the pool.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Deleting&#39;</param>

        /// <param name="provisioningStateTransitionTime">The time at which the pool entered its current state.
        /// </param>

        /// <param name="allocationState">Whether the pool is resizing.
        /// Possible values include: &#39;Steady&#39;, &#39;Resizing&#39;, &#39;Stopping&#39;</param>

        /// <param name="allocationStateTransitionTime">The time at which the pool entered its current allocation state.
        /// </param>

        /// <param name="vmSize">For information about available sizes of virtual machines for Cloud
        /// Services pools (pools created with cloudServiceConfiguration), see Sizes
        /// for Cloud Services
        /// (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
        /// Batch supports all Cloud Services VM sizes except ExtraSmall. For
        /// information about available VM sizes for pools using images from the
        /// Virtual Machines Marketplace (pools created with
        /// virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium
        /// storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </param>

        /// <param name="deploymentConfiguration">Using CloudServiceConfiguration specifies that the nodes should be creating
        /// using Azure Cloud Services (PaaS), while VirtualMachineConfiguration uses
        /// Azure Virtual Machines (IaaS).
        /// </param>

        /// <param name="currentDedicatedNodes">The number of dedicated compute nodes currently in the pool.
        /// </param>

        /// <param name="currentLowPriorityNodes">The number of Spot/low-priority compute nodes currently in the pool.
        /// </param>

        /// <param name="scaleSettings">Defines the desired size of the pool. This can either be &#39;fixedScale&#39; where
        /// the requested targetDedicatedNodes is specified, or &#39;autoScale&#39; which
        /// defines a formula which is periodically reevaluated. If this property is
        /// not specified, the pool will have a fixed scale with 0
        /// targetDedicatedNodes.
        /// </param>

        /// <param name="autoScaleRun">This property is set only if the pool automatically scales, i.e.
        /// autoScaleSettings are used.
        /// </param>

        /// <param name="interNodeCommunication">This imposes restrictions on which nodes can be assigned to the pool.
        /// Enabling this value can reduce the chance of the requested number of nodes
        /// to be allocated in the pool. If not specified, this value defaults to
        /// &#39;Disabled&#39;.
        /// Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;</param>

        /// <param name="networkConfiguration">The network configuration for a pool.
        /// </param>

        /// <param name="taskSlotsPerNode">The default value is 1. The maximum value is the smaller of 4 times the
        /// number of cores of the vmSize of the pool or 256.
        /// </param>

        /// <param name="taskSchedulingPolicy">If not specified, the default is spread.
        /// </param>

        /// <param name="userAccounts">The list of user accounts to be created on each node in the pool.
        /// </param>

        /// <param name="metadata">The Batch service does not assign any meaning to metadata; it is solely for
        /// the use of user code.
        /// </param>

        /// <param name="startTask">In an PATCH (update) operation, this property can be set to an empty object
        /// to remove the start task from the pool.
        /// </param>

        /// <param name="certificates">For Windows compute nodes, the Batch service installs the certificates to
        /// the specified certificate store and location. For Linux compute nodes, the
        /// certificates are stored in a directory inside the task working directory
        /// and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the
        /// task to query for this location. For certificates with visibility of
        /// &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s home directory
        /// (e.g., /home/{user-name}/certs) and certificates are placed in that
        /// directory.
        /// Warning: This property is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </param>

        /// <param name="applicationPackages">Changes to application package references affect all new compute nodes
        /// joining the pool, but do not affect compute nodes that are already in the
        /// pool until they are rebooted or reimaged. There is a maximum of 10
        /// application package references on any given pool.
        /// </param>

        /// <param name="applicationLicenses">The list of application licenses must be a subset of available Batch
        /// service application licenses. If a license is requested which is not
        /// supported, pool creation will fail.
        /// </param>

        /// <param name="resizeOperationStatus">Describes either the current operation (if the pool AllocationState is
        /// Resizing) or the previously completed operation (if the AllocationState is
        /// Steady).
        /// </param>

        /// <param name="mountConfiguration">This supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </param>

        /// <param name="targetNodeCommunicationMode">If omitted, the default value is Default.
        /// Possible values include: &#39;Default&#39;, &#39;Classic&#39;, &#39;Simplified&#39;</param>

        /// <param name="currentNodeCommunicationMode">Determines how a pool communicates with the Batch service.
        /// Possible values include: &#39;Default&#39;, &#39;Classic&#39;, &#39;Simplified&#39;</param>
        public PoolProperties(string displayName = default(string), System.DateTime? lastModified = default(System.DateTime?), System.DateTime? creationTime = default(System.DateTime?), PoolProvisioningState? provisioningState = default(PoolProvisioningState?), System.DateTime? provisioningStateTransitionTime = default(System.DateTime?), AllocationState? allocationState = default(AllocationState?), System.DateTime? allocationStateTransitionTime = default(System.DateTime?), string vmSize = default(string), DeploymentConfiguration deploymentConfiguration = default(DeploymentConfiguration), int? currentDedicatedNodes = default(int?), int? currentLowPriorityNodes = default(int?), ScaleSettings scaleSettings = default(ScaleSettings), AutoScaleRun autoScaleRun = default(AutoScaleRun), InterNodeCommunicationState? interNodeCommunication = default(InterNodeCommunicationState?), NetworkConfiguration networkConfiguration = default(NetworkConfiguration), int? taskSlotsPerNode = default(int?), TaskSchedulingPolicy taskSchedulingPolicy = default(TaskSchedulingPolicy), System.Collections.Generic.IList<UserAccount> userAccounts = default(System.Collections.Generic.IList<UserAccount>), System.Collections.Generic.IList<MetadataItem> metadata = default(System.Collections.Generic.IList<MetadataItem>), StartTask startTask = default(StartTask), System.Collections.Generic.IList<CertificateReference> certificates = default(System.Collections.Generic.IList<CertificateReference>), System.Collections.Generic.IList<ApplicationPackageReference> applicationPackages = default(System.Collections.Generic.IList<ApplicationPackageReference>), System.Collections.Generic.IList<string> applicationLicenses = default(System.Collections.Generic.IList<string>), ResizeOperationStatus resizeOperationStatus = default(ResizeOperationStatus), System.Collections.Generic.IList<MountConfiguration> mountConfiguration = default(System.Collections.Generic.IList<MountConfiguration>), NodeCommunicationMode? targetNodeCommunicationMode = default(NodeCommunicationMode?), NodeCommunicationMode? currentNodeCommunicationMode = default(NodeCommunicationMode?))

        {
            this.DisplayName = displayName;
            this.LastModified = lastModified;
            this.CreationTime = creationTime;
            this.ProvisioningState = provisioningState;
            this.ProvisioningStateTransitionTime = provisioningStateTransitionTime;
            this.AllocationState = allocationState;
            this.AllocationStateTransitionTime = allocationStateTransitionTime;
            this.VMSize = vmSize;
            this.DeploymentConfiguration = deploymentConfiguration;
            this.CurrentDedicatedNodes = currentDedicatedNodes;
            this.CurrentLowPriorityNodes = currentLowPriorityNodes;
            this.ScaleSettings = scaleSettings;
            this.AutoScaleRun = autoScaleRun;
            this.InterNodeCommunication = interNodeCommunication;
            this.NetworkConfiguration = networkConfiguration;
            this.TaskSlotsPerNode = taskSlotsPerNode;
            this.TaskSchedulingPolicy = taskSchedulingPolicy;
            this.UserAccounts = userAccounts;
            this.Metadata = metadata;
            this.StartTask = startTask;
            this.Certificates = certificates;
            this.ApplicationPackages = applicationPackages;
            this.ApplicationLicenses = applicationLicenses;
            this.ResizeOperationStatus = resizeOperationStatus;
            this.MountConfiguration = mountConfiguration;
            this.TargetNodeCommunicationMode = targetNodeCommunicationMode;
            this.CurrentNodeCommunicationMode = currentNodeCommunicationMode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the display name need not be unique and can contain any
        /// Unicode characters up to a maximum length of 1024.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "displayName")]
        public string DisplayName {get; set; }

        /// <summary>
        /// Gets this is the last time at which the pool level data, such as the
        /// targetDedicatedNodes or autoScaleSettings, changed. It does not factor in
        /// node-level changes such as a compute node changing state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModified")]
        public System.DateTime? LastModified {get; private set; }

        /// <summary>
        /// Gets the creation time of the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationTime")]
        public System.DateTime? CreationTime {get; private set; }

        /// <summary>
        /// Gets the current state of the pool. Possible values include: &#39;Succeeded&#39;, &#39;Deleting&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public PoolProvisioningState? ProvisioningState {get; private set; }

        /// <summary>
        /// Gets the time at which the pool entered its current state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningStateTransitionTime")]
        public System.DateTime? ProvisioningStateTransitionTime {get; private set; }

        /// <summary>
        /// Gets whether the pool is resizing. Possible values include: &#39;Steady&#39;, &#39;Resizing&#39;, &#39;Stopping&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocationState")]
        public AllocationState? AllocationState {get; private set; }

        /// <summary>
        /// Gets the time at which the pool entered its current allocation state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allocationStateTransitionTime")]
        public System.DateTime? AllocationStateTransitionTime {get; private set; }

        /// <summary>
        /// Gets or sets for information about available sizes of virtual machines for
        /// Cloud Services pools (pools created with cloudServiceConfiguration), see
        /// Sizes for Cloud Services
        /// (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/).
        /// Batch supports all Cloud Services VM sizes except ExtraSmall. For
        /// information about available VM sizes for pools using images from the
        /// Virtual Machines Marketplace (pools created with
        /// virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/)
        /// or Sizes for Virtual Machines (Windows)
        /// (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/).
        /// Batch supports all Azure VM sizes except STANDARD_A0 and those with premium
        /// storage (STANDARD_GS, STANDARD_DS, and STANDARD_DSV2 series).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "vmSize")]
        public string VMSize {get; set; }

        /// <summary>
        /// Gets or sets using CloudServiceConfiguration specifies that the nodes
        /// should be creating using Azure Cloud Services (PaaS), while
        /// VirtualMachineConfiguration uses Azure Virtual Machines (IaaS).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "deploymentConfiguration")]
        public DeploymentConfiguration DeploymentConfiguration {get; set; }

        /// <summary>
        /// Gets the number of dedicated compute nodes currently in the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentDedicatedNodes")]
        public int? CurrentDedicatedNodes {get; private set; }

        /// <summary>
        /// Gets the number of Spot/low-priority compute nodes currently in the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentLowPriorityNodes")]
        public int? CurrentLowPriorityNodes {get; private set; }

        /// <summary>
        /// Gets or sets defines the desired size of the pool. This can either be
        /// &#39;fixedScale&#39; where the requested targetDedicatedNodes is specified, or
        /// &#39;autoScale&#39; which defines a formula which is periodically reevaluated. If
        /// this property is not specified, the pool will have a fixed scale with 0
        /// targetDedicatedNodes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "scaleSettings")]
        public ScaleSettings ScaleSettings {get; set; }

        /// <summary>
        /// Gets this property is set only if the pool automatically scales, i.e.
        /// autoScaleSettings are used.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoScaleRun")]
        public AutoScaleRun AutoScaleRun {get; private set; }

        /// <summary>
        /// Gets or sets this imposes restrictions on which nodes can be assigned to
        /// the pool. Enabling this value can reduce the chance of the requested number
        /// of nodes to be allocated in the pool. If not specified, this value defaults
        /// to &#39;Disabled&#39;. Possible values include: &#39;Enabled&#39;, &#39;Disabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "interNodeCommunication")]
        public InterNodeCommunicationState? InterNodeCommunication {get; set; }

        /// <summary>
        /// Gets or sets the network configuration for a pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkConfiguration")]
        public NetworkConfiguration NetworkConfiguration {get; set; }

        /// <summary>
        /// Gets or sets the default value is 1. The maximum value is the smaller of 4
        /// times the number of cores of the vmSize of the pool or 256.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskSlotsPerNode")]
        public int? TaskSlotsPerNode {get; set; }

        /// <summary>
        /// Gets or sets if not specified, the default is spread.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "taskSchedulingPolicy")]
        public TaskSchedulingPolicy TaskSchedulingPolicy {get; set; }

        /// <summary>
        /// Gets or sets the list of user accounts to be created on each node in the
        /// pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "userAccounts")]
        public System.Collections.Generic.IList<UserAccount> UserAccounts {get; set; }

        /// <summary>
        /// Gets or sets the Batch service does not assign any meaning to metadata; it
        /// is solely for the use of user code.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "metadata")]
        public System.Collections.Generic.IList<MetadataItem> Metadata {get; set; }

        /// <summary>
        /// Gets or sets in an PATCH (update) operation, this property can be set to an
        /// empty object to remove the start task from the pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "startTask")]
        public StartTask StartTask {get; set; }

        /// <summary>
        /// Gets or sets for Windows compute nodes, the Batch service installs the
        /// certificates to the specified certificate store and location. For Linux
        /// compute nodes, the certificates are stored in a directory inside the task
        /// working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is
        /// supplied to the task to query for this location. For certificates with
        /// visibility of &#39;remoteUser&#39;, a &#39;certs&#39; directory is created in the user&#39;s
        /// home directory (e.g., /home/{user-name}/certs) and certificates are placed
        /// in that directory.
        /// Warning: This property is deprecated and will be removed after February,
        /// 2024. Please use the [Azure KeyVault
        /// Extension](https://learn.microsoft.com/azure/batch/batch-certificate-migration-guide)
        /// instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "certificates")]
        public System.Collections.Generic.IList<CertificateReference> Certificates {get; set; }

        /// <summary>
        /// Gets or sets changes to application package references affect all new
        /// compute nodes joining the pool, but do not affect compute nodes that are
        /// already in the pool until they are rebooted or reimaged. There is a maximum
        /// of 10 application package references on any given pool.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationPackages")]
        public System.Collections.Generic.IList<ApplicationPackageReference> ApplicationPackages {get; set; }

        /// <summary>
        /// Gets or sets the list of application licenses must be a subset of available
        /// Batch service application licenses. If a license is requested which is not
        /// supported, pool creation will fail.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "applicationLicenses")]
        public System.Collections.Generic.IList<string> ApplicationLicenses {get; set; }

        /// <summary>
        /// Gets describes either the current operation (if the pool AllocationState is
        /// Resizing) or the previously completed operation (if the AllocationState is
        /// Steady).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "resizeOperationStatus")]
        public ResizeOperationStatus ResizeOperationStatus {get; private set; }

        /// <summary>
        /// Gets or sets this supports Azure Files, NFS, CIFS/SMB, and Blobfuse.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mountConfiguration")]
        public System.Collections.Generic.IList<MountConfiguration> MountConfiguration {get; set; }

        /// <summary>
        /// Gets or sets if omitted, the default value is Default. Possible values include: &#39;Default&#39;, &#39;Classic&#39;, &#39;Simplified&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "targetNodeCommunicationMode")]
        public NodeCommunicationMode? TargetNodeCommunicationMode {get; set; }

        /// <summary>
        /// Gets determines how a pool communicates with the Batch service. Possible values include: &#39;Default&#39;, &#39;Classic&#39;, &#39;Simplified&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "currentNodeCommunicationMode")]
        public NodeCommunicationMode? CurrentNodeCommunicationMode {get; private set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.DeploymentConfiguration != null)
            {
                this.DeploymentConfiguration.Validate();
            }
            if (this.ScaleSettings != null)
            {
                this.ScaleSettings.Validate();
            }
            if (this.AutoScaleRun != null)
            {
                this.AutoScaleRun.Validate();
            }

            if (this.NetworkConfiguration != null)
            {
                this.NetworkConfiguration.Validate();
            }
            if (this.TaskSchedulingPolicy != null)
            {
                this.TaskSchedulingPolicy.Validate();
            }
            if (this.UserAccounts != null)
            {
                foreach (var element in this.UserAccounts)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.Metadata != null)
            {
                foreach (var element in this.Metadata)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.StartTask != null)
            {
                this.StartTask.Validate();
            }
            if (this.Certificates != null)
            {
                foreach (var element in this.Certificates)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (this.ApplicationPackages != null)
            {
                foreach (var element in this.ApplicationPackages)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


            if (this.MountConfiguration != null)
            {
                foreach (var element in this.MountConfiguration)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }


        }
    }
}