// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{

    /// <summary>
    /// Defines values for CertificateStoreLocation.
    /// </summary>


    [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
    public enum CertificateStoreLocation
    {
        /// <summary>
        /// Certificates should be installed to the CurrentUser certificate store.
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "CurrentUser")]
        CurrentUser,
        /// <summary>
        /// Certificates should be installed to the LocalMachine certificate store.
        /// </summary>
        [System.Runtime.Serialization.EnumMember(Value = "LocalMachine")]
        LocalMachine
    }
    internal static class CertificateStoreLocationEnumExtension
    {
        internal static string ToSerializedValue(this CertificateStoreLocation? value)
        {
            return value == null ? null : ((CertificateStoreLocation)value).ToSerializedValue();
        }
        internal static string ToSerializedValue(this CertificateStoreLocation value)
        {
            switch( value )
            {
                case CertificateStoreLocation.CurrentUser:
                    return "CurrentUser";
                case CertificateStoreLocation.LocalMachine:
                    return "LocalMachine";
            }
            return null;
        }
        internal static CertificateStoreLocation? ParseCertificateStoreLocation(this string value)
        {
            switch( value )
            {
                case "CurrentUser":
                    return CertificateStoreLocation.CurrentUser;
                case "LocalMachine":
                    return CertificateStoreLocation.LocalMachine;
            }
            return null;
        }
    }
}