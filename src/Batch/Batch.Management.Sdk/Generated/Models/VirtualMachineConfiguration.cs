// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Batch.Models
{
    using System.Linq;

    /// <summary>
    /// The configuration for compute nodes in a pool based on the Azure Virtual
    /// Machines infrastructure.
    /// </summary>
    /// <remarks>
    /// The configuration for compute nodes in a pool based on the Azure Virtual
    /// Machines infrastructure.
    /// </remarks>
    public partial class VirtualMachineConfiguration
    {
        /// <summary>
        /// Initializes a new instance of the VirtualMachineConfiguration class.
        /// </summary>
        public VirtualMachineConfiguration()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VirtualMachineConfiguration class.
        /// </summary>

        /// <param name="imageReference">A reference to an Azure Virtual Machines Marketplace image or the Azure
        /// Image resource of a custom Virtual Machine. To get the list of all
        /// imageReferences verified by Azure Batch, see the &#39;List supported node agent
        /// SKUs&#39; operation.
        /// </param>

        /// <param name="nodeAgentSkuId">The Batch node agent is a program that runs on each node in the pool, and
        /// provides the command-and-control interface between the node and the Batch
        /// service. There are different implementations of the node agent, known as
        /// SKUs, for different operating systems. You must specify a node agent SKU
        /// which matches the selected image reference. To get the list of supported
        /// node agent SKUs along with their list of verified image references, see the
        /// &#39;List supported node agent SKUs&#39; operation.
        /// </param>

        /// <param name="windowsConfiguration">This property must not be specified if the imageReference specifies a Linux
        /// OS image.
        /// </param>

        /// <param name="dataDisks">This property must be specified if the compute nodes in the pool need to
        /// have empty data disks attached to them.
        /// </param>

        /// <param name="licenseType">This only applies to images that contain the Windows operating system, and
        /// should only be used when you hold valid on-premises licenses for the nodes
        /// which will be deployed. If omitted, no on-premises licensing discount is
        /// applied. Values are:
        /// Windows_Server - The on-premises license is for Windows Server.
        /// Windows_Client - The on-premises license is for Windows Client.
        /// </param>

        /// <param name="containerConfiguration">If specified, setup is performed on each node in the pool to allow tasks to
        /// run in containers. All regular tasks and job manager tasks run on this pool
        /// must specify the containerSettings property, and all other tasks may
        /// specify it.
        /// </param>

        /// <param name="diskEncryptionConfiguration">If specified, encryption is performed on each node in the pool during node
        /// provisioning.
        /// </param>

        /// <param name="nodePlacementConfiguration">This configuration will specify rules on how nodes in the pool will be
        /// physically allocated.
        /// </param>

        /// <param name="extensions">If specified, the extensions mentioned in this configuration will be
        /// installed on each node.
        /// </param>

        /// <param name="osDisk">Contains configuration for ephemeral OSDisk settings.
        /// </param>
        public VirtualMachineConfiguration(ImageReference imageReference, string nodeAgentSkuId, WindowsConfiguration windowsConfiguration = default(WindowsConfiguration), System.Collections.Generic.IList<DataDisk> dataDisks = default(System.Collections.Generic.IList<DataDisk>), string licenseType = default(string), ContainerConfiguration containerConfiguration = default(ContainerConfiguration), DiskEncryptionConfiguration diskEncryptionConfiguration = default(DiskEncryptionConfiguration), NodePlacementConfiguration nodePlacementConfiguration = default(NodePlacementConfiguration), System.Collections.Generic.IList<VMExtension> extensions = default(System.Collections.Generic.IList<VMExtension>), OSDisk osDisk = default(OSDisk))

        {
            this.ImageReference = imageReference;
            this.NodeAgentSkuId = nodeAgentSkuId;
            this.WindowsConfiguration = windowsConfiguration;
            this.DataDisks = dataDisks;
            this.LicenseType = licenseType;
            this.ContainerConfiguration = containerConfiguration;
            this.DiskEncryptionConfiguration = diskEncryptionConfiguration;
            this.NodePlacementConfiguration = nodePlacementConfiguration;
            this.Extensions = extensions;
            this.OSDisk = osDisk;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a reference to an Azure Virtual Machines Marketplace image or
        /// the Azure Image resource of a custom Virtual Machine. To get the list of
        /// all imageReferences verified by Azure Batch, see the &#39;List supported node
        /// agent SKUs&#39; operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "imageReference")]
        public ImageReference ImageReference {get; set; }

        /// <summary>
        /// Gets or sets the Batch node agent is a program that runs on each node in
        /// the pool, and provides the command-and-control interface between the node
        /// and the Batch service. There are different implementations of the node
        /// agent, known as SKUs, for different operating systems. You must specify a
        /// node agent SKU which matches the selected image reference. To get the list
        /// of supported node agent SKUs along with their list of verified image
        /// references, see the &#39;List supported node agent SKUs&#39; operation.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodeAgentSkuId")]
        public string NodeAgentSkuId {get; set; }

        /// <summary>
        /// Gets or sets this property must not be specified if the imageReference
        /// specifies a Linux OS image.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "windowsConfiguration")]
        public WindowsConfiguration WindowsConfiguration {get; set; }

        /// <summary>
        /// Gets or sets this property must be specified if the compute nodes in the
        /// pool need to have empty data disks attached to them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataDisks")]
        public System.Collections.Generic.IList<DataDisk> DataDisks {get; set; }

        /// <summary>
        /// Gets or sets this only applies to images that contain the Windows operating
        /// system, and should only be used when you hold valid on-premises licenses
        /// for the nodes which will be deployed. If omitted, no on-premises licensing
        /// discount is applied. Values are:
        /// Windows_Server - The on-premises license is for Windows Server.
        /// Windows_Client - The on-premises license is for Windows Client.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "licenseType")]
        public string LicenseType {get; set; }

        /// <summary>
        /// Gets or sets if specified, setup is performed on each node in the pool to
        /// allow tasks to run in containers. All regular tasks and job manager tasks
        /// run on this pool must specify the containerSettings property, and all other
        /// tasks may specify it.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "containerConfiguration")]
        public ContainerConfiguration ContainerConfiguration {get; set; }

        /// <summary>
        /// Gets or sets if specified, encryption is performed on each node in the pool
        /// during node provisioning.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "diskEncryptionConfiguration")]
        public DiskEncryptionConfiguration DiskEncryptionConfiguration {get; set; }

        /// <summary>
        /// Gets or sets this configuration will specify rules on how nodes in the pool
        /// will be physically allocated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nodePlacementConfiguration")]
        public NodePlacementConfiguration NodePlacementConfiguration {get; set; }

        /// <summary>
        /// Gets or sets if specified, the extensions mentioned in this configuration
        /// will be installed on each node.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "extensions")]
        public System.Collections.Generic.IList<VMExtension> Extensions {get; set; }

        /// <summary>
        /// Gets or sets contains configuration for ephemeral OSDisk settings.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "osDisk")]
        public OSDisk OSDisk {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ImageReference == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ImageReference");
            }
            if (this.NodeAgentSkuId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "NodeAgentSkuId");
            }



            if (this.DataDisks != null)
            {
                foreach (var element in this.DataDisks)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }




            if (this.Extensions != null)
            {
                foreach (var element in this.Extensions)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }

        }
    }
}