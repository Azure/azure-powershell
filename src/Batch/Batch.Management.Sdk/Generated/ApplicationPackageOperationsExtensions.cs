// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Batch
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for ApplicationPackageOperations
    /// </summary>
    public static partial class ApplicationPackageOperationsExtensions
    {
        /// <summary>
        /// Activates the specified application package. This should be done after the
        /// `ApplicationPackage` was created and uploaded. This needs to be done before
        /// an `ApplicationPackage` can be used on Pools or Tasks.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        public static ApplicationPackage Activate(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName, string format)
        {
                return ((IApplicationPackageOperations)operations).ActivateAsync(resourceGroupName, accountName, applicationName, versionName, format).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Activates the specified application package. This should be done after the
        /// `ApplicationPackage` was created and uploaded. This needs to be done before
        /// an `ApplicationPackage` can be used on Pools or Tasks.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApplicationPackage> ActivateAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName, string format, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ActivateWithHttpMessagesAsync(resourceGroupName, accountName, applicationName, versionName, format, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates an application package record. The record contains a storageUrl
        /// where the package should be uploaded to.  Once it is uploaded the
        /// `ApplicationPackage` needs to be activated using `ApplicationPackageActive`
        /// before it can be used. If the auto storage account was configured to use
        /// storage keys, the URL returned will contain a SAS.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        public static ApplicationPackage Create(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName)
        {
                return ((IApplicationPackageOperations)operations).CreateAsync(resourceGroupName, accountName, applicationName, versionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates an application package record. The record contains a storageUrl
        /// where the package should be uploaded to.  Once it is uploaded the
        /// `ApplicationPackage` needs to be activated using `ApplicationPackageActive`
        /// before it can be used. If the auto storage account was configured to use
        /// storage keys, the URL returned will contain a SAS.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApplicationPackage> CreateAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, applicationName, versionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Deletes an application package record and its associated binary file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        public static void Delete(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName)
        {
                ((IApplicationPackageOperations)operations).DeleteAsync(resourceGroupName, accountName, applicationName, versionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Deletes an application package record and its associated binary file.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, applicationName, versionName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Gets information about the specified application package.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        public static ApplicationPackage Get(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName)
        {
                return ((IApplicationPackageOperations)operations).GetAsync(resourceGroupName, accountName, applicationName, versionName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets information about the specified application package.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='versionName'>
        /// The version of the application.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<ApplicationPackage> GetAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, string versionName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, applicationName, versionName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all of the application packages in the specified application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='maxresults'>
        /// The maximum number of items to return in the response.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationPackage> List(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, int? maxresults = default(int?))
        {
                return ((IApplicationPackageOperations)operations).ListAsync(resourceGroupName, accountName, applicationName, maxresults).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the application packages in the specified application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group that contains the Batch account.
        /// </param>
        /// <param name='accountName'>
        /// The name of the Batch account.
        /// </param>
        /// <param name='applicationName'>
        /// The name of the application. This must be unique within the account.
        /// </param>
        /// <param name='maxresults'>
        /// The maximum number of items to return in the response.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationPackage>> ListAsync(this IApplicationPackageOperations operations, string resourceGroupName, string accountName, string applicationName, int? maxresults = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, applicationName, maxresults, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Lists all of the application packages in the specified application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<ApplicationPackage> ListNext(this IApplicationPackageOperations operations, string nextPageLink)
        {
                return ((IApplicationPackageOperations)operations).ListNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Lists all of the application packages in the specified application.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<ApplicationPackage>> ListNextAsync(this IApplicationPackageOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
