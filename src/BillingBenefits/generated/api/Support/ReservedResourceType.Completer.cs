// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.BillingBenefits.Support
{

    /// <summary>The type of the resource that is being reserved.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.BillingBenefits.Support.ReservedResourceTypeTypeConverter))]
    public partial struct ReservedResourceType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VirtualMachines".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'VirtualMachines'", "VirtualMachines", global::System.Management.Automation.CompletionResultType.ParameterValue, "VirtualMachines");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlDatabases".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlDatabases'", "SqlDatabases", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlDatabases");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SuseLinux".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SuseLinux'", "SuseLinux", global::System.Management.Automation.CompletionResultType.ParameterValue, "SuseLinux");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "CosmosDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'CosmosDb'", "CosmosDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "CosmosDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RedHat".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RedHat'", "RedHat", global::System.Management.Automation.CompletionResultType.ParameterValue, "RedHat");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlDataWarehouse".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlDataWarehouse'", "SqlDataWarehouse", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlDataWarehouse");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VMwareCloudSimple".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'VMwareCloudSimple'", "VMwareCloudSimple", global::System.Management.Automation.CompletionResultType.ParameterValue, "VMwareCloudSimple");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RedHatOsa".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RedHatOsa'", "RedHatOsa", global::System.Management.Automation.CompletionResultType.ParameterValue, "RedHatOsa");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Databricks".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Databricks'", "Databricks", global::System.Management.Automation.CompletionResultType.ParameterValue, "Databricks");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AppService".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AppService'", "AppService", global::System.Management.Automation.CompletionResultType.ParameterValue, "AppService");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ManagedDisk".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ManagedDisk'", "ManagedDisk", global::System.Management.Automation.CompletionResultType.ParameterValue, "ManagedDisk");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BlockBlob".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BlockBlob'", "BlockBlob", global::System.Management.Automation.CompletionResultType.ParameterValue, "BlockBlob");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RedisCache".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RedisCache'", "RedisCache", global::System.Management.Automation.CompletionResultType.ParameterValue, "RedisCache");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureDataExplorer".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureDataExplorer'", "AzureDataExplorer", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureDataExplorer");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MySql'", "MySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "MySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "MariaDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'MariaDb'", "MariaDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "MariaDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PostgreSql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PostgreSql'", "PostgreSql", global::System.Management.Automation.CompletionResultType.ParameterValue, "PostgreSql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DedicatedHost".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DedicatedHost'", "DedicatedHost", global::System.Management.Automation.CompletionResultType.ParameterValue, "DedicatedHost");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SapHana".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SapHana'", "SapHana", global::System.Management.Automation.CompletionResultType.ParameterValue, "SapHana");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlAzureHybridBenefit".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlAzureHybridBenefit'", "SqlAzureHybridBenefit", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlAzureHybridBenefit");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AVS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AVS'", "AVS", global::System.Management.Automation.CompletionResultType.ParameterValue, "AVS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DataFactory".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DataFactory'", "DataFactory", global::System.Management.Automation.CompletionResultType.ParameterValue, "DataFactory");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NetAppStorage".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NetAppStorage'", "NetAppStorage", global::System.Management.Automation.CompletionResultType.ParameterValue, "NetAppStorage");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureFiles".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureFiles'", "AzureFiles", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureFiles");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlEdge".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlEdge'", "SqlEdge", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlEdge");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "VirtualMachineSoftware".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'VirtualMachineSoftware'", "VirtualMachineSoftware", global::System.Management.Automation.CompletionResultType.ParameterValue, "VirtualMachineSoftware");
            }
        }
    }
}