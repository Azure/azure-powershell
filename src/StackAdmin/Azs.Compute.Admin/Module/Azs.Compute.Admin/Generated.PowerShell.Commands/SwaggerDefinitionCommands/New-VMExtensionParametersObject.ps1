<#
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.

Code generated by Microsoft (R) PSSwagger
Changes may cause incorrect behavior and will be lost if the code is regenerated.
#>

<#
.SYNOPSIS
    Parameters used to create a new Virtual Machine Extension Image.

.DESCRIPTION
    Parameters used to create a new Virtual Machine Extension Image.

.PARAMETER ProvisioningState
    Provisioning state of extension.

.PARAMETER SourceBlob
    URI to Azure or AzureStack blob.

.PARAMETER VmOsType
    Target virtual machine operating system type necessary for deploying the extension handler.

.PARAMETER ComputeRole
    Compute role

.PARAMETER VmScaleSetEnabled
    Value indicating whether the extension is enabled for virtual machine scale set support.

.PARAMETER SupportMultipleExtensions
    True if supports multiple extensions.

.PARAMETER IsSystemExtension
    Indicates if the extension is for the system.

#>
function New-VMExtensionParametersObject
{
    param(    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.ProvisioningState]
        $ProvisioningState,
    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.AzureBlob]
        $SourceBlob,
    
        [Parameter(Mandatory = $false)]
        [Microsoft.AzureStack.Management.Compute.Admin.Models.OsType]
        $VmOsType,
    
        [Parameter(Mandatory = $false)]
        [string]
        $ComputeRole,
    
        [Parameter(Mandatory = $false)]
        [switch]
        $VmScaleSetEnabled,
    
        [Parameter(Mandatory = $false)]
        [switch]
        $SupportMultipleExtensions,
    
        [Parameter(Mandatory = $false)]
        [switch]
        $IsSystemExtension
    )
    
    $Object = New-Object -TypeName Microsoft.AzureStack.Management.Compute.Admin.Models.VMExtensionParameters

    $PSBoundParameters.GetEnumerator() | ForEach-Object { 
        if(Get-Member -InputObject $Object -Name $_.Key -MemberType Property)
        {
            $Object.$($_.Key) = $_.Value
        }
    }

    if(Get-Member -InputObject $Object -Name Validate -MemberType Method)
    {
        $Object.Validate()
    }

    return $Object
}

