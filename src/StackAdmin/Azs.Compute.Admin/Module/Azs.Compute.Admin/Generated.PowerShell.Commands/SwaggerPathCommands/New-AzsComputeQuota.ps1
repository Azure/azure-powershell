<#
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the MIT License. See License.txt in the project root for license information.

Code generated by Microsoft (R) PSSwagger
Changes may cause incorrect behavior and will be lost if the code is regenerated.
#>

<#
.SYNOPSIS
    Create a new compute quota used to limit compute resources.

.DESCRIPTION
    Create a new compute quota.

.PARAMETER Name
    Name of the quota.

.PARAMETER AvailabilitySetCount
    Maximum number of availability sets allowed.

.PARAMETER CoresLimit
    Maximum number of cores allowed.

.PARAMETER VmScaleSetCount
    Maximum number of scale sets allowed.

.PARAMETER VirtualMachineCount
    Maximum number of virtual machines allowed.

.PARAMETER LocationName
    Location of the resource.

.EXAMPLE

    PS C:\> New-AzsComputeQuota -Name testQuota5 -AvailabilitySetCount 1000 -CoresLimit 1000 -VmScaleSetCount 1000 -VirtualMachineCount 1000

    Create a new compute quota.

#>
function New-AzsComputeQuota {
    [OutputType([Microsoft.AzureStack.Management.Compute.Admin.Models.Quota])]
    [CmdletBinding(SupportsShouldProcess = $true)]
    param(
        [Parameter(Mandatory = $true)]
        [ValidateNotNullOrEmpty()]
        [System.String]
        $Name,

        [Parameter(Mandatory = $false)]
        [int32]
        $AvailabilitySetCount = 10,

        [Parameter(Mandatory = $false)]
        [int32]
        $CoresLimit = 100,

        [Parameter(Mandatory = $false)]
        [int32]
        $VmScaleSetCount = 100,

        [Parameter(Mandatory = $false)]
        [int32]
        $VirtualMachineCount = 100,

        [Parameter(Mandatory = $false)]
        [System.String]
        $Location
    )

    Begin {
        Initialize-PSSwaggerDependencies -Azure
        $tracerObject = $null
        if (('continue' -eq $DebugPreference) -or ('inquire' -eq $DebugPreference)) {
            $oldDebugPreference = $global:DebugPreference
            $global:DebugPreference = "continue"
            $tracerObject = New-PSSwaggerClientTracing
            Register-PSSwaggerClientTracing -TracerObject $tracerObject
        }
    }

    Process {



        if ($PSCmdlet.ShouldProcess("$Name", "Create a new compute quota.")) {

            # Default location if missing
            if ([System.String]::IsNullOrEmpty($Location)) {
                $Location = (Get-AzureRmLocation).Location
            }

            # Validate this resource does not exist.
            $_objectCheck = $null
            try {
                Write-Verbose "Checking to see if compute quota already exists."
                $_objectCheck = Get-AzsComputeQuota -Name $Name -Location $Location
            } catch {
                # No op
            } finally {
                if ($_objectCheck -ne $null) {
                    throw "A compute quota with name $Name at location $Location already exists."
                }
            }

            # Create object
            $flattenedParameters = @('AvailabilitySetCount', 'CoresLimit', 'VmScaleSetCount', 'VirtualMachineCount', 'Location' )
            $utilityCmdParams = @{}
            $flattenedParameters | ForEach-Object {
                $utilityCmdParams[$_] = Get-Variable -Name $_ -ValueOnly
            }
            $NewQuota = New-QuotaObject @utilityCmdParams

            $NewServiceClient_params = @{
                FullClientTypeName = 'Microsoft.AzureStack.Management.Compute.Admin.ComputeAdminClient'
            }
            $GlobalParameterHashtable = @{}
            $GlobalParameterHashtable['SubscriptionId'] = $null
            if ($PSBoundParameters.ContainsKey('SubscriptionId')) {
                $GlobalParameterHashtable['SubscriptionId'] = $PSBoundParameters['SubscriptionId']
            }
            $NewServiceClient_params['GlobalParameterHashtable'] = $GlobalParameterHashtable
            $ComputeAdminClient = New-ServiceClient @NewServiceClient_params

            Write-Verbose -Message 'Performing operation create on $ComputeAdminClient.'
            $TaskResult = $ComputeAdminClient.Quotas.CreateOrUpdateWithHttpMessagesAsync($Location, $Name, $NewQuota)

            if ($TaskResult) {
                $GetTaskResult_params = @{
                    TaskResult = $TaskResult
                }
                Get-TaskResult @GetTaskResult_params
            }
        }
    }


    End {
        if ($tracerObject) {
            $global:DebugPreference = $oldDebugPreference
            Unregister-PSSwaggerClientTracing -TracerObject $tracerObject
        }
    }
}

