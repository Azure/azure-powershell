
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Put specified Update
.Description
Put specified Update
.Example
Set-AzStackHciUpdate -ClusterName 'test-cluster' -ResourceGroupName 'test-rg' -Name 'test-update'

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IUpdate
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IUpdate
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

COMPONENTVERSION <IPackageVersionInfo[]>: An array of component versions for a Solution Bundle update, and an empty array otherwise. 
  [LastUpdated <DateTime?>]: Last time this component was updated.
  [PackageType <String>]: Package type
  [Version <String>]: Package version

HEALTHCHECKRESULT <IPrecheckResult[]>: An array of PrecheckResult objects.
  [AdditionalData <String>]: Property bag of key value pairs for additional information.
  [Description <String>]: Detailed overview of the issue and what impact the issue has on the stamp.
  [DisplayName <String>]: The health check DisplayName localized of the individual test executed.
  [HealthCheckSource <String>]: The name of the services called for the HealthCheck (I.E. Test-AzureStack, Test-Cluster).
  [Name <String>]: Name of the individual test/rule/alert that was executed. Unique, not exposed to the customer.
  [Remediation <String>]: Set of steps that can be taken to resolve the issue found.
  [Severity <Severity?>]: Severity of the result (Critical, Warning, Informational, Hidden). This answers how important the result is. Critical is the only update-blocking severity.
  [Status <Status?>]: The status of the check running (i.e. Failed, Succeeded, In Progress). This answers whether the check ran, and passed or failed.
  [TagKey <String>]: Key that allow grouping/filtering individual tests.
  [TagValue <String>]: Value of the key that allow grouping/filtering individual tests.
  [TargetResourceId <String>]: The unique identifier for the affected resource (such as a node or drive).
  [TargetResourceName <String>]: The name of the affected resource.
  [Timestamp <DateTime?>]: The time in which the HealthCheck was called.
  [Title <String>]: User-facing name; one or more sentences indicating the direct issue.

PREREQUISITE <IUpdatePrerequisite[]>: If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
  [PackageName <String>]: Friendly name of the prerequisite.
  [UpdateType <String>]: Updatable component type.
  [Version <String>]: Version of the prerequisite.

UPDATEPROPERTY <IUpdate>: Update details
  [SystemDataCreatedAt <DateTime?>]: The timestamp of resource creation (UTC).
  [SystemDataCreatedBy <String>]: The identity that created the resource.
  [SystemDataCreatedByType <CreatedByType?>]: The type of identity that created the resource.
  [SystemDataLastModifiedAt <DateTime?>]: The timestamp of resource last modification (UTC)
  [SystemDataLastModifiedBy <String>]: The identity that last modified the resource.
  [SystemDataLastModifiedByType <CreatedByType?>]: The type of identity that last modified the resource.
  [AdditionalProperty <String>]: Extensible KV pairs serialized as a string. This is currently used to report the stamp OEM family and hardware model information when an update is flagged as Invalid for the stamp based on OEM type.
  [AvailabilityType <AvailabilityType?>]: Indicates the way the update content can be downloaded.
  [ComponentVersion <IPackageVersionInfo[]>]: An array of component versions for a Solution Bundle update, and an empty array otherwise.  
    [LastUpdated <DateTime?>]: Last time this component was updated.
    [PackageType <String>]: Package type
    [Version <String>]: Package version
  [Description <String>]: Description of the update.
  [DisplayName <String>]: Display name of the Update
  [HealthCheckDate <DateTime?>]: Last time the package-specific checks were run.
  [HealthCheckResult <IPrecheckResult[]>]: An array of PrecheckResult objects.
    [AdditionalData <String>]: Property bag of key value pairs for additional information.
    [Description <String>]: Detailed overview of the issue and what impact the issue has on the stamp.
    [DisplayName <String>]: The health check DisplayName localized of the individual test executed.
    [HealthCheckSource <String>]: The name of the services called for the HealthCheck (I.E. Test-AzureStack, Test-Cluster).
    [Name <String>]: Name of the individual test/rule/alert that was executed. Unique, not exposed to the customer.
    [Remediation <String>]: Set of steps that can be taken to resolve the issue found.
    [Severity <Severity?>]: Severity of the result (Critical, Warning, Informational, Hidden). This answers how important the result is. Critical is the only update-blocking severity.
    [Status <Status?>]: The status of the check running (i.e. Failed, Succeeded, In Progress). This answers whether the check ran, and passed or failed.
    [TagKey <String>]: Key that allow grouping/filtering individual tests.
    [TagValue <String>]: Value of the key that allow grouping/filtering individual tests.
    [TargetResourceId <String>]: The unique identifier for the affected resource (such as a node or drive).
    [TargetResourceName <String>]: The name of the affected resource.
    [Timestamp <DateTime?>]: The time in which the HealthCheck was called.
    [Title <String>]: User-facing name; one or more sentences indicating the direct issue.
  [HealthState <HealthState?>]: Overall health state for update-specific health checks.
  [InstalledDate <DateTime?>]: Date that the update was installed.
  [Location <String>]: The geo-location where the resource lives
  [MinSbeVersionRequired <String>]: Minimum Sbe Version of the update.
  [PackagePath <String>]: Path where the update package is available.
  [PackageSizeInMb <Single?>]: Size of the package. This value is a combination of the size from update metadata and size of the payload that results from the live scan operation for OS update content.
  [PackageType <String>]: Customer-visible type of the update.
  [Prerequisite <IUpdatePrerequisite[]>]: If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update. Otherwise, it is empty.
    [PackageName <String>]: Friendly name of the prerequisite.
    [UpdateType <String>]: Updatable component type.
    [Version <String>]: Version of the prerequisite.
  [Publisher <String>]: Publisher of the update package.
  [RebootRequired <RebootRequirement?>]: 
  [ReleaseLink <String>]: Link to release notes for the update.
  [State <State?>]: State of the update as it relates to this stamp.
  [StatePropertyNotifyMessage <String>]: Brief message with instructions for updates of AvailabilityType Notify.
  [StatePropertyProgressPercentage <Single?>]: Progress percentage of ongoing operation. Currently this property is only valid when the update is in the Downloading state, where it maps to how much of the update content has been downloaded.
  [Version <String>]: Version of the update.
.Link
https://learn.microsoft.com/powershell/module/az.stackhci/set-azstackhciupdate
#>
function Set-AzStackHciUpdate {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IUpdate])]
[CmdletBinding(DefaultParameterSetName='PutExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Path')]
    [System.String]
    # The name of the cluster.
    ${ClusterName},

    [Parameter(Mandatory)]
    [Alias('UpdateName')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Path')]
    [System.String]
    # The name of the Update
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='Put', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IUpdate]
    # Update details
    # To construct, see NOTES section for UPDATEPROPERTY properties and create a hash table.
    ${UpdateProperty},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Extensible KV pairs serialized as a string.
    # This is currently used to report the stamp OEM family and hardware model information when an update is flagged as Invalid for the stamp based on OEM type.
    ${AdditionalProperty},

    [Parameter(ParameterSetName='PutExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.AvailabilityType])]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.AvailabilityType]
    # Indicates the way the update content can be downloaded.
    ${AvailabilityType},

    [Parameter(ParameterSetName='PutExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IPackageVersionInfo[]]
    # An array of component versions for a Solution Bundle update, and an empty array otherwise.
    # 
    # To construct, see NOTES section for COMPONENTVERSION properties and create a hash table.
    ${ComponentVersion},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Description of the update.
    ${Description},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Display name of the Update
    ${DisplayName},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.DateTime]
    # Last time the package-specific checks were run.
    ${HealthCheckDate},

    [Parameter(ParameterSetName='PutExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IPrecheckResult[]]
    # An array of PrecheckResult objects.
    # To construct, see NOTES section for HEALTHCHECKRESULT properties and create a hash table.
    ${HealthCheckResult},

    [Parameter(ParameterSetName='PutExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.HealthState])]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.HealthState]
    # Overall health state for update-specific health checks.
    ${HealthState},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.DateTime]
    # Date that the update was installed.
    ${InstalledDate},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Minimum Sbe Version of the update.
    ${MinSbeVersionRequired},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Path where the update package is available.
    ${PackagePath},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.Single]
    # Size of the package.
    # This value is a combination of the size from update metadata and size of the payload that results from the live scan operation for OS update content.
    ${PackageSizeInMb},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Customer-visible type of the update.
    ${PackageType},

    [Parameter(ParameterSetName='PutExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.IUpdatePrerequisite[]]
    # If update State is HasPrerequisite, this property contains an array of objects describing prerequisite updates before installing this update.
    # Otherwise, it is empty.
    # To construct, see NOTES section for PREREQUISITE properties and create a hash table.
    ${Prerequisite},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Publisher of the update package.
    ${Publisher},

    [Parameter(ParameterSetName='PutExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.RebootRequirement])]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.RebootRequirement]
    # .
    ${RebootRequired},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Link to release notes for the update.
    ${ReleaseLink},

    [Parameter(ParameterSetName='PutExpanded')]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.State])]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.State]
    # State of the update as it relates to this stamp.
    ${State},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Brief message with instructions for updates of AvailabilityType Notify.
    ${UpdateStatePropertyNotifyMessage},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.Single]
    # Progress percentage of ongoing operation.
    # Currently this property is only valid when the update is in the Downloading state, where it maps to how much of the update content has been downloaded.
    ${UpdateStatePropertyProgressPercentage},

    [Parameter(ParameterSetName='PutExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Body')]
    [System.String]
    # Version of the update.
    ${Version},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            Put = 'Az.StackHCI.private\Set-AzStackHciUpdate_Put';
            PutExpanded = 'Az.StackHCI.private\Set-AzStackHciUpdate_PutExpanded';
        }
        if (('Put', 'PutExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
