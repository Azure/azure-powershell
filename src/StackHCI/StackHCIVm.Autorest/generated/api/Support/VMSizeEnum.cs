// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support
{

    public partial struct VMSizeEnum :
        System.IEquatable<VMSizeEnum>
    {
        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum Custom = @"Custom";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum Default = @"Default";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardA2V2 = @"Standard_A2_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardA4V2 = @"Standard_A4_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardD16SV3 = @"Standard_D16s_v3";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardD2SV3 = @"Standard_D2s_v3";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardD32SV3 = @"Standard_D32s_v3";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardD4SV3 = @"Standard_D4s_v3";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardD8SV3 = @"Standard_D8s_v3";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardDs13V2 = @"Standard_DS13_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardDs2V2 = @"Standard_DS2_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardDs3V2 = @"Standard_DS3_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardDs4V2 = @"Standard_DS4_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardDs5V2 = @"Standard_DS5_v2";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardK8S2V1 = @"Standard_K8S2_v1";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardK8S3V1 = @"Standard_K8S3_v1";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardK8S4V1 = @"Standard_K8S4_v1";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardK8S5V1 = @"Standard_K8S5_v1";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardK8SV1 = @"Standard_K8S_v1";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardNk12 = @"Standard_NK12";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardNk6 = @"Standard_NK6";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardNv12 = @"Standard_NV12";

        public static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum StandardNv6 = @"Standard_NV6";

        /// <summary>the value for an instance of the <see cref="VMSizeEnum" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to VMSizeEnum</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VMSizeEnum" />.</param>
        internal static object CreateFrom(object value)
        {
            return new VMSizeEnum(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type VMSizeEnum</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type VMSizeEnum (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is VMSizeEnum && Equals((VMSizeEnum)obj);
        }

        /// <summary>Returns hashCode for enum VMSizeEnum</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for VMSizeEnum</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Creates an instance of the <see cref="VMSizeEnum"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private VMSizeEnum(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Implicit operator to convert string to VMSizeEnum</summary>
        /// <param name="value">the value to convert to an instance of <see cref="VMSizeEnum" />.</param>

        public static implicit operator VMSizeEnum(string value)
        {
            return new VMSizeEnum(value);
        }

        /// <summary>Implicit operator to convert VMSizeEnum to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="VMSizeEnum" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum VMSizeEnum</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum e1, Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum VMSizeEnum</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum e1, Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum e2)
        {
            return e2.Equals(e1);
        }
    }
}