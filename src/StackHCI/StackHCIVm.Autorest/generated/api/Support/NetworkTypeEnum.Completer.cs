// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support
{

    /// <summary>Type of the network</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.NetworkTypeEnumTypeConverter))]
    public partial struct NetworkTypeEnum :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NAT".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("NAT", "NAT", global::System.Management.Automation.CompletionResultType.ParameterValue, "NAT");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Transparent".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Transparent", "Transparent", global::System.Management.Automation.CompletionResultType.ParameterValue, "Transparent");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "L2Bridge".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("L2Bridge", "L2Bridge", global::System.Management.Automation.CompletionResultType.ParameterValue, "L2Bridge");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "L2Tunnel".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("L2Tunnel", "L2Tunnel", global::System.Management.Automation.CompletionResultType.ParameterValue, "L2Tunnel");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ICS".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("ICS", "ICS", global::System.Management.Automation.CompletionResultType.ParameterValue, "ICS");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Private".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Private", "Private", global::System.Management.Automation.CompletionResultType.ParameterValue, "Private");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Overlay".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Overlay", "Overlay", global::System.Management.Automation.CompletionResultType.ParameterValue, "Overlay");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Internal".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Internal", "Internal", global::System.Management.Automation.CompletionResultType.ParameterValue, "Internal");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Mirrored".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("Mirrored", "Mirrored", global::System.Management.Automation.CompletionResultType.ParameterValue, "Mirrored");
            }
        }
    }
}