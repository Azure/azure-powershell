// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Extensions;

    /// <summary>
    /// The operation to create or update a virtual machine. Please note some properties can be set only during virtual machine
    /// creation.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/virtualMachines/{virtualMachineName}"
    /// </remarks>
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.InternalExport]
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzStackHciVMVirtualMachine_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Description(@"The operation to create or update a virtual machine. Please note some properties can be set only during virtual machine creation.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Generated]
    public partial class NewAzStackHciVMVirtualMachine_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>AdminPassword - admin password</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AdminPassword - admin password")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AdminPassword - admin password",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(string) })]
        public string AdminPassword { get => VirtualMachinesBody.OSProfileAdminPassword ?? null; set => VirtualMachinesBody.OSProfileAdminPassword = value; }

        /// <summary>AdminUsername - admin username</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "AdminUsername - admin username")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"AdminUsername - admin username",
        SerializedName = @"adminUsername",
        PossibleTypes = new [] { typeof(string) })]
        public string AdminUsername { get => VirtualMachinesBody.OSProfileAdminUsername ?? null; set => VirtualMachinesBody.OSProfileAdminUsername = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.StackHciVM Client => Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Module.Instance.ClientAPI;

        /// <summary>ComputerName - name of the compute</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ComputerName - name of the compute")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ComputerName - name of the compute",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        public string ComputerName { get => VirtualMachinesBody.OSProfileComputerName ?? null; set => VirtualMachinesBody.OSProfileComputerName = value; }

        /// <summary>The name of the extended location.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The name of the extended location.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the extended location.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string CustomLocationId { get => VirtualMachinesBody.ExtendedLocationName ?? null; set => VirtualMachinesBody.ExtendedLocationName = value; }

        /// <summary>
        /// The credentials, account, tenant, and subscription used for communication with Azure
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The credentials, account, tenant, and subscription used for communication with Azure.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// DisablePasswordAuthentication - whether password authentication should be disabled
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "DisablePasswordAuthentication - whether password authentication should be disabled")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DisablePasswordAuthentication - whether password authentication should be disabled",
        SerializedName = @"disablePasswordAuthentication",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter DisablePasswordAuthentication { get => VirtualMachinesBody.LinuxConfigurationDisablePasswordAuthentication ?? default(global::System.Management.Automation.SwitchParameter); set => VirtualMachinesBody.LinuxConfigurationDisablePasswordAuthentication = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"maximumMemoryMB",
        PossibleTypes = new [] { typeof(long) })]
        public long DynamicMemoryMaximumMemory { get => VirtualMachinesBody.DynamicMemoryConfigMaximumMemoryMb ?? default(long); set => VirtualMachinesBody.DynamicMemoryConfigMaximumMemoryMb = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"minimumMemoryMB",
        PossibleTypes = new [] { typeof(long) })]
        public long DynamicMemoryMinimumMemory { get => VirtualMachinesBody.DynamicMemoryConfigMinimumMemoryMb ?? default(long); set => VirtualMachinesBody.DynamicMemoryConfigMinimumMemoryMb = value; }

        /// <summary>
        /// Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total
        /// memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled.
        /// This property can be in the range of 5 to 2000.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Defines the amount of extra memory that should be reserved for a virtual machine at runtime, as a percentage of the total memory that the virtual machine is thought to need. This only applies to virtual systems with dynamic memory enabled. This property can be in the range of 5 to 2000.",
        SerializedName = @"targetMemoryBuffer",
        PossibleTypes = new [] { typeof(int) })]
        public int DynamicMemoryTargetBuffer { get => VirtualMachinesBody.DynamicMemoryConfigTargetMemoryBuffer ?? default(int); set => VirtualMachinesBody.DynamicMemoryConfigTargetMemoryBuffer = value; }

        /// <summary>Whether to EnableAutomaticUpdates on the machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Whether to EnableAutomaticUpdates on the machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to EnableAutomaticUpdates on the machine",
        SerializedName = @"enableAutomaticUpdates",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnableAutomaticUpdate { get => VirtualMachinesBody.WindowConfigurationEnableAutomaticUpdate ?? default(global::System.Management.Automation.SwitchParameter); set => VirtualMachinesBody.WindowConfigurationEnableAutomaticUpdate = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"enableTPM",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter EnableTpm { get => VirtualMachinesBody.SecurityProfileEnableTpm ?? default(global::System.Management.Automation.SwitchParameter); set => VirtualMachinesBody.SecurityProfileEnableTpm = value; }

        /// <summary>The type of the extended location.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of the extended location.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the extended location.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ExtendedLocationTypes) })]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"""CustomLocation""")]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ExtendedLocationTypes))]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ExtendedLocationTypes ExtendedLocationType { get => VirtualMachinesBody.ExtendedLocationType ?? ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ExtendedLocationTypes)""); set => VirtualMachinesBody.ExtendedLocationType = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>The identity type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The identity type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ResourceIdentityType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ResourceIdentityType))]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ResourceIdentityType IdentityType { get => VirtualMachinesBody.IdentityType ?? ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.ResourceIdentityType)""); set => VirtualMachinesBody.IdentityType = value; }

        /// <summary>Resource ID of the image</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource ID of the image")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of the image",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string ImageId { get => VirtualMachinesBody.ImageReferenceId ?? null; set => VirtualMachinesBody.ImageReferenceId = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.",
        SerializedName = @"provisionVMAgent",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter LinuxConfigurationProvisionVMAgent { get => VirtualMachinesBody.LinuxConfigurationProvisionVMAgent ?? default(global::System.Management.Automation.SwitchParameter); set => VirtualMachinesBody.LinuxConfigurationProvisionVMAgent = value; }

        /// <summary>
        /// PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.",
        SerializedName = @"publicKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesOSProfileLinuxConfigurationSshPublicKeysItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesOSProfileLinuxConfigurationSshPublicKeysItem[] LinuxConfigurationSshPublicKey { get => VirtualMachinesBody.LinuxConfigurationSshPublicKey ?? null /* arrayOf */; set => VirtualMachinesBody.LinuxConfigurationSshPublicKey = value; }

        /// <summary>The geo-location where the resource lives</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The geo-location where the resource lives")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The geo-location where the resource lives",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        public string Location { get => VirtualMachinesBody.Location ?? null; set => VirtualMachinesBody.Location = value; }

        /// <summary>
        /// <see cref="IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the virtual machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Name of the virtual machine")]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the virtual machine",
        SerializedName = @"virtualMachineName",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("VirtualMachineName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>
        /// NetworkInterfaces - list of network interfaces to be attached to the virtual machine
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "NetworkInterfaces - list of network interfaces to be attached to the virtual machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NetworkInterfaces - list of network interfaces to be attached to the virtual machine",
        SerializedName = @"networkInterfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesNetworkProfileNetworkInterfacesItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesNetworkProfileNetworkInterfacesItem[] NetworkProfileNetworkInterface { get => VirtualMachinesBody.NetworkProfileNetworkInterface ?? null /* arrayOf */; set => VirtualMachinesBody.NetworkProfileNetworkInterface = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>Resource ID of the OS disk</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource ID of the OS disk")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of the OS disk",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        public string OSDiskId { get => VirtualMachinesBody.OSDiskId ?? null; set => VirtualMachinesBody.OSDiskId = value; }

        /// <summary>OsType - string specifying whether the OS is Linux or Windows</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "OsType - string specifying whether the OS is Linux or Windows")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"OsType - string specifying whether the OS is Linux or Windows",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.OSTypeEnum) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.OSTypeEnum))]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.OSTypeEnum OsType { get => VirtualMachinesBody.OSProfileOstype ?? ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.OSTypeEnum)""); set => VirtualMachinesBody.OSProfileOstype = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Backing field for <see cref="ResourceGroupName" /> property.</summary>
        private string _resourceGroupName;

        /// <summary>The name of the resource group. The name is case insensitive.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The name of the resource group. The name is case insensitive.")]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the resource group. The name is case insensitive.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Path)]
        public string ResourceGroupName { get => this._resourceGroupName; set => this._resourceGroupName = value; }

        /// <summary>Specifies whether secure boot should be enabled on the virtual machine.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Specifies whether secure boot should be enabled on the virtual machine.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether secure boot should be enabled on the virtual machine.",
        SerializedName = @"secureBootEnabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SecureBootEnabled { get => VirtualMachinesBody.UefiSettingSecureBootEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => VirtualMachinesBody.UefiSettingSecureBootEnabled = value; }

        /// <summary>Id of the storage container that hosts the VM configuration file</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Id of the storage container that hosts the VM configuration file")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Id of the storage container that hosts the VM configuration file",
        SerializedName = @"vmConfigStoragePathId",
        PossibleTypes = new [] { typeof(string) })]
        public string StoragePathId { get => VirtualMachinesBody.StorageProfileVMConfigStoragePathId ?? null; set => VirtualMachinesBody.StorageProfileVMConfigStoragePathId = value; }

        /// <summary>adds data disks to the virtual machine</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "adds data disks to the virtual machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"adds data disks to the virtual machine",
        SerializedName = @"dataDisks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesStorageProfileDataDisksItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesStorageProfileDataDisksItem[] StorageProfileDataDisk { get => VirtualMachinesBody.StorageProfileDataDisk ?? null /* arrayOf */; set => VirtualMachinesBody.StorageProfileDataDisk = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription.")]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The timestamp of resource creation (UTC).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime SystemDataCreatedAt { get => VirtualMachinesBody.SystemDataCreatedAt ?? default(global::System.DateTime); set => VirtualMachinesBody.SystemDataCreatedAt = value; }

        /// <summary>The identity that created the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The identity that created the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        public string SystemDataCreatedBy { get => VirtualMachinesBody.SystemDataCreatedBy ?? null; set => VirtualMachinesBody.SystemDataCreatedBy = value; }

        /// <summary>The type of identity that created the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of identity that created the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType))]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType SystemDataCreatedByType { get => VirtualMachinesBody.SystemDataCreatedByType ?? ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType)""); set => VirtualMachinesBody.SystemDataCreatedByType = value; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The timestamp of resource last modification (UTC)")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime SystemDataLastModifiedAt { get => VirtualMachinesBody.SystemDataLastModifiedAt ?? default(global::System.DateTime); set => VirtualMachinesBody.SystemDataLastModifiedAt = value; }

        /// <summary>The identity that last modified the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The identity that last modified the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        public string SystemDataLastModifiedBy { get => VirtualMachinesBody.SystemDataLastModifiedBy ?? null; set => VirtualMachinesBody.SystemDataLastModifiedBy = value; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of identity that last modified the resource.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType))]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType SystemDataLastModifiedByType { get => VirtualMachinesBody.SystemDataLastModifiedByType ?? ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.CreatedByType)""); set => VirtualMachinesBody.SystemDataLastModifiedByType = value; }

        /// <summary>Resource tags.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource tags.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.ITrackedResourceTags) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.ITrackedResourceTags Tags { get => VirtualMachinesBody.Tag ?? null /* object */; set => VirtualMachinesBody.Tag = value; }

        /// <summary>TimeZone for the virtual machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "TimeZone for the virtual machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"TimeZone for the virtual machine",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        public string TimeZone { get => VirtualMachinesBody.WindowConfigurationTimeZone ?? null; set => VirtualMachinesBody.WindowConfigurationTimeZone = value; }

        /// <summary>Backing field for <see cref="VirtualMachinesBody" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines _virtualMachinesBody= new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.VirtualMachines();

        /// <summary>The virtual machine resource definition.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines VirtualMachinesBody { get => this._virtualMachinesBody; set => this._virtualMachinesBody = value; }

        /// <summary>RAM in MB for the virtual machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "RAM in MB for the virtual machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"RAM in MB for the virtual machine",
        SerializedName = @"memoryMB",
        PossibleTypes = new [] { typeof(long) })]
        public long VmMemory { get => VirtualMachinesBody.HardwareProfileMemoryMb ?? default(long); set => VirtualMachinesBody.HardwareProfileMemoryMb = value; }

        /// <summary>number of processors for the virtual machine</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "number of processors for the virtual machine")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"number of processors for the virtual machine",
        SerializedName = @"processors",
        PossibleTypes = new [] { typeof(int) })]
        public int VmProcessors { get => VirtualMachinesBody.HardwareProfileProcessor ?? default(int); set => VirtualMachinesBody.HardwareProfileProcessor = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum) })]
        [global::System.Management.Automation.ArgumentCompleter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum))]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum VmSize { get => VirtualMachinesBody.HardwareProfileVMSize ?? ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Support.VMSizeEnum)""); set => VirtualMachinesBody.HardwareProfileVMSize = value; }

        /// <summary>
        /// Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Used to indicate whether Arc for Servers agent onboarding should be triggered during the virtual machine creation process.",
        SerializedName = @"provisionVMAgent",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter WindowConfigurationProvisionVMAgent { get => VirtualMachinesBody.WindowConfigurationProvisionVMAgent ?? default(global::System.Management.Automation.SwitchParameter); set => VirtualMachinesBody.WindowConfigurationProvisionVMAgent = value; }

        /// <summary>
        /// PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Category(global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"PublicKeys - The list of SSH public keys used to authenticate with linux based VMs.",
        SerializedName = @"publicKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesOSProfileWindowsConfigurationSshPublicKeysItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachinePropertiesOSProfileWindowsConfigurationSshPublicKeysItem[] WindowsConfigurationSshPublicKey { get => VirtualMachinesBody.WindowsConfigurationSshPublicKey ?? null /* arrayOf */; set => VirtualMachinesBody.WindowsConfigurationSshPublicKey = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.IErrorResponse"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines"
        /// /> from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of NewAzStackHciVMVirtualMachine_CreateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Cmdlets.NewAzStackHciVMVirtualMachine_CreateExpanded Clone()
        {
            var clone = new NewAzStackHciVMVirtualMachine_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone.VirtualMachinesBody = this.VirtualMachinesBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.ResourceGroupName = this.ResourceGroupName;
            clone.Name = this.Name;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletEndProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.DelayBeforePolling:
                    {
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            var data = messageData();
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Module.Instance.Signal(id, token, messageData, (i,t,m) => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(i,t,()=> Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.EventDataConverter.ConvertFrom( m() ) as Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.EventData ), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Intializes a new instance of the <see cref="NewAzStackHciVMVirtualMachine_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzStackHciVMVirtualMachine_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'VirtualMachinesCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletProcessRecordAsyncStart); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.VirtualMachinesCreateOrUpdate(SubscriptionId, ResourceGroupName, Name, VirtualMachinesBody, onOk, onDefault, this, Pipeline);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  SubscriptionId=SubscriptionId,ResourceGroupName=ResourceGroupName,Name=Name,body=VirtualMachinesBody})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.IErrorResponse"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api30.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Name=Name, body=VirtualMachinesBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId, ResourceGroupName=ResourceGroupName, Name=Name, body=VirtualMachinesBody })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines"
        /// /> from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.StackHCIVm.Models.Api20221215Preview.IVirtualMachines
                WriteObject((await response));
            }
        }
    }
}