// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Extensions;

    /// <summary>Status of Arc Extension for a particular node in HCI Cluster.</summary>
    public partial class ExtensionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionProperties,
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AggregateState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ExtensionAggregateState? _aggregateState;

        /// <summary>Aggregate state of Arc Extensions across the nodes in this HCI cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ExtensionAggregateState? AggregateState { get => this._aggregateState; }

        /// <summary>Backing field for <see cref="ExtensionParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParameters _extensionParameter;

        /// <summary>Parameters specific to this extension type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParameters ExtensionParameter { get => (this._extensionParameter = this._extensionParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.ExtensionParameters()); set => this._extensionParameter = value; }

        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
        /// however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public bool? ExtensionParameterAutoUpgradeMinorVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).AutoUpgradeMinorVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).AutoUpgradeMinorVersion = value ?? default(bool); }

        /// <summary>
        /// How the extension handler should be forced to update even if the extension configuration has not changed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public string ExtensionParameterForceUpdateTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).ForceUpdateTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).ForceUpdateTag = value ?? null; }

        /// <summary>Protected settings (may contain secrets).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny ExtensionParameterProtectedSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).ProtectedSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).ProtectedSetting = value ?? null /* model class */; }

        /// <summary>The name of the extension handler publisher.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public string ExtensionParameterPublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).Publisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).Publisher = value ?? null; }

        /// <summary>Json formatted public settings for the extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny ExtensionParameterSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).Setting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).Setting = value ?? null /* model class */; }

        /// <summary>Specifies the type of the extension; an example is "CustomScriptExtension".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public string ExtensionParameterType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).Type = value ?? null; }

        /// <summary>Specifies the version of the script handler.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Inlined)]
        public string ExtensionParameterTypeHandlerVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).TypeHandlerVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParametersInternal)ExtensionParameter).TypeHandlerVersion = value ?? null; }

        /// <summary>Internal Acessors for AggregateState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ExtensionAggregateState? Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionPropertiesInternal.AggregateState { get => this._aggregateState; set { {_aggregateState = value;} } }

        /// <summary>Internal Acessors for ExtensionParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParameters Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionPropertiesInternal.ExtensionParameter { get => (this._extensionParameter = this._extensionParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.ExtensionParameters()); set { {_extensionParameter = value;} } }

        /// <summary>Internal Acessors for PerNodeExtensionDetail</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IPerNodeExtensionState[] Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionPropertiesInternal.PerNodeExtensionDetail { get => this._perNodeExtensionDetail; set { {_perNodeExtensionDetail = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="PerNodeExtensionDetail" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IPerNodeExtensionState[] _perNodeExtensionDetail;

        /// <summary>State of Arc Extension in each of the nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IPerNodeExtensionState[] PerNodeExtensionDetail { get => this._perNodeExtensionDetail; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ProvisioningState? _provisioningState;

        /// <summary>Provisioning state of the Extension proxy resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Creates an new <see cref="ExtensionProperties" /> instance.</summary>
        public ExtensionProperties()
        {

        }
    }
    /// Status of Arc Extension for a particular node in HCI Cluster.
    public partial interface IExtensionProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.IJsonSerializable
    {
        /// <summary>Aggregate state of Arc Extensions across the nodes in this HCI cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Aggregate state of Arc Extensions across the nodes in this HCI cluster.",
        SerializedName = @"aggregateState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ExtensionAggregateState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ExtensionAggregateState? AggregateState { get;  }
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
        /// however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed, however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.",
        SerializedName = @"autoUpgradeMinorVersion",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExtensionParameterAutoUpgradeMinorVersion { get; set; }
        /// <summary>
        /// How the extension handler should be forced to update even if the extension configuration has not changed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"How the extension handler should be forced to update even if the extension configuration has not changed.",
        SerializedName = @"forceUpdateTag",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionParameterForceUpdateTag { get; set; }
        /// <summary>Protected settings (may contain secrets).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Protected settings (may contain secrets).",
        SerializedName = @"protectedSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny ExtensionParameterProtectedSetting { get; set; }
        /// <summary>The name of the extension handler publisher.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the extension handler publisher.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionParameterPublisher { get; set; }
        /// <summary>Json formatted public settings for the extension.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Json formatted public settings for the extension.",
        SerializedName = @"settings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny) })]
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny ExtensionParameterSetting { get; set; }
        /// <summary>Specifies the type of the extension; an example is "CustomScriptExtension".</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the type of the extension; an example is ""CustomScriptExtension"".",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionParameterType { get; set; }
        /// <summary>Specifies the version of the script handler.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the version of the script handler.",
        SerializedName = @"typeHandlerVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionParameterTypeHandlerVersion { get; set; }
        /// <summary>State of Arc Extension in each of the nodes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"State of Arc Extension in each of the nodes.",
        SerializedName = @"perNodeExtensionDetails",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IPerNodeExtensionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IPerNodeExtensionState[] PerNodeExtensionDetail { get;  }
        /// <summary>Provisioning state of the Extension proxy resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state of the Extension proxy resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ProvisioningState? ProvisioningState { get;  }

    }
    /// Status of Arc Extension for a particular node in HCI Cluster.
    internal partial interface IExtensionPropertiesInternal

    {
        /// <summary>Aggregate state of Arc Extensions across the nodes in this HCI cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ExtensionAggregateState? AggregateState { get; set; }
        /// <summary>Parameters specific to this extension type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IExtensionParameters ExtensionParameter { get; set; }
        /// <summary>
        /// Indicates whether the extension should use a newer minor version if one is available at deployment time. Once deployed,
        /// however, the extension will not upgrade minor versions unless redeployed, even with this property set to true.
        /// </summary>
        bool? ExtensionParameterAutoUpgradeMinorVersion { get; set; }
        /// <summary>
        /// How the extension handler should be forced to update even if the extension configuration has not changed.
        /// </summary>
        string ExtensionParameterForceUpdateTag { get; set; }
        /// <summary>Protected settings (may contain secrets).</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny ExtensionParameterProtectedSetting { get; set; }
        /// <summary>The name of the extension handler publisher.</summary>
        string ExtensionParameterPublisher { get; set; }
        /// <summary>Json formatted public settings for the extension.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.IAny ExtensionParameterSetting { get; set; }
        /// <summary>Specifies the type of the extension; an example is "CustomScriptExtension".</summary>
        string ExtensionParameterType { get; set; }
        /// <summary>Specifies the version of the script handler.</summary>
        string ExtensionParameterTypeHandlerVersion { get; set; }
        /// <summary>State of Arc Extension in each of the nodes.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20220501.IPerNodeExtensionState[] PerNodeExtensionDetail { get; set; }
        /// <summary>Provisioning state of the Extension proxy resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.ProvisioningState? ProvisioningState { get; set; }

    }
}