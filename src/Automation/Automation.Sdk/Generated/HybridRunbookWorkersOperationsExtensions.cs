// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.Automation
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for HybridRunbookWorkersOperations
    /// </summary>
    public static partial class HybridRunbookWorkersOperationsExtensions
    {
        /// <summary>
        /// Delete a hybrid runbook worker.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        public static void Delete(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId)
        {
                ((IHybridRunbookWorkersOperations)operations).DeleteAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete a hybrid runbook worker.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieve a hybrid runbook worker.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        public static HybridRunbookWorker Get(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId)
        {
                return ((IHybridRunbookWorkersOperations)operations).GetAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieve a hybrid runbook worker.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridRunbookWorker> GetAsync(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create a hybrid runbook worker.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        public static HybridRunbookWorker Create(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId, HybridRunbookWorkerCreateParameters hybridRunbookWorkerCreationParameters)
        {
                return ((IHybridRunbookWorkersOperations)operations).CreateAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId, hybridRunbookWorkerCreationParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a hybrid runbook worker.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<HybridRunbookWorker> CreateAsync(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId, HybridRunbookWorkerCreateParameters hybridRunbookWorkerCreationParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId, hybridRunbookWorkerCreationParameters, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Move a hybrid worker to a different group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        public static void Move(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId, HybridRunbookWorkerMoveParameters hybridRunbookWorkerMoveParameters)
        {
                ((IHybridRunbookWorkersOperations)operations).MoveAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId, hybridRunbookWorkerMoveParameters).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Move a hybrid worker to a different group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='hybridRunbookWorkerId'>
        /// The hybrid runbook worker id
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task MoveAsync(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, string hybridRunbookWorkerId, HybridRunbookWorkerMoveParameters hybridRunbookWorkerMoveParameters, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.MoveWithHttpMessagesAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, hybridRunbookWorkerId, hybridRunbookWorkerMoveParameters, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Retrieve a list of hybrid runbook workers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HybridRunbookWorker> ListByHybridRunbookWorkerGroup(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, Microsoft.Rest.Azure.OData.ODataQuery<HybridRunbookWorker> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<HybridRunbookWorker>))
        {
                return ((IHybridRunbookWorkersOperations)operations).ListByHybridRunbookWorkerGroupAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, odataQuery).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieve a list of hybrid runbook workers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='odataQuery'>
        /// 
        /// </param>
        /// <param name='resourceGroupName'>
        /// Name of an Azure Resource group.
        /// </param>
        /// <param name='automationAccountName'>
        /// The name of the automation account.
        /// </param>
        /// <param name='hybridRunbookWorkerGroupName'>
        /// The hybrid runbook worker group name
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HybridRunbookWorker>> ListByHybridRunbookWorkerGroupAsync(this IHybridRunbookWorkersOperations operations, string resourceGroupName, string automationAccountName, string hybridRunbookWorkerGroupName, Microsoft.Rest.Azure.OData.ODataQuery<HybridRunbookWorker> odataQuery = default(Microsoft.Rest.Azure.OData.ODataQuery<HybridRunbookWorker>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByHybridRunbookWorkerGroupWithHttpMessagesAsync(resourceGroupName, automationAccountName, hybridRunbookWorkerGroupName, odataQuery, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Retrieve a list of hybrid runbook workers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<HybridRunbookWorker> ListByHybridRunbookWorkerGroupNext(this IHybridRunbookWorkersOperations operations, string nextPageLink)
        {
                return ((IHybridRunbookWorkersOperations)operations).ListByHybridRunbookWorkerGroupNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Retrieve a list of hybrid runbook workers.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<HybridRunbookWorker>> ListByHybridRunbookWorkerGroupNextAsync(this IHybridRunbookWorkersOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByHybridRunbookWorkerGroupNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
