// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Automation.Models
{
    using System.Linq;

    /// <summary>
    /// Definition of the module property type.
    /// </summary>
    public partial class ModuleProperties
    {
        /// <summary>
        /// Initializes a new instance of the ModuleProperties class.
        /// </summary>
        public ModuleProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ModuleProperties class.
        /// </summary>

        /// <param name="isGlobal">Gets or sets the isGlobal flag of the module.
        /// </param>

        /// <param name="version">Gets or sets the version of the module.
        /// </param>

        /// <param name="sizeInBytes">Gets or sets the size in bytes of the module.
        /// </param>

        /// <param name="activityCount">Gets or sets the activity count of the module.
        /// </param>

        /// <param name="provisioningState">Gets or sets the provisioning state of the module.
        /// Possible values include: 'Created', 'Creating',
        /// 'StartingImportModuleRunbook', 'RunningImportModuleRunbook',
        /// 'ContentRetrieved', 'ContentDownloaded', 'ContentValidated',
        /// 'ConnectionTypeImported', 'ContentStored', 'ModuleDataStored',
        /// 'ActivitiesStored', 'ModuleImportRunbookComplete', 'Succeeded', 'Failed',
        /// 'Cancelled', 'Updating'</param>

        /// <param name="contentLink">Gets or sets the contentLink of the module.
        /// </param>

        /// <param name="error">Gets or sets the error info of the module.
        /// </param>

        /// <param name="creationTime">Gets or sets the creation time.
        /// </param>

        /// <param name="lastModifiedTime">Gets or sets the last modified time.
        /// </param>

        /// <param name="description">Gets or sets the description.
        /// </param>

        /// <param name="isComposite">Gets or sets type of module, if its composite or not.
        /// </param>
        public ModuleProperties(bool? isGlobal = default(bool?), string version = default(string), long? sizeInBytes = default(long?), int? activityCount = default(int?), string provisioningState = default(string), ContentLink contentLink = default(ContentLink), ModuleErrorInfo error = default(ModuleErrorInfo), System.DateTimeOffset creationTime = default(System.DateTimeOffset), System.DateTimeOffset lastModifiedTime = default(System.DateTimeOffset), string description = default(string), bool? isComposite = default(bool?))

        {
            this.IsGlobal = isGlobal;
            this.Version = version;
            this.SizeInBytes = sizeInBytes;
            this.ActivityCount = activityCount;
            this.ProvisioningState = provisioningState;
            this.ContentLink = contentLink;
            this.Error = error;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Description = description;
            this.IsComposite = isComposite;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets or sets the isGlobal flag of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isGlobal")]
        public bool? IsGlobal {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the version of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "version")]
        public string Version {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the size in bytes of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sizeInBytes")]
        public long? SizeInBytes {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the activity count of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activityCount")]
        public int? ActivityCount {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the provisioning state of the module. Possible values include: &#39;Created&#39;, &#39;Creating&#39;, &#39;StartingImportModuleRunbook&#39;, &#39;RunningImportModuleRunbook&#39;, &#39;ContentRetrieved&#39;, &#39;ContentDownloaded&#39;, &#39;ContentValidated&#39;, &#39;ConnectionTypeImported&#39;, &#39;ContentStored&#39;, &#39;ModuleDataStored&#39;, &#39;ActivitiesStored&#39;, &#39;ModuleImportRunbookComplete&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Cancelled&#39;, &#39;Updating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the contentLink of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "contentLink")]
        public ContentLink ContentLink {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the error info of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "error")]
        public ModuleErrorInfo Error {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the creation time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "creationTime")]
        public System.DateTimeOffset CreationTime {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the last modified time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "lastModifiedTime")]
        public System.DateTimeOffset LastModifiedTime {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets gets or sets type of module, if its composite or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isComposite")]
        public bool? IsComposite {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {


            if (this.ContentLink != null)
            {
                this.ContentLink.Validate();
            }


        }
    }
}