// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Automation
{
    using System.Linq;
    using Microsoft.Rest;
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// APIs for managing software update configurations.
    /// </summary>
    public partial class AutomationClient : Microsoft.Rest.ServiceClient<AutomationClient>, IAutomationClient, IAzureClient
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }
        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings SerializationSettings { get; private set; }
        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public Newtonsoft.Json.JsonSerializerSettings DeserializationSettings { get; private set; }
        /// <summary>
        /// Credentials needed for the client to connect to Azure.
        /// </summary>
        public Microsoft.Rest.ServiceClientCredentials Credentials { get; private set; }

        /// <summary>
        /// Gets subscription credentials which uniquely identify Microsoft Azure
        /// subscription. The subscription ID forms part of the URI for every service
        /// call.
        /// </summary>
        public string SubscriptionId { get; set;}

        /// <summary>
        /// The preferred language for the response.
        /// </summary>
        public string AcceptLanguage { get; set;}

        /// <summary>
        /// The retry timeout in seconds for Long Running Operations. Default
        /// /// value is 30.
        /// </summary>
        public int? LongRunningOperationRetryTimeout { get; set;}

        /// <summary>
        /// Whether a unique x-ms-client-request-id should be generated. When
        /// /// set to true a unique x-ms-client-request-id value is generated and
        /// /// included in each request. Default is true.
        /// </summary>
        public bool? GenerateClientRequestId { get; set;}

        /// <summary>
        /// Gets the IAgentRegistrationInformationOperations
        /// </summary>
        public virtual IAgentRegistrationInformationOperations AgentRegistrationInformation { get; private set; }
        /// <summary>
        /// Gets the IDscNodeOperations
        /// </summary>
        public virtual IDscNodeOperations DscNode { get; private set; }
        /// <summary>
        /// Gets the INodeReportsOperations
        /// </summary>
        public virtual INodeReportsOperations NodeReports { get; private set; }
        /// <summary>
        /// Gets the IDscNodeConfigurationOperations
        /// </summary>
        public virtual IDscNodeConfigurationOperations DscNodeConfiguration { get; private set; }
        /// <summary>
        /// Gets the IDscCompilationJobOperations
        /// </summary>
        public virtual IDscCompilationJobOperations DscCompilationJob { get; private set; }
        /// <summary>
        /// Gets the IDscCompilationJobStreamOperations
        /// </summary>
        public virtual IDscCompilationJobStreamOperations DscCompilationJobStream { get; private set; }
        /// <summary>
        /// Gets the ICertificateOperations
        /// </summary>
        public virtual ICertificateOperations Certificate { get; private set; }
        /// <summary>
        /// Gets the ICredentialOperations
        /// </summary>
        public virtual ICredentialOperations Credential { get; private set; }
        /// <summary>
        /// Gets the IJobScheduleOperations
        /// </summary>
        public virtual IJobScheduleOperations JobSchedule { get; private set; }
        /// <summary>
        /// Gets the IScheduleOperations
        /// </summary>
        public virtual IScheduleOperations Schedule { get; private set; }
        /// <summary>
        /// Gets the IActivityOperations
        /// </summary>
        public virtual IActivityOperations Activity { get; private set; }
        /// <summary>
        /// Gets the IModuleOperations
        /// </summary>
        public virtual IModuleOperations Module { get; private set; }
        /// <summary>
        /// Gets the IObjectDataTypesOperations
        /// </summary>
        public virtual IObjectDataTypesOperations ObjectDataTypes { get; private set; }
        /// <summary>
        /// Gets the IFieldsOperations
        /// </summary>
        public virtual IFieldsOperations Fields { get; private set; }
        /// <summary>
        /// Gets the IVariableOperations
        /// </summary>
        public virtual IVariableOperations Variable { get; private set; }
        /// <summary>
        /// Gets the IConnectionOperations
        /// </summary>
        public virtual IConnectionOperations Connection { get; private set; }
        /// <summary>
        /// Gets the IConnectionTypeOperations
        /// </summary>
        public virtual IConnectionTypeOperations ConnectionType { get; private set; }
        /// <summary>
        /// Gets the ISourceControlOperations
        /// </summary>
        public virtual ISourceControlOperations SourceControl { get; private set; }
        /// <summary>
        /// Gets the ISourceControlSyncJobOperations
        /// </summary>
        public virtual ISourceControlSyncJobOperations SourceControlSyncJob { get; private set; }
        /// <summary>
        /// Gets the ISourceControlSyncJobStreamsOperations
        /// </summary>
        public virtual ISourceControlSyncJobStreamsOperations SourceControlSyncJobStreams { get; private set; }
        /// <summary>
        /// Gets the IDscConfigurationOperations
        /// </summary>
        public virtual IDscConfigurationOperations DscConfiguration { get; private set; }
        /// <summary>
        /// Gets the IJobOperations
        /// </summary>
        public virtual IJobOperations Job { get; private set; }
        /// <summary>
        /// Gets the IJobStreamOperations
        /// </summary>
        public virtual IJobStreamOperations JobStream { get; private set; }
        /// <summary>
        /// Gets the ISoftwareUpdateConfigurationsOperations
        /// </summary>
        public virtual ISoftwareUpdateConfigurationsOperations SoftwareUpdateConfigurations { get; private set; }
        /// <summary>
        /// Gets the ISoftwareUpdateConfigurationRunsOperations
        /// </summary>
        public virtual ISoftwareUpdateConfigurationRunsOperations SoftwareUpdateConfigurationRuns { get; private set; }
        /// <summary>
        /// Gets the ISoftwareUpdateConfigurationMachineRunsOperations
        /// </summary>
        public virtual ISoftwareUpdateConfigurationMachineRunsOperations SoftwareUpdateConfigurationMachineRuns { get; private set; }
        /// <summary>
        /// Gets the IAutomationAccountOperations
        /// </summary>
        public virtual IAutomationAccountOperations AutomationAccount { get; private set; }
        /// <summary>
        /// Gets the IStatisticsOperations
        /// </summary>
        public virtual IStatisticsOperations Statistics { get; private set; }
        /// <summary>
        /// Gets the IUsagesOperations
        /// </summary>
        public virtual IUsagesOperations Usages { get; private set; }
        /// <summary>
        /// Gets the IKeysOperations
        /// </summary>
        public virtual IKeysOperations Keys { get; private set; }
        /// <summary>
        /// Gets the IWebhookOperations
        /// </summary>
        public virtual IWebhookOperations Webhook { get; private set; }
        /// <summary>
        /// Gets the IRunbookDraftOperations
        /// </summary>
        public virtual IRunbookDraftOperations RunbookDraft { get; private set; }
        /// <summary>
        /// Gets the IRunbookOperations
        /// </summary>
        public virtual IRunbookOperations Runbook { get; private set; }
        /// <summary>
        /// Gets the ITestJobStreamsOperations
        /// </summary>
        public virtual ITestJobStreamsOperations TestJobStreams { get; private set; }
        /// <summary>
        /// Gets the ITestJobOperations
        /// </summary>
        public virtual ITestJobOperations TestJob { get; private set; }
        /// <summary>
        /// Gets the IPowerShell72ModuleOperations
        /// </summary>
        public virtual IPowerShell72ModuleOperations PowerShell72Module { get; private set; }
        /// <summary>
        /// Gets the IHybridRunbookWorkersOperations
        /// </summary>
        public virtual IHybridRunbookWorkersOperations HybridRunbookWorkers { get; private set; }
        /// <summary>
        /// Gets the IHybridRunbookWorkerGroupOperations
        /// </summary>
        public virtual IHybridRunbookWorkerGroupOperations HybridRunbookWorkerGroup { get; private set; }
        /// <summary>
        /// Gets the IPython3PackageOperations
        /// </summary>
        public virtual IPython3PackageOperations Python3Package { get; private set; }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AutomationClient.Dispose(). False: will not dispose provided httpClient</param>
        protected AutomationClient(System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AutomationClient(params System.Net.Http.DelegatingHandler[] handlers) : base(handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient  class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        protected AutomationClient(System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            this.Initialize();
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AutomationClient(System.Uri baseUri, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        protected AutomationClient(System.Uri baseUri, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
        
            this.BaseUri = baseUri;
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='credentials'>
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AutomationClient(Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling AutomationClient.Dispose(). False: will not dispose provided httpClient</param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AutomationClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClient httpClient, bool disposeHttpClient) : this(httpClient, disposeHttpClient)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AutomationClient(Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AutomationClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, params System.Net.Http.DelegatingHandler[] handlers) : this(handlers) 
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// Initializes a new instance of the AutomationClient class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name="credentials">
        /// Required. Credentials needed for the client to connect to Azure.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public AutomationClient(System.Uri baseUri, Microsoft.Rest.ServiceClientCredentials credentials, System.Net.Http.HttpClientHandler rootHandler, params System.Net.Http.DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            if (credentials == null)
            {
                throw new System.ArgumentNullException("credentials");
            }
            this.BaseUri = baseUri;
            this.Credentials = credentials;
            if (this.Credentials != null)
            {
                this.Credentials.InitializeServiceClient(this);
            }
            
        }
        /// <summary>
        /// An optional partial-method to perform custom initialization.
        /// </summary>
        partial void CustomInitialize();

        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            this.AgentRegistrationInformation = new AgentRegistrationInformationOperations(this);
            this.DscNode = new DscNodeOperations(this);
            this.NodeReports = new NodeReportsOperations(this);
            this.DscNodeConfiguration = new DscNodeConfigurationOperations(this);
            this.DscCompilationJob = new DscCompilationJobOperations(this);
            this.DscCompilationJobStream = new DscCompilationJobStreamOperations(this);
            this.Certificate = new CertificateOperations(this);
            this.Credential = new CredentialOperations(this);
            this.JobSchedule = new JobScheduleOperations(this);
            this.Schedule = new ScheduleOperations(this);
            this.Activity = new ActivityOperations(this);
            this.Module = new ModuleOperations(this);
            this.ObjectDataTypes = new ObjectDataTypesOperations(this);
            this.Fields = new FieldsOperations(this);
            this.Variable = new VariableOperations(this);
            this.Connection = new ConnectionOperations(this);
            this.ConnectionType = new ConnectionTypeOperations(this);
            this.SourceControl = new SourceControlOperations(this);
            this.SourceControlSyncJob = new SourceControlSyncJobOperations(this);
            this.SourceControlSyncJobStreams = new SourceControlSyncJobStreamsOperations(this);
            this.DscConfiguration = new DscConfigurationOperations(this);
            this.Job = new JobOperations(this);
            this.JobStream = new JobStreamOperations(this);
            this.SoftwareUpdateConfigurations = new SoftwareUpdateConfigurationsOperations(this);
            this.SoftwareUpdateConfigurationRuns = new SoftwareUpdateConfigurationRunsOperations(this);
            this.SoftwareUpdateConfigurationMachineRuns = new SoftwareUpdateConfigurationMachineRunsOperations(this);
            this.AutomationAccount = new AutomationAccountOperations(this);
            this.Statistics = new StatisticsOperations(this);
            this.Usages = new UsagesOperations(this);
            this.Keys = new KeysOperations(this);
            this.Webhook = new WebhookOperations(this);
            this.RunbookDraft = new RunbookDraftOperations(this);
            this.Runbook = new RunbookOperations(this);
            this.TestJobStreams = new TestJobStreamsOperations(this);
            this.TestJob = new TestJobOperations(this);
            this.PowerShell72Module = new PowerShell72ModuleOperations(this);
            this.HybridRunbookWorkers = new HybridRunbookWorkersOperations(this);
            this.HybridRunbookWorkerGroup = new HybridRunbookWorkerGroupOperations(this);
            this.Python3Package = new Python3PackageOperations(this);
            this.BaseUri = new System.Uri("https://management.azure.com");
            this.AcceptLanguage = "en-US";
            this.LongRunningOperationRetryTimeout = 30;
            this.GenerateClientRequestId = true;
            SerializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            SerializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings = new Newtonsoft.Json.JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new Microsoft.Rest.Serialization.ReadOnlyJsonContractResolver(),
                Converters = new System.Collections.Generic.List<Newtonsoft.Json.JsonConverter>
                    {
                        new Microsoft.Rest.Serialization.Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Serialization.TransformationJsonConverter());
            DeserializationSettings.Converters.Add(new Microsoft.Rest.Azure.CloudErrorJsonConverter());
        }
    }
}