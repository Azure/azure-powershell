// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Automation.Models
{
    using System.Linq;

    /// <summary>
    /// Linux specific update configuration.
    /// </summary>
    public partial class LinuxProperties
    {
        /// <summary>
        /// Initializes a new instance of the LinuxProperties class.
        /// </summary>
        public LinuxProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinuxProperties class.
        /// </summary>

        /// <param name="includedPackageClassifications">Update classifications included in the software update configuration.
        /// Possible values include: &#39;Unclassified&#39;, &#39;Critical&#39;, &#39;Security&#39;, &#39;Other&#39;</param>

        /// <param name="excludedPackageNameMasks">packages excluded from the software update configuration.
        /// </param>

        /// <param name="includedPackageNameMasks">packages included from the software update configuration.
        /// </param>

        /// <param name="rebootSetting">Reboot setting for the software update configuration.
        /// </param>
        public LinuxProperties(string includedPackageClassifications = default(string), System.Collections.Generic.IList<string> excludedPackageNameMasks = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> includedPackageNameMasks = default(System.Collections.Generic.IList<string>), string rebootSetting = default(string))

        {
            this.IncludedPackageClassifications = includedPackageClassifications;
            this.ExcludedPackageNameMasks = excludedPackageNameMasks;
            this.IncludedPackageNameMasks = includedPackageNameMasks;
            this.RebootSetting = rebootSetting;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets update classifications included in the software update
        /// configuration. Possible values include: &#39;Unclassified&#39;, &#39;Critical&#39;, &#39;Security&#39;, &#39;Other&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedPackageClassifications")]
        public string IncludedPackageClassifications {get; set; }

        /// <summary>
        /// Gets or sets packages excluded from the software update configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "excludedPackageNameMasks")]
        public System.Collections.Generic.IList<string> ExcludedPackageNameMasks {get; set; }

        /// <summary>
        /// Gets or sets packages included from the software update configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "includedPackageNameMasks")]
        public System.Collections.Generic.IList<string> IncludedPackageNameMasks {get; set; }

        /// <summary>
        /// Gets or sets reboot setting for the software update configuration.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "rebootSetting")]
        public string RebootSetting {get; set; }
    }
}