// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Automation.Models
{
    using System.Linq;

    /// <summary>
    /// Definition of the module type.
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class Module : TrackedResource
    {
        /// <summary>
        /// Initializes a new instance of the Module class.
        /// </summary>
        public Module()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Module class.
        /// </summary>

        /// <param name="id">Fully qualified resource Id for the resource
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource.
        /// </param>

        /// <param name="tags">Resource tags.
        /// </param>

        /// <param name="location">The Azure Region where the resource lives
        /// </param>

        /// <param name="etag">Gets the etag of the resource.
        /// </param>

        /// <param name="contentLink">Gets or sets the contentLink of the module.
        /// </param>

        /// <param name="isGlobal">Gets the isGlobal flag of the module.
        /// </param>

        /// <param name="version">Gets the version of the module.
        /// </param>

        /// <param name="sizeInBytes">Gets the size in bytes of the module.
        /// </param>

        /// <param name="activityCount">Gets the activity count of the module.
        /// </param>

        /// <param name="provisioningState">Gets the provisioning state of the module.
        /// Possible values include: &#39;Created&#39;, &#39;Creating&#39;,
        /// &#39;StartingImportModuleRunbook&#39;, &#39;RunningImportModuleRunbook&#39;,
        /// &#39;ContentRetrieved&#39;, &#39;ContentDownloaded&#39;, &#39;ContentValidated&#39;,
        /// &#39;ConnectionTypeImported&#39;, &#39;ContentStored&#39;, &#39;ModuleDataStored&#39;,
        /// &#39;ActivitiesStored&#39;, &#39;ModuleImportRunbookComplete&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;,
        /// &#39;Canceled&#39;, &#39;Updating&#39;</param>

        /// <param name="error">Gets the error info of the module.
        /// </param>

        /// <param name="creationTime">Gets the creation time.
        /// </param>

        /// <param name="lastModifiedTime">Gets the last modified time.
        /// </param>

        /// <param name="description">Gets or sets the description.
        /// </param>

        /// <param name="isComposite">Gets type of module, if its composite or not.
        /// </param>
        public Module(string id = default(string), string name = default(string), string type = default(string), System.Collections.Generic.IDictionary<string, string> tags = default(System.Collections.Generic.IDictionary<string, string>), string location = default(string), string etag = default(string), ContentLink contentLink = default(ContentLink), bool? isGlobal = default(bool?), string version = default(string), long? sizeInBytes = default(long?), int? activityCount = default(int?), string provisioningState = default(string), ModuleErrorInfo error = default(ModuleErrorInfo), System.DateTimeOffset creationTime = default(System.DateTimeOffset), System.DateTimeOffset lastModifiedTime = default(System.DateTimeOffset), string description = default(string), bool? isComposite = default(bool?))

        : base(id, name, type, tags, location)
        {
            this.Etag = etag;
            this.ContentLink = contentLink;
            this.IsGlobal = isGlobal;
            this.Version = version;
            this.SizeInBytes = sizeInBytes;
            this.ActivityCount = activityCount;
            this.ProvisioningState = provisioningState;
            this.Error = error;
            this.CreationTime = creationTime;
            this.LastModifiedTime = lastModifiedTime;
            this.Description = description;
            this.IsComposite = isComposite;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets gets the etag of the resource.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "etag")]
        public string Etag {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the contentLink of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.contentLink")]
        public ContentLink ContentLink {get; set; }

        /// <summary>
        /// Gets or sets gets the isGlobal flag of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isGlobal")]
        public bool? IsGlobal {get; set; }

        /// <summary>
        /// Gets or sets gets the version of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.version")]
        public string Version {get; set; }

        /// <summary>
        /// Gets or sets gets the size in bytes of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.sizeInBytes")]
        public long? SizeInBytes {get; set; }

        /// <summary>
        /// Gets or sets gets the activity count of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.activityCount")]
        public int? ActivityCount {get; set; }

        /// <summary>
        /// Gets or sets gets the provisioning state of the module. Possible values include: &#39;Created&#39;, &#39;Creating&#39;, &#39;StartingImportModuleRunbook&#39;, &#39;RunningImportModuleRunbook&#39;, &#39;ContentRetrieved&#39;, &#39;ContentDownloaded&#39;, &#39;ContentValidated&#39;, &#39;ConnectionTypeImported&#39;, &#39;ContentStored&#39;, &#39;ModuleDataStored&#39;, &#39;ActivitiesStored&#39;, &#39;ModuleImportRunbookComplete&#39;, &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Updating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; set; }

        /// <summary>
        /// Gets or sets gets the error info of the module.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.error")]
        public ModuleErrorInfo Error {get; set; }

        /// <summary>
        /// Gets or sets gets the creation time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.creationTime")]
        public System.DateTimeOffset CreationTime {get; set; }

        /// <summary>
        /// Gets or sets gets the last modified time.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.lastModifiedTime")]
        public System.DateTimeOffset LastModifiedTime {get; set; }

        /// <summary>
        /// Gets or sets gets or sets the description.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.description")]
        public string Description {get; set; }

        /// <summary>
        /// Gets or sets gets type of module, if its composite or not.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.isComposite")]
        public bool? IsComposite {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.ContentLink != null)
            {
                this.ContentLink.Validate();
            }




        }
    }
}