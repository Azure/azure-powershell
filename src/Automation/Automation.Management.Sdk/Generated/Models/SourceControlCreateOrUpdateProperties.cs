// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.Automation.Models
{
    using System.Linq;

    /// <summary>
    /// The properties of the create source control operation.
    /// </summary>
    public partial class SourceControlCreateOrUpdateProperties
    {
        /// <summary>
        /// Initializes a new instance of the SourceControlCreateOrUpdateProperties class.
        /// </summary>
        public SourceControlCreateOrUpdateProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SourceControlCreateOrUpdateProperties class.
        /// </summary>

        /// <param name="repoUrl">The repo url of the source control.
        /// </param>

        /// <param name="branch">The repo branch of the source control. Include branch as empty string for
        /// VsoTfvc.
        /// </param>

        /// <param name="folderPath">The folder path of the source control. Path must be relative.
        /// </param>

        /// <param name="autoSync">The auto async of the source control. Default is false.
        /// </param>

        /// <param name="publishRunbook">The auto publish of the source control. Default is true.
        /// </param>

        /// <param name="sourceType">The source type. Must be one of VsoGit, VsoTfvc, GitHub, case sensitive.
        /// Possible values include: &#39;VsoGit&#39;, &#39;VsoTfvc&#39;, &#39;GitHub&#39;</param>

        /// <param name="securityToken">The authorization token for the repo of the source control.
        /// </param>

        /// <param name="description">The user description of the source control.
        /// </param>
        public SourceControlCreateOrUpdateProperties(string repoUrl = default(string), string branch = default(string), string folderPath = default(string), bool? autoSync = default(bool?), bool? publishRunbook = default(bool?), string sourceType = default(string), SourceControlSecurityTokenProperties securityToken = default(SourceControlSecurityTokenProperties), string description = default(string))

        {
            this.RepoUrl = repoUrl;
            this.Branch = branch;
            this.FolderPath = folderPath;
            this.AutoSync = autoSync;
            this.PublishRunbook = publishRunbook;
            this.SourceType = sourceType;
            this.SecurityToken = securityToken;
            this.Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the repo url of the source control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "repoUrl")]
        public string RepoUrl {get; set; }

        /// <summary>
        /// Gets or sets the repo branch of the source control. Include branch as empty
        /// string for VsoTfvc.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "branch")]
        public string Branch {get; set; }

        /// <summary>
        /// Gets or sets the folder path of the source control. Path must be relative.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "folderPath")]
        public string FolderPath {get; set; }

        /// <summary>
        /// Gets or sets the auto async of the source control. Default is false.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "autoSync")]
        public bool? AutoSync {get; set; }

        /// <summary>
        /// Gets or sets the auto publish of the source control. Default is true.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "publishRunbook")]
        public bool? PublishRunbook {get; set; }

        /// <summary>
        /// Gets or sets the source type. Must be one of VsoGit, VsoTfvc, GitHub, case
        /// sensitive. Possible values include: &#39;VsoGit&#39;, &#39;VsoTfvc&#39;, &#39;GitHub&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "sourceType")]
        public string SourceType {get; set; }

        /// <summary>
        /// Gets or sets the authorization token for the repo of the source control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityToken")]
        public SourceControlSecurityTokenProperties SecurityToken {get; set; }

        /// <summary>
        /// Gets or sets the user description of the source control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "description")]
        public string Description {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.RepoUrl != null)
            {
                if (this.RepoUrl.Length > 2000)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "RepoUrl", 2000);
                }
            }
            if (this.Branch != null)
            {
                if (this.Branch.Length > 255)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Branch", 255);
                }
            }
            if (this.FolderPath != null)
            {
                if (this.FolderPath.Length > 255)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "FolderPath", 255);
                }
            }

            if (this.SecurityToken != null)
            {
                this.SecurityToken.Validate();
            }
            if (this.Description != null)
            {
                if (this.Description.Length > 512)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "Description", 512);
                }
            }
        }
    }
}