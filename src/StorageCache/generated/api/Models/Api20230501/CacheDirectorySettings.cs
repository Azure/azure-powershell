// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Cache Directory Services settings.</summary>
    public partial class CacheDirectorySettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettings,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal
    {

        /// <summary>Backing field for <see cref="ActiveDirectory" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettings _activeDirectory;

        /// <summary>Specifies settings for joining the HPC Cache to an Active Directory domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettings ActiveDirectory { get => (this._activeDirectory = this._activeDirectory ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheActiveDirectorySettings()); set => this._activeDirectory = value; }

        /// <summary>
        /// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters
        /// from the class [-0-9a-zA-Z].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ActiveDirectoryCacheNetBiosName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).CacheNetBiosName; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).CacheNetBiosName = value ?? null; }

        /// <summary>True if the HPC Cache is joined to the Active Directory domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.DomainJoinedType? ActiveDirectoryDomainJoined { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainJoined; }

        /// <summary>The fully qualified domain name of the Active Directory domain controller.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ActiveDirectoryDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainName = value ?? null; }

        /// <summary>The Active Directory domain's NetBIOS name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ActiveDirectoryDomainNetBiosName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainNetBiosName; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainNetBiosName = value ?? null; }

        /// <summary>
        /// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPrimaryDnsIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).PrimaryDnsIPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).PrimaryDnsIPAddress = value ?? null; }

        /// <summary>
        /// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ActiveDirectorySecondaryDnsIPAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).SecondaryDnsIPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).SecondaryDnsIPAddress = value ?? null; }

        /// <summary>
        /// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not
        /// returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string CredentialsBindDn { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).CredentialsBindDn; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).CredentialsBindDn = value ?? null; }

        /// <summary>
        /// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string CredentialsBindPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).CredentialsBindPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).CredentialsBindPassword = value ?? null; }

        /// <summary>
        /// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string CredentialsPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).CredentialsPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).CredentialsPassword = value ?? null; }

        /// <summary>
        /// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string CredentialsUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).CredentialsUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).CredentialsUsername = value ?? null; }

        /// <summary>Internal Acessors for ActiveDirectory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal.ActiveDirectory { get => (this._activeDirectory = this._activeDirectory ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheActiveDirectorySettings()); set { {_activeDirectory = value;} } }

        /// <summary>Internal Acessors for ActiveDirectoryCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsCredentials Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal.ActiveDirectoryCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).Credentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).Credentials = value; }

        /// <summary>Internal Acessors for ActiveDirectoryDomainJoined</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.DomainJoinedType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal.ActiveDirectoryDomainJoined { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainJoined; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsInternal)ActiveDirectory).DomainJoined = value; }

        /// <summary>Internal Acessors for UsernameDownload</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal.UsernameDownload { get => (this._usernameDownload = this._usernameDownload ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUsernameDownloadSettings()); set { {_usernameDownload = value;} } }

        /// <summary>Internal Acessors for UsernameDownloadCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentials Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal.UsernameDownloadCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).Credentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).Credentials = value; }

        /// <summary>Internal Acessors for UsernameDownloadUsernameDownloaded</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettingsInternal.UsernameDownloadUsernameDownloaded { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UsernameDownloaded; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UsernameDownloaded = value; }

        /// <summary>Backing field for <see cref="UsernameDownload" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettings _usernameDownload;

        /// <summary>
        /// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettings UsernameDownload { get => (this._usernameDownload = this._usernameDownload ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUsernameDownloadSettings()); set => this._usernameDownload = value; }

        /// <summary>
        /// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate'
        /// is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? UsernameDownloadAutoDownloadCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).AutoDownloadCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).AutoDownloadCertificate = value ?? default(bool); }

        /// <summary>
        /// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate'
        /// is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UsernameDownloadCaCertificateUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).CaCertificateUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).CaCertificateUri = value ?? null; }

        /// <summary>Whether or not the LDAP connection should be encrypted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? UsernameDownloadEncryptLdapConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).EncryptLdapConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).EncryptLdapConnection = value ?? default(bool); }

        /// <summary>Whether or not Extended Groups is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? UsernameDownloadExtendedGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).ExtendedGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).ExtendedGroup = value ?? default(bool); }

        /// <summary>
        /// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UsernameDownloadGroupFileUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).GroupFileUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).GroupFileUri = value ?? null; }

        /// <summary>The base distinguished name for the LDAP domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UsernameDownloadLdapBaseDn { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).LdapBaseDn; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).LdapBaseDn = value ?? null; }

        /// <summary>The fully qualified domain name or IP address of the LDAP server to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UsernameDownloadLdapServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).LdapServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).LdapServer = value ?? null; }

        /// <summary>
        /// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? UsernameDownloadRequireValidCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).RequireValidCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).RequireValidCertificate = value ?? default(bool); }

        /// <summary>
        /// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UsernameDownloadUserFileUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UserFileUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UserFileUri = value ?? null; }

        /// <summary>
        /// Indicates whether or not the HPC Cache has performed the username download successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? UsernameDownloadUsernameDownloaded { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UsernameDownloaded; }

        /// <summary>
        /// This setting determines how the cache gets username and group names for clients.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? UsernameDownloadUsernameSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UsernameSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal)UsernameDownload).UsernameSource = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource)""); }

        /// <summary>Creates an new <see cref="CacheDirectorySettings" /> instance.</summary>
        public CacheDirectorySettings()
        {

        }
    }
    /// Cache Directory Services settings.
    public partial interface ICacheDirectorySettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters
        /// from the class [-0-9a-zA-Z].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].",
        SerializedName = @"cacheNetBiosName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryCacheNetBiosName { get; set; }
        /// <summary>True if the HPC Cache is joined to the Active Directory domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"True if the HPC Cache is joined to the Active Directory domain.",
        SerializedName = @"domainJoined",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.DomainJoinedType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.DomainJoinedType? ActiveDirectoryDomainJoined { get;  }
        /// <summary>The fully qualified domain name of the Active Directory domain controller.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified domain name of the Active Directory domain controller.",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryDomainName { get; set; }
        /// <summary>The Active Directory domain's NetBIOS name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Active Directory domain's NetBIOS name.",
        SerializedName = @"domainNetBiosName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryDomainNetBiosName { get; set; }
        /// <summary>
        /// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.",
        SerializedName = @"primaryDnsIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPrimaryDnsIPAddress { get; set; }
        /// <summary>
        /// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.",
        SerializedName = @"secondaryDnsIpAddress",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectorySecondaryDnsIPAddress { get; set; }
        /// <summary>
        /// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not
        /// returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.",
        SerializedName = @"bindDn",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsBindDn { get; set; }
        /// <summary>
        /// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.",
        SerializedName = @"bindPassword",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsBindPassword { get; set; }
        /// <summary>
        /// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsPassword { get; set; }
        /// <summary>
        /// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsUsername { get; set; }
        /// <summary>
        /// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate'
        /// is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.",
        SerializedName = @"autoDownloadCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UsernameDownloadAutoDownloadCertificate { get; set; }
        /// <summary>
        /// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate'
        /// is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.",
        SerializedName = @"caCertificateURI",
        PossibleTypes = new [] { typeof(string) })]
        string UsernameDownloadCaCertificateUri { get; set; }
        /// <summary>Whether or not the LDAP connection should be encrypted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not the LDAP connection should be encrypted.",
        SerializedName = @"encryptLdapConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UsernameDownloadEncryptLdapConnection { get; set; }
        /// <summary>Whether or not Extended Groups is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not Extended Groups is enabled.",
        SerializedName = @"extendedGroups",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UsernameDownloadExtendedGroup { get; set; }
        /// <summary>
        /// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.",
        SerializedName = @"groupFileURI",
        PossibleTypes = new [] { typeof(string) })]
        string UsernameDownloadGroupFileUri { get; set; }
        /// <summary>The base distinguished name for the LDAP domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The base distinguished name for the LDAP domain.",
        SerializedName = @"ldapBaseDN",
        PossibleTypes = new [] { typeof(string) })]
        string UsernameDownloadLdapBaseDn { get; set; }
        /// <summary>The fully qualified domain name or IP address of the LDAP server to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified domain name or IP address of the LDAP server to use.",
        SerializedName = @"ldapServer",
        PossibleTypes = new [] { typeof(string) })]
        string UsernameDownloadLdapServer { get; set; }
        /// <summary>
        /// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.",
        SerializedName = @"requireValidCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UsernameDownloadRequireValidCertificate { get; set; }
        /// <summary>
        /// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.",
        SerializedName = @"userFileURI",
        PossibleTypes = new [] { typeof(string) })]
        string UsernameDownloadUserFileUri { get; set; }
        /// <summary>
        /// Indicates whether or not the HPC Cache has performed the username download successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether or not the HPC Cache has performed the username download successfully.",
        SerializedName = @"usernameDownloaded",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? UsernameDownloadUsernameDownloaded { get;  }
        /// <summary>
        /// This setting determines how the cache gets username and group names for clients.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This setting determines how the cache gets username and group names for clients.",
        SerializedName = @"usernameSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? UsernameDownloadUsernameSource { get; set; }

    }
    /// Cache Directory Services settings.
    internal partial interface ICacheDirectorySettingsInternal

    {
        /// <summary>Specifies settings for joining the HPC Cache to an Active Directory domain.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettings ActiveDirectory { get; set; }
        /// <summary>
        /// The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters
        /// from the class [-0-9a-zA-Z].
        /// </summary>
        string ActiveDirectoryCacheNetBiosName { get; set; }
        /// <summary>Active Directory admin credentials used to join the HPC Cache to a domain.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheActiveDirectorySettingsCredentials ActiveDirectoryCredentials { get; set; }
        /// <summary>True if the HPC Cache is joined to the Active Directory domain.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.DomainJoinedType? ActiveDirectoryDomainJoined { get; set; }
        /// <summary>The fully qualified domain name of the Active Directory domain controller.</summary>
        string ActiveDirectoryDomainName { get; set; }
        /// <summary>The Active Directory domain's NetBIOS name.</summary>
        string ActiveDirectoryDomainNetBiosName { get; set; }
        /// <summary>
        /// Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
        /// </summary>
        string ActiveDirectoryPrimaryDnsIPAddress { get; set; }
        /// <summary>
        /// Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
        /// </summary>
        string ActiveDirectorySecondaryDnsIPAddress { get; set; }
        /// <summary>
        /// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not
        /// returned on response.
        /// </summary>
        string CredentialsBindDn { get; set; }
        /// <summary>
        /// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
        /// </summary>
        string CredentialsBindPassword { get; set; }
        /// <summary>
        /// Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
        /// </summary>
        string CredentialsPassword { get; set; }
        /// <summary>
        /// Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.
        /// </summary>
        string CredentialsUsername { get; set; }
        /// <summary>
        /// Specifies settings for Extended Groups. Extended Groups allows users to be members of more than 16 groups.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettings UsernameDownload { get; set; }
        /// <summary>
        /// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate'
        /// is true.
        /// </summary>
        bool? UsernameDownloadAutoDownloadCertificate { get; set; }
        /// <summary>
        /// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate'
        /// is set to true.
        /// </summary>
        string UsernameDownloadCaCertificateUri { get; set; }
        /// <summary>When present, these are the credentials for the secure LDAP connection.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentials UsernameDownloadCredentials { get; set; }
        /// <summary>Whether or not the LDAP connection should be encrypted.</summary>
        bool? UsernameDownloadEncryptLdapConnection { get; set; }
        /// <summary>Whether or not Extended Groups is enabled.</summary>
        bool? UsernameDownloadExtendedGroup { get; set; }
        /// <summary>
        /// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        string UsernameDownloadGroupFileUri { get; set; }
        /// <summary>The base distinguished name for the LDAP domain.</summary>
        string UsernameDownloadLdapBaseDn { get; set; }
        /// <summary>The fully qualified domain name or IP address of the LDAP server to use.</summary>
        string UsernameDownloadLdapServer { get; set; }
        /// <summary>
        /// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
        /// </summary>
        bool? UsernameDownloadRequireValidCertificate { get; set; }
        /// <summary>
        /// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        string UsernameDownloadUserFileUri { get; set; }
        /// <summary>
        /// Indicates whether or not the HPC Cache has performed the username download successfully.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? UsernameDownloadUsernameDownloaded { get; set; }
        /// <summary>
        /// This setting determines how the cache gets username and group names for clients.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? UsernameDownloadUsernameSource { get; set; }

    }
}