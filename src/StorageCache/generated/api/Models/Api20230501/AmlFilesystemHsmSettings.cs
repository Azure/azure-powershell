// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>AML file system HSM settings.</summary>
    public partial class AmlFilesystemHsmSettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHsmSettings,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHsmSettingsInternal
    {

        /// <summary>Backing field for <see cref="Container" /> property.</summary>
        private string _container;

        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider
        /// must have permission to create SAS tokens on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string Container { get => this._container; set => this._container = value; }

        /// <summary>Backing field for <see cref="ImportPrefix" /> property.</summary>
        private string _importPrefix;

        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string ImportPrefix { get => this._importPrefix; set => this._importPrefix = value; }

        /// <summary>Backing field for <see cref="LoggingContainer" /> property.</summary>
        private string _loggingContainer;

        /// <summary>
        /// Resource ID of storage container used for logging events and errors. Must be a separate container in the same storage
        /// account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the
        /// storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string LoggingContainer { get => this._loggingContainer; set => this._loggingContainer = value; }

        /// <summary>Creates an new <see cref="AmlFilesystemHsmSettings" /> instance.</summary>
        public AmlFilesystemHsmSettings()
        {

        }
    }
    /// AML file system HSM settings.
    public partial interface IAmlFilesystemHsmSettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider
        /// must have permission to create SAS tokens on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider must have permission to create SAS tokens on the storage account.",
        SerializedName = @"container",
        PossibleTypes = new [] { typeof(string) })]
        string Container { get; set; }
        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.",
        SerializedName = @"importPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string ImportPrefix { get; set; }
        /// <summary>
        /// Resource ID of storage container used for logging events and errors. Must be a separate container in the same storage
        /// account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the
        /// storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Resource ID of storage container used for logging events and errors.  Must be a separate container in the same storage account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the storage account.",
        SerializedName = @"loggingContainer",
        PossibleTypes = new [] { typeof(string) })]
        string LoggingContainer { get; set; }

    }
    /// AML file system HSM settings.
    internal partial interface IAmlFilesystemHsmSettingsInternal

    {
        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider
        /// must have permission to create SAS tokens on the storage account.
        /// </summary>
        string Container { get; set; }
        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.
        /// </summary>
        string ImportPrefix { get; set; }
        /// <summary>
        /// Resource ID of storage container used for logging events and errors. Must be a separate container in the same storage
        /// account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the
        /// storage account.
        /// </summary>
        string LoggingContainer { get; set; }

    }
}