
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for CacheDirectorySettings.
.Description
Create an in-memory object for CacheDirectorySettings.

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheDirectorySettings
.Link
https://learn.microsoft.com/powershell/module/Az.StorageCache/new-AzStorageCacheDirectorySettingObject
#>
function New-AzStorageCacheDirectorySettingObject {
    [OutputType('Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheDirectorySettings')]
    [CmdletBinding(PositionalBinding=$false)]
    Param(

        [Parameter(HelpMessage="The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server. Length must 1-15 characters from the class [-0-9a-zA-Z].")]
        [string]
        $ActiveDirectoryCacheNetBiosName,
        [Parameter(HelpMessage="The fully qualified domain name of the Active Directory domain controller.")]
        [string]
        $ActiveDirectoryDomainName,
        [Parameter(HelpMessage="The Active Directory domain's NetBIOS name.")]
        [string]
        $ActiveDirectoryDomainNetBiosName,
        [Parameter(HelpMessage="Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.")]
        [string]
        $ActiveDirectoryPrimaryDnsIPAddress,
        [Parameter(HelpMessage="Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.")]
        [string]
        $ActiveDirectorySecondaryDnsIPAddress,
        [Parameter(HelpMessage="The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.")]
        [string]
        $CredentialsBindDn,
        [Parameter(HelpMessage="The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.")]
        [string]
        $CredentialsBindPassword,
        [Parameter(HelpMessage="Plain text password of the Active Directory domain administrator. This value is stored encrypted and not returned on response.")]
        [string]
        $CredentialsPassword,
        [Parameter(HelpMessage="Username of the Active Directory domain administrator. This value is stored encrypted and not returned on response.")]
        [string]
        $CredentialsUsername,
        [Parameter(HelpMessage="Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.")]
        [bool]
        $UsernameDownloadAutoDownloadCertificate,
        [Parameter(HelpMessage="The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.")]
        [string]
        $UsernameDownloadCaCertificateUri,
        [Parameter(HelpMessage="Whether or not the LDAP connection should be encrypted.")]
        [bool]
        $UsernameDownloadEncryptLdapConnection,
        [Parameter(HelpMessage="Whether or not Extended Groups is enabled.")]
        [bool]
        $UsernameDownloadExtendedGroup,
        [Parameter(HelpMessage="The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.")]
        [string]
        $UsernameDownloadGroupFileUri,
        [Parameter(HelpMessage="The base distinguished name for the LDAP domain.")]
        [string]
        $UsernameDownloadLdapBaseDn,
        [Parameter(HelpMessage="The fully qualified domain name or IP address of the LDAP server to use.")]
        [string]
        $UsernameDownloadLdapServer,
        [Parameter(HelpMessage="Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.")]
        [bool]
        $UsernameDownloadRequireValidCertificate,
        [Parameter(HelpMessage="The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.")]
        [string]
        $UsernameDownloadUserFileUri,
        [Parameter(HelpMessage="This setting determines how the cache gets username and group names for clients.")]
        [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource])]
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource]
        $UsernameDownloadUsernameSource
    )

    process {
        $Object = [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheDirectorySettings]::New()

        if ($PSBoundParameters.ContainsKey('ActiveDirectoryCacheNetBiosName')) {
            $Object.ActiveDirectoryCacheNetBiosName = $ActiveDirectoryCacheNetBiosName
        }
        if ($PSBoundParameters.ContainsKey('ActiveDirectoryDomainName')) {
            $Object.ActiveDirectoryDomainName = $ActiveDirectoryDomainName
        }
        if ($PSBoundParameters.ContainsKey('ActiveDirectoryDomainNetBiosName')) {
            $Object.ActiveDirectoryDomainNetBiosName = $ActiveDirectoryDomainNetBiosName
        }
        if ($PSBoundParameters.ContainsKey('ActiveDirectoryPrimaryDnsIPAddress')) {
            $Object.ActiveDirectoryPrimaryDnsIPAddress = $ActiveDirectoryPrimaryDnsIPAddress
        }
        if ($PSBoundParameters.ContainsKey('ActiveDirectorySecondaryDnsIPAddress')) {
            $Object.ActiveDirectorySecondaryDnsIPAddress = $ActiveDirectorySecondaryDnsIPAddress
        }
        if ($PSBoundParameters.ContainsKey('CredentialsBindDn')) {
            $Object.CredentialsBindDn = $CredentialsBindDn
        }
        if ($PSBoundParameters.ContainsKey('CredentialsBindPassword')) {
            $Object.CredentialsBindPassword = $CredentialsBindPassword
        }
        if ($PSBoundParameters.ContainsKey('CredentialsPassword')) {
            $Object.CredentialsPassword = $CredentialsPassword
        }
        if ($PSBoundParameters.ContainsKey('CredentialsUsername')) {
            $Object.CredentialsUsername = $CredentialsUsername
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadAutoDownloadCertificate')) {
            $Object.UsernameDownloadAutoDownloadCertificate = $UsernameDownloadAutoDownloadCertificate
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadCaCertificateUri')) {
            $Object.UsernameDownloadCaCertificateUri = $UsernameDownloadCaCertificateUri
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadEncryptLdapConnection')) {
            $Object.UsernameDownloadEncryptLdapConnection = $UsernameDownloadEncryptLdapConnection
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadExtendedGroup')) {
            $Object.UsernameDownloadExtendedGroup = $UsernameDownloadExtendedGroup
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadGroupFileUri')) {
            $Object.UsernameDownloadGroupFileUri = $UsernameDownloadGroupFileUri
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadLdapBaseDn')) {
            $Object.UsernameDownloadLdapBaseDn = $UsernameDownloadLdapBaseDn
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadLdapServer')) {
            $Object.UsernameDownloadLdapServer = $UsernameDownloadLdapServer
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadRequireValidCertificate')) {
            $Object.UsernameDownloadRequireValidCertificate = $UsernameDownloadRequireValidCertificate
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadUserFileUri')) {
            $Object.UsernameDownloadUserFileUri = $UsernameDownloadUserFileUri
        }
        if ($PSBoundParameters.ContainsKey('UsernameDownloadUsernameSource')) {
            $Object.UsernameDownloadUsernameSource = $UsernameDownloadUsernameSource
        }
        return $Object
    }
}

