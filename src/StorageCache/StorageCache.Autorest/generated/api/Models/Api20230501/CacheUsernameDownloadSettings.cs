// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Settings for Extended Groups username and group download.</summary>
    public partial class CacheUsernameDownloadSettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettings,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal
    {

        /// <summary>Backing field for <see cref="AutoDownloadCertificate" /> property.</summary>
        private bool? _autoDownloadCertificate;

        /// <summary>
        /// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate'
        /// is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public bool? AutoDownloadCertificate { get => this._autoDownloadCertificate; set => this._autoDownloadCertificate = value; }

        /// <summary>Backing field for <see cref="CaCertificateUri" /> property.</summary>
        private string _caCertificateUri;

        /// <summary>
        /// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate'
        /// is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string CaCertificateUri { get => this._caCertificateUri; set => this._caCertificateUri = value; }

        /// <summary>Backing field for <see cref="Credentials" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentials _credentials;

        /// <summary>When present, these are the credentials for the secure LDAP connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentials Credentials { get => (this._credentials = this._credentials ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUsernameDownloadSettingsCredentials()); set => this._credentials = value; }

        /// <summary>
        /// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not
        /// returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string CredentialsBindDn { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentialsInternal)Credentials).BindDn; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentialsInternal)Credentials).BindDn = value ?? null; }

        /// <summary>
        /// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string CredentialsBindPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentialsInternal)Credentials).BindPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentialsInternal)Credentials).BindPassword = value ?? null; }

        /// <summary>Backing field for <see cref="EncryptLdapConnection" /> property.</summary>
        private bool? _encryptLdapConnection;

        /// <summary>Whether or not the LDAP connection should be encrypted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public bool? EncryptLdapConnection { get => this._encryptLdapConnection; set => this._encryptLdapConnection = value; }

        /// <summary>Backing field for <see cref="ExtendedGroup" /> property.</summary>
        private bool? _extendedGroup;

        /// <summary>Whether or not Extended Groups is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public bool? ExtendedGroup { get => this._extendedGroup; set => this._extendedGroup = value; }

        /// <summary>Backing field for <see cref="GroupFileUri" /> property.</summary>
        private string _groupFileUri;

        /// <summary>
        /// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string GroupFileUri { get => this._groupFileUri; set => this._groupFileUri = value; }

        /// <summary>Backing field for <see cref="LdapBaseDn" /> property.</summary>
        private string _ldapBaseDn;

        /// <summary>The base distinguished name for the LDAP domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string LdapBaseDn { get => this._ldapBaseDn; set => this._ldapBaseDn = value; }

        /// <summary>Backing field for <see cref="LdapServer" /> property.</summary>
        private string _ldapServer;

        /// <summary>The fully qualified domain name or IP address of the LDAP server to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string LdapServer { get => this._ldapServer; set => this._ldapServer = value; }

        /// <summary>Internal Acessors for Credentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentials Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal.Credentials { get => (this._credentials = this._credentials ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUsernameDownloadSettingsCredentials()); set { {_credentials = value;} } }

        /// <summary>Internal Acessors for UsernameDownloaded</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsInternal.UsernameDownloaded { get => this._usernameDownloaded; set { {_usernameDownloaded = value;} } }

        /// <summary>Backing field for <see cref="RequireValidCertificate" /> property.</summary>
        private bool? _requireValidCertificate;

        /// <summary>
        /// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public bool? RequireValidCertificate { get => this._requireValidCertificate; set => this._requireValidCertificate = value; }

        /// <summary>Backing field for <see cref="UserFileUri" /> property.</summary>
        private string _userFileUri;

        /// <summary>
        /// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string UserFileUri { get => this._userFileUri; set => this._userFileUri = value; }

        /// <summary>Backing field for <see cref="UsernameDownloaded" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? _usernameDownloaded;

        /// <summary>
        /// Indicates whether or not the HPC Cache has performed the username download successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? UsernameDownloaded { get => this._usernameDownloaded; }

        /// <summary>Backing field for <see cref="UsernameSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? _usernameSource;

        /// <summary>
        /// This setting determines how the cache gets username and group names for clients.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? UsernameSource { get => this._usernameSource; set => this._usernameSource = value; }

        /// <summary>Creates an new <see cref="CacheUsernameDownloadSettings" /> instance.</summary>
        public CacheUsernameDownloadSettings()
        {

        }
    }
    /// Settings for Extended Groups username and group download.
    public partial interface ICacheUsernameDownloadSettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate'
        /// is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.",
        SerializedName = @"autoDownloadCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoDownloadCertificate { get; set; }
        /// <summary>
        /// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate'
        /// is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate' is set to true.",
        SerializedName = @"caCertificateURI",
        PossibleTypes = new [] { typeof(string) })]
        string CaCertificateUri { get; set; }
        /// <summary>
        /// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not
        /// returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.",
        SerializedName = @"bindDn",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsBindDn { get; set; }
        /// <summary>
        /// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.",
        SerializedName = @"bindPassword",
        PossibleTypes = new [] { typeof(string) })]
        string CredentialsBindPassword { get; set; }
        /// <summary>Whether or not the LDAP connection should be encrypted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not the LDAP connection should be encrypted.",
        SerializedName = @"encryptLdapConnection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptLdapConnection { get; set; }
        /// <summary>Whether or not Extended Groups is enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether or not Extended Groups is enabled.",
        SerializedName = @"extendedGroups",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExtendedGroup { get; set; }
        /// <summary>
        /// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource' is set to 'File'.",
        SerializedName = @"groupFileURI",
        PossibleTypes = new [] { typeof(string) })]
        string GroupFileUri { get; set; }
        /// <summary>The base distinguished name for the LDAP domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The base distinguished name for the LDAP domain.",
        SerializedName = @"ldapBaseDN",
        PossibleTypes = new [] { typeof(string) })]
        string LdapBaseDn { get; set; }
        /// <summary>The fully qualified domain name or IP address of the LDAP server to use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified domain name or IP address of the LDAP server to use.",
        SerializedName = @"ldapServer",
        PossibleTypes = new [] { typeof(string) })]
        string LdapServer { get; set; }
        /// <summary>
        /// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.",
        SerializedName = @"requireValidCertificate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RequireValidCertificate { get; set; }
        /// <summary>
        /// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource' is set to 'File'.",
        SerializedName = @"userFileURI",
        PossibleTypes = new [] { typeof(string) })]
        string UserFileUri { get; set; }
        /// <summary>
        /// Indicates whether or not the HPC Cache has performed the username download successfully.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Indicates whether or not the HPC Cache has performed the username download successfully.",
        SerializedName = @"usernameDownloaded",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? UsernameDownloaded { get;  }
        /// <summary>
        /// This setting determines how the cache gets username and group names for clients.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This setting determines how the cache gets username and group names for clients.",
        SerializedName = @"usernameSource",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? UsernameSource { get; set; }

    }
    /// Settings for Extended Groups username and group download.
    internal partial interface ICacheUsernameDownloadSettingsInternal

    {
        /// <summary>
        /// Determines if the certificate should be automatically downloaded. This applies to 'caCertificateURI' only if 'requireValidCertificate'
        /// is true.
        /// </summary>
        bool? AutoDownloadCertificate { get; set; }
        /// <summary>
        /// The URI of the CA certificate to validate the LDAP secure connection. This field must be populated when 'requireValidCertificate'
        /// is set to true.
        /// </summary>
        string CaCertificateUri { get; set; }
        /// <summary>When present, these are the credentials for the secure LDAP connection.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUsernameDownloadSettingsCredentials Credentials { get; set; }
        /// <summary>
        /// The Bind Distinguished Name identity to be used in the secure LDAP connection. This value is stored encrypted and not
        /// returned on response.
        /// </summary>
        string CredentialsBindDn { get; set; }
        /// <summary>
        /// The Bind password to be used in the secure LDAP connection. This value is stored encrypted and not returned on response.
        /// </summary>
        string CredentialsBindPassword { get; set; }
        /// <summary>Whether or not the LDAP connection should be encrypted.</summary>
        bool? EncryptLdapConnection { get; set; }
        /// <summary>Whether or not Extended Groups is enabled.</summary>
        bool? ExtendedGroup { get; set; }
        /// <summary>
        /// The URI of the file containing group information (in /etc/group file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        string GroupFileUri { get; set; }
        /// <summary>The base distinguished name for the LDAP domain.</summary>
        string LdapBaseDn { get; set; }
        /// <summary>The fully qualified domain name or IP address of the LDAP server to use.</summary>
        string LdapServer { get; set; }
        /// <summary>
        /// Determines if the certificates must be validated by a certificate authority. When true, caCertificateURI must be provided.
        /// </summary>
        bool? RequireValidCertificate { get; set; }
        /// <summary>
        /// The URI of the file containing user information (in /etc/passwd file format). This field must be populated when 'usernameSource'
        /// is set to 'File'.
        /// </summary>
        string UserFileUri { get; set; }
        /// <summary>
        /// Indicates whether or not the HPC Cache has performed the username download successfully.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameDownloadedType? UsernameDownloaded { get; set; }
        /// <summary>
        /// This setting determines how the cache gets username and group names for clients.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource? UsernameSource { get; set; }

    }
}