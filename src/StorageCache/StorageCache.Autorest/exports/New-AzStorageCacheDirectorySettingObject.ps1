
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create an in-memory object for CacheDirectorySettings.
.Description
Create an in-memory object for CacheDirectorySettings.
.Example
New-AzStorageCacheDirectorySettingObject -ActiveDirectoryCacheNetBiosName "contosoSmb" -ActiveDirectoryDomainName "contosoAd.contoso.local" -ActiveDirectoryDomainNetBiosName "contosoAd" -ActiveDirectoryPrimaryDnsIPAddress "192.0.2.10" -ActiveDirectorySecondaryDnsIPAddress "192.0.2.11" -CredentialsBindDn "cn=ldapadmin,dc=contosoad,dc=contoso,dc=local" -CredentialsBindPassword "<bindPassword>" -CredentialsPassword "<password>" -CredentialsUsername "consotoAdmin" -UsernameDownloadCaCertificateUri "http://contoso.net/cacert.pem" -UsernameDownloadAutoDownloadCertificate:$False -UsernameDownloadEncryptLdapConnection:$False -UsernameDownloadExtendedGroup:$False -UsernameDownloadGroupFileUri "http://contoso.net/group.file" -UsernameDownloadLdapBaseDn "dc=contosoad,dc=contoso,dc=local" -UsernameDownloadLdapServer "192.0.2.12" -UsernameDownloadRequireValidCertificate:$False -UsernameDownloadUsernameSource 'LDAP' -UsernameDownloadUserFileUri "http://contoso.net/passwd.file"

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheDirectorySettings
.Link
https://learn.microsoft.com/powershell/module/Az.StorageCache/new-AzStorageCacheDirectorySettingObject
#>
function New-AzStorageCacheDirectorySettingObject {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheDirectorySettings])]
[CmdletBinding(PositionalBinding=$false)]
param(
    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The NetBIOS name to assign to the HPC Cache when it joins the Active Directory domain as a server.
    # Length must 1-15 characters from the class [-0-9a-zA-Z].
    ${ActiveDirectoryCacheNetBiosName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The fully qualified domain name of the Active Directory domain controller.
    ${ActiveDirectoryDomainName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The Active Directory domain's NetBIOS name.
    ${ActiveDirectoryDomainNetBiosName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # Primary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
    ${ActiveDirectoryPrimaryDnsIPAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # Secondary DNS IP address used to resolve the Active Directory domain controller's fully qualified domain name.
    ${ActiveDirectorySecondaryDnsIPAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The Bind Distinguished Name identity to be used in the secure LDAP connection.
    # This value is stored encrypted and not returned on response.
    ${CredentialsBindDn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The Bind password to be used in the secure LDAP connection.
    # This value is stored encrypted and not returned on response.
    ${CredentialsBindPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # Plain text password of the Active Directory domain administrator.
    # This value is stored encrypted and not returned on response.
    ${CredentialsPassword},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # Username of the Active Directory domain administrator.
    # This value is stored encrypted and not returned on response.
    ${CredentialsUsername},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.Boolean]
    # Determines if the certificate should be automatically downloaded.
    # This applies to 'caCertificateURI' only if 'requireValidCertificate' is true.
    ${UsernameDownloadAutoDownloadCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The URI of the CA certificate to validate the LDAP secure connection.
    # This field must be populated when 'requireValidCertificate' is set to true.
    ${UsernameDownloadCaCertificateUri},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.Boolean]
    # Whether or not the LDAP connection should be encrypted.
    ${UsernameDownloadEncryptLdapConnection},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.Boolean]
    # Whether or not Extended Groups is enabled.
    ${UsernameDownloadExtendedGroup},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The URI of the file containing group information (in /etc/group file format).
    # This field must be populated when 'usernameSource' is set to 'File'.
    ${UsernameDownloadGroupFileUri},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The base distinguished name for the LDAP domain.
    ${UsernameDownloadLdapBaseDn},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The fully qualified domain name or IP address of the LDAP server to use.
    ${UsernameDownloadLdapServer},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.Boolean]
    # Determines if the certificates must be validated by a certificate authority.
    # When true, caCertificateURI must be provided.
    ${UsernameDownloadRequireValidCertificate},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [System.String]
    # The URI of the file containing user information (in /etc/passwd file format).
    # This field must be populated when 'usernameSource' is set to 'File'.
    ${UsernameDownloadUserFileUri},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource])]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.UsernameSource]
    # This setting determines how the cache gets username and group names for clients.
    ${UsernameDownloadUsernameSource}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            __AllParameterSets = 'Az.StorageCache.custom\New-AzStorageCacheDirectorySettingObject';
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
