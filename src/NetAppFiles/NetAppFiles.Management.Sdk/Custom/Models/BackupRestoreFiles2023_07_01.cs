// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Restore payload for single file backup restore
    /// </summary>
    public partial class BackupRestoreFiles2023_07_01
    {
        /// <summary>
        /// Initializes a new instance of the BackupRestoreFiles class.
        /// </summary>
        public BackupRestoreFiles2023_07_01()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BackupRestoreFiles class.
        /// </summary>

        /// <param name="fileList">List of files to be restored
        /// </param>

        /// <param name="restoreFilePath">Destination folder where the files will be restored. The path name should
        /// start with a forward slash. If it is omitted from request then restore is
        /// done at the root folder of the destination volume by default
        /// </param>

        /// <param name="destinationVolumeId">Resource Id of the destination volume on which the files need to be
        /// restored
        /// </param>
        public BackupRestoreFiles2023_07_01(System.Collections.Generic.IList<string> fileList, string destinationVolumeId, string restoreFilePath = default(string))

        {
            this.FileList = fileList;
            this.RestoreFilePath = restoreFilePath;
            this.DestinationVolumeId = destinationVolumeId;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets list of files to be restored
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileList")]
        public System.Collections.Generic.IList<string> FileList {get; set; }

        /// <summary>
        /// Gets or sets destination folder where the files will be restored. The path
        /// name should start with a forward slash. If it is omitted from request then
        /// restore is done at the root folder of the destination volume by default
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "restoreFilePath")]
        public string RestoreFilePath {get; set; }

        /// <summary>
        /// Gets or sets resource Id of the destination volume on which the files need
        /// to be restored
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "destinationVolumeId")]
        public string DestinationVolumeId {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FileList == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FileList");
            }
            if (this.DestinationVolumeId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "DestinationVolumeId");
            }
            if (this.FileList != null)
            {
                if (this.FileList.Count > 8)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxItems, "FileList", 8);
                }
                if (this.FileList.Count < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinItems, "FileList", 1);
                }
            }
            if (this.RestoreFilePath != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.RestoreFilePath, "^\\/.*$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "RestoreFilePath", "^\\/.*$");
                }
            }

        }
    }
}