// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for BackupsUnderAccountOperations
    /// </summary>
    public static partial class BackupsUnderAccountOperationsExtensions
    {
        /// <summary>
        /// Migrate the backups under a NetApp account to backup vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        public static BackupsUnderAccountMigrateBackupsHeaders MigrateBackups(this IBackupsUnderAccountOperations operations, string resourceGroupName, string accountName, BackupsMigrationRequest body)
        {
                return ((IBackupsUnderAccountOperations)operations).MigrateBackupsAsync(resourceGroupName, accountName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate the backups under a NetApp account to backup vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupsUnderAccountMigrateBackupsHeaders> MigrateBackupsAsync(this IBackupsUnderAccountOperations operations, string resourceGroupName, string accountName, BackupsMigrationRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.MigrateBackupsWithHttpMessagesAsync(resourceGroupName, accountName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Migrate the backups under a NetApp account to backup vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        public static BackupsUnderAccountMigrateBackupsHeaders BeginMigrateBackups(this IBackupsUnderAccountOperations operations, string resourceGroupName, string accountName, BackupsMigrationRequest body)
        {
                return ((IBackupsUnderAccountOperations)operations).BeginMigrateBackupsAsync(resourceGroupName, accountName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Migrate the backups under a NetApp account to backup vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupsUnderAccountMigrateBackupsHeaders> BeginMigrateBackupsAsync(this IBackupsUnderAccountOperations operations, string resourceGroupName, string accountName, BackupsMigrationRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginMigrateBackupsWithHttpMessagesAsync(resourceGroupName, accountName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
    }
}
