// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for VolumeGroupsOperations
    /// </summary>
    public static partial class VolumeGroupsOperationsExtensions
    {
        /// <summary>
        /// List all volume groups for given account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        public static System.Collections.Generic.IEnumerable<VolumeGroup> ListByNetAppAccount(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName)
        {
                return ((IVolumeGroupsOperations)operations).ListByNetAppAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all volume groups for given account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<VolumeGroup>> ListByNetAppAccountAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNetAppAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get details of the specified volume group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        public static VolumeGroupDetails Get(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName)
        {
                return ((IVolumeGroupsOperations)operations).GetAsync(resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get details of the specified volume group
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VolumeGroupDetails> GetAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create a volume group along with specified volumes
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        public static VolumeGroupDetails Create(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, VolumeGroupDetails body)
        {
                return ((IVolumeGroupsOperations)operations).CreateAsync(resourceGroupName, accountName, volumeGroupName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a volume group along with specified volumes
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VolumeGroupDetails> CreateAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, VolumeGroupDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the specified volume group only if there are no volumes under volume
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        public static void Delete(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName)
        {
                ((IVolumeGroupsOperations)operations).DeleteAsync(resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the specified volume group only if there are no volumes under volume
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create a volume group along with specified volumes
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        public static VolumeGroupDetails BeginCreate(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, VolumeGroupDetails body)
        {
                return ((IVolumeGroupsOperations)operations).BeginCreateAsync(resourceGroupName, accountName, volumeGroupName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a volume group along with specified volumes
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<VolumeGroupDetails> BeginCreateAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, VolumeGroupDetails body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the specified volume group only if there are no volumes under volume
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        public static void BeginDelete(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName)
        {
                ((IVolumeGroupsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, volumeGroupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the specified volume group only if there are no volumes under volume
        /// group.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='volumeGroupName'>
        /// The name of the volumeGroup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IVolumeGroupsOperations operations, string resourceGroupName, string accountName, string volumeGroupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, volumeGroupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
