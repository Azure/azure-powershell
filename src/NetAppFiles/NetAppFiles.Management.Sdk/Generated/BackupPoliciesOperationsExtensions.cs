// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for BackupPoliciesOperations
    /// </summary>
    public static partial class BackupPoliciesOperationsExtensions
    {
        /// <summary>
        /// List backup policies for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        public static System.Collections.Generic.IEnumerable<BackupPolicy> List(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName)
        {
                return ((IBackupPoliciesOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List backup policies for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<BackupPolicy>> ListAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get a particular backup Policy
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static BackupPolicy Get(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName)
        {
                return ((IBackupPoliciesOperations)operations).GetAsync(resourceGroupName, accountName, backupPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get a particular backup Policy
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupPolicy> GetAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static BackupPolicy Create(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body)
        {
                return ((IBackupPoliciesOperations)operations).CreateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupPolicy> CreateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static BackupPolicy Update(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicyPatch body)
        {
                return ((IBackupPoliciesOperations)operations).UpdateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupPolicy> UpdateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicyPatch body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete backup policy
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static void Delete(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName)
        {
                ((IBackupPoliciesOperations)operations).DeleteAsync(resourceGroupName, accountName, backupPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete backup policy
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Create a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static BackupPolicy BeginCreate(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body)
        {
                return ((IBackupPoliciesOperations)operations).BeginCreateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupPolicy> BeginCreateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicy body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static BackupPolicy BeginUpdate(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicyPatch body)
        {
                return ((IBackupPoliciesOperations)operations).BeginUpdateAsync(resourceGroupName, accountName, backupPolicyName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch a backup policy for Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupPolicy> BeginUpdateAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, BackupPolicyPatch body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete backup policy
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        public static void BeginDelete(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName)
        {
                ((IBackupPoliciesOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, backupPolicyName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete backup policy
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupPolicyName'>
        /// Backup policy Name which uniquely identify backup policy.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IBackupPoliciesOperations operations, string resourceGroupName, string accountName, string backupPolicyName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupPolicyName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
