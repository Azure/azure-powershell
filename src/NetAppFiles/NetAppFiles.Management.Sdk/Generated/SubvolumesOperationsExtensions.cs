// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for SubvolumesOperations
    /// </summary>
    public static partial class SubvolumesOperationsExtensions
    {
        /// <summary>
        /// Returns a list of the subvolumes in the volume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubvolumeInfo> ListByVolume(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName)
        {
                return ((ISubvolumesOperations)operations).ListByVolumeAsync(resourceGroupName, accountName, poolName, volumeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of the subvolumes in the volume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubvolumeInfo>> ListByVolumeAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByVolumeWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns the path associated with the subvolumeName provided
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeInfo Get(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName)
        {
                return ((ISubvolumesOperations)operations).GetAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns the path associated with the subvolumeName provided
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeInfo> GetAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a subvolume in the path or clones the subvolume mentioned in the parentPath
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeInfo Create(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumeInfo body)
        {
                return ((ISubvolumesOperations)operations).CreateAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a subvolume in the path or clones the subvolume mentioned in the parentPath
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeInfo> CreateAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumeInfo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch a subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeInfo Update(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumePatchRequest body)
        {
                return ((ISubvolumesOperations)operations).UpdateAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch a subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeInfo> UpdateAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumePatchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static void Delete(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName)
        {
                ((ISubvolumesOperations)operations).DeleteAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get details of the specified subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeModel GetMetadata(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName)
        {
                return ((ISubvolumesOperations)operations).GetMetadataAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get details of the specified subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeModel> GetMetadataAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetMetadataWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Creates a subvolume in the path or clones the subvolume mentioned in the parentPath
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeInfo BeginCreate(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumeInfo body)
        {
                return ((ISubvolumesOperations)operations).BeginCreateAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Creates a subvolume in the path or clones the subvolume mentioned in the parentPath
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeInfo> BeginCreateAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumeInfo body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch a subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeInfo BeginUpdate(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumePatchRequest body)
        {
                return ((ISubvolumesOperations)operations).BeginUpdateAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch a subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeInfo> BeginUpdateAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, SubvolumePatchRequest body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static void BeginDelete(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName)
        {
                ((ISubvolumesOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Get details of the specified subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        public static SubvolumeModel BeginGetMetadata(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName)
        {
                return ((ISubvolumesOperations)operations).BeginGetMetadataAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get details of the specified subvolume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='poolName'>
        /// The name of the capacity pool
        /// </param>
        /// <param name='volumeName'>
        /// The name of the volume
        /// </param>
        /// <param name='subvolumeName'>
        /// The name of the subvolume.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<SubvolumeModel> BeginGetMetadataAsync(this ISubvolumesOperations operations, string resourceGroupName, string accountName, string poolName, string volumeName, string subvolumeName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginGetMetadataWithHttpMessagesAsync(resourceGroupName, accountName, poolName, volumeName, subvolumeName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Returns a list of the subvolumes in the volume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<SubvolumeInfo> ListByVolumeNext(this ISubvolumesOperations operations, string nextPageLink)
        {
                return ((ISubvolumesOperations)operations).ListByVolumeNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Returns a list of the subvolumes in the volume
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<SubvolumeInfo>> ListByVolumeNextAsync(this ISubvolumesOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByVolumeNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
