// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Active Directory
    /// </summary>
    public partial class ActiveDirectory
    {
        /// <summary>
        /// Initializes a new instance of the ActiveDirectory class.
        /// </summary>
        public ActiveDirectory()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ActiveDirectory class.
        /// </summary>

        /// <param name="activeDirectoryId">Id of the Active Directory
        /// </param>

        /// <param name="username">A domain user account with permission to create machine accounts
        /// </param>

        /// <param name="password">Plain text password of Active Directory domain administrator, value is
        /// masked in the response
        /// </param>

        /// <param name="domain">Name of the Active Directory domain
        /// </param>

        /// <param name="dns">Comma separated list of DNS server IP addresses (IPv4 only) for the Active
        /// Directory domain
        /// </param>

        /// <param name="status">Status of the Active Directory
        /// Possible values include: 'Created', 'InUse', 'Deleted', 'Error', 'Updating'</param>

        /// <param name="statusDetails">Any details in regards to the Status of the Active Directory
        /// </param>

        /// <param name="smbServerName">NetBIOS name of the SMB server. This name will be registered as a computer
        /// account in the AD and used to mount volumes
        /// </param>

        /// <param name="organizationalUnit">The Organizational Unit (OU) within the Windows Active Directory
        /// </param>

        /// <param name="site">The Active Directory site the service will limit Domain Controller
        /// discovery to
        /// </param>

        /// <param name="backupOperators">Users to be added to the Built-in Backup Operator active directory group. A
        /// list of unique usernames without domain specifier
        /// </param>

        /// <param name="administrators">Users to be added to the Built-in Administrators active directory group. A
        /// list of unique usernames without domain specifier
        /// </param>

        /// <param name="kdcIP">kdc server IP addresses for the active directory machine. This optional
        /// parameter is used only while creating kerberos volume.
        /// </param>

        /// <param name="adName">Name of the active directory machine. This optional parameter is used only
        /// while creating kerberos volume
        /// </param>

        /// <param name="serverRootCaCertificate">When LDAP over SSL/TLS is enabled, the LDAP client is required to have
        /// base64 encoded Active Directory Certificate Service&#39;s self-signed root CA
        /// certificate, this optional parameter is used only for dual protocol with
        /// LDAP user-mapping volumes.
        /// </param>

        /// <param name="aesEncryption">If enabled, AES encryption will be enabled for SMB communication.
        /// </param>

        /// <param name="ldapSigning">Specifies whether or not the LDAP traffic needs to be signed.
        /// </param>

        /// <param name="securityOperators">Domain Users in the Active directory to be given SeSecurityPrivilege
        /// privilege (Needed for SMB Continuously available shares for SQL). A list of
        /// unique usernames without domain specifier
        /// </param>

        /// <param name="ldapOverTls">Specifies whether or not the LDAP traffic needs to be secured via TLS.
        /// </param>

        /// <param name="allowLocalNfsUsersWithLdap">If enabled, NFS client local users can also (in addition to LDAP users)
        /// access the NFS volumes.
        /// </param>

        /// <param name="encryptDcConnections">If enabled, Traffic between the SMB server to Domain Controller (DC) will
        /// be encrypted.
        /// </param>

        /// <param name="ldapSearchScope">LDAP Search scope options
        /// </param>

        /// <param name="preferredServersForLdapClient">Comma separated list of IPv4 addresses of preferred servers for LDAP
        /// client. At most two comma separated IPv4 addresses can be passed.
        /// </param>
        public ActiveDirectory(string activeDirectoryId = default(string), string username = default(string), string password = default(string), string domain = default(string), string dns = default(string), string status = default(string), string statusDetails = default(string), string smbServerName = default(string), string organizationalUnit = default(string), string site = default(string), System.Collections.Generic.IList<string> backupOperators = default(System.Collections.Generic.IList<string>), System.Collections.Generic.IList<string> administrators = default(System.Collections.Generic.IList<string>), string kdcIP = default(string), string adName = default(string), string serverRootCaCertificate = default(string), bool? aesEncryption = default(bool?), bool? ldapSigning = default(bool?), System.Collections.Generic.IList<string> securityOperators = default(System.Collections.Generic.IList<string>), bool? ldapOverTls = default(bool?), bool? allowLocalNfsUsersWithLdap = default(bool?), bool? encryptDcConnections = default(bool?), LdapSearchScopeOpt ldapSearchScope = default(LdapSearchScopeOpt), string preferredServersForLdapClient = default(string))

        {
            this.ActiveDirectoryId = activeDirectoryId;
            this.Username = username;
            this.Password = password;
            this.Domain = domain;
            this.Dns = dns;
            this.Status = status;
            this.StatusDetails = statusDetails;
            this.SmbServerName = smbServerName;
            this.OrganizationalUnit = organizationalUnit;
            this.Site = site;
            this.BackupOperators = backupOperators;
            this.Administrators = administrators;
            this.KdcIP = kdcIP;
            this.AdName = adName;
            this.ServerRootCaCertificate = serverRootCaCertificate;
            this.AesEncryption = aesEncryption;
            this.LdapSigning = ldapSigning;
            this.SecurityOperators = securityOperators;
            this.LdapOverTls = ldapOverTls;
            this.AllowLocalNfsUsersWithLdap = allowLocalNfsUsersWithLdap;
            this.EncryptDcConnections = encryptDcConnections;
            this.LdapSearchScope = ldapSearchScope;
            this.PreferredServersForLdapClient = preferredServersForLdapClient;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets id of the Active Directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "activeDirectoryId")]
        public string ActiveDirectoryId {get; set; }

        /// <summary>
        /// Gets or sets a domain user account with permission to create machine
        /// accounts
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "username")]
        public string Username {get; set; }

        /// <summary>
        /// Gets or sets plain text password of Active Directory domain administrator,
        /// value is masked in the response
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "password")]
        public string Password {get; set; }

        /// <summary>
        /// Gets or sets name of the Active Directory domain
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "domain")]
        public string Domain {get; set; }

        /// <summary>
        /// Gets or sets comma separated list of DNS server IP addresses (IPv4 only)
        /// for the Active Directory domain
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dns")]
        public string Dns {get; set; }

        /// <summary>
        /// Gets status of the Active Directory Possible values include: &#39;Created&#39;, &#39;InUse&#39;, &#39;Deleted&#39;, &#39;Error&#39;, &#39;Updating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "status")]
        public string Status {get; private set; }

        /// <summary>
        /// Gets any details in regards to the Status of the Active Directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "statusDetails")]
        public string StatusDetails {get; private set; }

        /// <summary>
        /// Gets or sets netBIOS name of the SMB server. This name will be registered
        /// as a computer account in the AD and used to mount volumes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "smbServerName")]
        public string SmbServerName {get; set; }

        /// <summary>
        /// Gets or sets the Organizational Unit (OU) within the Windows Active
        /// Directory
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "organizationalUnit")]
        public string OrganizationalUnit {get; set; }

        /// <summary>
        /// Gets or sets the Active Directory site the service will limit Domain
        /// Controller discovery to
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "site")]
        public string Site {get; set; }

        /// <summary>
        /// Gets or sets users to be added to the Built-in Backup Operator active
        /// directory group. A list of unique usernames without domain specifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "backupOperators")]
        public System.Collections.Generic.IList<string> BackupOperators {get; set; }

        /// <summary>
        /// Gets or sets users to be added to the Built-in Administrators active
        /// directory group. A list of unique usernames without domain specifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "administrators")]
        public System.Collections.Generic.IList<string> Administrators {get; set; }

        /// <summary>
        /// Gets or sets kdc server IP addresses for the active directory machine. This
        /// optional parameter is used only while creating kerberos volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "kdcIP")]
        public string KdcIP {get; set; }

        /// <summary>
        /// Gets or sets name of the active directory machine. This optional parameter
        /// is used only while creating kerberos volume
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "adName")]
        public string AdName {get; set; }

        /// <summary>
        /// Gets or sets when LDAP over SSL/TLS is enabled, the LDAP client is required
        /// to have base64 encoded Active Directory Certificate Service&#39;s self-signed
        /// root CA certificate, this optional parameter is used only for dual protocol
        /// with LDAP user-mapping volumes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverRootCACertificate")]
        public string ServerRootCaCertificate {get; set; }

        /// <summary>
        /// Gets or sets if enabled, AES encryption will be enabled for SMB
        /// communication.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "aesEncryption")]
        public bool? AesEncryption {get; set; }

        /// <summary>
        /// Gets or sets specifies whether or not the LDAP traffic needs to be signed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ldapSigning")]
        public bool? LdapSigning {get; set; }

        /// <summary>
        /// Gets or sets domain Users in the Active directory to be given
        /// SeSecurityPrivilege privilege (Needed for SMB Continuously available shares
        /// for SQL). A list of unique usernames without domain specifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "securityOperators")]
        public System.Collections.Generic.IList<string> SecurityOperators {get; set; }

        /// <summary>
        /// Gets or sets specifies whether or not the LDAP traffic needs to be secured
        /// via TLS.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ldapOverTLS")]
        public bool? LdapOverTls {get; set; }

        /// <summary>
        /// Gets or sets  If enabled, NFS client local users can also (in addition to
        /// LDAP users) access the NFS volumes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "allowLocalNfsUsersWithLdap")]
        public bool? AllowLocalNfsUsersWithLdap {get; set; }

        /// <summary>
        /// Gets or sets if enabled, Traffic between the SMB server to Domain
        /// Controller (DC) will be encrypted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptDCConnections")]
        public bool? EncryptDcConnections {get; set; }

        /// <summary>
        /// Gets or sets lDAP Search scope options
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ldapSearchScope")]
        public LdapSearchScopeOpt LdapSearchScope {get; set; }

        /// <summary>
        /// Gets or sets comma separated list of IPv4 addresses of preferred servers
        /// for LDAP client. At most two comma separated IPv4 addresses can be passed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "preferredServersForLdapClient")]
        public string PreferredServersForLdapClient {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {




            if (this.Dns != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.Dns, "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "Dns", "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$");
                }
            }







            if (this.KdcIP != null)
            {
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.KdcIP, "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "KdcIP", "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$");
                }
            }
            if (this.AdName != null)
            {
                if (this.AdName.Length > 64)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "AdName", 64);
                }
                if (this.AdName.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "AdName", 1);
                }
            }
            if (this.ServerRootCaCertificate != null)
            {
                if (this.ServerRootCaCertificate.Length > 10240)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "ServerRootCaCertificate", 10240);
                }
                if (this.ServerRootCaCertificate.Length < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "ServerRootCaCertificate", 1);
                }
            }

            if (this.LdapSearchScope != null)
            {
                this.LdapSearchScope.Validate();
            }
            if (this.PreferredServersForLdapClient != null)
            {
                if (this.PreferredServersForLdapClient.Length > 32)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "PreferredServersForLdapClient", 32);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.PreferredServersForLdapClient, "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?)?$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "PreferredServersForLdapClient", "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)((, ?)(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))?)?$");
                }
            }
        }
    }
}