// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Pool properties
    /// </summary>
    public partial class PoolProperties
    {
        /// <summary>
        /// Initializes a new instance of the PoolProperties class.
        /// </summary>
        public PoolProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PoolProperties class.
        /// </summary>

        /// <param name="poolId">UUID v4 used to identify the Pool
        /// </param>

        /// <param name="size">Provisioned size of the pool (in bytes). Allowed values are in 1TiB chunks
        /// (value must be multiply of 1099511627776).
        /// </param>

        /// <param name="serviceLevel">The service level of the file system
        /// Possible values include: &#39;Standard&#39;, &#39;Premium&#39;, &#39;Ultra&#39;, &#39;StandardZRS&#39;</param>

        /// <param name="provisioningState">Azure lifecycle management
        /// </param>

        /// <param name="totalThroughputMibps">Total throughput of pool in MiB/s
        /// </param>

        /// <param name="utilizedThroughputMibps">Utilized throughput of pool in MiB/s
        /// </param>

        /// <param name="qosType">The qos type of the pool
        /// Possible values include: &#39;Auto&#39;, &#39;Manual&#39;</param>

        /// <param name="coolAccess">If enabled (true) the pool can contain cool Access enabled volumes.
        /// </param>

        /// <param name="encryptionType">Encryption type of the capacity pool, set encryption type for data at rest
        /// for this pool and all volumes in it. This value can only be set when
        /// creating new pool.
        /// Possible values include: &#39;Single&#39;, &#39;Double&#39;</param>
        public PoolProperties(long size, string serviceLevel, string poolId = default(string), string provisioningState = default(string), double? totalThroughputMibps = default(double?), double? utilizedThroughputMibps = default(double?), string qosType = default(string), bool? coolAccess = default(bool?), string encryptionType = default(string))

        {
            this.PoolId = poolId;
            this.Size = size;
            this.ServiceLevel = serviceLevel;
            this.ProvisioningState = provisioningState;
            this.TotalThroughputMibps = totalThroughputMibps;
            this.UtilizedThroughputMibps = utilizedThroughputMibps;
            this.QosType = qosType;
            this.CoolAccess = coolAccess;
            this.EncryptionType = encryptionType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets uUID v4 used to identify the Pool
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "poolId")]
        public string PoolId {get; private set; }

        /// <summary>
        /// Gets or sets provisioned size of the pool (in bytes). Allowed values are in
        /// 1TiB chunks (value must be multiply of 1099511627776).
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "size")]
        public long Size {get; set; }

        /// <summary>
        /// Gets or sets the service level of the file system Possible values include: &#39;Standard&#39;, &#39;Premium&#39;, &#39;Ultra&#39;, &#39;StandardZRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceLevel")]
        public string ServiceLevel {get; set; }

        /// <summary>
        /// Gets azure lifecycle management
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets total throughput of pool in MiB/s
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "totalThroughputMibps")]
        public double? TotalThroughputMibps {get; private set; }

        /// <summary>
        /// Gets utilized throughput of pool in MiB/s
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "utilizedThroughputMibps")]
        public double? UtilizedThroughputMibps {get; private set; }

        /// <summary>
        /// Gets or sets the qos type of the pool Possible values include: &#39;Auto&#39;, &#39;Manual&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "qosType")]
        public string QosType {get; set; }

        /// <summary>
        /// Gets or sets if enabled (true) the pool can contain cool Access enabled
        /// volumes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "coolAccess")]
        public bool? CoolAccess {get; set; }

        /// <summary>
        /// Gets or sets encryption type of the capacity pool, set encryption type for
        /// data at rest for this pool and all volumes in it. This value can only be
        /// set when creating new pool. Possible values include: &#39;Single&#39;, &#39;Double&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "encryptionType")]
        public string EncryptionType {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ServiceLevel == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServiceLevel");
            }
            if (this.PoolId != null)
            {
                if (this.PoolId.Length > 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "PoolId", 36);
                }
                if (this.PoolId.Length < 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "PoolId", 36);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.PoolId, "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "PoolId", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$");
                }
            }




        }
    }
}