// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Source Cluster properties for a cluster peer request
    /// </summary>
    public partial class PeerClusterForVolumeMigrationRequest
    {
        /// <summary>
        /// Initializes a new instance of the PeerClusterForVolumeMigrationRequest class.
        /// </summary>
        public PeerClusterForVolumeMigrationRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PeerClusterForVolumeMigrationRequest class.
        /// </summary>

        /// <param name="peerIPAddresses">A list of IC-LIF IPs that can be used to connect to the On-prem cluster
        /// </param>
        public PeerClusterForVolumeMigrationRequest(System.Collections.Generic.IList<string> peerIPAddresses)

        {
            this.PeerIPAddresses = peerIPAddresses;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets a list of IC-LIF IPs that can be used to connect to the
        /// On-prem cluster
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "peerIpAddresses")]
        public System.Collections.Generic.IList<string> PeerIPAddresses {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.PeerIPAddresses == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "PeerIPAddresses");
            }
            if (this.PeerIPAddresses != null)
            {
                if (this.PeerIPAddresses.Count < 1)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinItems, "PeerIPAddresses", 1);
                }
            }
        }
    }
}