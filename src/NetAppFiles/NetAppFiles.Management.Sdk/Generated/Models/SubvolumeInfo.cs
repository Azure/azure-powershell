// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Subvolume Information properties
    /// </summary>
    [Microsoft.Rest.Serialization.JsonTransformation]
    public partial class SubvolumeInfo : ProxyResource
    {
        /// <summary>
        /// Initializes a new instance of the SubvolumeInfo class.
        /// </summary>
        public SubvolumeInfo()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SubvolumeInfo class.
        /// </summary>

        /// <param name="id">Fully qualified resource ID for the resource. Ex -
        /// /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </param>

        /// <param name="name">The name of the resource
        /// </param>

        /// <param name="type">The type of the resource. E.g. &#34;Microsoft.Compute/virtualMachines&#34; or
        /// &#34;Microsoft.Storage/storageAccounts&#34;
        /// </param>

        /// <param name="systemData">Azure Resource Manager metadata containing createdBy and modifiedBy
        /// information.
        /// </param>

        /// <param name="path">Path to the subvolume
        /// </param>

        /// <param name="size">Truncate subvolume to the provided size in bytes
        /// </param>

        /// <param name="parentPath">parent path to the subvolume
        /// </param>

        /// <param name="provisioningState">Azure lifecycle management
        /// </param>
        public SubvolumeInfo(string id = default(string), string name = default(string), string type = default(string), SystemData systemData = default(SystemData), string path = default(string), long? size = default(long?), string parentPath = default(string), string provisioningState = default(string))

        : base(id, name, type, systemData)
        {
            this.Path = path;
            this.Size = size;
            this.ParentPath = parentPath;
            this.ProvisioningState = provisioningState;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets path to the subvolume
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.path")]
        public string Path {get; set; }

        /// <summary>
        /// Gets or sets truncate subvolume to the provided size in bytes
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.size")]
        public long? Size {get; set; }

        /// <summary>
        /// Gets or sets parent path to the subvolume
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.parentPath")]
        public string ParentPath {get; set; }

        /// <summary>
        /// Gets azure lifecycle management
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "properties.provisioningState")]
        public string ProvisioningState {get; private set; }
    }
}