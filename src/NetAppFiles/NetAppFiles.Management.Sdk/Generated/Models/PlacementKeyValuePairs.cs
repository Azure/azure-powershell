// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Application specific parameters for the placement of volumes in the volume
    /// group
    /// </summary>
    public partial class PlacementKeyValuePairs
    {
        /// <summary>
        /// Initializes a new instance of the PlacementKeyValuePairs class.
        /// </summary>
        public PlacementKeyValuePairs()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the PlacementKeyValuePairs class.
        /// </summary>

        /// <param name="key">Key for an application specific parameter for the placement of volumes in
        /// the volume group
        /// </param>

        /// <param name="value">Value for an application specific parameter for the placement of volumes in
        /// the volume group
        /// </param>
        public PlacementKeyValuePairs(string key, string value)

        {
            this.Key = key;
            this.Value = value;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets key for an application specific parameter for the placement of
        /// volumes in the volume group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "key")]
        public string Key {get; set; }

        /// <summary>
        /// Gets or sets value for an application specific parameter for the placement
        /// of volumes in the volume group
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "value")]
        public string Value {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.Key == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Key");
            }
            if (this.Value == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "Value");
            }


        }
    }
}