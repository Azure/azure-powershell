// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// The full path to a volume that is to be migrated into ANF. Required for
    /// Migration volumes
    /// </summary>
    public partial class RemotePath
    {
        /// <summary>
        /// Initializes a new instance of the RemotePath class.
        /// </summary>
        public RemotePath()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the RemotePath class.
        /// </summary>

        /// <param name="externalHostName">The Path to a ONTAP Host
        /// </param>

        /// <param name="serverName">The name of a server on the ONTAP Host
        /// </param>

        /// <param name="volumeName">The name of a volume on the server
        /// </param>
        public RemotePath(string externalHostName, string serverName, string volumeName)

        {
            this.ExternalHostName = externalHostName;
            this.ServerName = serverName;
            this.VolumeName = volumeName;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the Path to a ONTAP Host
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "externalHostName")]
        public string ExternalHostName {get; set; }

        /// <summary>
        /// Gets or sets the name of a server on the ONTAP Host
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serverName")]
        public string ServerName {get; set; }

        /// <summary>
        /// Gets or sets the name of a volume on the server
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "volumeName")]
        public string VolumeName {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.ExternalHostName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ExternalHostName");
            }
            if (this.ServerName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "ServerName");
            }
            if (this.VolumeName == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "VolumeName");
            }



        }
    }
}