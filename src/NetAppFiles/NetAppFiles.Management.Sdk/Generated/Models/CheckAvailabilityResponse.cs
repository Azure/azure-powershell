// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Information regarding availability of a resource.
    /// </summary>
    public partial class CheckAvailabilityResponse
    {
        /// <summary>
        /// Initializes a new instance of the CheckAvailabilityResponse class.
        /// </summary>
        public CheckAvailabilityResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CheckAvailabilityResponse class.
        /// </summary>

        /// <param name="isAvailable">&lt;code&gt;true&lt;/code&gt; indicates name is valid and available. &lt;code&gt;false&lt;/code&gt;
        /// indicates the name is invalid, unavailable, or both.
        /// </param>

        /// <param name="reason">&lt;code&gt;Invalid&lt;/code&gt; indicates the name provided does not match Azure App
        /// Service naming requirements. &lt;code&gt;AlreadyExists&lt;/code&gt; indicates that the
        /// name is already in use and is therefore unavailable.
        /// Possible values include: 'Invalid', 'AlreadyExists'</param>

        /// <param name="message">If reason == invalid, provide the user with the reason why the given name
        /// is invalid, and provide the resource naming requirements so that the user
        /// can select a valid name. If reason == AlreadyExists, explain that resource
        /// name is already in use, and direct them to select a different name.
        /// </param>
        public CheckAvailabilityResponse(bool? isAvailable = default(bool?), string reason = default(string), string message = default(string))

        {
            this.IsAvailable = isAvailable;
            this.Reason = reason;
            this.Message = message;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets &lt;code&gt;true&lt;/code&gt; indicates name is valid and available.
        /// &lt;code&gt;false&lt;/code&gt; indicates the name is invalid, unavailable, or both.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isAvailable")]
        public bool? IsAvailable {get; set; }

        /// <summary>
        /// Gets or sets &lt;code&gt;Invalid&lt;/code&gt; indicates the name provided does not
        /// match Azure App Service naming requirements. &lt;code&gt;AlreadyExists&lt;/code&gt;
        /// indicates that the name is already in use and is therefore unavailable. Possible values include: &#39;Invalid&#39;, &#39;AlreadyExists&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "reason")]
        public string Reason {get; set; }

        /// <summary>
        /// Gets or sets if reason == invalid, provide the user with the reason why the
        /// given name is invalid, and provide the resource naming requirements so that
        /// the user can select a valid name. If reason == AlreadyExists, explain that
        /// resource name is already in use, and direct them to select a different
        /// name.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "message")]
        public string Message {get; set; }
    }
}