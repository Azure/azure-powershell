// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Mount target properties
    /// </summary>
    public partial class MountTargetProperties
    {
        /// <summary>
        /// Initializes a new instance of the MountTargetProperties class.
        /// </summary>
        public MountTargetProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the MountTargetProperties class.
        /// </summary>

        /// <param name="mountTargetId">UUID v4 used to identify the MountTarget
        /// </param>

        /// <param name="fileSystemId">UUID v4 used to identify the MountTarget
        /// </param>

        /// <param name="ipAddress">The mount target&#39;s IPv4 address
        /// </param>

        /// <param name="smbServerFqdn">The SMB server&#39;s Fully Qualified Domain Name, FQDN
        /// </param>
        public MountTargetProperties(string fileSystemId, string mountTargetId = default(string), string ipAddress = default(string), string smbServerFqdn = default(string))

        {
            this.MountTargetId = mountTargetId;
            this.FileSystemId = fileSystemId;
            this.IPAddress = ipAddress;
            this.SmbServerFqdn = smbServerFqdn;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets uUID v4 used to identify the MountTarget
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "mountTargetId")]
        public string MountTargetId {get; private set; }

        /// <summary>
        /// Gets or sets uUID v4 used to identify the MountTarget
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "fileSystemId")]
        public string FileSystemId {get; set; }

        /// <summary>
        /// Gets the mount target&#39;s IPv4 address
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "ipAddress")]
        public string IPAddress {get; private set; }

        /// <summary>
        /// Gets or sets the SMB server&#39;s Fully Qualified Domain Name, FQDN
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "smbServerFqdn")]
        public string SmbServerFqdn {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.FileSystemId == null)
            {
                throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.CannotBeNull, "FileSystemId");
            }
            if (this.MountTargetId != null)
            {
                if (this.MountTargetId.Length > 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "MountTargetId", 36);
                }
                if (this.MountTargetId.Length < 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "MountTargetId", 36);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.MountTargetId, "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "MountTargetId", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$");
                }
            }
            if (this.FileSystemId != null)
            {
                if (this.FileSystemId.Length > 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "FileSystemId", 36);
                }
                if (this.FileSystemId.Length < 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "FileSystemId", 36);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.FileSystemId, "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "FileSystemId", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$");
                }
            }


        }
    }
}