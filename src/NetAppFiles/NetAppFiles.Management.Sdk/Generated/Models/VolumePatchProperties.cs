// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Patchable volume properties
    /// </summary>
    public partial class VolumePatchProperties
    {
        /// <summary>
        /// Initializes a new instance of the VolumePatchProperties class.
        /// </summary>
        public VolumePatchProperties()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the VolumePatchProperties class.
        /// </summary>

        /// <param name="serviceLevel">The service level of the file system
        /// Possible values include: &#39;Standard&#39;, &#39;Premium&#39;, &#39;Ultra&#39;, &#39;StandardZRS&#39;</param>

        /// <param name="usageThreshold">Maximum storage quota allowed for a file system in bytes. This is a soft
        /// quota used for alerting only. Minimum size is 100 GiB. Upper limit is
        /// 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on exceptional
        /// basis. Specified in bytes.
        /// </param>

        /// <param name="exportPolicy">Set of export policy rules
        /// </param>

        /// <param name="throughputMibps">Maximum throughput in MiB/s that can be achieved by this volume and this
        /// will be accepted as input only for manual qosType volume
        /// </param>

        /// <param name="dataProtection">DataProtection type volumes include an object containing details of the
        /// replication
        /// </param>

        /// <param name="isDefaultQuotaEnabled">Specifies if default quota is enabled for the volume.
        /// </param>

        /// <param name="defaultUserQuotaInKiBs">Default user quota for volume in KiBs. If isDefaultQuotaEnabled is set, the
        /// minimum value of 4 KiBs applies .
        /// </param>

        /// <param name="defaultGroupQuotaInKiBs">Default group quota for volume in KiBs. If isDefaultQuotaEnabled is set,
        /// the minimum value of 4 KiBs applies.
        /// </param>

        /// <param name="unixPermissions">UNIX permissions for NFS volume accepted in octal 4 digit format. First
        /// digit selects the set user ID(4), set group ID (2) and sticky (1)
        /// attributes. Second digit selects permission for the owner of the file: read
        /// (4), write (2) and execute (1). Third selects permissions for other users
        /// in the same group. the fourth for other users not in the group. 0755 -
        /// gives read/write/execute permissions to owner and read/execute to group and
        /// other users.
        /// </param>

        /// <param name="coolAccess">Specifies whether Cool Access(tiering) is enabled for the volume.
        /// </param>

        /// <param name="coolnessPeriod">Specifies the number of days after which data that is not accessed by
        /// clients will be tiered.
        /// </param>

        /// <param name="coolAccessRetrievalPolicy">coolAccessRetrievalPolicy determines the data retrieval behavior from the
        /// cool tier to standard storage based on the read pattern for cool access
        /// enabled volumes. The possible values for this field are:
        /// Default - Data will be pulled from cool tier to standard storage on random
        /// reads. This policy is the default.
        /// OnRead - All client-driven data read is pulled from cool tier to standard
        /// storage on both sequential and random reads.
        /// Never - No client-driven data is pulled from cool tier to standard storage.
        /// Possible values include: &#39;Default&#39;, &#39;OnRead&#39;, &#39;Never&#39;</param>

        /// <param name="snapshotDirectoryVisible">If enabled (true) the volume will contain a read-only snapshot directory
        /// which provides access to each of the volume&#39;s snapshots.
        /// </param>

        /// <param name="smbAccessBasedEnumeration">Enables access-based enumeration share property for SMB Shares. Only
        /// applicable for SMB/DualProtocol volume
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>

        /// <param name="smbNonBrowsable">Enables non-browsable property for SMB Shares. Only applicable for
        /// SMB/DualProtocol volume
        /// Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;</param>
        public VolumePatchProperties(string serviceLevel = default(string), long? usageThreshold = default(long?), VolumePatchPropertiesExportPolicy exportPolicy = default(VolumePatchPropertiesExportPolicy), double? throughputMibps = default(double?), VolumePatchPropertiesDataProtection dataProtection = default(VolumePatchPropertiesDataProtection), bool? isDefaultQuotaEnabled = default(bool?), long? defaultUserQuotaInKiBs = default(long?), long? defaultGroupQuotaInKiBs = default(long?), string unixPermissions = default(string), bool? coolAccess = default(bool?), int? coolnessPeriod = default(int?), string coolAccessRetrievalPolicy = default(string), bool? snapshotDirectoryVisible = default(bool?), string smbAccessBasedEnumeration = default(string), string smbNonBrowsable = default(string))

        {
            this.ServiceLevel = serviceLevel;
            this.UsageThreshold = usageThreshold;
            this.ExportPolicy = exportPolicy;
            this.ThroughputMibps = throughputMibps;
            this.DataProtection = dataProtection;
            this.IsDefaultQuotaEnabled = isDefaultQuotaEnabled;
            this.DefaultUserQuotaInKiBs = defaultUserQuotaInKiBs;
            this.DefaultGroupQuotaInKiBs = defaultGroupQuotaInKiBs;
            this.UnixPermissions = unixPermissions;
            this.CoolAccess = coolAccess;
            this.CoolnessPeriod = coolnessPeriod;
            this.CoolAccessRetrievalPolicy = coolAccessRetrievalPolicy;
            this.SnapshotDirectoryVisible = snapshotDirectoryVisible;
            this.SmbAccessBasedEnumeration = smbAccessBasedEnumeration;
            this.SmbNonBrowsable = smbNonBrowsable;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets the service level of the file system Possible values include: &#39;Standard&#39;, &#39;Premium&#39;, &#39;Ultra&#39;, &#39;StandardZRS&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "serviceLevel")]
        public string ServiceLevel {get; set; }

        /// <summary>
        /// Gets or sets maximum storage quota allowed for a file system in bytes. This
        /// is a soft quota used for alerting only. Minimum size is 100 GiB. Upper
        /// limit is 100TiB, 500Tib for LargeVolume or 2400Tib for LargeVolume on
        /// exceptional basis. Specified in bytes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "usageThreshold")]
        public long? UsageThreshold {get; set; }

        /// <summary>
        /// Gets or sets set of export policy rules
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "exportPolicy")]
        public VolumePatchPropertiesExportPolicy ExportPolicy {get; set; }

        /// <summary>
        /// Gets or sets maximum throughput in MiB/s that can be achieved by this
        /// volume and this will be accepted as input only for manual qosType volume
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "throughputMibps")]
        public double? ThroughputMibps {get; set; }

        /// <summary>
        /// Gets or sets dataProtection type volumes include an object containing
        /// details of the replication
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "dataProtection")]
        public VolumePatchPropertiesDataProtection DataProtection {get; set; }

        /// <summary>
        /// Gets or sets specifies if default quota is enabled for the volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "isDefaultQuotaEnabled")]
        public bool? IsDefaultQuotaEnabled {get; set; }

        /// <summary>
        /// Gets or sets default user quota for volume in KiBs. If
        /// isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies .
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultUserQuotaInKiBs")]
        public long? DefaultUserQuotaInKiBs {get; set; }

        /// <summary>
        /// Gets or sets default group quota for volume in KiBs. If
        /// isDefaultQuotaEnabled is set, the minimum value of 4 KiBs applies.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "defaultGroupQuotaInKiBs")]
        public long? DefaultGroupQuotaInKiBs {get; set; }

        /// <summary>
        /// Gets or sets uNIX permissions for NFS volume accepted in octal 4 digit
        /// format. First digit selects the set user ID(4), set group ID (2) and sticky
        /// (1) attributes. Second digit selects permission for the owner of the file:
        /// read (4), write (2) and execute (1). Third selects permissions for other
        /// users in the same group. the fourth for other users not in the group. 0755
        /// - gives read/write/execute permissions to owner and read/execute to group
        /// and other users.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "unixPermissions")]
        public string UnixPermissions {get; set; }

        /// <summary>
        /// Gets or sets specifies whether Cool Access(tiering) is enabled for the
        /// volume.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "coolAccess")]
        public bool? CoolAccess {get; set; }

        /// <summary>
        /// Gets or sets specifies the number of days after which data that is not
        /// accessed by clients will be tiered.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "coolnessPeriod")]
        public int? CoolnessPeriod {get; set; }

        /// <summary>
        /// Gets or sets coolAccessRetrievalPolicy determines the data retrieval
        /// behavior from the cool tier to standard storage based on the read pattern
        /// for cool access enabled volumes. The possible values for this field are:
        /// Default - Data will be pulled from cool tier to standard storage on random
        /// reads. This policy is the default.
        /// OnRead - All client-driven data read is pulled from cool tier to standard
        /// storage on both sequential and random reads.
        /// Never - No client-driven data is pulled from cool tier to standard storage. Possible values include: &#39;Default&#39;, &#39;OnRead&#39;, &#39;Never&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "coolAccessRetrievalPolicy")]
        public string CoolAccessRetrievalPolicy {get; set; }

        /// <summary>
        /// Gets or sets if enabled (true) the volume will contain a read-only snapshot
        /// directory which provides access to each of the volume&#39;s snapshots.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "snapshotDirectoryVisible")]
        public bool? SnapshotDirectoryVisible {get; set; }

        /// <summary>
        /// Gets or sets enables access-based enumeration share property for SMB
        /// Shares. Only applicable for SMB/DualProtocol volume Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "smbAccessBasedEnumeration")]
        public string SmbAccessBasedEnumeration {get; set; }

        /// <summary>
        /// Gets or sets enables non-browsable property for SMB Shares. Only applicable
        /// for SMB/DualProtocol volume Possible values include: &#39;Disabled&#39;, &#39;Enabled&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "smbNonBrowsable")]
        public string SmbNonBrowsable {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {

            if (this.UsageThreshold != null)
            {
                if (this.UsageThreshold > 2638827906662400)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "UsageThreshold", 2638827906662400);
                }
                if (this.UsageThreshold < 107374182400)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "UsageThreshold", 107374182400);
                }
            }


            if (this.UnixPermissions != null)
            {
                if (this.UnixPermissions.Length > 4)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "UnixPermissions", 4);
                }
                if (this.UnixPermissions.Length < 4)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "UnixPermissions", 4);
                }
            }
            if (this.CoolnessPeriod != null)
            {
                if (this.CoolnessPeriod > 183)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMaximum, "CoolnessPeriod", 183);
                }
                if (this.CoolnessPeriod < 2)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.InclusiveMinimum, "CoolnessPeriod", 2);
                }
            }



        }
    }
}