// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.Management.NetApp.Models
{
    using System.Linq;

    /// <summary>
    /// Describes the contents of a network sibling set.
    /// </summary>
    /// <remarks>
    /// Describes the contents of a network sibling set.
    /// </remarks>
    public partial class NetworkSiblingSet
    {
        /// <summary>
        /// Initializes a new instance of the NetworkSiblingSet class.
        /// </summary>
        public NetworkSiblingSet()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the NetworkSiblingSet class.
        /// </summary>

        /// <param name="networkSiblingSetId">Network Sibling Set ID for a group of volumes sharing networking resources
        /// in a subnet.
        /// </param>

        /// <param name="subnetId">The Azure Resource URI for a delegated subnet. Must have the delegation
        /// Microsoft.NetApp/volumes. Example
        /// /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}
        /// </param>

        /// <param name="networkSiblingSetStateId">Network sibling set state Id identifying the current state of the sibling
        /// set.
        /// </param>

        /// <param name="networkFeatures">Network features available to the volume, or current state of update.
        /// Possible values include: &#39;Basic&#39;, &#39;Standard&#39;, &#39;Basic_Standard&#39;,
        /// &#39;Standard_Basic&#39;</param>

        /// <param name="provisioningState">Gets the status of the NetworkSiblingSet at the time the operation was
        /// called.
        /// Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Updating&#39;</param>

        /// <param name="nicInfoList">List of NIC information
        /// </param>
        public NetworkSiblingSet(string networkSiblingSetId = default(string), string subnetId = default(string), string networkSiblingSetStateId = default(string), string networkFeatures = default(string), string provisioningState = default(string), System.Collections.Generic.IList<NicInfo> nicInfoList = default(System.Collections.Generic.IList<NicInfo>))

        {
            this.NetworkSiblingSetId = networkSiblingSetId;
            this.SubnetId = subnetId;
            this.NetworkSiblingSetStateId = networkSiblingSetStateId;
            this.NetworkFeatures = networkFeatures;
            this.ProvisioningState = provisioningState;
            this.NicInfoList = nicInfoList;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();


        /// <summary>
        /// Gets or sets network Sibling Set ID for a group of volumes sharing
        /// networking resources in a subnet.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSiblingSetId")]
        public string NetworkSiblingSetId {get; set; }

        /// <summary>
        /// Gets or sets the Azure Resource URI for a delegated subnet. Must have the
        /// delegation Microsoft.NetApp/volumes. Example
        /// /subscriptions/subscriptionId/resourceGroups/resourceGroup/providers/Microsoft.Network/virtualNetworks/testVnet/subnets/{mySubnet}
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "subnetId")]
        public string SubnetId {get; set; }

        /// <summary>
        /// Gets or sets network sibling set state Id identifying the current state of
        /// the sibling set.
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkSiblingSetStateId")]
        public string NetworkSiblingSetStateId {get; set; }

        /// <summary>
        /// Gets or sets network features available to the volume, or current state of
        /// update. Possible values include: &#39;Basic&#39;, &#39;Standard&#39;, &#39;Basic_Standard&#39;, &#39;Standard_Basic&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "networkFeatures")]
        public string NetworkFeatures {get; set; }

        /// <summary>
        /// Gets gets the status of the NetworkSiblingSet at the time the operation was
        /// called. Possible values include: &#39;Succeeded&#39;, &#39;Failed&#39;, &#39;Canceled&#39;, &#39;Updating&#39;
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "provisioningState")]
        public string ProvisioningState {get; private set; }

        /// <summary>
        /// Gets or sets list of NIC information
        /// </summary>
        [Newtonsoft.Json.JsonProperty(PropertyName = "nicInfoList")]
        public System.Collections.Generic.IList<NicInfo> NicInfoList {get; set; }
        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (this.NetworkSiblingSetId != null)
            {
                if (this.NetworkSiblingSetId.Length > 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MaxLength, "NetworkSiblingSetId", 36);
                }
                if (this.NetworkSiblingSetId.Length < 36)
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.MinLength, "NetworkSiblingSetId", 36);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(this.NetworkSiblingSetId, "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"))
                {
                    throw new Microsoft.Rest.ValidationException(Microsoft.Rest.ValidationRules.Pattern, "NetworkSiblingSetId", "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$");
                }
            }





        }
    }
}