// <auto-generated>
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
//
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Management.NetApp.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Get group Id list for LDAP User request
    /// </summary>
    public partial class GetGroupIdListForLDAPUserRequest
    {
        /// <summary>
        /// Initializes a new instance of the GetGroupIdListForLDAPUserRequest
        /// class.
        /// </summary>
        public GetGroupIdListForLDAPUserRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GetGroupIdListForLDAPUserRequest
        /// class.
        /// </summary>
        /// <param name="username">username is required to fetch the group to
        /// which user is part of</param>
        public GetGroupIdListForLDAPUserRequest(string username)
        {
            Username = username;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets username is required to fetch the group to which user
        /// is part of
        /// </summary>
        [JsonProperty(PropertyName = "username")]
        public string Username { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Username == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Username");
            }
            if (Username != null)
            {
                if (Username.Length > 255)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "Username", 255);
                }
                if (Username.Length < 1)
                {
                    throw new ValidationException(ValidationRules.MinLength, "Username", 1);
                }
            }
        }
    }
}
