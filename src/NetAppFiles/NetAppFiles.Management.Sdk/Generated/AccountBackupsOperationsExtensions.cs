// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for AccountBackupsOperations
    /// </summary>
    public static partial class AccountBackupsOperationsExtensions
    {
        /// <summary>
        /// List all Backups for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        public static System.Collections.Generic.IEnumerable<Backup> List(this IAccountBackupsOperations operations, string resourceGroupName, string accountName)
        {
                return ((IAccountBackupsOperations)operations).ListAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List all Backups for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Backup>> ListAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Gets the specified backup for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupName'>
        /// The name of the backup
        /// </param>
        public static Backup Get(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName)
        {
                return ((IAccountBackupsOperations)operations).GetAsync(resourceGroupName, accountName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Gets the specified backup for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupName'>
        /// The name of the backup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Backup> GetAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, backupName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the specified Backup for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupName'>
        /// The name of the backup
        /// </param>
        public static void Delete(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName)
        {
                ((IAccountBackupsOperations)operations).DeleteAsync(resourceGroupName, accountName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the specified Backup for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupName'>
        /// The name of the backup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task DeleteAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
        /// <summary>
        /// Delete the specified Backup for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupName'>
        /// The name of the backup
        /// </param>
        public static void BeginDelete(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName)
        {
                ((IAccountBackupsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, backupName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the specified Backup for a Netapp Account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupName'>
        /// The name of the backup
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task BeginDeleteAsync(this IAccountBackupsOperations operations, string resourceGroupName, string accountName, string backupName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            (await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupName, null, cancellationToken).ConfigureAwait(false)).Dispose();
        }
    }
}
