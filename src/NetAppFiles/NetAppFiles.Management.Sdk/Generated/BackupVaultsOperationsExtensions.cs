// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
namespace Microsoft.Azure.Management.NetApp
{
    using Microsoft.Rest.Azure;
    using Models;

    /// <summary>
    /// Extension methods for BackupVaultsOperations
    /// </summary>
    public static partial class BackupVaultsOperationsExtensions
    {
        /// <summary>
        /// List and describe all Backup Vaults in the NetApp account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupVault> ListByNetAppAccount(this IBackupVaultsOperations operations, string resourceGroupName, string accountName)
        {
                return ((IBackupVaultsOperations)operations).ListByNetAppAccountAsync(resourceGroupName, accountName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List and describe all Backup Vaults in the NetApp account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupVault>> ListByNetAppAccountAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNetAppAccountWithHttpMessagesAsync(resourceGroupName, accountName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Get the Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVault Get(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName)
        {
                return ((IBackupVaultsOperations)operations).GetAsync(resourceGroupName, accountName, backupVaultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Get the Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVault> GetAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.GetWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Create or update the specified Backup Vault in the NetApp account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVault CreateOrUpdate(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVault body)
        {
                return ((IBackupVaultsOperations)operations).CreateOrUpdateAsync(resourceGroupName, accountName, backupVaultName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the specified Backup Vault in the NetApp account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVault> CreateOrUpdateAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVault body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.CreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch the specified NetApp Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVault Update(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVaultPatch body)
        {
                return ((IBackupVaultsOperations)operations).UpdateAsync(resourceGroupName, accountName, backupVaultName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch the specified NetApp Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVault> UpdateAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVaultPatch body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.UpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the specified Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVaultsDeleteHeaders Delete(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName)
        {
                return ((IBackupVaultsOperations)operations).DeleteAsync(resourceGroupName, accountName, backupVaultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the specified Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVaultsDeleteHeaders> DeleteAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.DeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// Create or update the specified Backup Vault in the NetApp account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVault BeginCreateOrUpdate(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVault body)
        {
                return ((IBackupVaultsOperations)operations).BeginCreateOrUpdateAsync(resourceGroupName, accountName, backupVaultName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Create or update the specified Backup Vault in the NetApp account
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVault> BeginCreateOrUpdateAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVault body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginCreateOrUpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Patch the specified NetApp Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVault BeginUpdate(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVaultPatch body)
        {
                return ((IBackupVaultsOperations)operations).BeginUpdateAsync(resourceGroupName, accountName, backupVaultName, body).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Patch the specified NetApp Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVault> BeginUpdateAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, BackupVaultPatch body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginUpdateWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, body, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
        /// <summary>
        /// Delete the specified Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        public static BackupVaultsDeleteHeaders BeginDelete(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName)
        {
                return ((IBackupVaultsOperations)operations).BeginDeleteAsync(resourceGroupName, accountName, backupVaultName).GetAwaiter().GetResult();
        }

        /// <summary>
        /// Delete the specified Backup Vault
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='resourceGroupName'>
        /// The name of the resource group. The name is case insensitive.
        /// </param>
        /// <param name='accountName'>
        /// The name of the NetApp account
        /// </param>
        /// <param name='backupVaultName'>
        /// The name of the Backup Vault
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<BackupVaultsDeleteHeaders> BeginDeleteAsync(this IBackupVaultsOperations operations, string resourceGroupName, string accountName, string backupVaultName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.BeginDeleteWithHttpMessagesAsync(resourceGroupName, accountName, backupVaultName, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Headers;
            }
        }
        /// <summary>
        /// List and describe all Backup Vaults in the NetApp account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        public static Microsoft.Rest.Azure.IPage<BackupVault> ListByNetAppAccountNext(this IBackupVaultsOperations operations, string nextPageLink)
        {
                return ((IBackupVaultsOperations)operations).ListByNetAppAccountNextAsync(nextPageLink).GetAwaiter().GetResult();
        }

        /// <summary>
        /// List and describe all Backup Vaults in the NetApp account.
        /// </summary>
        /// <param name='operations'>
        /// The operations group for this extension method.
        /// </param>
        /// <param name='nextPageLink'>
        /// The NextLink from the previous successful call to List operation.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        public static async System.Threading.Tasks.Task<Microsoft.Rest.Azure.IPage<BackupVault>> ListByNetAppAccountNextAsync(this IBackupVaultsOperations operations, string nextPageLink, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            using (var _result = await operations.ListByNetAppAccountNextWithHttpMessagesAsync(nextPageLink, null, cancellationToken).ConfigureAwait(false))
            {
                return _result.Body;
            }
        }
    }
}
