<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Available Targets:

    /t:Clean
      Removes temporary build outputs.

    /t:Build
      Builds assemblies.

    /t:Test
      Runs tests

    /t:Publish
      Creates local nuget packages and MSI

    /p:CodeSign=True
      Code sign binaries, mainly for official release. Default is false.

    /p:CodeSign=True;DelaySign=True
      Test the code sign workflow locally.

    /p:Scope
      'ServiceManagement': service management
      'AzureStorage': storage data plane cmdlets
      'Stack': Azure Stack cmdlets
      'Subfolder under src\ResourceManager': An individual cmdlet module
      By default, it builds everything

    /p:SkipHelp=True
      Skips help generation, mainly for local builds to save time.

    /p:SkipNugetRestore=True
      Skips nuget restore, mainly for local builds to save time when you have already restored nugets.

    /p:SkipDependencyAnalysis=True
      Skips build validation, mainly for local builds to save time.

    /p:QuickBuild=true
      Same thing as doing SkipHelp, SkipNugetRestore, and SkipDependencyAnalysis

  -->

  <!-- Define default build properties -->
  <PropertyGroup>
    <LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
    <LibrarySourceFolder>$(LibraryRoot)src</LibrarySourceFolder>
    <LibraryToolsFolder>$(LibraryRoot)tools</LibraryToolsFolder>
    <LocalFeedFolder>$(LibraryToolsFolder)\LocalFeed</LocalFeedFolder>
    <PublishDirectory>$(LibrarySourceFolder)\Publish</PublishDirectory>
    <Configuration Condition=" '$(Configuration)' != 'Release'">Debug</Configuration>
    <CodeSign>false</CodeSign>
    <!--Set this true only if you want to test the code sign workflow locally-->
    <DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
    <SignedOutputRootDir>$(LibraryRoot)signed</SignedOutputRootDir>
    <BuildOutputDirectory>$(PublishDirectory)\Build</BuildOutputDirectory>
    <TestOutputDirectory>$(PublishDirectory)\TestResults</TestOutputDirectory>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
    <NuGetPublishingSource Condition=" '$(NuGetPublishingSource)' == '' ">$(LibrarySourceFolder)</NuGetPublishingSource>
    <Scope Condition="$(Scope) == '' or '$(Scope)' == 'Netcore'" >All</Scope>
    <BuildTasksPath>$(LibraryToolsFolder)\BuildPackagesTask\Microsoft.Azure.Build.Tasks\bin\$(Configuration)</BuildTasksPath>
    <PackageDirectory>$(LibrarySourceFolder)\Package</PackageDirectory>
    <StackPackageFolder>$(LibrarySourceFolder)\Stack</StackPackageFolder>
    <NetCore>false</NetCore>
  </PropertyGroup>

  <!-- Set Skips -->
  <PropertyGroup>
    <SkipHelp Condition =" '$(SkipHelp)' != 'true' ">false</SkipHelp>
    <SkipNugetRestore Condition="'$(SkipNugetRestore)' != 'true' ">false</SkipNugetRestore>
    <SkipDependencyAnalysis Condition="'$(SkipDependencyAnalysis)' != 'true' ">false</SkipDependencyAnalysis>
  </PropertyGroup>

  <!-- Skip everything that is not build/test/publish/etc -->
  <PropertyGroup Condition="'$(QuickBuild)' == 'true'">
    <SkipHelp>true</SkipHelp>
    <SkipNugetRestore>true</SkipNugetRestore>
    <SkipDependencyAnalysis>true</SkipDependencyAnalysis>
  </PropertyGroup>

  <ItemGroup>
    <StackSolution    Include="$(LibrarySourceFolder)\StackAdmin\Stack.sln" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'" />
    <StaticAnalysis   Include=".\tools\StaticAnalysis\StaticAnalysis.sln" />
    <LocalBuildTasks  Include="$(LibraryToolsFolder)\BuildPackagesTask\Microsoft.Azure.Build.Tasks.sln" />
    <LocalBuildTasks  Include="$(LibraryToolsFolder)\RepoTasks\RepoTasks.sln" />
 </ItemGroup>

  <!-- Tasks -->
  <UsingTask TaskName="ValidateStrongNameSignatureTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilterOutAutoRestLibraries" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="DebugTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="VerifyAuthenticodeSignatureTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilesChangedTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilterTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="SetEnvVar" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
      <ParameterGroup>
        <EnvName ParameterType="System.String" Required="true" />
          <EnvValue ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
          <Using Namespace="System"/>
      <Code Type="Fragment" Language="cs">
            <![CDATA[System.Environment.SetEnvironmentVariable(EnvName, EnvValue);]]>
      </Code>
    </Task>
  </UsingTask>

  <!-- CI build related -->
  <PropertyGroup>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists($(OnPremiseBuildTasks)) ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists($(OnPremiseBuildTasks)) ">false</OnPremiseBuild>
  </PropertyGroup>

  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CorporateValidation" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />
  <Import Project="CodeSign.targets"/>

  <UsingTask
    AssemblyFile="$(MSBuildProjectDirectory)\packages\xunit.runner.msbuild.2.1.0\build\portable-net45+win8+wp8+wpa81\xunit.runner.msbuild.dll"
    TaskName="Xunit.Runner.MSBuild.xunit" />

  <!-- Clean the build in all configurations -->
  <Target Name="Clean">
    <Message  Importance="high" Text="Cleaning Cmdlets..." ContinueOnError="false" />

    <!-- Clean out the NuGet cache -->
    <Exec ContinueOnError="false"
      Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot; $Path = Join-Path $env:USERPROFILE .nuget; if (Test-Path $Path) { Remove-Item $Path -Recurse } &quot;"/>

    <!-- Clean each project -->
    <MSBuild Projects="@(CmdletSolutionsToBuild)"
      Targets="Clean"
      Properties="Configuration=$(Configuration);Platform=Any CPU"
      ContinueOnError="false" />

    <!-- Delete the publish files -->
    <Message Importance="high" Text="Cleaning publish files..." ContinueOnError="false" />
    <ItemGroup>
      <PublishFiles Include="$(PublishDirectory)\**\*.*" />
    </ItemGroup>
    <Delete
      Files="@(PublishFiles)"
      ContinueOnError="false" />
    <RemoveDir
      Directories="$(PublishDirectory)"
      ContinueOnError="false" />

    <!-- Delete the package files -->
    <Message Importance="high" Text="Cleaning package files..." ContinueOnError="false" />
    <ItemGroup>
      <PackageFiles Include="$(PackageDirectory)\**\*.*" />
    </ItemGroup>
    <Delete
      Files="@(PackageFiles)"
      ContinueOnError="false" />
    <RemoveDir
      Directories="$(PackageDirectory)"
      ContinueOnError="false" />
  </Target>

  <PropertyGroup>
    <NuGetCommand>$(MSBuildProjectDirectory)\tools\NuGet.exe</NuGetCommand>
    <LibraryNugetPackageFolder>$(LibrarySourceFolder)\packages</LibraryNugetPackageFolder>
    <NuGetRestoreConfigFile>$(MSBuildProjectDirectory)\NuGet.Config</NuGetRestoreConfigFile>
    <NuGetRestoreConfigSwitch>-ConfigFile &quot;$(NuGetRestoreConfigFile)&quot;</NuGetRestoreConfigSwitch>
    <NuGetRestorePackageSetting>-PackagesDirectory $(LibraryNugetPackageFolder)</NuGetRestorePackageSetting>
    <NuGetLocalBuildTaskPackages>-PackagesDirectory $(LibraryToolsFolder)\BuildPackagesTask\packages</NuGetLocalBuildTaskPackages>
    <NuGetRepoTasksPackages>-PackagesDirectory $(LibraryToolsFolder)\RepoTasks\packages</NuGetRepoTasksPackages>

    <PowerShellCommand Condition=" '$(PowerShellCommand)' == '' ">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellCommand>
    <PowerShellCoreCommand Condition=" '$(PowerShellCoreCommand)' == '' ">pwsh</PowerShellCoreCommand>
    <!-- All PowerShell commands have this prefix  -->
    <PowerShellCommandPrefix>&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command</PowerShellCommandPrefix>
    <PowerShellCoreCommandPrefix>&quot;$(PowerShellCoreCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command</PowerShellCoreCommandPrefix>
  </PropertyGroup>

  <!--
  Force nuget package restore so that packages that include .targets files
  don't need to be checked into source control.
  -->
  <Target Name="RestoreNugetPackages" Condition="$(SkipNugetRestore) == 'false'">
    <Message Importance="high" Text="Restore Nuget packages..." />
    <!-- Restore packages -->
    <Exec Command="$(NuGetCommand) restore %(StackSolution.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
          Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"
          ContinueOnError="false" />
    <!-- Restore packages for static analysis-->
    <Exec Command="$(NuGetCommand) restore %(StaticAnalysis.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
          ContinueOnError="false" />
    <!-- Restore packages for local build tasks-->
    <Exec Command="$(NuGetCommand) restore %(LocalBuildTasks.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
            ContinueOnError="false" />
    <!--Restore the xunit runner needed to run unit tests-->
    <Exec Command="$(NuGetCommand) restore $(MSBuildProjectDirectory)\packages.config -PackagesDirectory $(MSBuildProjectDirectory)\packages" />
  </Target>

  <Target Name="FilterBuild">
    <Exec ContinueOnError="false"
      Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot; . $(LibraryToolsFolder)\CreateFilterMappings.ps1 &quot;"/>

    <!-- Get all of the files changed in the given pull request -->
    <FilesChangedTask RepositoryOwner="Azure" RepositoryName="azure-powershell" PullRequestNumber="$(PullRequestNumber)">
        <Output TaskParameter="FilesChanged" ItemName="FilesChanged" />
    </FilesChangedTask>

    <!-- Get the list of modules changed -->
    <FilterTask FilesChanged="@(FilesChanged)" MapFilePath=".\ModuleMappings.json">
      <Output TaskParameter="Output" ItemName="ModulesChanged"/>
    </FilterTask>
    <Message Text="Filtering help generation and StaticAnalysis by the following modules:"/>
    <Message Text="%(ModulesChanged.Identity)"/>
    <Message Text="Total: @(ModulesChanged->Count())"/>
    <Message Text=""/>

    <!-- Get the list of solutions to build -->
    <FilterTask FilesChanged="@(FilesChanged)" MapFilePath=".\SolutionMappings.json">
        <Output TaskParameter="Output" ItemName="CmdletSolutionsToBuild"/>
    </FilterTask>
    <Message Text="Filtering solutions to build by the following:"/>
    <Message Text="%(CmdletSolutionsToBuild.Identity)"/>
    <Message Text="Total: @(CmdletSolutionsToBuild->Count())"/>
    <Message Text=""/>

    <!--Get the list of tests to be run based on files changed from a specified PullRequestNumber. Mapping between paths and test DLLs is used to produce the list.-->
    <FilterTask FilesChanged="@(FilesChanged)" MapFilePath=".\TestMappings.json">
        <Output TaskParameter="Output" ItemName="XUnitTests"/>
    </FilterTask>
    <Message Text="Using these test assemblies:"/>
    <Message Text="%(XUnitTests.Identity)"/>
    <Message Text="Total: @(XunitTests->Count())"/>
    <Message Text=""/>

    <!-- Restore packages -->
    <Exec Command="$(NuGetCommand) restore %(CmdletSolutionsToBuild.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)" ContinueOnError="false" />
  </Target>

  <!-- Build all flavors of the Cmdlets -->
  <Target Name="Build" DependsOnTargets="RestoreNugetPackages;BuildMsBuildTask;FilterBuild">

    <Message Importance="high" Text="Building Cmdlets for scope $(Scope)..." />
    <!-- Investigate why the ChangeLogCheck target removes the 8080th character -->
    <!-- <CallTarget targets="ChangeLogCheck" ContinueOnError="false" /> -->

    <MakeDir  Directories="$(PackageDirectory)"
              Condition="'$(Scope)' != 'Stack'" />
    <MakeDir  Directories="$(StackPackageFolder)"
              Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'" />

    <MSBuild  Projects="@(CmdletSolutionsToBuild)"
              Targets="Build"
              Properties="Configuration=$(Configuration);Platform=Any CPU"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="false" />

    <MSBuild  Projects="@(StackSolution)"
              Targets="Build"
              Properties="Configuration=$(Configuration);Platform=Any CPU"
              BuildInParallel="$(BuildInParallel)"
              Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"
              ContinueOnError="false" />

    <Exec Command="$(PowerShellCommandPrefix) &quot;$ProgressPreference = 'SilentlyContinue';. $(LibraryToolsFolder)\GenerateHelp.ps1 -ValidateMarkdownHelp -GenerateMamlHelp -BuildConfig $(Configuration) -FilteredModules '@(ModulesChanged)' &quot;"
          Condition="'$(SkipHelp)' == 'false'"
          ContinueOnError="false"/>

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\UpdateModules.ps1 -BuildConfig $(Configuration) -Scope $(Scope) &quot;"
          Condition="'$(CodeSign)' == 'false'"/>

    <CallTarget Targets="CodeSignBinaries" Condition="'$(CodeSign)' == 'true'" />

    <Message Importance="high" Text="Running Static Analyser" />
    <CallTarget targets="DependencyAnalysis" ContinueOnError="ErrorAndContinue" />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\CheckAssemblies.ps1 -BuildConfig $(Configuration) &quot;" />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\CleanupBuild.ps1 -BuildConfig $(Configuration) &quot;" />
  </Target>

  <!--
    Build .Net Core Cmdlets
    Fully self contained
  -->
  <Target Name="BuildNetCore">
    <Message Importance="high" Text="Building Cmdlets..." />
    <PropertyGroup>
      <Scope>Netcore</Scope>
    </PropertyGroup>

    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;$ProgressPreference = 'SilentlyContinue';. $(LibraryToolsFolder)\CreateAliasMapping.ps1 &quot;"/>

    <!-- Build and create package content -->
    <Exec Command="dotnet --version"/>
    <Exec Command="dotnet publish Azure.PowerShell.Netcore.sln -c $(Configuration)"/>

    <!-- Delete powershell runtime files -->
    <ItemGroup>
      <RedundantDlls Include="$(PackageDirectory)\**\publish\Microsoft.Powershell.*.dll" />
      <RedundantDlls Include="$(PackageDirectory)\**\publish\System*.dll"
                     Exclude="$(PackageDirectory)\**\publish\System.Security.Cryptography.ProtectedData.dll" />
      <RedundantDlls Include="$(PackageDirectory)\**\publish\Microsoft.VisualBasic.dll" />
      <RedundantDlls Include="$(PackageDirectory)\**\publish\Microsoft.CSharp.dll" />
      <RedundantDlls Include="$(PackageDirectory)\**\publish\Microsoft.CodeAnalysis.dll" />
      <RedundantDlls Include="$(PackageDirectory)\**\publish\Microsoft.CodeAnalysis.CSharp.dll" />
    </ItemGroup>

    <Delete Files="@(RedundantDlls->'%(FullPath)')"/>

    <!-- Copy content of the publish folder one folders up -->
    <ItemGroup>
      <PackageContent Include="$(PackageDirectory)\**\publish\*.*" />
      <SourceFile Include="@(PackageContent)">
        <DestinationFolder>$([System.IO.Path]::Combine('%(RelativeDir)', '..', '%(FileName)%(Extension)'))</DestinationFolder>
      </SourceFile>
    </ItemGroup>

    <Copy SourceFiles="@(SourceFile->'%(FullPath)')" DestinationFiles="@(SourceFile->'%(DestinationFolder)')" SkipUnchangedFiles="true"/>

      <!-- Delete build artifacts -->
    <ItemGroup>
      <GetAllFiles Include="$(PackageDirectory)\**\publish\*.*" />
      <Artifacts Include="@(GetAllFiles->'%(RootDir)%(Directory)'->Distinct())" />
    </ItemGroup>

    <RemoveDir  Directories="%(Artifacts.Identity)"
                ContinueOnError="true" />

    <ItemGroup>
      <ExtraPsdFiles Include="$(PackageDirectory)\$(Configuration)\ResourceManager\AzureResourceManager\Az.Resources\Az.Tags.psd1" />
      <ExtraPsdFiles Include="$(PackageDirectory)\$(Configuration)\ResourceManager\AzureResourceManager\Az.Websites\Az.Resources.psd1" />
      <ExtraPsdFiles Include="$(PackageDirectory)\$(Configuration)\ResourceManager\AzureResourceManager\Az.Websites\Az.Tags.psd1" />
      <ExtraPsdFiles Include="$(PackageDirectory)\$(Configuration)\ResourceManager\AzureResourceManager\Az.Network\Az.Resources.psd1" />
      <ExtraPsdFiles Include="$(PackageDirectory)\$(Configuration)\ResourceManager\AzureResourceManager\Az.Network\Az.Tags.psd1" />
    </ItemGroup>

    <Delete Files="@(ExtraPsdFiles->'%(FullPath)')"/>

    <!-- Update module manifests. -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)\UpdateModules.ps1 -BuildConfig $(Configuration) -Scope $(Scope) &quot; "
          Condition="'$(CodeSign)' == 'false'"
          ContinueOnError="false" />
    <!-- Generate the Help -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;Set-Variable -Name ProgressPreference -Value 'SilentlyContinue';. $(LibraryToolsFolder)\GenerateHelp.ps1 -ValidateMarkdownHelp -GenerateMamlHelp -BuildConfig $(Configuration) &quot;"
          Condition="'$(SkipHelp)' == 'false'"
          ContinueOnError="false"/>

    <!-- Cleanup extraneous files. -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)\CleanupBuild.ps1 -BuildConfig $(Configuration) &quot;" />
    <CallTarget Targets="CodeSignBinaries" Condition="'$(CodeSign)' == 'true'" />
  </Target>

  <!-- Do everything possible except Publish -->
  <Target Name="Full" DependsOnTargets="Clean;Build;Test" />

  <Target Name="BuildMsBuildTask" DependsOnTargets="RestoreNugetPackages">
    <Message Importance="high" Text="Building RepoTasks" />
    <MSBuild Projects="@(LocalBuildTasks)"
             Targets="Build"
             Properties="Configuration=$(Configuration);Platform=Any CPU" />
  </Target>

  <!-- Run Validation -->
  <Target Name="DependencyAnalysis"
          Condition="'$(SkipDependencyAnalysis)' == 'false'">

    <MSBuild  Projects="@(StaticAnalysis)"
              Targets="Build"
              Properties="Configuration=Debug;Platform=Any CPU"
              ContinueOnError="false" />

    <Message Importance="high" Text="Running dependency analysis..." />

    <PropertyGroup>
        <SkipHelpValue Condition=" '$(SkipHelp)' == 'true' ">-s</SkipHelpValue>
    </PropertyGroup>
    <Exec Command="$(MSBuildProjectDirectory)\src\Package\StaticAnalysis.exe -p $(MSBuildProjectDirectory)\src\Package\$(Configuration) -r $(MSBuildProjectDirectory)\src\Package $(SkipHelpValue) -m @(ModulesChanged)"
          Condition="'$(Scope)' != 'Stack'"/>

    <Exec Command="$(PackageDirectory)\StaticAnalysis.exe -p $(StackPackageFolder)\$(Configuration) -r $(StackPackageFolder)"
          Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"
          ContinueOnError="True"/>

    <OnError ExecuteTargets="StaticAnalysisErrorMessage"/>
  </Target>

  <Target Name="StaticAnalysisErrorMessage">
    <Error Text="StaticAnalysis has failed.  Please follow the instructions on this doc: https://github.com/Azure/azure-powershell/blob/preview/documentation/Debugging-StaticAnalysis-Errors.md"/>
  </Target>

  <Target Name="ChangeLogCheck">
    <Exec Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot;. $(LibraryToolsFolder)\CheckChangeLog.ps1 -FilesChanged '@(FilesChanged)' &quot;"
      ContinueOnError="false"
      Condition=" '$(Scope)' == 'All' or '$(Scope)' == 'Latest' "/>
    <OnError ExecuteTargets="ChangeLogErrorMessage"/>
  </Target>

  <Target Name="ChangeLogErrorMessage">
    <Error Text="Modified files were found with no update to their change log. Please add a snippet to the affected modules' change log."/>
  </Target>

  <!-- Publish all packages -->
  <Target Name="Publish">
    <Message Importance="high" Text="Publishing Cmdlets using $(Scope) scope"/>

    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\PublishModules.ps1 -IsNetCore:$$(NetCore) -BuildConfig $(Configuration) -Scope $(Scope) -ApiKey $(NuGetKey) -RepositoryLocation \&quot;$(NuGetPublishingSource)\&quot; &quot; -NugetExe $(NuGetCommand)"
          Condition="'$(Scope)' != 'Stack'"
          ContinueOnError="false"/>

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\PublishModules.ps1 -IsNetCore:$$(NetCore) -BuildConfig $(Configuration) -Scope Stack -ApiKey $(NuGetKey) -RepositoryLocation \&quot;$(NuGetPublishingSource)\&quot; &quot; -NugetExe $(NuGetCommand)"
          Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"
          ContinueOnError="false"/>

    <CallTarget Targets="BuildInstaller" Condition="'$(Scope)' =='All'" />
  </Target>
  
  <Target Name="BuildInstaller" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Latest'">
    <Exec Command="$(PowerShellCommandPrefix) &quot;. Register-PSRepository -Name MSIcreationrepository -SourceLocation $(PackageDirectory) -InstallationPolicy Trusted &quot; "/>
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryRoot)\setup\generate.ps1 -repository MSIcreationrepository &quot; "/>
    <Exec Command="$(PowerShellCommandPrefix) &quot;. Unregister-PSRepository -Name MSIcreationrepository &quot; "/>
    <CallTarget Targets="CodeSignInstaller" Condition=" '$(CodeSign)' == 'true'" />
  </Target>

  <PropertyGroup>
    <RunTestLive Condition="'$(RunTestLive)' == ''">false</RunTestLive>
    <XUnitIncludedTrait Condition="!$(RunTestLive)">AcceptanceType=CheckIn</XUnitIncludedTrait>
  </PropertyGroup>

  <!-- Note: all testing related target should go to 'AzurePowershell.test.targets' file except the one used by CI run -->
  <Import Project="$(MSBuildThisFileDirectory)AzurePowershell.Test.targets"/>

  <!-- Run checkin tests for each pull request -->
  <Target Name="Test" DependsOnTargets="BeforeRunTests">
    <Message Importance="high" Text="Running check in tests..." />

    <CallTarget Targets="BinScopeCheck" Condition="'$(OnPremiseBuild)'" />

    <CallTarget Targets="RunPoliCheck" Condition="'$(OnPremiseBuild)'" />

    <Exec Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot;$(MSBuildProjectDirectory)\tools\Modules\Run-UnitTests.ps1 -BuildConfig $(Configuration) -Scope $(Scope) &quot;"
          ContinueOnError="ErrorAndContinue"/>

    <!-- Azure / Stack -->
    <MakeDir Directories="$(TestOutputDirectory)" ContinueOnError="false" />
    <MakeDir Directories="$(TestOutputDirectory)/PassingTests" ContinueOnError="false" />
    <MakeDir Directories="$(TestOutputDirectory)/FailingTests" ContinueOnError="false" />
    <MSBuild  Projects="build.proj"
              Targets="InvokeXUnit"
              Properties="XUnitTests=%(XUnitTests.Identity);TestOutputDirectory=$(TestOutputDirectory)"
              Condition="'@(XunitTests->Count())' != '0'"
              ContinueOnError="false" />

    <CallTarget Targets="TestFailureCheck" />
  </Target>

  <Target Name="BinScopeCheck">
    <Exec Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot;$(MSBuildProjectDirectory)\tools\CheckBinScope.ps1 -BuildConfig $(Configuration) -CIToolsPath $(CIToolsPath) -Scope $(Scope) &quot;"
          ContinueOnError="False"/>
    <OnError ExecuteTargets="BinScopeErrorMessage"/>
  </Target>

  <Target Name="BinScopeErrorMessage">
    <Error Text="Binscope failed, please check the files in src/Package/BinScope"/>
  </Target>

  <Target Name="TestFailureCheck">
    <Exec Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot;if ((Get-ChildItem $(TestOutputDirectory)/FailingTests).Count -ge 1) { throw &quot;Failing tests, please check files in src/TestResults/FailingTests&quot; } &quot;"
          ContinueOnError="False"/>
    <OnError ExecuteTargets="TestFailureErrorMessage"/>
  </Target>

  <Target Name="TestFailureErrorMessage">
    <Error Text="Test failures occured, check the files in src/Publish/TestResults/FailingTests."/>
  </Target>

  <!-- Run Full switch with scenario tests -->
  <Target
    Name="FullWithScenarioTests"
    DependsOnTargets="Clean;Build;Test;RunOneSDKCIT" />

  <!-- Run live tests and record mocks -->
  <Target Name="RunLiveTests" DependsOnTargets="Clean;Build;LiveTestsFilter" />

  <Target Name="LiveTestsFilter" DependsOnTargets="Build;BeforeRunTests">
    <Message Importance="high" Text="Running live tests..." />
    <CallTarget Targets="LiveTests"/>
  </Target>

  <Target Name="RunPoliCheck">
    <Exec Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot;$(MSBuildProjectDirectory)\tools\CheckPoliCheck.ps1 -BuildConfig $(Configuration) -CIToolsPath $(CIToolsPath) &quot;"
          ContinueOnError="False"/>
    <OnError ExecuteTargets="PoliCheckErrorMessage"/>
  </Target>

  <Target Name="PoliCheckErrorMessage">
    <Error Text="PoliCheck failed with a Severity 1 issue, please check the report at in src/Package/PoliCheck-Scan.html"/>
  </Target>

</Project>
