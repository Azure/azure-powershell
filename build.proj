<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">


  <!--
    Available Targets:

    /t:Clean
      Removes temporary build outputs.

    /t:Build
      Builds assemblies.
`
    /t:Generate
      Generated help files.

    /t:Test
      Runs tests

    /t:Publish
      Creates local nuget packages and MSI

    /p:CodeSign=True
      Code sign binaries, mainly for official release. Default is false.

    /p:CodeSign=True;DelaySign=True
      Test the code sign workflow locally.

    /p:Scope
      'ServiceManagement': service management
      'AzureStorage': storage data plane cmdlets
      'Stack': Azure Stack cmdlets
      'Subfolder under src\ResourceManager': An individual cmdlet module
      By default, it builds everything but Stack

    /p:SkipHelp=True
      Skips help generation, mainly for local builds to save time.

    /p:SkipNugetRestore=True
      Skips nuget restore, mainly for local builds to save time when you have already restored nugets.

    /p:SkipDependencyAnalysis=True
      Skips build validation, mainly for local builds to save time.

    /p:QuickBuild=true
      Same thing as doing SkipHelp, SkipNugetRestore, and SkipDependencyAnalysis

  -->

  <!-- Define default build properties -->
  <PropertyGroup>
    <LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
    <LibrarySourceFolder>$(LibraryRoot)src</LibrarySourceFolder>
    <LibraryToolsFolder>$(LibraryRoot)tools</LibraryToolsFolder>
    <LocalFeedFolder>$(LibraryToolsFolder)\LocalFeed</LocalFeedFolder>
    <PublishDirectory>$(LibrarySourceFolder)\Publish</PublishDirectory>
    <Configuration Condition=" '$(Configuration)' != 'Release'">Debug</Configuration>
    <CodeSign Condition=" '$(CodeSign)' == '' ">false</CodeSign>
    <!--Set this true only if you want to test the code sign workflow locally-->
    <DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
    <SignedOutputRootDir>$(LibraryRoot)signed</SignedOutputRootDir>
    <BuildOutputDirectory>$(PublishDirectory)\Build</BuildOutputDirectory>
    <TestOutputDirectory>$(PublishDirectory)\TestResults</TestOutputDirectory>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
    <NuGetPublishingSource Condition=" '$(NuGetPublishingSource)' == '' ">$(LibrarySourceFolder)</NuGetPublishingSource>
    <Scope Condition="$(Scope) == ''" >All</Scope>
    <BuildTasksPath>$(LibraryToolsFolder)\BuildPackagesTask\Microsoft.Azure.Build.Tasks\bin\$(Configuration)</BuildTasksPath>
    <AzurePackageFolder>$(LibrarySourceFolder)\Package</AzurePackageFolder>
    <StackPackageFolder>$(LibrarySourceFolder)\Stack</StackPackageFolder>
    <NetCore Condition="'$(NetCore)' != 'true'">false</NetCore>
  </PropertyGroup>

  <PropertyGroup Condition="$(NetCore) == 'true' ">
    <Scope>AzureRM.NetCore</Scope>
  </PropertyGroup>

  <!-- Set Skips -->
  <PropertyGroup>
    <SkipHelp Condition =" '$(SkipHelp)' != 'true' ">false</SkipHelp>
    <SkipNugetRestore Condition="'$(SkipNugetRestore)' != 'true' ">false</SkipNugetRestore>
    <SkipDependencyAnalysis Condition="'$(SkipDependencyAnalysis)' != 'true' ">false</SkipDependencyAnalysis>
  </PropertyGroup>

  <!-- Skip everything that is not build/test/publish/etc -->
  <PropertyGroup Condition="'$(QuickBuild)' == 'true'">
    <SkipHelp>true</SkipHelp>
    <SkipNugetRestore>true</SkipNugetRestore>
    <SkipDependencyAnalysis>true</SkipDependencyAnalysis>
  </PropertyGroup>


  <ItemGroup>
    <CmdletSolutionsToBuild Include=".\src\ResourceManager\**\*.sln;"
                            Exclude=".\src\ResourceManager\Intune\*.sln"
                            Condition=" '$(Scope)' == 'All' or '$(Scope)' == 'Latest'"/>

    <CmdletSolutionsToBuild Include=".\src\ServiceManagement\ServiceManagement.sln"
                            Condition=" '$(Scope)' == 'ServiceManagement' or '$(Scope)' == 'All' or '$(Scope)' == 'Latest'"/>

    <CmdletSolutionsToBuild Include=".\src\Storage\Storage.sln"
                            Condition=" '$(Scope)' == 'AzureStorage' or '$(Scope)' == 'All' or '$(Scope)' == 'Latest'"/>

    <CmdletSolutionsToBuild Include=".\src\Stack.sln"
                            Condition=" '$(Scope)' == 'All' or '$(Scope)' == 'Stack'"/>

    <StaticAnalysis   Include=".\tools\StaticAnalysis\StaticAnalysis.sln" />
    <LocalBuildTasks  Include="$(LibraryToolsFolder)\BuildPackagesTask\Microsoft.Azure.Build.Tasks.sln" />
	  <LocalBuildTasks  Include="$(LibraryToolsFolder)\RepoTasks\RepoTasks.sln" />
  </ItemGroup>

  <!-- Tasks -->
  <UsingTask TaskName="ValidateStrongNameSignatureTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="FilterOutAutoRestLibraries" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="DebugTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="VerifyAuthenticodeSignatureTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="SmartTestingTask" AssemblyFile="$(BuildTasksPath)\Microsoft.Azure.Build.Tasks.dll" />
  <UsingTask TaskName="SetEnvVar" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
	  <ParameterGroup>
	    <EnvName ParameterType="System.String" Required="true" />
		  <EnvValue ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
		  <Using Namespace="System"/>
		  <Code Type="Fragment" Language="cs">
			<![CDATA[System.Environment.SetEnvironmentVariable(EnvName, EnvValue);]]>
		  </Code>
	  </Task>
  </UsingTask>  <!--
  CI build related
  -->
  <PropertyGroup>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists($(OnPremiseBuildTasks)) ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists($(OnPremiseBuildTasks)) ">false</OnPremiseBuild>
  </PropertyGroup>

  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CodeSigningTask" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CorporateValidation" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />

  <UsingTask
    AssemblyFile="$(MSBuildProjectDirectory)\packages\xunit.runner.msbuild.2.1.0\build\portable-net45+win8+wp8+wpa81\xunit.runner.msbuild.dll"
    TaskName="Xunit.Runner.MSBuild.xunit" />

  <!-- Clean the build in all configurations -->
  <Target Name="Clean">
    <Message  Importance="high" Text="Cleaning Cmdlets..." ContinueOnError="false" />

    <!-- Clean each project -->
    <MSBuild Projects="@(CmdletSolutionsToBuild)"
      Targets="Clean"
      Properties="Configuration=$(Configuration);Platform=Any CPU"
      ContinueOnError="false" />
  </Target>

  <PropertyGroup>
    <NuGetCommand>$(MSBuildProjectDirectory)\tools\NuGet.exe</NuGetCommand>
    <LibraryNugetPackageFolder>$(LibrarySourceFolder)\packages</LibraryNugetPackageFolder>
    <NuGetRestoreConfigFile>$(MSBuildProjectDirectory)\restore.config</NuGetRestoreConfigFile>
    <NuGetRestoreConfigSwitch>-ConfigFile &quot;$(NuGetRestoreConfigFile)&quot;</NuGetRestoreConfigSwitch>
    <NuGetRestorePackageSetting>-PackagesDirectory $(LibraryNugetPackageFolder)</NuGetRestorePackageSetting>
    <NuGetLocalBuildTaskPackages>-PackagesDirectory $(LibraryToolsFolder)\BuildPackagesTask\packages</NuGetLocalBuildTaskPackages>
    <NuGetRepoTasksPackages>-PackagesDirectory $(LibraryToolsFolder)\RepoTasks\packages</NuGetRepoTasksPackages>

    <PowerShellCommand Condition=" '$(PowerShellCommand)' == '' ">C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellCommand>
    <PowerShellCoreCommand Condition=" '$(PowerShellCoreCommand)' == '' ">pwsh</PowerShellCoreCommand>
    <!-- All PowerShell commands have this prefix  -->
    <PowerShellCommandPrefix>&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command</PowerShellCommandPrefix>
    <PowerShellCoreCommandPrefix>&quot;$(PowerShellCoreCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command</PowerShellCoreCommandPrefix>
  </PropertyGroup>

  <!--
  Force nuget package restore so that packages that include .targets files
  don't need to be checked into source control.
  -->
  <Target Name="RestoreNugetPackages" Condition="$(SkipNugetRestore) == 'false'">
    <Message Importance="high" Text="Restore Nuget packages..." />

    <Delete Files="$(NuGetRestoreConfigFile)" />
    <WriteLinesToFile
      File="$(NuGetRestoreConfigFile)"
      Lines="&lt;configuration&gt;&lt;/configuration&gt;"
      Overwrite="true"
      Encoding="Unicode"/>

    <Exec Command="$(NuGetCommand) sources add -Name LocalFeed -Source &quot;$(LocalFeedFolder)&quot; $(NuGetRestoreConfigSwitch)"/>
    <Exec Command="$(NuGetCommand) sources add -Name nugetRemote -Source &quot;https://api.nuget.org/v3/index.json&quot; $(NuGetRestoreConfigSwitch)"/>
    <!-- Restore packages -->
    <Exec Command="$(NuGetCommand) restore %(CmdletSolutionsToBuild.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
          ContinueOnError="false" />
    <!-- Restore packages for static analysis-->
    <Exec Command="$(NuGetCommand) restore %(StaticAnalysis.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
          ContinueOnError="false" />
    <!-- Restore packages for local build tasks-->
    <Exec Command="$(NuGetCommand) restore %(LocalBuildTasks.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetLocalBuildTaskPackages)"
            ContinueOnError="false" />
    <!-- Restore packages for repo tasks tasks-->
    <Exec Command="$(NuGetCommand) restore %(LocalBuildTasks.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRepoTasksPackages)"
            ContinueOnError="false" />
    <Exec Command="$(NuGetCommand) restore %(SetupSln.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
            ContinueOnError="false" />
    <!--Restore the xunit runner needed to run unit tests-->
    <Exec Command="$(NuGetCommand) restore $(MSBuildProjectDirectory)\packages.config -PackagesDirectory $(MSBuildProjectDirectory)\packages" />

    <Delete Files="$(NuGetRestoreConfigFile)" />
  </Target>



  <!-- Build cmdlets -->
  <Target Name="Build" DependsOnTargets="RestoreNugetPackages;BuildMsBuildTask">
    <Message Importance="high" Text="Building Cmdlets for scope $(Scope)..." />

    <MakeDir  Directories="$(AzurePackageFolder)"
              Condition="'$(Scope)' != 'Stack'" />
    <MakeDir  Directories="$(StackPackageFolder)"
              Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'" />

    <MSBuild  Projects="@(CmdletSolutionsToBuild)"
              Targets="Build"
              Properties="Configuration=$(Configuration);Platform=Any CPU"
              BuildInParallel="$(BuildInParallel)"
              ContinueOnError="false" />

    <Exec Command="$(PowerShellCommandPrefix) &quot;$ProgressPreference = 'SilentlyContinue';. $(LibraryToolsFolder)\GenerateHelp.ps1 -ValidateMarkdownHelp -GenerateMamlHelp -BuildConfig $(Configuration) &quot;"
          Condition="'$(SkipHelp)' == 'false'"
          ContinueOnError="false"/>

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\UpdateModules.ps1 -BuildConfig $(Configuration) -Scope $(Scope) &quot;"
          Condition="'$(CodeSign)' == 'false'"/>

    <Exec ContinueOnError="false"
          Command="$(PowerShellCommandPrefix) &quot; . $(LibraryToolsFolder)\NewHelpIndex.ps1 -OutputFile $(AzurePackageFolder)\index.json -BuildConfig $(Configuration) &quot;"
          Condition=" '$(SkipHelp)' == 'false' and ('$(Scope)' == 'all' or '$(Scope)' == 'Latest')"/>

    <!-- Copying modules to be signed -->

    <!-- AzureRM -->
    <Copy SourceFiles="$(LibraryToolsFolder)\AzureRM\AzureRM.psd1"
          DestinationFolder="$(AzurePackageFolder)\$(Configuration)"
          ContinueOnError="false"
          Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Latest' "/>
    <Copy SourceFiles="$(LibraryToolsFolder)\AzureRM\AzureRM.psm1"
          DestinationFolder="$(AzurePackageFolder)\$(Configuration)"
          ContinueOnError="false"
          Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Latest' "/>

    <!-- Stack Specific -->
    <Copy SourceFiles="$(LibrarySourceFolder)\StackAdmin\AzureRM\AzureRM.psd1"
          DestinationFolder="$(StackPackageFolder)\$(Configuration)"
          ContinueOnError="false"
          Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>
    <Copy SourceFiles="$(LibrarySourceFolder)\StackAdmin\AzureRM\AzureRM.psm1"
          DestinationFolder="$(StackPackageFolder)\$(Configuration)"
          ContinueOnError="false"
          Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>

    <Copy SourceFiles="$(LibrarySourceFolder)\StackAdmin\AzureStack\AzureStack.psd1"
          DestinationFolder="$(StackPackageFolder)\$(Configuration)"
          ContinueOnError="false"
          Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>
    <Copy SourceFiles="$(LibrarySourceFolder)\StackAdmin\AzureStack\AzureStack.psm1"
          DestinationFolder="$(StackPackageFolder)\$(Configuration)"
          ContinueOnError="false"
          Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>

    <CallTarget Targets="CodeSignBinaries" Condition=" '$(CodeSign)' == 'true' " />

    <!-- AzureRM -->
    <Copy SourceFiles="$(AzurePackageFolder)\$(Configuration)\AzureRM.psd1"
          DestinationFolder="$(LibraryToolsFolder)\AzureRM" Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Latest' "/>
    <Copy SourceFiles="$(AzurePackageFolder)\$(Configuration)\AzureRM.psm1"
          DestinationFolder="$(LibraryToolsFolder)\AzureRM" Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Latest' "/>

    <!-- Stack -->
    <Copy SourceFiles="$(StackPackageFolder)\$(Configuration)\AzureRM.psd1"
          DestinationFolder="$(LibrarySourceFolder)\StackAdmin\AzureRM" Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>
    <Copy SourceFiles="$(StackPackageFolder)\$(Configuration)\AzureRM.psm1"
          DestinationFolder="$(LibrarySourceFolder)\StackAdmin\AzureRM" Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>

    <Copy SourceFiles="$(StackPackageFolder)\$(Configuration)\AzureStack.psd1"
          DestinationFolder="$(LibrarySourceFolder)\StackAdmin\AzureStack" Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>
    <Copy SourceFiles="$(StackPackageFolder)\$(Configuration)\AzureStack.psm1"
          DestinationFolder="$(LibrarySourceFolder)\StackAdmin\AzureStack" Condition= " '$(Scope)' == 'All' or '$(Scope)' == 'Stack' "/>

    <Message Importance="high" Text="Running Static Analyser" />
    <CallTarget targets="DependencyAnalysis" ContinueOnError="ErrorAndContinue" />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\CheckAssemblies.ps1 -BuildConfig $(Configuration) &quot;" />
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\CleanupBuild.ps1 -BuildConfig $(Configuration) &quot;" />
  </Target>



  <!--
    Build .Net Core Cmdlets
    Fully self contained
  -->
  <Target Name="BuildNetCore">
    <Message Importance="high" Text="Building Cmdlets..." />

    <!-- Build and create package content -->
    <Exec Command="dotnet --version"/>
    <Exec Command="dotnet publish Azure.PowerShell.Netcore.sln -c $(Configuration)"/>

    <!-- Delete powershell runtime files -->
    <ItemGroup>
      <RedundantDlls Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\Microsoft.Powershell.*.dll" />
      <RedundantDlls Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\System*.dll"
                     Exclude="$(AzurePackageFolder)\**\netcoreapp2.0\publish\System.Security.Cryptography.ProtectedData.dll" />
      <RedundantDlls Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\Microsoft.VisualBasic.dll" />
      <RedundantDlls Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\Microsoft.CSharp.dll" />
      <RedundantDlls Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\Microsoft.CodeAnalysis.dll" />
      <RedundantDlls Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\Microsoft.CodeAnalysis.CSharp.dll" />
    </ItemGroup>

    <Delete Files="@(RedundantDlls->'%(FullPath)')"/>

    <!-- Copy content of the publish folder one folders up -->
    <ItemGroup>
      <PackageContent Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\*.*" />
      <SourceFile Include="@(PackageContent)">
        <DestinationFolder>$([System.IO.Path]::Combine('%(RelativeDir)', '..', '%(FileName)%(Extension)'))</DestinationFolder>
      </SourceFile>
    </ItemGroup>

    <Copy SourceFiles="@(SourceFile->'%(FullPath)')" DestinationFiles="@(SourceFile->'%(DestinationFolder)')" SkipUnchangedFiles="true"/>

    <!-- Move PSD1 files one folders up -->
    <ItemGroup>
      <psdFiles Include="$(AzurePackageFolder)\**\netcoreapp2.0\*.psd1" />
      <psdFilesTarget Include="@(psdFiles)">
        <DestinationFolder>$([System.IO.Path]::Combine('%(RelativeDir)', '..', '%(FileName)%(Extension)'))</DestinationFolder>
      </psdFilesTarget>
    </ItemGroup>

    <Move SourceFiles="@(psdFilesTarget->'%(FullPath)')" DestinationFiles="@(psdFilesTarget->'%(DestinationFolder)')"/>

    <!-- Delete build artifacts -->
    <ItemGroup>
      <GetAllFiles Include="$(AzurePackageFolder)\**\netcoreapp2.0\publish\*.*" />
      <Artifacts Include="@(GetAllFiles->'%(RootDir)%(Directory)'->Distinct())" />
    </ItemGroup>

    <RemoveDir  Directories="%(Artifacts.Identity)"
                ContinueOnError="true" />

    <ItemGroup>
      <ExtraPsdFiles Include="$(AzurePackageFolder)\$(Configuration)\ResourceManager\AzureRM.Resources.Netcore\AzureRM.Tags.Netcore.psd1" />
      <ExtraPsdFiles Include="$(AzurePackageFolder)\$(Configuration)\ResourceManager\AzureRM.Websites.Netcore\AzureRM.Resources.Netcore.psd1" />
      <ExtraPsdFiles Include="$(AzurePackageFolder)\$(Configuration)\ResourceManager\AzureRM.Websites.Netcore\AzureRM.Tags.Netcore.psd1" />
      <ExtraPsdFiles Include="$(AzurePackageFolder)\$(Configuration)\ResourceManager\AzureRM.Network.Netcore\AzureRM.Resources.Netcore.psd1" />
      <ExtraPsdFiles Include="$(AzurePackageFolder)\$(Configuration)\ResourceManager\AzureRM.Network.Netcore\AzureRM.Tags.Netcore.psd1" />
    </ItemGroup>

    <Delete Files="@(ExtraPsdFiles->'%(FullPath)')"/>

    <!-- Update module manifests. -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)\UpdateModules.ps1 -BuildConfig $(Configuration) -Scope AzureRM.Netcore &quot; "
          Condition="'$(Scope)' == 'AzureRM.Netcore'"
          ContinueOnError="false" />

    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;$ProgressPreference = 'SilentlyContinue';. $(LibraryToolsFolder)\GenerateHelp.ps1 -ValidateMarkdownHelp -GenerateMamlHelp -BuildConfig $(Configuration) &quot;"
          Condition="'$(SkipHelp)' == 'false'"
          ContinueOnError="false"/>

    <!-- Cleanup extraneous files. -->
    <Exec Command="$(PowerShellCoreCommandPrefix) &quot;. $(LibraryToolsFolder)\CleanupBuild.ps1 -BuildConfig $(Configuration) &quot;" />

    <CallTarget Targets="CodeSignBinaries" Condition=" '$(CodeSign)' == 'true' " />
  </Target>


  <!-- Do everything possible except Publish -->
  <Target Name="Full" DependsOnTargets="Clean;Build;Test" />


  <Target Name="BuildMsBuildTask" DependsOnTargets="RestoreNugetPackages">
    <MSBuild Projects="@(LocalBuildTasks)"
             Targets="Build"
             Properties="Configuration=$(Configuration);Platform=Any CPU" />
  </Target>

  <Target Name="CodeSignBinaries" DependsOnTargets="RestoreNugetPackages;BuildMsBuildTask">
    <PropertyGroup>
      <!--public token associated with MSSharedLibKey.snk-->
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
    </PropertyGroup>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath"/>
    </GetFrameworkSdkPath>

    <Copy SourceFiles="$(LibraryRoot)tools\AzureRM.Netcore\AzureRM.Netcore.psd1"
          DestinationFolder="$(AzurePackageFolder)\$(Configuration)" Condition= " '$(Scope)' == 'AzureRM.Netcore' "/>

    <!-- Azure -->
    <ItemGroup Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Latest'">
      <DelaySignedAssembliesToSign Include="$(AzurePackageFolder)\$(Configuration)\**\Microsoft*Azure*Commands*.dll" />
      <DelaySignedAssembliesToSign Include="$(AzurePackageFolder)\$(Configuration)\**\Microsoft.Azure.Common.Extensions.dll" />
      <DelaySignedAssembliesToSign Include="$(AzurePackageFolder)\$(Configuration)\**\Microsoft.Azure.Management.Sql.Legacy.dll" />
    </ItemGroup>

    <!-- Stack -->
    <ItemGroup Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'">
      <DelaySignedAssembliesToSign Include="$(StackPackageFolder)\$(Configuration)\**\Microsoft*Azure*Commands*.dll" />
      <DelaySignedAssembliesToSign Include="$(StackPackageFolder)\$(Configuration)\**\Microsoft.Azure.Common.Extensions.dll" />
      <DelaySignedAssembliesToSign Include="$(StackPackageFolder)\$(Configuration)\**\Microsoft.Azure.Management.Sql.Legacy.dll" />
   </ItemGroup>

    <Message Importance="high" Text="$(AzurePackageFolder)\$(Configuration) does not contains any files to sign. Code sign will skip."
             Condition="'@(DelaySignedAssembliesToSign)' == ''" />

    <ValidateStrongNameSignatureTask
      WindowsSdkPath="$(WindowsSdkPath)"
      Assembly="%(DelaySignedAssembliesToSign.Identity)"
      ExpectedTokenSignature="$(StrongNameToken)"
      ExpectedDelaySigned="true"
      ContinueOnError="false"
      Condition="'@(DelaySignedAssembliesToSign)' != ''"/>

    <CodeSigningTask
      Description="Microsoft Azure PowerShell"
      Keywords="Microsoft Azure PowerShell"
      UnsignedFiles="@(DelaySignedAssembliesToSign)"
      DestinationPath="$(LibrarySourceFolder)"
      BasePath="$(LibrarySourceFolder)"
      Certificates="72, 401"
      SigningLogPath="$(LibraryRoot)\signing.log"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign) and '@(DelaySignedAssembliesToSign)' != ''"/>

    <ValidateStrongNameSignatureTask
        WindowsSdkPath="$(WindowsSdkPath)"
        Assembly="%(DelaySignedAssembliesToSign.Identity)"
        ExpectedTokenSignature="$(StrongNameToken)"
        ExpectedDelaySigned="false"
        ContinueOnError="false"
        Condition="!$(DelaySign) and '@(DelaySignedAssembliesToSign)' != ''"/>


    <!-- Copying shortcut to be signed -->
    <Copy SourceFiles="$(LibraryRoot)tools\AzureRM\AzureRM.psm1"
          DestinationFolder="$(AzurePackageFolder)\$(Configuration)" Condition= "'$(Scope)' == 'All' or '$(Scope)' == 'Latest'"/>
    <Copy SourceFiles="$(LibrarySourceFolder)\StackAdmin\AzureRM\AzureRM.psm1"
          DestinationFolder="$(StackPackageFolder)\$(Configuration)" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"/>
    <Copy SourceFiles="$(LibrarySourceFolder)\StackAdmin\AzureStack\AzureStack.psm1"
          DestinationFolder="$(StackPackageFolder)\$(Configuration)" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"/>


    <!-- Azure -->
    <ItemGroup Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Latest'">
      <ScriptsToSign Include="$(AzurePackageFolder)\$(Configuration)\**\*.ps1"/>
      <ScriptsToSign Include="$(AzurePackageFolder)\$(Configuration)\**\*.psm1"/>
      <ScriptsToSign Include="$(AzurePackageFolder)\$(Configuration)\**\*.ps1xml"/>
      <ScriptsToSign Include="$(AzurePackageFolder)\$(Configuration)\**\*.js"/>
    </ItemGroup>

    <!-- Stack -->
    <ItemGroup Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'">
      <ScriptsToSign Include="$(StackPackageFolder)\$(Configuration)\**\*.ps1"/>
      <ScriptsToSign Include="$(StackPackageFolder)\$(Configuration)\**\*.psm1"/>
      <ScriptsToSign Include="$(StackPackageFolder)\$(Configuration)\**\*.ps1xml"/>
      <ScriptsToSign Include="$(StackPackageFolder)\$(Configuration)\**\*.js"/>
    </ItemGroup>

    <CodeSigningTask
      Description="Microsoft Azure PowerShell"
      Keywords="Microsoft Azure PowerShell"
      UnsignedFiles="@(ScriptsToSign)"
      DestinationPath="$(LibrarySourceFolder)"
      BasePath="$(LibrarySourceFolder)"
      Certificates="400"
      SigningLogPath="$(LibraryRoot)\signing-scripts.log"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign) and '@(ScriptsToSign)' != ''"/>

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\CheckSignature.ps1 -CustomPath $(AzurePackageFolder)\$(Configuration) &quot;"
          Condition="'$(Scope)' != 'Stack'"
          ContinueOnError="ErrorAndContinue" />

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\CheckSignature.ps1 -CustomPath $(StackPackageFolder)\$(Configuration) &quot;"
          Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"
          ContinueOnError="ErrorAndContinue" />

    <!-- Copying signed shortcut back -->
    <Copy SourceFiles="$(AzurePackageFolder)\$(Configuration)\AzureRM.Netcore.psd1"
          DestinationFolder="$(LibraryRoot)tools\AzureRM.NetCore" Condition= " '$(Scope)' == 'AzureRM.Netcore' "/>
  </Target>



  <Target Name="BuildInstaller" Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Latest'">
    <Exec Command="$(PowerShellCommandPrefix) &quot;. Register-PSRepository -Name MSIcreationrepository -SourceLocation $(AzurePackageFolder) -InstallationPolicy Trusted &quot; "/>
    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryRoot)\setup\generate.ps1 -repository MSIcreationrepository &quot; "/>
    <Exec Command="$(PowerShellCommandPrefix) &quot;. Unregister-PSRepository -Name MSIcreationrepository &quot; "/>
    <CallTarget Targets="CodeSignInstaller" Condition=" '$(CodeSign)' == 'true'" />
  </Target>



  <Target Name="CodeSignInstaller">
    <PropertyGroup>
      <!--public token associated with MSSharedLibKey.snk-->
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
    </PropertyGroup>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath"/>
    </GetFrameworkSdkPath>

    <ItemGroup>
      <InstallersToSign Include="$(LibraryRoot)\setup\*.msi" />
    </ItemGroup>

    <Message Importance="high" Text="$(LibraryRoot)\setup does not contain any installers to sign. Code sign will skip."
             Condition="'@(InstallersToSign)' == ''" />

    <CodeSigningTask
      Description="Microsoft Azure PowerShell"
      Keywords="Microsoft Azure PowerShell"
      UnsignedFiles="@(InstallersToSign)"
      DestinationPath="$(SignedOutputRootDir)"
      SigningLogPath="$(LibraryRoot)\msi-signing.log"
      Certificates="402"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign) and '@(InstallersToSign)' != ''"/>

    <!--If we are testing locally then we copy the binaries and do not submit to the code sign server-->
    <Copy SourceFiles="@(InstallersToSign)" DestinationFolder="signed" Condition="$(DelaySign)" />
    <SetEnvVar EnvName="SignedMsiDir" EnvValue="$(SignedOutputRootDir)" />
  </Target>



  <!-- Run Validation -->
  <Target Name="DependencyAnalysis"
          Condition="'$(SkipDependencyAnalysis)' == 'false'">

    <MSBuild  Projects="@(StaticAnalysis)"
              Targets="Build"
              Properties="Configuration=Debug;Platform=Any CPU"
              ContinueOnError="false" />

    <Message Importance="high" Text="Running dependency analysis..." />

    <Exec Command="$(AzurePackageFolder)\StaticAnalysis.exe $(MSBuildProjectDirectory)\src\Package\$(Configuration) $(AzurePackageFolder) true $(SkipHelp)"
          Condition="'$(Scope)' != 'Stack'"
          ContinueOnError="True"/>

    <Exec Command="$(AzurePackageFolder)\StaticAnalysis.exe $(StackPackageFolder)\$(Configuration) $(StackPackageFolder)"
          Condition="'$(Scope)' == 'All' or '$(Scope)' == 'Stack'"
          ContinueOnError="True"/>

    <OnError ExecuteTargets="StaticAnalysisErrorMessage"/>
  </Target>


 <Target Name="StaticAnalysisErrorMessage">
    <Error Text="StaticAnalysis has failed.  Please follow the instructions on this doc: https://github.com/Azure/azure-powershell/blob/preview/documentation/Debugging-StaticAnalysis-Errors.md"/>
  </Target>


  <!-- Publish all packages -->
  <Target Name="Publish">
    <Message Importance="high" Text="Publishing Cmdlets using $(Scope) scope"/>

    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\PublishModules.ps1 -IsNetCore:$$(NetCore) -BuildConfig $(Configuration) -Scope $(Scope) -ApiKey $(NuGetKey) -RepositoryLocation \&quot;$(NuGetPublishingSource)\&quot; &quot; -NugetExe $(NuGetCommand)"
          Condition="'$(Scope)' !='Stack'"
          ContinueOnError="false"/>

    <Exec Command="$(PowerShellCommandPrefix) &quot;. $(LibraryToolsFolder)\PublishModules.ps1 -IsNetCore:$$(NetCore) -BuildConfig $(Configuration) -Scope Stack -ApiKey $(NuGetKey) -RepositoryLocation \&quot;$(NuGetPublishingSource)\&quot; &quot; -NugetExe $(NuGetCommand)"
          Condition="'$(Scope)' =='All' or '$(Scope)' =='Stack'"
          ContinueOnError="true"/>

    <CallTarget Targets="BuildInstaller" />
 </Target>

  <PropertyGroup>
    <RunTestLive Condition="'$(RunTestLive)' == ''">false</RunTestLive>
    <XUnitIncludedTrait Condition="!$(RunTestLive)">AcceptanceType=CheckIn</XUnitIncludedTrait>
  </PropertyGroup>

  <!-- Note: all testing related target should go to 'AzurePowershell.test.targets' file except the one used by CI run -->
  <Import Project="$(MSBuildThisFileDirectory)AzurePowershell.Test.targets"/>

  <!-- Run checkin tests for each pull request -->
  <Target Name="Test" DependsOnTargets="BeforeRunTests">
    <Message Importance="high" Text="Running check in tests..." />

    <Exec Command="&quot;$(PowerShellCommand)&quot; -NonInteractive -NoLogo -NoProfile -Command &quot;$(MSBuildProjectDirectory)\tools\Modules\Run-UnitTests.ps1 -BuildConfig $(Configuration) -Scope $(Scope) &quot;"
          ContinueOnError="ErrorAndContinue"/>

    <!-- Azure / Stack -->
    <CallTarget Targets="InvokeXUnit" Condition="false"/>
  </Target>

  <!-- Run Full switch with scenario tests -->
  <Target
    Name="FullWithScenarioTests"
    DependsOnTargets="Clean;Build;Test;RunOneSDKCIT" />

  <!-- Run live tests and record mocks -->
  <Target
  Name="RunLiveTests"
  DependsOnTargets="Clean;Build;LiveTestsFilter" />


  <Target Name="LiveTestsFilter" DependsOnTargets="Build;BeforeRunTests">
    <Message Importance="high" Text="Running live tests..." />
    <CallTarget Targets="LiveTests"/>
  </Target>

</Project>
