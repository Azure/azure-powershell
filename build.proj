<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  <!--
  Available Targets:

  /t:Clean
    Removes temporary build outputs.
    
  /t:Build
    Builds assemblies.

  /t:Test
    Runs tests

  /p:CodeSign=True
    Code sign binaries, mainly for official release. Default is false.

  /p:CodeSign=True;DelaySign=True
    Test the code sign workflow locally. 

  /p:Scope
    'ServiceManagement': service management
    'AzureStorage': storage data plane cmdlets
    'Subfolder under src\ResourceManager': An individual cmdlet module
    By default, it builds all
  -->  

  <!-- Define build properties -->
  <PropertyGroup>
    <LibraryRoot>$(MSBuildThisFileDirectory)</LibraryRoot>
    <LibrarySourceFolder>$(LibraryRoot)src</LibrarySourceFolder>
    <LibraryToolsFolder>$(LibraryRoot)tools</LibraryToolsFolder>
    <PublishDirectory>$(LibrarySourceFolder)\Publish</PublishDirectory>
    <PackageDirectory>$(LibrarySourceFolder)\Package</PackageDirectory>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <CodeSign Condition=" '$(CodeSign)' == '' ">false</CodeSign>
    <!--Set this true only if you want to test the code sign workflow locally-->
    <DelaySign Condition =" '$(DelaySign)' == '' ">false</DelaySign>
    <BuildOutputDirectory>$(PublishDirectory)\Build</BuildOutputDirectory>
    <SetupOutputDirectory>$(PublishDirectory)\Setup</SetupOutputDirectory>
    <TestOutputDirectory>$(PublishDirectory)\TestResults</TestOutputDirectory>
    <BuildInParallel Condition="'$(BuildInParallel)' == ''">true</BuildInParallel>
    <NuGetPublishingSource Condition=" '$(NuGetPublishingSource)' == '' ">http://psget/PSGallery/api/v2/</NuGetPublishingSource>
    <Scope Condition=" $(Scope) == '' " >all</Scope>
  </PropertyGroup>
  <ItemGroup>
    <CmdletSolutionsToBuild Include=".\src\Storage\Storage.sln;.\src\ResourceManager\**\*.sln;.\src\ServiceManagement\ServiceManagement.sln"
                            Exclude=".\src\ResourceManager\Intune\*.sln"
                            Condition=" '$(Scope)' == 'all' "/>
    <CmdletSolutionsToBuild Include=".\src\ResourceManager\$(Scope)\*.sln" 
                            Condition=" '$(Scope)' != 'all' and '$(Scope)' != 'ServiceManagement' and '$(Scope)' != 'AzureStorage' "/>
    <CmdletSolutionsToBuild Include=".\src\ServiceManagement\ServiceManagement.sln"
                            Condition=" '$(Scope)' == 'ServiceManagement'"/>
    <CmdletSolutionsToBuild Include=".\src\Storage\Storage.sln"
                            Condition=" '$(Scope)' == 'AzureStorage' "/>                            
    <SetupSln Include=".\setup\azurepowershell.sln" />
    <StaticAnalysis Include=".\tools\StaticAnalysis\StaticAnalysis.sln" />
  </ItemGroup>
  
  <!-- Tasks -->
  <UsingTask TaskName="ValidateStrongNameSignatureTask" AssemblyFile="$(LibraryToolsFolder)\Microsoft.Azure.Build.Tasks.dll"  />
  <UsingTask TaskName="FilterOutAutoRestLibraries" AssemblyFile="$(LibraryToolsFolder)\Microsoft.Azure.Build.Tasks.dll"  />
  <UsingTask TaskName="DebugTask" AssemblyFile="$(LibraryToolsFolder)\Microsoft.Azure.Build.Tasks.dll"  />
  <UsingTask TaskName="VerifyAuthenticodeSignatureTask" AssemblyFile="$(LibraryToolsFolder)\Microsoft.Azure.Build.Tasks.dll"  />
  
  <!--
  CI build related
  -->
  <PropertyGroup>
    <!--OnPremiseBuildTasks is not a good name, but CI server is using that, will update across soon-->
    <CIToolsPath>$(OnPremiseBuildTasks)</CIToolsPath>
    <OnPremiseBuild Condition=" Exists($(OnPremiseBuildTasks)) ">true</OnPremiseBuild>
    <OnPremiseBuild Condition=" ! Exists($(OnPremiseBuildTasks)) ">false</OnPremiseBuild>
  </PropertyGroup>
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CodeSigningTask" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <UsingTask Condition=" $(OnPremiseBuild) " TaskName="CorporateValidation" AssemblyFile="$(CIToolsPath)\Microsoft.WindowsAzure.Tools.Build.Tasks.OnPremise.dll" />
  <Import Condition=" $(OnPremiseBuild) " Project="$(CIToolsPath)\Microsoft.WindowsAzure.Build.OnPremise.msbuild" />

  <UsingTask 
    AssemblyFile="$(MSBuildProjectDirectory)\packages\xunit.runner.msbuild.2.1.0\build\portable-net45+win8+wp8+wpa81\xunit.runner.msbuild.dll"
    TaskName="Xunit.Runner.MSBuild.xunit" />
  
  <!-- Clean the build in all configurations -->
  <Target Name="Clean">
    <Message Importance="high" Text="Cleaning Cmdlets..." ContinueOnError="false" />
    <MSBuild
      Projects="@(CmdletSolutionsToBuild)"
      Targets="Clean"
      Properties="Configuration=$(Configuration);Platform=Any CPU"
      ContinueOnError="false" />
    
    <!-- Delete the publish files -->
    <Message Importance="high" Text="Cleaning publish files..." ContinueOnError="false" />
    <ItemGroup>
      <PublishFiles Include="$(PublishDirectory)\**\*.*" />
    </ItemGroup>
    <Delete
      Files="@(PublishFiles)"
      ContinueOnError="false" />
    <RemoveDir
      Directories="$(PublishDirectory)"
      ContinueOnError="false" />

    <!-- Delete the package files -->
    <Message Importance="high" Text="Cleaning package files..." ContinueOnError="false" />
    <ItemGroup>
      <PackageFiles Include="$(PackageDirectory)\**\*.*" />
    </ItemGroup>
    <Delete
      Files="@(PackageFiles)"
      ContinueOnError="false" />
    <RemoveDir
      Directories="$(PackageDirectory)"
      ContinueOnError="false" />
  </Target>
  
  <PropertyGroup>
    <NuGetCommand>$(MSBuildProjectDirectory)\tools\NuGet.exe</NuGetCommand>
    <LibraryNugetPackageFolder>$(LibrarySourceFolder)\packages</LibraryNugetPackageFolder>
    <NuGetRestoreConfigFile>$(MSBuildProjectDirectory)\restore.config</NuGetRestoreConfigFile>
    <NuGetRestoreConfigSwitch>-ConfigFile &quot;$(NuGetRestoreConfigFile)&quot;</NuGetRestoreConfigSwitch>
    <NuGetRestorePackageSetting>-PackagesDirectory $(LibraryNugetPackageFolder)</NuGetRestorePackageSetting>

    <PowerShellCommand>C:\Windows\System32\WindowsPowerShell\v1.0\powershell.exe</PowerShellCommand>
  </PropertyGroup>
  
  <!--
  Force nuget package restore so that packages that include .targets files
  don't need to be checked into source control.
  -->
  <Target Name="RestoreNugetPackages">
    <!-- Delete NuGet cache-->
    <!--<ItemGroup>
      <NuGetCache Include="$(LOCALAPPDATA)\NuGet\Cache\*.nupkg"/>
    </ItemGroup>
    <Delete Files="@(NuGetCache)" />-->
    
    <Delete Files="$(NuGetRestoreConfigFile)" />
    <WriteLinesToFile
      File="$(NuGetRestoreConfigFile)"
      Lines="&lt;configuration&gt;&lt;/configuration&gt;"
      Overwrite="true"
      Encoding="Unicode"/>

    <Exec Command="$(NuGetCommand) sources add -Name LocalFeed -Source &quot;$(MSBuildProjectDirectory)\tools\LocalFeed&quot; $(NuGetRestoreConfigSwitch)"/>
    <Exec Command="$(NuGetCommand) sources add -Name nugetRemote -Source &quot;https://api.nuget.org/v3/index.json&quot; $(NuGetRestoreConfigSwitch)"/> 
    <!-- Restore packages -->
    <Exec Command="$(NuGetCommand) restore %(CmdletSolutionsToBuild.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)" 
          ContinueOnError="false" />
    <!-- Restore packages for static analysis-->
    <Exec Command="$(NuGetCommand) restore %(StaticAnalysis.FullPath) $(NuGetRestoreConfigSwitch) $(NuGetRestorePackageSetting)"
          ContinueOnError="false" />

    <!--Restore the xunit runner needed to run unit tests-->
    <Exec Command="$(NuGetCommand) restore $(MSBuildProjectDirectory)\packages.config -PackagesDirectory $(MSBuildProjectDirectory)\packages" />
    
    <Delete Files="$(NuGetRestoreConfigFile)" />
  </Target>

  <!-- Build all flavors of the Cmdlets -->
  <Target Name="Build" DependsOnTargets="RestoreNugetPackages;BuildMsBuildTask">
    <Message Importance="high" Text="Building Cmdlets..." />
    <MSBuild
      Projects="@(CmdletSolutionsToBuild)"
      Targets="Build"
      Properties="Configuration=$(Configuration);Platform=Any CPU"
      BuildInParallel="$(BuildInParallel)" 
      ContinueOnError="false" />
    
    <CallTarget Targets="CodeSignBinaries" Condition=" '$(CodeSign)' == 'true' " />
    
    <MSBuild
      Projects="@(SetupSln)"
      Targets="Build"
      Properties="Configuration=$(Configuration);Platform=Any CPU"
      ContinueOnError="false" 
      Condition=" '$(Scope)' == 'all' "/>

    <MSBuild
      Projects="@(StaticAnalysis)"
      Targets="Build"
      Properties="Configuration=Debug;Platform=Any CPU"
      ContinueOnError="false" />

    <CallTarget Targets="DependencyAnalysis" />
    
    <CallTarget Targets="CodeSignInstaller" 
                Condition=" '$(CodeSign)' == 'true' and '$(Scope)' == 'all'" />    
  </Target>
  
  <!-- Do everything possible -->
  <Target
    Name="Full"
    DependsOnTargets="Clean;Build;Test" />
    
  <Target Name="BuildMsBuildTask" DependsOnTargets="RestoreNugetPackages">
    <MSBuild Projects="$(LibraryToolsFolder)\BuildPackagesTask\Microsoft.Azure.Build.Tasks.csproj"
             Targets="Build" Properties="Configuration=Debug;Platform=AnyCPU" />
  </Target>
  
  <Target Name="CodeSignBinaries">
    <PropertyGroup>
      <!--public token associated with MSSharedLibKey.snk-->
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
    </PropertyGroup>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath"/>
    </GetFrameworkSdkPath>
    <Exec Command="$(PowerShellCommand) -NonInteractive -NoLogo -NoProfile -Command &quot;. $(LibraryToolsFolder)\UpdateModules.ps1 $(Configuration) $(Scope) &quot;"/>
    <!-- Copying shortcut to be signed -->
    <Copy SourceFiles="$(LibraryRoot)tools\AzureRM\AzureRM.psd1" 
      DestinationFolder="$(LibrarySourceFolder)\Package\$(Configuration)" />
    <Copy SourceFiles="$(LibraryRoot)tools\AzureRM\AzureRM.psm1" 
      DestinationFolder="$(LibrarySourceFolder)\Package\$(Configuration)" />
    
    <ItemGroup>
      <DelaySignedAssembliesToSign Include="$(LibrarySourceFolder)\Package\$(Configuration)\**\Microsoft*Azure*Commands*.dll" />
      <DelaySignedAssembliesToSign Include="$(LibrarySourceFolder)\Package\$(Configuration)\**\Microsoft.Azure.Common.Extensions.dll" />
      <ScriptsToSign Include="$(LibrarySourceFolder)\Package\$(Configuration)\**\*.ps1" />
      <ScriptsToSign Include="$(LibrarySourceFolder)\Package\$(Configuration)\**\*.psm1" />
      <ScriptsToSign Include="$(LibrarySourceFolder)\Package\$(Configuration)\**\*.ps1xml" />
    </ItemGroup>
    
    <Message Importance="high" Text="$(LibrarySourceFolder)\Package\$(Configuration) does not contains any files to sign. Code sign will skip." 
             Condition="'@(DelaySignedAssembliesToSign)' == ''" />

    <ValidateStrongNameSignatureTask
      WindowsSdkPath="$(WindowsSdkPath)"
      Assembly="%(DelaySignedAssembliesToSign.Identity)"
      ExpectedTokenSignature="$(StrongNameToken)"
      ExpectedDelaySigned="true"
      ContinueOnError="false" 
      Condition="'@(DelaySignedAssembliesToSign)' != ''"/>

    <CodeSigningTask
      Description="Microsoft Azure PowerShell"
      Keywords="Microsoft Azure PowerShell"
      UnsignedFiles="@(DelaySignedAssembliesToSign)"
      DestinationPath="$(LibrarySourceFolder)\Package\$(Configuration)"
      BasePath="$(LibrarySourceFolder)\Package\$(Configuration)"
      Certificates="72, 401"
      SigningLogPath="$(LibraryRoot)\signing.log"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign) and '@(DelaySignedAssembliesToSign)' != ''"/>
      
    <CodeSigningTask
      Description="Microsoft Azure PowerShell"
      Keywords="Microsoft Azure PowerShell"
      UnsignedFiles="@(ScriptsToSign)"
      DestinationPath="$(LibrarySourceFolder)\Package\$(Configuration)"
      BasePath="$(LibrarySourceFolder)\Package\$(Configuration)"
      Certificates="402"
      SigningLogPath="$(LibraryRoot)\signing-scripts.log"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign) and '@(ScriptsToSign)' != ''"/> 

    <ValidateStrongNameSignatureTask
        WindowsSdkPath="$(WindowsSdkPath)"
        Assembly="%(DelaySignedAssembliesToSign.Identity)"
        ExpectedTokenSignature="$(StrongNameToken)"
        ExpectedDelaySigned="false"
        ContinueOnError="false" 
        Condition="!$(DelaySign) and '@(DelaySignedAssembliesToSign)' != ''"/>
		
	<VerifyAuthenticodeSignatureTask ProbingDirectory="$(PackageDirectory)\$(Configuration)"
									FileFilterPattern="microsoft.*.dll;system.*.dll;*.ps1;*.psm1">
      <Output TaskParameter="AuthCodeSignTaskErrorsDetected" PropertyName="AuthTaskFailed" />
    </VerifyAuthenticodeSignatureTask>
	
    <Exec Command="$(PowerShellCommand) -NonInteractive -NoLogo -NoProfile -Command &quot;. $(LibraryToolsFolder)\CheckStrongNameSignature.ps1 &quot;"/>

    <!-- Copying signed shortcut back -->
    <Copy SourceFiles="$(LibrarySourceFolder)\Package\$(Configuration)\AzureRM.psd1" 
      DestinationFolder="$(LibraryRoot)tools\AzureRM" />
    <Copy SourceFiles="$(LibrarySourceFolder)\Package\$(Configuration)\AzureRM.psm1" 
      DestinationFolder="$(LibraryRoot)tools\AzureRM" />
  </Target>
  
  <Target Name="CodeSignInstaller">
    <PropertyGroup>
      <!--public token associated with MSSharedLibKey.snk-->
      <StrongNameToken Condition=" '$(StrongNameToken)' == '' ">31bf3856ad364e35</StrongNameToken>
    </PropertyGroup>
    <GetFrameworkSdkPath>
      <Output TaskParameter="Path" PropertyName="WindowsSdkPath"/>
    </GetFrameworkSdkPath>

    <ItemGroup>
      <InstallersToSign Include="$(LibraryRoot)\setup*\build\**\*.msi" />
    </ItemGroup>
    
    <Message Importance="high" Text="$(LibraryRoot)\setup does not contains any installers to sign. Code sign will skip." 
             Condition="'@(InstallersToSign)' == ''" />

    <CodeSigningTask
      Description="Microsoft Azure PowerShell"
      Keywords="Microsoft Azure PowerShell"
      UnsignedFiles="@(InstallersToSign)"
      DestinationPath="$(LibraryRoot)\signed"
      SigningLogPath="$(LibraryRoot)\msi-signing.log"
      Certificates="402"
      ToolsPath="$(CIToolsPath)"
      Condition="!$(DelaySign) and '@(InstallersToSign)' != ''"/>  
         
    <!--If we are testing locally then we copy the binaries and do not submit to the code sign server-->
    <Copy SourceFiles="@(InstallersToSign)" DestinationFolder="signed" Condition="$(DelaySign)" />
  </Target>
  
  <!-- Run Dependecy Analyzer -->
  <Target Name="DependencyAnalysis">
    <Message Importance="high" Text="Running Dependency Analysis..." />
    <Exec Command="$(MSBuildProjectDirectory)\src\Package\StaticAnalysis.exe $(MSBuildProjectDirectory)\src\Package\$(Configuration) $(MSBuildProjectDirectory)\src\Package"/>
  </Target>

  <!-- Publish all packages -->
  <Target Name="Publish">
    <Error Condition=" '$(NuGetKey)' == '' " Text="You must provide the NuGetKey parameter to the build: /p:NuGetKey=YOUR_PUBLISHING_KEY" />
    <Message Importance="high" Text="Publishing Cmdlets..." />
    <Exec Command="$(PowerShellCommand) -NonInteractive -NoLogo -NoProfile -Command &quot;. $(LibraryToolsFolder)\PublishModules.ps1 $(Configuration) $(Scope) $(NuGetKey) \&quot;$(NuGetPublishingSource)\&quot; &quot;"/>
  </Target>

  <PropertyGroup>
    <RunTestLive Condition="'$(RunTestLive)' == ''">false</RunTestLive>
    <XUnitIncludedTrait Condition="!$(RunTestLive)">AcceptanceType=CheckIn</XUnitIncludedTrait>
  </PropertyGroup>
  
  <!-- Note: all testing related target should go to 'AzurePowershell.test.targets' file except the one used by CI run -->
  <Import Project="$(MSBuildThisFileDirectory)AzurePowershell.test.targets"/>
  
  <!-- Run checkin tests for each pull request -->
  <Target Name="Test" DependsOnTargets="BeforeRunTests">
    <Message Importance="high" Text="Running check in tests..." />
    <CallTarget Targets="InvokeXUnit"/>
  </Target>
  
  <!-- Run Full switch with scenario tests -->
  <Target
    Name="FullWithScenarioTests"
    DependsOnTargets="Clean;Build;Test;RunOneSDKCIT" />
  
  <!-- Run live tests and record mocks -->
    <Target
    Name="RunLiveTests"
    DependsOnTargets="Clean;Build;LiveTestsFilter" />

    <Target Name="LiveTestsFilter" DependsOnTargets="Build;BeforeRunTests">
    <Message Importance="high" Text="Running live tests..." />
    <CallTarget Targets="LiveTests"/>
  </Target>
</Project>
