// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Metric.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Cmdlets;
    using System;

    /// <summary>Lists the metric values for multiple resources.</summary>
    /// <remarks>
    /// [OpenAPI] Batch=>POST:"/subscriptions/{subscriptionId}/metrics:getBatch"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.Get, @"AzMetricsBatch_BatchViaIdentityExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Description(@"Lists the metric values for multiple resources.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.HttpPath(Path = "/subscriptions/{subscriptionId}/metrics:getBatch", ApiVersion = "2023-10-01")]
    public partial class GetAzMetricsBatch_BatchViaIdentityExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>The comma separated list of resource IDs to query metrics for.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResourceIdList _batchRequestBody = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.ResourceIdList();

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>Backing field for <see cref="Aggregation" /> property.</summary>
        private string _aggregation;

        /// <summary>
        /// The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of aggregation types (comma separated) to retrieve.\n*Examples: average, minimum, maximum*")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of aggregation types (comma separated) to retrieve.
        *Examples: average, minimum, maximum*",
        SerializedName = @"aggregation",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Aggregation { get => this._aggregation; set => this._aggregation = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Metricdata Client => Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Backing field for <see cref="EndTime" /> property.</summary>
        private string _endTime;

        /// <summary>
        /// The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.",
        SerializedName = @"endtime",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string EndTime { get => this._endTime; set => this._endTime = value; }

        /// <summary>Backing field for <see cref="Endpoint" /> property.</summary>
        private string _endpoint;

        /// <summary>
        /// The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region should match the region
        /// of the requested resources. For global resources, the region should be 'global'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region should match the region of the requested resources. For global resources, the region should be 'global'.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region should match the region of the requested resources. For global resources, the region should be 'global'.",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Uri)]
        public string Endpoint { get => this._endpoint; set => this._endpoint = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private string _filter;

        /// <summary>
        /// The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>-
        /// Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>-
        /// Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical
        /// or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**filter=A
        /// eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A eq ‘a1’ and B eq ‘*’ and
        /// C eq ‘*’**.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1, B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.",
        SerializedName = @"filter",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Filter { get => this._filter; set => this._filter = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="InputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricdataIdentity _inputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricdataIdentity InputObject { get => this._inputObject; set => this._inputObject = value; }

        /// <summary>Backing field for <see cref="Interval" /> property.</summary>
        private string _interval;

        /// <summary>
        /// The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value
        /// that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.\n*Examples: PT15M, PT1H, P1D, FULL*")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special case for 'FULL' value that returns single datapoint for entire time span requested.
        *Examples: PT15M, PT1H, P1D, FULL*",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Interval { get => this._interval; set => this._interval = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private System.Collections.Generic.List<string> _name;

        /// <summary>The names of the metrics (comma separated) to retrieve.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The names of the metrics (comma separated) to retrieve.")]
        [global::System.Management.Automation.AllowEmptyCollection]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The names of the metrics (comma separated) to retrieve.",
        SerializedName = @"metricnames",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("MetricName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public System.Collections.Generic.List<string> Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Namespace" /> property.</summary>
        private string _namespace;

        /// <summary>Metric namespace that contains the requested metric names.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Metric namespace that contains the requested metric names.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Metric namespace that contains the requested metric names.",
        SerializedName = @"metricnamespace",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("MetricNamespace")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Namespace { get => this._namespace; set => this._namespace = value; }

        /// <summary>Backing field for <see cref="Orderby" /> property.</summary>
        private string _orderby;

        /// <summary>
        /// The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The aggregation to use for sorting results and the direction of the sort.\nOnly one order can be specified.\n*Examples: sum asc*")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The aggregation to use for sorting results and the direction of the sort.
        Only one order can be specified.
        *Examples: sum asc*",
        SerializedName = @"orderby",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Orderby { get => this._orderby; set => this._orderby = value; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The list of resource IDs to query metrics for.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of resource IDs to query metrics for.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of resource IDs to query metrics for.",
        SerializedName = @"resourceids",
        PossibleTypes = new [] { typeof(string) })]
        public string[] ResourceId { get => _batchRequestBody.Resourceid?.ToArray() ?? null /* fixedArrayOf */; set => _batchRequestBody.Resourceid = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>Backing field for <see cref="Rollupby" /> property.</summary>
        private string _rollupby;

        /// <summary>
        /// Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq
        /// Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see
        /// the results for Seattle and Tacoma rolled up into one timeseries.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dimension name(s) to rollup results by. For example if you only want to see metric values with a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.",
        SerializedName = @"rollupby",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string Rollupby { get => this._rollupby; set => this._rollupby = value; }

        /// <summary>Backing field for <see cref="StartTime" /> property.</summary>
        private string _startTime;

        /// <summary>
        /// The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime
        /// parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then this parameter is required.\nIf only starttime is specified, then endtime defaults to the current time.\nIf no time interval is specified, the default is 1 hour.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have specified the endtime parameter, then this parameter is required.
        If only starttime is specified, then endtime defaults to the current time.
        If no time interval is specified, the default is 1 hour.",
        SerializedName = @"starttime",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public string StartTime { get => this._startTime; set => this._startTime = value; }

        /// <summary>Backing field for <see cref="Top" /> property.</summary>
        private int _top;

        /// <summary>
        /// The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The maximum number of records to retrieve per resource ID in the request.\nValid only if filter is specified.\nDefaults to 10.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum number of records to retrieve per resource ID in the request.
        Valid only if filter is specified.
        Defaults to 10.",
        SerializedName = @"top",
        PossibleTypes = new [] { typeof(int) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Metric.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Metric.ParameterCategory.Query)]
        public int Top { get => this._top; set => this._top = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAzMetricsBatch_BatchViaIdentityExpanded" /> cmdlet class.
        /// </summary>
        public GetAzMetricsBatch_BatchViaIdentityExpanded()
        {

        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'MetricsBatch' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InputObject?.Id != null)
                    {
                        await this.Client.MetricsBatchViaIdentity(InputObject.Id, this.InvocationInformation.BoundParameters.ContainsKey("StartTime") ? StartTime : null, this.InvocationInformation.BoundParameters.ContainsKey("EndTime") ? EndTime : null, this.InvocationInformation.BoundParameters.ContainsKey("Interval") ? Interval : null, Namespace, Name, this.InvocationInformation.BoundParameters.ContainsKey("Aggregation") ? Aggregation : null, this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), this.InvocationInformation.BoundParameters.ContainsKey("Orderby") ? Orderby : null, this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, this.InvocationInformation.BoundParameters.ContainsKey("Rollupby") ? Rollupby : null, Endpoint, _batchRequestBody, onOk, onDefault, this, Pipeline);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InputObject has null value for InputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InputObject) );
                        }
                        await this.Client.MetricsBatch(InputObject.SubscriptionId ?? null, this.InvocationInformation.BoundParameters.ContainsKey("StartTime") ? StartTime : null, this.InvocationInformation.BoundParameters.ContainsKey("EndTime") ? EndTime : null, this.InvocationInformation.BoundParameters.ContainsKey("Interval") ? Interval : null, Namespace, Name, this.InvocationInformation.BoundParameters.ContainsKey("Aggregation") ? Aggregation : null, this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?), this.InvocationInformation.BoundParameters.ContainsKey("Orderby") ? Orderby : null, this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null, this.InvocationInformation.BoundParameters.ContainsKey("Rollupby") ? Rollupby : null, Endpoint, _batchRequestBody, onOk, onDefault, this, Pipeline);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Endpoint=Endpoint,StartTime=this.InvocationInformation.BoundParameters.ContainsKey("StartTime") ? StartTime : null,EndTime=this.InvocationInformation.BoundParameters.ContainsKey("EndTime") ? EndTime : null,Interval=this.InvocationInformation.BoundParameters.ContainsKey("Interval") ? Interval : null,Namespace=Namespace,Name=Name,Aggregation=this.InvocationInformation.BoundParameters.ContainsKey("Aggregation") ? Aggregation : null,Top=this.InvocationInformation.BoundParameters.ContainsKey("Top") ? Top : default(int?),Orderby=this.InvocationInformation.BoundParameters.ContainsKey("Orderby") ? Orderby : null,Filter=this.InvocationInformation.BoundParameters.ContainsKey("Filter") ? Filter : null,Rollupby=this.InvocationInformation.BoundParameters.ContainsKey("Rollupby") ? Rollupby : null})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Metric.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse">Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse
                var result = (await response);
                // response should be returning an array of some kind. +Pageable
                // nested-array / values / <none>
                if (null != result.Value)
                {
                    if (0 == _responseSize && 1 == result.Value.Count)
                    {
                        _firstResponse = result.Value[0];
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        var values = new System.Collections.Generic.List<System.Management.Automation.PSObject>();
                        foreach( var value in result.Value )
                        {
                            values.Add(value.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(values, true);
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}