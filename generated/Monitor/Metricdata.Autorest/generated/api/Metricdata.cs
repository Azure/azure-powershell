// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Metric
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Extensions;

    /// <summary>
    /// Low-level API implementation for the Metricdata service.
    /// </summary>
    public partial class Metricdata
    {

        /// <summary>Lists the metric values for multiple resources.</summary>
        /// <param name="subscriptionId">The subscription identifier for the resources in this batch.</param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="body">Metrics batch body including the list of resource ids</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task MetricsBatch(string subscriptionId, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, string endpoint, Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResourceIdList body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse>, global::System.Threading.Tasks.Task> onDefault, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode serializationMode = Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeUpdate)
        {
            var apiVersion = @"2023-10-01";
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var pathAndQuery = global::System.Text.RegularExpressions.Regex.Replace(
                        "/subscriptions/"
                        + global::System.Uri.EscapeDataString(subscriptionId)
                        + "/metrics:getBatch"
                        + "?"
                        + (string.IsNullOrEmpty(starttime) ? global::System.String.Empty : "starttime=" + global::System.Uri.EscapeDataString(starttime))
                        + "&"
                        + (string.IsNullOrEmpty(endtime) ? global::System.String.Empty : "endtime=" + global::System.Uri.EscapeDataString(endtime))
                        + "&"
                        + (string.IsNullOrEmpty(interval) ? global::System.String.Empty : "interval=" + global::System.Uri.EscapeDataString(interval))
                        + "&"
                        + "metricnamespace=" + global::System.Uri.EscapeDataString(metricnamespace)
                        + "&"
                        + (null != metricnames  && metricnames.Count > 0 ? "metricnames=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(metricnames, (current, each) => current + "," + ( null == each ? global::System.String.Empty : each.ToString()) )) : global::System.String.Empty)
                        + "&"
                        + (string.IsNullOrEmpty(aggregation) ? global::System.String.Empty : "aggregation=" + global::System.Uri.EscapeDataString(aggregation))
                        + "&"
                        + (null == top ? global::System.String.Empty : "top=" + global::System.Uri.EscapeDataString(top.ToString()))
                        + "&"
                        + (string.IsNullOrEmpty(orderby) ? global::System.String.Empty : "orderby=" + global::System.Uri.EscapeDataString(orderby))
                        + "&"
                        + (string.IsNullOrEmpty(filter) ? global::System.String.Empty : "filter=" + global::System.Uri.EscapeDataString(filter))
                        + "&"
                        + (string.IsNullOrEmpty(rollupby) ? global::System.String.Empty : "rollupby=" + global::System.Uri.EscapeDataString(rollupby))
                        + "&"
                        + "api-version=" + global::System.Uri.EscapeDataString(apiVersion)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.URLCreated, pathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var _url = new global::System.Uri($"{endpoint}{pathAndQuery}");
                var request =  new global::System.Net.Http.HttpRequestMessage(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Method.Post, _url);
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.RequestCreated, request.RequestUri.PathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.HeaderParametersAdded); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null, serializationMode).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BodyContentSet); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.MetricsBatch_Call (request, onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Lists the metric values for multiple resources.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="body">Metrics batch body including the list of resource ids</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task MetricsBatchViaIdentity(global::System.String viaIdentity, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, string endpoint, Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResourceIdList body, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse>, global::System.Threading.Tasks.Task> onDefault, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode serializationMode = Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeUpdate)
        {
            var apiVersion = @"2023-10-01";
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)$", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/subscriptions/{subscriptionId}'");
                }

                // replace URI parameters with values from identity
                var subscriptionId = _match.Groups["subscriptionId"].Value;
                // construct URL
                var pathAndQuery = global::System.Text.RegularExpressions.Regex.Replace(
                        "/subscriptions/"
                        + subscriptionId
                        + "/metrics:getBatch"
                        + "?"
                        + (string.IsNullOrEmpty(starttime) ? global::System.String.Empty : "starttime=" + global::System.Uri.EscapeDataString(starttime))
                        + "&"
                        + (string.IsNullOrEmpty(endtime) ? global::System.String.Empty : "endtime=" + global::System.Uri.EscapeDataString(endtime))
                        + "&"
                        + (string.IsNullOrEmpty(interval) ? global::System.String.Empty : "interval=" + global::System.Uri.EscapeDataString(interval))
                        + "&"
                        + "metricnamespace=" + global::System.Uri.EscapeDataString(metricnamespace)
                        + "&"
                        + (null != metricnames  && metricnames.Count > 0 ? "metricnames=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(metricnames, (current, each) => current + "," + ( null == each ? global::System.String.Empty : each.ToString()) )) : global::System.String.Empty)
                        + "&"
                        + (string.IsNullOrEmpty(aggregation) ? global::System.String.Empty : "aggregation=" + global::System.Uri.EscapeDataString(aggregation))
                        + "&"
                        + (null == top ? global::System.String.Empty : "top=" + global::System.Uri.EscapeDataString(top.ToString()))
                        + "&"
                        + (string.IsNullOrEmpty(orderby) ? global::System.String.Empty : "orderby=" + global::System.Uri.EscapeDataString(orderby))
                        + "&"
                        + (string.IsNullOrEmpty(filter) ? global::System.String.Empty : "filter=" + global::System.Uri.EscapeDataString(filter))
                        + "&"
                        + (string.IsNullOrEmpty(rollupby) ? global::System.String.Empty : "rollupby=" + global::System.Uri.EscapeDataString(rollupby))
                        + "&"
                        + "api-version=" + global::System.Uri.EscapeDataString(apiVersion)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.URLCreated, pathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var _url = new global::System.Uri($"{endpoint}{pathAndQuery}");
                var request =  new global::System.Net.Http.HttpRequestMessage(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Method.Post, _url);
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.RequestCreated, request.RequestUri.PathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.HeaderParametersAdded); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null, serializationMode).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BodyContentSet); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.MetricsBatch_Call (request, onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Lists the metric values for multiple resources.</summary>
        /// <param name="viaIdentity"></param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="body">Metrics batch body including the list of resource ids</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>"
        /// /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse> MetricsBatchViaIdentityWithResult(global::System.String viaIdentity, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, string endpoint, Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResourceIdList body, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode serializationMode = Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeUpdate)
        {
            var apiVersion = @"2023-10-01";
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // verify that Identity format is an exact match for uri

                var _match = new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)$", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(viaIdentity);
                if (!_match.Success)
                {
                    throw new global::System.Exception("Invalid identity for URI '/subscriptions/{subscriptionId}'");
                }

                // replace URI parameters with values from identity
                var subscriptionId = _match.Groups["subscriptionId"].Value;
                // construct URL
                var pathAndQuery = global::System.Text.RegularExpressions.Regex.Replace(
                        "/subscriptions/"
                        + subscriptionId
                        + "/metrics:getBatch"
                        + "?"
                        + (string.IsNullOrEmpty(starttime) ? global::System.String.Empty : "starttime=" + global::System.Uri.EscapeDataString(starttime))
                        + "&"
                        + (string.IsNullOrEmpty(endtime) ? global::System.String.Empty : "endtime=" + global::System.Uri.EscapeDataString(endtime))
                        + "&"
                        + (string.IsNullOrEmpty(interval) ? global::System.String.Empty : "interval=" + global::System.Uri.EscapeDataString(interval))
                        + "&"
                        + "metricnamespace=" + global::System.Uri.EscapeDataString(metricnamespace)
                        + "&"
                        + (null != metricnames  && metricnames.Count > 0 ? "metricnames=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(metricnames, (current, each) => current + "," + ( null == each ? global::System.String.Empty : each.ToString()) )) : global::System.String.Empty)
                        + "&"
                        + (string.IsNullOrEmpty(aggregation) ? global::System.String.Empty : "aggregation=" + global::System.Uri.EscapeDataString(aggregation))
                        + "&"
                        + (null == top ? global::System.String.Empty : "top=" + global::System.Uri.EscapeDataString(top.ToString()))
                        + "&"
                        + (string.IsNullOrEmpty(orderby) ? global::System.String.Empty : "orderby=" + global::System.Uri.EscapeDataString(orderby))
                        + "&"
                        + (string.IsNullOrEmpty(filter) ? global::System.String.Empty : "filter=" + global::System.Uri.EscapeDataString(filter))
                        + "&"
                        + (string.IsNullOrEmpty(rollupby) ? global::System.String.Empty : "rollupby=" + global::System.Uri.EscapeDataString(rollupby))
                        + "&"
                        + "api-version=" + global::System.Uri.EscapeDataString(apiVersion)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.URLCreated, pathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return null; }

                // generate request object
                var _url = new global::System.Uri($"{endpoint}{pathAndQuery}");
                var request =  new global::System.Net.Http.HttpRequestMessage(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Method.Post, _url);
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.RequestCreated, request.RequestUri.PathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return null; }

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.HeaderParametersAdded); if( eventListener.Token.IsCancellationRequested ) { return null; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null, serializationMode).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BodyContentSet); if( eventListener.Token.IsCancellationRequested ) { return null; }
                // make the call
                return await this.MetricsBatchWithResult_Call (request, eventListener,sender);
            }
        }

        /// <summary>Lists the metric values for multiple resources.</summary>
        /// <param name="subscriptionId">The subscription identifier for the resources in this batch.</param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="jsonString">Json string supplied to the MetricsBatch operation</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task MetricsBatchViaJsonString(string subscriptionId, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, string endpoint, global::System.String jsonString, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse>, global::System.Threading.Tasks.Task> onDefault, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender)
        {
            var apiVersion = @"2023-10-01";
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var pathAndQuery = global::System.Text.RegularExpressions.Regex.Replace(
                        "/subscriptions/"
                        + global::System.Uri.EscapeDataString(subscriptionId)
                        + "/metrics:getBatch"
                        + "?"
                        + (string.IsNullOrEmpty(starttime) ? global::System.String.Empty : "starttime=" + global::System.Uri.EscapeDataString(starttime))
                        + "&"
                        + (string.IsNullOrEmpty(endtime) ? global::System.String.Empty : "endtime=" + global::System.Uri.EscapeDataString(endtime))
                        + "&"
                        + (string.IsNullOrEmpty(interval) ? global::System.String.Empty : "interval=" + global::System.Uri.EscapeDataString(interval))
                        + "&"
                        + "metricnamespace=" + global::System.Uri.EscapeDataString(metricnamespace)
                        + "&"
                        + (null != metricnames  && metricnames.Count > 0 ? "metricnames=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(metricnames, (current, each) => current + "," + ( null == each ? global::System.String.Empty : each.ToString()) )) : global::System.String.Empty)
                        + "&"
                        + (string.IsNullOrEmpty(aggregation) ? global::System.String.Empty : "aggregation=" + global::System.Uri.EscapeDataString(aggregation))
                        + "&"
                        + (null == top ? global::System.String.Empty : "top=" + global::System.Uri.EscapeDataString(top.ToString()))
                        + "&"
                        + (string.IsNullOrEmpty(orderby) ? global::System.String.Empty : "orderby=" + global::System.Uri.EscapeDataString(orderby))
                        + "&"
                        + (string.IsNullOrEmpty(filter) ? global::System.String.Empty : "filter=" + global::System.Uri.EscapeDataString(filter))
                        + "&"
                        + (string.IsNullOrEmpty(rollupby) ? global::System.String.Empty : "rollupby=" + global::System.Uri.EscapeDataString(rollupby))
                        + "&"
                        + "api-version=" + global::System.Uri.EscapeDataString(apiVersion)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.URLCreated, pathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return; }

                // generate request object
                var _url = new global::System.Uri($"{endpoint}{pathAndQuery}");
                var request =  new global::System.Net.Http.HttpRequestMessage(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Method.Post, _url);
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.RequestCreated, request.RequestUri.PathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return; }

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.HeaderParametersAdded); if( eventListener.Token.IsCancellationRequested ) { return; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(jsonString, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BodyContentSet); if( eventListener.Token.IsCancellationRequested ) { return; }
                // make the call
                await this.MetricsBatch_Call (request, onOk,onDefault,eventListener,sender);
            }
        }

        /// <summary>Lists the metric values for multiple resources.</summary>
        /// <param name="subscriptionId">The subscription identifier for the resources in this batch.</param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="jsonString">Json string supplied to the MetricsBatch operation</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>"
        /// /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse> MetricsBatchViaJsonStringWithResult(string subscriptionId, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, string endpoint, global::System.String jsonString, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender)
        {
            var apiVersion = @"2023-10-01";
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var pathAndQuery = global::System.Text.RegularExpressions.Regex.Replace(
                        "/subscriptions/"
                        + global::System.Uri.EscapeDataString(subscriptionId)
                        + "/metrics:getBatch"
                        + "?"
                        + (string.IsNullOrEmpty(starttime) ? global::System.String.Empty : "starttime=" + global::System.Uri.EscapeDataString(starttime))
                        + "&"
                        + (string.IsNullOrEmpty(endtime) ? global::System.String.Empty : "endtime=" + global::System.Uri.EscapeDataString(endtime))
                        + "&"
                        + (string.IsNullOrEmpty(interval) ? global::System.String.Empty : "interval=" + global::System.Uri.EscapeDataString(interval))
                        + "&"
                        + "metricnamespace=" + global::System.Uri.EscapeDataString(metricnamespace)
                        + "&"
                        + (null != metricnames  && metricnames.Count > 0 ? "metricnames=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(metricnames, (current, each) => current + "," + ( null == each ? global::System.String.Empty : each.ToString()) )) : global::System.String.Empty)
                        + "&"
                        + (string.IsNullOrEmpty(aggregation) ? global::System.String.Empty : "aggregation=" + global::System.Uri.EscapeDataString(aggregation))
                        + "&"
                        + (null == top ? global::System.String.Empty : "top=" + global::System.Uri.EscapeDataString(top.ToString()))
                        + "&"
                        + (string.IsNullOrEmpty(orderby) ? global::System.String.Empty : "orderby=" + global::System.Uri.EscapeDataString(orderby))
                        + "&"
                        + (string.IsNullOrEmpty(filter) ? global::System.String.Empty : "filter=" + global::System.Uri.EscapeDataString(filter))
                        + "&"
                        + (string.IsNullOrEmpty(rollupby) ? global::System.String.Empty : "rollupby=" + global::System.Uri.EscapeDataString(rollupby))
                        + "&"
                        + "api-version=" + global::System.Uri.EscapeDataString(apiVersion)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.URLCreated, pathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return null; }

                // generate request object
                var _url = new global::System.Uri($"{endpoint}{pathAndQuery}");
                var request =  new global::System.Net.Http.HttpRequestMessage(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Method.Post, _url);
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.RequestCreated, request.RequestUri.PathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return null; }

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.HeaderParametersAdded); if( eventListener.Token.IsCancellationRequested ) { return null; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(jsonString, global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BodyContentSet); if( eventListener.Token.IsCancellationRequested ) { return null; }
                // make the call
                return await this.MetricsBatchWithResult_Call (request, eventListener,sender);
            }
        }

        /// <summary>Lists the metric values for multiple resources.</summary>
        /// <param name="subscriptionId">The subscription identifier for the resources in this batch.</param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="body">Metrics batch body including the list of resource ids</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>"
        /// /> that will be complete when handling of the response is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse> MetricsBatchWithResult(string subscriptionId, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, string endpoint, Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResourceIdList body, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode serializationMode = Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.SerializationMode.IncludeUpdate)
        {
            var apiVersion = @"2023-10-01";
            // Constant Parameters
            using( NoSynchronizationContext )
            {
                // construct URL
                var pathAndQuery = global::System.Text.RegularExpressions.Regex.Replace(
                        "/subscriptions/"
                        + global::System.Uri.EscapeDataString(subscriptionId)
                        + "/metrics:getBatch"
                        + "?"
                        + (string.IsNullOrEmpty(starttime) ? global::System.String.Empty : "starttime=" + global::System.Uri.EscapeDataString(starttime))
                        + "&"
                        + (string.IsNullOrEmpty(endtime) ? global::System.String.Empty : "endtime=" + global::System.Uri.EscapeDataString(endtime))
                        + "&"
                        + (string.IsNullOrEmpty(interval) ? global::System.String.Empty : "interval=" + global::System.Uri.EscapeDataString(interval))
                        + "&"
                        + "metricnamespace=" + global::System.Uri.EscapeDataString(metricnamespace)
                        + "&"
                        + (null != metricnames  && metricnames.Count > 0 ? "metricnames=" + global::System.Uri.EscapeDataString(global::System.Linq.Enumerable.Aggregate(metricnames, (current, each) => current + "," + ( null == each ? global::System.String.Empty : each.ToString()) )) : global::System.String.Empty)
                        + "&"
                        + (string.IsNullOrEmpty(aggregation) ? global::System.String.Empty : "aggregation=" + global::System.Uri.EscapeDataString(aggregation))
                        + "&"
                        + (null == top ? global::System.String.Empty : "top=" + global::System.Uri.EscapeDataString(top.ToString()))
                        + "&"
                        + (string.IsNullOrEmpty(orderby) ? global::System.String.Empty : "orderby=" + global::System.Uri.EscapeDataString(orderby))
                        + "&"
                        + (string.IsNullOrEmpty(filter) ? global::System.String.Empty : "filter=" + global::System.Uri.EscapeDataString(filter))
                        + "&"
                        + (string.IsNullOrEmpty(rollupby) ? global::System.String.Empty : "rollupby=" + global::System.Uri.EscapeDataString(rollupby))
                        + "&"
                        + "api-version=" + global::System.Uri.EscapeDataString(apiVersion)
                        ,"\\?&*$|&*$|(\\?)&+|(&)&+","$1$2");

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.URLCreated, pathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return null; }

                // generate request object
                var _url = new global::System.Uri($"{endpoint}{pathAndQuery}");
                var request =  new global::System.Net.Http.HttpRequestMessage(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Method.Post, _url);
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.RequestCreated, request.RequestUri.PathAndQuery); if( eventListener.Token.IsCancellationRequested ) { return null; }

                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.HeaderParametersAdded); if( eventListener.Token.IsCancellationRequested ) { return null; }
                // set body content
                request.Content = new global::System.Net.Http.StringContent(null != body ? body.ToJson(null, serializationMode).ToString() : @"{}", global::System.Text.Encoding.UTF8);
                request.Content.Headers.ContentType = global::System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BodyContentSet); if( eventListener.Token.IsCancellationRequested ) { return null; }
                // make the call
                return await this.MetricsBatchWithResult_Call (request, eventListener,sender);
            }
        }

        /// <summary>Actual wire call for <see cref= "MetricsBatchWithResult" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>"
        /// /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse> MetricsBatchWithResult_Call(global::System.Net.Http.HttpRequestMessage request, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    var sendTask = sender.SendAsync(request, eventListener);
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return null; }
                    _response = await sendTask;
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return null; }
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Progress, "intentional placeholder", 100); if( eventListener.Token.IsCancellationRequested ) { return null; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return null; }
                            var _result = _response.Content.ReadAsStringAsync().ContinueWith( body => Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.MetricResultsResponse.FromJson(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Json.JsonNode.Parse(body.Result)) );
                            return await _result;
                        }
                        default:
                        {
                            await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return null; }
                            var _result = _response.Content.ReadAsStringAsync().ContinueWith( body => Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.ErrorResponse.FromJson(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Json.JsonNode.Parse(body.Result)) );
                            // Error Response : default
                            var code = (await _result)?.Code;
                            var message = (await _result)?.Message;
                            if ((null == code || null == message))
                            {
                                // Unrecognized Response. Create an error record based on what we have.
                                var ex = new Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse>(_response, await _result);
                                throw ex;
                            }
                            else
                            {
                                throw new global::System.Exception($"[{code}] : {message}");
                            }
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>Actual wire call for <see cref= "MetricsBatch" /> method.</summary>
        /// <param name="request">the prepared HttpRequestMessage to send.</param>
        /// <param name="onOk">a delegate that is called when the remote service returns 200 (OK).</param>
        /// <param name="onDefault">a delegate that is called when the remote service returns default (any response code not handled
        /// elsewhere).</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <param name="sender">an instance of an Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync pipeline to use to make the request.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task MetricsBatch_Call(global::System.Net.Http.HttpRequestMessage request, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IMetricResultsResponse>, global::System.Threading.Tasks.Task> onOk, global::System.Func<global::System.Net.Http.HttpResponseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IErrorResponse>, global::System.Threading.Tasks.Task> onDefault, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.ISendAsync sender)
        {
            using( NoSynchronizationContext )
            {
                global::System.Net.Http.HttpResponseMessage _response = null;
                try
                {
                    var sendTask = sender.SendAsync(request, eventListener);
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BeforeCall, request); if( eventListener.Token.IsCancellationRequested ) { return; }
                    _response = await sendTask;
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.ResponseCreated, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Progress, "intentional placeholder", 100); if( eventListener.Token.IsCancellationRequested ) { return; }
                    var _contentType = _response.Content.Headers.ContentType?.MediaType;

                    switch ( _response.StatusCode )
                    {
                        case global::System.Net.HttpStatusCode.OK:
                        {
                            await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onOk(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.MetricResultsResponse.FromJson(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                        default:
                        {
                            await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.BeforeResponseDispatch, _response); if( eventListener.Token.IsCancellationRequested ) { return; }
                            await onDefault(_response,_response.Content.ReadAsStringAsync().ContinueWith( body => Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.ErrorResponse.FromJson(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Json.JsonNode.Parse(body.Result)) ));
                            break;
                        }
                    }
                }
                finally
                {
                    // finally statements
                    await eventListener.Signal(Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.Events.Finally, request, _response);
                    _response?.Dispose();
                    request?.Dispose();
                }
            }
        }

        /// <summary>
        /// Validation method for <see cref="MetricsBatch" /> method. Call this like the actual call, but you will get validation
        /// events back.
        /// </summary>
        /// <param name="subscriptionId">The subscription identifier for the resources in this batch.</param>
        /// <param name="endpoint">The regional endpoint to use, for example https://eastus.metrics.monitor.azure.com. The region
        /// should match the region of the requested resources. For global resources, the region should be 'global'.</param>
        /// <param name="starttime">The start time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'. If you have
        /// specified the endtime parameter, then this parameter is required.
        /// If only starttime is specified, then endtime defaults to the current time.
        /// If no time interval is specified, the default is 1 hour.</param>
        /// <param name="endtime">The end time of the query. It is a string in the format 'yyyy-MM-ddTHH:mm:ss.fffZ'.</param>
        /// <param name="interval">The interval (i.e. timegrain) of the query in ISO 8601 duration format. Defaults to PT1M. Special
        /// case for 'FULL' value that returns single datapoint for entire time span requested.
        /// *Examples: PT15M, PT1H, P1D, FULL*</param>
        /// <param name="metricnamespace">Metric namespace that contains the requested metric names.</param>
        /// <param name="metricnames">The names of the metrics (comma separated) to retrieve.</param>
        /// <param name="aggregation">The list of aggregation types (comma separated) to retrieve.
        /// *Examples: average, minimum, maximum*</param>
        /// <param name="top">The maximum number of records to retrieve per resource ID in the request.
        /// Valid only if filter is specified.
        /// Defaults to 10.</param>
        /// <param name="orderby">The aggregation to use for sorting results and the direction of the sort.
        /// Only one order can be specified.
        /// *Examples: sum asc*</param>
        /// <param name="filter">The filter is used to reduce the set of metric data returned.<br>Example:<br>Metric contains metadata
        /// A, B and C.<br>- Return all time series of C where A = a1 and B = b1 or b2<br>**filter=A eq ‘a1’ and B eq ‘b1’ or B eq
        /// ‘b2’ and C eq ‘*’**<br>- Invalid variant:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘*’ or B = ‘b2’**<br>This is invalid
        /// because the logical or operator cannot separate two different metadata names.<br>- Return all time series where A = a1,
        /// B = b1 and C = c1:<br>**filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’**<br>- Return all time series where A = a1<br>**filter=A
        /// eq ‘a1’ and B eq ‘*’ and C eq ‘*’**.</param>
        /// <param name="rollupby">Dimension name(s) to rollup results by. For example if you only want to see metric values with
        /// a filter like 'City eq Seattle or City eq Tacoma' but don't want to see separate values for each city, you can specify
        /// 'RollUpBy=City' to see the results for Seattle and Tacoma rolled up into one timeseries.</param>
        /// <param name="body">Metrics batch body including the list of resource ids</param>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener" /> instance that will receive events.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the response is completed.
        /// </returns>
        internal async global::System.Threading.Tasks.Task MetricsBatch_Validate(string subscriptionId, string endpoint, string starttime, string endtime, string interval, string metricnamespace, System.Collections.Generic.List<string> metricnames, string aggregation, int? top, string orderby, string filter, string rollupby, Microsoft.Azure.PowerShell.Cmdlets.Metric.Models.IResourceIdList body, Microsoft.Azure.PowerShell.Cmdlets.Metric.Runtime.IEventListener eventListener)
        {
            using( NoSynchronizationContext )
            {
                await eventListener.AssertNotNull(nameof(subscriptionId),subscriptionId);
                await eventListener.AssertRegEx(nameof(subscriptionId),subscriptionId,@"^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$");
                await eventListener.AssertNotNull(nameof(endpoint),endpoint);
                await eventListener.AssertRegEx(nameof(endpoint),endpoint,@"^[0-9a-fA-F]{8}(-[0-9a-fA-F]{4}){3}-[0-9a-fA-F]{12}$");
                await eventListener.AssertNotNull(nameof(starttime),starttime);
                await eventListener.AssertNotNull(nameof(endtime),endtime);
                await eventListener.AssertNotNull(nameof(interval),interval);
                await eventListener.AssertNotNull(nameof(metricnamespace),metricnamespace);
                await eventListener.AssertNotNull(nameof(metricnames), metricnames);
                await eventListener.AssertNotNull(nameof(aggregation),aggregation);
                await eventListener.AssertNotNull(nameof(orderby),orderby);
                await eventListener.AssertNotNull(nameof(filter),filter);
                await eventListener.AssertNotNull(nameof(rollupby),rollupby);
                await eventListener.AssertNotNull(nameof(body), body);
                await eventListener.AssertObjectIsValid(nameof(body), body);
            }
        }
    }
}