// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Extensions;

    /// <summary>A rule that provide the triggers and parameters for the scaling action.</summary>
    public partial class ScaleRule :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRule,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleInternal
    {

        /// <summary>Backing field for <see cref="MetricTrigger" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTrigger _metricTrigger;

        /// <summary>the trigger that results in a scaling action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTrigger MetricTrigger { get => (this._metricTrigger = this._metricTrigger ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.MetricTrigger()); set => this._metricTrigger = value; }

        /// <summary>
        /// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleMetricDimension[] MetricTriggerDimension { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Dimension; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Dimension = value ?? null /* arrayOf */; }

        /// <summary>a value indicating whether metric should divide per instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public bool? MetricTriggerDividePerInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).DividePerInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).DividePerInstance = value ?? default(bool); }

        /// <summary>the name of the metric that defines what the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public string MetricTriggerMetricName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricName = value ; }

        /// <summary>the namespace of the metric that defines what the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public string MetricTriggerMetricNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricNamespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricNamespace = value ?? null; }

        /// <summary>the location of the resource the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public string MetricTriggerMetricResourceLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricResourceLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricResourceLocation = value ?? null; }

        /// <summary>the resource identifier of the resource the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public string MetricTriggerMetricResourceUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricResourceUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).MetricResourceUri = value ; }

        /// <summary>the operator that is used to compare the metric data and the threshold.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ComparisonOperationType MetricTriggerOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Operator; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Operator = value ; }

        /// <summary>
        /// the metric statistic type. How the metrics from multiple instances are combined.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.MetricStatisticType MetricTriggerStatistic { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Statistic; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Statistic = value ; }

        /// <summary>the threshold of the metric that triggers the scale action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public double MetricTriggerThreshold { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Threshold; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).Threshold = value ; }

        /// <summary>
        /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.TimeAggregationType MetricTriggerTimeAggregation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).TimeAggregation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).TimeAggregation = value ; }

        /// <summary>
        /// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for
        /// the metric. Must be between 12 hours and 1 minute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public global::System.TimeSpan MetricTriggerTimeGrain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).TimeGrain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).TimeGrain = value ; }

        /// <summary>
        /// the range of time in which instance data is collected. This value must be greater than the delay in metric collection,
        /// which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public global::System.TimeSpan MetricTriggerTimeWindow { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).TimeWindow; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTriggerInternal)MetricTrigger).TimeWindow = value ; }

        /// <summary>Internal Acessors for MetricTrigger</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTrigger Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleInternal.MetricTrigger { get => (this._metricTrigger = this._metricTrigger ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.MetricTrigger()); set { {_metricTrigger = value;} } }

        /// <summary>Internal Acessors for ScaleAction</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleAction Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleInternal.ScaleAction { get => (this._scaleAction = this._scaleAction ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.ScaleAction()); set { {_scaleAction = value;} } }

        /// <summary>Backing field for <see cref="ScaleAction" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleAction _scaleAction;

        /// <summary>the parameters for the scaling action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleAction ScaleAction { get => (this._scaleAction = this._scaleAction ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.ScaleAction()); set => this._scaleAction = value; }

        /// <summary>
        /// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute
        /// in ISO 8601 format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public global::System.TimeSpan ScaleActionCooldown { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Cooldown; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Cooldown = value ; }

        /// <summary>
        /// the scale direction. Whether the scaling action increases or decreases the number of instances.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleDirection ScaleActionDirection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Direction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Direction = value ; }

        /// <summary>the type of action that should occur when the scale rule fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleType ScaleActionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Type = value ; }

        /// <summary>
        /// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is
        /// 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.PropertyOrigin.Inlined)]
        public string ScaleActionValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleActionInternal)ScaleAction).Value = value ?? null; }

        /// <summary>Creates an new <see cref="ScaleRule" /> instance.</summary>
        public ScaleRule()
        {

        }
    }
    /// A rule that provide the triggers and parameters for the scaling action.
    public partial interface IScaleRule :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.IJsonSerializable
    {
        /// <summary>
        /// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of dimension conditions. For example: [{""DimensionName"":""AppName"",""Operator"":""Equals"",""Values"":[""App1""]},{""DimensionName"":""Deployment"",""Operator"":""Equals"",""Values"":[""default""]}].",
        SerializedName = @"dimensions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleMetricDimension) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleMetricDimension[] MetricTriggerDimension { get; set; }
        /// <summary>a value indicating whether metric should divide per instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"a value indicating whether metric should divide per instance.",
        SerializedName = @"dividePerInstance",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MetricTriggerDividePerInstance { get; set; }
        /// <summary>the name of the metric that defines what the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the name of the metric that defines what the rule monitors.",
        SerializedName = @"metricName",
        PossibleTypes = new [] { typeof(string) })]
        string MetricTriggerMetricName { get; set; }
        /// <summary>the namespace of the metric that defines what the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"the namespace of the metric that defines what the rule monitors.",
        SerializedName = @"metricNamespace",
        PossibleTypes = new [] { typeof(string) })]
        string MetricTriggerMetricNamespace { get; set; }
        /// <summary>the location of the resource the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"the location of the resource the rule monitors.",
        SerializedName = @"metricResourceLocation",
        PossibleTypes = new [] { typeof(string) })]
        string MetricTriggerMetricResourceLocation { get; set; }
        /// <summary>the resource identifier of the resource the rule monitors.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the resource identifier of the resource the rule monitors.",
        SerializedName = @"metricResourceUri",
        PossibleTypes = new [] { typeof(string) })]
        string MetricTriggerMetricResourceUri { get; set; }
        /// <summary>the operator that is used to compare the metric data and the threshold.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the operator that is used to compare the metric data and the threshold.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ComparisonOperationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ComparisonOperationType MetricTriggerOperator { get; set; }
        /// <summary>
        /// the metric statistic type. How the metrics from multiple instances are combined.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the metric statistic type. How the metrics from multiple instances are combined.",
        SerializedName = @"statistic",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.MetricStatisticType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.MetricStatisticType MetricTriggerStatistic { get; set; }
        /// <summary>the threshold of the metric that triggers the scale action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the threshold of the metric that triggers the scale action.",
        SerializedName = @"threshold",
        PossibleTypes = new [] { typeof(double) })]
        double MetricTriggerThreshold { get; set; }
        /// <summary>
        /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"time aggregation type. How the data that is collected should be combined over time. The default value is Average.",
        SerializedName = @"timeAggregation",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.TimeAggregationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.TimeAggregationType MetricTriggerTimeAggregation { get; set; }
        /// <summary>
        /// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for
        /// the metric. Must be between 12 hours and 1 minute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for the metric. Must be between 12 hours and 1 minute.",
        SerializedName = @"timeGrain",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan MetricTriggerTimeGrain { get; set; }
        /// <summary>
        /// the range of time in which instance data is collected. This value must be greater than the delay in metric collection,
        /// which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the range of time in which instance data is collected. This value must be greater than the delay in metric collection, which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.",
        SerializedName = @"timeWindow",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan MetricTriggerTimeWindow { get; set; }
        /// <summary>
        /// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute
        /// in ISO 8601 format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute in ISO 8601 format.",
        SerializedName = @"cooldown",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan ScaleActionCooldown { get; set; }
        /// <summary>
        /// the scale direction. Whether the scaling action increases or decreases the number of instances.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the scale direction. Whether the scaling action increases or decreases the number of instances.",
        SerializedName = @"direction",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleDirection) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleDirection ScaleActionDirection { get; set; }
        /// <summary>the type of action that should occur when the scale rule fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"the type of action that should occur when the scale rule fires.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleType ScaleActionType { get; set; }
        /// <summary>
        /// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is
        /// 1.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is 1.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(string) })]
        string ScaleActionValue { get; set; }

    }
    /// A rule that provide the triggers and parameters for the scaling action.
    internal partial interface IScaleRuleInternal

    {
        /// <summary>the trigger that results in a scaling action.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IMetricTrigger MetricTrigger { get; set; }
        /// <summary>
        /// List of dimension conditions. For example: [{"DimensionName":"AppName","Operator":"Equals","Values":["App1"]},{"DimensionName":"Deployment","Operator":"Equals","Values":["default"]}].
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleRuleMetricDimension[] MetricTriggerDimension { get; set; }
        /// <summary>a value indicating whether metric should divide per instance.</summary>
        bool? MetricTriggerDividePerInstance { get; set; }
        /// <summary>the name of the metric that defines what the rule monitors.</summary>
        string MetricTriggerMetricName { get; set; }
        /// <summary>the namespace of the metric that defines what the rule monitors.</summary>
        string MetricTriggerMetricNamespace { get; set; }
        /// <summary>the location of the resource the rule monitors.</summary>
        string MetricTriggerMetricResourceLocation { get; set; }
        /// <summary>the resource identifier of the resource the rule monitors.</summary>
        string MetricTriggerMetricResourceUri { get; set; }
        /// <summary>the operator that is used to compare the metric data and the threshold.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ComparisonOperationType MetricTriggerOperator { get; set; }
        /// <summary>
        /// the metric statistic type. How the metrics from multiple instances are combined.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.MetricStatisticType MetricTriggerStatistic { get; set; }
        /// <summary>the threshold of the metric that triggers the scale action.</summary>
        double MetricTriggerThreshold { get; set; }
        /// <summary>
        /// time aggregation type. How the data that is collected should be combined over time. The default value is Average.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.TimeAggregationType MetricTriggerTimeAggregation { get; set; }
        /// <summary>
        /// the granularity of metrics the rule monitors. Must be one of the predefined values returned from metric definitions for
        /// the metric. Must be between 12 hours and 1 minute.
        /// </summary>
        global::System.TimeSpan MetricTriggerTimeGrain { get; set; }
        /// <summary>
        /// the range of time in which instance data is collected. This value must be greater than the delay in metric collection,
        /// which can vary from resource-to-resource. Must be between 12 hours and 5 minutes.
        /// </summary>
        global::System.TimeSpan MetricTriggerTimeWindow { get; set; }
        /// <summary>the parameters for the scaling action.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Models.Api20221001.IScaleAction ScaleAction { get; set; }
        /// <summary>
        /// the amount of time to wait since the last scaling action before this action occurs. It must be between 1 week and 1 minute
        /// in ISO 8601 format.
        /// </summary>
        global::System.TimeSpan ScaleActionCooldown { get; set; }
        /// <summary>
        /// the scale direction. Whether the scaling action increases or decreases the number of instances.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleDirection ScaleActionDirection { get; set; }
        /// <summary>the type of action that should occur when the scale rule fires.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.Autoscale.Support.ScaleType ScaleActionType { get; set; }
        /// <summary>
        /// the number of instances that are involved in the scaling action. This value must be 1 or greater. The default value is
        /// 1.
        /// </summary>
        string ScaleActionValue { get; set; }

    }
}