// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Extensions;

    /// <summary>The scheduled query rule resource.</summary>
    public partial class ScheduledQueryRuleResource :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResource,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.TrackedResource();

        /// <summary>The properties of an alert payload.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionCustomProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionCustomProperty = value ?? null /* model class */; }

        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] ActionGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).ActionGroup = value ?? null /* arrayOf */; }

        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? AutoMitigate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).AutoMitigate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).AutoMitigate = value ?? default(bool); }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? CheckWorkspaceAlertsStorageConfigured { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CheckWorkspaceAlertsStorageConfigured; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CheckWorkspaceAlertsStorageConfigured = value ?? default(bool); }

        /// <summary>The api-version used when creating this alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string CreatedWithApiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CreatedWithApiVersion; }

        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CriterionAllOf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CriterionAllOf = value ?? null /* arrayOf */; }

        /// <summary>The description of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Description = value ?? null; }

        /// <summary>The display name of the alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Enabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Etag" /> property.</summary>
        private string _etag;

        /// <summary>
        /// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the
        /// normal etag convention. Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1
        /// uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section
        /// 14.27) header fields.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public string Etag { get => this._etag; }

        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? EvaluationFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).EvaluationFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).EvaluationFrequency = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Id; }

        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? IsLegacyLogAnalyticsRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsLegacyLogAnalyticsRule; }

        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? IsWorkspaceAlertsStorageConfigured { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsWorkspaceAlertsStorageConfigured; }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.Kind? _kind;

        /// <summary>Indicates the type of scheduled query rule. The default is LogAlert.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.Kind? Kind { get => this._kind; set => this._kind = value; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for Action</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.Action { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Action; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Action = value; }

        /// <summary>Internal Acessors for CreatedWithApiVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.CreatedWithApiVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CreatedWithApiVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).CreatedWithApiVersion = value; }

        /// <summary>Internal Acessors for Criterion</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.Criterion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Criterion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Criterion = value; }

        /// <summary>Internal Acessors for Etag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.Etag { get => this._etag; set { {_etag = value;} } }

        /// <summary>Internal Acessors for IsLegacyLogAnalyticsRule</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.IsLegacyLogAnalyticsRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsLegacyLogAnalyticsRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsLegacyLogAnalyticsRule = value; }

        /// <summary>Internal Acessors for IsWorkspaceAlertsStorageConfigured</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.IsWorkspaceAlertsStorageConfigured { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsWorkspaceAlertsStorageConfigured; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).IsWorkspaceAlertsStorageConfigured = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemData Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleResourceInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.SystemData()); set { {_systemData = value;} } }

        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? MuteActionsDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).MuteActionsDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).MuteActionsDuration = value ?? default(global::System.TimeSpan); }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Name; }

        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? OverrideQueryTimeRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).OverrideQueryTimeRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).OverrideQueryTimeRange = value ?? default(global::System.TimeSpan); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties _property;

        /// <summary>The rule properties of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ScheduledQueryRuleProperties()); set => this._property = value; }

        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Scope = value ?? null /* arrayOf */; }

        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public long? Severity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Severity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).Severity = value ?? default(long); }

        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public bool? SkipQueryValidation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).SkipQueryValidation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).SkipQueryValidation = value ?? default(bool); }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemData _systemData;

        /// <summary>SystemData of ScheduledQueryRule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).CreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemDataInternal)SystemData).LastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType)""); }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public string[] TargetResourceType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).TargetResourceType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).TargetResourceType = value ?? null /* arrayOf */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.IResourceInternal)__trackedResource).Type; }

        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Origin(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? WindowSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).WindowSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRulePropertiesInternal)Property).WindowSize = value ?? default(global::System.TimeSpan); }

        /// <summary>Creates an new <see cref="ScheduledQueryRuleResource" /> instance.</summary>
        public ScheduledQueryRuleResource()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// The scheduled query rule resource.
    public partial interface IScheduledQueryRuleResource :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResource
    {
        /// <summary>The properties of an alert payload.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The properties of an alert payload.",
        SerializedName = @"customProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get; set; }
        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Action Group resource Ids to invoke when the alert fires.",
        SerializedName = @"actionGroups",
        PossibleTypes = new [] { typeof(string) })]
        string[] ActionGroup { get; set; }
        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"autoMitigate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoMitigate { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is false. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"checkWorkspaceAlertsStorageConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CheckWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>The api-version used when creating this alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The api-version used when creating this alert rule",
        SerializedName = @"createdWithApiVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CreatedWithApiVersion { get;  }
        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A list of conditions to evaluate against the specified scopes",
        SerializedName = @"allOf",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get; set; }
        /// <summary>The description of the scheduled query rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The description of the scheduled query rule.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>The display name of the alert rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The display name of the alert rule",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether this scheduled query rule is enabled. Value should be true or false",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>
        /// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the
        /// normal etag convention. Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1
        /// uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section
        /// 14.27) header fields.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the normal etag convention.  Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1 uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section 14.27) header fields. ",
        SerializedName = @"etag",
        PossibleTypes = new [] { typeof(string) })]
        string Etag { get;  }
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"evaluationFrequency",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? EvaluationFrequency { get; set; }
        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"True if alert rule is legacy Log Analytic rule",
        SerializedName = @"isLegacyLogAnalyticsRule",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsLegacyLogAnalyticsRule { get;  }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage. The default is false.",
        SerializedName = @"isWorkspaceAlertsStorageConfigured",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsWorkspaceAlertsStorageConfigured { get;  }
        /// <summary>Indicates the type of scheduled query rule. The default is LogAlert.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the type of scheduled query rule. The default is LogAlert.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.Kind) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.Kind? Kind { get; set; }
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"muteActionsDuration",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? MuteActionsDuration { get; set; }
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for rules of the kind LogAlert.",
        SerializedName = @"overrideQueryTimeRange",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? OverrideQueryTimeRange { get; set; }
        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of resource id's that this scheduled query rule is scoped to.",
        SerializedName = @"scopes",
        PossibleTypes = new [] { typeof(string) })]
        string[] Scope { get; set; }
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(long) })]
        long? Severity { get; set; }
        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for rules of the kind LogAlert.",
        SerializedName = @"skipQueryValidation",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SkipQueryValidation { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert",
        SerializedName = @"targetResourceTypes",
        PossibleTypes = new [] { typeof(string) })]
        string[] TargetResourceType { get; set; }
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required only for rules of the kind LogAlert.",
        SerializedName = @"windowSize",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? WindowSize { get; set; }

    }
    /// The scheduled query rule resource.
    internal partial interface IScheduledQueryRuleResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api10.ITrackedResourceInternal
    {
        /// <summary>Actions to invoke when the alert fires.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActions Action { get; set; }
        /// <summary>The properties of an alert payload.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IActionsCustomProperties ActionCustomProperty { get; set; }
        /// <summary>Action Group resource Ids to invoke when the alert fires.</summary>
        string[] ActionGroup { get; set; }
        /// <summary>
        /// The flag that indicates whether the alert should be automatically resolved or not. The default is true. Relevant only
        /// for rules of the kind LogAlert.
        /// </summary>
        bool? AutoMitigate { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule should be stored in the customer's storage. The default is
        /// false. Relevant only for rules of the kind LogAlert.
        /// </summary>
        bool? CheckWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>The api-version used when creating this alert rule</summary>
        string CreatedWithApiVersion { get; set; }
        /// <summary>The rule criteria that defines the conditions of the scheduled query rule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleCriteria Criterion { get; set; }
        /// <summary>A list of conditions to evaluate against the specified scopes</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.ICondition[] CriterionAllOf { get; set; }
        /// <summary>The description of the scheduled query rule.</summary>
        string Description { get; set; }
        /// <summary>The display name of the alert rule</summary>
        string DisplayName { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule is enabled. Value should be true or false
        /// </summary>
        bool? Enabled { get; set; }
        /// <summary>
        /// The etag field is *not* required. If it is provided in the response body, it must also be provided as a header per the
        /// normal etag convention. Entity tags are used for comparing two or more entities from the same requested resource. HTTP/1.1
        /// uses entity tags in the etag (section 14.19), If-Match (section 14.24), If-None-Match (section 14.26), and If-Range (section
        /// 14.27) header fields.
        /// </summary>
        string Etag { get; set; }
        /// <summary>
        /// How often the scheduled query rule is evaluated represented in ISO 8601 duration format. Relevant and required only for
        /// rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? EvaluationFrequency { get; set; }
        /// <summary>True if alert rule is legacy Log Analytic rule</summary>
        bool? IsLegacyLogAnalyticsRule { get; set; }
        /// <summary>
        /// The flag which indicates whether this scheduled query rule has been configured to be stored in the customer's storage.
        /// The default is false.
        /// </summary>
        bool? IsWorkspaceAlertsStorageConfigured { get; set; }
        /// <summary>Indicates the type of scheduled query rule. The default is LogAlert.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.Kind? Kind { get; set; }
        /// <summary>
        /// Mute actions for the chosen period of time (in ISO 8601 duration format) after the alert is fired. Relevant only for rules
        /// of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? MuteActionsDuration { get; set; }
        /// <summary>
        /// If specified then overrides the query time range (default is WindowSize*NumberOfEvaluationPeriods). Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? OverrideQueryTimeRange { get; set; }
        /// <summary>The rule properties of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20210801.IScheduledQueryRuleProperties Property { get; set; }
        /// <summary>The list of resource id's that this scheduled query rule is scoped to.</summary>
        string[] Scope { get; set; }
        /// <summary>
        /// Severity of the alert. Should be an integer between [0-4]. Value of 0 is severest. Relevant and required only for rules
        /// of the kind LogAlert.
        /// </summary>
        long? Severity { get; set; }
        /// <summary>
        /// The flag which indicates whether the provided query should be validated or not. The default is false. Relevant only for
        /// rules of the kind LogAlert.
        /// </summary>
        bool? SkipQueryValidation { get; set; }
        /// <summary>SystemData of ScheduledQueryRule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Models.Api20.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType? SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Monitor.ScheduledQueryRule.Support.CreatedByType? SystemDataLastModifiedByType { get; set; }
        /// <summary>
        /// List of resource type of the target resource(s) on which the alert is created/updated. For example if the scope is a resource
        /// group and targetResourceTypes is Microsoft.Compute/virtualMachines, then a different alert will be fired for each virtual
        /// machine in the resource group which meet the alert criteria. Relevant only for rules of the kind LogAlert
        /// </summary>
        string[] TargetResourceType { get; set; }
        /// <summary>
        /// The period of time (in ISO 8601 duration format) on which the Alert query will be executed (bin size). Relevant and required
        /// only for rules of the kind LogAlert.
        /// </summary>
        global::System.TimeSpan? WindowSize { get; set; }

    }
}