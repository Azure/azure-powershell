// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Runtime.PowerShell;

    /// <summary>Exporter Info.</summary>
    [System.ComponentModel.TypeConverter(typeof(ExporterTypeConverter))]
    public partial class Exporter
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.Exporter"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporter" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporter DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new Exporter(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.Exporter"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporter" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporter DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new Exporter(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.Exporter"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal Exporter(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("AzureMonitorWorkspaceLog"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLog = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IAzureMonitorWorkspaceLogsExporter) content.GetValueForProperty("AzureMonitorWorkspaceLog",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLog, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.AzureMonitorWorkspaceLogsExporterTypeConverter.ConvertFrom);
            }
            if (content.Contains("Tcp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Tcp = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ITcpExporter) content.GetValueForProperty("Tcp",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Tcp, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.TcpExporterTypeConverter.ConvertFrom);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("AzureMonitorWorkspaceLogApi"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogApi = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IAzureMonitorWorkspaceLogsApiConfig) content.GetValueForProperty("AzureMonitorWorkspaceLogApi",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogApi, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.AzureMonitorWorkspaceLogsApiConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("AzureMonitorWorkspaceLogConcurrency"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogConcurrency = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IConcurrencyConfiguration) content.GetValueForProperty("AzureMonitorWorkspaceLogConcurrency",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogConcurrency, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ConcurrencyConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AzureMonitorWorkspaceLogCache"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogCache = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ICacheConfiguration) content.GetValueForProperty("AzureMonitorWorkspaceLogCache",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogCache, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.CacheConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("TcpUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).TcpUrl = (string) content.GetValueForProperty("TcpUrl",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).TcpUrl, global::System.Convert.ToString);
            }
            if (content.Contains("ApiSchema"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiSchema = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ISchemaMap) content.GetValueForProperty("ApiSchema",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiSchema, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.SchemaMapTypeConverter.ConvertFrom);
            }
            if (content.Contains("ApiDataCollectionEndpointUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionEndpointUrl = (string) content.GetValueForProperty("ApiDataCollectionEndpointUrl",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionEndpointUrl, global::System.Convert.ToString);
            }
            if (content.Contains("ApiStream"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiStream = (string) content.GetValueForProperty("ApiStream",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiStream, global::System.Convert.ToString);
            }
            if (content.Contains("ApiDataCollectionRule"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionRule = (string) content.GetValueForProperty("ApiDataCollectionRule",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionRule, global::System.Convert.ToString);
            }
            if (content.Contains("ConcurrencyWorkerCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyWorkerCount = (int?) content.GetValueForProperty("ConcurrencyWorkerCount",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyWorkerCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ConcurrencyBatchQueueSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyBatchQueueSize = (int?) content.GetValueForProperty("ConcurrencyBatchQueueSize",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyBatchQueueSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CacheMaxStorageUsage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheMaxStorageUsage = (int?) content.GetValueForProperty("CacheMaxStorageUsage",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheMaxStorageUsage, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CacheRetentionPeriod"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheRetentionPeriod = (int?) content.GetValueForProperty("CacheRetentionPeriod",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheRetentionPeriod, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("SchemaRecordMap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaRecordMap = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IRecordMap>) content.GetValueForProperty("SchemaRecordMap",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaRecordMap, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IRecordMap>(__y, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.RecordMapTypeConverter.ConvertFrom));
            }
            if (content.Contains("SchemaResourceMap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaResourceMap = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IResourceMap>) content.GetValueForProperty("SchemaResourceMap",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaResourceMap, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IResourceMap>(__y, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ResourceMapTypeConverter.ConvertFrom));
            }
            if (content.Contains("SchemaScopeMap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaScopeMap = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IScopeMap>) content.GetValueForProperty("SchemaScopeMap",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaScopeMap, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IScopeMap>(__y, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ScopeMapTypeConverter.ConvertFrom));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.Exporter"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal Exporter(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("AzureMonitorWorkspaceLog"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLog = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IAzureMonitorWorkspaceLogsExporter) content.GetValueForProperty("AzureMonitorWorkspaceLog",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLog, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.AzureMonitorWorkspaceLogsExporterTypeConverter.ConvertFrom);
            }
            if (content.Contains("Tcp"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Tcp = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ITcpExporter) content.GetValueForProperty("Tcp",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Tcp, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.TcpExporterTypeConverter.ConvertFrom);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("AzureMonitorWorkspaceLogApi"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogApi = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IAzureMonitorWorkspaceLogsApiConfig) content.GetValueForProperty("AzureMonitorWorkspaceLogApi",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogApi, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.AzureMonitorWorkspaceLogsApiConfigTypeConverter.ConvertFrom);
            }
            if (content.Contains("AzureMonitorWorkspaceLogConcurrency"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogConcurrency = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IConcurrencyConfiguration) content.GetValueForProperty("AzureMonitorWorkspaceLogConcurrency",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogConcurrency, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ConcurrencyConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("AzureMonitorWorkspaceLogCache"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogCache = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ICacheConfiguration) content.GetValueForProperty("AzureMonitorWorkspaceLogCache",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).AzureMonitorWorkspaceLogCache, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.CacheConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("TcpUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).TcpUrl = (string) content.GetValueForProperty("TcpUrl",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).TcpUrl, global::System.Convert.ToString);
            }
            if (content.Contains("ApiSchema"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiSchema = (Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ISchemaMap) content.GetValueForProperty("ApiSchema",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiSchema, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.SchemaMapTypeConverter.ConvertFrom);
            }
            if (content.Contains("ApiDataCollectionEndpointUrl"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionEndpointUrl = (string) content.GetValueForProperty("ApiDataCollectionEndpointUrl",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionEndpointUrl, global::System.Convert.ToString);
            }
            if (content.Contains("ApiStream"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiStream = (string) content.GetValueForProperty("ApiStream",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiStream, global::System.Convert.ToString);
            }
            if (content.Contains("ApiDataCollectionRule"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionRule = (string) content.GetValueForProperty("ApiDataCollectionRule",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ApiDataCollectionRule, global::System.Convert.ToString);
            }
            if (content.Contains("ConcurrencyWorkerCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyWorkerCount = (int?) content.GetValueForProperty("ConcurrencyWorkerCount",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyWorkerCount, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("ConcurrencyBatchQueueSize"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyBatchQueueSize = (int?) content.GetValueForProperty("ConcurrencyBatchQueueSize",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).ConcurrencyBatchQueueSize, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CacheMaxStorageUsage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheMaxStorageUsage = (int?) content.GetValueForProperty("CacheMaxStorageUsage",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheMaxStorageUsage, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("CacheRetentionPeriod"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheRetentionPeriod = (int?) content.GetValueForProperty("CacheRetentionPeriod",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).CacheRetentionPeriod, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("SchemaRecordMap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaRecordMap = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IRecordMap>) content.GetValueForProperty("SchemaRecordMap",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaRecordMap, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IRecordMap>(__y, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.RecordMapTypeConverter.ConvertFrom));
            }
            if (content.Contains("SchemaResourceMap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaResourceMap = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IResourceMap>) content.GetValueForProperty("SchemaResourceMap",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaResourceMap, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IResourceMap>(__y, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ResourceMapTypeConverter.ConvertFrom));
            }
            if (content.Contains("SchemaScopeMap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaScopeMap = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IScopeMap>) content.GetValueForProperty("SchemaScopeMap",((Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporterInternal)this).SchemaScopeMap, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IScopeMap>(__y, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.ScopeMapTypeConverter.ConvertFrom));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="Exporter" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="Exporter" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Models.IExporter FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Monitor.PipelineGroup.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Exporter Info.
    [System.ComponentModel.TypeConverter(typeof(ExporterTypeConverter))]
    public partial interface IExporter

    {

    }
}