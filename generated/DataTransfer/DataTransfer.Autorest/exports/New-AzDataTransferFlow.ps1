
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create the flow resource.
.Description
Create the flow resource.
.Example
New-AzDataTransferFlow -ResourceGroupName ResourceGroup01 -ConnectionName Connection01 -Name Flow01 -Location "EastUS" -FlowType "Mission" -DataType "Blob" -StorageAccountName "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ResourceGroup01/providers/Microsoft.Storage/storageAccounts/storageAccount01" -StorageContainerName "teststorage" -Confirm:$false
.Example
New-AzDataTransferFlow -ResourceGroupName ResourceGroup01 -ConnectionName Connection01 -Name Flow01 -Location "EastUS" -FlowType "Mission" -DataType "Blob" -StorageAccountName "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ResourceGroup01/providers/Microsoft.Storage/storageAccounts/storageAccount01" -StorageContainerName "teststorage" -Status Enabled -Tag @{Environment="Production"} -Confirm:$false
.Example
New-AzDataTransferFlow -ResourceGroupName ResourceGroup01 -ConnectionName BasicReceiveConnection01 -Name BasicRecvBlobFiles01 -Location "CentralUS" -Status "Enabled" -FlowDataType "Blob" -FlowProfilePipeline "Pipeline01" -FlowProfileName "BasicFlowProfile01" -FlowProfileReplicationScenario "Files" -FlowProfileStatus "Enabled" -FlowProfileId "000000000000-0000-0000-00000000" -FlowProfileDescription "Basic flow profile for file replication" -Confirm:$false

.Outputs
ADT.Models.IFlow
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

APIFLOWOPTIONAUTHENTICATION <IAuthentication[]>: Optional and for advanced used only. A list of authentication methods to use when accessing the Azure Data Transfer API Flow. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
  [ApplicationId <List<String>>]: List of applicationIds allowed to authorize to this flow. This is used as an alternative to the RBAC authorization check.
  [Audience <String>]: Audience of the identity of the remote endpoint service. By default, remoteEndpointSettings.endpoint will be used if a value is not provided.
  [Authority <String>]: The full URL endpoint used to acquire tokens, typically combining the instance and tenant ID to target a specific authentication context.
  [ClientIdOverride <String>]: The Flow can use an Entra app identity that is provided by the Flow user to obtain the token to call the remote endpoint. This field specifies the user provided app's clientId.
  [IdentityTranslation <String>]: Determines which identity to use for extracting the user token for Azure Data Transfer API Flow.
  [Instance <String>]: The identity provider's token service instance.
  [TenantId <String>]: A unique identifier representing the tenant of the identity provider's token service.
  [Type <String>]: Type of authentication mechanism. JWT by default.

REMOTEENDPOINTSETTINGAUTHENTICATION <IAuthentication[]>: Optional and for advanced used only. A list of authentication methods to use when accessing the remote endpoint. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
  [ApplicationId <List<String>>]: List of applicationIds allowed to authorize to this flow. This is used as an alternative to the RBAC authorization check.
  [Audience <String>]: Audience of the identity of the remote endpoint service. By default, remoteEndpointSettings.endpoint will be used if a value is not provided.
  [Authority <String>]: The full URL endpoint used to acquire tokens, typically combining the instance and tenant ID to target a specific authentication context.
  [ClientIdOverride <String>]: The Flow can use an Entra app identity that is provided by the Flow user to obtain the token to call the remote endpoint. This field specifies the user provided app's clientId.
  [IdentityTranslation <String>]: Determines which identity to use for extracting the user token for Azure Data Transfer API Flow.
  [Instance <String>]: The identity provider's token service instance.
  [TenantId <String>]: A unique identifier representing the tenant of the identity provider's token service.
  [Type <String>]: Type of authentication mechanism. JWT by default.
.Link
https://learn.microsoft.com/powershell/module/az.datatransfer/new-azdatatransferflow
#>
function New-AzDataTransferFlow {
[OutputType([ADT.Models.IFlow])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [ADT.Category('Path')]
    [System.String]
    # The name for the connection to perform the operation on.
    ${ConnectionName},

    [Parameter(Mandatory)]
    [Alias('FlowName')]
    [ADT.Category('Path')]
    [System.String]
    # The name for the flow to perform the operation on.
    ${Name},

    [Parameter(Mandatory)]
    [ADT.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [ADT.Category('Path')]
    [ADT.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("SDK", "Endpoint")]
    [ADT.Category('Body')]
    [System.String]
    # Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
    ${ApiFlowOptionApiMode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Optional field to override the audience of the remote endpoint.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use the authentication property instead.
    ${ApiFlowOptionAudienceOverride},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [ADT.Models.IAuthentication[]]
    # Optional and for advanced used only.
    # A list of authentication methods to use when accessing the Azure Data Transfer API Flow.
    # If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
    ${ApiFlowOptionAuthentication},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Unique CNAME to represent the Azure Data Transfer API Flow instance
    ${ApiFlowOptionCname},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("UserIdentity", "ServiceIdentity")]
    [ADT.Category('Body')]
    [System.String]
    # Determines which identity to use for extracting the user token for Azure Data Transfer API Flow.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use the authentication property instead.
    ${ApiFlowOptionIdentityTranslation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Remote stub app registration Client ID.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use the authentication property instead.
    ${ApiFlowOptionRemoteCallingModeClientId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Remote host to which communication needs to be made.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use the remoteEndpointSettings.endpoint property instead.
    ${ApiFlowOptionRemoteEndpoint},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Sender's app user assigned Manage Identity client ID.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use the authentication property instead.
    ${ApiFlowOptionSenderClientId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Id of the connection
    ${ConnectionId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Location of the connection
    ${ConnectionLocation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Name of the subscription with the connection
    ${ConnectionSubscriptionName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Event Hub Consumer Group
    ${ConsumerGroup},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The URI to the customer managed key for this flow
    ${CustomerManagedKeyVaultUri},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Blob", "Table")]
    [ADT.Category('Body')]
    [System.String]
    # Type of data to transfer via the flow.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use a FlowProfile resource instead.
    ${DataType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [System.String[]]
    # The destination endpoints of the stream
    ${DestinationEndpoint},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [System.Int64[]]
    # The destination endpoint ports of the stream
    ${DestinationEndpointPort},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Event Hub ID
    ${EventHubId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("ServiceBus", "EventHub", "ApiEndpoint", "ApiSDK", "Video", "Blob", "Table")]
    [ADT.Category('Body')]
    [System.String]
    # The Flow's data class.
    ${FlowDataType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # A description of the FlowProfile and its rulesets.
    # The description should describe the flowprofile's purpose and rulesets applied.
    ${FlowProfileDescription},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # A guid represented as a string for the FlowProfile resource, assigned by the system.
    ${FlowProfileId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The name of the FlowProfile.
    ${FlowProfileName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The name of the parent Pipeline Azure resource associated with this FlowProfile.
    ${FlowProfilePipeline},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Messaging", "API", "Stream", "Files", "SoftwareArtifacts", "Complex")]
    [ADT.Category('Body')]
    [System.String]
    # The data replication scenario handled by this FlowProfile.
    # Please note, that this value cannot be updated after creation.
    # See the FlowProfilePatchProperties to see updateable properties.
    ${FlowProfileReplicationScenario},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Obsolete", "Enabled")]
    [ADT.Category('Body')]
    [System.String]
    # The operational status of the FlowProfile.
    ${FlowProfileStatus},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
    [ADT.Category('Body')]
    [System.String]
    # The flow type for this flow.
    # The property has reached end of life support starting version 2025-05-30-preview.
    # Please create and use a FlowProfile resource instead.
    ${FlowType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
    [ADT.Category('Body')]
    [System.String]
    # Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    ${IdentityType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("BlobTransport", "Standard", "Premium")]
    [ADT.Category('Body')]
    [System.String]
    # Billing tier for this messaging flow
    ${MessagingOptionBillingTier},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [ADT.Category('Body')]
    [System.String]
    # Field indicating whether to enable guaranteed delivery on the flow or not.
    # The default disabled option chooses speed over consistency.
    # When enabled, messages are delivered with minimal delay, but delivery is not guaranteed under all conditions
    ${MessagingOptionPerformancePriority},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The passphrase used for SRT streams
    ${Passphrase},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # A user defined name of the 3rd Party Artifact that is being procured.
    ${PlanName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The 3rd Party artifact that is being procured.
    # E.g.
    # NewRelic.
    # Product maps to the OfferID specified for the artifact at the time of Data Market onboarding.
    ${PlanProduct},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
    ${PlanPromotionCode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The publisher of the 3rd Party Artifact that is being bought.
    # E.g.
    # NewRelic
    ${PlanPublisher},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The version of the desired product/artifact.
    ${PlanVersion},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Name of the connection
    ${PropertiesConnectionName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [ADT.Models.IAuthentication[]]
    # Optional and for advanced used only.
    # A list of authentication methods to use when accessing the remote endpoint.
    # If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
    ${RemoteEndpointSettingAuthentication},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The remote endpoint uri all API calls.
    ${RemoteEndpointSettingEndpoint},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Connection ID associated with this schema
    ${SchemaConnectionId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Content of the schema
    ${SchemaContent},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Send", "Receive")]
    [ADT.Category('Body')]
    [System.String]
    # The direction of the schema.
    ${SchemaDirection},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # ID associated with this schema
    ${SchemaId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Name of the schema
    ${SchemaName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("New", "Approved")]
    [ADT.Category('Body')]
    [System.String]
    # Status of the schema
    ${SchemaStatus},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
    [ADT.Category('Body')]
    [System.String]
    # The Schema Type
    ${SchemaType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Uri containing SAS token for the zipped schema
    ${SchemaUri},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Service Bus Queue ID
    ${ServiceBusQueueId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [System.String[]]
    # A source IP address or CIDR range
    ${SourceAddress},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
    [ADT.Category('Body')]
    [System.String]
    # Status of the current flow
    ${Status},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Storage Account ID
    ${StorageAccountId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Storage Account
    ${StorageAccountName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Storage Container Name
    ${StorageContainerName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Storage Table Name
    ${StorageTableName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The flow stream identifier
    ${StreamId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Int64]
    # The latency of the stream in milliseconds
    ${StreamLatency},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("UDP", "SRT", "RTP")]
    [ADT.Category('Body')]
    [System.String]
    # The protocol of the stream
    ${StreamProtocol},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [ADT.Runtime.Info(PossibleTypes=([ADT.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [ADT.Runtime.Info(PossibleTypes=([ADT.Models.IUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The set of user assigned identities associated with the resource.
    # The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
    # The dictionary values can be empty objects ({}) in requests.
    ${UserAssignedIdentity},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [ADT.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [ADT.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [ADT.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('ADT.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [ADT.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.DataTransfer.private\New-AzDataTransferFlow_CreateExpanded';
            CreateViaJsonFilePath = 'Az.DataTransfer.private\New-AzDataTransferFlow_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.DataTransfer.private\New-AzDataTransferFlow_CreateViaJsonString';
        }
        if (('CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [ADT.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [ADT.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [ADT.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [ADT.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
