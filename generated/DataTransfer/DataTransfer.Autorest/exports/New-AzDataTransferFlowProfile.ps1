
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new FlowProfile or create an existing one.
.Description
Create a new FlowProfile or create an existing one.
.Example
New-AzDataTransferFlowProfile -Name "files-flowprofile" -PipelineName "Pipeline01" -ResourceGroupName "ResourceGroup01" -Location "EastUS" -ReplicationScenario "Files" -Status "Enabled" -Description "Basic FlowProfile for standard file transfers"
.Example
New-AzDataTransferFlowProfile -Name "messaging-flowprofile" -PipelineName "Pipeline01" -ResourceGroupName "ResourceGroup01" -Location "EastUS" -ReplicationScenario "Messaging" -Status "Enabled" -Description "Messaging FlowProfile with antivirus scanning" -AntivirusAvSolution @("Defender")

.Outputs
ADT.Models.IFlowProfile
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

MIMEFILTER <IMimeTypeFilter[]>: Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer to the MimeTypeFiler model.
  [Extension <List<String>>]: A list of file extensions associated with the specified Media type (e.g., .json, .png). To specify files with no extension, use an empty string ""."
  [Media <String>]: The Media Types (f.k.a MIME types), following IANA standards (e.g., application/json, image/png). For a more detailed list of allowed media types please refer to the Tika documentation: https://github.com/apache/tika/blob/main/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml

TEXTMATCHINGDENY <ITextMatch[]>: A list of text patterns to block, each with matching rules and case sensitivity options.
  CaseSensitivity <String>: Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.
  MatchType <String>: Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.
  Text <String>: The word or phrase to match against replicated content. A phrase with spaces will be considered a single substring.
.Link
https://learn.microsoft.com/powershell/module/az.datatransfer/new-azdatatransferflowprofile
#>
function New-AzDataTransferFlowProfile {
[OutputType([ADT.Models.IFlowProfile])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('FlowProfileName')]
    [ADT.Category('Path')]
    [System.String]
    # The name of the FlowProfile resource to operate on.
    # Must be 3 to 64 characters long and contain only alphanumeric characters or hyphens.
    ${Name},

    [Parameter(Mandatory)]
    [ADT.Category('Path')]
    [System.String]
    # The name of the pipeline on which to operate.
    ${PipelineName},

    [Parameter(Mandatory)]
    [ADT.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [ADT.Category('Path')]
    [ADT.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.PSArgumentCompleterAttribute("Defender", "ClamAv")]
    [ADT.Category('Body')]
    [System.String[]]
    # Optional.
    # The list of antiviruses to be used as a scanning solution for replicating data.
    ${AntivirusAvSolution},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Double]
    # Optional.
    # Provides the multiplication value for an archive in total based on the initial object being validated.
    # This value takes the root object size and multiplies it by this value to create a maximum.
    # Once this maximum is exceeded, the archive is failed.
    # Used to detect and block archives with suspiciously high compression (e.g., zip bombs).
    ${ArchiveMaximumCompressionRatioLimit},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Int64]
    # Optional.
    # The maximum depth of nested archives that can be expanded.
    # Limits how many layers of embedded archives will be processed.
    # Archives exceeding the max limit will be denied for replication.
    ${ArchiveMaximumDepthLimit},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Int64]
    # Optional.
    # The combined maximum size (in bytes) of all extracted files that an expanded archive is allowed to reach.
    # Archives exceeding the max limit will be denied for replication.
    ${ArchiveMaximumExpansionSizeLimit},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Int64]
    # Optional.
    # Default is 0.
    # The minimum archive file size (in bytes) required to trigger expansion during replication.
    # Any archive file size below the configured threshold will skip the rest of the configured rulesets for archives.
    ${ArchiveMinimumSizeForExpansion},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Int64]
    # Optional.
    # Specifies the maximum allowed size (in bytes) for files to be replicated.
    # Any file size greater than maximum will be denied replication.
    ${DataSizeMaximum},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.Int64]
    # Optional.
    # Default is 0.
    # Specifies the minimum required size (in bytes) for a file to be eligible for replication.
    # Any file size less than minimum will be denied replication.
    ${DataSizeMinimum},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # A user-defined description of the FlowProfile.
    ${Description},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
    [ADT.Category('Body')]
    [System.String]
    # Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
    ${IdentityType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [ADT.Models.IMimeTypeFilter[]]
    # Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered.
    # For more detail, please refer to the MimeTypeFiler model.
    ${MimeFilter},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Allow", "Deny")]
    [ADT.Category('Body')]
    [System.String]
    # Specifies whether the filter is an allow list or deny list.
    # For more detail, please refer to the FilterType model.
    ${MimeFilterType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Messaging", "API", "Stream", "Files", "SoftwareArtifacts", "Complex")]
    [ADT.Category('Body')]
    [System.String]
    # The data replication scenario handled by this FlowProfile.
    # Please not, that this value cannot be updated after creation.
    ${ReplicationScenario},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Obsolete", "Enabled")]
    [ADT.Category('Body')]
    [System.String]
    # The operational status of the FlowProfile.
    ${Status},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [ADT.Runtime.Info(PossibleTypes=([ADT.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [ADT.Models.ITextMatch[]]
    # A list of text patterns to block, each with matching rules and case sensitivity options.
    ${TextMatchingDeny},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [ADT.Runtime.Info(PossibleTypes=([ADT.Models.IUserAssignedIdentities]))]
    [System.Collections.Hashtable]
    # The set of user assigned identities associated with the resource.
    # The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
    # The dictionary values can be empty objects ({}) in requests.
    ${UserAssignedIdentity},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The default XML namespace used for schema validation.
    ${XmlFilterDefaultNamespace},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.PSArgumentCompleterAttribute("Inline")]
    [ADT.Category('Body')]
    [System.String]
    # Defines the method for referencing the xml schema.
    ${XmlFilterReference},

    [Parameter(ParameterSetName='CreateExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # The inline XSD schema to be used for validation.
    ${XmlFilterSchema},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [ADT.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [ADT.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [ADT.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('ADT.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [ADT.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.DataTransfer.private\New-AzDataTransferFlowProfile_CreateExpanded';
            CreateViaJsonFilePath = 'Az.DataTransfer.private\New-AzDataTransferFlowProfile_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.DataTransfer.private\New-AzDataTransferFlowProfile_CreateViaJsonString';
        }
        if (('CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [ADT.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [ADT.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [ADT.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [ADT.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
