
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Executes a privileged or administrative action on the specified Pipeline.
.Description
Executes a privileged or administrative action on the specified Pipeline.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
ADT.Models.IAction
.Inputs
ADT.Models.IDataTransferIdentity
.Outputs
ADT.Models.IPipeline
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ACTION <IAction>: The action to be executed.
  Target <List<String>>: Targets for the action
  TargetType <String>: Type of target to execute the action on
  Type <String>: Type of action to be executed
  [Justification <String>]: Business justification for the action

INPUTOBJECT <IDataTransferIdentity>: Identity Parameter
  [ConnectionName <String>]: The name for the connection to perform the operation on.
  [FlowName <String>]: The name for the flow to perform the operation on.
  [FlowProfileName <String>]: The name of the FlowProfile resource to operate on. Must be 3 to 64 characters long and contain only alphanumeric characters or hyphens.
  [Id <String>]: Resource identity path
  [PipelineName <String>]: The name of the pipeline on which to operate.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
.Link
https://learn.microsoft.com/powershell/module/az.datatransfer/invoke-azdatatransferexecutepipelineaction
#>
function Invoke-AzDataTransferExecutePipelineAction {
[OutputType([ADT.Models.IPipeline])]
[CmdletBinding(DefaultParameterSetName='ExecuteExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Execute', Mandatory)]
    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaJsonString', Mandatory)]
    [ADT.Category('Path')]
    [System.String]
    # The name of the pipeline on which to operate.
    ${PipelineName},

    [Parameter(ParameterSetName='Execute', Mandatory)]
    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaJsonString', Mandatory)]
    [ADT.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='Execute')]
    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaJsonFilePath')]
    [Parameter(ParameterSetName='ExecuteViaJsonString')]
    [ADT.Category('Path')]
    [ADT.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='ExecuteViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [ADT.Category('Path')]
    [ADT.Models.IDataTransferIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='Execute', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ExecuteViaIdentity', Mandatory, ValueFromPipeline)]
    [ADT.Category('Body')]
    [ADT.Models.IAction]
    # The action to be executed.
    ${Action},

    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded', Mandatory)]
    [ADT.PSArgumentCompleterAttribute("AllowUpdates", "ForceDisable")]
    [ADT.Category('Body')]
    [System.String]
    # Type of action to be executed
    ${ActionType},

    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded', Mandatory)]
    [AllowEmptyCollection()]
    [ADT.Category('Body')]
    [System.String[]]
    # Targets for the action
    ${Target},

    [Parameter(ParameterSetName='ExecuteExpanded', Mandatory)]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded', Mandatory)]
    [ADT.PSArgumentCompleterAttribute("Pipeline", "Connection", "FlowType")]
    [ADT.Category('Body')]
    [System.String]
    # Type of target to execute the action on
    ${TargetType},

    [Parameter(ParameterSetName='ExecuteExpanded')]
    [Parameter(ParameterSetName='ExecuteViaIdentityExpanded')]
    [ADT.Category('Body')]
    [System.String]
    # Business justification for the action
    ${Justification},

    [Parameter(ParameterSetName='ExecuteViaJsonFilePath', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Execute operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='ExecuteViaJsonString', Mandatory)]
    [ADT.Category('Body')]
    [System.String]
    # Json string supplied to the Execute operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [ADT.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [ADT.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [ADT.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [ADT.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [ADT.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('ADT.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $mapping = @{
            Execute = 'Az.DataTransfer.private\Invoke-AzDataTransferExecutePipelineAction_Execute';
            ExecuteExpanded = 'Az.DataTransfer.private\Invoke-AzDataTransferExecutePipelineAction_ExecuteExpanded';
            ExecuteViaIdentity = 'Az.DataTransfer.private\Invoke-AzDataTransferExecutePipelineAction_ExecuteViaIdentity';
            ExecuteViaIdentityExpanded = 'Az.DataTransfer.private\Invoke-AzDataTransferExecutePipelineAction_ExecuteViaIdentityExpanded';
            ExecuteViaJsonFilePath = 'Az.DataTransfer.private\Invoke-AzDataTransferExecutePipelineAction_ExecuteViaJsonFilePath';
            ExecuteViaJsonString = 'Az.DataTransfer.private\Invoke-AzDataTransferExecutePipelineAction_ExecuteViaJsonString';
        }
        if (('Execute', 'ExecuteExpanded', 'ExecuteViaJsonFilePath', 'ExecuteViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
