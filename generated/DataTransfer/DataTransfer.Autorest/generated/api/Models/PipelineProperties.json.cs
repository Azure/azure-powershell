// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Properties of pipeline</summary>
    public partial class PipelineProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(ADT.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="ADT.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref ADT.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(ADT.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref ADT.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="ADT.Runtime.Json.JsonNode"/> into an instance of ADT.Models.IPipelineProperties.
        /// </summary>
        /// <param name="node">a <see cref="ADT.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of ADT.Models.IPipelineProperties.</returns>
        public static ADT.Models.IPipelineProperties FromJson(ADT.Runtime.Json.JsonNode node)
        {
            return node is ADT.Runtime.Json.JsonObject json ? new PipelineProperties(json) : null;
        }

        /// <summary>
        /// Deserializes a ADT.Runtime.Json.JsonObject into a new instance of <see cref="PipelineProperties" />.
        /// </summary>
        /// <param name="json">A ADT.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PipelineProperties(ADT.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_remoteCloud = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("remoteCloud"), out var __jsonRemoteCloud) ? (string)__jsonRemoteCloud : (string)_remoteCloud;}
            {_displayName = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("displayName"), out var __jsonDisplayName) ? (string)__jsonDisplayName : (string)_displayName;}
            {_connection = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("connections"), out var __jsonConnections) ? If( __jsonConnections as ADT.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<ADT.Models.IReadPipelineConnection>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(ADT.Models.IReadPipelineConnection) (ADT.Models.ReadPipelineConnection.FromJson(__u) )) ))() : null : _connection;}
            {_subscriber = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("subscribers"), out var __jsonSubscribers) ? If( __jsonSubscribers as ADT.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<System.Collections.Generic.List<ADT.Models.ISubscriber>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__q, (__p)=>(ADT.Models.ISubscriber) (ADT.Models.Subscriber.FromJson(__p) )) ))() : null : _subscriber;}
            {_provisioningState = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)_provisioningState;}
            {_policy = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("policies"), out var __jsonPolicies) ? If( __jsonPolicies as ADT.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is ADT.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : _policy;}
            {_flowType = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("flowTypes"), out var __jsonFlowTypes) ? If( __jsonFlowTypes as ADT.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is ADT.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : _flowType;}
            {_disabledFlowType = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("disabledFlowTypes"), out var __jsonDisabledFlowTypes) ? If( __jsonDisabledFlowTypes as ADT.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__b, (__a)=>(string) (__a is ADT.Runtime.Json.JsonString ___z ? (string)(___z.ToString()) : null)) ))() : null : _disabledFlowType;}
            {_quarantineDownloadStorageAccount = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("quarantineDownloadStorageAccount"), out var __jsonQuarantineDownloadStorageAccount) ? (string)__jsonQuarantineDownloadStorageAccount : (string)_quarantineDownloadStorageAccount;}
            {_quarantineDownloadStorageContainer = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("quarantineDownloadStorageContainer"), out var __jsonQuarantineDownloadStorageContainer) ? (string)__jsonQuarantineDownloadStorageContainer : (string)_quarantineDownloadStorageContainer;}
            {_status = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)_status;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PipelineProperties" /> into a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="ADT.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="ADT.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PipelineProperties" /> as a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </returns>
        public ADT.Runtime.Json.JsonNode ToJson(ADT.Runtime.Json.JsonObject container, ADT.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new ADT.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != (((object)this._remoteCloud)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._remoteCloud.ToString()) : null, "remoteCloud" ,container.Add );
            AddIf( null != (((object)this._displayName)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._displayName.ToString()) : null, "displayName" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._connection)
                {
                    var __w = new ADT.Runtime.Json.XNodeArray();
                    foreach( var __x in this._connection )
                    {
                        AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                    }
                    container.Add("connections",__w);
                }
            }
            if (null != this._subscriber)
            {
                var __r = new ADT.Runtime.Json.XNodeArray();
                foreach( var __s in this._subscriber )
                {
                    AddIf(__s?.ToJson(null, serializationMode) ,__r.Add);
                }
                container.Add("subscribers",__r);
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            if (null != this._policy)
            {
                var __m = new ADT.Runtime.Json.XNodeArray();
                foreach( var __n in this._policy )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("policies",__m);
            }
            if (null != this._flowType)
            {
                var __h = new ADT.Runtime.Json.XNodeArray();
                foreach( var __i in this._flowType )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("flowTypes",__h);
            }
            if (null != this._disabledFlowType)
            {
                var __c = new ADT.Runtime.Json.XNodeArray();
                foreach( var __d in this._disabledFlowType )
                {
                    AddIf(null != (((object)__d)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__d.ToString()) : null ,__c.Add);
                }
                container.Add("disabledFlowTypes",__c);
            }
            AddIf( null != (((object)this._quarantineDownloadStorageAccount)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._quarantineDownloadStorageAccount.ToString()) : null, "quarantineDownloadStorageAccount" ,container.Add );
            AddIf( null != (((object)this._quarantineDownloadStorageContainer)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._quarantineDownloadStorageContainer.ToString()) : null, "quarantineDownloadStorageContainer" ,container.Add );
            AddIf( null != (((object)this._status)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}