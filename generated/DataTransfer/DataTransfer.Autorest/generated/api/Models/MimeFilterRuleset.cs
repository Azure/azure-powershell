// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Rules for filtering files based on Media types (f.k.a MIME types).</summary>
    public partial class MimeFilterRuleset :
        ADT.Models.IMimeFilterRuleset,
        ADT.Models.IMimeFilterRulesetInternal
    {

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> _filter;

        /// <summary>
        /// Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer
        /// to the MimeTypeFiler model.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> Filter { get => this._filter; set => this._filter = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>
        /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Creates an new <see cref="MimeFilterRuleset" /> instance.</summary>
        public MimeFilterRuleset()
        {

        }
    }
    /// Rules for filtering files based on Media types (f.k.a MIME types).
    public partial interface IMimeFilterRuleset :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer
        /// to the MimeTypeFiler model.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer to the MimeTypeFiler model.",
        SerializedName = @"filters",
        PossibleTypes = new [] { typeof(ADT.Models.IMimeTypeFilter) })]
        System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> Filter { get; set; }
        /// <summary>
        /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Allow", "Deny")]
        string Type { get; set; }

    }
    /// Rules for filtering files based on Media types (f.k.a MIME types).
    internal partial interface IMimeFilterRulesetInternal

    {
        /// <summary>
        /// Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer
        /// to the MimeTypeFiler model.
        /// </summary>
        System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> Filter { get; set; }
        /// <summary>
        /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Allow", "Deny")]
        string Type { get; set; }

    }
}