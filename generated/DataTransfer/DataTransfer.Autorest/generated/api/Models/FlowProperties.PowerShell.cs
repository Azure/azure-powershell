// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using ADT.Runtime.PowerShell;

    /// <summary>Properties of flow</summary>
    [System.ComponentModel.TypeConverter(typeof(FlowPropertiesTypeConverter))]
    public partial class FlowProperties
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="ADT.Models.FlowProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="ADT.Models.IFlowProperties" />.</returns>
        public static ADT.Models.IFlowProperties DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new FlowProperties(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="ADT.Models.FlowProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="ADT.Models.IFlowProperties" />.</returns>
        public static ADT.Models.IFlowProperties DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new FlowProperties(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="ADT.Models.FlowProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal FlowProperties(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Connection"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Connection = (ADT.Models.ISelectedResource) content.GetValueForProperty("Connection",((ADT.Models.IFlowPropertiesInternal)this).Connection, ADT.Models.SelectedResourceTypeConverter.ConvertFrom);
            }
            if (content.Contains("Schema"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Schema = (ADT.Models.ISchema) content.GetValueForProperty("Schema",((ADT.Models.IFlowPropertiesInternal)this).Schema, ADT.Models.SchemaTypeConverter.ConvertFrom);
            }
            if (content.Contains("MessagingOption"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).MessagingOption = (ADT.Models.IMessagingOptions) content.GetValueForProperty("MessagingOption",((ADT.Models.IFlowPropertiesInternal)this).MessagingOption, ADT.Models.MessagingOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ApiFlowOption"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOption = (ADT.Models.IApiFlowOptions) content.GetValueForProperty("ApiFlowOption",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOption, ADT.Models.ApiFlowOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SourceAddress"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SourceAddress = (ADT.Models.IStreamSourceAddresses) content.GetValueForProperty("SourceAddress",((ADT.Models.IFlowPropertiesInternal)this).SourceAddress, ADT.Models.StreamSourceAddressesTypeConverter.ConvertFrom);
            }
            if (content.Contains("FlowId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).FlowId = (string) content.GetValueForProperty("FlowId",((ADT.Models.IFlowPropertiesInternal)this).FlowId, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultUri"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).KeyVaultUri = (string) content.GetValueForProperty("KeyVaultUri",((ADT.Models.IFlowPropertiesInternal)this).KeyVaultUri, global::System.Convert.ToString);
            }
            if (content.Contains("LinkStatus"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).LinkStatus = (string) content.GetValueForProperty("LinkStatus",((ADT.Models.IFlowPropertiesInternal)this).LinkStatus, global::System.Convert.ToString);
            }
            if (content.Contains("LinkedFlowId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).LinkedFlowId = (string) content.GetValueForProperty("LinkedFlowId",((ADT.Models.IFlowPropertiesInternal)this).LinkedFlowId, global::System.Convert.ToString);
            }
            if (content.Contains("Status"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Status = (string) content.GetValueForProperty("Status",((ADT.Models.IFlowPropertiesInternal)this).Status, global::System.Convert.ToString);
            }
            if (content.Contains("ForceDisabledStatus"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ForceDisabledStatus = (System.Collections.Generic.List<string>) content.GetValueForProperty("ForceDisabledStatus",((ADT.Models.IFlowPropertiesInternal)this).ForceDisabledStatus, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("StorageAccountName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageAccountName = (string) content.GetValueForProperty("StorageAccountName",((ADT.Models.IFlowPropertiesInternal)this).StorageAccountName, global::System.Convert.ToString);
            }
            if (content.Contains("StorageAccountId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageAccountId = (string) content.GetValueForProperty("StorageAccountId",((ADT.Models.IFlowPropertiesInternal)this).StorageAccountId, global::System.Convert.ToString);
            }
            if (content.Contains("StorageContainerName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageContainerName = (string) content.GetValueForProperty("StorageContainerName",((ADT.Models.IFlowPropertiesInternal)this).StorageContainerName, global::System.Convert.ToString);
            }
            if (content.Contains("StorageTableName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageTableName = (string) content.GetValueForProperty("StorageTableName",((ADT.Models.IFlowPropertiesInternal)this).StorageTableName, global::System.Convert.ToString);
            }
            if (content.Contains("ServiceBusQueueId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ServiceBusQueueId = (string) content.GetValueForProperty("ServiceBusQueueId",((ADT.Models.IFlowPropertiesInternal)this).ServiceBusQueueId, global::System.Convert.ToString);
            }
            if (content.Contains("FlowType"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).FlowType = (string) content.GetValueForProperty("FlowType",((ADT.Models.IFlowPropertiesInternal)this).FlowType, global::System.Convert.ToString);
            }
            if (content.Contains("DataType"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).DataType = (string) content.GetValueForProperty("DataType",((ADT.Models.IFlowPropertiesInternal)this).DataType, global::System.Convert.ToString);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((ADT.Models.IFlowPropertiesInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("Policy"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Policy = (System.Collections.Generic.List<string>) content.GetValueForProperty("Policy",((ADT.Models.IFlowPropertiesInternal)this).Policy, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("CustomerManagedKeyVaultUri"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).CustomerManagedKeyVaultUri = (string) content.GetValueForProperty("CustomerManagedKeyVaultUri",((ADT.Models.IFlowPropertiesInternal)this).CustomerManagedKeyVaultUri, global::System.Convert.ToString);
            }
            if (content.Contains("StreamId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StreamId = (string) content.GetValueForProperty("StreamId",((ADT.Models.IFlowPropertiesInternal)this).StreamId, global::System.Convert.ToString);
            }
            if (content.Contains("StreamProtocol"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StreamProtocol = (string) content.GetValueForProperty("StreamProtocol",((ADT.Models.IFlowPropertiesInternal)this).StreamProtocol, global::System.Convert.ToString);
            }
            if (content.Contains("StreamLatency"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StreamLatency = (long?) content.GetValueForProperty("StreamLatency",((ADT.Models.IFlowPropertiesInternal)this).StreamLatency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("Passphrase"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Passphrase = (string) content.GetValueForProperty("Passphrase",((ADT.Models.IFlowPropertiesInternal)this).Passphrase, global::System.Convert.ToString);
            }
            if (content.Contains("DestinationEndpoint"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpoint = (System.Collections.Generic.List<string>) content.GetValueForProperty("DestinationEndpoint",((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpoint, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("DestinationEndpointPort"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpointPort = (System.Collections.Generic.List<long>) content.GetValueForProperty("DestinationEndpointPort",((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpointPort, __y => TypeConverterExtensions.SelectToList<long>(__y, (__w)=> (long) global::System.Convert.ChangeType(__w, typeof(long))));
            }
            if (content.Contains("EventHubId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).EventHubId = (string) content.GetValueForProperty("EventHubId",((ADT.Models.IFlowPropertiesInternal)this).EventHubId, global::System.Convert.ToString);
            }
            if (content.Contains("ConsumerGroup"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConsumerGroup = (string) content.GetValueForProperty("ConsumerGroup",((ADT.Models.IFlowPropertiesInternal)this).ConsumerGroup, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaId = (string) content.GetValueForProperty("SchemaId",((ADT.Models.IFlowPropertiesInternal)this).SchemaId, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaConnectionId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaConnectionId = (string) content.GetValueForProperty("SchemaConnectionId",((ADT.Models.IFlowPropertiesInternal)this).SchemaConnectionId, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaStatus"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaStatus = (string) content.GetValueForProperty("SchemaStatus",((ADT.Models.IFlowPropertiesInternal)this).SchemaStatus, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaName = (string) content.GetValueForProperty("SchemaName",((ADT.Models.IFlowPropertiesInternal)this).SchemaName, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaContent"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaContent = (string) content.GetValueForProperty("SchemaContent",((ADT.Models.IFlowPropertiesInternal)this).SchemaContent, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaDirection"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaDirection = (string) content.GetValueForProperty("SchemaDirection",((ADT.Models.IFlowPropertiesInternal)this).SchemaDirection, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaUri"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaUri = (string) content.GetValueForProperty("SchemaUri",((ADT.Models.IFlowPropertiesInternal)this).SchemaUri, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaType"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaType = (string) content.GetValueForProperty("SchemaType",((ADT.Models.IFlowPropertiesInternal)this).SchemaType, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionRemoteEndpoint"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteEndpoint = (string) content.GetValueForProperty("ApiFlowOptionRemoteEndpoint",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteEndpoint, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionCname"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionCname = (string) content.GetValueForProperty("ApiFlowOptionCname",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionCname, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionApiMode"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionApiMode = (string) content.GetValueForProperty("ApiFlowOptionApiMode",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionApiMode, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionIdentityTranslation"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionIdentityTranslation = (string) content.GetValueForProperty("ApiFlowOptionIdentityTranslation",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionIdentityTranslation, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionAudienceOverride"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionAudienceOverride = (string) content.GetValueForProperty("ApiFlowOptionAudienceOverride",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionAudienceOverride, global::System.Convert.ToString);
            }
            if (content.Contains("SourceAddressSourceAddresses"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SourceAddressSourceAddresses = (System.Collections.Generic.List<string>) content.GetValueForProperty("SourceAddressSourceAddresses",((ADT.Models.IFlowPropertiesInternal)this).SourceAddressSourceAddresses, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ConnectionName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionName = (string) content.GetValueForProperty("ConnectionName",((ADT.Models.IFlowPropertiesInternal)this).ConnectionName, global::System.Convert.ToString);
            }
            if (content.Contains("ConnectionId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionId = (string) content.GetValueForProperty("ConnectionId",((ADT.Models.IFlowPropertiesInternal)this).ConnectionId, global::System.Convert.ToString);
            }
            if (content.Contains("ConnectionLocation"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionLocation = (string) content.GetValueForProperty("ConnectionLocation",((ADT.Models.IFlowPropertiesInternal)this).ConnectionLocation, global::System.Convert.ToString);
            }
            if (content.Contains("ConnectionSubscriptionName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionSubscriptionName = (string) content.GetValueForProperty("ConnectionSubscriptionName",((ADT.Models.IFlowPropertiesInternal)this).ConnectionSubscriptionName, global::System.Convert.ToString);
            }
            if (content.Contains("MessagingOptionBillingTier"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).MessagingOptionBillingTier = (string) content.GetValueForProperty("MessagingOptionBillingTier",((ADT.Models.IFlowPropertiesInternal)this).MessagingOptionBillingTier, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionSenderClientId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionSenderClientId = (string) content.GetValueForProperty("ApiFlowOptionSenderClientId",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionSenderClientId, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionRemoteCallingModeClientId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteCallingModeClientId = (string) content.GetValueForProperty("ApiFlowOptionRemoteCallingModeClientId",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteCallingModeClientId, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="ADT.Models.FlowProperties"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal FlowProperties(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Connection"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Connection = (ADT.Models.ISelectedResource) content.GetValueForProperty("Connection",((ADT.Models.IFlowPropertiesInternal)this).Connection, ADT.Models.SelectedResourceTypeConverter.ConvertFrom);
            }
            if (content.Contains("Schema"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Schema = (ADT.Models.ISchema) content.GetValueForProperty("Schema",((ADT.Models.IFlowPropertiesInternal)this).Schema, ADT.Models.SchemaTypeConverter.ConvertFrom);
            }
            if (content.Contains("MessagingOption"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).MessagingOption = (ADT.Models.IMessagingOptions) content.GetValueForProperty("MessagingOption",((ADT.Models.IFlowPropertiesInternal)this).MessagingOption, ADT.Models.MessagingOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("ApiFlowOption"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOption = (ADT.Models.IApiFlowOptions) content.GetValueForProperty("ApiFlowOption",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOption, ADT.Models.ApiFlowOptionsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SourceAddress"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SourceAddress = (ADT.Models.IStreamSourceAddresses) content.GetValueForProperty("SourceAddress",((ADT.Models.IFlowPropertiesInternal)this).SourceAddress, ADT.Models.StreamSourceAddressesTypeConverter.ConvertFrom);
            }
            if (content.Contains("FlowId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).FlowId = (string) content.GetValueForProperty("FlowId",((ADT.Models.IFlowPropertiesInternal)this).FlowId, global::System.Convert.ToString);
            }
            if (content.Contains("KeyVaultUri"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).KeyVaultUri = (string) content.GetValueForProperty("KeyVaultUri",((ADT.Models.IFlowPropertiesInternal)this).KeyVaultUri, global::System.Convert.ToString);
            }
            if (content.Contains("LinkStatus"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).LinkStatus = (string) content.GetValueForProperty("LinkStatus",((ADT.Models.IFlowPropertiesInternal)this).LinkStatus, global::System.Convert.ToString);
            }
            if (content.Contains("LinkedFlowId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).LinkedFlowId = (string) content.GetValueForProperty("LinkedFlowId",((ADT.Models.IFlowPropertiesInternal)this).LinkedFlowId, global::System.Convert.ToString);
            }
            if (content.Contains("Status"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Status = (string) content.GetValueForProperty("Status",((ADT.Models.IFlowPropertiesInternal)this).Status, global::System.Convert.ToString);
            }
            if (content.Contains("ForceDisabledStatus"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ForceDisabledStatus = (System.Collections.Generic.List<string>) content.GetValueForProperty("ForceDisabledStatus",((ADT.Models.IFlowPropertiesInternal)this).ForceDisabledStatus, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("StorageAccountName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageAccountName = (string) content.GetValueForProperty("StorageAccountName",((ADT.Models.IFlowPropertiesInternal)this).StorageAccountName, global::System.Convert.ToString);
            }
            if (content.Contains("StorageAccountId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageAccountId = (string) content.GetValueForProperty("StorageAccountId",((ADT.Models.IFlowPropertiesInternal)this).StorageAccountId, global::System.Convert.ToString);
            }
            if (content.Contains("StorageContainerName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageContainerName = (string) content.GetValueForProperty("StorageContainerName",((ADT.Models.IFlowPropertiesInternal)this).StorageContainerName, global::System.Convert.ToString);
            }
            if (content.Contains("StorageTableName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StorageTableName = (string) content.GetValueForProperty("StorageTableName",((ADT.Models.IFlowPropertiesInternal)this).StorageTableName, global::System.Convert.ToString);
            }
            if (content.Contains("ServiceBusQueueId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ServiceBusQueueId = (string) content.GetValueForProperty("ServiceBusQueueId",((ADT.Models.IFlowPropertiesInternal)this).ServiceBusQueueId, global::System.Convert.ToString);
            }
            if (content.Contains("FlowType"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).FlowType = (string) content.GetValueForProperty("FlowType",((ADT.Models.IFlowPropertiesInternal)this).FlowType, global::System.Convert.ToString);
            }
            if (content.Contains("DataType"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).DataType = (string) content.GetValueForProperty("DataType",((ADT.Models.IFlowPropertiesInternal)this).DataType, global::System.Convert.ToString);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((ADT.Models.IFlowPropertiesInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("Policy"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Policy = (System.Collections.Generic.List<string>) content.GetValueForProperty("Policy",((ADT.Models.IFlowPropertiesInternal)this).Policy, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("CustomerManagedKeyVaultUri"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).CustomerManagedKeyVaultUri = (string) content.GetValueForProperty("CustomerManagedKeyVaultUri",((ADT.Models.IFlowPropertiesInternal)this).CustomerManagedKeyVaultUri, global::System.Convert.ToString);
            }
            if (content.Contains("StreamId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StreamId = (string) content.GetValueForProperty("StreamId",((ADT.Models.IFlowPropertiesInternal)this).StreamId, global::System.Convert.ToString);
            }
            if (content.Contains("StreamProtocol"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StreamProtocol = (string) content.GetValueForProperty("StreamProtocol",((ADT.Models.IFlowPropertiesInternal)this).StreamProtocol, global::System.Convert.ToString);
            }
            if (content.Contains("StreamLatency"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).StreamLatency = (long?) content.GetValueForProperty("StreamLatency",((ADT.Models.IFlowPropertiesInternal)this).StreamLatency, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("Passphrase"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).Passphrase = (string) content.GetValueForProperty("Passphrase",((ADT.Models.IFlowPropertiesInternal)this).Passphrase, global::System.Convert.ToString);
            }
            if (content.Contains("DestinationEndpoint"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpoint = (System.Collections.Generic.List<string>) content.GetValueForProperty("DestinationEndpoint",((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpoint, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("DestinationEndpointPort"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpointPort = (System.Collections.Generic.List<long>) content.GetValueForProperty("DestinationEndpointPort",((ADT.Models.IFlowPropertiesInternal)this).DestinationEndpointPort, __y => TypeConverterExtensions.SelectToList<long>(__y, (__w)=> (long) global::System.Convert.ChangeType(__w, typeof(long))));
            }
            if (content.Contains("EventHubId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).EventHubId = (string) content.GetValueForProperty("EventHubId",((ADT.Models.IFlowPropertiesInternal)this).EventHubId, global::System.Convert.ToString);
            }
            if (content.Contains("ConsumerGroup"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConsumerGroup = (string) content.GetValueForProperty("ConsumerGroup",((ADT.Models.IFlowPropertiesInternal)this).ConsumerGroup, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaId = (string) content.GetValueForProperty("SchemaId",((ADT.Models.IFlowPropertiesInternal)this).SchemaId, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaConnectionId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaConnectionId = (string) content.GetValueForProperty("SchemaConnectionId",((ADT.Models.IFlowPropertiesInternal)this).SchemaConnectionId, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaStatus"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaStatus = (string) content.GetValueForProperty("SchemaStatus",((ADT.Models.IFlowPropertiesInternal)this).SchemaStatus, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaName = (string) content.GetValueForProperty("SchemaName",((ADT.Models.IFlowPropertiesInternal)this).SchemaName, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaContent"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaContent = (string) content.GetValueForProperty("SchemaContent",((ADT.Models.IFlowPropertiesInternal)this).SchemaContent, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaDirection"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaDirection = (string) content.GetValueForProperty("SchemaDirection",((ADT.Models.IFlowPropertiesInternal)this).SchemaDirection, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaUri"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaUri = (string) content.GetValueForProperty("SchemaUri",((ADT.Models.IFlowPropertiesInternal)this).SchemaUri, global::System.Convert.ToString);
            }
            if (content.Contains("SchemaType"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SchemaType = (string) content.GetValueForProperty("SchemaType",((ADT.Models.IFlowPropertiesInternal)this).SchemaType, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionRemoteEndpoint"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteEndpoint = (string) content.GetValueForProperty("ApiFlowOptionRemoteEndpoint",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteEndpoint, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionCname"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionCname = (string) content.GetValueForProperty("ApiFlowOptionCname",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionCname, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionApiMode"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionApiMode = (string) content.GetValueForProperty("ApiFlowOptionApiMode",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionApiMode, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionIdentityTranslation"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionIdentityTranslation = (string) content.GetValueForProperty("ApiFlowOptionIdentityTranslation",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionIdentityTranslation, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionAudienceOverride"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionAudienceOverride = (string) content.GetValueForProperty("ApiFlowOptionAudienceOverride",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionAudienceOverride, global::System.Convert.ToString);
            }
            if (content.Contains("SourceAddressSourceAddresses"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).SourceAddressSourceAddresses = (System.Collections.Generic.List<string>) content.GetValueForProperty("SourceAddressSourceAddresses",((ADT.Models.IFlowPropertiesInternal)this).SourceAddressSourceAddresses, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ConnectionName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionName = (string) content.GetValueForProperty("ConnectionName",((ADT.Models.IFlowPropertiesInternal)this).ConnectionName, global::System.Convert.ToString);
            }
            if (content.Contains("ConnectionId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionId = (string) content.GetValueForProperty("ConnectionId",((ADT.Models.IFlowPropertiesInternal)this).ConnectionId, global::System.Convert.ToString);
            }
            if (content.Contains("ConnectionLocation"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionLocation = (string) content.GetValueForProperty("ConnectionLocation",((ADT.Models.IFlowPropertiesInternal)this).ConnectionLocation, global::System.Convert.ToString);
            }
            if (content.Contains("ConnectionSubscriptionName"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ConnectionSubscriptionName = (string) content.GetValueForProperty("ConnectionSubscriptionName",((ADT.Models.IFlowPropertiesInternal)this).ConnectionSubscriptionName, global::System.Convert.ToString);
            }
            if (content.Contains("MessagingOptionBillingTier"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).MessagingOptionBillingTier = (string) content.GetValueForProperty("MessagingOptionBillingTier",((ADT.Models.IFlowPropertiesInternal)this).MessagingOptionBillingTier, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionSenderClientId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionSenderClientId = (string) content.GetValueForProperty("ApiFlowOptionSenderClientId",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionSenderClientId, global::System.Convert.ToString);
            }
            if (content.Contains("ApiFlowOptionRemoteCallingModeClientId"))
            {
                ((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteCallingModeClientId = (string) content.GetValueForProperty("ApiFlowOptionRemoteCallingModeClientId",((ADT.Models.IFlowPropertiesInternal)this).ApiFlowOptionRemoteCallingModeClientId, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="FlowProperties" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="FlowProperties" /> model class.</returns>
        public static ADT.Models.IFlowProperties FromJsonString(string jsonText) => FromJson(ADT.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, ADT.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Properties of flow
    [System.ComponentModel.TypeConverter(typeof(FlowPropertiesTypeConverter))]
    public partial interface IFlowProperties

    {

    }
}