// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using ADT.Runtime.PowerShell;

    /// <summary>
    /// The allowed set of configurable rulesets for a FlowProfile resource, used during data replication. All rulesets are optional,
    /// and any ruleset configured will be applied to every applicable replicating data. Any data that fails a ruleset will be
    /// denied replication. If a ruleset is not configured then the ruleset is considered disabled and will not apply towards
    /// replicating data.
    /// </summary>
    [System.ComponentModel.TypeConverter(typeof(FlowProfileRulesetsTypeConverter))]
    public partial class FlowProfileRulesets
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="ADT.Models.FlowProfileRulesets"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>an instance of <see cref="ADT.Models.IFlowProfileRulesets" />.</returns>
        public static ADT.Models.IFlowProfileRulesets DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new FlowProfileRulesets(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="ADT.Models.FlowProfileRulesets"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>an instance of <see cref="ADT.Models.IFlowProfileRulesets" />.</returns>
        public static ADT.Models.IFlowProfileRulesets DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new FlowProfileRulesets(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="ADT.Models.FlowProfileRulesets"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal FlowProfileRulesets(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Antiviru"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).Antiviru = (ADT.Models.IAntivirusRuleset) content.GetValueForProperty("Antiviru",((ADT.Models.IFlowProfileRulesetsInternal)this).Antiviru, ADT.Models.AntivirusRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("Archive"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).Archive = (ADT.Models.IArchiveRuleset) content.GetValueForProperty("Archive",((ADT.Models.IFlowProfileRulesetsInternal)this).Archive, ADT.Models.ArchiveRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("DataSize"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).DataSize = (ADT.Models.IDataSizeRuleset) content.GetValueForProperty("DataSize",((ADT.Models.IFlowProfileRulesetsInternal)this).DataSize, ADT.Models.DataSizeRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("MimeFilter"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilter = (ADT.Models.IMimeFilterRuleset) content.GetValueForProperty("MimeFilter",((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilter, ADT.Models.MimeFilterRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("XmlFilter"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilter = (ADT.Models.IXmlFilterRuleset) content.GetValueForProperty("XmlFilter",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilter, ADT.Models.XmlFilterRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("TextMatching"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatching = (ADT.Models.ITextMatchingRuleset) content.GetValueForProperty("TextMatching",((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatching, ADT.Models.TextMatchingRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("AntivirusAvSolution"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).AntivirusAvSolution = (System.Collections.Generic.List<string>) content.GetValueForProperty("AntivirusAvSolution",((ADT.Models.IFlowProfileRulesetsInternal)this).AntivirusAvSolution, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ArchiveMinimumSizeForExpansion"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMinimumSizeForExpansion = (long?) content.GetValueForProperty("ArchiveMinimumSizeForExpansion",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMinimumSizeForExpansion, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ArchiveMaximumExpansionSizeLimit"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumExpansionSizeLimit = (long?) content.GetValueForProperty("ArchiveMaximumExpansionSizeLimit",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumExpansionSizeLimit, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ArchiveMaximumDepthLimit"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumDepthLimit = (long?) content.GetValueForProperty("ArchiveMaximumDepthLimit",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumDepthLimit, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ArchiveMaximumCompressionRatioLimit"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumCompressionRatioLimit = (double?) content.GetValueForProperty("ArchiveMaximumCompressionRatioLimit",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumCompressionRatioLimit, (__y)=> (double) global::System.Convert.ChangeType(__y, typeof(double)));
            }
            if (content.Contains("DataSizeMaximum"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMaximum = (long?) content.GetValueForProperty("DataSizeMaximum",((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMaximum, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DataSizeMinimum"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMinimum = (long?) content.GetValueForProperty("DataSizeMinimum",((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMinimum, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MimeFilterType"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterType = (string) content.GetValueForProperty("MimeFilterType",((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterType, global::System.Convert.ToString);
            }
            if (content.Contains("MimeFilterFilters"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterFilters = (System.Collections.Generic.List<ADT.Models.IMimeTypeFilter>) content.GetValueForProperty("MimeFilterFilters",((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterFilters, __y => TypeConverterExtensions.SelectToList<ADT.Models.IMimeTypeFilter>(__y, ADT.Models.MimeTypeFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("XmlFilterDefaultNamespace"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterDefaultNamespace = (string) content.GetValueForProperty("XmlFilterDefaultNamespace",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterDefaultNamespace, global::System.Convert.ToString);
            }
            if (content.Contains("XmlFilterReference"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterReference = (string) content.GetValueForProperty("XmlFilterReference",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterReference, global::System.Convert.ToString);
            }
            if (content.Contains("XmlFilterSchema"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterSchema = (string) content.GetValueForProperty("XmlFilterSchema",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterSchema, global::System.Convert.ToString);
            }
            if (content.Contains("TextMatchingDeny"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatchingDeny = (System.Collections.Generic.List<ADT.Models.ITextMatch>) content.GetValueForProperty("TextMatchingDeny",((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatchingDeny, __y => TypeConverterExtensions.SelectToList<ADT.Models.ITextMatch>(__y, ADT.Models.TextMatchTypeConverter.ConvertFrom));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="ADT.Models.FlowProfileRulesets"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal FlowProfileRulesets(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Antiviru"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).Antiviru = (ADT.Models.IAntivirusRuleset) content.GetValueForProperty("Antiviru",((ADT.Models.IFlowProfileRulesetsInternal)this).Antiviru, ADT.Models.AntivirusRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("Archive"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).Archive = (ADT.Models.IArchiveRuleset) content.GetValueForProperty("Archive",((ADT.Models.IFlowProfileRulesetsInternal)this).Archive, ADT.Models.ArchiveRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("DataSize"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).DataSize = (ADT.Models.IDataSizeRuleset) content.GetValueForProperty("DataSize",((ADT.Models.IFlowProfileRulesetsInternal)this).DataSize, ADT.Models.DataSizeRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("MimeFilter"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilter = (ADT.Models.IMimeFilterRuleset) content.GetValueForProperty("MimeFilter",((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilter, ADT.Models.MimeFilterRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("XmlFilter"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilter = (ADT.Models.IXmlFilterRuleset) content.GetValueForProperty("XmlFilter",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilter, ADT.Models.XmlFilterRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("TextMatching"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatching = (ADT.Models.ITextMatchingRuleset) content.GetValueForProperty("TextMatching",((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatching, ADT.Models.TextMatchingRulesetTypeConverter.ConvertFrom);
            }
            if (content.Contains("AntivirusAvSolution"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).AntivirusAvSolution = (System.Collections.Generic.List<string>) content.GetValueForProperty("AntivirusAvSolution",((ADT.Models.IFlowProfileRulesetsInternal)this).AntivirusAvSolution, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("ArchiveMinimumSizeForExpansion"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMinimumSizeForExpansion = (long?) content.GetValueForProperty("ArchiveMinimumSizeForExpansion",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMinimumSizeForExpansion, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ArchiveMaximumExpansionSizeLimit"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumExpansionSizeLimit = (long?) content.GetValueForProperty("ArchiveMaximumExpansionSizeLimit",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumExpansionSizeLimit, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ArchiveMaximumDepthLimit"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumDepthLimit = (long?) content.GetValueForProperty("ArchiveMaximumDepthLimit",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumDepthLimit, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("ArchiveMaximumCompressionRatioLimit"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumCompressionRatioLimit = (double?) content.GetValueForProperty("ArchiveMaximumCompressionRatioLimit",((ADT.Models.IFlowProfileRulesetsInternal)this).ArchiveMaximumCompressionRatioLimit, (__y)=> (double) global::System.Convert.ChangeType(__y, typeof(double)));
            }
            if (content.Contains("DataSizeMaximum"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMaximum = (long?) content.GetValueForProperty("DataSizeMaximum",((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMaximum, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("DataSizeMinimum"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMinimum = (long?) content.GetValueForProperty("DataSizeMinimum",((ADT.Models.IFlowProfileRulesetsInternal)this).DataSizeMinimum, (__y)=> (long) global::System.Convert.ChangeType(__y, typeof(long)));
            }
            if (content.Contains("MimeFilterType"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterType = (string) content.GetValueForProperty("MimeFilterType",((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterType, global::System.Convert.ToString);
            }
            if (content.Contains("MimeFilterFilters"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterFilters = (System.Collections.Generic.List<ADT.Models.IMimeTypeFilter>) content.GetValueForProperty("MimeFilterFilters",((ADT.Models.IFlowProfileRulesetsInternal)this).MimeFilterFilters, __y => TypeConverterExtensions.SelectToList<ADT.Models.IMimeTypeFilter>(__y, ADT.Models.MimeTypeFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("XmlFilterDefaultNamespace"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterDefaultNamespace = (string) content.GetValueForProperty("XmlFilterDefaultNamespace",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterDefaultNamespace, global::System.Convert.ToString);
            }
            if (content.Contains("XmlFilterReference"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterReference = (string) content.GetValueForProperty("XmlFilterReference",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterReference, global::System.Convert.ToString);
            }
            if (content.Contains("XmlFilterSchema"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterSchema = (string) content.GetValueForProperty("XmlFilterSchema",((ADT.Models.IFlowProfileRulesetsInternal)this).XmlFilterSchema, global::System.Convert.ToString);
            }
            if (content.Contains("TextMatchingDeny"))
            {
                ((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatchingDeny = (System.Collections.Generic.List<ADT.Models.ITextMatch>) content.GetValueForProperty("TextMatchingDeny",((ADT.Models.IFlowProfileRulesetsInternal)this).TextMatchingDeny, __y => TypeConverterExtensions.SelectToList<ADT.Models.ITextMatch>(__y, ADT.Models.TextMatchTypeConverter.ConvertFrom));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="FlowProfileRulesets" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="FlowProfileRulesets" /> model class.</returns>
        public static ADT.Models.IFlowProfileRulesets FromJsonString(string jsonText) => FromJson(ADT.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, ADT.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// The allowed set of configurable rulesets for a FlowProfile resource, used during data replication. All rulesets are optional,
    /// and any ruleset configured will be applied to every applicable replicating data. Any data that fails a ruleset will be
    /// denied replication. If a ruleset is not configured then the ruleset is considered disabled and will not apply towards
    /// replicating data.
    [System.ComponentModel.TypeConverter(typeof(FlowProfileRulesetsTypeConverter))]
    public partial interface IFlowProfileRulesets

    {

    }
}