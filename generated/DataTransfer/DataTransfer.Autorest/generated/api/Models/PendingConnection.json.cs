// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Pending connection object</summary>
    public partial class PendingConnection
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(ADT.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="ADT.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref ADT.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(ADT.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref ADT.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="ADT.Runtime.Json.JsonNode"/> into an instance of ADT.Models.IPendingConnection.
        /// </summary>
        /// <param name="node">a <see cref="ADT.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of ADT.Models.IPendingConnection.</returns>
        public static ADT.Models.IPendingConnection FromJson(ADT.Runtime.Json.JsonNode node)
        {
            return node is ADT.Runtime.Json.JsonObject json ? new PendingConnection(json) : null;
        }

        /// <summary>
        /// Deserializes a ADT.Runtime.Json.JsonObject into a new instance of <see cref="PendingConnection" />.
        /// </summary>
        /// <param name="json">A ADT.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PendingConnection(ADT.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_systemData = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("systemData"), out var __jsonSystemData) ? ADT.Models.SystemData.FromJson(__jsonSystemData) : _systemData;}
            {_subscriptionId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("subscriptionId"), out var __jsonSubscriptionId) ? (string)__jsonSubscriptionId : (string)_subscriptionId;}
            {_pipeline = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("pipeline"), out var __jsonPipeline) ? (string)__jsonPipeline : (string)_pipeline;}
            {_direction = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("direction"), out var __jsonDirection) ? (string)__jsonDirection : (string)_direction;}
            {_justification = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("justification"), out var __jsonJustification) ? (string)__jsonJustification : (string)_justification;}
            {_status = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)_status;}
            {_forceDisabledStatus = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("forceDisabledStatus"), out var __jsonForceDisabledStatus) ? If( __jsonForceDisabledStatus as ADT.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is ADT.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : _forceDisabledStatus;}
            {_statusReason = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("statusReason"), out var __jsonStatusReason) ? (string)__jsonStatusReason : (string)_statusReason;}
            {_linkStatus = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("linkStatus"), out var __jsonLinkStatus) ? (string)__jsonLinkStatus : (string)_linkStatus;}
            {_linkedConnectionId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("linkedConnectionId"), out var __jsonLinkedConnectionId) ? (string)__jsonLinkedConnectionId : (string)_linkedConnectionId;}
            {_flowType = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("flowTypes"), out var __jsonFlowTypes) ? If( __jsonFlowTypes as ADT.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is ADT.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : _flowType;}
            {_requirementId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("requirementId"), out var __jsonRequirementId) ? (string)__jsonRequirementId : (string)_requirementId;}
            {_remoteSubscriptionId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("remoteSubscriptionId"), out var __jsonRemoteSubscriptionId) ? (string)__jsonRemoteSubscriptionId : (string)_remoteSubscriptionId;}
            {_approver = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("approver"), out var __jsonApprover) ? (string)__jsonApprover : (string)_approver;}
            {_pin = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("pin"), out var __jsonPin) ? (string)__jsonPin : (string)_pin;}
            {_dateSubmitted = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("dateSubmitted"), out var __jsonDateSubmitted) ? global::System.DateTime.TryParse((string)__jsonDateSubmitted, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonDateSubmittedValue) ? __jsonDateSubmittedValue : _dateSubmitted : _dateSubmitted;}
            {_primaryContact = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("primaryContact"), out var __jsonPrimaryContact) ? (string)__jsonPrimaryContact : (string)_primaryContact;}
            {_secondaryContact = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("secondaryContacts"), out var __jsonSecondaryContacts) ? If( __jsonSecondaryContacts as ADT.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is ADT.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : _secondaryContact;}
            {_provisioningState = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)_provisioningState;}
            {_policy = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("policies"), out var __jsonPolicies) ? If( __jsonPolicies as ADT.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__g, (__f)=>(string) (__f is ADT.Runtime.Json.JsonString __e ? (string)(__e.ToString()) : null)) ))() : null : _policy;}
            {_schema = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("schemas"), out var __jsonSchemas) ? If( __jsonSchemas as ADT.Runtime.Json.JsonArray, out var __b) ? new global::System.Func<System.Collections.Generic.List<ADT.Models.ISchema>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__b, (__a)=>(ADT.Models.ISchema) (ADT.Models.Schema.FromJson(__a) )) ))() : null : _schema;}
            {_schemaUri = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("schemaUris"), out var __jsonSchemaUris) ? If( __jsonSchemaUris as ADT.Runtime.Json.JsonArray, out var ___w) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(___w, (___v)=>(string) (___v is ADT.Runtime.Json.JsonString ___u ? (string)(___u.ToString()) : null)) ))() : null : _schemaUri;}
            {_tag = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("tags"), out var __jsonTags) ? ADT.Models.PendingConnectionTags.FromJson(__jsonTags) : _tag;}
            {_location = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("location"), out var __jsonLocation) ? (string)__jsonLocation : (string)_location;}
            {_id = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("id"), out var __jsonId) ? (string)__jsonId : (string)_id;}
            {_name = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("name"), out var __jsonName) ? (string)__jsonName : (string)_name;}
            {_type = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("type"), out var __jsonType) ? (string)__jsonType : (string)_type;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PendingConnection" /> into a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="ADT.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="ADT.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PendingConnection" /> as a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </returns>
        public ADT.Runtime.Json.JsonNode ToJson(ADT.Runtime.Json.JsonObject container, ADT.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new ADT.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._systemData ? (ADT.Runtime.Json.JsonNode) this._systemData.ToJson(null,serializationMode) : null, "systemData" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._subscriptionId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._subscriptionId.ToString()) : null, "subscriptionId" ,container.Add );
            }
            AddIf( null != (((object)this._pipeline)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._pipeline.ToString()) : null, "pipeline" ,container.Add );
            AddIf( null != (((object)this._direction)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._direction.ToString()) : null, "direction" ,container.Add );
            AddIf( null != (((object)this._justification)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._justification.ToString()) : null, "justification" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._status)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._forceDisabledStatus)
                {
                    var __w = new ADT.Runtime.Json.XNodeArray();
                    foreach( var __x in this._forceDisabledStatus )
                    {
                        AddIf(null != (((object)__x)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                    }
                    container.Add("forceDisabledStatus",__w);
                }
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._statusReason)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._statusReason.ToString()) : null, "statusReason" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._linkStatus)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._linkStatus.ToString()) : null, "linkStatus" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._linkedConnectionId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._linkedConnectionId.ToString()) : null, "linkedConnectionId" ,container.Add );
            }
            if (null != this._flowType)
            {
                var __r = new ADT.Runtime.Json.XNodeArray();
                foreach( var __s in this._flowType )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("flowTypes",__r);
            }
            AddIf( null != (((object)this._requirementId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._requirementId.ToString()) : null, "requirementId" ,container.Add );
            AddIf( null != (((object)this._remoteSubscriptionId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._remoteSubscriptionId.ToString()) : null, "remoteSubscriptionId" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._approver)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._approver.ToString()) : null, "approver" ,container.Add );
            }
            AddIf( null != (((object)this._pin)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._pin.ToString()) : null, "pin" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._dateSubmitted ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._dateSubmitted?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "dateSubmitted" ,container.Add );
            }
            AddIf( null != (((object)this._primaryContact)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._primaryContact.ToString()) : null, "primaryContact" ,container.Add );
            if (null != this._secondaryContact)
            {
                var __m = new ADT.Runtime.Json.XNodeArray();
                foreach( var __n in this._secondaryContact )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("secondaryContacts",__m);
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            if (null != this._policy)
            {
                var __h = new ADT.Runtime.Json.XNodeArray();
                foreach( var __i in this._policy )
                {
                    AddIf(null != (((object)__i)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__i.ToString()) : null ,__h.Add);
                }
                container.Add("policies",__h);
            }
            if (null != this._schema)
            {
                var __c = new ADT.Runtime.Json.XNodeArray();
                foreach( var __d in this._schema )
                {
                    AddIf(__d?.ToJson(null, serializationMode) ,__c.Add);
                }
                container.Add("schemas",__c);
            }
            if (null != this._schemaUri)
            {
                var ___x = new ADT.Runtime.Json.XNodeArray();
                foreach( var ___y in this._schemaUri )
                {
                    AddIf(null != (((object)___y)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(___y.ToString()) : null ,___x.Add);
                }
                container.Add("schemaUris",___x);
            }
            AddIf( null != this._tag ? (ADT.Runtime.Json.JsonNode) this._tag.ToJson(null,serializationMode) : null, "tags" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead)||serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeCreate))
            {
                AddIf( null != (((object)this._location)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._location.ToString()) : null, "location" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._id)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._id.ToString()) : null, "id" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._name)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._name.ToString()) : null, "name" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._type)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._type.ToString()) : null, "type" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}