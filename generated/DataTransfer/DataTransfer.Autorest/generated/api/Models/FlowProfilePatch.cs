// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Defines the patchable properties for a FlowProfile resource.</summary>
    public partial class FlowProfilePatch :
        ADT.Models.IFlowProfilePatch,
        ADT.Models.IFlowProfilePatchInternal
    {

        /// <summary>Internal Acessors for Identity</summary>
        ADT.Models.IManagedServiceIdentity ADT.Models.IFlowProfilePatchInternal.Identity { get => (this._identity = this._identity ?? new ADT.Models.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string ADT.Models.IFlowProfilePatchInternal.IdentityPrincipalId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId = value ?? null; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string ADT.Models.IFlowProfilePatchInternal.IdentityTenantId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId = value ?? null; }

        /// <summary>Internal Acessors for Property</summary>
        ADT.Models.IFlowProfilePatchProperties ADT.Models.IFlowProfilePatchInternal.Property { get => (this._property = this._property ?? new ADT.Models.FlowProfilePatchProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string ADT.Models.IFlowProfilePatchInternal.ProvisioningState { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ProvisioningState; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for Ruleset</summary>
        ADT.Models.IFlowProfileRulesets ADT.Models.IFlowProfilePatchInternal.Ruleset { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).Ruleset; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).Ruleset = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RulesetAntiviru</summary>
        ADT.Models.IAntivirusRuleset ADT.Models.IFlowProfilePatchInternal.RulesetAntiviru { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetAntiviru; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetAntiviru = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RulesetArchive</summary>
        ADT.Models.IArchiveRuleset ADT.Models.IFlowProfilePatchInternal.RulesetArchive { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetArchive; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetArchive = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RulesetDataSize</summary>
        ADT.Models.IDataSizeRuleset ADT.Models.IFlowProfilePatchInternal.RulesetDataSize { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetDataSize; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetDataSize = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RulesetMimeFilter</summary>
        ADT.Models.IMimeFilterRuleset ADT.Models.IFlowProfilePatchInternal.RulesetMimeFilter { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetMimeFilter; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetMimeFilter = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RulesetTextMatching</summary>
        ADT.Models.ITextMatchingRuleset ADT.Models.IFlowProfilePatchInternal.RulesetTextMatching { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetTextMatching; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetTextMatching = value ?? null /* model class */; }

        /// <summary>Internal Acessors for RulesetXmlFilter</summary>
        ADT.Models.IXmlFilterRuleset ADT.Models.IFlowProfilePatchInternal.RulesetXmlFilter { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetXmlFilter; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).RulesetXmlFilter = value ?? null /* model class */; }

        /// <summary>
        /// Optional. The list of antiviruses to be used as a scanning solution for replicating data.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AntivirusAvSolution { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).AntivirusAvSolution; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).AntivirusAvSolution = value ?? null /* arrayOf */; }

        /// <summary>
        /// Optional. Provides the multiplication value for an archive in total based on the initial object being validated. This
        /// value takes the root object size and multiplies it by this value to create a maximum. Once this maximum is exceeded, the
        /// archive is failed. Used to detect and block archives with suspiciously high compression (e.g., zip bombs).
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public double? ArchiveMaximumCompressionRatioLimit { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMaximumCompressionRatioLimit; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMaximumCompressionRatioLimit = value ?? default(double); }

        /// <summary>
        /// Optional. The maximum depth of nested archives that can be expanded. Limits how many layers of embedded archives will
        /// be processed. Archives exceeding the max limit will be denied for replication.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public long? ArchiveMaximumDepthLimit { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMaximumDepthLimit; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMaximumDepthLimit = value ?? default(long); }

        /// <summary>
        /// Optional. The combined maximum size (in bytes) of all extracted files that an expanded archive is allowed to reach. Archives
        /// exceeding the max limit will be denied for replication.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public long? ArchiveMaximumExpansionSizeLimit { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMaximumExpansionSizeLimit; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMaximumExpansionSizeLimit = value ?? default(long); }

        /// <summary>
        /// Optional. Default is 0. The minimum archive file size (in bytes) required to trigger expansion during replication. Any
        /// archive file size below the configured threshold will skip the rest of the configured rulesets for archives.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public long? ArchiveMinimumSizeForExpansion { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMinimumSizeForExpansion; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ArchiveMinimumSizeForExpansion = value ?? default(long); }

        /// <summary>
        /// Optional. Specifies the maximum allowed size (in bytes) for files to be replicated. Any file size greater than maximum
        /// will be denied replication.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public long? DataSizeMaximum { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).DataSizeMaximum; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).DataSizeMaximum = value ?? default(long); }

        /// <summary>
        /// Optional. Default is 0. Specifies the minimum required size (in bytes) for a file to be eligible for replication. Any
        /// file size less than minimum will be denied replication.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public long? DataSizeMinimum { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).DataSizeMinimum; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).DataSizeMinimum = value ?? default(long); }

        /// <summary>A description of the FlowProfile that defines the replication scenario.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string Description { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).Description; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).Description = value ?? null; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private ADT.Models.IManagedServiceIdentity _identity;

        /// <summary>The managed service identities assigned to this resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new ADT.Models.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).Type; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>
        /// Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer
        /// to the MimeTypeFiler model.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> MimeFilter { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).MimeFilter; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).MimeFilter = value ?? null /* arrayOf */; }

        /// <summary>
        /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string MimeFilterType { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).MimeFilterType; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).MimeFilterType = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private ADT.Models.IFlowProfilePatchProperties _property;

        /// <summary>Properties of FlowProfile patch body.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IFlowProfilePatchProperties Property { get => (this._property = this._property ?? new ADT.Models.FlowProfilePatchProperties()); set => this._property = value; }

        /// <summary>The current provisioning state of the FlowProfile resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).ProvisioningState; }

        /// <summary>The operational status of the FlowProfile.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string Status { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).Status; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).Status = value ?? null; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private ADT.Models.IFlowProfilePatchTags _tag;

        /// <summary>Resource tags.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public ADT.Models.IFlowProfilePatchTags Tag { get => (this._tag = this._tag ?? new ADT.Models.FlowProfilePatchTags()); set => this._tag = value; }

        /// <summary>
        /// A list of text patterns to block, each with matching rules and case sensitivity options.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<ADT.Models.ITextMatch> TextMatchingDeny { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).TextMatchingDeny; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).TextMatchingDeny = value ?? null /* arrayOf */; }

        /// <summary>The default XML namespace used for schema validation.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string XmlFilterDefaultNamespace { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).XmlFilterDefaultNamespace; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).XmlFilterDefaultNamespace = value ?? null; }

        /// <summary>Defines the method for referencing the xml schema.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string XmlFilterReference { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).XmlFilterReference; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).XmlFilterReference = value ?? null; }

        /// <summary>The inline XSD schema to be used for validation.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string XmlFilterSchema { get => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).XmlFilterSchema; set => ((ADT.Models.IFlowProfilePatchPropertiesInternal)Property).XmlFilterSchema = value ?? null; }

        /// <summary>Creates an new <see cref="FlowProfilePatch" /> instance.</summary>
        public FlowProfilePatch()
        {

        }
    }
    /// Defines the patchable properties for a FlowProfile resource.
    public partial interface IFlowProfilePatch :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Optional. The list of antiviruses to be used as a scanning solution for replicating data.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. The list of antiviruses to be used as a scanning solution for replicating data.",
        SerializedName = @"avSolutions",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Defender", "ClamAv")]
        System.Collections.Generic.List<string> AntivirusAvSolution { get; set; }
        /// <summary>
        /// Optional. Provides the multiplication value for an archive in total based on the initial object being validated. This
        /// value takes the root object size and multiplies it by this value to create a maximum. Once this maximum is exceeded, the
        /// archive is failed. Used to detect and block archives with suspiciously high compression (e.g., zip bombs).
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. Provides the multiplication value for an archive in total based on the initial object being validated. This value takes the root object size and multiplies it by this value to create a maximum. Once this maximum is exceeded, the archive is failed. Used to detect and block archives with suspiciously high compression (e.g., zip bombs).",
        SerializedName = @"maximumCompressionRatioLimit",
        PossibleTypes = new [] { typeof(double) })]
        double? ArchiveMaximumCompressionRatioLimit { get; set; }
        /// <summary>
        /// Optional. The maximum depth of nested archives that can be expanded. Limits how many layers of embedded archives will
        /// be processed. Archives exceeding the max limit will be denied for replication.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. The maximum depth of nested archives that can be expanded. Limits how many layers of embedded archives will be processed. Archives exceeding the max limit will be denied for replication.",
        SerializedName = @"maximumDepthLimit",
        PossibleTypes = new [] { typeof(long) })]
        long? ArchiveMaximumDepthLimit { get; set; }
        /// <summary>
        /// Optional. The combined maximum size (in bytes) of all extracted files that an expanded archive is allowed to reach. Archives
        /// exceeding the max limit will be denied for replication.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. The combined maximum size (in bytes) of all extracted files that an expanded archive is allowed to reach. Archives exceeding the max limit will be denied for replication.",
        SerializedName = @"maximumExpansionSizeLimit",
        PossibleTypes = new [] { typeof(long) })]
        long? ArchiveMaximumExpansionSizeLimit { get; set; }
        /// <summary>
        /// Optional. Default is 0. The minimum archive file size (in bytes) required to trigger expansion during replication. Any
        /// archive file size below the configured threshold will skip the rest of the configured rulesets for archives.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. Default is 0. The minimum archive file size (in bytes) required to trigger expansion during replication. Any archive file size below the configured threshold will skip the rest of the configured rulesets for archives.",
        SerializedName = @"minimumSizeForExpansion",
        PossibleTypes = new [] { typeof(long) })]
        long? ArchiveMinimumSizeForExpansion { get; set; }
        /// <summary>
        /// Optional. Specifies the maximum allowed size (in bytes) for files to be replicated. Any file size greater than maximum
        /// will be denied replication.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. Specifies the maximum allowed size (in bytes) for files to be replicated. Any file size greater than maximum will be denied replication.",
        SerializedName = @"maximum",
        PossibleTypes = new [] { typeof(long) })]
        long? DataSizeMaximum { get; set; }
        /// <summary>
        /// Optional. Default is 0. Specifies the minimum required size (in bytes) for a file to be eligible for replication. Any
        /// file size less than minimum will be denied replication.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. Default is 0. Specifies the minimum required size (in bytes) for a file to be eligible for replication. Any file size less than minimum will be denied replication.",
        SerializedName = @"minimum",
        PossibleTypes = new [] { typeof(long) })]
        long? DataSizeMinimum { get; set; }
        /// <summary>A description of the FlowProfile that defines the replication scenario.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A description of the FlowProfile that defines the replication scenario.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(ADT.Models.IUserAssignedIdentities) })]
        ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer
        /// to the MimeTypeFiler model.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer to the MimeTypeFiler model.",
        SerializedName = @"filters",
        PossibleTypes = new [] { typeof(ADT.Models.IMimeTypeFilter) })]
        System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> MimeFilter { get; set; }
        /// <summary>
        /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Allow", "Deny")]
        string MimeFilterType { get; set; }
        /// <summary>The current provisioning state of the FlowProfile resource.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The current provisioning state of the FlowProfile resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get;  }
        /// <summary>The operational status of the FlowProfile.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The operational status of the FlowProfile.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Obsolete", "Enabled")]
        string Status { get; set; }
        /// <summary>Resource tags.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(ADT.Models.IFlowProfilePatchTags) })]
        ADT.Models.IFlowProfilePatchTags Tag { get; set; }
        /// <summary>
        /// A list of text patterns to block, each with matching rules and case sensitivity options.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of text patterns to block, each with matching rules and case sensitivity options.",
        SerializedName = @"deny",
        PossibleTypes = new [] { typeof(ADT.Models.ITextMatch) })]
        System.Collections.Generic.List<ADT.Models.ITextMatch> TextMatchingDeny { get; set; }
        /// <summary>The default XML namespace used for schema validation.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The default XML namespace used for schema validation.",
        SerializedName = @"defaultNamespace",
        PossibleTypes = new [] { typeof(string) })]
        string XmlFilterDefaultNamespace { get; set; }
        /// <summary>Defines the method for referencing the xml schema.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the method for referencing the xml schema.",
        SerializedName = @"reference",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Inline")]
        string XmlFilterReference { get; set; }
        /// <summary>The inline XSD schema to be used for validation.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The inline XSD schema to be used for validation.",
        SerializedName = @"schema",
        PossibleTypes = new [] { typeof(string) })]
        string XmlFilterSchema { get; set; }

    }
    /// Defines the patchable properties for a FlowProfile resource.
    internal partial interface IFlowProfilePatchInternal

    {
        /// <summary>
        /// Optional. The list of antiviruses to be used as a scanning solution for replicating data.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Defender", "ClamAv")]
        System.Collections.Generic.List<string> AntivirusAvSolution { get; set; }
        /// <summary>
        /// Optional. Provides the multiplication value for an archive in total based on the initial object being validated. This
        /// value takes the root object size and multiplies it by this value to create a maximum. Once this maximum is exceeded, the
        /// archive is failed. Used to detect and block archives with suspiciously high compression (e.g., zip bombs).
        /// </summary>
        double? ArchiveMaximumCompressionRatioLimit { get; set; }
        /// <summary>
        /// Optional. The maximum depth of nested archives that can be expanded. Limits how many layers of embedded archives will
        /// be processed. Archives exceeding the max limit will be denied for replication.
        /// </summary>
        long? ArchiveMaximumDepthLimit { get; set; }
        /// <summary>
        /// Optional. The combined maximum size (in bytes) of all extracted files that an expanded archive is allowed to reach. Archives
        /// exceeding the max limit will be denied for replication.
        /// </summary>
        long? ArchiveMaximumExpansionSizeLimit { get; set; }
        /// <summary>
        /// Optional. Default is 0. The minimum archive file size (in bytes) required to trigger expansion during replication. Any
        /// archive file size below the configured threshold will skip the rest of the configured rulesets for archives.
        /// </summary>
        long? ArchiveMinimumSizeForExpansion { get; set; }
        /// <summary>
        /// Optional. Specifies the maximum allowed size (in bytes) for files to be replicated. Any file size greater than maximum
        /// will be denied replication.
        /// </summary>
        long? DataSizeMaximum { get; set; }
        /// <summary>
        /// Optional. Default is 0. Specifies the minimum required size (in bytes) for a file to be eligible for replication. Any
        /// file size less than minimum will be denied replication.
        /// </summary>
        long? DataSizeMinimum { get; set; }
        /// <summary>A description of the FlowProfile that defines the replication scenario.</summary>
        string Description { get; set; }
        /// <summary>The managed service identities assigned to this resource.</summary>
        ADT.Models.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Defines the Media types (f.k.a MIME types) and associated file extensions to be filtered. For more detail, please refer
        /// to the MimeTypeFiler model.
        /// </summary>
        System.Collections.Generic.List<ADT.Models.IMimeTypeFilter> MimeFilter { get; set; }
        /// <summary>
        /// Specifies whether the filter is an allow list or deny list. For more detail, please refer to the FilterType model.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Allow", "Deny")]
        string MimeFilterType { get; set; }
        /// <summary>Properties of FlowProfile patch body.</summary>
        ADT.Models.IFlowProfilePatchProperties Property { get; set; }
        /// <summary>The current provisioning state of the FlowProfile resource.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get; set; }
        /// <summary>A set of configurable rulesets applied to this FlowProfile.</summary>
        ADT.Models.IFlowProfileRulesets Ruleset { get; set; }
        /// <summary>Antivirus scanning rules for replicated data.</summary>
        ADT.Models.IAntivirusRuleset RulesetAntiviru { get; set; }
        /// <summary>Rules for handling archive files during replication.</summary>
        ADT.Models.IArchiveRuleset RulesetArchive { get; set; }
        /// <summary>Rules that enforce minimum and maximum data size limits.</summary>
        ADT.Models.IDataSizeRuleset RulesetDataSize { get; set; }
        /// <summary>Rules for filtering files based on MIME types.</summary>
        ADT.Models.IMimeFilterRuleset RulesetMimeFilter { get; set; }
        /// <summary>Rules for detecting and blocking specific text patterns.</summary>
        ADT.Models.ITextMatchingRuleset RulesetTextMatching { get; set; }
        /// <summary>Rules for filtering XML content using XSD schemas.</summary>
        ADT.Models.IXmlFilterRuleset RulesetXmlFilter { get; set; }
        /// <summary>The operational status of the FlowProfile.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Obsolete", "Enabled")]
        string Status { get; set; }
        /// <summary>Resource tags.</summary>
        ADT.Models.IFlowProfilePatchTags Tag { get; set; }
        /// <summary>
        /// A list of text patterns to block, each with matching rules and case sensitivity options.
        /// </summary>
        System.Collections.Generic.List<ADT.Models.ITextMatch> TextMatchingDeny { get; set; }
        /// <summary>The default XML namespace used for schema validation.</summary>
        string XmlFilterDefaultNamespace { get; set; }
        /// <summary>Defines the method for referencing the xml schema.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Inline")]
        string XmlFilterReference { get; set; }
        /// <summary>The inline XSD schema to be used for validation.</summary>
        string XmlFilterSchema { get; set; }

    }
}