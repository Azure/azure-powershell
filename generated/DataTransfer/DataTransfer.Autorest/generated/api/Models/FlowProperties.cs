// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Properties of flow</summary>
    public partial class FlowProperties :
        ADT.Models.IFlowProperties,
        ADT.Models.IFlowPropertiesInternal
    {

        /// <summary>Internal Acessors for ApiFlowOption</summary>
        ADT.Models.IApiFlowOptions ADT.Models.IFlowPropertiesInternal.ApiFlowOption { get => (this._apiFlowOption = this._apiFlowOption ?? new ADT.Models.ApiFlowOptions()); set { {_apiFlowOption = value;} } }

        /// <summary>Internal Acessors for ApiFlowOptionRemoteEndpointSetting</summary>
        ADT.Models.IRemoteEndpointSettings ADT.Models.IFlowPropertiesInternal.ApiFlowOptionRemoteEndpointSetting { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpointSetting; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpointSetting = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Connection</summary>
        ADT.Models.ISelectedResource ADT.Models.IFlowPropertiesInternal.Connection { get => (this._connection = this._connection ?? new ADT.Models.SelectedResource()); set { {_connection = value;} } }

        /// <summary>Internal Acessors for FlowId</summary>
        string ADT.Models.IFlowPropertiesInternal.FlowId { get => this._flowId; set { {_flowId = value;} } }

        /// <summary>Internal Acessors for FlowProfile</summary>
        ADT.Models.IFlowProfileMetadata ADT.Models.IFlowPropertiesInternal.FlowProfile { get => (this._flowProfile = this._flowProfile ?? new ADT.Models.FlowProfileMetadata()); set { {_flowProfile = value;} } }

        /// <summary>Internal Acessors for ForceDisabledStatus</summary>
        System.Collections.Generic.List<string> ADT.Models.IFlowPropertiesInternal.ForceDisabledStatus { get => this._forceDisabledStatus; set { {_forceDisabledStatus = value;} } }

        /// <summary>Internal Acessors for LinkStatus</summary>
        string ADT.Models.IFlowPropertiesInternal.LinkStatus { get => this._linkStatus; set { {_linkStatus = value;} } }

        /// <summary>Internal Acessors for LinkedFlowId</summary>
        string ADT.Models.IFlowPropertiesInternal.LinkedFlowId { get => this._linkedFlowId; set { {_linkedFlowId = value;} } }

        /// <summary>Internal Acessors for MessagingOption</summary>
        ADT.Models.IMessagingOptions ADT.Models.IFlowPropertiesInternal.MessagingOption { get => (this._messagingOption = this._messagingOption ?? new ADT.Models.MessagingOptions()); set { {_messagingOption = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string ADT.Models.IFlowPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for Schema</summary>
        ADT.Models.ISchema ADT.Models.IFlowPropertiesInternal.Schema { get => (this._schema = this._schema ?? new ADT.Models.Schema()); set { {_schema = value;} } }

        /// <summary>Internal Acessors for SourceAddress</summary>
        ADT.Models.IStreamSourceAddresses ADT.Models.IFlowPropertiesInternal.SourceAddress { get => (this._sourceAddress = this._sourceAddress ?? new ADT.Models.StreamSourceAddresses()); set { {_sourceAddress = value;} } }

        /// <summary>Backing field for <see cref="ApiFlowOption" /> property.</summary>
        private ADT.Models.IApiFlowOptions _apiFlowOption;

        /// <summary>The API Flow configuration options for Azure Data Transfer API Flow type.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IApiFlowOptions ApiFlowOption { get => (this._apiFlowOption = this._apiFlowOption ?? new ADT.Models.ApiFlowOptions()); set => this._apiFlowOption = value; }

        /// <summary>
        /// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionApiMode { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).ApiMode; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).ApiMode = value ?? null; }

        /// <summary>
        /// Optional field to override the audience of the remote endpoint. The property has reached end of life support starting
        /// version 2025-05-30-preview. Please create and use the authentication property instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionAudienceOverride { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).AudienceOverride; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).AudienceOverride = value ?? null; }

        /// <summary>
        /// Optional and for advanced used only. A list of authentication methods to use when accessing the Azure Data Transfer API
        /// Flow. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<ADT.Models.IAuthentication> ApiFlowOptionAuthentication { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).Authentication; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).Authentication = value ?? null /* arrayOf */; }

        /// <summary>Unique CNAME to represent the Azure Data Transfer API Flow instance</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionCname { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).Cname; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).Cname = value ?? null; }

        /// <summary>
        /// Determines which identity to use for extracting the user token for Azure Data Transfer API Flow. The property has reached
        /// end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionIdentityTranslation { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).IdentityTranslation; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).IdentityTranslation = value ?? null; }

        /// <summary>
        /// Remote stub app registration Client ID. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the authentication property instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionRemoteCallingModeClientId { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteCallingModeClientId; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteCallingModeClientId = value ?? null; }

        /// <summary>
        /// Remote host to which communication needs to be made. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the remoteEndpointSettings.endpoint property instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionRemoteEndpoint { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpoint; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpoint = value ?? null; }

        /// <summary>
        /// Sender's app user assigned Manage Identity client ID. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the authentication property instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionSenderClientId { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).SenderClientId; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).SenderClientId = value ?? null; }

        /// <summary>Backing field for <see cref="Connection" /> property.</summary>
        private ADT.Models.ISelectedResource _connection;

        /// <summary>The connection associated with this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.ISelectedResource Connection { get => (this._connection = this._connection ?? new ADT.Models.SelectedResource()); set => this._connection = value; }

        /// <summary>Id of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionId { get => ((ADT.Models.ISelectedResourceInternal)Connection).Id; set => ((ADT.Models.ISelectedResourceInternal)Connection).Id = value ?? null; }

        /// <summary>Location of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionLocation { get => ((ADT.Models.ISelectedResourceInternal)Connection).Location; set => ((ADT.Models.ISelectedResourceInternal)Connection).Location = value ?? null; }

        /// <summary>Name of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionName { get => ((ADT.Models.ISelectedResourceInternal)Connection).Name; set => ((ADT.Models.ISelectedResourceInternal)Connection).Name = value ?? null; }

        /// <summary>Name of the subscription with the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionSubscriptionName { get => ((ADT.Models.ISelectedResourceInternal)Connection).SubscriptionName; set => ((ADT.Models.ISelectedResourceInternal)Connection).SubscriptionName = value ?? null; }

        /// <summary>Backing field for <see cref="ConsumerGroup" /> property.</summary>
        private string _consumerGroup;

        /// <summary>Event Hub Consumer Group</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ConsumerGroup { get => this._consumerGroup; set => this._consumerGroup = value; }

        /// <summary>Backing field for <see cref="CustomerManagedKeyVaultUri" /> property.</summary>
        private string _customerManagedKeyVaultUri;

        /// <summary>The URI to the customer managed key for this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string CustomerManagedKeyVaultUri { get => this._customerManagedKeyVaultUri; set => this._customerManagedKeyVaultUri = value; }

        /// <summary>Backing field for <see cref="DataType" /> property.</summary>
        private string _dataType;

        /// <summary>
        /// Type of data to transfer via the flow. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string DataType { get => this._dataType; set => this._dataType = value; }

        /// <summary>Backing field for <see cref="DestinationEndpoint" /> property.</summary>
        private System.Collections.Generic.List<string> _destinationEndpoint;

        /// <summary>The destination endpoints of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> DestinationEndpoint { get => this._destinationEndpoint; set => this._destinationEndpoint = value; }

        /// <summary>Backing field for <see cref="DestinationEndpointPort" /> property.</summary>
        private System.Collections.Generic.List<long> _destinationEndpointPort;

        /// <summary>The destination endpoint ports of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<long> DestinationEndpointPort { get => this._destinationEndpointPort; set => this._destinationEndpointPort = value; }

        /// <summary>Backing field for <see cref="EventHubId" /> property.</summary>
        private string _eventHubId;

        /// <summary>Event Hub ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string EventHubId { get => this._eventHubId; set => this._eventHubId = value; }

        /// <summary>Backing field for <see cref="FlowDataType" /> property.</summary>
        private string _flowDataType;

        /// <summary>The Flow's data class.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string FlowDataType { get => this._flowDataType; set => this._flowDataType = value; }

        /// <summary>Backing field for <see cref="FlowId" /> property.</summary>
        private string _flowId;

        /// <summary>Dataflow GUID associated with this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string FlowId { get => this._flowId; }

        /// <summary>Backing field for <see cref="FlowProfile" /> property.</summary>
        private ADT.Models.IFlowProfileMetadata _flowProfile;

        /// <summary>Type of FlowProfile to use for transfer via the flow.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IFlowProfileMetadata FlowProfile { get => (this._flowProfile = this._flowProfile ?? new ADT.Models.FlowProfileMetadata()); set => this._flowProfile = value; }

        /// <summary>
        /// A description of the FlowProfile and its rulesets. The description should describe the flowprofile's purpose and rulesets
        /// applied.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowProfileDescription { get => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Description; set => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Description = value ?? null; }

        /// <summary>
        /// A guid represented as a string for the FlowProfile resource, assigned by the system.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowProfileId { get => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).FlowProfileId; set => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).FlowProfileId = value ?? null; }

        /// <summary>The name of the FlowProfile.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowProfileName { get => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Name; set => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Name = value ?? null; }

        /// <summary>
        /// The name of the parent Pipeline Azure resource associated with this FlowProfile.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowProfilePipeline { get => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Pipeline; set => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Pipeline = value ?? null; }

        /// <summary>
        /// The data replication scenario handled by this FlowProfile. Please note, that this value cannot be updated after creation.
        /// See the FlowProfilePatchProperties to see updateable properties.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowProfileReplicationScenario { get => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).ReplicationScenario; set => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).ReplicationScenario = value ?? null; }

        /// <summary>The operational status of the FlowProfile.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowProfileStatus { get => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Status; set => ((ADT.Models.IFlowProfileMetadataInternal)FlowProfile).Status = value ?? null; }

        /// <summary>Backing field for <see cref="FlowType" /> property.</summary>
        private string _flowType;

        /// <summary>
        /// The flow type for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please
        /// create and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string FlowType { get => this._flowType; set => this._flowType = value; }

        /// <summary>Backing field for <see cref="ForceDisabledStatus" /> property.</summary>
        private System.Collections.Generic.List<string> _forceDisabledStatus;

        /// <summary>Force disablement status of the current flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> ForceDisabledStatus { get => this._forceDisabledStatus; }

        /// <summary>Backing field for <see cref="KeyVaultUri" /> property.</summary>
        private string _keyVaultUri;

        /// <summary>URI to a Key Vault Secret containing a SAS token.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string KeyVaultUri { get => this._keyVaultUri; set => this._keyVaultUri = value; }

        /// <summary>Backing field for <see cref="LinkStatus" /> property.</summary>
        private string _linkStatus;

        /// <summary>Link status of the current flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string LinkStatus { get => this._linkStatus; }

        /// <summary>Backing field for <see cref="LinkedFlowId" /> property.</summary>
        private string _linkedFlowId;

        /// <summary>Resource ID of the linked flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string LinkedFlowId { get => this._linkedFlowId; }

        /// <summary>Backing field for <see cref="MessagingOption" /> property.</summary>
        private ADT.Models.IMessagingOptions _messagingOption;

        /// <summary>The messaging options for this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IMessagingOptions MessagingOption { get => (this._messagingOption = this._messagingOption ?? new ADT.Models.MessagingOptions()); set => this._messagingOption = value; }

        /// <summary>Billing tier for this messaging flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string MessagingOptionBillingTier { get => ((ADT.Models.IMessagingOptionsInternal)MessagingOption).BillingTier; set => ((ADT.Models.IMessagingOptionsInternal)MessagingOption).BillingTier = value ?? null; }

        /// <summary>
        /// Field indicating whether to enable guaranteed delivery on the flow or not. The default disabled option chooses speed over
        /// consistency. When enabled, messages are delivered with minimal delay, but delivery is not guaranteed under all conditions
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string MessagingOptionPerformancePriority { get => ((ADT.Models.IMessagingOptionsInternal)MessagingOption).PerformancePriority; set => ((ADT.Models.IMessagingOptionsInternal)MessagingOption).PerformancePriority = value ?? null; }

        /// <summary>Backing field for <see cref="Passphrase" /> property.</summary>
        private string _passphrase;

        /// <summary>The passphrase used for SRT streams</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Passphrase { get => this._passphrase; set => this._passphrase = value; }

        /// <summary>Backing field for <see cref="Policy" /> property.</summary>
        private System.Collections.Generic.List<string> _policy;

        /// <summary>
        /// The policies for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please create
        /// and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Policy { get => this._policy; set => this._policy = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>
        /// Optional and for advanced used only. A list of authentication methods to use when accessing the remote endpoint. If not
        /// provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<ADT.Models.IAuthentication> RemoteEndpointSettingAuthentication { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpointSettingAuthentication; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpointSettingAuthentication = value ?? null /* arrayOf */; }

        /// <summary>The remote endpoint uri all API calls.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string RemoteEndpointSettingEndpoint { get => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpointSettingEndpoint; set => ((ADT.Models.IApiFlowOptionsInternal)ApiFlowOption).RemoteEndpointSettingEndpoint = value ?? null; }

        /// <summary>Backing field for <see cref="Schema" /> property.</summary>
        private ADT.Models.ISchema _schema;

        /// <summary>
        /// The selected schema for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please
        /// create and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.ISchema Schema { get => (this._schema = this._schema ?? new ADT.Models.Schema()); set => this._schema = value; }

        /// <summary>Connection ID associated with this schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaConnectionId { get => ((ADT.Models.ISchemaInternal)Schema).ConnectionId; set => ((ADT.Models.ISchemaInternal)Schema).ConnectionId = value ?? null; }

        /// <summary>Content of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaContent { get => ((ADT.Models.ISchemaInternal)Schema).Content; set => ((ADT.Models.ISchemaInternal)Schema).Content = value ?? null; }

        /// <summary>The direction of the schema.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaDirection { get => ((ADT.Models.ISchemaInternal)Schema).Direction; set => ((ADT.Models.ISchemaInternal)Schema).Direction = value ?? null; }

        /// <summary>ID associated with this schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaId { get => ((ADT.Models.ISchemaInternal)Schema).Id; set => ((ADT.Models.ISchemaInternal)Schema).Id = value ?? null; }

        /// <summary>Name of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaName { get => ((ADT.Models.ISchemaInternal)Schema).Name; set => ((ADT.Models.ISchemaInternal)Schema).Name = value ?? null; }

        /// <summary>Status of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaStatus { get => ((ADT.Models.ISchemaInternal)Schema).Status; set => ((ADT.Models.ISchemaInternal)Schema).Status = value ?? null; }

        /// <summary>The Schema Type</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaType { get => ((ADT.Models.ISchemaInternal)Schema).Type; set => ((ADT.Models.ISchemaInternal)Schema).Type = value ?? null; }

        /// <summary>Uri containing SAS token for the zipped schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaUri { get => ((ADT.Models.ISchemaInternal)Schema).Uri; set => ((ADT.Models.ISchemaInternal)Schema).Uri = value ?? null; }

        /// <summary>Backing field for <see cref="ServiceBusQueueId" /> property.</summary>
        private string _serviceBusQueueId;

        /// <summary>Service Bus Queue ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ServiceBusQueueId { get => this._serviceBusQueueId; set => this._serviceBusQueueId = value; }

        /// <summary>Backing field for <see cref="SourceAddress" /> property.</summary>
        private ADT.Models.IStreamSourceAddresses _sourceAddress;

        /// <summary>The source IP address and CIDR ranges of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IStreamSourceAddresses SourceAddress { get => (this._sourceAddress = this._sourceAddress ?? new ADT.Models.StreamSourceAddresses()); set => this._sourceAddress = value; }

        /// <summary>A source IP address or CIDR range</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SourceAddressSourceAddresses { get => ((ADT.Models.IStreamSourceAddressesInternal)SourceAddress).SourceAddress; set => ((ADT.Models.IStreamSourceAddressesInternal)SourceAddress).SourceAddress = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of the current flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="StorageAccountId" /> property.</summary>
        private string _storageAccountId;

        /// <summary>Storage Account ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StorageAccountId { get => this._storageAccountId; set => this._storageAccountId = value; }

        /// <summary>Backing field for <see cref="StorageAccountName" /> property.</summary>
        private string _storageAccountName;

        /// <summary>Storage Account</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StorageAccountName { get => this._storageAccountName; set => this._storageAccountName = value; }

        /// <summary>Backing field for <see cref="StorageContainerName" /> property.</summary>
        private string _storageContainerName;

        /// <summary>Storage Container Name</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StorageContainerName { get => this._storageContainerName; set => this._storageContainerName = value; }

        /// <summary>Backing field for <see cref="StorageTableName" /> property.</summary>
        private string _storageTableName;

        /// <summary>Storage Table Name</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StorageTableName { get => this._storageTableName; set => this._storageTableName = value; }

        /// <summary>Backing field for <see cref="StreamId" /> property.</summary>
        private string _streamId;

        /// <summary>The flow stream identifier</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StreamId { get => this._streamId; set => this._streamId = value; }

        /// <summary>Backing field for <see cref="StreamLatency" /> property.</summary>
        private long? _streamLatency;

        /// <summary>The latency of the stream in milliseconds</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public long? StreamLatency { get => this._streamLatency; set => this._streamLatency = value; }

        /// <summary>Backing field for <see cref="StreamProtocol" /> property.</summary>
        private string _streamProtocol;

        /// <summary>The protocol of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StreamProtocol { get => this._streamProtocol; set => this._streamProtocol = value; }

        /// <summary>Creates an new <see cref="FlowProperties" /> instance.</summary>
        public FlowProperties()
        {

        }
    }
    /// Properties of flow
    public partial interface IFlowProperties :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked",
        SerializedName = @"apiMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("SDK", "Endpoint")]
        string ApiFlowOptionApiMode { get; set; }
        /// <summary>
        /// Optional field to override the audience of the remote endpoint. The property has reached end of life support starting
        /// version 2025-05-30-preview. Please create and use the authentication property instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional field to override the audience of the remote endpoint. The property has reached end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.",
        SerializedName = @"audienceOverride",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionAudienceOverride { get; set; }
        /// <summary>
        /// Optional and for advanced used only. A list of authentication methods to use when accessing the Azure Data Transfer API
        /// Flow. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional and for advanced used only. A list of authentication methods to use when accessing the Azure Data Transfer API Flow. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(ADT.Models.IAuthentication) })]
        System.Collections.Generic.List<ADT.Models.IAuthentication> ApiFlowOptionAuthentication { get; set; }
        /// <summary>Unique CNAME to represent the Azure Data Transfer API Flow instance</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Unique CNAME to represent the Azure Data Transfer API Flow instance",
        SerializedName = @"cname",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionCname { get; set; }
        /// <summary>
        /// Determines which identity to use for extracting the user token for Azure Data Transfer API Flow. The property has reached
        /// end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Determines which identity to use for extracting the user token for Azure Data Transfer API Flow. The property has reached end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.",
        SerializedName = @"identityTranslation",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("UserIdentity", "ServiceIdentity")]
        string ApiFlowOptionIdentityTranslation { get; set; }
        /// <summary>
        /// Remote stub app registration Client ID. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the authentication property instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote stub app registration Client ID. The property has reached end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.",
        SerializedName = @"remoteCallingModeClientId",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionRemoteCallingModeClientId { get; set; }
        /// <summary>
        /// Remote host to which communication needs to be made. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the remoteEndpointSettings.endpoint property instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote host to which communication needs to be made. The property has reached end of life support starting version 2025-05-30-preview. Please create and use the remoteEndpointSettings.endpoint property instead.",
        SerializedName = @"remoteEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionRemoteEndpoint { get; set; }
        /// <summary>
        /// Sender's app user assigned Manage Identity client ID. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the authentication property instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Sender's app user assigned Manage Identity client ID. The property has reached end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.",
        SerializedName = @"senderClientId",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionSenderClientId { get; set; }
        /// <summary>Id of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Id of the connection",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionId { get; set; }
        /// <summary>Location of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Location of the connection",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionLocation { get; set; }
        /// <summary>Name of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the connection",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionName { get; set; }
        /// <summary>Name of the subscription with the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the subscription with the connection",
        SerializedName = @"subscriptionName",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionSubscriptionName { get; set; }
        /// <summary>Event Hub Consumer Group</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Event Hub Consumer Group",
        SerializedName = @"consumerGroup",
        PossibleTypes = new [] { typeof(string) })]
        string ConsumerGroup { get; set; }
        /// <summary>The URI to the customer managed key for this flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URI to the customer managed key for this flow",
        SerializedName = @"customerManagedKeyVaultUri",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerManagedKeyVaultUri { get; set; }
        /// <summary>
        /// Type of data to transfer via the flow. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of data to transfer via the flow. The property has reached end of life support starting version 2025-05-30-preview. Please create and use a FlowProfile resource instead.",
        SerializedName = @"dataType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Blob", "Table")]
        string DataType { get; set; }
        /// <summary>The destination endpoints of the stream</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The destination endpoints of the stream",
        SerializedName = @"destinationEndpoints",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DestinationEndpoint { get; set; }
        /// <summary>The destination endpoint ports of the stream</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The destination endpoint ports of the stream",
        SerializedName = @"destinationEndpointPorts",
        PossibleTypes = new [] { typeof(long) })]
        System.Collections.Generic.List<long> DestinationEndpointPort { get; set; }
        /// <summary>Event Hub ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Event Hub ID",
        SerializedName = @"eventHubId",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubId { get; set; }
        /// <summary>The Flow's data class.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Flow's data class.",
        SerializedName = @"flowDataType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("ServiceBus", "EventHub", "ApiEndpoint", "ApiSDK", "Video", "Blob", "Table")]
        string FlowDataType { get; set; }
        /// <summary>Dataflow GUID associated with this flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Dataflow GUID associated with this flow",
        SerializedName = @"flowId",
        PossibleTypes = new [] { typeof(string) })]
        string FlowId { get;  }
        /// <summary>
        /// A description of the FlowProfile and its rulesets. The description should describe the flowprofile's purpose and rulesets
        /// applied.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A description of the FlowProfile and its rulesets. The description should describe the flowprofile's purpose and rulesets applied.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string FlowProfileDescription { get; set; }
        /// <summary>
        /// A guid represented as a string for the FlowProfile resource, assigned by the system.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A guid represented as a string for the FlowProfile resource, assigned by the system.",
        SerializedName = @"flowProfileId",
        PossibleTypes = new [] { typeof(string) })]
        string FlowProfileId { get; set; }
        /// <summary>The name of the FlowProfile.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the FlowProfile.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string FlowProfileName { get; set; }
        /// <summary>
        /// The name of the parent Pipeline Azure resource associated with this FlowProfile.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the parent Pipeline Azure resource associated with this FlowProfile.",
        SerializedName = @"pipeline",
        PossibleTypes = new [] { typeof(string) })]
        string FlowProfilePipeline { get; set; }
        /// <summary>
        /// The data replication scenario handled by this FlowProfile. Please note, that this value cannot be updated after creation.
        /// See the FlowProfilePatchProperties to see updateable properties.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The data replication scenario handled by this FlowProfile. Please note, that this value cannot be updated after creation. See the FlowProfilePatchProperties to see updateable properties.",
        SerializedName = @"replicationScenario",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Messaging", "API", "Stream", "Files", "SoftwareArtifacts", "Complex")]
        string FlowProfileReplicationScenario { get; set; }
        /// <summary>The operational status of the FlowProfile.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The operational status of the FlowProfile.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Obsolete", "Enabled")]
        string FlowProfileStatus { get; set; }
        /// <summary>
        /// The flow type for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please
        /// create and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow type for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please create and use a FlowProfile resource instead.",
        SerializedName = @"flowType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        string FlowType { get; set; }
        /// <summary>Force disablement status of the current flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Force disablement status of the current flow",
        SerializedName = @"forceDisabledStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("ConnectionForceDisabled", "FlowTypeForceDisabled", "PipelineForceDisabled")]
        System.Collections.Generic.List<string> ForceDisabledStatus { get;  }
        /// <summary>URI to a Key Vault Secret containing a SAS token.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"URI to a Key Vault Secret containing a SAS token.",
        SerializedName = @"keyVaultUri",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultUri { get; set; }
        /// <summary>Link status of the current flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Link status of the current flow",
        SerializedName = @"linkStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Linked", "Unlinked")]
        string LinkStatus { get;  }
        /// <summary>Resource ID of the linked flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource ID of the linked flow",
        SerializedName = @"linkedFlowId",
        PossibleTypes = new [] { typeof(string) })]
        string LinkedFlowId { get;  }
        /// <summary>Billing tier for this messaging flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Billing tier for this messaging flow",
        SerializedName = @"billingTier",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("BlobTransport", "Standard", "Premium")]
        string MessagingOptionBillingTier { get; set; }
        /// <summary>
        /// Field indicating whether to enable guaranteed delivery on the flow or not. The default disabled option chooses speed over
        /// consistency. When enabled, messages are delivered with minimal delay, but delivery is not guaranteed under all conditions
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Field indicating whether to enable guaranteed delivery on the flow or not. The default disabled option chooses speed over consistency. When enabled, messages are delivered with minimal delay, but delivery is not guaranteed under all conditions",
        SerializedName = @"performancePriority",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string MessagingOptionPerformancePriority { get; set; }
        /// <summary>The passphrase used for SRT streams</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The passphrase used for SRT streams",
        SerializedName = @"passphrase",
        PossibleTypes = new [] { typeof(string) })]
        string Passphrase { get; set; }
        /// <summary>
        /// The policies for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please create
        /// and use a FlowProfile resource instead.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The policies for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please create and use a FlowProfile resource instead.",
        SerializedName = @"policies",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Provisioning state of the flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the flow",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get;  }
        /// <summary>
        /// Optional and for advanced used only. A list of authentication methods to use when accessing the remote endpoint. If not
        /// provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional and for advanced used only. A list of authentication methods to use when accessing the remote endpoint. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.",
        SerializedName = @"authentication",
        PossibleTypes = new [] { typeof(ADT.Models.IAuthentication) })]
        System.Collections.Generic.List<ADT.Models.IAuthentication> RemoteEndpointSettingAuthentication { get; set; }
        /// <summary>The remote endpoint uri all API calls.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The remote endpoint uri all API calls.",
        SerializedName = @"endpoint",
        PossibleTypes = new [] { typeof(string) })]
        string RemoteEndpointSettingEndpoint { get; set; }
        /// <summary>Connection ID associated with this schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Connection ID associated with this schema",
        SerializedName = @"connectionId",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaConnectionId { get; set; }
        /// <summary>Content of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Content of the schema",
        SerializedName = @"content",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaContent { get; set; }
        /// <summary>The direction of the schema.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The direction of the schema.",
        SerializedName = @"direction",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string SchemaDirection { get; set; }
        /// <summary>ID associated with this schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID associated with this schema",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaId { get; set; }
        /// <summary>Name of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the schema",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaName { get; set; }
        /// <summary>Status of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the schema",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("New", "Approved")]
        string SchemaStatus { get; set; }
        /// <summary>The Schema Type</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Schema Type",
        SerializedName = @"schemaType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
        string SchemaType { get; set; }
        /// <summary>Uri containing SAS token for the zipped schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Uri containing SAS token for the zipped schema",
        SerializedName = @"schemaUri",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaUri { get; set; }
        /// <summary>Service Bus Queue ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Service Bus Queue ID",
        SerializedName = @"serviceBusQueueId",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceBusQueueId { get; set; }
        /// <summary>A source IP address or CIDR range</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A source IP address or CIDR range",
        SerializedName = @"sourceAddresses",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SourceAddressSourceAddresses { get; set; }
        /// <summary>Status of the current flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the current flow",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Storage Account ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Account ID",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountId { get; set; }
        /// <summary>Storage Account</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Account",
        SerializedName = @"storageAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountName { get; set; }
        /// <summary>Storage Container Name</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Container Name",
        SerializedName = @"storageContainerName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageContainerName { get; set; }
        /// <summary>Storage Table Name</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Table Name",
        SerializedName = @"storageTableName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageTableName { get; set; }
        /// <summary>The flow stream identifier</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow stream identifier",
        SerializedName = @"streamId",
        PossibleTypes = new [] { typeof(string) })]
        string StreamId { get; set; }
        /// <summary>The latency of the stream in milliseconds</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The latency of the stream in milliseconds",
        SerializedName = @"streamLatency",
        PossibleTypes = new [] { typeof(long) })]
        long? StreamLatency { get; set; }
        /// <summary>The protocol of the stream</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The protocol of the stream",
        SerializedName = @"streamProtocol",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("UDP", "SRT", "RTP")]
        string StreamProtocol { get; set; }

    }
    /// Properties of flow
    internal partial interface IFlowPropertiesInternal

    {
        /// <summary>The API Flow configuration options for Azure Data Transfer API Flow type.</summary>
        ADT.Models.IApiFlowOptions ApiFlowOption { get; set; }
        /// <summary>
        /// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("SDK", "Endpoint")]
        string ApiFlowOptionApiMode { get; set; }
        /// <summary>
        /// Optional field to override the audience of the remote endpoint. The property has reached end of life support starting
        /// version 2025-05-30-preview. Please create and use the authentication property instead.
        /// </summary>
        string ApiFlowOptionAudienceOverride { get; set; }
        /// <summary>
        /// Optional and for advanced used only. A list of authentication methods to use when accessing the Azure Data Transfer API
        /// Flow. If not provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
        /// </summary>
        System.Collections.Generic.List<ADT.Models.IAuthentication> ApiFlowOptionAuthentication { get; set; }
        /// <summary>Unique CNAME to represent the Azure Data Transfer API Flow instance</summary>
        string ApiFlowOptionCname { get; set; }
        /// <summary>
        /// Determines which identity to use for extracting the user token for Azure Data Transfer API Flow. The property has reached
        /// end of life support starting version 2025-05-30-preview. Please create and use the authentication property instead.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("UserIdentity", "ServiceIdentity")]
        string ApiFlowOptionIdentityTranslation { get; set; }
        /// <summary>
        /// Remote stub app registration Client ID. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the authentication property instead.
        /// </summary>
        string ApiFlowOptionRemoteCallingModeClientId { get; set; }
        /// <summary>
        /// Remote host to which communication needs to be made. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the remoteEndpointSettings.endpoint property instead.
        /// </summary>
        string ApiFlowOptionRemoteEndpoint { get; set; }
        /// <summary>Defines the destination remote endpoint for the API calls.</summary>
        ADT.Models.IRemoteEndpointSettings ApiFlowOptionRemoteEndpointSetting { get; set; }
        /// <summary>
        /// Sender's app user assigned Manage Identity client ID. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use the authentication property instead.
        /// </summary>
        string ApiFlowOptionSenderClientId { get; set; }
        /// <summary>The connection associated with this flow</summary>
        ADT.Models.ISelectedResource Connection { get; set; }
        /// <summary>Id of the connection</summary>
        string ConnectionId { get; set; }
        /// <summary>Location of the connection</summary>
        string ConnectionLocation { get; set; }
        /// <summary>Name of the connection</summary>
        string ConnectionName { get; set; }
        /// <summary>Name of the subscription with the connection</summary>
        string ConnectionSubscriptionName { get; set; }
        /// <summary>Event Hub Consumer Group</summary>
        string ConsumerGroup { get; set; }
        /// <summary>The URI to the customer managed key for this flow</summary>
        string CustomerManagedKeyVaultUri { get; set; }
        /// <summary>
        /// Type of data to transfer via the flow. The property has reached end of life support starting version 2025-05-30-preview.
        /// Please create and use a FlowProfile resource instead.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Blob", "Table")]
        string DataType { get; set; }
        /// <summary>The destination endpoints of the stream</summary>
        System.Collections.Generic.List<string> DestinationEndpoint { get; set; }
        /// <summary>The destination endpoint ports of the stream</summary>
        System.Collections.Generic.List<long> DestinationEndpointPort { get; set; }
        /// <summary>Event Hub ID</summary>
        string EventHubId { get; set; }
        /// <summary>The Flow's data class.</summary>
        [global::ADT.PSArgumentCompleterAttribute("ServiceBus", "EventHub", "ApiEndpoint", "ApiSDK", "Video", "Blob", "Table")]
        string FlowDataType { get; set; }
        /// <summary>Dataflow GUID associated with this flow</summary>
        string FlowId { get; set; }
        /// <summary>Type of FlowProfile to use for transfer via the flow.</summary>
        ADT.Models.IFlowProfileMetadata FlowProfile { get; set; }
        /// <summary>
        /// A description of the FlowProfile and its rulesets. The description should describe the flowprofile's purpose and rulesets
        /// applied.
        /// </summary>
        string FlowProfileDescription { get; set; }
        /// <summary>
        /// A guid represented as a string for the FlowProfile resource, assigned by the system.
        /// </summary>
        string FlowProfileId { get; set; }
        /// <summary>The name of the FlowProfile.</summary>
        string FlowProfileName { get; set; }
        /// <summary>
        /// The name of the parent Pipeline Azure resource associated with this FlowProfile.
        /// </summary>
        string FlowProfilePipeline { get; set; }
        /// <summary>
        /// The data replication scenario handled by this FlowProfile. Please note, that this value cannot be updated after creation.
        /// See the FlowProfilePatchProperties to see updateable properties.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Messaging", "API", "Stream", "Files", "SoftwareArtifacts", "Complex")]
        string FlowProfileReplicationScenario { get; set; }
        /// <summary>The operational status of the FlowProfile.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Obsolete", "Enabled")]
        string FlowProfileStatus { get; set; }
        /// <summary>
        /// The flow type for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please
        /// create and use a FlowProfile resource instead.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        string FlowType { get; set; }
        /// <summary>Force disablement status of the current flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("ConnectionForceDisabled", "FlowTypeForceDisabled", "PipelineForceDisabled")]
        System.Collections.Generic.List<string> ForceDisabledStatus { get; set; }
        /// <summary>URI to a Key Vault Secret containing a SAS token.</summary>
        string KeyVaultUri { get; set; }
        /// <summary>Link status of the current flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Linked", "Unlinked")]
        string LinkStatus { get; set; }
        /// <summary>Resource ID of the linked flow</summary>
        string LinkedFlowId { get; set; }
        /// <summary>The messaging options for this flow</summary>
        ADT.Models.IMessagingOptions MessagingOption { get; set; }
        /// <summary>Billing tier for this messaging flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("BlobTransport", "Standard", "Premium")]
        string MessagingOptionBillingTier { get; set; }
        /// <summary>
        /// Field indicating whether to enable guaranteed delivery on the flow or not. The default disabled option chooses speed over
        /// consistency. When enabled, messages are delivered with minimal delay, but delivery is not guaranteed under all conditions
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string MessagingOptionPerformancePriority { get; set; }
        /// <summary>The passphrase used for SRT streams</summary>
        string Passphrase { get; set; }
        /// <summary>
        /// The policies for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please create
        /// and use a FlowProfile resource instead.
        /// </summary>
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Provisioning state of the flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// Optional and for advanced used only. A list of authentication methods to use when accessing the remote endpoint. If not
        /// provided, the default S2S authentication using Entra (API Flow Managed Identity) and RBAC will be applied.
        /// </summary>
        System.Collections.Generic.List<ADT.Models.IAuthentication> RemoteEndpointSettingAuthentication { get; set; }
        /// <summary>The remote endpoint uri all API calls.</summary>
        string RemoteEndpointSettingEndpoint { get; set; }
        /// <summary>
        /// The selected schema for this flow. The property has reached end of life support starting version 2025-05-30-preview. Please
        /// create and use a FlowProfile resource instead.
        /// </summary>
        ADT.Models.ISchema Schema { get; set; }
        /// <summary>Connection ID associated with this schema</summary>
        string SchemaConnectionId { get; set; }
        /// <summary>Content of the schema</summary>
        string SchemaContent { get; set; }
        /// <summary>The direction of the schema.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string SchemaDirection { get; set; }
        /// <summary>ID associated with this schema</summary>
        string SchemaId { get; set; }
        /// <summary>Name of the schema</summary>
        string SchemaName { get; set; }
        /// <summary>Status of the schema</summary>
        [global::ADT.PSArgumentCompleterAttribute("New", "Approved")]
        string SchemaStatus { get; set; }
        /// <summary>The Schema Type</summary>
        [global::ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
        string SchemaType { get; set; }
        /// <summary>Uri containing SAS token for the zipped schema</summary>
        string SchemaUri { get; set; }
        /// <summary>Service Bus Queue ID</summary>
        string ServiceBusQueueId { get; set; }
        /// <summary>The source IP address and CIDR ranges of the stream</summary>
        ADT.Models.IStreamSourceAddresses SourceAddress { get; set; }
        /// <summary>A source IP address or CIDR range</summary>
        System.Collections.Generic.List<string> SourceAddressSourceAddresses { get; set; }
        /// <summary>Status of the current flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Storage Account ID</summary>
        string StorageAccountId { get; set; }
        /// <summary>Storage Account</summary>
        string StorageAccountName { get; set; }
        /// <summary>Storage Container Name</summary>
        string StorageContainerName { get; set; }
        /// <summary>Storage Table Name</summary>
        string StorageTableName { get; set; }
        /// <summary>The flow stream identifier</summary>
        string StreamId { get; set; }
        /// <summary>The latency of the stream in milliseconds</summary>
        long? StreamLatency { get; set; }
        /// <summary>The protocol of the stream</summary>
        [global::ADT.PSArgumentCompleterAttribute("UDP", "SRT", "RTP")]
        string StreamProtocol { get; set; }

    }
}