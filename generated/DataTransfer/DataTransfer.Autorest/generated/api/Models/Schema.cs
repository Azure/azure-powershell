// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>The schema object.</summary>
    public partial class Schema :
        ADT.Models.ISchema,
        ADT.Models.ISchemaInternal
    {

        /// <summary>Backing field for <see cref="ConnectionId" /> property.</summary>
        private string _connectionId;

        /// <summary>Connection ID associated with this schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ConnectionId { get => this._connectionId; set => this._connectionId = value; }

        /// <summary>Backing field for <see cref="Content" /> property.</summary>
        private string _content;

        /// <summary>Content of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Content { get => this._content; set => this._content = value; }

        /// <summary>Backing field for <see cref="Direction" /> property.</summary>
        private string _direction;

        /// <summary>The direction of the schema.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Direction { get => this._direction; set => this._direction = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>ID associated with this schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The Schema Type</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Backing field for <see cref="Uri" /> property.</summary>
        private string _uri;

        /// <summary>Uri containing SAS token for the zipped schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Uri { get => this._uri; set => this._uri = value; }

        /// <summary>Creates an new <see cref="Schema" /> instance.</summary>
        public Schema()
        {

        }
    }
    /// The schema object.
    public partial interface ISchema :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>Connection ID associated with this schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Connection ID associated with this schema",
        SerializedName = @"connectionId",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionId { get; set; }
        /// <summary>Content of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Content of the schema",
        SerializedName = @"content",
        PossibleTypes = new [] { typeof(string) })]
        string Content { get; set; }
        /// <summary>The direction of the schema.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The direction of the schema.",
        SerializedName = @"direction",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string Direction { get; set; }
        /// <summary>ID associated with this schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID associated with this schema",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>Name of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the schema",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Status of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the schema",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("New", "Approved")]
        string Status { get; set; }
        /// <summary>The Schema Type</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Schema Type",
        SerializedName = @"schemaType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
        string Type { get; set; }
        /// <summary>Uri containing SAS token for the zipped schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Uri containing SAS token for the zipped schema",
        SerializedName = @"schemaUri",
        PossibleTypes = new [] { typeof(string) })]
        string Uri { get; set; }

    }
    /// The schema object.
    internal partial interface ISchemaInternal

    {
        /// <summary>Connection ID associated with this schema</summary>
        string ConnectionId { get; set; }
        /// <summary>Content of the schema</summary>
        string Content { get; set; }
        /// <summary>The direction of the schema.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string Direction { get; set; }
        /// <summary>ID associated with this schema</summary>
        string Id { get; set; }
        /// <summary>Name of the schema</summary>
        string Name { get; set; }
        /// <summary>Status of the schema</summary>
        [global::ADT.PSArgumentCompleterAttribute("New", "Approved")]
        string Status { get; set; }
        /// <summary>The Schema Type</summary>
        [global::ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
        string Type { get; set; }
        /// <summary>Uri containing SAS token for the zipped schema</summary>
        string Uri { get; set; }

    }
}