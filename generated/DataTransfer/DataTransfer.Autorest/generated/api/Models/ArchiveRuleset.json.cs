// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>
    /// Rules for regulating supported archive files (BZip2, Cpio, Deb, GZip, Rpm, Tar, Zip) during data replication. All properties
    /// are optional and only the configured options will be applied against archives. As an example, suppose minimumSizeForExpansion
    /// is 10 MiB and maximumExpansionSizeLimit is 1 GiB. Then all archives smaller than 10 MiB will be treated as though the
    /// archive ruleset is disabled, although other rulesets will apply as usual. Furthermore, all archives at least 10 MiB in
    /// size but with a decompressed size greater than 1 GiB will fail the ruleset. All other archives will have their contents
    /// extracted and each extracted element will be applied to all rulesets.
    /// </summary>
    public partial class ArchiveRuleset
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(ADT.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="ADT.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref ADT.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(ADT.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref ADT.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a ADT.Runtime.Json.JsonObject into a new instance of <see cref="ArchiveRuleset" />.
        /// </summary>
        /// <param name="json">A ADT.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal ArchiveRuleset(ADT.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_minimumSizeForExpansion = If( json?.PropertyT<ADT.Runtime.Json.JsonNumber>("minimumSizeForExpansion"), out var __jsonMinimumSizeForExpansion) ? (long?)__jsonMinimumSizeForExpansion : _minimumSizeForExpansion;}
            {_maximumExpansionSizeLimit = If( json?.PropertyT<ADT.Runtime.Json.JsonNumber>("maximumExpansionSizeLimit"), out var __jsonMaximumExpansionSizeLimit) ? (long?)__jsonMaximumExpansionSizeLimit : _maximumExpansionSizeLimit;}
            {_maximumDepthLimit = If( json?.PropertyT<ADT.Runtime.Json.JsonNumber>("maximumDepthLimit"), out var __jsonMaximumDepthLimit) ? (long?)__jsonMaximumDepthLimit : _maximumDepthLimit;}
            {_maximumCompressionRatioLimit = If( json?.PropertyT<ADT.Runtime.Json.JsonNumber>("maximumCompressionRatioLimit"), out var __jsonMaximumCompressionRatioLimit) ? (double?)__jsonMaximumCompressionRatioLimit : _maximumCompressionRatioLimit;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="ADT.Runtime.Json.JsonNode"/> into an instance of ADT.Models.IArchiveRuleset.
        /// </summary>
        /// <param name="node">a <see cref="ADT.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of ADT.Models.IArchiveRuleset.</returns>
        public static ADT.Models.IArchiveRuleset FromJson(ADT.Runtime.Json.JsonNode node)
        {
            return node is ADT.Runtime.Json.JsonObject json ? new ArchiveRuleset(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="ArchiveRuleset" /> into a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="ADT.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="ADT.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="ArchiveRuleset" /> as a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </returns>
        public ADT.Runtime.Json.JsonNode ToJson(ADT.Runtime.Json.JsonObject container, ADT.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new ADT.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._minimumSizeForExpansion ? (ADT.Runtime.Json.JsonNode)new ADT.Runtime.Json.JsonNumber((long)this._minimumSizeForExpansion) : null, "minimumSizeForExpansion" ,container.Add );
            AddIf( null != this._maximumExpansionSizeLimit ? (ADT.Runtime.Json.JsonNode)new ADT.Runtime.Json.JsonNumber((long)this._maximumExpansionSizeLimit) : null, "maximumExpansionSizeLimit" ,container.Add );
            AddIf( null != this._maximumDepthLimit ? (ADT.Runtime.Json.JsonNode)new ADT.Runtime.Json.JsonNumber((long)this._maximumDepthLimit) : null, "maximumDepthLimit" ,container.Add );
            AddIf( null != this._maximumCompressionRatioLimit ? (ADT.Runtime.Json.JsonNode)new ADT.Runtime.Json.JsonNumber((double)this._maximumCompressionRatioLimit) : null, "maximumCompressionRatioLimit" ,container.Add );
            AfterToJson(ref container);
            return container;
        }
    }
}