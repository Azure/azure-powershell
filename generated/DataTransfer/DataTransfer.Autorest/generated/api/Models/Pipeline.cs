// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>The pipeline resource definition.</summary>
    public partial class Pipeline :
        ADT.Models.IPipeline,
        ADT.Models.IPipelineInternal,
        ADT.Runtime.IValidates
    {
        /// <summary>Backing field for Inherited model <see cref= "ADT.Models.ITrackedResource" /></summary>
        private ADT.Models.ITrackedResource __trackedResource = new ADT.Models.TrackedResource();

        /// <summary>Internal Acessors for Connection</summary>
        System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> ADT.Models.IPipelineInternal.Connection { get => ((ADT.Models.IPipelinePropertiesInternal)Property).Connection; set => ((ADT.Models.IPipelinePropertiesInternal)Property).Connection = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Identity</summary>
        ADT.Models.IManagedServiceIdentity ADT.Models.IPipelineInternal.Identity { get => (this._identity = this._identity ?? new ADT.Models.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string ADT.Models.IPipelineInternal.IdentityPrincipalId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId = value ?? null; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string ADT.Models.IPipelineInternal.IdentityTenantId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId = value ?? null; }

        /// <summary>Internal Acessors for Property</summary>
        ADT.Models.IPipelineProperties ADT.Models.IPipelineInternal.Property { get => (this._property = this._property ?? new ADT.Models.PipelineProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string ADT.Models.IPipelineInternal.ProvisioningState { get => ((ADT.Models.IPipelinePropertiesInternal)Property).ProvisioningState; set => ((ADT.Models.IPipelinePropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string ADT.Models.IResourceInternal.Id { get => ((ADT.Models.IResourceInternal)__trackedResource).Id; set => ((ADT.Models.IResourceInternal)__trackedResource).Id = value ?? null; }

        /// <summary>Internal Acessors for Name</summary>
        string ADT.Models.IResourceInternal.Name { get => ((ADT.Models.IResourceInternal)__trackedResource).Name; set => ((ADT.Models.IResourceInternal)__trackedResource).Name = value ?? null; }

        /// <summary>Internal Acessors for SystemData</summary>
        ADT.Models.ISystemData ADT.Models.IResourceInternal.SystemData { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemData; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? ADT.Models.IResourceInternal.SystemDataCreatedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string ADT.Models.IResourceInternal.SystemDataCreatedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string ADT.Models.IResourceInternal.SystemDataCreatedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? ADT.Models.IResourceInternal.SystemDataLastModifiedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string ADT.Models.IResourceInternal.SystemDataLastModifiedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string ADT.Models.IResourceInternal.SystemDataLastModifiedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string ADT.Models.IResourceInternal.Type { get => ((ADT.Models.IResourceInternal)__trackedResource).Type; set => ((ADT.Models.IResourceInternal)__trackedResource).Type = value ?? null; }

        /// <summary>Connections associated with pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> Connection { get => ((ADT.Models.IPipelinePropertiesInternal)Property).Connection; }

        /// <summary>The flow types that are disabled for this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> DisabledFlowType { get => ((ADT.Models.IPipelinePropertiesInternal)Property).DisabledFlowType; set => ((ADT.Models.IPipelinePropertiesInternal)Property).DisabledFlowType = value ?? null /* arrayOf */; }

        /// <summary>Display name of this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((ADT.Models.IPipelinePropertiesInternal)Property).DisplayName; set => ((ADT.Models.IPipelinePropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>The flow types allowed for this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> FlowType { get => ((ADT.Models.IPipelinePropertiesInternal)Property).FlowType; set => ((ADT.Models.IPipelinePropertiesInternal)Property).FlowType = value ?? null /* arrayOf */; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Id { get => ((ADT.Models.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private ADT.Models.IManagedServiceIdentity _identity;

        /// <summary>The managed service identities assigned to this resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new ADT.Models.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).Type; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>The geo-location where the resource lives</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Location { get => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Location; set => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Location = value ?? null; }

        /// <summary>The name of the resource</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Name { get => ((ADT.Models.IResourceInternal)__trackedResource).Name; }

        /// <summary>The policies for this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Policy { get => ((ADT.Models.IPipelinePropertiesInternal)Property).Policy; set => ((ADT.Models.IPipelinePropertiesInternal)Property).Policy = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private ADT.Models.IPipelineProperties _property;

        /// <summary>Properties of pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IPipelineProperties Property { get => (this._property = this._property ?? new ADT.Models.PipelineProperties()); set => this._property = value; }

        /// <summary>Provisioning state of the pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((ADT.Models.IPipelinePropertiesInternal)Property).ProvisioningState; }

        /// <summary>Quarantine Download Storage Account</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string QuarantineDownloadStorageAccount { get => ((ADT.Models.IPipelinePropertiesInternal)Property).QuarantineDownloadStorageAccount; set => ((ADT.Models.IPipelinePropertiesInternal)Property).QuarantineDownloadStorageAccount = value ?? null; }

        /// <summary>Quarantine Download Storage Container</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string QuarantineDownloadStorageContainer { get => ((ADT.Models.IPipelinePropertiesInternal)Property).QuarantineDownloadStorageContainer; set => ((ADT.Models.IPipelinePropertiesInternal)Property).QuarantineDownloadStorageContainer = value ?? null; }

        /// <summary>Remote cloud of the data to be transferred or received</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string RemoteCloud { get => ((ADT.Models.IPipelinePropertiesInternal)Property).RemoteCloud; set => ((ADT.Models.IPipelinePropertiesInternal)Property).RemoteCloud = value ?? null; }

        /// <summary>Gets the resource group name</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Status of the current pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string Status { get => ((ADT.Models.IPipelinePropertiesInternal)Property).Status; set => ((ADT.Models.IPipelinePropertiesInternal)Property).Status = value ?? null; }

        /// <summary>Subscribers of this resource</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<ADT.Models.ISubscriber> Subscriber { get => ((ADT.Models.IPipelinePropertiesInternal)Property).Subscriber; set => ((ADT.Models.IPipelinePropertiesInternal)Property).Subscriber = value ?? null /* arrayOf */; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        internal ADT.Models.ISystemData SystemData { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemData; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; }

        /// <summary>Resource tags.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public ADT.Models.ITrackedResourceTags Tag { get => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Tag; set => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Type { get => ((ADT.Models.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="Pipeline" /> instance.</summary>
        public Pipeline()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="ADT.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(ADT.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// The pipeline resource definition.
    public partial interface IPipeline :
        ADT.Runtime.IJsonSerializable,
        ADT.Models.ITrackedResource
    {
        /// <summary>Connections associated with pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Connections associated with pipeline",
        SerializedName = @"connections",
        PossibleTypes = new [] { typeof(ADT.Models.IReadPipelineConnection) })]
        System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> Connection { get;  }
        /// <summary>The flow types that are disabled for this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow types that are disabled for this pipeline",
        SerializedName = @"disabledFlowTypes",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> DisabledFlowType { get; set; }
        /// <summary>Display name of this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Display name of this pipeline",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>The flow types allowed for this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow types allowed for this pipeline",
        SerializedName = @"flowTypes",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> FlowType { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(ADT.Models.IUserAssignedIdentities) })]
        ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The policies for this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The policies for this pipeline",
        SerializedName = @"policies",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Provisioning state of the pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the pipeline",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get;  }
        /// <summary>Quarantine Download Storage Account</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Quarantine Download Storage Account",
        SerializedName = @"quarantineDownloadStorageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string QuarantineDownloadStorageAccount { get; set; }
        /// <summary>Quarantine Download Storage Container</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Quarantine Download Storage Container",
        SerializedName = @"quarantineDownloadStorageContainer",
        PossibleTypes = new [] { typeof(string) })]
        string QuarantineDownloadStorageContainer { get; set; }
        /// <summary>Remote cloud of the data to be transferred or received</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote cloud of the data to be transferred or received",
        SerializedName = @"remoteCloud",
        PossibleTypes = new [] { typeof(string) })]
        string RemoteCloud { get; set; }
        /// <summary>Status of the current pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the current pipeline",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Subscribers of this resource</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Subscribers of this resource",
        SerializedName = @"subscribers",
        PossibleTypes = new [] { typeof(ADT.Models.ISubscriber) })]
        System.Collections.Generic.List<ADT.Models.ISubscriber> Subscriber { get; set; }

    }
    /// The pipeline resource definition.
    internal partial interface IPipelineInternal :
        ADT.Models.ITrackedResourceInternal
    {
        /// <summary>Connections associated with pipeline</summary>
        System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> Connection { get; set; }
        /// <summary>The flow types that are disabled for this pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> DisabledFlowType { get; set; }
        /// <summary>Display name of this pipeline</summary>
        string DisplayName { get; set; }
        /// <summary>The flow types allowed for this pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> FlowType { get; set; }
        /// <summary>The managed service identities assigned to this resource.</summary>
        ADT.Models.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The policies for this pipeline</summary>
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Properties of pipeline</summary>
        ADT.Models.IPipelineProperties Property { get; set; }
        /// <summary>Provisioning state of the pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get; set; }
        /// <summary>Quarantine Download Storage Account</summary>
        string QuarantineDownloadStorageAccount { get; set; }
        /// <summary>Quarantine Download Storage Container</summary>
        string QuarantineDownloadStorageContainer { get; set; }
        /// <summary>Remote cloud of the data to be transferred or received</summary>
        string RemoteCloud { get; set; }
        /// <summary>Status of the current pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Subscribers of this resource</summary>
        System.Collections.Generic.List<ADT.Models.ISubscriber> Subscriber { get; set; }

    }
}