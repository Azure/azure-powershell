// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>
    /// Defines a list of Media types (f.k.a MIME Types) and associated file extensions subject to filtering.
    /// </summary>
    public partial class MimeTypeFilter :
        ADT.Models.IMimeTypeFilter,
        ADT.Models.IMimeTypeFilterInternal
    {

        /// <summary>Backing field for <see cref="Extension" /> property.</summary>
        private System.Collections.Generic.List<string> _extension;

        /// <summary>
        /// A list of file extensions associated with the specified Media type (e.g., .json, .png). To specify files with no extension,
        /// use an empty string ""."
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Extension { get => this._extension; set => this._extension = value; }

        /// <summary>Backing field for <see cref="Media" /> property.</summary>
        private string _media;

        /// <summary>
        /// The Media Types (f.k.a MIME types), following IANA standards (e.g., application/json, image/png). For a more detailed
        /// list of allowed media types please refer to the Tika documentation: https://github.com/apache/tika/blob/main/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Media { get => this._media; set => this._media = value; }

        /// <summary>Creates an new <see cref="MimeTypeFilter" /> instance.</summary>
        public MimeTypeFilter()
        {

        }
    }
    /// Defines a list of Media types (f.k.a MIME Types) and associated file extensions subject to filtering.
    public partial interface IMimeTypeFilter :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A list of file extensions associated with the specified Media type (e.g., .json, .png). To specify files with no extension,
        /// use an empty string ""."
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of file extensions associated with the specified Media type (e.g., .json, .png). To specify files with no extension, use an empty string """".""",
        SerializedName = @"extensions",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Extension { get; set; }
        /// <summary>
        /// The Media Types (f.k.a MIME types), following IANA standards (e.g., application/json, image/png). For a more detailed
        /// list of allowed media types please refer to the Tika documentation: https://github.com/apache/tika/blob/main/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Media Types (f.k.a MIME types), following IANA standards (e.g., application/json, image/png). For a more detailed list of allowed media types please refer to the Tika documentation: https://github.com/apache/tika/blob/main/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml",
        SerializedName = @"media",
        PossibleTypes = new [] { typeof(string) })]
        string Media { get; set; }

    }
    /// Defines a list of Media types (f.k.a MIME Types) and associated file extensions subject to filtering.
    internal partial interface IMimeTypeFilterInternal

    {
        /// <summary>
        /// A list of file extensions associated with the specified Media type (e.g., .json, .png). To specify files with no extension,
        /// use an empty string ""."
        /// </summary>
        System.Collections.Generic.List<string> Extension { get; set; }
        /// <summary>
        /// The Media Types (f.k.a MIME types), following IANA standards (e.g., application/json, image/png). For a more detailed
        /// list of allowed media types please refer to the Tika documentation: https://github.com/apache/tika/blob/main/tika-core/src/main/resources/org/apache/tika/mime/tika-mimetypes.xml
        /// </summary>
        string Media { get; set; }

    }
}