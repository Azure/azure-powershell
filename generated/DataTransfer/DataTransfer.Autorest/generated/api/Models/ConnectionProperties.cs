// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Properties of connection</summary>
    public partial class ConnectionProperties :
        ADT.Models.IConnectionProperties,
        ADT.Models.IConnectionPropertiesInternal
    {

        /// <summary>Internal Acessors for Approver</summary>
        string ADT.Models.IConnectionPropertiesInternal.Approver { get => this._approver; set { {_approver = value;} } }

        /// <summary>Internal Acessors for DateSubmitted</summary>
        global::System.DateTime? ADT.Models.IConnectionPropertiesInternal.DateSubmitted { get => this._dateSubmitted; set { {_dateSubmitted = value;} } }

        /// <summary>Internal Acessors for ForceDisabledStatus</summary>
        System.Collections.Generic.List<string> ADT.Models.IConnectionPropertiesInternal.ForceDisabledStatus { get => this._forceDisabledStatus; set { {_forceDisabledStatus = value;} } }

        /// <summary>Internal Acessors for LinkStatus</summary>
        string ADT.Models.IConnectionPropertiesInternal.LinkStatus { get => this._linkStatus; set { {_linkStatus = value;} } }

        /// <summary>Internal Acessors for LinkedConnectionId</summary>
        string ADT.Models.IConnectionPropertiesInternal.LinkedConnectionId { get => this._linkedConnectionId; set { {_linkedConnectionId = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string ADT.Models.IConnectionPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for Status</summary>
        string ADT.Models.IConnectionPropertiesInternal.Status { get => this._status; set { {_status = value;} } }

        /// <summary>Internal Acessors for StatusReason</summary>
        string ADT.Models.IConnectionPropertiesInternal.StatusReason { get => this._statusReason; set { {_statusReason = value;} } }

        /// <summary>Backing field for <see cref="Approver" /> property.</summary>
        private string _approver;

        /// <summary>Approver of this connection request</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Approver { get => this._approver; }

        /// <summary>Backing field for <see cref="DateSubmitted" /> property.</summary>
        private global::System.DateTime? _dateSubmitted;

        /// <summary>The timestamp that this connection request was submitted at</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public global::System.DateTime? DateSubmitted { get => this._dateSubmitted; }

        /// <summary>Backing field for <see cref="Direction" /> property.</summary>
        private string _direction;

        /// <summary>Direction of data movement</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Direction { get => this._direction; set => this._direction = value; }

        /// <summary>Backing field for <see cref="FlowType" /> property.</summary>
        private System.Collections.Generic.List<string> _flowType;

        /// <summary>The flow types being requested for this connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> FlowType { get => this._flowType; set => this._flowType = value; }

        /// <summary>Backing field for <see cref="ForceDisabledStatus" /> property.</summary>
        private System.Collections.Generic.List<string> _forceDisabledStatus;

        /// <summary>Force disablement status of the current connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> ForceDisabledStatus { get => this._forceDisabledStatus; }

        /// <summary>Backing field for <see cref="Justification" /> property.</summary>
        private string _justification;

        /// <summary>Justification for the connection request</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Justification { get => this._justification; set => this._justification = value; }

        /// <summary>Backing field for <see cref="LinkStatus" /> property.</summary>
        private string _linkStatus;

        /// <summary>Link status of the current connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string LinkStatus { get => this._linkStatus; }

        /// <summary>Backing field for <see cref="LinkedConnectionId" /> property.</summary>
        private string _linkedConnectionId;

        /// <summary>Resource ID of the linked connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string LinkedConnectionId { get => this._linkedConnectionId; }

        /// <summary>Backing field for <see cref="Pin" /> property.</summary>
        private string _pin;

        /// <summary>PIN to link requests together</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Pin { get => this._pin; set => this._pin = value; }

        /// <summary>Backing field for <see cref="Pipeline" /> property.</summary>
        private string _pipeline;

        /// <summary>Pipeline to use to transfer data</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Pipeline { get => this._pipeline; set => this._pipeline = value; }

        /// <summary>Backing field for <see cref="Policy" /> property.</summary>
        private System.Collections.Generic.List<string> _policy;

        /// <summary>The policies for this connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Policy { get => this._policy; set => this._policy = value; }

        /// <summary>Backing field for <see cref="PrimaryContact" /> property.</summary>
        private string _primaryContact;

        /// <summary>The primary contact for this connection request</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string PrimaryContact { get => this._primaryContact; set => this._primaryContact = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="RemoteSubscriptionId" /> property.</summary>
        private string _remoteSubscriptionId;

        /// <summary>Subscription ID to link cloud subscriptions together</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string RemoteSubscriptionId { get => this._remoteSubscriptionId; set => this._remoteSubscriptionId = value; }

        /// <summary>Backing field for <see cref="RequirementId" /> property.</summary>
        private string _requirementId;

        /// <summary>Requirement ID of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string RequirementId { get => this._requirementId; set => this._requirementId = value; }

        /// <summary>Backing field for <see cref="Schema" /> property.</summary>
        private System.Collections.Generic.List<ADT.Models.ISchema> _schema;

        /// <summary>The schemas for this connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<ADT.Models.ISchema> Schema { get => this._schema; set => this._schema = value; }

        /// <summary>Backing field for <see cref="SchemaUri" /> property.</summary>
        private System.Collections.Generic.List<string> _schemaUri;

        /// <summary>The schema URIs for this connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> SchemaUri { get => this._schemaUri; set => this._schemaUri = value; }

        /// <summary>Backing field for <see cref="SecondaryContact" /> property.</summary>
        private System.Collections.Generic.List<string> _secondaryContact;

        /// <summary>The secondary contacts for this connection request</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> SecondaryContact { get => this._secondaryContact; set => this._secondaryContact = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Status { get => this._status; }

        /// <summary>Backing field for <see cref="StatusReason" /> property.</summary>
        private string _statusReason;

        /// <summary>Reason for status</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string StatusReason { get => this._statusReason; }

        /// <summary>Creates an new <see cref="ConnectionProperties" /> instance.</summary>
        public ConnectionProperties()
        {

        }
    }
    /// Properties of connection
    public partial interface IConnectionProperties :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>Approver of this connection request</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Approver of this connection request",
        SerializedName = @"approver",
        PossibleTypes = new [] { typeof(string) })]
        string Approver { get;  }
        /// <summary>The timestamp that this connection request was submitted at</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp that this connection request was submitted at",
        SerializedName = @"dateSubmitted",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? DateSubmitted { get;  }
        /// <summary>Direction of data movement</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Direction of data movement",
        SerializedName = @"direction",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string Direction { get; set; }
        /// <summary>The flow types being requested for this connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow types being requested for this connection",
        SerializedName = @"flowTypes",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> FlowType { get; set; }
        /// <summary>Force disablement status of the current connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Force disablement status of the current connection",
        SerializedName = @"forceDisabledStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("ConnectionForceDisabled", "FlowTypeForceDisabled")]
        System.Collections.Generic.List<string> ForceDisabledStatus { get;  }
        /// <summary>Justification for the connection request</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Justification for the connection request",
        SerializedName = @"justification",
        PossibleTypes = new [] { typeof(string) })]
        string Justification { get; set; }
        /// <summary>Link status of the current connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Link status of the current connection",
        SerializedName = @"linkStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Linked", "Unlinked")]
        string LinkStatus { get;  }
        /// <summary>Resource ID of the linked connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource ID of the linked connection",
        SerializedName = @"linkedConnectionId",
        PossibleTypes = new [] { typeof(string) })]
        string LinkedConnectionId { get;  }
        /// <summary>PIN to link requests together</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"PIN to link requests together",
        SerializedName = @"pin",
        PossibleTypes = new [] { typeof(string) })]
        string Pin { get; set; }
        /// <summary>Pipeline to use to transfer data</summary>
        [ADT.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Pipeline to use to transfer data",
        SerializedName = @"pipeline",
        PossibleTypes = new [] { typeof(string) })]
        string Pipeline { get; set; }
        /// <summary>The policies for this connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The policies for this connection",
        SerializedName = @"policies",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>The primary contact for this connection request</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The primary contact for this connection request",
        SerializedName = @"primaryContact",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryContact { get; set; }
        /// <summary>Provisioning state of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the connection",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get;  }
        /// <summary>Subscription ID to link cloud subscriptions together</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Subscription ID to link cloud subscriptions together",
        SerializedName = @"remoteSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string RemoteSubscriptionId { get; set; }
        /// <summary>Requirement ID of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Requirement ID of the connection",
        SerializedName = @"requirementId",
        PossibleTypes = new [] { typeof(string) })]
        string RequirementId { get; set; }
        /// <summary>The schemas for this connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The schemas for this connection",
        SerializedName = @"schemas",
        PossibleTypes = new [] { typeof(ADT.Models.ISchema) })]
        System.Collections.Generic.List<ADT.Models.ISchema> Schema { get; set; }
        /// <summary>The schema URIs for this connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The schema URIs for this connection",
        SerializedName = @"schemaUris",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SchemaUri { get; set; }
        /// <summary>The secondary contacts for this connection request</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The secondary contacts for this connection request",
        SerializedName = @"secondaryContacts",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SecondaryContact { get; set; }
        /// <summary>Status of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Status of the connection",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("InReview", "Approved", "Rejected", "Accepted")]
        string Status { get;  }
        /// <summary>Reason for status</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Reason for status",
        SerializedName = @"statusReason",
        PossibleTypes = new [] { typeof(string) })]
        string StatusReason { get;  }

    }
    /// Properties of connection
    internal partial interface IConnectionPropertiesInternal

    {
        /// <summary>Approver of this connection request</summary>
        string Approver { get; set; }
        /// <summary>The timestamp that this connection request was submitted at</summary>
        global::System.DateTime? DateSubmitted { get; set; }
        /// <summary>Direction of data movement</summary>
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string Direction { get; set; }
        /// <summary>The flow types being requested for this connection</summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> FlowType { get; set; }
        /// <summary>Force disablement status of the current connection</summary>
        [global::ADT.PSArgumentCompleterAttribute("ConnectionForceDisabled", "FlowTypeForceDisabled")]
        System.Collections.Generic.List<string> ForceDisabledStatus { get; set; }
        /// <summary>Justification for the connection request</summary>
        string Justification { get; set; }
        /// <summary>Link status of the current connection</summary>
        [global::ADT.PSArgumentCompleterAttribute("Linked", "Unlinked")]
        string LinkStatus { get; set; }
        /// <summary>Resource ID of the linked connection</summary>
        string LinkedConnectionId { get; set; }
        /// <summary>PIN to link requests together</summary>
        string Pin { get; set; }
        /// <summary>Pipeline to use to transfer data</summary>
        string Pipeline { get; set; }
        /// <summary>The policies for this connection</summary>
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>The primary contact for this connection request</summary>
        string PrimaryContact { get; set; }
        /// <summary>Provisioning state of the connection</summary>
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get; set; }
        /// <summary>Subscription ID to link cloud subscriptions together</summary>
        string RemoteSubscriptionId { get; set; }
        /// <summary>Requirement ID of the connection</summary>
        string RequirementId { get; set; }
        /// <summary>The schemas for this connection</summary>
        System.Collections.Generic.List<ADT.Models.ISchema> Schema { get; set; }
        /// <summary>The schema URIs for this connection</summary>
        System.Collections.Generic.List<string> SchemaUri { get; set; }
        /// <summary>The secondary contacts for this connection request</summary>
        System.Collections.Generic.List<string> SecondaryContact { get; set; }
        /// <summary>Status of the connection</summary>
        [global::ADT.PSArgumentCompleterAttribute("InReview", "Approved", "Rejected", "Accepted")]
        string Status { get; set; }
        /// <summary>Reason for status</summary>
        string StatusReason { get; set; }

    }
}