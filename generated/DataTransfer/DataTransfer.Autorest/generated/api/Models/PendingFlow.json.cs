// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Pending flow object</summary>
    public partial class PendingFlow
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(ADT.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="ADT.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref ADT.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(ADT.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref ADT.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="ADT.Runtime.Json.JsonNode"/> into an instance of ADT.Models.IPendingFlow.
        /// </summary>
        /// <param name="node">a <see cref="ADT.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>an instance of ADT.Models.IPendingFlow.</returns>
        public static ADT.Models.IPendingFlow FromJson(ADT.Runtime.Json.JsonNode node)
        {
            return node is ADT.Runtime.Json.JsonObject json ? new PendingFlow(json) : null;
        }

        /// <summary>
        /// Deserializes a ADT.Runtime.Json.JsonObject into a new instance of <see cref="PendingFlow" />.
        /// </summary>
        /// <param name="json">A ADT.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal PendingFlow(ADT.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_connection = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("connection"), out var __jsonConnection) ? ADT.Models.SelectedResource.FromJson(__jsonConnection) : _connection;}
            {_schema = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("schema"), out var __jsonSchema) ? ADT.Models.Schema.FromJson(__jsonSchema) : _schema;}
            {_messagingOption = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("messagingOptions"), out var __jsonMessagingOptions) ? ADT.Models.MessagingOptions.FromJson(__jsonMessagingOptions) : _messagingOption;}
            {_apiFlowOption = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("apiFlowOptions"), out var __jsonApiFlowOptions) ? ADT.Models.ApiFlowOptions.FromJson(__jsonApiFlowOptions) : _apiFlowOption;}
            {_sourceAddress = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("sourceAddresses"), out var __jsonSourceAddresses) ? ADT.Models.StreamSourceAddresses.FromJson(__jsonSourceAddresses) : _sourceAddress;}
            {_systemData = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("systemData"), out var __jsonSystemData) ? ADT.Models.SystemData.FromJson(__jsonSystemData) : _systemData;}
            {_subscriptionId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("subscriptionId"), out var __jsonSubscriptionId) ? (string)__jsonSubscriptionId : (string)_subscriptionId;}
            {_connectionId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("connectionId"), out var __jsonConnectionId) ? (string)__jsonConnectionId : (string)_connectionId;}
            {_flowId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("flowId"), out var __jsonFlowId) ? (string)__jsonFlowId : (string)_flowId;}
            {_keyVaultUri = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("keyVaultUri"), out var __jsonKeyVaultUri) ? (string)__jsonKeyVaultUri : (string)_keyVaultUri;}
            {_linkStatus = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("linkStatus"), out var __jsonLinkStatus) ? (string)__jsonLinkStatus : (string)_linkStatus;}
            {_linkedFlowId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("linkedFlowId"), out var __jsonLinkedFlowId) ? (string)__jsonLinkedFlowId : (string)_linkedFlowId;}
            {_status = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("status"), out var __jsonStatus) ? (string)__jsonStatus : (string)_status;}
            {_forceDisabledStatus = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("forceDisabledStatus"), out var __jsonForceDisabledStatus) ? If( __jsonForceDisabledStatus as ADT.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(string) (__u is ADT.Runtime.Json.JsonString __t ? (string)(__t.ToString()) : null)) ))() : null : _forceDisabledStatus;}
            {_storageAccountName = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("storageAccountName"), out var __jsonStorageAccountName) ? (string)__jsonStorageAccountName : (string)_storageAccountName;}
            {_storageAccountId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("storageAccountId"), out var __jsonStorageAccountId) ? (string)__jsonStorageAccountId : (string)_storageAccountId;}
            {_storageContainerName = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("storageContainerName"), out var __jsonStorageContainerName) ? (string)__jsonStorageContainerName : (string)_storageContainerName;}
            {_storageTableName = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("storageTableName"), out var __jsonStorageTableName) ? (string)__jsonStorageTableName : (string)_storageTableName;}
            {_serviceBusQueueId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("serviceBusQueueId"), out var __jsonServiceBusQueueId) ? (string)__jsonServiceBusQueueId : (string)_serviceBusQueueId;}
            {_flowType = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("flowType"), out var __jsonFlowType) ? (string)__jsonFlowType : (string)_flowType;}
            {_dataType = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("dataType"), out var __jsonDataType) ? (string)__jsonDataType : (string)_dataType;}
            {_provisioningState = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)_provisioningState;}
            {_policy = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("policies"), out var __jsonPolicies) ? If( __jsonPolicies as ADT.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is ADT.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : _policy;}
            {_customerManagedKeyVaultUri = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("customerManagedKeyVaultUri"), out var __jsonCustomerManagedKeyVaultUri) ? (string)__jsonCustomerManagedKeyVaultUri : (string)_customerManagedKeyVaultUri;}
            {_streamId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("streamId"), out var __jsonStreamId) ? (string)__jsonStreamId : (string)_streamId;}
            {_streamProtocol = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("streamProtocol"), out var __jsonStreamProtocol) ? (string)__jsonStreamProtocol : (string)_streamProtocol;}
            {_streamLatency = If( json?.PropertyT<ADT.Runtime.Json.JsonNumber>("streamLatency"), out var __jsonStreamLatency) ? (long?)__jsonStreamLatency : _streamLatency;}
            {_passphrase = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("passphrase"), out var __jsonPassphrase) ? (string)__jsonPassphrase : (string)_passphrase;}
            {_destinationEndpoint = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("destinationEndpoints"), out var __jsonDestinationEndpoints) ? If( __jsonDestinationEndpoints as ADT.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is ADT.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : _destinationEndpoint;}
            {_destinationEndpointPort = If( json?.PropertyT<ADT.Runtime.Json.JsonArray>("destinationEndpointPorts"), out var __jsonDestinationEndpointPorts) ? If( __jsonDestinationEndpointPorts as ADT.Runtime.Json.JsonArray, out var __g) ? new global::System.Func<System.Collections.Generic.List<long>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__g, (__f)=>(long) (__f is ADT.Runtime.Json.JsonNumber __e ? (long)__e : default(long))) ))() : null : _destinationEndpointPort;}
            {_eventHubId = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("eventHubId"), out var __jsonEventHubId) ? (string)__jsonEventHubId : (string)_eventHubId;}
            {_consumerGroup = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("consumerGroup"), out var __jsonConsumerGroup) ? (string)__jsonConsumerGroup : (string)_consumerGroup;}
            {_tag = If( json?.PropertyT<ADT.Runtime.Json.JsonObject>("tags"), out var __jsonTags) ? ADT.Models.PendingFlowTags.FromJson(__jsonTags) : _tag;}
            {_location = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("location"), out var __jsonLocation) ? (string)__jsonLocation : (string)_location;}
            {_id = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("id"), out var __jsonId) ? (string)__jsonId : (string)_id;}
            {_name = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("name"), out var __jsonName) ? (string)__jsonName : (string)_name;}
            {_type = If( json?.PropertyT<ADT.Runtime.Json.JsonString>("type"), out var __jsonType) ? (string)__jsonType : (string)_type;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Serializes this instance of <see cref="PendingFlow" /> into a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="ADT.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="ADT.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="PendingFlow" /> as a <see cref="ADT.Runtime.Json.JsonNode" />.
        /// </returns>
        public ADT.Runtime.Json.JsonNode ToJson(ADT.Runtime.Json.JsonObject container, ADT.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new ADT.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            AddIf( null != this._connection ? (ADT.Runtime.Json.JsonNode) this._connection.ToJson(null,serializationMode) : null, "connection" ,container.Add );
            AddIf( null != this._schema ? (ADT.Runtime.Json.JsonNode) this._schema.ToJson(null,serializationMode) : null, "schema" ,container.Add );
            AddIf( null != this._messagingOption ? (ADT.Runtime.Json.JsonNode) this._messagingOption.ToJson(null,serializationMode) : null, "messagingOptions" ,container.Add );
            AddIf( null != this._apiFlowOption ? (ADT.Runtime.Json.JsonNode) this._apiFlowOption.ToJson(null,serializationMode) : null, "apiFlowOptions" ,container.Add );
            AddIf( null != this._sourceAddress ? (ADT.Runtime.Json.JsonNode) this._sourceAddress.ToJson(null,serializationMode) : null, "sourceAddresses" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._systemData ? (ADT.Runtime.Json.JsonNode) this._systemData.ToJson(null,serializationMode) : null, "systemData" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._subscriptionId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._subscriptionId.ToString()) : null, "subscriptionId" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._connectionId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._connectionId.ToString()) : null, "connectionId" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._flowId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._flowId.ToString()) : null, "flowId" ,container.Add );
            }
            AddIf( null != (((object)this._keyVaultUri)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._keyVaultUri.ToString()) : null, "keyVaultUri" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._linkStatus)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._linkStatus.ToString()) : null, "linkStatus" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._linkedFlowId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._linkedFlowId.ToString()) : null, "linkedFlowId" ,container.Add );
            }
            AddIf( null != (((object)this._status)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._status.ToString()) : null, "status" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._forceDisabledStatus)
                {
                    var __w = new ADT.Runtime.Json.XNodeArray();
                    foreach( var __x in this._forceDisabledStatus )
                    {
                        AddIf(null != (((object)__x)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__x.ToString()) : null ,__w.Add);
                    }
                    container.Add("forceDisabledStatus",__w);
                }
            }
            AddIf( null != (((object)this._storageAccountName)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._storageAccountName.ToString()) : null, "storageAccountName" ,container.Add );
            AddIf( null != (((object)this._storageAccountId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._storageAccountId.ToString()) : null, "storageAccountId" ,container.Add );
            AddIf( null != (((object)this._storageContainerName)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._storageContainerName.ToString()) : null, "storageContainerName" ,container.Add );
            AddIf( null != (((object)this._storageTableName)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._storageTableName.ToString()) : null, "storageTableName" ,container.Add );
            AddIf( null != (((object)this._serviceBusQueueId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._serviceBusQueueId.ToString()) : null, "serviceBusQueueId" ,container.Add );
            AddIf( null != (((object)this._flowType)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._flowType.ToString()) : null, "flowType" ,container.Add );
            AddIf( null != (((object)this._dataType)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._dataType.ToString()) : null, "dataType" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            if (null != this._policy)
            {
                var __r = new ADT.Runtime.Json.XNodeArray();
                foreach( var __s in this._policy )
                {
                    AddIf(null != (((object)__s)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                }
                container.Add("policies",__r);
            }
            AddIf( null != (((object)this._customerManagedKeyVaultUri)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._customerManagedKeyVaultUri.ToString()) : null, "customerManagedKeyVaultUri" ,container.Add );
            AddIf( null != (((object)this._streamId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._streamId.ToString()) : null, "streamId" ,container.Add );
            AddIf( null != (((object)this._streamProtocol)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._streamProtocol.ToString()) : null, "streamProtocol" ,container.Add );
            AddIf( null != this._streamLatency ? (ADT.Runtime.Json.JsonNode)new ADT.Runtime.Json.JsonNumber((long)this._streamLatency) : null, "streamLatency" ,container.Add );
            AddIf( null != (((object)this._passphrase)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._passphrase.ToString()) : null, "passphrase" ,container.Add );
            if (null != this._destinationEndpoint)
            {
                var __m = new ADT.Runtime.Json.XNodeArray();
                foreach( var __n in this._destinationEndpoint )
                {
                    AddIf(null != (((object)__n)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                }
                container.Add("destinationEndpoints",__m);
            }
            if (null != this._destinationEndpointPort)
            {
                var __h = new ADT.Runtime.Json.XNodeArray();
                foreach( var __i in this._destinationEndpointPort )
                {
                    AddIf((ADT.Runtime.Json.JsonNode)new ADT.Runtime.Json.JsonNumber(__i) ,__h.Add);
                }
                container.Add("destinationEndpointPorts",__h);
            }
            AddIf( null != (((object)this._eventHubId)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._eventHubId.ToString()) : null, "eventHubId" ,container.Add );
            AddIf( null != (((object)this._consumerGroup)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._consumerGroup.ToString()) : null, "consumerGroup" ,container.Add );
            AddIf( null != this._tag ? (ADT.Runtime.Json.JsonNode) this._tag.ToJson(null,serializationMode) : null, "tags" ,container.Add );
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead)||serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeCreate))
            {
                AddIf( null != (((object)this._location)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._location.ToString()) : null, "location" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._id)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._id.ToString()) : null, "id" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._name)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._name.ToString()) : null, "name" ,container.Add );
            }
            if (serializationMode.HasFlag(ADT.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._type)?.ToString()) ? (ADT.Runtime.Json.JsonNode) new ADT.Runtime.Json.JsonString(this._type.ToString()) : null, "type" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}