// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>Properties of pipeline</summary>
    public partial class PipelineProperties :
        ADT.Models.IPipelineProperties,
        ADT.Models.IPipelinePropertiesInternal
    {

        /// <summary>Internal Acessors for Connection</summary>
        System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> ADT.Models.IPipelinePropertiesInternal.Connection { get => this._connection; set { {_connection = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string ADT.Models.IPipelinePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="Connection" /> property.</summary>
        private System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> _connection;

        /// <summary>Connections associated with pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> Connection { get => this._connection; }

        /// <summary>Backing field for <see cref="DisabledFlowType" /> property.</summary>
        private System.Collections.Generic.List<string> _disabledFlowType;

        /// <summary>The flow types that are disabled for this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> DisabledFlowType { get => this._disabledFlowType; set => this._disabledFlowType = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>Display name of this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Backing field for <see cref="FlowType" /> property.</summary>
        private System.Collections.Generic.List<string> _flowType;

        /// <summary>The flow types allowed for this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> FlowType { get => this._flowType; set => this._flowType = value; }

        /// <summary>Backing field for <see cref="Policy" /> property.</summary>
        private System.Collections.Generic.List<string> _policy;

        /// <summary>The policies for this pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Policy { get => this._policy; set => this._policy = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="QuarantineDownloadStorageAccount" /> property.</summary>
        private string _quarantineDownloadStorageAccount;

        /// <summary>Quarantine Download Storage Account</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string QuarantineDownloadStorageAccount { get => this._quarantineDownloadStorageAccount; set => this._quarantineDownloadStorageAccount = value; }

        /// <summary>Backing field for <see cref="QuarantineDownloadStorageContainer" /> property.</summary>
        private string _quarantineDownloadStorageContainer;

        /// <summary>Quarantine Download Storage Container</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string QuarantineDownloadStorageContainer { get => this._quarantineDownloadStorageContainer; set => this._quarantineDownloadStorageContainer = value; }

        /// <summary>Backing field for <see cref="RemoteCloud" /> property.</summary>
        private string _remoteCloud;

        /// <summary>Remote cloud of the data to be transferred or received</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string RemoteCloud { get => this._remoteCloud; set => this._remoteCloud = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Status of the current pipeline</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="Subscriber" /> property.</summary>
        private System.Collections.Generic.List<ADT.Models.ISubscriber> _subscriber;

        /// <summary>Subscribers of this resource</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<ADT.Models.ISubscriber> Subscriber { get => this._subscriber; set => this._subscriber = value; }

        /// <summary>Creates an new <see cref="PipelineProperties" /> instance.</summary>
        public PipelineProperties()
        {

        }
    }
    /// Properties of pipeline
    public partial interface IPipelineProperties :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>Connections associated with pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Connections associated with pipeline",
        SerializedName = @"connections",
        PossibleTypes = new [] { typeof(ADT.Models.IReadPipelineConnection) })]
        System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> Connection { get;  }
        /// <summary>The flow types that are disabled for this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow types that are disabled for this pipeline",
        SerializedName = @"disabledFlowTypes",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> DisabledFlowType { get; set; }
        /// <summary>Display name of this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Display name of this pipeline",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>The flow types allowed for this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow types allowed for this pipeline",
        SerializedName = @"flowTypes",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> FlowType { get; set; }
        /// <summary>The policies for this pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The policies for this pipeline",
        SerializedName = @"policies",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Provisioning state of the pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the pipeline",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get;  }
        /// <summary>Quarantine Download Storage Account</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Quarantine Download Storage Account",
        SerializedName = @"quarantineDownloadStorageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string QuarantineDownloadStorageAccount { get; set; }
        /// <summary>Quarantine Download Storage Container</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Quarantine Download Storage Container",
        SerializedName = @"quarantineDownloadStorageContainer",
        PossibleTypes = new [] { typeof(string) })]
        string QuarantineDownloadStorageContainer { get; set; }
        /// <summary>Remote cloud of the data to be transferred or received</summary>
        [ADT.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote cloud of the data to be transferred or received",
        SerializedName = @"remoteCloud",
        PossibleTypes = new [] { typeof(string) })]
        string RemoteCloud { get; set; }
        /// <summary>Status of the current pipeline</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the current pipeline",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Subscribers of this resource</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Subscribers of this resource",
        SerializedName = @"subscribers",
        PossibleTypes = new [] { typeof(ADT.Models.ISubscriber) })]
        System.Collections.Generic.List<ADT.Models.ISubscriber> Subscriber { get; set; }

    }
    /// Properties of pipeline
    internal partial interface IPipelinePropertiesInternal

    {
        /// <summary>Connections associated with pipeline</summary>
        System.Collections.Generic.List<ADT.Models.IReadPipelineConnection> Connection { get; set; }
        /// <summary>The flow types that are disabled for this pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> DisabledFlowType { get; set; }
        /// <summary>Display name of this pipeline</summary>
        string DisplayName { get; set; }
        /// <summary>The flow types allowed for this pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        System.Collections.Generic.List<string> FlowType { get; set; }
        /// <summary>The policies for this pipeline</summary>
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Provisioning state of the pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get; set; }
        /// <summary>Quarantine Download Storage Account</summary>
        string QuarantineDownloadStorageAccount { get; set; }
        /// <summary>Quarantine Download Storage Container</summary>
        string QuarantineDownloadStorageContainer { get; set; }
        /// <summary>Remote cloud of the data to be transferred or received</summary>
        string RemoteCloud { get; set; }
        /// <summary>Status of the current pipeline</summary>
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Subscribers of this resource</summary>
        System.Collections.Generic.List<ADT.Models.ISubscriber> Subscriber { get; set; }

    }
}