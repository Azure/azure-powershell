// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>
    /// Configuration options for the text matching ruleset. For example, if the configuration is to deny "hello world" for partial
    /// case-insensitive words then "chello worlds" would get detected and the resulting file would be denied.
    /// </summary>
    public partial class TextMatch :
        ADT.Models.ITextMatch,
        ADT.Models.ITextMatchInternal
    {

        /// <summary>Backing field for <see cref="CaseSensitivity" /> property.</summary>
        private string _caseSensitivity;

        /// <summary>
        /// Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string CaseSensitivity { get => this._caseSensitivity; set => this._caseSensitivity = value; }

        /// <summary>Backing field for <see cref="MatchType" /> property.</summary>
        private string _matchType;

        /// <summary>
        /// Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string MatchType { get => this._matchType; set => this._matchType = value; }

        /// <summary>Backing field for <see cref="Text" /> property.</summary>
        private string _text;

        /// <summary>
        /// The word or phrase to match against replicated content. A phrase with spaces will be considered a single substring.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string Text { get => this._text; set => this._text = value; }

        /// <summary>Creates an new <see cref="TextMatch" /> instance.</summary>
        public TextMatch()
        {

        }
    }
    /// Configuration options for the text matching ruleset. For example, if the configuration is to deny "hello world" for partial
    /// case-insensitive words then "chello worlds" would get detected and the resulting file would be denied.
    public partial interface ITextMatch :
        ADT.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.
        /// </summary>
        [ADT.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.",
        SerializedName = @"caseSensitivity",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Insensitive", "Sensitive")]
        string CaseSensitivity { get; set; }
        /// <summary>
        /// Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.
        /// </summary>
        [ADT.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.",
        SerializedName = @"matchType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Partial", "Complete")]
        string MatchType { get; set; }
        /// <summary>
        /// The word or phrase to match against replicated content. A phrase with spaces will be considered a single substring.
        /// </summary>
        [ADT.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The word or phrase to match against replicated content. A phrase with spaces will be considered a single substring.",
        SerializedName = @"text",
        PossibleTypes = new [] { typeof(string) })]
        string Text { get; set; }

    }
    /// Configuration options for the text matching ruleset. For example, if the configuration is to deny "hello world" for partial
    /// case-insensitive words then "chello worlds" would get detected and the resulting file would be denied.
    internal partial interface ITextMatchInternal

    {
        /// <summary>
        /// Specifies the text matching conditions based on casing. For more detail please refer to the Casing model.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Insensitive", "Sensitive")]
        string CaseSensitivity { get; set; }
        /// <summary>
        /// Specifies the text matching condition for text comparison. For more detail please refer to the MatchType model.
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("Partial", "Complete")]
        string MatchType { get; set; }
        /// <summary>
        /// The word or phrase to match against replicated content. A phrase with spaces will be considered a single substring.
        /// </summary>
        string Text { get; set; }

    }
}