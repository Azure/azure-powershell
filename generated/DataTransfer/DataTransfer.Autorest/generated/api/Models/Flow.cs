// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace ADT.Models
{
    using static ADT.Runtime.Extensions;

    /// <summary>The flow resource definition.</summary>
    public partial class Flow :
        ADT.Models.IFlow,
        ADT.Models.IFlowInternal,
        ADT.Runtime.IValidates
    {
        /// <summary>Backing field for Inherited model <see cref= "ADT.Models.ITrackedResource" /></summary>
        private ADT.Models.ITrackedResource __trackedResource = new ADT.Models.TrackedResource();

        /// <summary>Internal Acessors for ApiFlowOption</summary>
        ADT.Models.IApiFlowOptions ADT.Models.IFlowInternal.ApiFlowOption { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOption; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOption = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Connection</summary>
        ADT.Models.ISelectedResource ADT.Models.IFlowInternal.Connection { get => ((ADT.Models.IFlowPropertiesInternal)Property).Connection; set => ((ADT.Models.IFlowPropertiesInternal)Property).Connection = value ?? null /* model class */; }

        /// <summary>Internal Acessors for FlowId</summary>
        string ADT.Models.IFlowInternal.FlowId { get => ((ADT.Models.IFlowPropertiesInternal)Property).FlowId; set => ((ADT.Models.IFlowPropertiesInternal)Property).FlowId = value ?? null; }

        /// <summary>Internal Acessors for ForceDisabledStatus</summary>
        System.Collections.Generic.List<string> ADT.Models.IFlowInternal.ForceDisabledStatus { get => ((ADT.Models.IFlowPropertiesInternal)Property).ForceDisabledStatus; set => ((ADT.Models.IFlowPropertiesInternal)Property).ForceDisabledStatus = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Identity</summary>
        ADT.Models.IManagedServiceIdentity ADT.Models.IFlowInternal.Identity { get => (this._identity = this._identity ?? new ADT.Models.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string ADT.Models.IFlowInternal.IdentityPrincipalId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId = value ?? null; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string ADT.Models.IFlowInternal.IdentityTenantId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId = value ?? null; }

        /// <summary>Internal Acessors for LinkStatus</summary>
        string ADT.Models.IFlowInternal.LinkStatus { get => ((ADT.Models.IFlowPropertiesInternal)Property).LinkStatus; set => ((ADT.Models.IFlowPropertiesInternal)Property).LinkStatus = value ?? null; }

        /// <summary>Internal Acessors for LinkedFlowId</summary>
        string ADT.Models.IFlowInternal.LinkedFlowId { get => ((ADT.Models.IFlowPropertiesInternal)Property).LinkedFlowId; set => ((ADT.Models.IFlowPropertiesInternal)Property).LinkedFlowId = value ?? null; }

        /// <summary>Internal Acessors for MessagingOption</summary>
        ADT.Models.IMessagingOptions ADT.Models.IFlowInternal.MessagingOption { get => ((ADT.Models.IFlowPropertiesInternal)Property).MessagingOption; set => ((ADT.Models.IFlowPropertiesInternal)Property).MessagingOption = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Plan</summary>
        ADT.Models.IPlan ADT.Models.IFlowInternal.Plan { get => (this._plan = this._plan ?? new ADT.Models.Plan()); set { {_plan = value;} } }

        /// <summary>Internal Acessors for Property</summary>
        ADT.Models.IFlowProperties ADT.Models.IFlowInternal.Property { get => (this._property = this._property ?? new ADT.Models.FlowProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string ADT.Models.IFlowInternal.ProvisioningState { get => ((ADT.Models.IFlowPropertiesInternal)Property).ProvisioningState; set => ((ADT.Models.IFlowPropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for Schema</summary>
        ADT.Models.ISchema ADT.Models.IFlowInternal.Schema { get => ((ADT.Models.IFlowPropertiesInternal)Property).Schema; set => ((ADT.Models.IFlowPropertiesInternal)Property).Schema = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SourceAddress</summary>
        ADT.Models.IStreamSourceAddresses ADT.Models.IFlowInternal.SourceAddress { get => ((ADT.Models.IFlowPropertiesInternal)Property).SourceAddress; set => ((ADT.Models.IFlowPropertiesInternal)Property).SourceAddress = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Id</summary>
        string ADT.Models.IResourceInternal.Id { get => ((ADT.Models.IResourceInternal)__trackedResource).Id; set => ((ADT.Models.IResourceInternal)__trackedResource).Id = value ?? null; }

        /// <summary>Internal Acessors for Name</summary>
        string ADT.Models.IResourceInternal.Name { get => ((ADT.Models.IResourceInternal)__trackedResource).Name; set => ((ADT.Models.IResourceInternal)__trackedResource).Name = value ?? null; }

        /// <summary>Internal Acessors for SystemData</summary>
        ADT.Models.ISystemData ADT.Models.IResourceInternal.SystemData { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemData; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? ADT.Models.IResourceInternal.SystemDataCreatedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string ADT.Models.IResourceInternal.SystemDataCreatedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string ADT.Models.IResourceInternal.SystemDataCreatedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? ADT.Models.IResourceInternal.SystemDataLastModifiedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string ADT.Models.IResourceInternal.SystemDataLastModifiedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string ADT.Models.IResourceInternal.SystemDataLastModifiedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string ADT.Models.IResourceInternal.Type { get => ((ADT.Models.IResourceInternal)__trackedResource).Type; set => ((ADT.Models.IResourceInternal)__trackedResource).Type = value ?? null; }

        /// <summary>
        /// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionApiMode { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionApiMode; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionApiMode = value ?? null; }

        /// <summary>Optional field to override the audience of the remote endpoint</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionAudienceOverride { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionAudienceOverride; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionAudienceOverride = value ?? null; }

        /// <summary>Unique CNAME to represent the Azure Data Transfer API Flow instance</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionCname { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionCname; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionCname = value ?? null; }

        /// <summary>Flag for if Azure Data Transfer API Flow should extract the user token</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionIdentityTranslation { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionIdentityTranslation; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionIdentityTranslation = value ?? null; }

        /// <summary>Remote stub app registration Client ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionRemoteCallingModeClientId { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionRemoteCallingModeClientId; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionRemoteCallingModeClientId = value ?? null; }

        /// <summary>Remote host to which communication needs to be made</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionRemoteEndpoint { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionRemoteEndpoint; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionRemoteEndpoint = value ?? null; }

        /// <summary>Sender's app user assigned Manage Identity client ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ApiFlowOptionSenderClientId { get => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionSenderClientId; set => ((ADT.Models.IFlowPropertiesInternal)Property).ApiFlowOptionSenderClientId = value ?? null; }

        /// <summary>Id of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionId { get => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionId; set => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionId = value ?? null; }

        /// <summary>Location of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionLocation { get => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionLocation; set => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionLocation = value ?? null; }

        /// <summary>Name of the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionName { get => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionName; set => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionName = value ?? null; }

        /// <summary>Name of the subscription with the connection</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConnectionSubscriptionName { get => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionSubscriptionName; set => ((ADT.Models.IFlowPropertiesInternal)Property).ConnectionSubscriptionName = value ?? null; }

        /// <summary>Event Hub Consumer Group</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ConsumerGroup { get => ((ADT.Models.IFlowPropertiesInternal)Property).ConsumerGroup; set => ((ADT.Models.IFlowPropertiesInternal)Property).ConsumerGroup = value ?? null; }

        /// <summary>The URI to the customer managed key for this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string CustomerManagedKeyVaultUri { get => ((ADT.Models.IFlowPropertiesInternal)Property).CustomerManagedKeyVaultUri; set => ((ADT.Models.IFlowPropertiesInternal)Property).CustomerManagedKeyVaultUri = value ?? null; }

        /// <summary>Type of data to transfer via the flow.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string DataType { get => ((ADT.Models.IFlowPropertiesInternal)Property).DataType; set => ((ADT.Models.IFlowPropertiesInternal)Property).DataType = value ?? null; }

        /// <summary>The destination endpoints of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> DestinationEndpoint { get => ((ADT.Models.IFlowPropertiesInternal)Property).DestinationEndpoint; set => ((ADT.Models.IFlowPropertiesInternal)Property).DestinationEndpoint = value ?? null /* arrayOf */; }

        /// <summary>The destination endpoint ports of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<long> DestinationEndpointPort { get => ((ADT.Models.IFlowPropertiesInternal)Property).DestinationEndpointPort; set => ((ADT.Models.IFlowPropertiesInternal)Property).DestinationEndpointPort = value ?? null /* arrayOf */; }

        /// <summary>Event Hub ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string EventHubId { get => ((ADT.Models.IFlowPropertiesInternal)Property).EventHubId; set => ((ADT.Models.IFlowPropertiesInternal)Property).EventHubId = value ?? null; }

        /// <summary>Dataflow GUID associated with this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowId { get => ((ADT.Models.IFlowPropertiesInternal)Property).FlowId; }

        /// <summary>The flow type for this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string FlowType { get => ((ADT.Models.IFlowPropertiesInternal)Property).FlowType; set => ((ADT.Models.IFlowPropertiesInternal)Property).FlowType = value ?? null; }

        /// <summary>Force disablement status of the current flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> ForceDisabledStatus { get => ((ADT.Models.IFlowPropertiesInternal)Property).ForceDisabledStatus; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Id { get => ((ADT.Models.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private ADT.Models.IManagedServiceIdentity _identity;

        /// <summary>The managed service identities assigned to this resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new ADT.Models.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).Type; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((ADT.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((ADT.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>URI to a Key Vault Secret containing a SAS token.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string KeyVaultUri { get => ((ADT.Models.IFlowPropertiesInternal)Property).KeyVaultUri; set => ((ADT.Models.IFlowPropertiesInternal)Property).KeyVaultUri = value ?? null; }

        /// <summary>Link status of the current flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string LinkStatus { get => ((ADT.Models.IFlowPropertiesInternal)Property).LinkStatus; }

        /// <summary>Resource ID of the linked flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string LinkedFlowId { get => ((ADT.Models.IFlowPropertiesInternal)Property).LinkedFlowId; }

        /// <summary>The geo-location where the resource lives</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Location { get => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Location; set => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Location = value ?? null; }

        /// <summary>Billing tier for this messaging flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string MessagingOptionBillingTier { get => ((ADT.Models.IFlowPropertiesInternal)Property).MessagingOptionBillingTier; set => ((ADT.Models.IFlowPropertiesInternal)Property).MessagingOptionBillingTier = value ?? null; }

        /// <summary>The name of the resource</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Name { get => ((ADT.Models.IResourceInternal)__trackedResource).Name; }

        /// <summary>The passphrase used for SRT streams</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string Passphrase { get => ((ADT.Models.IFlowPropertiesInternal)Property).Passphrase; set => ((ADT.Models.IFlowPropertiesInternal)Property).Passphrase = value ?? null; }

        /// <summary>Backing field for <see cref="Plan" /> property.</summary>
        private ADT.Models.IPlan _plan;

        /// <summary>Details of the resource plan.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IPlan Plan { get => (this._plan = this._plan ?? new ADT.Models.Plan()); set => this._plan = value; }

        /// <summary>A user defined name of the 3rd Party Artifact that is being procured.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string PlanName { get => ((ADT.Models.IPlanInternal)Plan).Name; set => ((ADT.Models.IPlanInternal)Plan).Name = value ?? null; }

        /// <summary>
        /// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at
        /// the time of Data Market onboarding.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string PlanProduct { get => ((ADT.Models.IPlanInternal)Plan).Product; set => ((ADT.Models.IPlanInternal)Plan).Product = value ?? null; }

        /// <summary>
        /// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string PlanPromotionCode { get => ((ADT.Models.IPlanInternal)Plan).PromotionCode; set => ((ADT.Models.IPlanInternal)Plan).PromotionCode = value ?? null; }

        /// <summary>The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string PlanPublisher { get => ((ADT.Models.IPlanInternal)Plan).Publisher; set => ((ADT.Models.IPlanInternal)Plan).Publisher = value ?? null; }

        /// <summary>The version of the desired product/artifact.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string PlanVersion { get => ((ADT.Models.IPlanInternal)Plan).Version; set => ((ADT.Models.IPlanInternal)Plan).Version = value ?? null; }

        /// <summary>The policies for this flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Policy { get => ((ADT.Models.IFlowPropertiesInternal)Property).Policy; set => ((ADT.Models.IFlowPropertiesInternal)Property).Policy = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private ADT.Models.IFlowProperties _property;

        /// <summary>Properties of flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        internal ADT.Models.IFlowProperties Property { get => (this._property = this._property ?? new ADT.Models.FlowProperties()); set => this._property = value; }

        /// <summary>Provisioning state of the flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((ADT.Models.IFlowPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [ADT.Origin(ADT.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Connection ID associated with this schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaConnectionId { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaConnectionId; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaConnectionId = value ?? null; }

        /// <summary>Content of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaContent { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaContent; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaContent = value ?? null; }

        /// <summary>The direction of the schema.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaDirection { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaDirection; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaDirection = value ?? null; }

        /// <summary>ID associated with this schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaId { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaId; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaId = value ?? null; }

        /// <summary>Name of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaName { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaName; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaName = value ?? null; }

        /// <summary>Status of the schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaStatus { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaStatus; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaStatus = value ?? null; }

        /// <summary>The Schema Type</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaType { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaType; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaType = value ?? null; }

        /// <summary>Uri containing SAS token for the zipped schema</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string SchemaUri { get => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaUri; set => ((ADT.Models.IFlowPropertiesInternal)Property).SchemaUri = value ?? null; }

        /// <summary>Service Bus Queue ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string ServiceBusQueueId { get => ((ADT.Models.IFlowPropertiesInternal)Property).ServiceBusQueueId; set => ((ADT.Models.IFlowPropertiesInternal)Property).ServiceBusQueueId = value ?? null; }

        /// <summary>A source IP address or CIDR range</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SourceAddressSourceAddresses { get => ((ADT.Models.IFlowPropertiesInternal)Property).SourceAddressSourceAddresses; set => ((ADT.Models.IFlowPropertiesInternal)Property).SourceAddressSourceAddresses = value ?? null /* arrayOf */; }

        /// <summary>Status of the current flow</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string Status { get => ((ADT.Models.IFlowPropertiesInternal)Property).Status; set => ((ADT.Models.IFlowPropertiesInternal)Property).Status = value ?? null; }

        /// <summary>Storage Account ID</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string StorageAccountId { get => ((ADT.Models.IFlowPropertiesInternal)Property).StorageAccountId; set => ((ADT.Models.IFlowPropertiesInternal)Property).StorageAccountId = value ?? null; }

        /// <summary>Storage Account</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string StorageAccountName { get => ((ADT.Models.IFlowPropertiesInternal)Property).StorageAccountName; set => ((ADT.Models.IFlowPropertiesInternal)Property).StorageAccountName = value ?? null; }

        /// <summary>Storage Container Name</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string StorageContainerName { get => ((ADT.Models.IFlowPropertiesInternal)Property).StorageContainerName; set => ((ADT.Models.IFlowPropertiesInternal)Property).StorageContainerName = value ?? null; }

        /// <summary>Storage Table Name</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string StorageTableName { get => ((ADT.Models.IFlowPropertiesInternal)Property).StorageTableName; set => ((ADT.Models.IFlowPropertiesInternal)Property).StorageTableName = value ?? null; }

        /// <summary>The flow stream identifier</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string StreamId { get => ((ADT.Models.IFlowPropertiesInternal)Property).StreamId; set => ((ADT.Models.IFlowPropertiesInternal)Property).StreamId = value ?? null; }

        /// <summary>The latency of the stream in milliseconds</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public long? StreamLatency { get => ((ADT.Models.IFlowPropertiesInternal)Property).StreamLatency; set => ((ADT.Models.IFlowPropertiesInternal)Property).StreamLatency = value ?? default(long); }

        /// <summary>The protocol of the stream</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inlined)]
        public string StreamProtocol { get => ((ADT.Models.IFlowPropertiesInternal)Property).StreamProtocol; set => ((ADT.Models.IFlowPropertiesInternal)Property).StreamProtocol = value ?? null; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        internal ADT.Models.ISystemData SystemData { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemData; set => ((ADT.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((ADT.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; }

        /// <summary>Resource tags.</summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public ADT.Models.ITrackedResourceTags Tag { get => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Tag; set => ((ADT.Models.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [ADT.Origin(ADT.PropertyOrigin.Inherited)]
        public string Type { get => ((ADT.Models.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="Flow" /> instance.</summary>
        public Flow()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="ADT.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(ADT.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// The flow resource definition.
    public partial interface IFlow :
        ADT.Runtime.IJsonSerializable,
        ADT.Models.ITrackedResource
    {
        /// <summary>
        /// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked",
        SerializedName = @"apiMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("SDK", "Endpoint")]
        string ApiFlowOptionApiMode { get; set; }
        /// <summary>Optional field to override the audience of the remote endpoint</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional field to override the audience of the remote endpoint",
        SerializedName = @"audienceOverride",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionAudienceOverride { get; set; }
        /// <summary>Unique CNAME to represent the Azure Data Transfer API Flow instance</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Unique CNAME to represent the Azure Data Transfer API Flow instance",
        SerializedName = @"cname",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionCname { get; set; }
        /// <summary>Flag for if Azure Data Transfer API Flow should extract the user token</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag for if Azure Data Transfer API Flow should extract the user token",
        SerializedName = @"identityTranslation",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("UserIdentity", "ServiceIdentity")]
        string ApiFlowOptionIdentityTranslation { get; set; }
        /// <summary>Remote stub app registration Client ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote stub app registration Client ID",
        SerializedName = @"remoteCallingModeClientId",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionRemoteCallingModeClientId { get; set; }
        /// <summary>Remote host to which communication needs to be made</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Remote host to which communication needs to be made",
        SerializedName = @"remoteEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionRemoteEndpoint { get; set; }
        /// <summary>Sender's app user assigned Manage Identity client ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Sender's app user assigned Manage Identity client ID",
        SerializedName = @"senderClientId",
        PossibleTypes = new [] { typeof(string) })]
        string ApiFlowOptionSenderClientId { get; set; }
        /// <summary>Id of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Id of the connection",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionId { get; set; }
        /// <summary>Location of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Location of the connection",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionLocation { get; set; }
        /// <summary>Name of the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the connection",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionName { get; set; }
        /// <summary>Name of the subscription with the connection</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the subscription with the connection",
        SerializedName = @"subscriptionName",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectionSubscriptionName { get; set; }
        /// <summary>Event Hub Consumer Group</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Event Hub Consumer Group",
        SerializedName = @"consumerGroup",
        PossibleTypes = new [] { typeof(string) })]
        string ConsumerGroup { get; set; }
        /// <summary>The URI to the customer managed key for this flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URI to the customer managed key for this flow",
        SerializedName = @"customerManagedKeyVaultUri",
        PossibleTypes = new [] { typeof(string) })]
        string CustomerManagedKeyVaultUri { get; set; }
        /// <summary>Type of data to transfer via the flow.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of data to transfer via the flow.",
        SerializedName = @"dataType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Blob", "Table")]
        string DataType { get; set; }
        /// <summary>The destination endpoints of the stream</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The destination endpoints of the stream",
        SerializedName = @"destinationEndpoints",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DestinationEndpoint { get; set; }
        /// <summary>The destination endpoint ports of the stream</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The destination endpoint ports of the stream",
        SerializedName = @"destinationEndpointPorts",
        PossibleTypes = new [] { typeof(long) })]
        System.Collections.Generic.List<long> DestinationEndpointPort { get; set; }
        /// <summary>Event Hub ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Event Hub ID",
        SerializedName = @"eventHubId",
        PossibleTypes = new [] { typeof(string) })]
        string EventHubId { get; set; }
        /// <summary>Dataflow GUID associated with this flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Dataflow GUID associated with this flow",
        SerializedName = @"flowId",
        PossibleTypes = new [] { typeof(string) })]
        string FlowId { get;  }
        /// <summary>The flow type for this flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow type for this flow",
        SerializedName = @"flowType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        string FlowType { get; set; }
        /// <summary>Force disablement status of the current flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Force disablement status of the current flow",
        SerializedName = @"forceDisabledStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("ConnectionForceDisabled", "FlowTypeForceDisabled")]
        System.Collections.Generic.List<string> ForceDisabledStatus { get;  }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(ADT.Models.IUserAssignedIdentities) })]
        ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>URI to a Key Vault Secret containing a SAS token.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"URI to a Key Vault Secret containing a SAS token.",
        SerializedName = @"keyVaultUri",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultUri { get; set; }
        /// <summary>Link status of the current flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Link status of the current flow",
        SerializedName = @"linkStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Linked", "Unlinked")]
        string LinkStatus { get;  }
        /// <summary>Resource ID of the linked flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource ID of the linked flow",
        SerializedName = @"linkedFlowId",
        PossibleTypes = new [] { typeof(string) })]
        string LinkedFlowId { get;  }
        /// <summary>Billing tier for this messaging flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Billing tier for this messaging flow",
        SerializedName = @"billingTier",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("BlobTransport", "Standard", "Premium")]
        string MessagingOptionBillingTier { get; set; }
        /// <summary>The passphrase used for SRT streams</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The passphrase used for SRT streams",
        SerializedName = @"passphrase",
        PossibleTypes = new [] { typeof(string) })]
        string Passphrase { get; set; }
        /// <summary>A user defined name of the 3rd Party Artifact that is being procured.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A user defined name of the 3rd Party Artifact that is being procured.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string PlanName { get; set; }
        /// <summary>
        /// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at
        /// the time of Data Market onboarding.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at the time of Data Market onboarding. ",
        SerializedName = @"product",
        PossibleTypes = new [] { typeof(string) })]
        string PlanProduct { get; set; }
        /// <summary>
        /// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        /// </summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A publisher provided promotion code as provisioned in Data Market for the said product/artifact.",
        SerializedName = @"promotionCode",
        PossibleTypes = new [] { typeof(string) })]
        string PlanPromotionCode { get; set; }
        /// <summary>The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string PlanPublisher { get; set; }
        /// <summary>The version of the desired product/artifact.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the desired product/artifact.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string PlanVersion { get; set; }
        /// <summary>The policies for this flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The policies for this flow",
        SerializedName = @"policies",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Provisioning state of the flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the flow",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get;  }
        /// <summary>Connection ID associated with this schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Connection ID associated with this schema",
        SerializedName = @"connectionId",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaConnectionId { get; set; }
        /// <summary>Content of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Content of the schema",
        SerializedName = @"content",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaContent { get; set; }
        /// <summary>The direction of the schema.</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The direction of the schema.",
        SerializedName = @"direction",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string SchemaDirection { get; set; }
        /// <summary>ID associated with this schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ID associated with this schema",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaId { get; set; }
        /// <summary>Name of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the schema",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaName { get; set; }
        /// <summary>Status of the schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the schema",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("New", "Approved")]
        string SchemaStatus { get; set; }
        /// <summary>The Schema Type</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Schema Type",
        SerializedName = @"schemaType",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
        string SchemaType { get; set; }
        /// <summary>Uri containing SAS token for the zipped schema</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Uri containing SAS token for the zipped schema",
        SerializedName = @"schemaUri",
        PossibleTypes = new [] { typeof(string) })]
        string SchemaUri { get; set; }
        /// <summary>Service Bus Queue ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Service Bus Queue ID",
        SerializedName = @"serviceBusQueueId",
        PossibleTypes = new [] { typeof(string) })]
        string ServiceBusQueueId { get; set; }
        /// <summary>A source IP address or CIDR range</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A source IP address or CIDR range",
        SerializedName = @"sourceAddresses",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SourceAddressSourceAddresses { get; set; }
        /// <summary>Status of the current flow</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Status of the current flow",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Storage Account ID</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Account ID",
        SerializedName = @"storageAccountId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountId { get; set; }
        /// <summary>Storage Account</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Account",
        SerializedName = @"storageAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageAccountName { get; set; }
        /// <summary>Storage Container Name</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Container Name",
        SerializedName = @"storageContainerName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageContainerName { get; set; }
        /// <summary>Storage Table Name</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage Table Name",
        SerializedName = @"storageTableName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageTableName { get; set; }
        /// <summary>The flow stream identifier</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flow stream identifier",
        SerializedName = @"streamId",
        PossibleTypes = new [] { typeof(string) })]
        string StreamId { get; set; }
        /// <summary>The latency of the stream in milliseconds</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The latency of the stream in milliseconds",
        SerializedName = @"streamLatency",
        PossibleTypes = new [] { typeof(long) })]
        long? StreamLatency { get; set; }
        /// <summary>The protocol of the stream</summary>
        [ADT.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The protocol of the stream",
        SerializedName = @"streamProtocol",
        PossibleTypes = new [] { typeof(string) })]
        [global::ADT.PSArgumentCompleterAttribute("UDP", "SRT", "RTP")]
        string StreamProtocol { get; set; }

    }
    /// The flow resource definition.
    internal partial interface IFlowInternal :
        ADT.Models.ITrackedResourceInternal
    {
        /// <summary>The API Flow configuration options for Azure Data Transfer API Flow type.</summary>
        ADT.Models.IApiFlowOptions ApiFlowOption { get; set; }
        /// <summary>
        /// Remote Calling Mode in the Azure Data Transfer API Flow, which describes how the API Flow will be invoked
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("SDK", "Endpoint")]
        string ApiFlowOptionApiMode { get; set; }
        /// <summary>Optional field to override the audience of the remote endpoint</summary>
        string ApiFlowOptionAudienceOverride { get; set; }
        /// <summary>Unique CNAME to represent the Azure Data Transfer API Flow instance</summary>
        string ApiFlowOptionCname { get; set; }
        /// <summary>Flag for if Azure Data Transfer API Flow should extract the user token</summary>
        [global::ADT.PSArgumentCompleterAttribute("UserIdentity", "ServiceIdentity")]
        string ApiFlowOptionIdentityTranslation { get; set; }
        /// <summary>Remote stub app registration Client ID</summary>
        string ApiFlowOptionRemoteCallingModeClientId { get; set; }
        /// <summary>Remote host to which communication needs to be made</summary>
        string ApiFlowOptionRemoteEndpoint { get; set; }
        /// <summary>Sender's app user assigned Manage Identity client ID</summary>
        string ApiFlowOptionSenderClientId { get; set; }
        /// <summary>The connection associated with this flow</summary>
        ADT.Models.ISelectedResource Connection { get; set; }
        /// <summary>Id of the connection</summary>
        string ConnectionId { get; set; }
        /// <summary>Location of the connection</summary>
        string ConnectionLocation { get; set; }
        /// <summary>Name of the connection</summary>
        string ConnectionName { get; set; }
        /// <summary>Name of the subscription with the connection</summary>
        string ConnectionSubscriptionName { get; set; }
        /// <summary>Event Hub Consumer Group</summary>
        string ConsumerGroup { get; set; }
        /// <summary>The URI to the customer managed key for this flow</summary>
        string CustomerManagedKeyVaultUri { get; set; }
        /// <summary>Type of data to transfer via the flow.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Blob", "Table")]
        string DataType { get; set; }
        /// <summary>The destination endpoints of the stream</summary>
        System.Collections.Generic.List<string> DestinationEndpoint { get; set; }
        /// <summary>The destination endpoint ports of the stream</summary>
        System.Collections.Generic.List<long> DestinationEndpointPort { get; set; }
        /// <summary>Event Hub ID</summary>
        string EventHubId { get; set; }
        /// <summary>Dataflow GUID associated with this flow</summary>
        string FlowId { get; set; }
        /// <summary>The flow type for this flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Unknown", "Complex", "DevSecOps", "Messaging", "Mission", "MicrosoftInternal", "BasicFiles", "Data", "Standard", "StreamingVideo", "Opaque", "MissionOpaqueXML", "DiskImages", "API")]
        string FlowType { get; set; }
        /// <summary>Force disablement status of the current flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("ConnectionForceDisabled", "FlowTypeForceDisabled")]
        System.Collections.Generic.List<string> ForceDisabledStatus { get; set; }
        /// <summary>The managed service identities assigned to this resource.</summary>
        ADT.Models.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [global::ADT.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        ADT.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>URI to a Key Vault Secret containing a SAS token.</summary>
        string KeyVaultUri { get; set; }
        /// <summary>Link status of the current flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Linked", "Unlinked")]
        string LinkStatus { get; set; }
        /// <summary>Resource ID of the linked flow</summary>
        string LinkedFlowId { get; set; }
        /// <summary>The messaging options for this flow</summary>
        ADT.Models.IMessagingOptions MessagingOption { get; set; }
        /// <summary>Billing tier for this messaging flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("BlobTransport", "Standard", "Premium")]
        string MessagingOptionBillingTier { get; set; }
        /// <summary>The passphrase used for SRT streams</summary>
        string Passphrase { get; set; }
        /// <summary>Details of the resource plan.</summary>
        ADT.Models.IPlan Plan { get; set; }
        /// <summary>A user defined name of the 3rd Party Artifact that is being procured.</summary>
        string PlanName { get; set; }
        /// <summary>
        /// The 3rd Party artifact that is being procured. E.g. NewRelic. Product maps to the OfferID specified for the artifact at
        /// the time of Data Market onboarding.
        /// </summary>
        string PlanProduct { get; set; }
        /// <summary>
        /// A publisher provided promotion code as provisioned in Data Market for the said product/artifact.
        /// </summary>
        string PlanPromotionCode { get; set; }
        /// <summary>The publisher of the 3rd Party Artifact that is being bought. E.g. NewRelic</summary>
        string PlanPublisher { get; set; }
        /// <summary>The version of the desired product/artifact.</summary>
        string PlanVersion { get; set; }
        /// <summary>The policies for this flow</summary>
        System.Collections.Generic.List<string> Policy { get; set; }
        /// <summary>Properties of flow</summary>
        ADT.Models.IFlowProperties Property { get; set; }
        /// <summary>Provisioning state of the flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Accepted")]
        string ProvisioningState { get; set; }
        /// <summary>The selected schema for this flow</summary>
        ADT.Models.ISchema Schema { get; set; }
        /// <summary>Connection ID associated with this schema</summary>
        string SchemaConnectionId { get; set; }
        /// <summary>Content of the schema</summary>
        string SchemaContent { get; set; }
        /// <summary>The direction of the schema.</summary>
        [global::ADT.PSArgumentCompleterAttribute("Send", "Receive")]
        string SchemaDirection { get; set; }
        /// <summary>ID associated with this schema</summary>
        string SchemaId { get; set; }
        /// <summary>Name of the schema</summary>
        string SchemaName { get; set; }
        /// <summary>Status of the schema</summary>
        [global::ADT.PSArgumentCompleterAttribute("New", "Approved")]
        string SchemaStatus { get; set; }
        /// <summary>The Schema Type</summary>
        [global::ADT.PSArgumentCompleterAttribute("Xsd", "Zip")]
        string SchemaType { get; set; }
        /// <summary>Uri containing SAS token for the zipped schema</summary>
        string SchemaUri { get; set; }
        /// <summary>Service Bus Queue ID</summary>
        string ServiceBusQueueId { get; set; }
        /// <summary>The source IP address and CIDR ranges of the stream</summary>
        ADT.Models.IStreamSourceAddresses SourceAddress { get; set; }
        /// <summary>A source IP address or CIDR range</summary>
        System.Collections.Generic.List<string> SourceAddressSourceAddresses { get; set; }
        /// <summary>Status of the current flow</summary>
        [global::ADT.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string Status { get; set; }
        /// <summary>Storage Account ID</summary>
        string StorageAccountId { get; set; }
        /// <summary>Storage Account</summary>
        string StorageAccountName { get; set; }
        /// <summary>Storage Container Name</summary>
        string StorageContainerName { get; set; }
        /// <summary>Storage Table Name</summary>
        string StorageTableName { get; set; }
        /// <summary>The flow stream identifier</summary>
        string StreamId { get; set; }
        /// <summary>The latency of the stream in milliseconds</summary>
        long? StreamLatency { get; set; }
        /// <summary>The protocol of the stream</summary>
        [global::ADT.PSArgumentCompleterAttribute("UDP", "SRT", "RTP")]
        string StreamProtocol { get; set; }

    }
}