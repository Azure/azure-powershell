// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Extensions;

    /// <summary>The properties for updating a docker build step.</summary>
    public partial class DockerBuildStepUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IDockerBuildStepUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IDockerBuildStepUpdateParametersInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParameters"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParameters __taskStepUpdateParameters = new Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.TaskStepUpdateParameters();

        /// <summary>Backing field for <see cref="Argument" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IArgument[] _argument;

        /// <summary>The collection of override arguments to be used when executing this build step.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IArgument[] Argument { get => this._argument; set => this._argument = value; }

        /// <summary>
        /// The token (git PAT or SAS token of storage account blob) associated with the context for a step.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inherited)]
        public string ContextAccessToken { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal)__taskStepUpdateParameters).ContextAccessToken; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal)__taskStepUpdateParameters).ContextAccessToken = value ?? null; }

        /// <summary>The URL(absolute or relative) of the source context for the task step.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inherited)]
        public string ContextPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal)__taskStepUpdateParameters).ContextPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal)__taskStepUpdateParameters).ContextPath = value ?? null; }

        /// <summary>Backing field for <see cref="DockerFilePath" /> property.</summary>
        private string _dockerFilePath;

        /// <summary>The Docker file path relative to the source context.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public string DockerFilePath { get => this._dockerFilePath; set => this._dockerFilePath = value; }

        /// <summary>Backing field for <see cref="ImageName" /> property.</summary>
        private string[] _imageName;

        /// <summary>The fully qualified image names including the repository and tag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public string[] ImageName { get => this._imageName; set => this._imageName = value; }

        /// <summary>Backing field for <see cref="IsPushEnabled" /> property.</summary>
        private bool? _isPushEnabled;

        /// <summary>
        /// The value of this property indicates whether the image built should be pushed to the registry or not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public bool? IsPushEnabled { get => this._isPushEnabled; set => this._isPushEnabled = value; }

        /// <summary>Backing field for <see cref="NoCache" /> property.</summary>
        private bool? _noCache;

        /// <summary>The value of this property indicates whether the image cache is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public bool? NoCache { get => this._noCache; set => this._noCache = value; }

        /// <summary>Backing field for <see cref="Target" /> property.</summary>
        private string _target;

        /// <summary>The name of the target build stage for the docker build.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Owned)]
        public string Target { get => this._target; set => this._target = value; }

        /// <summary>The type of the step.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Support.StepType Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal)__taskStepUpdateParameters).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal)__taskStepUpdateParameters).Type = value ; }

        /// <summary>Creates an new <see cref="DockerBuildStepUpdateParameters" /> instance.</summary>
        public DockerBuildStepUpdateParameters()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__taskStepUpdateParameters), __taskStepUpdateParameters);
            await eventListener.AssertObjectIsValid(nameof(__taskStepUpdateParameters), __taskStepUpdateParameters);
        }
    }
    /// The properties for updating a docker build step.
    public partial interface IDockerBuildStepUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParameters
    {
        /// <summary>The collection of override arguments to be used when executing this build step.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The collection of override arguments to be used when executing this build step.",
        SerializedName = @"arguments",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IArgument) })]
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IArgument[] Argument { get; set; }
        /// <summary>The Docker file path relative to the source context.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Docker file path relative to the source context.",
        SerializedName = @"dockerFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string DockerFilePath { get; set; }
        /// <summary>The fully qualified image names including the repository and tag.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The fully qualified image names including the repository and tag.",
        SerializedName = @"imageNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] ImageName { get; set; }
        /// <summary>
        /// The value of this property indicates whether the image built should be pushed to the registry or not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of this property indicates whether the image built should be pushed to the registry or not.",
        SerializedName = @"isPushEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsPushEnabled { get; set; }
        /// <summary>The value of this property indicates whether the image cache is enabled or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The value of this property indicates whether the image cache is enabled or not.",
        SerializedName = @"noCache",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NoCache { get; set; }
        /// <summary>The name of the target build stage for the docker build.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the target build stage for the docker build.",
        SerializedName = @"target",
        PossibleTypes = new [] { typeof(string) })]
        string Target { get; set; }

    }
    /// The properties for updating a docker build step.
    internal partial interface IDockerBuildStepUpdateParametersInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.ITaskStepUpdateParametersInternal
    {
        /// <summary>The collection of override arguments to be used when executing this build step.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ContainerRegistry.Models.Api20190601Preview.IArgument[] Argument { get; set; }
        /// <summary>The Docker file path relative to the source context.</summary>
        string DockerFilePath { get; set; }
        /// <summary>The fully qualified image names including the repository and tag.</summary>
        string[] ImageName { get; set; }
        /// <summary>
        /// The value of this property indicates whether the image built should be pushed to the registry or not.
        /// </summary>
        bool? IsPushEnabled { get; set; }
        /// <summary>The value of this property indicates whether the image cache is enabled or not.</summary>
        bool? NoCache { get; set; }
        /// <summary>The name of the target build stage for the docker build.</summary>
        string Target { get; set; }

    }
}