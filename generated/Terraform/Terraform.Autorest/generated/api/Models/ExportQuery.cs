// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.Extensions;

    /// <summary>Export parameter for resources queried by ARG (Azure Resource Graph)</summary>
    public partial class ExportQuery :
        Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IExportQuery,
        Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IExportQueryInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModel" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModel __baseExportModel = new Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.BaseExportModel();

        /// <summary>
        /// Whether to output all non-computed properties in the generated Terraform configuration? This probably needs manual modifications
        /// to make it valid
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Inherited)]
        public bool? FullProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).FullProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).FullProperty = value ?? default(bool); }

        /// <summary>Mask sensitive attributes in the Terraform configuration</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Inherited)]
        public bool? MaskSensitive { get => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).MaskSensitive; set => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).MaskSensitive = value ?? default(bool); }

        /// <summary>Backing field for <see cref="NamePattern" /> property.</summary>
        private string _namePattern;

        /// <summary>The name pattern of the Terraform resources</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Owned)]
        public string NamePattern { get => this._namePattern; set => this._namePattern = value; }

        /// <summary>Backing field for <see cref="Query" /> property.</summary>
        private string _query;

        /// <summary>
        /// The ARG where predicate. Note that you can combine multiple conditions in one where predicate, e.g. resourceGroup =~ "my-rg"
        /// and type =~ "microsoft.network/virtualnetworks"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Owned)]
        public string Query { get => this._query; set => this._query = value; }

        /// <summary>Backing field for <see cref="Recursive" /> property.</summary>
        private bool? _recursive;

        /// <summary>Whether to recursively list child resources of the query result</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Owned)]
        public bool? Recursive { get => this._recursive; set => this._recursive = value; }

        /// <summary>The target Azure Terraform Provider</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Inherited)]
        public string TargetProvider { get => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).TargetProvider; set => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).TargetProvider = value ?? null; }

        /// <summary>The parameter type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Origin(Microsoft.Azure.PowerShell.Cmdlets.Terraform.PropertyOrigin.Inherited)]
        public string Type { get => "ExportQuery"; set => ((Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal)__baseExportModel).Type = "ExportQuery"; }

        /// <summary>Creates an new <see cref="ExportQuery" /> instance.</summary>
        public ExportQuery()
        {
            this.__baseExportModel.Type = "ExportQuery";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__baseExportModel), __baseExportModel);
            await eventListener.AssertObjectIsValid(nameof(__baseExportModel), __baseExportModel);
        }
    }
    /// Export parameter for resources queried by ARG (Azure Resource Graph)
    public partial interface IExportQuery :
        Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModel
    {
        /// <summary>The name pattern of the Terraform resources</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name pattern of the Terraform resources",
        SerializedName = @"namePattern",
        PossibleTypes = new [] { typeof(string) })]
        string NamePattern { get; set; }
        /// <summary>
        /// The ARG where predicate. Note that you can combine multiple conditions in one where predicate, e.g. resourceGroup =~ "my-rg"
        /// and type =~ "microsoft.network/virtualnetworks"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ARG where predicate. Note that you can combine multiple conditions in one where predicate, e.g. resourceGroup =~ ""my-rg"" and type =~ ""microsoft.network/virtualnetworks""",
        SerializedName = @"query",
        PossibleTypes = new [] { typeof(string) })]
        string Query { get; set; }
        /// <summary>Whether to recursively list child resources of the query result</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Terraform.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to recursively list child resources of the query result",
        SerializedName = @"recursive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Recursive { get; set; }

    }
    /// Export parameter for resources queried by ARG (Azure Resource Graph)
    internal partial interface IExportQueryInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Terraform.Models.IBaseExportModelInternal
    {
        /// <summary>The name pattern of the Terraform resources</summary>
        string NamePattern { get; set; }
        /// <summary>
        /// The ARG where predicate. Note that you can combine multiple conditions in one where predicate, e.g. resourceGroup =~ "my-rg"
        /// and type =~ "microsoft.network/virtualnetworks"
        /// </summary>
        string Query { get; set; }
        /// <summary>Whether to recursively list child resources of the query result</summary>
        bool? Recursive { get; set; }

    }
}