// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Extensions;

    /// <summary>Defines the port condition that needs to be matched.</summary>
    public partial class AccessControlListPortCondition :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortCondition,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortConditionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortCondition"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortCondition __portCondition = new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.PortCondition();

        /// <summary>Backing field for <see cref="Flag" /> property.</summary>
        private System.Collections.Generic.List<string> _flag;

        /// <summary>List of protocol flags that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Flag { get => this._flag; set => this._flag = value; }

        /// <summary>Layer4 protocol type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public string Layer4Protocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).Layer4Protocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).Layer4Protocol = value ; }

        /// <summary>List of the Ports that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> Port { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).Port = value ?? null /* arrayOf */; }

        /// <summary>List of the port Group Names that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> PortGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).PortGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).PortGroupName = value ?? null /* arrayOf */; }

        /// <summary>Port type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public string PortType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).PortType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)__portCondition).PortType = value ?? null; }

        /// <summary>Creates an new <see cref="AccessControlListPortCondition" /> instance.</summary>
        public AccessControlListPortCondition()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__portCondition), __portCondition);
            await eventListener.AssertObjectIsValid(nameof(__portCondition), __portCondition);
        }
    }
    /// Defines the port condition that needs to be matched.
    public partial interface IAccessControlListPortCondition :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortCondition
    {
        /// <summary>List of protocol flags that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of protocol flags that need to be matched.",
        SerializedName = @"flags",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Flag { get; set; }

    }
    /// Defines the port condition that needs to be matched.
    internal partial interface IAccessControlListPortConditionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal
    {
        /// <summary>List of protocol flags that need to be matched.</summary>
        System.Collections.Generic.List<string> Flag { get; set; }

    }
}