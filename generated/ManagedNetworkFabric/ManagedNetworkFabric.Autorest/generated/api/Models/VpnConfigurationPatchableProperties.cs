// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Extensions;

    /// <summary>Network and credential configuration currently applied on terminal server.</summary>
    public partial class VpnConfigurationPatchableProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchableProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesInternal
    {

        /// <summary>Internal Acessors for OptionAProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesOptionAProperties Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesInternal.OptionAProperty { get => (this._optionAProperty = this._optionAProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.VpnConfigurationPatchablePropertiesOptionAProperties()); set { {_optionAProperty = value;} } }

        /// <summary>Internal Acessors for OptionAPropertyBfdConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IBfdConfiguration Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesInternal.OptionAPropertyBfdConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfiguration = value; }

        /// <summary>Internal Acessors for OptionAPropertyBfdConfigurationAdministrativeState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesInternal.OptionAPropertyBfdConfigurationAdministrativeState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationAdministrativeState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationAdministrativeState = value; }

        /// <summary>Internal Acessors for OptionBProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBProperties Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesInternal.OptionBProperty { get => (this._optionBProperty = this._optionBProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.OptionBProperties()); set { {_optionBProperty = value;} } }

        /// <summary>Internal Acessors for OptionBPropertyRouteTarget</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IRouteTargetInformation Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesInternal.OptionBPropertyRouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTarget = value; }

        /// <summary>Backing field for <see cref="NetworkToNetworkInterconnectId" /> property.</summary>
        private string _networkToNetworkInterconnectId;

        /// <summary>ARM Resource ID of the Network To Network Interconnect.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string NetworkToNetworkInterconnectId { get => this._networkToNetworkInterconnectId; set => this._networkToNetworkInterconnectId = value; }

        /// <summary>Backing field for <see cref="OptionAProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesOptionAProperties _optionAProperty;

        /// <summary>option A properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesOptionAProperties OptionAProperty { get => (this._optionAProperty = this._optionAProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.VpnConfigurationPatchablePropertiesOptionAProperties()); set => this._optionAProperty = value; }

        /// <summary>Administrative state of the BfdConfiguration. Example: Enabled | Disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string OptionAPropertyBfdConfigurationAdministrativeState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationAdministrativeState; }

        /// <summary>Interval in milliseconds. Example: 300.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public int? OptionAPropertyBfdConfigurationIntervalInMilliSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationIntervalInMilliSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationIntervalInMilliSecond = value ?? default(int); }

        /// <summary>Multiplier for the Bfd Configuration. Example: 5.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public int? OptionAPropertyBfdConfigurationMultiplier { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationMultiplier; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).BfdConfigurationMultiplier = value ?? default(int); }

        /// <summary>MTU to use for option A peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public int? OptionAPropertyMtu { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).Mtu; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).Mtu = value ?? default(int); }

        /// <summary>Peer ASN number.Example : 28</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public long? OptionAPropertyPeerAsn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).PeerAsn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).PeerAsn = value ?? default(long); }

        /// <summary>IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string OptionAPropertyPrimaryIpv4Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).PrimaryIpv4Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).PrimaryIpv4Prefix = value ?? null; }

        /// <summary>IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string OptionAPropertyPrimaryIpv6Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).PrimaryIpv6Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).PrimaryIpv6Prefix = value ?? null; }

        /// <summary>Secondary IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string OptionAPropertySecondaryIpv4Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).SecondaryIpv4Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).SecondaryIpv4Prefix = value ?? null; }

        /// <summary>Secondary IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string OptionAPropertySecondaryIpv6Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).SecondaryIpv6Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ILayer3IPPrefixPropertiesInternal)OptionAProperty).SecondaryIpv6Prefix = value ?? null; }

        /// <summary>Vlan Id.Example : 501</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public int? OptionAPropertyVlanId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).VlanId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionAPropertiesInternal)OptionAProperty).VlanId = value ?? default(int); }

        /// <summary>Backing field for <see cref="OptionBProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBProperties _optionBProperty;

        /// <summary>option B properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBProperties OptionBProperty { get => (this._optionBProperty = this._optionBProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.OptionBProperties()); set => this._optionBProperty = value; }

        /// <summary>
        /// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> OptionBPropertyExportRouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).ExportRouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).ExportRouteTarget = value ?? null /* arrayOf */; }

        /// <summary>
        /// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> OptionBPropertyImportRouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).ImportRouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).ImportRouteTarget = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="PeeringOption" /> property.</summary>
        private string _peeringOption;

        /// <summary>Peering option list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string PeeringOption { get => this._peeringOption; set => this._peeringOption = value; }

        /// <summary>Route Targets to be applied for outgoing routes into CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RouteTargetExportIpv4RouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetExportIpv4RouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetExportIpv4RouteTarget = value ?? null /* arrayOf */; }

        /// <summary>Route Targets to be applied for outgoing routes from CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RouteTargetExportIpv6RouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetExportIpv6RouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetExportIpv6RouteTarget = value ?? null /* arrayOf */; }

        /// <summary>Route Targets to be applied for incoming routes into CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RouteTargetImportIpv4RouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetImportIpv4RouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetImportIpv4RouteTarget = value ?? null /* arrayOf */; }

        /// <summary>Route Targets to be applied for incoming routes from CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RouteTargetImportIpv6RouteTarget { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetImportIpv6RouteTarget; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBPropertiesInternal)OptionBProperty).RouteTargetImportIpv6RouteTarget = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="VpnConfigurationPatchableProperties" /> instance.</summary>
        public VpnConfigurationPatchableProperties()
        {

        }
    }
    /// Network and credential configuration currently applied on terminal server.
    public partial interface IVpnConfigurationPatchableProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IJsonSerializable
    {
        /// <summary>ARM Resource ID of the Network To Network Interconnect.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ARM Resource ID of the Network To Network Interconnect.",
        SerializedName = @"networkToNetworkInterconnectId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkToNetworkInterconnectId { get; set; }
        /// <summary>Administrative state of the BfdConfiguration. Example: Enabled | Disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Administrative state of the BfdConfiguration. Example: Enabled | Disabled.",
        SerializedName = @"administrativeState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Enabled", "Disabled", "MAT", "RMA")]
        string OptionAPropertyBfdConfigurationAdministrativeState { get;  }
        /// <summary>Interval in milliseconds. Example: 300.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Interval in milliseconds. Example: 300.",
        SerializedName = @"intervalInMilliSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? OptionAPropertyBfdConfigurationIntervalInMilliSecond { get; set; }
        /// <summary>Multiplier for the Bfd Configuration. Example: 5.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Multiplier for the Bfd Configuration. Example: 5.",
        SerializedName = @"multiplier",
        PossibleTypes = new [] { typeof(int) })]
        int? OptionAPropertyBfdConfigurationMultiplier { get; set; }
        /// <summary>MTU to use for option A peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MTU to use for option A peering.",
        SerializedName = @"mtu",
        PossibleTypes = new [] { typeof(int) })]
        int? OptionAPropertyMtu { get; set; }
        /// <summary>Peer ASN number.Example : 28</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Peer ASN number.Example : 28",
        SerializedName = @"peerASN",
        PossibleTypes = new [] { typeof(long) })]
        long? OptionAPropertyPeerAsn { get; set; }
        /// <summary>IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv4 Address Prefix.",
        SerializedName = @"primaryIpv4Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string OptionAPropertyPrimaryIpv4Prefix { get; set; }
        /// <summary>IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv6 Address Prefix.",
        SerializedName = @"primaryIpv6Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string OptionAPropertyPrimaryIpv6Prefix { get; set; }
        /// <summary>Secondary IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secondary IPv4 Address Prefix.",
        SerializedName = @"secondaryIpv4Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string OptionAPropertySecondaryIpv4Prefix { get; set; }
        /// <summary>Secondary IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secondary IPv6 Address Prefix.",
        SerializedName = @"secondaryIpv6Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string OptionAPropertySecondaryIpv6Prefix { get; set; }
        /// <summary>Vlan Id.Example : 501</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Vlan Id.Example : 501",
        SerializedName = @"vlanId",
        PossibleTypes = new [] { typeof(int) })]
        int? OptionAPropertyVlanId { get; set; }
        /// <summary>
        /// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.",
        SerializedName = @"exportRouteTargets",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> OptionBPropertyExportRouteTarget { get; set; }
        /// <summary>
        /// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Route Targets to be applied for incoming routes into CE. This is for backward compatibility.",
        SerializedName = @"importRouteTargets",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> OptionBPropertyImportRouteTarget { get; set; }
        /// <summary>Peering option list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Peering option list.",
        SerializedName = @"peeringOption",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("OptionA", "OptionB")]
        string PeeringOption { get; set; }
        /// <summary>Route Targets to be applied for outgoing routes into CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Route Targets to be applied for outgoing routes into CE.",
        SerializedName = @"exportIpv4RouteTargets",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RouteTargetExportIpv4RouteTarget { get; set; }
        /// <summary>Route Targets to be applied for outgoing routes from CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Route Targets to be applied for outgoing routes from CE.",
        SerializedName = @"exportIpv6RouteTargets",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RouteTargetExportIpv6RouteTarget { get; set; }
        /// <summary>Route Targets to be applied for incoming routes into CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Route Targets to be applied for incoming routes into CE.",
        SerializedName = @"importIpv4RouteTargets",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RouteTargetImportIpv4RouteTarget { get; set; }
        /// <summary>Route Targets to be applied for incoming routes from CE.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Route Targets to be applied for incoming routes from CE.",
        SerializedName = @"importIpv6RouteTargets",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RouteTargetImportIpv6RouteTarget { get; set; }

    }
    /// Network and credential configuration currently applied on terminal server.
    internal partial interface IVpnConfigurationPatchablePropertiesInternal

    {
        /// <summary>ARM Resource ID of the Network To Network Interconnect.</summary>
        string NetworkToNetworkInterconnectId { get; set; }
        /// <summary>option A properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVpnConfigurationPatchablePropertiesOptionAProperties OptionAProperty { get; set; }
        /// <summary>BFD Configuration properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IBfdConfiguration OptionAPropertyBfdConfiguration { get; set; }
        /// <summary>Administrative state of the BfdConfiguration. Example: Enabled | Disabled.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Enabled", "Disabled", "MAT", "RMA")]
        string OptionAPropertyBfdConfigurationAdministrativeState { get; set; }
        /// <summary>Interval in milliseconds. Example: 300.</summary>
        int? OptionAPropertyBfdConfigurationIntervalInMilliSecond { get; set; }
        /// <summary>Multiplier for the Bfd Configuration. Example: 5.</summary>
        int? OptionAPropertyBfdConfigurationMultiplier { get; set; }
        /// <summary>MTU to use for option A peering.</summary>
        int? OptionAPropertyMtu { get; set; }
        /// <summary>Peer ASN number.Example : 28</summary>
        long? OptionAPropertyPeerAsn { get; set; }
        /// <summary>IPv4 Address Prefix.</summary>
        string OptionAPropertyPrimaryIpv4Prefix { get; set; }
        /// <summary>IPv6 Address Prefix.</summary>
        string OptionAPropertyPrimaryIpv6Prefix { get; set; }
        /// <summary>Secondary IPv4 Address Prefix.</summary>
        string OptionAPropertySecondaryIpv4Prefix { get; set; }
        /// <summary>Secondary IPv6 Address Prefix.</summary>
        string OptionAPropertySecondaryIpv6Prefix { get; set; }
        /// <summary>Vlan Id.Example : 501</summary>
        int? OptionAPropertyVlanId { get; set; }
        /// <summary>option B properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IOptionBProperties OptionBProperty { get; set; }
        /// <summary>
        /// Route Targets to be applied for outgoing routes from CE. This is for backward compatibility.
        /// </summary>
        System.Collections.Generic.List<string> OptionBPropertyExportRouteTarget { get; set; }
        /// <summary>
        /// Route Targets to be applied for incoming routes into CE. This is for backward compatibility.
        /// </summary>
        System.Collections.Generic.List<string> OptionBPropertyImportRouteTarget { get; set; }
        /// <summary>Route Targets to be applied.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IRouteTargetInformation OptionBPropertyRouteTarget { get; set; }
        /// <summary>Peering option list.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("OptionA", "OptionB")]
        string PeeringOption { get; set; }
        /// <summary>Route Targets to be applied for outgoing routes into CE.</summary>
        System.Collections.Generic.List<string> RouteTargetExportIpv4RouteTarget { get; set; }
        /// <summary>Route Targets to be applied for outgoing routes from CE.</summary>
        System.Collections.Generic.List<string> RouteTargetExportIpv6RouteTarget { get; set; }
        /// <summary>Route Targets to be applied for incoming routes into CE.</summary>
        System.Collections.Generic.List<string> RouteTargetImportIpv4RouteTarget { get; set; }
        /// <summary>Route Targets to be applied for incoming routes from CE.</summary>
        System.Collections.Generic.List<string> RouteTargetImportIpv6RouteTarget { get; set; }

    }
}