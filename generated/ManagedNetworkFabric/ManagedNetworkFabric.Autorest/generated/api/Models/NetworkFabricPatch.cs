// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Extensions;

    /// <summary>The Network Fabric resource definition.</summary>
    public partial class NetworkFabricPatch :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatch,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdate"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdate __tagsUpdate = new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.TagsUpdate();

        /// <summary>Switch configuration description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string Annotation { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResourceInternal)Property).Annotation; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAnnotationResourceInternal)Property).Annotation = value ?? null; }

        /// <summary>ASN of CE devices for CE/PE connectivity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public long? FabricAsn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).FabricAsn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).FabricAsn = value ?? default(long); }

        /// <summary>IPv4Prefix for Management Network. Example: 10.1.0.0/19.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string Ipv4Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).Ipv4Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).Ipv4Prefix = value ?? null; }

        /// <summary>IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string Ipv6Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).Ipv6Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).Ipv6Prefix = value ?? null; }

        /// <summary>Configuration to be used to setup the management network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationPatchableProperties ManagementNetworkConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).ManagementNetworkConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).ManagementNetworkConfiguration = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchProperties Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.NetworkFabricPatchProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for TerminalServerConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesTerminalServerConfiguration Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchInternal.TerminalServerConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfiguration = value; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchProperties _property;

        /// <summary>Network Fabric Patch properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.NetworkFabricPatchProperties()); set => this._property = value; }

        /// <summary>Number of compute racks associated to Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public int? RackCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).RackCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).RackCount = value ?? default(int); }

        /// <summary>Number of servers.Possible values are from 1-16.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public int? ServerCountPerRack { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).ServerCountPerRack; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).ServerCountPerRack = value ?? default(int); }

        /// <summary>Resource tags</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdateTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdateInternal)__tagsUpdate).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdateInternal)__tagsUpdate).Tag = value ?? null /* model class */; }

        /// <summary>Password for the terminal server connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationPassword = value ?? null; }

        /// <summary>IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationPrimaryIpv4Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationPrimaryIpv4Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationPrimaryIpv4Prefix = value ?? null; }

        /// <summary>IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationPrimaryIpv6Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationPrimaryIpv6Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationPrimaryIpv6Prefix = value ?? null; }

        /// <summary>Secondary IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationSecondaryIpv4Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationSecondaryIpv4Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationSecondaryIpv4Prefix = value ?? null; }

        /// <summary>Secondary IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationSecondaryIpv6Prefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationSecondaryIpv6Prefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationSecondaryIpv6Prefix = value ?? null; }

        /// <summary>Serial Number of Terminal server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationSerialNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationSerialNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationSerialNumber = value ?? null; }

        /// <summary>Username for the terminal server connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string TerminalServerConfigurationUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesInternal)Property).TerminalServerConfigurationUsername = value ?? null; }

        /// <summary>Creates an new <see cref="NetworkFabricPatch" /> instance.</summary>
        public NetworkFabricPatch()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__tagsUpdate), __tagsUpdate);
            await eventListener.AssertObjectIsValid(nameof(__tagsUpdate), __tagsUpdate);
        }
    }
    /// The Network Fabric resource definition.
    public partial interface INetworkFabricPatch :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdate
    {
        /// <summary>Switch configuration description.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Switch configuration description.",
        SerializedName = @"annotation",
        PossibleTypes = new [] { typeof(string) })]
        string Annotation { get; set; }
        /// <summary>ASN of CE devices for CE/PE connectivity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ASN of CE devices for CE/PE connectivity.",
        SerializedName = @"fabricASN",
        PossibleTypes = new [] { typeof(long) })]
        long? FabricAsn { get; set; }
        /// <summary>IPv4Prefix for Management Network. Example: 10.1.0.0/19.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv4Prefix for Management Network. Example: 10.1.0.0/19.",
        SerializedName = @"ipv4Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv4Prefix { get; set; }
        /// <summary>IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.",
        SerializedName = @"ipv6Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string Ipv6Prefix { get; set; }
        /// <summary>Configuration to be used to setup the management network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Configuration to be used to setup the management network.",
        SerializedName = @"managementNetworkConfiguration",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationPatchableProperties) })]
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationPatchableProperties ManagementNetworkConfiguration { get; set; }
        /// <summary>Number of compute racks associated to Network Fabric.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of compute racks associated to Network Fabric.",
        SerializedName = @"rackCount",
        PossibleTypes = new [] { typeof(int) })]
        int? RackCount { get; set; }
        /// <summary>Number of servers.Possible values are from 1-16.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of servers.Possible values are from 1-16.",
        SerializedName = @"serverCountPerRack",
        PossibleTypes = new [] { typeof(int) })]
        int? ServerCountPerRack { get; set; }
        /// <summary>Password for the terminal server connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Password for the terminal server connection.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationPassword { get; set; }
        /// <summary>IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv4 Address Prefix.",
        SerializedName = @"primaryIpv4Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationPrimaryIpv4Prefix { get; set; }
        /// <summary>IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPv6 Address Prefix.",
        SerializedName = @"primaryIpv6Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationPrimaryIpv6Prefix { get; set; }
        /// <summary>Secondary IPv4 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secondary IPv4 Address Prefix.",
        SerializedName = @"secondaryIpv4Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationSecondaryIpv4Prefix { get; set; }
        /// <summary>Secondary IPv6 Address Prefix.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secondary IPv6 Address Prefix.",
        SerializedName = @"secondaryIpv6Prefix",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationSecondaryIpv6Prefix { get; set; }
        /// <summary>Serial Number of Terminal server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Serial Number of Terminal server.",
        SerializedName = @"serialNumber",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationSerialNumber { get; set; }
        /// <summary>Username for the terminal server connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Username for the terminal server connection.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string TerminalServerConfigurationUsername { get; set; }

    }
    /// The Network Fabric resource definition.
    internal partial interface INetworkFabricPatchInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ITagsUpdateInternal
    {
        /// <summary>Switch configuration description.</summary>
        string Annotation { get; set; }
        /// <summary>ASN of CE devices for CE/PE connectivity.</summary>
        long? FabricAsn { get; set; }
        /// <summary>IPv4Prefix for Management Network. Example: 10.1.0.0/19.</summary>
        string Ipv4Prefix { get; set; }
        /// <summary>IPv6Prefix for Management Network. Example: 3FFE:FFFF:0:CD40::/59.</summary>
        string Ipv6Prefix { get; set; }
        /// <summary>Configuration to be used to setup the management network.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IManagementNetworkConfigurationPatchableProperties ManagementNetworkConfiguration { get; set; }
        /// <summary>Network Fabric Patch properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchProperties Property { get; set; }
        /// <summary>Number of compute racks associated to Network Fabric.</summary>
        int? RackCount { get; set; }
        /// <summary>Number of servers.Possible values are from 1-16.</summary>
        int? ServerCountPerRack { get; set; }
        /// <summary>Network and credentials configuration already applied to terminal server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricPatchablePropertiesTerminalServerConfiguration TerminalServerConfiguration { get; set; }
        /// <summary>Password for the terminal server connection.</summary>
        string TerminalServerConfigurationPassword { get; set; }
        /// <summary>IPv4 Address Prefix.</summary>
        string TerminalServerConfigurationPrimaryIpv4Prefix { get; set; }
        /// <summary>IPv6 Address Prefix.</summary>
        string TerminalServerConfigurationPrimaryIpv6Prefix { get; set; }
        /// <summary>Secondary IPv4 Address Prefix.</summary>
        string TerminalServerConfigurationSecondaryIpv4Prefix { get; set; }
        /// <summary>Secondary IPv6 Address Prefix.</summary>
        string TerminalServerConfigurationSecondaryIpv6Prefix { get; set; }
        /// <summary>Serial Number of Terminal server.</summary>
        string TerminalServerConfigurationSerialNumber { get; set; }
        /// <summary>Username for the terminal server connection.</summary>
        string TerminalServerConfigurationUsername { get; set; }

    }
}