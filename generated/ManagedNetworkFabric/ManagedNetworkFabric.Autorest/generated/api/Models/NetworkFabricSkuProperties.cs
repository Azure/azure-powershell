// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Extensions;

    /// <summary>Network Fabric SKU Properties define properties of the resource.</summary>
    public partial class NetworkFabricSkuProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricSkuProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricSkuPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Detail" /> property.</summary>
        private string _detail;

        /// <summary>URL providing detailed configuration of the fabric SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string Detail { get => this._detail; }

        /// <summary>Backing field for <see cref="MaxComputeRack" /> property.</summary>
        private int? _maxComputeRack;

        /// <summary>
        /// Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4 rack SKU
        /// and 8 for 8 rack SKU.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public int? MaxComputeRack { get => this._maxComputeRack; set => this._maxComputeRack = value; }

        /// <summary>Backing field for <see cref="MaximumServerCount" /> property.</summary>
        private int? _maximumServerCount;

        /// <summary>Maximum number of servers available for this Network Fabric SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public int? MaximumServerCount { get => this._maximumServerCount; set => this._maximumServerCount = value; }

        /// <summary>Internal Acessors for Detail</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricSkuPropertiesInternal.Detail { get => this._detail; set { {_detail = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricSkuPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for SupportedVersion</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricSkuPropertiesInternal.SupportedVersion { get => this._supportedVersion; set { {_supportedVersion = value;} } }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.INetworkFabricSkuPropertiesInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="SupportedVersion" /> property.</summary>
        private System.Collections.Generic.List<string> _supportedVersion;

        /// <summary>List of supported Network Fabric SKU versions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> SupportedVersion { get => this._supportedVersion; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>Type of Network Fabric SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Creates an new <see cref="NetworkFabricSkuProperties" /> instance.</summary>
        public NetworkFabricSkuProperties()
        {

        }
    }
    /// Network Fabric SKU Properties define properties of the resource.
    public partial interface INetworkFabricSkuProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IJsonSerializable
    {
        /// <summary>URL providing detailed configuration of the fabric SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"URL providing detailed configuration of the fabric SKU.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(string) })]
        string Detail { get;  }
        /// <summary>
        /// Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4 rack SKU
        /// and 8 for 8 rack SKU.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4 rack SKU and 8 for 8 rack SKU.",
        SerializedName = @"maxComputeRacks",
        PossibleTypes = new [] { typeof(int) })]
        int? MaxComputeRack { get; set; }
        /// <summary>Maximum number of servers available for this Network Fabric SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Maximum number of servers available for this Network Fabric SKU.",
        SerializedName = @"maximumServerCount",
        PossibleTypes = new [] { typeof(int) })]
        int? MaximumServerCount { get; set; }
        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Accepted", "Succeeded", "Updating", "Deleting", "Failed", "Canceled")]
        string ProvisioningState { get;  }
        /// <summary>List of supported Network Fabric SKU versions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of supported Network Fabric SKU versions.",
        SerializedName = @"supportedVersions",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SupportedVersion { get;  }
        /// <summary>Type of Network Fabric SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Type of Network Fabric SKU.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("SingleRack", "MultiRack")]
        string Type { get;  }

    }
    /// Network Fabric SKU Properties define properties of the resource.
    internal partial interface INetworkFabricSkuPropertiesInternal

    {
        /// <summary>URL providing detailed configuration of the fabric SKU.</summary>
        string Detail { get; set; }
        /// <summary>
        /// Maximum number of compute racks available for this Network Fabric SKU. The value of max count racks is 4 for 4 rack SKU
        /// and 8 for 8 rack SKU.
        /// </summary>
        int? MaxComputeRack { get; set; }
        /// <summary>Maximum number of servers available for this Network Fabric SKU.</summary>
        int? MaximumServerCount { get; set; }
        /// <summary>Provisioning state of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("Accepted", "Succeeded", "Updating", "Deleting", "Failed", "Canceled")]
        string ProvisioningState { get; set; }
        /// <summary>List of supported Network Fabric SKU versions.</summary>
        System.Collections.Generic.List<string> SupportedVersion { get; set; }
        /// <summary>Type of Network Fabric SKU.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("SingleRack", "MultiRack")]
        string Type { get; set; }

    }
}