// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Extensions;

    /// <summary>Defines the match condition that is supported to filter the traffic.</summary>
    public partial class AccessControlListMatchCondition :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListMatchCondition,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListMatchConditionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditions"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditions __commonMatchConditions = new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.CommonMatchConditions();

        /// <summary>Backing field for <see cref="DscpMarking" /> property.</summary>
        private System.Collections.Generic.List<string> _dscpMarking;

        /// <summary>List of DSCP Markings that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> DscpMarking { get => this._dscpMarking; set => this._dscpMarking = value; }

        /// <summary>Backing field for <see cref="EtherType" /> property.</summary>
        private System.Collections.Generic.List<string> _etherType;

        /// <summary>List of ether type values that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> EtherType { get => this._etherType; set => this._etherType = value; }

        /// <summary>Backing field for <see cref="Fragment" /> property.</summary>
        private System.Collections.Generic.List<string> _fragment;

        /// <summary>List of IP fragment packets that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Fragment { get => this._fragment; set => this._fragment = value; }

        /// <summary>IP condition that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IIPMatchCondition IPCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPCondition = value ?? null /* model class */; }

        /// <summary>The List of IP Group Names that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> IPConditionIpgroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionIpgroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionIpgroupName = value ?? null /* arrayOf */; }

        /// <summary>The list of IP Prefixes that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> IPConditionIpprefixValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionIpprefixValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionIpprefixValue = value ?? null /* arrayOf */; }

        /// <summary>IP Prefix Type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public string IPConditionPrefixType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionPrefixType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionPrefixType = value ?? null; }

        /// <summary>IP Address type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public string IPConditionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPConditionType = value ?? null; }

        /// <summary>Backing field for <see cref="IPLength" /> property.</summary>
        private System.Collections.Generic.List<string> _iPLength;

        /// <summary>List of IP Lengths that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> IPLength { get => this._iPLength; set => this._iPLength = value; }

        /// <summary>Internal Acessors for PortCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortCondition Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListMatchConditionInternal.PortCondition { get => (this._portCondition = this._portCondition ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.AccessControlListPortCondition()); set { {_portCondition = value;} } }

        /// <summary>Internal Acessors for IPCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IIPMatchCondition Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal.IPCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).IPCondition = value; }

        /// <summary>Internal Acessors for VlanMatchCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVlanMatchCondition Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal.VlanMatchCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchCondition = value; }

        /// <summary>Backing field for <see cref="PortCondition" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortCondition _portCondition;

        /// <summary>Defines the port condition that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortCondition PortCondition { get => (this._portCondition = this._portCondition ?? new Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.AccessControlListPortCondition()); set => this._portCondition = value; }

        /// <summary>List of protocol flags that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PortConditionFlag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortConditionInternal)PortCondition).Flag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortConditionInternal)PortCondition).Flag = value ?? null /* arrayOf */; }

        /// <summary>Layer4 protocol type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string PortConditionLayer4Protocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).Layer4Protocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).Layer4Protocol = value ?? null; }

        /// <summary>List of the Ports that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PortConditionPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).Port = value ?? null /* arrayOf */; }

        /// <summary>List of the port Group Names that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PortConditionPortGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).PortGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).PortGroupName = value ?? null /* arrayOf */; }

        /// <summary>Port type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inlined)]
        public string PortConditionPortType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).PortType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IPortConditionInternal)PortCondition).PortType = value ?? null; }

        /// <summary>List of the protocols that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> ProtocolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).ProtocolType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).ProtocolType = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="TtlValue" /> property.</summary>
        private System.Collections.Generic.List<string> _ttlValue;

        /// <summary>List of TTL [Time To Live] values that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> TtlValue { get => this._ttlValue; set => this._ttlValue = value; }

        /// <summary>Vlan match condition that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IVlanMatchCondition VlanMatchCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchCondition; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchCondition = value ?? null /* model class */; }

        /// <summary>List of inner vlans that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> VlanMatchConditionInnerVlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchConditionInnerVlan; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchConditionInnerVlan = value ?? null /* arrayOf */; }

        /// <summary>List of vlans that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> VlanMatchConditionVlan { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchConditionVlan; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchConditionVlan = value ?? null /* arrayOf */; }

        /// <summary>List of vlan group names that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Origin(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> VlanMatchConditionVlanGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchConditionVlanGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal)__commonMatchConditions).VlanMatchConditionVlanGroupName = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="AccessControlListMatchCondition" /> instance.</summary>
        public AccessControlListMatchCondition()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__commonMatchConditions), __commonMatchConditions);
            await eventListener.AssertObjectIsValid(nameof(__commonMatchConditions), __commonMatchConditions);
        }
    }
    /// Defines the match condition that is supported to filter the traffic.
    public partial interface IAccessControlListMatchCondition :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditions
    {
        /// <summary>List of DSCP Markings that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of DSCP Markings that need to be matched.",
        SerializedName = @"dscpMarkings",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DscpMarking { get; set; }
        /// <summary>List of ether type values that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of ether type values that need to be matched.",
        SerializedName = @"etherTypes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> EtherType { get; set; }
        /// <summary>List of IP fragment packets that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of IP fragment packets that need to be matched.",
        SerializedName = @"fragments",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Fragment { get; set; }
        /// <summary>List of IP Lengths that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of IP Lengths that need to be matched.",
        SerializedName = @"ipLengths",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IPLength { get; set; }
        /// <summary>List of protocol flags that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of protocol flags that need to be matched.",
        SerializedName = @"flags",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PortConditionFlag { get; set; }
        /// <summary>Layer4 protocol type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Layer4 protocol type that needs to be matched.",
        SerializedName = @"layer4Protocol",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("TCP", "UDP")]
        string PortConditionLayer4Protocol { get; set; }
        /// <summary>List of the Ports that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of the Ports that need to be matched.",
        SerializedName = @"ports",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PortConditionPort { get; set; }
        /// <summary>List of the port Group Names that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of the port Group Names that need to be matched.",
        SerializedName = @"portGroupNames",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PortConditionPortGroupName { get; set; }
        /// <summary>Port type that needs to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Port type that needs to be matched.",
        SerializedName = @"portType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("SourcePort", "DestinationPort")]
        string PortConditionPortType { get; set; }
        /// <summary>List of TTL [Time To Live] values that need to be matched.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of TTL [Time To Live] values that need to be matched.",
        SerializedName = @"ttlValues",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> TtlValue { get; set; }

    }
    /// Defines the match condition that is supported to filter the traffic.
    internal partial interface IAccessControlListMatchConditionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.ICommonMatchConditionsInternal
    {
        /// <summary>List of DSCP Markings that need to be matched.</summary>
        System.Collections.Generic.List<string> DscpMarking { get; set; }
        /// <summary>List of ether type values that need to be matched.</summary>
        System.Collections.Generic.List<string> EtherType { get; set; }
        /// <summary>List of IP fragment packets that need to be matched.</summary>
        System.Collections.Generic.List<string> Fragment { get; set; }
        /// <summary>List of IP Lengths that need to be matched.</summary>
        System.Collections.Generic.List<string> IPLength { get; set; }
        /// <summary>Defines the port condition that needs to be matched.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.Models.IAccessControlListPortCondition PortCondition { get; set; }
        /// <summary>List of protocol flags that need to be matched.</summary>
        System.Collections.Generic.List<string> PortConditionFlag { get; set; }
        /// <summary>Layer4 protocol type that needs to be matched.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("TCP", "UDP")]
        string PortConditionLayer4Protocol { get; set; }
        /// <summary>List of the Ports that need to be matched.</summary>
        System.Collections.Generic.List<string> PortConditionPort { get; set; }
        /// <summary>List of the port Group Names that need to be matched.</summary>
        System.Collections.Generic.List<string> PortConditionPortGroupName { get; set; }
        /// <summary>Port type that needs to be matched.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ManagedNetworkFabric.PSArgumentCompleterAttribute("SourcePort", "DestinationPort")]
        string PortConditionPortType { get; set; }
        /// <summary>List of TTL [Time To Live] values that need to be matched.</summary>
        System.Collections.Generic.List<string> TtlValue { get; set; }

    }
}