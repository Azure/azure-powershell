// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Extensions;

    /// <summary>The filter expression to be used in the export.</summary>
    public partial class ForecastFilter :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal
    {

        /// <summary>Backing field for <see cref="And" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> _and;

        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> And { get => this._and; set => this._and = value; }

        /// <summary>Backing field for <see cref="Dimension" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression _dimension;

        /// <summary>Has comparison expression for a dimension</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Dimension { get => (this._dimension = this._dimension ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpression()); set => this._dimension = value; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string DimensionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Name = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Operator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> DimensionValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Value = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Dimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal.Dimension { get => (this._dimension = this._dimension ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpression()); set { {_dimension = value;} } }

        /// <summary>Internal Acessors for DimensionOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal.DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Operator; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Dimension).Operator = value; }

        /// <summary>Internal Acessors for Tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal.Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpression()); set { {_tag = value;} } }

        /// <summary>Internal Acessors for TagOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal.TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Operator; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Operator = value; }

        /// <summary>Backing field for <see cref="Or" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> _or;

        /// <summary>The logical "OR" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> Or { get => this._or; set => this._or = value; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression _tag;

        /// <summary>Has comparison expression for a tag</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpression()); set => this._tag = value; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string TagName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Name = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Operator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> TagValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Value; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpressionInternal)Tag).Value = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="ForecastFilter" /> instance.</summary>
        public ForecastFilter()
        {

        }
    }
    /// The filter expression to be used in the export.
    public partial interface IForecastFilter :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IJsonSerializable
    {
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The logical ""AND"" expression. Must have at least 2 items.",
        SerializedName = @"and",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> And { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DimensionValue { get; set; }
        /// <summary>The logical "OR" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The logical ""OR"" expression. Must have at least 2 items.",
        SerializedName = @"or",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> Or { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string TagOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> TagValue { get; set; }

    }
    /// The filter expression to be used in the export.
    public partial interface IForecastFilterInternal

    {
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> And { get; set; }
        /// <summary>Has comparison expression for a dimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Dimension { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string DimensionOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        System.Collections.Generic.List<string> DimensionValue { get; set; }
        /// <summary>The logical "OR" expression. Must have at least 2 items.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> Or { get; set; }
        /// <summary>Has comparison expression for a tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Tag { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string TagOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        System.Collections.Generic.List<string> TagValue { get; set; }

    }
}