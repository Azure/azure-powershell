// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.PowerShell;

    /// <summary>The definition of data present in the forecast.</summary>
    [System.ComponentModel.TypeConverter(typeof(ForecastDatasetTypeConverter))]
    public partial class ForecastDataset
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDataset"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDataset" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDataset DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new ForecastDataset(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDataset"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDataset" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDataset DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new ForecastDataset(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDataset"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal ForecastDataset(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Configuration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Configuration = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfiguration) content.GetValueForProperty("Configuration",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Configuration, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("Filter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Filter = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter) content.GetValueForProperty("Filter",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Filter, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilterTypeConverter.ConvertFrom);
            }
            if (content.Contains("Granularity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Granularity = (string) content.GetValueForProperty("Granularity",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Granularity, global::System.Convert.ToString);
            }
            if (content.Contains("Aggregation"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Aggregation = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation) content.GetValueForProperty("Aggregation",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Aggregation, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetAggregationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ConfigurationColumn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).ConfigurationColumn = (System.Collections.Generic.List<string>) content.GetValueForProperty("ConfigurationColumn",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).ConfigurationColumn, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("FilterDimension"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterDimension = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression) content.GetValueForProperty("FilterDimension",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterDimension, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpressionTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilterTag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterTag = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression) content.GetValueForProperty("FilterTag",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterTag, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpressionTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilterAnd"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterAnd = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>) content.GetValueForProperty("FilterAnd",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterAnd, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>(__y, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("FilterOr"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterOr = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>) content.GetValueForProperty("FilterOr",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterOr, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>(__y, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("DimensionName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionName = (string) content.GetValueForProperty("DimensionName",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionName, global::System.Convert.ToString);
            }
            if (content.Contains("DimensionOperator"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionOperator = (string) content.GetValueForProperty("DimensionOperator",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionOperator, global::System.Convert.ToString);
            }
            if (content.Contains("DimensionValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionValue = (System.Collections.Generic.List<string>) content.GetValueForProperty("DimensionValue",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionValue, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("TagName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagName = (string) content.GetValueForProperty("TagName",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagName, global::System.Convert.ToString);
            }
            if (content.Contains("TagOperator"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagOperator = (string) content.GetValueForProperty("TagOperator",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagOperator, global::System.Convert.ToString);
            }
            if (content.Contains("TagValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagValue = (System.Collections.Generic.List<string>) content.GetValueForProperty("TagValue",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagValue, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDataset"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal ForecastDataset(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Configuration"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Configuration = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfiguration) content.GetValueForProperty("Configuration",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Configuration, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetConfigurationTypeConverter.ConvertFrom);
            }
            if (content.Contains("Filter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Filter = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter) content.GetValueForProperty("Filter",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Filter, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilterTypeConverter.ConvertFrom);
            }
            if (content.Contains("Granularity"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Granularity = (string) content.GetValueForProperty("Granularity",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Granularity, global::System.Convert.ToString);
            }
            if (content.Contains("Aggregation"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Aggregation = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation) content.GetValueForProperty("Aggregation",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).Aggregation, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetAggregationTypeConverter.ConvertFrom);
            }
            if (content.Contains("ConfigurationColumn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).ConfigurationColumn = (System.Collections.Generic.List<string>) content.GetValueForProperty("ConfigurationColumn",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).ConfigurationColumn, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("FilterDimension"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterDimension = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression) content.GetValueForProperty("FilterDimension",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterDimension, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpressionTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilterTag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterTag = (Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression) content.GetValueForProperty("FilterTag",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterTag, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastComparisonExpressionTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilterAnd"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterAnd = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>) content.GetValueForProperty("FilterAnd",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterAnd, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>(__y, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("FilterOr"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterOr = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>) content.GetValueForProperty("FilterOr",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).FilterOr, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter>(__y, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilterTypeConverter.ConvertFrom));
            }
            if (content.Contains("DimensionName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionName = (string) content.GetValueForProperty("DimensionName",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionName, global::System.Convert.ToString);
            }
            if (content.Contains("DimensionOperator"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionOperator = (string) content.GetValueForProperty("DimensionOperator",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionOperator, global::System.Convert.ToString);
            }
            if (content.Contains("DimensionValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionValue = (System.Collections.Generic.List<string>) content.GetValueForProperty("DimensionValue",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).DimensionValue, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("TagName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagName = (string) content.GetValueForProperty("TagName",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagName, global::System.Convert.ToString);
            }
            if (content.Contains("TagOperator"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagOperator = (string) content.GetValueForProperty("TagOperator",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagOperator, global::System.Convert.ToString);
            }
            if (content.Contains("TagValue"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagValue = (System.Collections.Generic.List<string>) content.GetValueForProperty("TagValue",((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal)this).TagValue, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="ForecastDataset" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="ForecastDataset" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDataset FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// The definition of data present in the forecast.
    [System.ComponentModel.TypeConverter(typeof(ForecastDatasetTypeConverter))]
    public partial interface IForecastDataset

    {

    }
}