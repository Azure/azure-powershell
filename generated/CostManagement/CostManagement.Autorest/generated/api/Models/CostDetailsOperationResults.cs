// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Extensions;

    /// <summary>The result of the long running operation for cost details Api.</summary>
    public partial class CostDetailsOperationResults :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResults,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal
    {

        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetailsInternal)Error).Code; }

        /// <summary>Backing field for <see cref="Error" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetails _error;

        /// <summary>The details of the error.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetails Error { get => (this._error = this._error ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ErrorDetails()); set => this._error = value; }

        /// <summary>Backing field for <see cref="Id" /> property.</summary>
        private string _id;

        /// <summary>The id of the long running operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string Id { get => this._id; set => this._id = value; }

        /// <summary>Backing field for <see cref="Manifest" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifest _manifest;

        /// <summary>The manifest of the report generated by the operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifest Manifest { get => (this._manifest = this._manifest ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ReportManifest()); set => this._manifest = value; }

        /// <summary>List of blob information generated by this operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IBlobInfo> ManifestBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).Blob; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).Blob = value ?? null /* arrayOf */; }

        /// <summary>The total number of blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public int? ManifestBlobCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).BlobCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).BlobCount = value ?? default(int); }

        /// <summary>The total number of bytes in all blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public long? ManifestByteCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).ByteCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).ByteCount = value ?? default(long); }

        /// <summary>Is the data in compressed format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public bool? ManifestCompressData { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).CompressData; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).CompressData = value ?? default(bool); }

        /// <summary>The data format of the report</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string ManifestDataFormat { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).DataFormat; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).DataFormat = value ?? null; }

        /// <summary>The Manifest version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string ManifestVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).ManifestVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).ManifestVersion = value ?? null; }

        /// <summary>Error message indicating why the operation failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetailsInternal)Error).Message; }

        /// <summary>Internal Acessors for Code</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetailsInternal)Error).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetailsInternal)Error).Code = value; }

        /// <summary>Internal Acessors for Error</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetails Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.Error { get => (this._error = this._error ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ErrorDetails()); set { {_error = value;} } }

        /// <summary>Internal Acessors for Manifest</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifest Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.Manifest { get => (this._manifest = this._manifest ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ReportManifest()); set { {_manifest = value;} } }

        /// <summary>Internal Acessors for ManifestRequestContext</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IRequestContext Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.ManifestRequestContext { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestContext; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestContext = value; }

        /// <summary>Internal Acessors for Message</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetailsInternal)Error).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetailsInternal)Error).Message = value; }

        /// <summary>Internal Acessors for RequestBodyTimePeriod</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsTimePeriod Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.RequestBodyTimePeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyTimePeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyTimePeriod = value; }

        /// <summary>Internal Acessors for RequestContextRequestBody</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IGenerateCostDetailsReportRequestDefinition Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsOperationResultsInternal.RequestContextRequestBody { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestContextRequestBody; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestContextRequestBody = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>The name of the long running operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>
        /// This parameter can be used only by Enterprise Agreement customers. Use the YearMonth(e.g. 202008) format. This parameter
        /// cannot be used alongside either the invoiceId or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter
        /// is not provided in the request body the API will return the current month's cost.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string RequestBodyBillingPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyBillingPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyBillingPeriod = value ?? null; }

        /// <summary>
        /// This parameter can only be used by Microsoft Customer Agreement customers. Additionally, it can only be used at the Billing
        /// Profile or Customer scope. This parameter cannot be used alongside either the billingPeriod or timePeriod parameters.
        /// If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current
        /// month's cost.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string RequestBodyInvoiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyInvoiceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyInvoiceId = value ?? null; }

        /// <summary>The type of the detailed report. By default ActualCost is provided</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string RequestBodyMetric { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyMetric; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestBodyMetric = value ?? null; }

        /// <summary>The request scope of the request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string RequestContextRequestScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestContextRequestScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).RequestContextRequestScope = value ?? null; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>The status of the cost details operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>The end date to pull data to. example format 2020-03-15</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string TimePeriodEnd { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).TimePeriodEnd; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).TimePeriodEnd = value ?? null; }

        /// <summary>The start date to pull data from. example format 2020-03-15</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string TimePeriodStart { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).TimePeriodStart; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifestInternal)Manifest).TimePeriodStart = value ?? null; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>The type of the long running operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Backing field for <see cref="ValidTill" /> property.</summary>
        private global::System.DateTime? _validTill;

        /// <summary>
        /// The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public global::System.DateTime? ValidTill { get => this._validTill; set => this._validTill = value; }

        /// <summary>Creates an new <see cref="CostDetailsOperationResults" /> instance.</summary>
        public CostDetailsOperationResults()
        {

        }
    }
    /// The result of the long running operation for cost details Api.
    public partial interface ICostDetailsOperationResults :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IJsonSerializable
    {
        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error code.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string Code { get;  }
        /// <summary>The id of the long running operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The id of the long running operation.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Id { get; set; }
        /// <summary>List of blob information generated by this operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of blob information generated by this operation.",
        SerializedName = @"blobs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IBlobInfo) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IBlobInfo> ManifestBlob { get; set; }
        /// <summary>The total number of blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of blobs.",
        SerializedName = @"blobCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ManifestBlobCount { get; set; }
        /// <summary>The total number of bytes in all blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The total number of bytes in all blobs.",
        SerializedName = @"byteCount",
        PossibleTypes = new [] { typeof(long) })]
        long? ManifestByteCount { get; set; }
        /// <summary>Is the data in compressed format.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Is the data in compressed format.",
        SerializedName = @"compressData",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ManifestCompressData { get; set; }
        /// <summary>The data format of the report</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The data format of the report",
        SerializedName = @"dataFormat",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Csv")]
        string ManifestDataFormat { get; set; }
        /// <summary>The Manifest version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Manifest version.",
        SerializedName = @"manifestVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ManifestVersion { get; set; }
        /// <summary>Error message indicating why the operation failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error message indicating why the operation failed.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string Message { get;  }
        /// <summary>The name of the long running operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the long running operation.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// This parameter can be used only by Enterprise Agreement customers. Use the YearMonth(e.g. 202008) format. This parameter
        /// cannot be used alongside either the invoiceId or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter
        /// is not provided in the request body the API will return the current month's cost.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This parameter can be used only by Enterprise Agreement customers. Use the YearMonth(e.g. 202008) format. This parameter cannot be used alongside either the invoiceId or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current month's cost.",
        SerializedName = @"billingPeriod",
        PossibleTypes = new [] { typeof(string) })]
        string RequestBodyBillingPeriod { get; set; }
        /// <summary>
        /// This parameter can only be used by Microsoft Customer Agreement customers. Additionally, it can only be used at the Billing
        /// Profile or Customer scope. This parameter cannot be used alongside either the billingPeriod or timePeriod parameters.
        /// If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current
        /// month's cost.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This parameter can only be used by Microsoft Customer Agreement customers. Additionally, it can only be used at the Billing Profile or Customer scope. This parameter cannot be used alongside either the billingPeriod or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current month's cost.",
        SerializedName = @"invoiceId",
        PossibleTypes = new [] { typeof(string) })]
        string RequestBodyInvoiceId { get; set; }
        /// <summary>The type of the detailed report. By default ActualCost is provided</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the detailed report. By default ActualCost is provided",
        SerializedName = @"metric",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("ActualCost", "AmortizedCost")]
        string RequestBodyMetric { get; set; }
        /// <summary>The request scope of the request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The request scope of the request.",
        SerializedName = @"requestScope",
        PossibleTypes = new [] { typeof(string) })]
        string RequestContextRequestScope { get; set; }
        /// <summary>The status of the cost details operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The status of the cost details operation",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Completed", "NoDataFound", "Failed")]
        string Status { get; set; }
        /// <summary>The end date to pull data to. example format 2020-03-15</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The end date to pull data to. example format 2020-03-15",
        SerializedName = @"end",
        PossibleTypes = new [] { typeof(string) })]
        string TimePeriodEnd { get; set; }
        /// <summary>The start date to pull data from. example format 2020-03-15</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The start date to pull data from. example format 2020-03-15",
        SerializedName = @"start",
        PossibleTypes = new [] { typeof(string) })]
        string TimePeriodStart { get; set; }
        /// <summary>The type of the long running operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the long running operation.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get; set; }
        /// <summary>
        /// The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.",
        SerializedName = @"validTill",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ValidTill { get; set; }

    }
    /// The result of the long running operation for cost details Api.
    public partial interface ICostDetailsOperationResultsInternal

    {
        /// <summary>Error code.</summary>
        string Code { get; set; }
        /// <summary>The details of the error.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetails Error { get; set; }
        /// <summary>The id of the long running operation.</summary>
        string Id { get; set; }
        /// <summary>The manifest of the report generated by the operation.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IReportManifest Manifest { get; set; }
        /// <summary>List of blob information generated by this operation.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IBlobInfo> ManifestBlob { get; set; }
        /// <summary>The total number of blobs.</summary>
        int? ManifestBlobCount { get; set; }
        /// <summary>The total number of bytes in all blobs.</summary>
        long? ManifestByteCount { get; set; }
        /// <summary>Is the data in compressed format.</summary>
        bool? ManifestCompressData { get; set; }
        /// <summary>The data format of the report</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Csv")]
        string ManifestDataFormat { get; set; }
        /// <summary>The context of the Cost Details request.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IRequestContext ManifestRequestContext { get; set; }
        /// <summary>The Manifest version.</summary>
        string ManifestVersion { get; set; }
        /// <summary>Error message indicating why the operation failed.</summary>
        string Message { get; set; }
        /// <summary>The name of the long running operation.</summary>
        string Name { get; set; }
        /// <summary>
        /// This parameter can be used only by Enterprise Agreement customers. Use the YearMonth(e.g. 202008) format. This parameter
        /// cannot be used alongside either the invoiceId or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter
        /// is not provided in the request body the API will return the current month's cost.
        /// </summary>
        string RequestBodyBillingPeriod { get; set; }
        /// <summary>
        /// This parameter can only be used by Microsoft Customer Agreement customers. Additionally, it can only be used at the Billing
        /// Profile or Customer scope. This parameter cannot be used alongside either the billingPeriod or timePeriod parameters.
        /// If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current
        /// month's cost.
        /// </summary>
        string RequestBodyInvoiceId { get; set; }
        /// <summary>The type of the detailed report. By default ActualCost is provided</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("ActualCost", "AmortizedCost")]
        string RequestBodyMetric { get; set; }
        /// <summary>
        /// The specific date range of cost details requested for the report. This parameter cannot be used alongside either the invoiceId
        /// or billingPeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body
        /// the API will return the current month's cost. API only allows data to be pulled for 1 month or less and no older than
        /// 13 months. If no timePeriod or billingPeriod or invoiceId is provided the API defaults to the open month time period
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICostDetailsTimePeriod RequestBodyTimePeriod { get; set; }
        /// <summary>The request payload body provided in Cost Details call</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IGenerateCostDetailsReportRequestDefinition RequestContextRequestBody { get; set; }
        /// <summary>The request scope of the request.</summary>
        string RequestContextRequestScope { get; set; }
        /// <summary>The status of the cost details operation</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Completed", "NoDataFound", "Failed")]
        string Status { get; set; }
        /// <summary>The end date to pull data to. example format 2020-03-15</summary>
        string TimePeriodEnd { get; set; }
        /// <summary>The start date to pull data from. example format 2020-03-15</summary>
        string TimePeriodStart { get; set; }
        /// <summary>The type of the long running operation.</summary>
        string Type { get; set; }
        /// <summary>
        /// The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
        /// </summary>
        global::System.DateTime? ValidTill { get; set; }

    }
}