// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Extensions;

    /// <summary>The definition of data present in the forecast.</summary>
    public partial class ForecastDataset :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDataset,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal
    {

        /// <summary>Backing field for <see cref="Aggregation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation _aggregation;

        /// <summary>
        /// Dictionary of aggregation expression to use in the forecast. The key of each item in the dictionary is the alias for the
        /// aggregated column. forecast can have up to 2 aggregation clauses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation Aggregation { get => (this._aggregation = this._aggregation ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetAggregation()); set => this._aggregation = value; }

        /// <summary>Backing field for <see cref="Configuration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfiguration _configuration;

        /// <summary>
        /// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping
        /// are provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfiguration Configuration { get => (this._configuration = this._configuration ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetConfiguration()); set => this._configuration = value; }

        /// <summary>
        /// Array of column names to be included in the forecast. Any valid forecast column name is allowed. If not provided, then
        /// forecast includes all columns.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> ConfigurationColumn { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfigurationInternal)Configuration).Column; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfigurationInternal)Configuration).Column = value ?? null /* arrayOf */; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string DimensionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionName; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionName = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionOperator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> DimensionValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionValue = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Filter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter _filter;

        /// <summary>Has filter expression to use in the forecast.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilter()); set => this._filter = value; }

        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> FilterAnd { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).And; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).And = value ?? null /* arrayOf */; }

        /// <summary>The logical "OR" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> FilterOr { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).Or; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).Or = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Granularity" /> property.</summary>
        private string _granularity;

        /// <summary>The granularity of rows in the forecast.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        public string Granularity { get => this._granularity; set => this._granularity = value; }

        /// <summary>Internal Acessors for Configuration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfiguration Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal.Configuration { get => (this._configuration = this._configuration ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastDatasetConfiguration()); set { {_configuration = value;} } }

        /// <summary>Internal Acessors for DimensionOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal.DimensionOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionOperator; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).DimensionOperator = value; }

        /// <summary>Internal Acessors for Filter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal.Filter { get => (this._filter = this._filter ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ForecastFilter()); set { {_filter = value;} } }

        /// <summary>Internal Acessors for FilterDimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal.FilterDimension { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).Dimension; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).Dimension = value; }

        /// <summary>Internal Acessors for FilterTag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal.FilterTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).Tag = value; }

        /// <summary>Internal Acessors for TagOperator</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetInternal.TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagOperator; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagOperator = value; }

        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string TagName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagName; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagName = value ?? null; }

        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public string TagOperator { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagOperator; }

        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> TagValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilterInternal)Filter).TagValue = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="ForecastDataset" /> instance.</summary>
        public ForecastDataset()
        {

        }
    }
    /// The definition of data present in the forecast.
    public partial interface IForecastDataset :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Dictionary of aggregation expression to use in the forecast. The key of each item in the dictionary is the alias for the
        /// aggregated column. forecast can have up to 2 aggregation clauses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Dictionary of aggregation expression to use in the forecast. The key of each item in the dictionary is the alias for the aggregated column. forecast can have up to 2 aggregation clauses.",
        SerializedName = @"aggregation",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation) })]
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation Aggregation { get; set; }
        /// <summary>
        /// Array of column names to be included in the forecast. Any valid forecast column name is allowed. If not provided, then
        /// forecast includes all columns.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of column names to be included in the forecast. Any valid forecast column name is allowed. If not provided, then forecast includes all columns.",
        SerializedName = @"columns",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ConfigurationColumn { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string DimensionOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> DimensionValue { get; set; }
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The logical ""AND"" expression. Must have at least 2 items.",
        SerializedName = @"and",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> FilterAnd { get; set; }
        /// <summary>The logical "OR" expression. Must have at least 2 items.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The logical ""OR"" expression. Must have at least 2 items.",
        SerializedName = @"or",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> FilterOr { get; set; }
        /// <summary>The granularity of rows in the forecast.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The granularity of rows in the forecast.",
        SerializedName = @"granularity",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Daily")]
        string Granularity { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the column to use in comparison.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The operator to use for comparison.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        string TagOperator { get;  }
        /// <summary>Array of values to use for comparison</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of values to use for comparison",
        SerializedName = @"values",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> TagValue { get; set; }

    }
    /// The definition of data present in the forecast.
    public partial interface IForecastDatasetInternal

    {
        /// <summary>
        /// Dictionary of aggregation expression to use in the forecast. The key of each item in the dictionary is the alias for the
        /// aggregated column. forecast can have up to 2 aggregation clauses.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetAggregation Aggregation { get; set; }
        /// <summary>
        /// Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping
        /// are provided.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastDatasetConfiguration Configuration { get; set; }
        /// <summary>
        /// Array of column names to be included in the forecast. Any valid forecast column name is allowed. If not provided, then
        /// forecast includes all columns.
        /// </summary>
        System.Collections.Generic.List<string> ConfigurationColumn { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string DimensionName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string DimensionOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        System.Collections.Generic.List<string> DimensionValue { get; set; }
        /// <summary>Has filter expression to use in the forecast.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter Filter { get; set; }
        /// <summary>The logical "AND" expression. Must have at least 2 items.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> FilterAnd { get; set; }
        /// <summary>Has comparison expression for a dimension</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression FilterDimension { get; set; }
        /// <summary>The logical "OR" expression. Must have at least 2 items.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastFilter> FilterOr { get; set; }
        /// <summary>Has comparison expression for a tag</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IForecastComparisonExpression FilterTag { get; set; }
        /// <summary>The granularity of rows in the forecast.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Daily")]
        string Granularity { get; set; }
        /// <summary>The name of the column to use in comparison.</summary>
        string TagName { get; set; }
        /// <summary>The operator to use for comparison.</summary>
        string TagOperator { get; set; }
        /// <summary>Array of values to use for comparison</summary>
        System.Collections.Generic.List<string> TagValue { get; set; }

    }
}