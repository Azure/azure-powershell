// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Extensions;

    /// <summary>An export execution.</summary>
    public partial class ExportExecution :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecution,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ProxyResource();

        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Code; }

        /// <summary>
        /// Array of column names to be included in the export. If not provided then the export will include all available columns.
        /// The available columns can vary by customer channel (see examples).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public System.Collections.Generic.List<string> ConfigurationColumn { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ConfigurationColumn; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ConfigurationColumn = value ?? null /* arrayOf */; }

        /// <summary>The granularity of rows in the export. Currently only 'Daily' is supported.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DataSetGranularity { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DataSetGranularity; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DataSetGranularity = value ?? null; }

        /// <summary>
        /// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DefinitionTimeframe { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionTimeframe; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionTimeframe = value ?? null; }

        /// <summary>
        /// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide
        /// data for charges or amortization for service reservations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DefinitionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionType = value ?? null; }

        /// <summary>
        /// The name of the container where exports will be uploaded. If the container does not exist it will be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DestinationContainer { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationContainer; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationContainer = value ?? null; }

        /// <summary>
        /// The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount
        /// are specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DestinationResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationResourceId = value ?? null; }

        /// <summary>The name of the directory where exports will be uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DestinationRootFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationRootFolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationRootFolderPath = value ?? null; }

        /// <summary>
        /// A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning
        /// this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DestinationSasToken { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationSasToken; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationSasToken = value ?? null; }

        /// <summary>
        /// The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string DestinationStorageAccount { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationStorageAccount; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DestinationStorageAccount = value ?? null; }

        /// <summary>
        /// eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating
        /// the latest version or not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string ETag { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).ETag; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).ETag = value ?? null; }

        /// <summary>The type of the export execution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.FormatTable(Index = 0)]
        public string ExecutionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ExecutionType; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ExecutionType = value ?? null; }

        /// <summary>The name of the exported file.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.FormatTable(Index = 5)]
        public string FileName { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).FileName; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).FileName = value ?? null; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Id; }

        /// <summary>Error message indicating why the operation failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Message; }

        /// <summary>Internal Acessors for Code</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Code = value; }

        /// <summary>Internal Acessors for DataSetConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDatasetConfiguration Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.DataSetConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DataSetConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DataSetConfiguration = value; }

        /// <summary>Internal Acessors for DefinitionDataSet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDataset Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.DefinitionDataSet { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionDataSet; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionDataSet = value; }

        /// <summary>Internal Acessors for DefinitionTimePeriod</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportTimePeriod Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.DefinitionTimePeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionTimePeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DefinitionTimePeriod = value; }

        /// <summary>Internal Acessors for DeliveryInfoDestination</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDeliveryDestination Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.DeliveryInfoDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DeliveryInfoDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).DeliveryInfoDestination = value; }

        /// <summary>Internal Acessors for Error</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetails Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.Error { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Error; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Error = value; }

        /// <summary>Internal Acessors for Message</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Message = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionProperties Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ExportExecutionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for RunHistoryValue</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecution> Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.RunHistoryValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunHistoryValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunHistoryValue = value; }

        /// <summary>Internal Acessors for RunSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICommonExportProperties Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.RunSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSetting = value; }

        /// <summary>Internal Acessors for RunSettingDefinition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDefinition Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.RunSettingDefinition { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingDefinition; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingDefinition = value; }

        /// <summary>Internal Acessors for RunSettingDeliveryInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDeliveryInfo Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.RunSettingDeliveryInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingDeliveryInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingDeliveryInfo = value; }

        /// <summary>Internal Acessors for RunSettingNextRunTimeEstimate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.RunSettingNextRunTimeEstimate { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingNextRunTimeEstimate; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingNextRunTimeEstimate = value; }

        /// <summary>Internal Acessors for RunSettingRunHistory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionListResult Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionInternal.RunSettingRunHistory { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingRunHistory; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingRunHistory = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Type = value; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Name; }

        /// <summary>The time when the export execution finished.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.FormatTable(Index = 2)]
        public global::System.DateTime? ProcessingEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ProcessingEndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ProcessingEndTime = value ?? default(global::System.DateTime); }

        /// <summary>The time when export was picked up to be executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.FormatTable(Index = 1)]
        public global::System.DateTime? ProcessingStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ProcessingStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).ProcessingStartTime = value ?? default(global::System.DateTime); }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionProperties _property;

        /// <summary>The properties of the export execution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ExportExecutionProperties()); set => this._property = value; }

        /// <summary>A list of export executions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecution> RunHistoryValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunHistoryValue; }

        /// <summary>The format of the export being delivered. Currently only 'Csv' is supported.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string RunSettingFormat { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingFormat; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingFormat = value ?? null; }

        /// <summary>
        /// If the export has an active schedule, provides an estimate of the next execution time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public global::System.DateTime? RunSettingNextRunTimeEstimate { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingNextRunTimeEstimate; }

        /// <summary>
        /// If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file.
        /// Note: this option is currently available only for modern commerce scopes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public bool? RunSettingPartitionData { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingPartitionData; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).RunSettingPartitionData = value ?? default(bool); }

        /// <summary>The last known status of the export execution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.FormatTable(Index = 4)]
        public string Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).Status = value ?? null; }

        /// <summary>
        /// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions
        /// it is 'System'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string SubmittedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).SubmittedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).SubmittedBy = value ?? null; }

        /// <summary>The time when export was queued to be executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public global::System.DateTime? SubmittedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).SubmittedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).SubmittedTime = value ?? default(global::System.DateTime); }

        /// <summary>The start date for export data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public global::System.DateTime? TimePeriodFrom { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).TimePeriodFrom; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).TimePeriodFrom = value ?? default(global::System.DateTime); }

        /// <summary>The end date for export data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public global::System.DateTime? TimePeriodTo { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).TimePeriodTo; set => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionPropertiesInternal)Property).TimePeriodTo = value ?? default(global::System.DateTime); }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Origin(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal)__proxyResource).Type; }

        /// <summary>Creates an new <see cref="ExportExecution" /> instance.</summary>
        public ExportExecution()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// An export execution.
    public partial interface IExportExecution :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResource
    {
        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error code.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string Code { get;  }
        /// <summary>
        /// Array of column names to be included in the export. If not provided then the export will include all available columns.
        /// The available columns can vary by customer channel (see examples).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples).",
        SerializedName = @"columns",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ConfigurationColumn { get; set; }
        /// <summary>The granularity of rows in the export. Currently only 'Daily' is supported.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The granularity of rows in the export. Currently only 'Daily' is supported.",
        SerializedName = @"granularity",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Daily")]
        string DataSetGranularity { get; set; }
        /// <summary>
        /// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time frame for pulling data for the export. If custom, then a specific time period must be provided.",
        SerializedName = @"timeframe",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("MonthToDate", "BillingMonthToDate", "TheLastMonth", "TheLastBillingMonth", "WeekToDate", "Custom")]
        string DefinitionTimeframe { get; set; }
        /// <summary>
        /// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide
        /// data for charges or amortization for service reservations.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Usage", "ActualCost", "AmortizedCost")]
        string DefinitionType { get; set; }
        /// <summary>
        /// The name of the container where exports will be uploaded. If the container does not exist it will be created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the container where exports will be uploaded. If the container does not exist it will be created.",
        SerializedName = @"container",
        PossibleTypes = new [] { typeof(string) })]
        string DestinationContainer { get; set; }
        /// <summary>
        /// The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount
        /// are specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount are specified.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string DestinationResourceId { get; set; }
        /// <summary>The name of the directory where exports will be uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the directory where exports will be uploaded.",
        SerializedName = @"rootFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string DestinationRootFolderPath { get; set; }
        /// <summary>
        /// A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning
        /// this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be
        /// specified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be specified.",
        SerializedName = @"sasToken",
        PossibleTypes = new [] { typeof(string) })]
        string DestinationSasToken { get; set; }
        /// <summary>
        /// The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken can be specified instead of resourceId.",
        SerializedName = @"storageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string DestinationStorageAccount { get; set; }
        /// <summary>The type of the export execution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the export execution.",
        SerializedName = @"executionType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("OnDemand", "Scheduled")]
        string ExecutionType { get; set; }
        /// <summary>The name of the exported file.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the exported file.",
        SerializedName = @"fileName",
        PossibleTypes = new [] { typeof(string) })]
        string FileName { get; set; }
        /// <summary>Error message indicating why the operation failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error message indicating why the operation failed.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string Message { get;  }
        /// <summary>The time when the export execution finished.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time when the export execution finished.",
        SerializedName = @"processingEndTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProcessingEndTime { get; set; }
        /// <summary>The time when export was picked up to be executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time when export was picked up to be executed.",
        SerializedName = @"processingStartTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProcessingStartTime { get; set; }
        /// <summary>A list of export executions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A list of export executions.",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecution) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecution> RunHistoryValue { get;  }
        /// <summary>The format of the export being delivered. Currently only 'Csv' is supported.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The format of the export being delivered. Currently only 'Csv' is supported.",
        SerializedName = @"format",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Csv")]
        string RunSettingFormat { get; set; }
        /// <summary>
        /// If the export has an active schedule, provides an estimate of the next execution time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"If the export has an active schedule, provides an estimate of the next execution time.",
        SerializedName = @"nextRunTimeEstimate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? RunSettingNextRunTimeEstimate { get;  }
        /// <summary>
        /// If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file.
        /// Note: this option is currently available only for modern commerce scopes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file. Note: this option is currently available only for modern commerce scopes.",
        SerializedName = @"partitionData",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RunSettingPartitionData { get; set; }
        /// <summary>The last known status of the export execution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The last known status of the export execution.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Queued", "InProgress", "Completed", "Failed", "Timeout", "NewDataNotAvailable", "DataNotAvailable")]
        string Status { get; set; }
        /// <summary>
        /// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions
        /// it is 'System'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions it is 'System'.",
        SerializedName = @"submittedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SubmittedBy { get; set; }
        /// <summary>The time when export was queued to be executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time when export was queued to be executed.",
        SerializedName = @"submittedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SubmittedTime { get; set; }
        /// <summary>The start date for export data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The start date for export data.",
        SerializedName = @"from",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TimePeriodFrom { get; set; }
        /// <summary>The end date for export data.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The end date for export data.",
        SerializedName = @"to",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TimePeriodTo { get; set; }

    }
    /// An export execution.
    public partial interface IExportExecutionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IProxyResourceInternal
    {
        /// <summary>Error code.</summary>
        string Code { get; set; }
        /// <summary>
        /// Array of column names to be included in the export. If not provided then the export will include all available columns.
        /// The available columns can vary by customer channel (see examples).
        /// </summary>
        System.Collections.Generic.List<string> ConfigurationColumn { get; set; }
        /// <summary>The export dataset configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDatasetConfiguration DataSetConfiguration { get; set; }
        /// <summary>The granularity of rows in the export. Currently only 'Daily' is supported.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Daily")]
        string DataSetGranularity { get; set; }
        /// <summary>The definition for data in the export.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDataset DefinitionDataSet { get; set; }
        /// <summary>Has time period for pulling data for the export.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportTimePeriod DefinitionTimePeriod { get; set; }
        /// <summary>
        /// The time frame for pulling data for the export. If custom, then a specific time period must be provided.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("MonthToDate", "BillingMonthToDate", "TheLastMonth", "TheLastBillingMonth", "WeekToDate", "Custom")]
        string DefinitionTimeframe { get; set; }
        /// <summary>
        /// The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide
        /// data for charges or amortization for service reservations.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Usage", "ActualCost", "AmortizedCost")]
        string DefinitionType { get; set; }
        /// <summary>Has destination for the export being delivered.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDeliveryDestination DeliveryInfoDestination { get; set; }
        /// <summary>
        /// The name of the container where exports will be uploaded. If the container does not exist it will be created.
        /// </summary>
        string DestinationContainer { get; set; }
        /// <summary>
        /// The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount
        /// are specified.
        /// </summary>
        string DestinationResourceId { get; set; }
        /// <summary>The name of the directory where exports will be uploaded.</summary>
        string DestinationRootFolderPath { get; set; }
        /// <summary>
        /// A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be
        /// specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning
        /// this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be
        /// specified.
        /// </summary>
        string DestinationSasToken { get; set; }
        /// <summary>
        /// The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken
        /// can be specified instead of resourceId.
        /// </summary>
        string DestinationStorageAccount { get; set; }
        /// <summary>The details of any error.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IErrorDetails Error { get; set; }
        /// <summary>The type of the export execution.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("OnDemand", "Scheduled")]
        string ExecutionType { get; set; }
        /// <summary>The name of the exported file.</summary>
        string FileName { get; set; }
        /// <summary>Error message indicating why the operation failed.</summary>
        string Message { get; set; }
        /// <summary>The time when the export execution finished.</summary>
        global::System.DateTime? ProcessingEndTime { get; set; }
        /// <summary>The time when export was picked up to be executed.</summary>
        global::System.DateTime? ProcessingStartTime { get; set; }
        /// <summary>The properties of the export execution.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionProperties Property { get; set; }
        /// <summary>A list of export executions.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecution> RunHistoryValue { get; set; }
        /// <summary>The export settings that were in effect for this execution.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.ICommonExportProperties RunSetting { get; set; }
        /// <summary>Has the definition for the export.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDefinition RunSettingDefinition { get; set; }
        /// <summary>Has delivery information for the export.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportDeliveryInfo RunSettingDeliveryInfo { get; set; }
        /// <summary>The format of the export being delivered. Currently only 'Csv' is supported.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Csv")]
        string RunSettingFormat { get; set; }
        /// <summary>
        /// If the export has an active schedule, provides an estimate of the next execution time.
        /// </summary>
        global::System.DateTime? RunSettingNextRunTimeEstimate { get; set; }
        /// <summary>
        /// If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file.
        /// Note: this option is currently available only for modern commerce scopes.
        /// </summary>
        bool? RunSettingPartitionData { get; set; }
        /// <summary>If requested, has the most recent execution history for the export.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.CostManagement.Models.IExportExecutionListResult RunSettingRunHistory { get; set; }
        /// <summary>The last known status of the export execution.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.CostManagement.PSArgumentCompleterAttribute("Queued", "InProgress", "Completed", "Failed", "Timeout", "NewDataNotAvailable", "DataNotAvailable")]
        string Status { get; set; }
        /// <summary>
        /// The identifier for the entity that executed the export. For OnDemand executions it is the user email. For scheduled executions
        /// it is 'System'.
        /// </summary>
        string SubmittedBy { get; set; }
        /// <summary>The time when export was queued to be executed.</summary>
        global::System.DateTime? SubmittedTime { get; set; }
        /// <summary>The start date for export data.</summary>
        global::System.DateTime? TimePeriodFrom { get; set; }
        /// <summary>The end date for export data.</summary>
        global::System.DateTime? TimePeriodTo { get; set; }

    }
}