// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>Trino Cluster profile.</summary>
    public partial class TrinoProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfile,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal
    {

        /// <summary>Backing field for <see cref="CatalogOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptions _catalogOption;

        /// <summary>Trino cluster catalog options.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptions CatalogOption { get => (this._catalogOption = this._catalogOption ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.CatalogOptions()); set => this._catalogOption = value; }

        /// <summary>hive catalog options.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption> CatalogOptionHive { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptionsInternal)CatalogOption).Hive; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptionsInternal)CatalogOption).Hive = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Coordinator" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator _coordinator;

        /// <summary>Trino Coordinator.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator Coordinator { get => (this._coordinator = this._coordinator ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoCoordinator()); set => this._coordinator = value; }

        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? CoordinatorDebugEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).DebugEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).DebugEnable = value ?? default(bool); }

        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? CoordinatorDebugPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).DebugPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).DebugPort = value ?? default(int); }

        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? CoordinatorDebugSuspend { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).DebugSuspend; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).DebugSuspend = value ?? default(bool); }

        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? CoordinatorHighAvailabilityEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).HighAvailabilityEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).HighAvailabilityEnabled = value ?? default(bool); }

        /// <summary>Internal Acessors for CatalogOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptions Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.CatalogOption { get => (this._catalogOption = this._catalogOption ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.CatalogOptions()); set { {_catalogOption = value;} } }

        /// <summary>Internal Acessors for Coordinator</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.Coordinator { get => (this._coordinator = this._coordinator ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoCoordinator()); set { {_coordinator = value;} } }

        /// <summary>Internal Acessors for CoordinatorDebug</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.CoordinatorDebug { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).Debug; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinatorInternal)Coordinator).Debug = value; }

        /// <summary>Internal Acessors for UserPluginsSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugins Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.UserPluginsSpec { get => (this._userPluginsSpec = this._userPluginsSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoUserPlugins()); set { {_userPluginsSpec = value;} } }

        /// <summary>Internal Acessors for UserTelemetrySpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetry Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.UserTelemetrySpec { get => (this._userTelemetrySpec = this._userTelemetrySpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoUserTelemetry()); set { {_userTelemetrySpec = value;} } }

        /// <summary>Internal Acessors for UserTelemetrySpecStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoTelemetryConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.UserTelemetrySpecStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).Storage; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).Storage = value; }

        /// <summary>Internal Acessors for Worker</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorker Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.Worker { get => (this._worker = this._worker ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoWorker()); set { {_worker = value;} } }

        /// <summary>Internal Acessors for WorkerDebug</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal.WorkerDebug { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).Debug; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).Debug = value; }

        /// <summary>
        /// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StorageHivecatalogName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StorageHivecatalogName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StorageHivecatalogName = value ?? null; }

        /// <summary>
        /// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under
        /// schema trinologs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StorageHivecatalogSchema { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StorageHivecatalogSchema; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StorageHivecatalogSchema = value ?? null; }

        /// <summary>
        /// Retention period for query log table partitions, this doesn't have any affect on actual data.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? StoragePartitionRetentionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StoragePartitionRetentionInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StoragePartitionRetentionInDay = value ?? default(int); }

        /// <summary>Azure storage location of the blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StoragePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StoragePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetryInternal)UserTelemetrySpec).StoragePath = value ?? null; }

        /// <summary>Trino user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin> UserPluginSpecPlugin { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPluginsInternal)UserPluginsSpec).Plugin; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPluginsInternal)UserPluginsSpec).Plugin = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="UserPluginsSpec" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugins _userPluginsSpec;

        /// <summary>Trino user plugins spec</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugins UserPluginsSpec { get => (this._userPluginsSpec = this._userPluginsSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoUserPlugins()); set => this._userPluginsSpec = value; }

        /// <summary>Backing field for <see cref="UserTelemetrySpec" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetry _userTelemetrySpec;

        /// <summary>User telemetry</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetry UserTelemetrySpec { get => (this._userTelemetrySpec = this._userTelemetrySpec ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoUserTelemetry()); set => this._userTelemetrySpec = value; }

        /// <summary>Backing field for <see cref="Worker" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorker _worker;

        /// <summary>Trino worker.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorker Worker { get => (this._worker = this._worker ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoWorker()); set => this._worker = value; }

        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? WorkerDebugEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).DebugEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).DebugEnable = value ?? default(bool); }

        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? WorkerDebugPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).DebugPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).DebugPort = value ?? default(int); }

        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? WorkerDebugSuspend { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).DebugSuspend; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorkerInternal)Worker).DebugSuspend = value ?? default(bool); }

        /// <summary>Creates an new <see cref="TrinoProfile" /> instance.</summary>
        public TrinoProfile()
        {

        }
    }
    /// Trino Cluster profile.
    public partial interface ITrinoProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>hive catalog options.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"hive catalog options.",
        SerializedName = @"hive",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption> CatalogOptionHive { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable debug or not.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The debug port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? CoordinatorDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if suspend debug or not.",
        SerializedName = @"suspend",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorDebugSuspend { get; set; }
        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.",
        SerializedName = @"highAvailabilityEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorHighAvailabilityEnabled { get; set; }
        /// <summary>
        /// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.",
        SerializedName = @"hivecatalogName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageHivecatalogName { get; set; }
        /// <summary>
        /// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under
        /// schema trinologs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.",
        SerializedName = @"hivecatalogSchema",
        PossibleTypes = new [] { typeof(string) })]
        string StorageHivecatalogSchema { get; set; }
        /// <summary>
        /// Retention period for query log table partitions, this doesn't have any affect on actual data.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Retention period for query log table partitions, this doesn't have any affect on actual data.",
        SerializedName = @"partitionRetentionInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? StoragePartitionRetentionInDay { get; set; }
        /// <summary>Azure storage location of the blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure storage location of the blobs.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string StoragePath { get; set; }
        /// <summary>Trino user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Trino user plugins.",
        SerializedName = @"plugins",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin> UserPluginSpecPlugin { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable debug or not.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WorkerDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The debug port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? WorkerDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if suspend debug or not.",
        SerializedName = @"suspend",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WorkerDebugSuspend { get; set; }

    }
    /// Trino Cluster profile.
    internal partial interface ITrinoProfileInternal

    {
        /// <summary>Trino cluster catalog options.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptions CatalogOption { get; set; }
        /// <summary>hive catalog options.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption> CatalogOptionHive { get; set; }
        /// <summary>Trino Coordinator.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator Coordinator { get; set; }
        /// <summary>Trino debug configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig CoordinatorDebug { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        bool? CoordinatorDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        int? CoordinatorDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        bool? CoordinatorDebugSuspend { get; set; }
        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        bool? CoordinatorHighAvailabilityEnabled { get; set; }
        /// <summary>
        /// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
        /// </summary>
        string StorageHivecatalogName { get; set; }
        /// <summary>
        /// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under
        /// schema trinologs.
        /// </summary>
        string StorageHivecatalogSchema { get; set; }
        /// <summary>
        /// Retention period for query log table partitions, this doesn't have any affect on actual data.
        /// </summary>
        int? StoragePartitionRetentionInDay { get; set; }
        /// <summary>Azure storage location of the blobs.</summary>
        string StoragePath { get; set; }
        /// <summary>Trino user plugins.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin> UserPluginSpecPlugin { get; set; }
        /// <summary>Trino user plugins spec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugins UserPluginsSpec { get; set; }
        /// <summary>User telemetry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetry UserTelemetrySpec { get; set; }
        /// <summary>Trino user telemetry definition.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoTelemetryConfig UserTelemetrySpecStorage { get; set; }
        /// <summary>Trino worker.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorker Worker { get; set; }
        /// <summary>Trino debug configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig WorkerDebug { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        bool? WorkerDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        int? WorkerDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        bool? WorkerDebugSuspend { get; set; }

    }
}