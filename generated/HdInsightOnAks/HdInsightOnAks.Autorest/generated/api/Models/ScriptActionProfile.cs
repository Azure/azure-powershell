// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>The script action profile.</summary>
    public partial class ScriptActionProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfileInternal
    {

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Script name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Parameter" /> property.</summary>
        private string _parameter;

        /// <summary>
        /// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string Parameter { get => this._parameter; set => this._parameter = value; }

        /// <summary>Backing field for <see cref="Service" /> property.</summary>
        private System.Collections.Generic.List<string> _service;

        /// <summary>List of services to apply the script action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Service { get => this._service; set => this._service = value; }

        /// <summary>Backing field for <see cref="ShouldPersist" /> property.</summary>
        private bool? _shouldPersist;

        /// <summary>Specify if the script should persist on the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public bool? ShouldPersist { get => this._shouldPersist; set => this._shouldPersist = value; }

        /// <summary>Backing field for <see cref="TimeoutInMinute" /> property.</summary>
        private int? _timeoutInMinute;

        /// <summary>Timeout duration for the script action in minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public int? TimeoutInMinute { get => this._timeoutInMinute; set => this._timeoutInMinute = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>Type of the script action. Supported type is bash scripts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string Type { get => this._type; set => this._type = value; }

        /// <summary>Backing field for <see cref="Url" /> property.</summary>
        private string _url;

        /// <summary>Url of the script file.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string Url { get => this._url; set => this._url = value; }

        /// <summary>Creates an new <see cref="ScriptActionProfile" /> instance.</summary>
        public ScriptActionProfile()
        {

        }
    }
    /// The script action profile.
    public partial interface IScriptActionProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>Script name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Script name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>
        /// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Additional parameters for the script action. It should be space-separated list of arguments required for script execution.",
        SerializedName = @"parameters",
        PossibleTypes = new [] { typeof(string) })]
        string Parameter { get; set; }
        /// <summary>List of services to apply the script action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of services to apply the script action.",
        SerializedName = @"services",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Service { get; set; }
        /// <summary>Specify if the script should persist on the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specify if the script should persist on the cluster.",
        SerializedName = @"shouldPersist",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ShouldPersist { get; set; }
        /// <summary>Timeout duration for the script action in minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Timeout duration for the script action in minutes.",
        SerializedName = @"timeoutInMinutes",
        PossibleTypes = new [] { typeof(int) })]
        int? TimeoutInMinute { get; set; }
        /// <summary>Type of the script action. Supported type is bash scripts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of the script action. Supported type is bash scripts.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get; set; }
        /// <summary>Url of the script file.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Url of the script file.",
        SerializedName = @"url",
        PossibleTypes = new [] { typeof(string) })]
        string Url { get; set; }

    }
    /// The script action profile.
    internal partial interface IScriptActionProfileInternal

    {
        /// <summary>Script name.</summary>
        string Name { get; set; }
        /// <summary>
        /// Additional parameters for the script action. It should be space-separated list of arguments required for script execution.
        /// </summary>
        string Parameter { get; set; }
        /// <summary>List of services to apply the script action.</summary>
        System.Collections.Generic.List<string> Service { get; set; }
        /// <summary>Specify if the script should persist on the cluster.</summary>
        bool? ShouldPersist { get; set; }
        /// <summary>Timeout duration for the script action in minutes.</summary>
        int? TimeoutInMinute { get; set; }
        /// <summary>Type of the script action. Supported type is bash scripts.</summary>
        string Type { get; set; }
        /// <summary>Url of the script file.</summary>
        string Url { get; set; }

    }
}