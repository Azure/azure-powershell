// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>Kafka disk storage profile.</summary>
    public partial class DiskStorageProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IDiskStorageProfile,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IDiskStorageProfileInternal
    {

        /// <summary>Backing field for <see cref="DataDiskSize" /> property.</summary>
        private int _dataDiskSize;

        /// <summary>
        /// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium
        /// SSD v2, which supports up to 64TB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public int DataDiskSize { get => this._dataDiskSize; set => this._dataDiskSize = value; }

        /// <summary>Backing field for <see cref="DataDiskType" /> property.</summary>
        private string _dataDiskType;

        /// <summary>Managed Disk Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string DataDiskType { get => this._dataDiskType; set => this._dataDiskType = value; }

        /// <summary>Creates an new <see cref="DiskStorageProfile" /> instance.</summary>
        public DiskStorageProfile()
        {

        }
    }
    /// Kafka disk storage profile.
    public partial interface IDiskStorageProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium
        /// SSD v2, which supports up to 64TB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.",
        SerializedName = @"dataDiskSize",
        PossibleTypes = new [] { typeof(int) })]
        int DataDiskSize { get; set; }
        /// <summary>Managed Disk Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Managed Disk Type.",
        SerializedName = @"dataDiskType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("Standard_HDD_LRS", "Standard_SSD_LRS", "Standard_SSD_ZRS", "Premium_SSD_LRS", "Premium_SSD_ZRS", "Premium_SSD_v2_LRS")]
        string DataDiskType { get; set; }

    }
    /// Kafka disk storage profile.
    internal partial interface IDiskStorageProfileInternal

    {
        /// <summary>
        /// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium
        /// SSD v2, which supports up to 64TB.
        /// </summary>
        int DataDiskSize { get; set; }
        /// <summary>Managed Disk Type.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("Standard_HDD_LRS", "Standard_SSD_LRS", "Standard_SSD_ZRS", "Premium_SSD_LRS", "Premium_SSD_ZRS", "Premium_SSD_v2_LRS")]
        string DataDiskType { get; set; }

    }
}