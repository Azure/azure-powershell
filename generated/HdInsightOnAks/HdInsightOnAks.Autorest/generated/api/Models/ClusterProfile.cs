// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Extensions;

    /// <summary>Cluster profile.</summary>
    public partial class ClusterProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfile,
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal
    {

        /// <summary>True if stderror is enabled, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? ApplicationLogStdErrorEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).ApplicationLogStdErrorEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).ApplicationLogStdErrorEnabled = value ?? default(bool); }

        /// <summary>True if stdout is enabled, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? ApplicationLogStdOutEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).ApplicationLogStdOutEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).ApplicationLogStdOutEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="AuthorizationProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfile _authorizationProfile;

        /// <summary>
        /// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfile AuthorizationProfile { get => (this._authorizationProfile = this._authorizationProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.AuthorizationProfile()); set => this._authorizationProfile = value; }

        /// <summary>AAD group Ids authorized for data plane access.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AuthorizationProfileGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfileInternal)AuthorizationProfile).GroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfileInternal)AuthorizationProfile).GroupId = value ?? null /* arrayOf */; }

        /// <summary>AAD user Ids authorized for data plane access.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AuthorizationProfileUserId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfileInternal)AuthorizationProfile).UserId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfileInternal)AuthorizationProfile).UserId = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="AutoscaleProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfile _autoscaleProfile;

        /// <summary>
        /// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfile AutoscaleProfile { get => (this._autoscaleProfile = this._autoscaleProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.AutoscaleProfile()); set => this._autoscaleProfile = value; }

        /// <summary>
        /// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string AutoscaleProfileAutoscaleType { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).AutoscaleType; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).AutoscaleType = value ?? null; }

        /// <summary>This indicates whether auto scale is enabled on HDInsight on AKS cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? AutoscaleProfileEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).Enabled = value ?? default(bool); }

        /// <summary>
        /// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes
        /// place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING
        /// node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? AutoscaleProfileGracefulDecommissionTimeout { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).GracefulDecommissionTimeout; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).GracefulDecommissionTimeout = value ?? default(int); }

        /// <summary>Backing field for <see cref="ClusterAccessProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfile _clusterAccessProfile;

        /// <summary>Cluster access profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfile ClusterAccessProfile { get => (this._clusterAccessProfile = this._clusterAccessProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterAccessProfile()); set => this._clusterAccessProfile = value; }

        /// <summary>
        /// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? ClusterAccessProfileEnableInternalIngress { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfileInternal)ClusterAccessProfile).EnableInternalIngress; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfileInternal)ClusterAccessProfile).EnableInternalIngress = value ?? default(bool); }

        /// <summary>
        /// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string ClusterAccessProfilePrivateLinkServiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfileInternal)ClusterAccessProfile).PrivateLinkServiceId; }

        /// <summary>ClientId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string ClusterIdentityMsiClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentityMsiClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentityMsiClientId = value ?? null; }

        /// <summary>ObjectId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string ClusterIdentityMsiObjectId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentityMsiObjectId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentityMsiObjectId = value ?? null; }

        /// <summary>ResourceId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string ClusterIdentityMsiResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentityMsiResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentityMsiResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="ClusterVersion" /> property.</summary>
        private string _clusterVersion;

        /// <summary>Version with 3/4 part.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string ClusterVersion { get => this._clusterVersion; set => this._clusterVersion = value; }

        /// <summary>Backing field for <see cref="Component" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterComponentsItem> _component;

        /// <summary>Component list of this cluster type and version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterComponentsItem> Component { get => this._component; }

        /// <summary>bootstrap server connectivity endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string ConnectivityEndpointBootstrapServerEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ConnectivityEndpointBootstrapServerEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ConnectivityEndpointBootstrapServerEndpoint = value ?? null; }

        /// <summary>Kafka broker endpoint list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> ConnectivityEndpointBrokerEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ConnectivityEndpointBrokerEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ConnectivityEndpointBrokerEndpoint = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="ConnectivityProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfile _connectivityProfile;

        /// <summary>Cluster connectivity profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfile ConnectivityProfile { get => (this._connectivityProfile = this._connectivityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ConnectivityProfile()); }

        /// <summary>List of SSH connectivity endpoints.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshConnectivityEndpoint> ConnectivityProfileSsh { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).Ssh; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).Ssh = value ?? null /* arrayOf */; }

        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? CoordinatorDebugEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebugEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebugEnable = value ?? default(bool); }

        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? CoordinatorDebugPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebugPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebugPort = value ?? default(int); }

        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? CoordinatorDebugSuspend { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebugSuspend; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebugSuspend = value ?? default(bool); }

        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? CoordinatorHighAvailabilityEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorHighAvailabilityEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorHighAvailabilityEnabled = value ?? default(bool); }

        /// <summary>The database URL</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string DatabaseHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabaseHost; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabaseHost = value ?? null; }

        /// <summary>The database name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string DatabaseName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabaseName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabaseName = value ?? null; }

        /// <summary>Reference for the database password</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string DatabasePasswordSecretRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabasePasswordSecretRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabasePasswordSecretRef = value ?? null; }

        /// <summary>The name of the database user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string DatabaseUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabaseUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).DatabaseUsername = value ?? null; }

        /// <summary>
        /// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium
        /// SSD v2, which supports up to 64TB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? DiskStorageDataDiskSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).DiskStorageDataDiskSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).DiskStorageDataDiskSize = value ?? default(int); }

        /// <summary>Managed Disk Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string DiskStorageDataDiskType { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).DiskStorageDataDiskType; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).DiskStorageDataDiskType = value ?? null; }

        /// <summary>Backing field for <see cref="FlinkProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfile _flinkProfile;

        /// <summary>The Flink cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfile FlinkProfile { get => (this._flinkProfile = this._flinkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.FlinkProfile()); set => this._flinkProfile = value; }

        /// <summary>
        /// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values =>
        /// Application, Session. Default value is Session
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string FlinkProfileDeploymentMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).DeploymentMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).DeploymentMode = value ?? null; }

        /// <summary>The number of task managers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? FlinkProfileNumReplica { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).NumReplica; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).NumReplica = value ?? default(int); }

        /// <summary>The required CPU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public float? HistoryServerCpu { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HistoryServerCpu; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HistoryServerCpu = value ?? default(float); }

        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public long? HistoryServerMemory { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HistoryServerMemory; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HistoryServerMemory = value ?? default(long); }

        /// <summary>
        /// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string HiveMetastoreDbConnectionAuthenticationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionAuthenticationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionAuthenticationMode = value ?? null; }

        /// <summary>
        /// Secret reference name from secretsProfile.secrets containing password for database connection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string HiveMetastoreDbConnectionPasswordSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionPasswordSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionPasswordSecret = value ?? null; }

        /// <summary>Connection string for hive metastore database.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string HiveMetastoreDbConnectionUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionUrl = value ?? null; }

        /// <summary>User name for database connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string HiveMetastoreDbConnectionUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HiveMetastoreDbConnectionUserName = value ?? null; }

        /// <summary>Backing field for <see cref="IdentityProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfile _identityProfile;

        /// <summary>
        /// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfile IdentityProfile { get => (this._identityProfile = this._identityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IdentityProfile()); set => this._identityProfile = value; }

        /// <summary>ClientId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string IdentityProfileMsiClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfileInternal)IdentityProfile).MsiClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfileInternal)IdentityProfile).MsiClientId = value ?? null; }

        /// <summary>ObjectId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string IdentityProfileMsiObjectId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfileInternal)IdentityProfile).MsiObjectId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfileInternal)IdentityProfile).MsiObjectId = value ?? null; }

        /// <summary>ResourceId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string IdentityProfileMsiResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfileInternal)IdentityProfile).MsiResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfileInternal)IdentityProfile).MsiResourceId = value ?? null; }

        /// <summary>The required CPU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public float? JobManagerCpu { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobManagerCpu; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobManagerCpu = value ?? default(float); }

        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public long? JobManagerMemory { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobManagerMemory; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobManagerMemory = value ?? default(long); }

        /// <summary>
        /// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string JobSpecArg { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecArg; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecArg = value ?? null; }

        /// <summary>
        /// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected
        /// from the flink job jar package.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string JobSpecEntryClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecEntryClass; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecEntryClass = value ?? null; }

        /// <summary>A string property that represents the name of the job JAR.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string JobSpecJarName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecJarName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecJarName = value ?? null; }

        /// <summary>A string property that specifies the directory where the job JAR is located.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string JobSpecJobJarDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecJobJarDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecJobJarDirectory = value ?? null; }

        /// <summary>A string property that represents the name of the savepoint for the Flink job</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string JobSpecSavePointName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecSavePointName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecSavePointName = value ?? null; }

        /// <summary>
        /// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum
        /// values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string JobSpecUpgradeMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecUpgradeMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpecUpgradeMode = value ?? null; }

        /// <summary>Backing field for <see cref="KafkaProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfile _kafkaProfile;

        /// <summary>The Kafka cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfile KafkaProfile { get => (this._kafkaProfile = this._kafkaProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.KafkaProfile()); set => this._kafkaProfile = value; }

        /// <summary>Expose Kafka cluster in KRaft mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? KafkaProfileEnableKRaft { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).EnableKRaft; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).EnableKRaft = value ?? default(bool); }

        /// <summary>Expose worker nodes as public endpoints.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? KafkaProfileEnablePublicEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).EnablePublicEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).EnablePublicEndpoint = value ?? default(bool); }

        /// <summary>Fully qualified path of Azure Storage container used for Tiered Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string KafkaProfileRemoteStorageUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).RemoteStorageUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).RemoteStorageUri = value ?? null; }

        /// <summary>Backing field for <see cref="LlapProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileLlapProfile _llapProfile;

        /// <summary>LLAP cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileLlapProfile LlapProfile { get => (this._llapProfile = this._llapProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterProfileLlapProfile()); set => this._llapProfile = value; }

        /// <summary>
        /// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between
        /// a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers
        /// it. The default value is 300 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? LoadBasedConfigCooldownPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigCooldownPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigCooldownPeriod = value ?? default(int); }

        /// <summary>
        /// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up
        /// and scale down between minimum and maximum number of nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? LoadBasedConfigMaxNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigMaxNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigMaxNode = value ?? default(int); }

        /// <summary>
        /// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up
        /// and scale down between minimum and maximum number of nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? LoadBasedConfigMinNode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigMinNode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigMinNode = value ?? default(int); }

        /// <summary>
        /// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering
        /// a scaling operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? LoadBasedConfigPollInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigPollInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigPollInterval = value ?? default(int); }

        /// <summary>The scaling rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScalingRule> LoadBasedConfigScalingRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigScalingRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfigScalingRule = value ?? null /* arrayOf */; }

        /// <summary>True if log analytics is enabled for the cluster, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? LogAnalyticProfileEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).Enabled = value ?? default(bool); }

        /// <summary>True if metrics are enabled, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? LogAnalyticProfileMetricsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).MetricsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).MetricsEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="LogAnalyticsProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfile _logAnalyticsProfile;

        /// <summary>Cluster log analytics profile to enable or disable OMS agent for cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfile LogAnalyticsProfile { get => (this._logAnalyticsProfile = this._logAnalyticsProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterLogAnalyticsProfile()); set => this._logAnalyticsProfile = value; }

        /// <summary>
        /// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbConnectionAuthenticationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbConnectionAuthenticationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbConnectionAuthenticationMode = value ?? null; }

        /// <summary>The database name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbName = value ?? null; }

        /// <summary>The secret name which contains the database user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbPasswordSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbPasswordSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbPasswordSecretName = value ?? null; }

        /// <summary>The database server host.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbServerHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbServerHost; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbServerHost = value ?? null; }

        /// <summary>The database user name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecDbUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecDbUserName = value ?? null; }

        /// <summary>The key vault resource id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecKeyVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecKeyVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecKeyVaultId = value ?? null; }

        /// <summary>The thrift url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string MetastoreSpecThriftUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecThriftUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpecThriftUrl = value ?? null; }

        /// <summary>Internal Acessors for AuthorizationProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.AuthorizationProfile { get => (this._authorizationProfile = this._authorizationProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.AuthorizationProfile()); set { {_authorizationProfile = value;} } }

        /// <summary>Internal Acessors for AutoscaleProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.AutoscaleProfile { get => (this._autoscaleProfile = this._autoscaleProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.AutoscaleProfile()); set { {_autoscaleProfile = value;} } }

        /// <summary>Internal Acessors for AutoscaleProfileLoadBasedConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ILoadBasedConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.AutoscaleProfileLoadBasedConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).LoadBasedConfig = value; }

        /// <summary>Internal Acessors for AutoscaleProfileScheduleBasedConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScheduleBasedConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.AutoscaleProfileScheduleBasedConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfig = value; }

        /// <summary>Internal Acessors for ClusterAccessProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.ClusterAccessProfile { get => (this._clusterAccessProfile = this._clusterAccessProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterAccessProfile()); set { {_clusterAccessProfile = value;} } }

        /// <summary>Internal Acessors for ClusterAccessProfilePrivateLinkServiceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.ClusterAccessProfilePrivateLinkServiceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfileInternal)ClusterAccessProfile).PrivateLinkServiceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfileInternal)ClusterAccessProfile).PrivateLinkServiceId = value; }

        /// <summary>Internal Acessors for Component</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterComponentsItem> Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.Component { get => this._component; set { {_component = value;} } }

        /// <summary>Internal Acessors for ConnectivityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.ConnectivityProfile { get => (this._connectivityProfile = this._connectivityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ConnectivityProfile()); set { {_connectivityProfile = value;} } }

        /// <summary>Internal Acessors for ConnectivityProfileWeb</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileWeb Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.ConnectivityProfileWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).Web; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).Web = value; }

        /// <summary>Internal Acessors for CoordinatorDebug</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.CoordinatorDebug { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebug; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CoordinatorDebug = value; }

        /// <summary>Internal Acessors for FlinkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfile { get => (this._flinkProfile = this._flinkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.FlinkProfile()); set { {_flinkProfile = value;} } }

        /// <summary>Internal Acessors for FlinkProfileCatalogOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkCatalogOptions Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileCatalogOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).CatalogOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).CatalogOption = value; }

        /// <summary>Internal Acessors for FlinkProfileCatalogOptionsHive</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkHiveCatalogOption Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileCatalogOptionsHive { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).CatalogOptionHive; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).CatalogOptionHive = value; }

        /// <summary>Internal Acessors for FlinkProfileHistoryServer</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IComputeResourceDefinition Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileHistoryServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HistoryServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).HistoryServer = value; }

        /// <summary>Internal Acessors for FlinkProfileJobManager</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IComputeResourceDefinition Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileJobManager { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobManager; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobManager = value; }

        /// <summary>Internal Acessors for FlinkProfileJobSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkJobProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileJobSpec { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpec; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).JobSpec = value; }

        /// <summary>Internal Acessors for FlinkProfileStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkStorageProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).Storage; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).Storage = value; }

        /// <summary>Internal Acessors for FlinkProfileTaskManager</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IComputeResourceDefinition Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.FlinkProfileTaskManager { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).TaskManager; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).TaskManager = value; }

        /// <summary>Internal Acessors for IdentityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.IdentityProfile { get => (this._identityProfile = this._identityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IdentityProfile()); set { {_identityProfile = value;} } }

        /// <summary>Internal Acessors for KafkaProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.KafkaProfile { get => (this._kafkaProfile = this._kafkaProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.KafkaProfile()); set { {_kafkaProfile = value;} } }

        /// <summary>Internal Acessors for KafkaProfileClusterIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.KafkaProfileClusterIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ClusterIdentity = value; }

        /// <summary>Internal Acessors for KafkaProfileConnectivityEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaConnectivityEndpoints Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.KafkaProfileConnectivityEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ConnectivityEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).ConnectivityEndpoint = value; }

        /// <summary>Internal Acessors for KafkaProfileDiskStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IDiskStorageProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.KafkaProfileDiskStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).DiskStorage; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfileInternal)KafkaProfile).DiskStorage = value; }

        /// <summary>Internal Acessors for LogAnalyticProfileApplicationLog</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsApplicationLogs Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.LogAnalyticProfileApplicationLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).ApplicationLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfileInternal)LogAnalyticsProfile).ApplicationLog = value; }

        /// <summary>Internal Acessors for LogAnalyticsProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.LogAnalyticsProfile { get => (this._logAnalyticsProfile = this._logAnalyticsProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterLogAnalyticsProfile()); set { {_logAnalyticsProfile = value;} } }

        /// <summary>Internal Acessors for PrometheusProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterPrometheusProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.PrometheusProfile { get => (this._prometheusProfile = this._prometheusProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterPrometheusProfile()); set { {_prometheusProfile = value;} } }

        /// <summary>Internal Acessors for RangerAdminDatabase</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerAdminSpecDatabase Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.RangerAdminDatabase { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAdminDatabase; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAdminDatabase = value; }

        /// <summary>Internal Acessors for RangerPluginProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterRangerPluginProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.RangerPluginProfile { get => (this._rangerPluginProfile = this._rangerPluginProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterRangerPluginProfile()); set { {_rangerPluginProfile = value;} } }

        /// <summary>Internal Acessors for RangerProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.RangerProfile { get => (this._rangerProfile = this._rangerProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.RangerProfile()); set { {_rangerProfile = value;} } }

        /// <summary>Internal Acessors for RangerProfileRangerAdmin</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerAdminSpec Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.RangerProfileRangerAdmin { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAdmin; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAdmin = value; }

        /// <summary>Internal Acessors for RangerProfileRangerAudit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerAuditSpec Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.RangerProfileRangerAudit { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAudit; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAudit = value; }

        /// <summary>Internal Acessors for RangerProfileRangerUsersync</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerUsersyncSpec Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.RangerProfileRangerUsersync { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersync; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersync = value; }

        /// <summary>Internal Acessors for SecretsProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.SecretsProfile { get => (this._secretsProfile = this._secretsProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SecretsProfile()); set { {_secretsProfile = value;} } }

        /// <summary>Internal Acessors for SparkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.SparkProfile { get => (this._sparkProfile = this._sparkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SparkProfile()); set { {_sparkProfile = value;} } }

        /// <summary>Internal Acessors for SparkProfileMetastoreSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.SparkProfileMetastoreSpec { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpec; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).MetastoreSpec = value; }

        /// <summary>Internal Acessors for SparkProfileUserPluginsSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugins Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.SparkProfileUserPluginsSpec { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).UserPluginsSpec; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).UserPluginsSpec = value; }

        /// <summary>Internal Acessors for SshProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.SshProfile { get => (this._sshProfile = this._sshProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SshProfile()); set { {_sshProfile = value;} } }

        /// <summary>Internal Acessors for SshProfilePodPrefix</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.SshProfilePodPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfileInternal)SshProfile).PodPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfileInternal)SshProfile).PodPrefix = value; }

        /// <summary>Internal Acessors for TrinoProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfile Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.TrinoProfile { get => (this._trinoProfile = this._trinoProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoProfile()); set { {_trinoProfile = value;} } }

        /// <summary>Internal Acessors for TrinoProfileCatalogOption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptions Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.TrinoProfileCatalogOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CatalogOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CatalogOption = value; }

        /// <summary>Internal Acessors for TrinoProfileCoordinator</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.TrinoProfileCoordinator { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).Coordinator; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).Coordinator = value; }

        /// <summary>Internal Acessors for TrinoProfileUserPluginsSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugins Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.TrinoProfileUserPluginsSpec { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserPluginsSpec; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserPluginsSpec = value; }

        /// <summary>Internal Acessors for TrinoProfileUserTelemetrySpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetry Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.TrinoProfileUserTelemetrySpec { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserTelemetrySpec; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserTelemetrySpec = value; }

        /// <summary>Internal Acessors for TrinoProfileWorker</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorker Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.TrinoProfileWorker { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).Worker; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).Worker = value; }

        /// <summary>Internal Acessors for UserTelemetrySpecStorage</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoTelemetryConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.UserTelemetrySpecStorage { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserTelemetrySpecStorage; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserTelemetrySpecStorage = value; }

        /// <summary>Internal Acessors for WorkerDebug</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileInternal.WorkerDebug { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebug; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebug = value; }

        /// <summary>Backing field for <see cref="OssVersion" /> property.</summary>
        private string _ossVersion;

        /// <summary>Version with three part.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public string OssVersion { get => this._ossVersion; set => this._ossVersion = value; }

        /// <summary>Enable Prometheus for cluster or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? PrometheuProfileEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterPrometheusProfileInternal)PrometheusProfile).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterPrometheusProfileInternal)PrometheusProfile).Enabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="PrometheusProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterPrometheusProfile _prometheusProfile;

        /// <summary>Cluster Prometheus profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterPrometheusProfile PrometheusProfile { get => (this._prometheusProfile = this._prometheusProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterPrometheusProfile()); set => this._prometheusProfile = value; }

        /// <summary>
        /// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of
        /// the respective AAD users.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RangerAdmin { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAdminAdmins; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAdminAdmins = value ?? null /* arrayOf */; }

        /// <summary>
        /// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string RangerAuditStorageAccount { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAuditStorageAccount; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerAuditStorageAccount = value ?? null; }

        /// <summary>Backing field for <see cref="RangerPluginProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterRangerPluginProfile _rangerPluginProfile;

        /// <summary>Cluster Ranger plugin profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterRangerPluginProfile RangerPluginProfile { get => (this._rangerPluginProfile = this._rangerPluginProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterRangerPluginProfile()); set => this._rangerPluginProfile = value; }

        /// <summary>Enable Ranger for cluster or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? RangerPluginProfileEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterRangerPluginProfileInternal)RangerPluginProfile).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterRangerPluginProfileInternal)RangerPluginProfile).Enabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="RangerProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfile _rangerProfile;

        /// <summary>The ranger cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfile RangerProfile { get => (this._rangerProfile = this._rangerProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.RangerProfile()); set => this._rangerProfile = value; }

        /// <summary>Denotes whether usersync service should be enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? RangerUsersyncEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncEnabled = value ?? default(bool); }

        /// <summary>
        /// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RangerUsersyncGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncGroup = value ?? null /* arrayOf */; }

        /// <summary>
        /// User & groups can be synced automatically or via a static list that's refreshed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string RangerUsersyncMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncMode = value ?? null; }

        /// <summary>
        /// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> RangerUsersyncUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncUser = value ?? null /* arrayOf */; }

        /// <summary>Azure storage location of a mapping file that lists user & group associations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string RangerUsersyncUserMappingLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncUserMappingLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfileInternal)RangerProfile).RangerUsersyncUserMappingLocation = value ?? null; }

        /// <summary>
        /// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are
        /// default when an specified scaling operation is executed (scale up/scale down)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? ScheduleBasedConfigDefaultCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfigDefaultCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfigDefaultCount = value ?? default(int); }

        /// <summary>
        /// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules
        /// within the schedule across days and times (start/end).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISchedule> ScheduleBasedConfigSchedule { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfigSchedule; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfigSchedule = value ?? null /* arrayOf */; }

        /// <summary>
        /// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string ScheduleBasedConfigTimeZone { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfigTimeZone; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfileInternal)AutoscaleProfile).ScheduleBasedConfigTimeZone = value ?? null; }

        /// <summary>Backing field for <see cref="ScriptActionProfile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile> _scriptActionProfile;

        /// <summary>The script action profile list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile> ScriptActionProfile { get => this._scriptActionProfile; set => this._scriptActionProfile = value; }

        /// <summary>
        /// Name of the user Key Vault where all the cluster specific user secrets are stored.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string SecretProfileKeyVaultResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfileInternal)SecretsProfile).KeyVaultResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfileInternal)SecretsProfile).KeyVaultResourceId = value ?? null; }

        /// <summary>Properties of Key Vault secret.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretReference> SecretProfileSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfileInternal)SecretsProfile).Secret; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfileInternal)SecretsProfile).Secret = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SecretsProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfile _secretsProfile;

        /// <summary>The cluster secret profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfile SecretsProfile { get => (this._secretsProfile = this._secretsProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SecretsProfile()); set => this._secretsProfile = value; }

        /// <summary>Backing field for <see cref="ServiceConfigsProfile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterServiceConfigsProfile> _serviceConfigsProfile;

        /// <summary>The service configs profiles.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterServiceConfigsProfile> ServiceConfigsProfile { get => this._serviceConfigsProfile; set => this._serviceConfigsProfile = value; }

        /// <summary>Backing field for <see cref="SparkProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfile _sparkProfile;

        /// <summary>The spark cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfile SparkProfile { get => (this._sparkProfile = this._sparkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SparkProfile()); set => this._sparkProfile = value; }

        /// <summary>The default storage URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string SparkProfileDefaultStorageUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).DefaultStorageUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).DefaultStorageUrl = value ?? null; }

        /// <summary>Spark user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin> SparkProfileUserPluginsSpecPlugin { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).UserPluginSpecPlugin; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfileInternal)SparkProfile).UserPluginSpecPlugin = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SshProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfile _sshProfile;

        /// <summary>Ssh profile for the cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfile SshProfile { get => (this._sshProfile = this._sshProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.SshProfile()); set => this._sshProfile = value; }

        /// <summary>Number of ssh pods per cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? SshProfileCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfileInternal)SshProfile).Count; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfileInternal)SshProfile).Count = value ?? default(int); }

        /// <summary>
        /// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at
        /// <clusterFqdn>/<sshBasePath>/<prefix>-<number>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string SshProfilePodPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfileInternal)SshProfile).PodPrefix; }

        /// <summary>
        /// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StorageHivecatalogName { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StorageHivecatalogName; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StorageHivecatalogName = value ?? null; }

        /// <summary>
        /// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under
        /// schema trinologs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StorageHivecatalogSchema { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StorageHivecatalogSchema; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StorageHivecatalogSchema = value ?? null; }

        /// <summary>
        /// Retention period for query log table partitions, this doesn't have any affect on actual data.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? StoragePartitionRetentionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StoragePartitionRetentionInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StoragePartitionRetentionInDay = value ?? default(int); }

        /// <summary>Azure storage location of the blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StoragePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StoragePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).StoragePath = value ?? null; }

        /// <summary>Storage key is only required for wasb(s) storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StorageStoragekey { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).StorageStoragekey; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).StorageStoragekey = value ?? null; }

        /// <summary>Storage account uri which is used for savepoint and checkpoint state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string StorageUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).StorageUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).StorageUri = value ?? null; }

        /// <summary>Backing field for <see cref="StubProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileStubProfile _stubProfile;

        /// <summary>Stub cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileStubProfile StubProfile { get => (this._stubProfile = this._stubProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ClusterProfileStubProfile()); set => this._stubProfile = value; }

        /// <summary>The required CPU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public float? TaskManagerCpu { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).TaskManagerCpu; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).TaskManagerCpu = value ?? default(float); }

        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public long? TaskManagerMemory { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).TaskManagerMemory; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfileInternal)FlinkProfile).TaskManagerMemory = value ?? default(long); }

        /// <summary>Backing field for <see cref="TrinoProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfile _trinoProfile;

        /// <summary>Trino Cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfile TrinoProfile { get => (this._trinoProfile = this._trinoProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.TrinoProfile()); set => this._trinoProfile = value; }

        /// <summary>hive catalog options.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption> TrinoProfileCatalogOptionsHive { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CatalogOptionHive; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).CatalogOptionHive = value ?? null /* arrayOf */; }

        /// <summary>Trino user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin> TrinoProfileUserPluginsSpecPlugin { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserPluginSpecPlugin; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).UserPluginSpecPlugin = value ?? null /* arrayOf */; }

        /// <summary>Web connectivity endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string WebFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).WebFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).WebFqdn = value ?? null; }

        /// <summary>
        /// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public string WebPrivateFqdn { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).WebPrivateFqdn; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileInternal)ConnectivityProfile).WebPrivateFqdn = value ?? null; }

        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? WorkerDebugEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebugEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebugEnable = value ?? default(bool); }

        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public int? WorkerDebugPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebugPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebugPort = value ?? default(int); }

        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Origin(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PropertyOrigin.Inlined)]
        public bool? WorkerDebugSuspend { get => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebugSuspend; set => ((Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfileInternal)TrinoProfile).WorkerDebugSuspend = value ?? default(bool); }

        /// <summary>Creates an new <see cref="ClusterProfile" /> instance.</summary>
        public ClusterProfile()
        {

        }
    }
    /// Cluster profile.
    public partial interface IClusterProfile :
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.IJsonSerializable
    {
        /// <summary>True if stderror is enabled, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if stderror is enabled, otherwise false.",
        SerializedName = @"stdErrorEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ApplicationLogStdErrorEnabled { get; set; }
        /// <summary>True if stdout is enabled, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if stdout is enabled, otherwise false.",
        SerializedName = @"stdOutEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ApplicationLogStdOutEnabled { get; set; }
        /// <summary>AAD group Ids authorized for data plane access.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"AAD group Ids authorized for data plane access.",
        SerializedName = @"groupIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> AuthorizationProfileGroupId { get; set; }
        /// <summary>AAD user Ids authorized for data plane access.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"AAD user Ids authorized for data plane access.",
        SerializedName = @"userIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> AuthorizationProfileUserId { get; set; }
        /// <summary>
        /// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.",
        SerializedName = @"autoscaleType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("ScheduleBased", "LoadBased")]
        string AutoscaleProfileAutoscaleType { get; set; }
        /// <summary>This indicates whether auto scale is enabled on HDInsight on AKS cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This indicates whether auto scale is enabled on HDInsight on AKS cluster.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoscaleProfileEnabled { get; set; }
        /// <summary>
        /// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes
        /// place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING
        /// node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.",
        SerializedName = @"gracefulDecommissionTimeout",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoscaleProfileGracefulDecommissionTimeout { get; set; }
        /// <summary>
        /// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Whether to create cluster using private IP instead of public IP. This property must be set at create time.",
        SerializedName = @"enableInternalIngress",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ClusterAccessProfileEnableInternalIngress { get; set; }
        /// <summary>
        /// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.",
        SerializedName = @"privateLinkServiceId",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterAccessProfilePrivateLinkServiceId { get;  }
        /// <summary>ClientId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"ClientId of the MSI.",
        SerializedName = @"msiClientId",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterIdentityMsiClientId { get;  }
        /// <summary>ObjectId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"ObjectId of the MSI.",
        SerializedName = @"msiObjectId",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterIdentityMsiObjectId { get;  }
        /// <summary>ResourceId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"ResourceId of the MSI.",
        SerializedName = @"msiResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterIdentityMsiResourceId { get;  }
        /// <summary>Version with 3/4 part.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Version with 3/4 part.",
        SerializedName = @"clusterVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ClusterVersion { get; set; }
        /// <summary>Component list of this cluster type and version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Component list of this cluster type and version.",
        SerializedName = @"components",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterComponentsItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterComponentsItem> Component { get;  }
        /// <summary>bootstrap server connectivity endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"bootstrap server connectivity endpoint.",
        SerializedName = @"bootstrapServerEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectivityEndpointBootstrapServerEndpoint { get;  }
        /// <summary>Kafka broker endpoint list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Kafka broker endpoint list.",
        SerializedName = @"brokerEndpoints",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ConnectivityEndpointBrokerEndpoint { get;  }
        /// <summary>List of SSH connectivity endpoints.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of SSH connectivity endpoints.",
        SerializedName = @"ssh",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshConnectivityEndpoint) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshConnectivityEndpoint> ConnectivityProfileSsh { get;  }
        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable debug or not.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The debug port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? CoordinatorDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if suspend debug or not.",
        SerializedName = @"suspend",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorDebugSuspend { get; set; }
        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node. Default: true.",
        SerializedName = @"highAvailabilityEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CoordinatorHighAvailabilityEnabled { get; set; }
        /// <summary>The database URL</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database URL",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string DatabaseHost { get; set; }
        /// <summary>The database name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database name",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DatabaseName { get; set; }
        /// <summary>Reference for the database password</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Reference for the database password",
        SerializedName = @"passwordSecretRef",
        PossibleTypes = new [] { typeof(string) })]
        string DatabasePasswordSecretRef { get; set; }
        /// <summary>The name of the database user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the database user",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string DatabaseUsername { get; set; }
        /// <summary>
        /// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium
        /// SSD v2, which supports up to 64TB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium SSD v2, which supports up to 64TB.",
        SerializedName = @"dataDiskSize",
        PossibleTypes = new [] { typeof(int) })]
        int? DiskStorageDataDiskSize { get; set; }
        /// <summary>Managed Disk Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Managed Disk Type.",
        SerializedName = @"dataDiskType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("Standard_HDD_LRS", "Standard_SSD_LRS", "Standard_SSD_ZRS", "Premium_SSD_LRS", "Premium_SSD_ZRS", "Premium_SSD_v2_LRS")]
        string DiskStorageDataDiskType { get; set; }
        /// <summary>
        /// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values =>
        /// Application, Session. Default value is Session
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values => Application, Session. Default value is Session",
        SerializedName = @"deploymentMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("Application", "Session")]
        string FlinkProfileDeploymentMode { get; set; }
        /// <summary>The number of task managers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of task managers.",
        SerializedName = @"numReplicas",
        PossibleTypes = new [] { typeof(int) })]
        int? FlinkProfileNumReplica { get; set; }
        /// <summary>The required CPU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The required CPU.",
        SerializedName = @"cpu",
        PossibleTypes = new [] { typeof(float) })]
        float? HistoryServerCpu { get; set; }
        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The required memory in MB, Container memory will be 110 percentile",
        SerializedName = @"memory",
        PossibleTypes = new [] { typeof(long) })]
        long? HistoryServerMemory { get; set; }
        /// <summary>
        /// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization",
        SerializedName = @"metastoreDbConnectionAuthenticationMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("SqlAuth", "IdentityAuth")]
        string HiveMetastoreDbConnectionAuthenticationMode { get; set; }
        /// <summary>
        /// Secret reference name from secretsProfile.secrets containing password for database connection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secret reference name from secretsProfile.secrets containing password for database connection.",
        SerializedName = @"metastoreDbConnectionPasswordSecret",
        PossibleTypes = new [] { typeof(string) })]
        string HiveMetastoreDbConnectionPasswordSecret { get; set; }
        /// <summary>Connection string for hive metastore database.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Connection string for hive metastore database.",
        SerializedName = @"metastoreDbConnectionURL",
        PossibleTypes = new [] { typeof(string) })]
        string HiveMetastoreDbConnectionUrl { get; set; }
        /// <summary>User name for database connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User name for database connection.",
        SerializedName = @"metastoreDbConnectionUserName",
        PossibleTypes = new [] { typeof(string) })]
        string HiveMetastoreDbConnectionUserName { get; set; }
        /// <summary>ClientId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ClientId of the MSI.",
        SerializedName = @"msiClientId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityProfileMsiClientId { get; set; }
        /// <summary>ObjectId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ObjectId of the MSI.",
        SerializedName = @"msiObjectId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityProfileMsiObjectId { get; set; }
        /// <summary>ResourceId of the MSI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ResourceId of the MSI.",
        SerializedName = @"msiResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityProfileMsiResourceId { get; set; }
        /// <summary>The required CPU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The required CPU.",
        SerializedName = @"cpu",
        PossibleTypes = new [] { typeof(float) })]
        float? JobManagerCpu { get; set; }
        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The required memory in MB, Container memory will be 110 percentile",
        SerializedName = @"memory",
        PossibleTypes = new [] { typeof(long) })]
        long? JobManagerMemory { get; set; }
        /// <summary>
        /// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property representing additional JVM arguments for the Flink job. It should be space separated value.",
        SerializedName = @"args",
        PossibleTypes = new [] { typeof(string) })]
        string JobSpecArg { get; set; }
        /// <summary>
        /// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected
        /// from the flink job jar package.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected from the flink job jar package.",
        SerializedName = @"entryClass",
        PossibleTypes = new [] { typeof(string) })]
        string JobSpecEntryClass { get; set; }
        /// <summary>A string property that represents the name of the job JAR.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property that represents the name of the job JAR.",
        SerializedName = @"jarName",
        PossibleTypes = new [] { typeof(string) })]
        string JobSpecJarName { get; set; }
        /// <summary>A string property that specifies the directory where the job JAR is located.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property that specifies the directory where the job JAR is located.",
        SerializedName = @"jobJarDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string JobSpecJobJarDirectory { get; set; }
        /// <summary>A string property that represents the name of the savepoint for the Flink job</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property that represents the name of the savepoint for the Flink job",
        SerializedName = @"savePointName",
        PossibleTypes = new [] { typeof(string) })]
        string JobSpecSavePointName { get; set; }
        /// <summary>
        /// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum
        /// values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.",
        SerializedName = @"upgradeMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("STATELESS_UPDATE", "UPDATE", "LAST_STATE_UPDATE")]
        string JobSpecUpgradeMode { get; set; }
        /// <summary>Expose Kafka cluster in KRaft mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Expose Kafka cluster in KRaft mode.",
        SerializedName = @"enableKRaft",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KafkaProfileEnableKRaft { get; set; }
        /// <summary>Expose worker nodes as public endpoints.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Expose worker nodes as public endpoints.",
        SerializedName = @"enablePublicEndpoints",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KafkaProfileEnablePublicEndpoint { get; set; }
        /// <summary>Fully qualified path of Azure Storage container used for Tiered Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Fully qualified path of Azure Storage container used for Tiered Storage.",
        SerializedName = @"remoteStorageUri",
        PossibleTypes = new [] { typeof(string) })]
        string KafkaProfileRemoteStorageUri { get; set; }
        /// <summary>LLAP cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"LLAP cluster profile.",
        SerializedName = @"llapProfile",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileLlapProfile) })]
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileLlapProfile LlapProfile { get; set; }
        /// <summary>
        /// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between
        /// a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers
        /// it. The default value is 300 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers it. The default value is 300 seconds.",
        SerializedName = @"cooldownPeriod",
        PossibleTypes = new [] { typeof(int) })]
        int? LoadBasedConfigCooldownPeriod { get; set; }
        /// <summary>
        /// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up
        /// and scale down between minimum and maximum number of nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.",
        SerializedName = @"maxNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? LoadBasedConfigMaxNode { get; set; }
        /// <summary>
        /// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up
        /// and scale down between minimum and maximum number of nodes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up and scale down between minimum and maximum number of nodes.",
        SerializedName = @"minNodes",
        PossibleTypes = new [] { typeof(int) })]
        int? LoadBasedConfigMinNode { get; set; }
        /// <summary>
        /// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering
        /// a scaling operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering a scaling operation.",
        SerializedName = @"pollInterval",
        PossibleTypes = new [] { typeof(int) })]
        int? LoadBasedConfigPollInterval { get; set; }
        /// <summary>The scaling rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The scaling rules.",
        SerializedName = @"scalingRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScalingRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScalingRule> LoadBasedConfigScalingRule { get; set; }
        /// <summary>True if log analytics is enabled for the cluster, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if log analytics is enabled for the cluster, otherwise false.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogAnalyticProfileEnabled { get; set; }
        /// <summary>True if metrics are enabled, otherwise false.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"True if metrics are enabled, otherwise false.",
        SerializedName = @"metricsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LogAnalyticProfileMetricsEnabled { get; set; }
        /// <summary>
        /// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization",
        SerializedName = @"dbConnectionAuthenticationMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("SqlAuth", "IdentityAuth")]
        string MetastoreSpecDbConnectionAuthenticationMode { get; set; }
        /// <summary>The database name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database name.",
        SerializedName = @"dbName",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbName { get; set; }
        /// <summary>The secret name which contains the database user password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The secret name which contains the database user password.",
        SerializedName = @"dbPasswordSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbPasswordSecretName { get; set; }
        /// <summary>The database server host.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database server host.",
        SerializedName = @"dbServerHost",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbServerHost { get; set; }
        /// <summary>The database user name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The database user name.",
        SerializedName = @"dbUserName",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecDbUserName { get; set; }
        /// <summary>The key vault resource id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The key vault resource id.",
        SerializedName = @"keyVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecKeyVaultId { get; set; }
        /// <summary>The thrift url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The thrift url.",
        SerializedName = @"thriftUrl",
        PossibleTypes = new [] { typeof(string) })]
        string MetastoreSpecThriftUrl { get; set; }
        /// <summary>Version with three part.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Version with three part.",
        SerializedName = @"ossVersion",
        PossibleTypes = new [] { typeof(string) })]
        string OssVersion { get; set; }
        /// <summary>Enable Prometheus for cluster or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enable Prometheus for cluster or not.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PrometheuProfileEnabled { get; set; }
        /// <summary>
        /// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of
        /// the respective AAD users.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of the respective AAD users.",
        SerializedName = @"admins",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RangerAdmin { get; set; }
        /// <summary>
        /// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure storage location of the blobs. MSI should have read/write access to this Storage account.",
        SerializedName = @"storageAccount",
        PossibleTypes = new [] { typeof(string) })]
        string RangerAuditStorageAccount { get; set; }
        /// <summary>Enable Ranger for cluster or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enable Ranger for cluster or not.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RangerPluginProfileEnabled { get; set; }
        /// <summary>Denotes whether usersync service should be enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Denotes whether usersync service should be enabled",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RangerUsersyncEnabled { get; set; }
        /// <summary>
        /// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of groups that should be synced. These group names should match the object id of the respective AAD groups.",
        SerializedName = @"groups",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RangerUsersyncGroup { get; set; }
        /// <summary>
        /// User & groups can be synced automatically or via a static list that's refreshed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User & groups can be synced automatically or via a static list that's refreshed.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("static", "automatic")]
        string RangerUsersyncMode { get; set; }
        /// <summary>
        /// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.",
        SerializedName = @"users",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> RangerUsersyncUser { get; set; }
        /// <summary>Azure storage location of a mapping file that lists user & group associations.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure storage location of a mapping file that lists user & group associations.",
        SerializedName = @"userMappingLocation",
        PossibleTypes = new [] { typeof(string) })]
        string RangerUsersyncUserMappingLocation { get; set; }
        /// <summary>
        /// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are
        /// default when an specified scaling operation is executed (scale up/scale down)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are default when an specified scaling operation is executed (scale up/scale down)",
        SerializedName = @"defaultCount",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleBasedConfigDefaultCount { get; set; }
        /// <summary>
        /// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules
        /// within the schedule across days and times (start/end).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules within the schedule across days and times (start/end).",
        SerializedName = @"schedules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISchedule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISchedule> ScheduleBasedConfigSchedule { get; set; }
        /// <summary>
        /// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        string ScheduleBasedConfigTimeZone { get; set; }
        /// <summary>The script action profile list.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The script action profile list.",
        SerializedName = @"scriptActionProfiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile> ScriptActionProfile { get; set; }
        /// <summary>
        /// Name of the user Key Vault where all the cluster specific user secrets are stored.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the user Key Vault where all the cluster specific user secrets are stored.",
        SerializedName = @"keyVaultResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string SecretProfileKeyVaultResourceId { get; set; }
        /// <summary>Properties of Key Vault secret.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Properties of Key Vault secret.",
        SerializedName = @"secrets",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretReference> SecretProfileSecret { get; set; }
        /// <summary>The service configs profiles.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The service configs profiles.",
        SerializedName = @"serviceConfigsProfiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterServiceConfigsProfile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterServiceConfigsProfile> ServiceConfigsProfile { get; set; }
        /// <summary>The default storage URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The default storage URL.",
        SerializedName = @"defaultStorageUrl",
        PossibleTypes = new [] { typeof(string) })]
        string SparkProfileDefaultStorageUrl { get; set; }
        /// <summary>Spark user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Spark user plugins.",
        SerializedName = @"plugins",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin> SparkProfileUserPluginsSpecPlugin { get; set; }
        /// <summary>Number of ssh pods per cluster.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of ssh pods per cluster.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(int) })]
        int? SshProfileCount { get; set; }
        /// <summary>
        /// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at
        /// <clusterFqdn>/<sshBasePath>/<prefix>-<number>
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at <clusterFqdn>/<sshBasePath>/<prefix>-<number>",
        SerializedName = @"podPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string SshProfilePodPrefix { get;  }
        /// <summary>
        /// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.",
        SerializedName = @"hivecatalogName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageHivecatalogName { get; set; }
        /// <summary>
        /// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under
        /// schema trinologs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under schema trinologs.",
        SerializedName = @"hivecatalogSchema",
        PossibleTypes = new [] { typeof(string) })]
        string StorageHivecatalogSchema { get; set; }
        /// <summary>
        /// Retention period for query log table partitions, this doesn't have any affect on actual data.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Retention period for query log table partitions, this doesn't have any affect on actual data.",
        SerializedName = @"partitionRetentionInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? StoragePartitionRetentionInDay { get; set; }
        /// <summary>Azure storage location of the blobs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure storage location of the blobs.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string StoragePath { get; set; }
        /// <summary>Storage key is only required for wasb(s) storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage key is only required for wasb(s) storage.",
        SerializedName = @"storagekey",
        PossibleTypes = new [] { typeof(string) })]
        string StorageStoragekey { get; set; }
        /// <summary>Storage account uri which is used for savepoint and checkpoint state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Storage account uri which is used for savepoint and checkpoint state.",
        SerializedName = @"storageUri",
        PossibleTypes = new [] { typeof(string) })]
        string StorageUri { get; set; }
        /// <summary>Stub cluster profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Stub cluster profile.",
        SerializedName = @"stubProfile",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileStubProfile) })]
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileStubProfile StubProfile { get; set; }
        /// <summary>The required CPU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The required CPU.",
        SerializedName = @"cpu",
        PossibleTypes = new [] { typeof(float) })]
        float? TaskManagerCpu { get; set; }
        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The required memory in MB, Container memory will be 110 percentile",
        SerializedName = @"memory",
        PossibleTypes = new [] { typeof(long) })]
        long? TaskManagerMemory { get; set; }
        /// <summary>hive catalog options.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"hive catalog options.",
        SerializedName = @"hive",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption> TrinoProfileCatalogOptionsHive { get; set; }
        /// <summary>Trino user plugins.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Trino user plugins.",
        SerializedName = @"plugins",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin> TrinoProfileUserPluginsSpecPlugin { get; set; }
        /// <summary>Web connectivity endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Web connectivity endpoint.",
        SerializedName = @"fqdn",
        PossibleTypes = new [] { typeof(string) })]
        string WebFqdn { get;  }
        /// <summary>
        /// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.",
        SerializedName = @"privateFqdn",
        PossibleTypes = new [] { typeof(string) })]
        string WebPrivateFqdn { get;  }
        /// <summary>The flag that if enable debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if enable debug or not.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WorkerDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The debug port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? WorkerDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The flag that if suspend debug or not.",
        SerializedName = @"suspend",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WorkerDebugSuspend { get; set; }

    }
    /// Cluster profile.
    internal partial interface IClusterProfileInternal

    {
        /// <summary>True if stderror is enabled, otherwise false.</summary>
        bool? ApplicationLogStdErrorEnabled { get; set; }
        /// <summary>True if stdout is enabled, otherwise false.</summary>
        bool? ApplicationLogStdOutEnabled { get; set; }
        /// <summary>
        /// Authorization profile with details of AAD user Ids and group Ids authorized for data plane access.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAuthorizationProfile AuthorizationProfile { get; set; }
        /// <summary>AAD group Ids authorized for data plane access.</summary>
        System.Collections.Generic.List<string> AuthorizationProfileGroupId { get; set; }
        /// <summary>AAD user Ids authorized for data plane access.</summary>
        System.Collections.Generic.List<string> AuthorizationProfileUserId { get; set; }
        /// <summary>
        /// This is the Autoscale profile for the cluster. This will allow customer to create cluster enabled with Autoscale.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IAutoscaleProfile AutoscaleProfile { get; set; }
        /// <summary>
        /// User to specify which type of Autoscale to be implemented - Scheduled Based or Load Based.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("ScheduleBased", "LoadBased")]
        string AutoscaleProfileAutoscaleType { get; set; }
        /// <summary>This indicates whether auto scale is enabled on HDInsight on AKS cluster.</summary>
        bool? AutoscaleProfileEnabled { get; set; }
        /// <summary>
        /// This property is for graceful decommission timeout; It has a default setting of 3600 seconds before forced shutdown takes
        /// place. This is the maximal time to wait for running containers and applications to complete before transition a DECOMMISSIONING
        /// node into DECOMMISSIONED. The default value is 3600 seconds. Negative value (like -1) is handled as infinite timeout.
        /// </summary>
        int? AutoscaleProfileGracefulDecommissionTimeout { get; set; }
        /// <summary>Profiles of load based Autoscale.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ILoadBasedConfig AutoscaleProfileLoadBasedConfig { get; set; }
        /// <summary>Profiles of schedule based Autoscale.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScheduleBasedConfig AutoscaleProfileScheduleBasedConfig { get; set; }
        /// <summary>Cluster access profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterAccessProfile ClusterAccessProfile { get; set; }
        /// <summary>
        /// Whether to create cluster using private IP instead of public IP. This property must be set at create time.
        /// </summary>
        bool? ClusterAccessProfileEnableInternalIngress { get; set; }
        /// <summary>
        /// Private link service resource ID. Only when enableInternalIngress is true, this property will be returned.
        /// </summary>
        string ClusterAccessProfilePrivateLinkServiceId { get; set; }
        /// <summary>ClientId of the MSI.</summary>
        string ClusterIdentityMsiClientId { get; set; }
        /// <summary>ObjectId of the MSI.</summary>
        string ClusterIdentityMsiObjectId { get; set; }
        /// <summary>ResourceId of the MSI.</summary>
        string ClusterIdentityMsiResourceId { get; set; }
        /// <summary>Version with 3/4 part.</summary>
        string ClusterVersion { get; set; }
        /// <summary>Component list of this cluster type and version.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterComponentsItem> Component { get; set; }
        /// <summary>bootstrap server connectivity endpoint.</summary>
        string ConnectivityEndpointBootstrapServerEndpoint { get; set; }
        /// <summary>Kafka broker endpoint list.</summary>
        System.Collections.Generic.List<string> ConnectivityEndpointBrokerEndpoint { get; set; }
        /// <summary>Cluster connectivity profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfile ConnectivityProfile { get; set; }
        /// <summary>List of SSH connectivity endpoints.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshConnectivityEndpoint> ConnectivityProfileSsh { get; set; }
        /// <summary>Web connectivity endpoint details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IConnectivityProfileWeb ConnectivityProfileWeb { get; set; }
        /// <summary>Trino debug configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig CoordinatorDebug { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        bool? CoordinatorDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        int? CoordinatorDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        bool? CoordinatorDebugSuspend { get; set; }
        /// <summary>
        /// The flag that if enable coordinator HA, uses multiple coordinator replicas with auto failover, one per each head node.
        /// Default: true.
        /// </summary>
        bool? CoordinatorHighAvailabilityEnabled { get; set; }
        /// <summary>The database URL</summary>
        string DatabaseHost { get; set; }
        /// <summary>The database name</summary>
        string DatabaseName { get; set; }
        /// <summary>Reference for the database password</summary>
        string DatabasePasswordSecretRef { get; set; }
        /// <summary>The name of the database user</summary>
        string DatabaseUsername { get; set; }
        /// <summary>
        /// Managed Disk size in GB. The maximum supported disk size for Standard and Premium HDD/SSD is 32TB, except for Premium
        /// SSD v2, which supports up to 64TB.
        /// </summary>
        int? DiskStorageDataDiskSize { get; set; }
        /// <summary>Managed Disk Type.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("Standard_HDD_LRS", "Standard_SSD_LRS", "Standard_SSD_ZRS", "Premium_SSD_LRS", "Premium_SSD_ZRS", "Premium_SSD_v2_LRS")]
        string DiskStorageDataDiskType { get; set; }
        /// <summary>The Flink cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkProfile FlinkProfile { get; set; }
        /// <summary>Flink cluster catalog options.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkCatalogOptions FlinkProfileCatalogOption { get; set; }
        /// <summary>Hive Catalog Option for Flink cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkHiveCatalogOption FlinkProfileCatalogOptionsHive { get; set; }
        /// <summary>
        /// A string property that indicates the deployment mode of Flink cluster. It can have one of the following enum values =>
        /// Application, Session. Default value is Session
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("Application", "Session")]
        string FlinkProfileDeploymentMode { get; set; }
        /// <summary>History Server container/ process CPU and memory requirements</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IComputeResourceDefinition FlinkProfileHistoryServer { get; set; }
        /// <summary>Job Manager container/ process CPU and memory requirements</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IComputeResourceDefinition FlinkProfileJobManager { get; set; }
        /// <summary>
        /// Job specifications for flink clusters in application deployment mode. The specification is immutable even if job properties
        /// are changed by calling the RunJob API, please use the ListJob API to get the latest job information.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkJobProfile FlinkProfileJobSpec { get; set; }
        /// <summary>The number of task managers.</summary>
        int? FlinkProfileNumReplica { get; set; }
        /// <summary>The storage profile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IFlinkStorageProfile FlinkProfileStorage { get; set; }
        /// <summary>Task Manager container/ process CPU and memory requirements</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IComputeResourceDefinition FlinkProfileTaskManager { get; set; }
        /// <summary>The required CPU.</summary>
        float? HistoryServerCpu { get; set; }
        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        long? HistoryServerMemory { get; set; }
        /// <summary>
        /// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("SqlAuth", "IdentityAuth")]
        string HiveMetastoreDbConnectionAuthenticationMode { get; set; }
        /// <summary>
        /// Secret reference name from secretsProfile.secrets containing password for database connection.
        /// </summary>
        string HiveMetastoreDbConnectionPasswordSecret { get; set; }
        /// <summary>Connection string for hive metastore database.</summary>
        string HiveMetastoreDbConnectionUrl { get; set; }
        /// <summary>User name for database connection.</summary>
        string HiveMetastoreDbConnectionUserName { get; set; }
        /// <summary>
        /// This property is required by Trino, Spark and Flink cluster but is optional for Kafka cluster.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfile IdentityProfile { get; set; }
        /// <summary>ClientId of the MSI.</summary>
        string IdentityProfileMsiClientId { get; set; }
        /// <summary>ObjectId of the MSI.</summary>
        string IdentityProfileMsiObjectId { get; set; }
        /// <summary>ResourceId of the MSI.</summary>
        string IdentityProfileMsiResourceId { get; set; }
        /// <summary>The required CPU.</summary>
        float? JobManagerCpu { get; set; }
        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        long? JobManagerMemory { get; set; }
        /// <summary>
        /// A string property representing additional JVM arguments for the Flink job. It should be space separated value.
        /// </summary>
        string JobSpecArg { get; set; }
        /// <summary>
        /// A string property that specifies the entry class for the Flink job. If not specified, the entry point is auto-detected
        /// from the flink job jar package.
        /// </summary>
        string JobSpecEntryClass { get; set; }
        /// <summary>A string property that represents the name of the job JAR.</summary>
        string JobSpecJarName { get; set; }
        /// <summary>A string property that specifies the directory where the job JAR is located.</summary>
        string JobSpecJobJarDirectory { get; set; }
        /// <summary>A string property that represents the name of the savepoint for the Flink job</summary>
        string JobSpecSavePointName { get; set; }
        /// <summary>
        /// A string property that indicates the upgrade mode to be performed on the Flink job. It can have one of the following enum
        /// values => STATELESS_UPDATE, UPDATE, LAST_STATE_UPDATE.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("STATELESS_UPDATE", "UPDATE", "LAST_STATE_UPDATE")]
        string JobSpecUpgradeMode { get; set; }
        /// <summary>The Kafka cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaProfile KafkaProfile { get; set; }
        /// <summary>Identity of the internal service components inside the Kafka cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IIdentityProfile KafkaProfileClusterIdentity { get; set; }
        /// <summary>Kafka bootstrap server and brokers related connectivity endpoints.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IKafkaConnectivityEndpoints KafkaProfileConnectivityEndpoint { get; set; }
        /// <summary>Kafka disk storage profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IDiskStorageProfile KafkaProfileDiskStorage { get; set; }
        /// <summary>Expose Kafka cluster in KRaft mode.</summary>
        bool? KafkaProfileEnableKRaft { get; set; }
        /// <summary>Expose worker nodes as public endpoints.</summary>
        bool? KafkaProfileEnablePublicEndpoint { get; set; }
        /// <summary>Fully qualified path of Azure Storage container used for Tiered Storage.</summary>
        string KafkaProfileRemoteStorageUri { get; set; }
        /// <summary>LLAP cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileLlapProfile LlapProfile { get; set; }
        /// <summary>
        /// This is a cool down period, this is a time period in seconds, which determines the amount of time that must elapse between
        /// a scaling activity started by a rule and the start of the next scaling activity, regardless of the rule that triggers
        /// it. The default value is 300 seconds.
        /// </summary>
        int? LoadBasedConfigCooldownPeriod { get; set; }
        /// <summary>
        /// User needs to set the maximum number of nodes for load based scaling, the load based scaling will use this to scale up
        /// and scale down between minimum and maximum number of nodes.
        /// </summary>
        int? LoadBasedConfigMaxNode { get; set; }
        /// <summary>
        /// User needs to set the minimum number of nodes for load based scaling, the load based scaling will use this to scale up
        /// and scale down between minimum and maximum number of nodes.
        /// </summary>
        int? LoadBasedConfigMinNode { get; set; }
        /// <summary>
        /// User can specify the poll interval, this is the time period (in seconds) after which scaling metrics are polled for triggering
        /// a scaling operation.
        /// </summary>
        int? LoadBasedConfigPollInterval { get; set; }
        /// <summary>The scaling rules.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScalingRule> LoadBasedConfigScalingRule { get; set; }
        /// <summary>Collection of logs to be enabled or disabled for log analytics.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsApplicationLogs LogAnalyticProfileApplicationLog { get; set; }
        /// <summary>True if log analytics is enabled for the cluster, otherwise false.</summary>
        bool? LogAnalyticProfileEnabled { get; set; }
        /// <summary>True if metrics are enabled, otherwise false.</summary>
        bool? LogAnalyticProfileMetricsEnabled { get; set; }
        /// <summary>Cluster log analytics profile to enable or disable OMS agent for cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterLogAnalyticsProfile LogAnalyticsProfile { get; set; }
        /// <summary>
        /// The authentication mode to connect to your Hive metastore database. More details: https://learn.microsoft.com/en-us/azure/azure-sql/database/logins-create-manage?view=azuresql#authentication-and-authorization
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("SqlAuth", "IdentityAuth")]
        string MetastoreSpecDbConnectionAuthenticationMode { get; set; }
        /// <summary>The database name.</summary>
        string MetastoreSpecDbName { get; set; }
        /// <summary>The secret name which contains the database user password.</summary>
        string MetastoreSpecDbPasswordSecretName { get; set; }
        /// <summary>The database server host.</summary>
        string MetastoreSpecDbServerHost { get; set; }
        /// <summary>The database user name.</summary>
        string MetastoreSpecDbUserName { get; set; }
        /// <summary>The key vault resource id.</summary>
        string MetastoreSpecKeyVaultId { get; set; }
        /// <summary>The thrift url.</summary>
        string MetastoreSpecThriftUrl { get; set; }
        /// <summary>Version with three part.</summary>
        string OssVersion { get; set; }
        /// <summary>Enable Prometheus for cluster or not.</summary>
        bool? PrometheuProfileEnabled { get; set; }
        /// <summary>Cluster Prometheus profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterPrometheusProfile PrometheusProfile { get; set; }
        /// <summary>
        /// List of usernames that should be marked as ranger admins. These usernames should match the user principal name (UPN) of
        /// the respective AAD users.
        /// </summary>
        System.Collections.Generic.List<string> RangerAdmin { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerAdminSpecDatabase RangerAdminDatabase { get; set; }
        /// <summary>
        /// Azure storage location of the blobs. MSI should have read/write access to this Storage account.
        /// </summary>
        string RangerAuditStorageAccount { get; set; }
        /// <summary>Cluster Ranger plugin profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterRangerPluginProfile RangerPluginProfile { get; set; }
        /// <summary>Enable Ranger for cluster or not.</summary>
        bool? RangerPluginProfileEnabled { get; set; }
        /// <summary>The ranger cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerProfile RangerProfile { get; set; }
        /// <summary>Specification for the Ranger Admin service.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerAdminSpec RangerProfileRangerAdmin { get; set; }
        /// <summary>Properties required to describe audit log storage.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerAuditSpec RangerProfileRangerAudit { get; set; }
        /// <summary>Specification for the Ranger Usersync service</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IRangerUsersyncSpec RangerProfileRangerUsersync { get; set; }
        /// <summary>Denotes whether usersync service should be enabled</summary>
        bool? RangerUsersyncEnabled { get; set; }
        /// <summary>
        /// List of groups that should be synced. These group names should match the object id of the respective AAD groups.
        /// </summary>
        System.Collections.Generic.List<string> RangerUsersyncGroup { get; set; }
        /// <summary>
        /// User & groups can be synced automatically or via a static list that's refreshed.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.PSArgumentCompleterAttribute("static", "automatic")]
        string RangerUsersyncMode { get; set; }
        /// <summary>
        /// List of user names that should be synced. These usernames should match the User principal name of the respective AAD users.
        /// </summary>
        System.Collections.Generic.List<string> RangerUsersyncUser { get; set; }
        /// <summary>Azure storage location of a mapping file that lists user & group associations.</summary>
        string RangerUsersyncUserMappingLocation { get; set; }
        /// <summary>
        /// Setting default node count of current schedule configuration. Default node count specifies the number of nodes which are
        /// default when an specified scaling operation is executed (scale up/scale down)
        /// </summary>
        int? ScheduleBasedConfigDefaultCount { get; set; }
        /// <summary>
        /// This specifies the schedules where scheduled based Autoscale to be enabled, the user has a choice to set multiple rules
        /// within the schedule across days and times (start/end).
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISchedule> ScheduleBasedConfigSchedule { get; set; }
        /// <summary>
        /// User has to specify the timezone on which the schedule has to be set for schedule based autoscale configuration.
        /// </summary>
        string ScheduleBasedConfigTimeZone { get; set; }
        /// <summary>The script action profile list.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IScriptActionProfile> ScriptActionProfile { get; set; }
        /// <summary>
        /// Name of the user Key Vault where all the cluster specific user secrets are stored.
        /// </summary>
        string SecretProfileKeyVaultResourceId { get; set; }
        /// <summary>Properties of Key Vault secret.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretReference> SecretProfileSecret { get; set; }
        /// <summary>The cluster secret profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISecretsProfile SecretsProfile { get; set; }
        /// <summary>The service configs profiles.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterServiceConfigsProfile> ServiceConfigsProfile { get; set; }
        /// <summary>The spark cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkProfile SparkProfile { get; set; }
        /// <summary>The default storage URL.</summary>
        string SparkProfileDefaultStorageUrl { get; set; }
        /// <summary>The metastore specification for Spark cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkMetastoreSpec SparkProfileMetastoreSpec { get; set; }
        /// <summary>Spark user plugins spec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugins SparkProfileUserPluginsSpec { get; set; }
        /// <summary>Spark user plugins.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISparkUserPlugin> SparkProfileUserPluginsSpecPlugin { get; set; }
        /// <summary>Ssh profile for the cluster.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ISshProfile SshProfile { get; set; }
        /// <summary>Number of ssh pods per cluster.</summary>
        int? SshProfileCount { get; set; }
        /// <summary>
        /// Prefix of the pod names. Pod number will be appended to the prefix. The ingress URLs for the pods will be available at
        /// <clusterFqdn>/<sshBasePath>/<prefix>-<number>
        /// </summary>
        string SshProfilePodPrefix { get; set; }
        /// <summary>
        /// Hive Catalog name used to mount external tables on the logs written by trino, if not specified there tables are not created.
        /// </summary>
        string StorageHivecatalogName { get; set; }
        /// <summary>
        /// Schema of the above catalog to use, to mount query logs as external tables, if not specified tables will be mounted under
        /// schema trinologs.
        /// </summary>
        string StorageHivecatalogSchema { get; set; }
        /// <summary>
        /// Retention period for query log table partitions, this doesn't have any affect on actual data.
        /// </summary>
        int? StoragePartitionRetentionInDay { get; set; }
        /// <summary>Azure storage location of the blobs.</summary>
        string StoragePath { get; set; }
        /// <summary>Storage key is only required for wasb(s) storage.</summary>
        string StorageStoragekey { get; set; }
        /// <summary>Storage account uri which is used for savepoint and checkpoint state.</summary>
        string StorageUri { get; set; }
        /// <summary>Stub cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IClusterProfileStubProfile StubProfile { get; set; }
        /// <summary>The required CPU.</summary>
        float? TaskManagerCpu { get; set; }
        /// <summary>The required memory in MB, Container memory will be 110 percentile</summary>
        long? TaskManagerMemory { get; set; }
        /// <summary>Trino Cluster profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoProfile TrinoProfile { get; set; }
        /// <summary>Trino cluster catalog options.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ICatalogOptions TrinoProfileCatalogOption { get; set; }
        /// <summary>hive catalog options.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.IHiveCatalogOption> TrinoProfileCatalogOptionsHive { get; set; }
        /// <summary>Trino Coordinator.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoCoordinator TrinoProfileCoordinator { get; set; }
        /// <summary>Trino user plugins spec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugins TrinoProfileUserPluginsSpec { get; set; }
        /// <summary>Trino user plugins.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserPlugin> TrinoProfileUserPluginsSpecPlugin { get; set; }
        /// <summary>User telemetry</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoUserTelemetry TrinoProfileUserTelemetrySpec { get; set; }
        /// <summary>Trino worker.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoWorker TrinoProfileWorker { get; set; }
        /// <summary>Trino user telemetry definition.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoTelemetryConfig UserTelemetrySpecStorage { get; set; }
        /// <summary>Web connectivity endpoint.</summary>
        string WebFqdn { get; set; }
        /// <summary>
        /// Private web connectivity endpoint. This property will only be returned when enableInternalIngress is true.
        /// </summary>
        string WebPrivateFqdn { get; set; }
        /// <summary>Trino debug configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.HdInsightOnAks.Models.ITrinoDebugConfig WorkerDebug { get; set; }
        /// <summary>The flag that if enable debug or not.</summary>
        bool? WorkerDebugEnable { get; set; }
        /// <summary>The debug port.</summary>
        int? WorkerDebugPort { get; set; }
        /// <summary>The flag that if suspend debug or not.</summary>
        bool? WorkerDebugSuspend { get; set; }

    }
}