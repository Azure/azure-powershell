// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Extensions;

    /// <summary>Network Interface model</summary>
    public partial class NetworkInterface :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterface,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal
    {

        /// <summary>Backing field for <see cref="DeviceKey" /> property.</summary>
        private int? _deviceKey;

        /// <summary>Gets or sets the device key value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public int? DeviceKey { get => this._deviceKey; set => this._deviceKey = value; }

        /// <summary>Backing field for <see cref="IPAddress" /> property.</summary>
        private System.Collections.Generic.List<string> _iPAddress;

        /// <summary>Gets or sets the nic ip addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> IPAddress { get => this._iPAddress; }

        /// <summary>Backing field for <see cref="IPSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettings _iPSetting;

        /// <summary>Gets or sets the ipsettings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettings IPSetting { get => (this._iPSetting = this._iPSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.NicIPSettings()); set => this._iPSetting = value; }

        /// <summary>Gets or sets the nic allocation method.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public string IPSettingAllocationMethod { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).AllocationMethod; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).AllocationMethod = value ?? null; }

        /// <summary>Gets or sets the dns servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> IPSettingDnsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).DnsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).DnsServer = value ?? null /* arrayOf */; }

        /// <summary>Gets or sets the gateway.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> IPSettingGateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).Gateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).Gateway = value ?? null /* arrayOf */; }

        /// <summary>Gets or sets the ip address for the nic.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public string IPSettingIpaddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).IPAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).IPAddress = value ?? null; }

        /// <summary>
        /// Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus
        /// IPV6 information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPAddressSettings> IPSettingIpaddressInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).IPAddressInfo; }

        /// <summary>Gets or sets the primary server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public string IPSettingPrimaryWinsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).PrimaryWinsServer; }

        /// <summary>Gets or sets the secondary server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public string IPSettingSecondaryWinsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).SecondaryWinsServer; }

        /// <summary>Gets or sets the mask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Inlined)]
        public string IPSettingSubnetMask { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).SubnetMask; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).SubnetMask = value ?? null; }

        /// <summary>Backing field for <see cref="Label" /> property.</summary>
        private string _label;

        /// <summary>
        /// Gets or sets the label of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string Label { get => this._label; }

        /// <summary>Backing field for <see cref="MacAddress" /> property.</summary>
        private string _macAddress;

        /// <summary>Gets or sets the NIC MAC address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string MacAddress { get => this._macAddress; }

        /// <summary>Internal Acessors for IPAddress</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.IPAddress { get => this._iPAddress; set { {_iPAddress = value;} } }

        /// <summary>Internal Acessors for IPSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettings Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.IPSetting { get => (this._iPSetting = this._iPSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.NicIPSettings()); set { {_iPSetting = value;} } }

        /// <summary>Internal Acessors for IPSettingIpaddressInfo</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPAddressSettings> Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.IPSettingIpaddressInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).IPAddressInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).IPAddressInfo = value; }

        /// <summary>Internal Acessors for IPSettingPrimaryWinsServer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.IPSettingPrimaryWinsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).PrimaryWinsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).PrimaryWinsServer = value; }

        /// <summary>Internal Acessors for IPSettingSecondaryWinsServer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.IPSettingSecondaryWinsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).SecondaryWinsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettingsInternal)IPSetting).SecondaryWinsServer = value; }

        /// <summary>Internal Acessors for Label</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.Label { get => this._label; set { {_label = value;} } }

        /// <summary>Internal Acessors for MacAddress</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.MacAddress { get => this._macAddress; set { {_macAddress = value;} } }

        /// <summary>Internal Acessors for NetworkMoName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.NetworkMoName { get => this._networkMoName; set { {_networkMoName = value;} } }

        /// <summary>Internal Acessors for NetworkMoRefId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INetworkInterfaceInternal.NetworkMoRefId { get => this._networkMoRefId; set { {_networkMoRefId = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Gets or sets the name of the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="NetworkId" /> property.</summary>
        private string _networkId;

        /// <summary>Gets or sets the ARM Id of the network resource to connect the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string NetworkId { get => this._networkId; set => this._networkId = value; }

        /// <summary>Backing field for <see cref="NetworkMoName" /> property.</summary>
        private string _networkMoName;

        /// <summary>
        /// Gets or sets the name of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string NetworkMoName { get => this._networkMoName; }

        /// <summary>Backing field for <see cref="NetworkMoRefId" /> property.</summary>
        private string _networkMoRefId;

        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
        /// that the nic is connected to.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string NetworkMoRefId { get => this._networkMoRefId; }

        /// <summary>Backing field for <see cref="NicType" /> property.</summary>
        private string _nicType;

        /// <summary>NIC type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string NicType { get => this._nicType; set => this._nicType = value; }

        /// <summary>Backing field for <see cref="PowerOnBoot" /> property.</summary>
        private string _powerOnBoot;

        /// <summary>Gets or sets the power on boot.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public string PowerOnBoot { get => this._powerOnBoot; set => this._powerOnBoot = value; }

        /// <summary>Creates an new <see cref="NetworkInterface" /> instance.</summary>
        public NetworkInterface()
        {

        }
    }
    /// Network Interface model
    public partial interface INetworkInterface :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.IJsonSerializable
    {
        /// <summary>Gets or sets the device key value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the device key value.",
        SerializedName = @"deviceKey",
        PossibleTypes = new [] { typeof(int) })]
        int? DeviceKey { get; set; }
        /// <summary>Gets or sets the nic ip addresses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the nic ip addresses.",
        SerializedName = @"ipAddresses",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IPAddress { get;  }
        /// <summary>Gets or sets the nic allocation method.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the nic allocation method.",
        SerializedName = @"allocationMethod",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PSArgumentCompleterAttribute("unset", "dynamic", "static", "linklayer", "random", "other")]
        string IPSettingAllocationMethod { get; set; }
        /// <summary>Gets or sets the dns servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the dns servers.",
        SerializedName = @"dnsServers",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IPSettingDnsServer { get; set; }
        /// <summary>Gets or sets the gateway.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the gateway.",
        SerializedName = @"gateway",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IPSettingGateway { get; set; }
        /// <summary>Gets or sets the ip address for the nic.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the ip address for the nic.",
        SerializedName = @"ipAddress",
        PossibleTypes = new [] { typeof(string) })]
        string IPSettingIpaddress { get; set; }
        /// <summary>
        /// Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus
        /// IPV6 information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus IPV6 information.",
        SerializedName = @"ipAddressInfo",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPAddressSettings) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPAddressSettings> IPSettingIpaddressInfo { get;  }
        /// <summary>Gets or sets the primary server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the primary server.",
        SerializedName = @"primaryWinsServer",
        PossibleTypes = new [] { typeof(string) })]
        string IPSettingPrimaryWinsServer { get;  }
        /// <summary>Gets or sets the secondary server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the secondary server.",
        SerializedName = @"secondaryWinsServer",
        PossibleTypes = new [] { typeof(string) })]
        string IPSettingSecondaryWinsServer { get;  }
        /// <summary>Gets or sets the mask.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the mask.",
        SerializedName = @"subnetMask",
        PossibleTypes = new [] { typeof(string) })]
        string IPSettingSubnetMask { get; set; }
        /// <summary>
        /// Gets or sets the label of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the label of the virtual network in vCenter that the nic is connected to.",
        SerializedName = @"label",
        PossibleTypes = new [] { typeof(string) })]
        string Label { get;  }
        /// <summary>Gets or sets the NIC MAC address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the NIC MAC address.",
        SerializedName = @"macAddress",
        PossibleTypes = new [] { typeof(string) })]
        string MacAddress { get;  }
        /// <summary>Gets or sets the name of the network interface.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the name of the network interface.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Gets or sets the ARM Id of the network resource to connect the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the ARM Id of the network resource to connect the virtual machine.",
        SerializedName = @"networkId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkId { get; set; }
        /// <summary>
        /// Gets or sets the name of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the name of the virtual network in vCenter that the nic is connected to.",
        SerializedName = @"networkMoName",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkMoName { get;  }
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
        /// that the nic is connected to.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
        that the nic is connected to.",
        SerializedName = @"networkMoRefId",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkMoRefId { get;  }
        /// <summary>NIC type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"NIC type",
        SerializedName = @"nicType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PSArgumentCompleterAttribute("vmxnet3", "vmxnet2", "vmxnet", "e1000", "e1000e", "pcnet32")]
        string NicType { get; set; }
        /// <summary>Gets or sets the power on boot.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the power on boot.",
        SerializedName = @"powerOnBoot",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PSArgumentCompleterAttribute("enabled", "disabled")]
        string PowerOnBoot { get; set; }

    }
    /// Network Interface model
    internal partial interface INetworkInterfaceInternal

    {
        /// <summary>Gets or sets the device key value.</summary>
        int? DeviceKey { get; set; }
        /// <summary>Gets or sets the nic ip addresses.</summary>
        System.Collections.Generic.List<string> IPAddress { get; set; }
        /// <summary>Gets or sets the ipsettings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPSettings IPSetting { get; set; }
        /// <summary>Gets or sets the nic allocation method.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PSArgumentCompleterAttribute("unset", "dynamic", "static", "linklayer", "random", "other")]
        string IPSettingAllocationMethod { get; set; }
        /// <summary>Gets or sets the dns servers.</summary>
        System.Collections.Generic.List<string> IPSettingDnsServer { get; set; }
        /// <summary>Gets or sets the gateway.</summary>
        System.Collections.Generic.List<string> IPSettingGateway { get; set; }
        /// <summary>Gets or sets the ip address for the nic.</summary>
        string IPSettingIpaddress { get; set; }
        /// <summary>
        /// Gets or sets the IP address information being reported for this NIC. This contains the same IPv4 information above plus
        /// IPV6 information.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.INicIPAddressSettings> IPSettingIpaddressInfo { get; set; }
        /// <summary>Gets or sets the primary server.</summary>
        string IPSettingPrimaryWinsServer { get; set; }
        /// <summary>Gets or sets the secondary server.</summary>
        string IPSettingSecondaryWinsServer { get; set; }
        /// <summary>Gets or sets the mask.</summary>
        string IPSettingSubnetMask { get; set; }
        /// <summary>
        /// Gets or sets the label of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        string Label { get; set; }
        /// <summary>Gets or sets the NIC MAC address.</summary>
        string MacAddress { get; set; }
        /// <summary>Gets or sets the name of the network interface.</summary>
        string Name { get; set; }
        /// <summary>Gets or sets the ARM Id of the network resource to connect the virtual machine.</summary>
        string NetworkId { get; set; }
        /// <summary>
        /// Gets or sets the name of the virtual network in vCenter that the nic is connected to.
        /// </summary>
        string NetworkMoName { get; set; }
        /// <summary>
        /// Gets or sets the vCenter MoRef (Managed Object Reference) ID of the virtual network
        /// that the nic is connected to.
        /// </summary>
        string NetworkMoRefId { get; set; }
        /// <summary>NIC type</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PSArgumentCompleterAttribute("vmxnet3", "vmxnet2", "vmxnet", "e1000", "e1000e", "pcnet32")]
        string NicType { get; set; }
        /// <summary>Gets or sets the power on boot.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PSArgumentCompleterAttribute("enabled", "disabled")]
        string PowerOnBoot { get; set; }

    }
}