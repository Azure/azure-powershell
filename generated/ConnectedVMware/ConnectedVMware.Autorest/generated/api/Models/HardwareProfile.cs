// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Extensions;

    /// <summary>Specifies the hardware settings for the virtual machine.</summary>
    public partial class HardwareProfile :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IHardwareProfile,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IHardwareProfileInternal
    {

        /// <summary>Backing field for <see cref="CpuHotAddEnabled" /> property.</summary>
        private bool? _cpuHotAddEnabled;

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public bool? CpuHotAddEnabled { get => this._cpuHotAddEnabled; }

        /// <summary>Backing field for <see cref="CpuHotRemoveEnabled" /> property.</summary>
        private bool? _cpuHotRemoveEnabled;

        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public bool? CpuHotRemoveEnabled { get => this._cpuHotRemoveEnabled; }

        /// <summary>Backing field for <see cref="MemoryHotAddEnabled" /> property.</summary>
        private bool? _memoryHotAddEnabled;

        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public bool? MemoryHotAddEnabled { get => this._memoryHotAddEnabled; }

        /// <summary>Backing field for <see cref="MemorySizeMb" /> property.</summary>
        private int? _memorySizeMb;

        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public int? MemorySizeMb { get => this._memorySizeMb; set => this._memorySizeMb = value; }

        /// <summary>Internal Acessors for CpuHotAddEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IHardwareProfileInternal.CpuHotAddEnabled { get => this._cpuHotAddEnabled; set { {_cpuHotAddEnabled = value;} } }

        /// <summary>Internal Acessors for CpuHotRemoveEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IHardwareProfileInternal.CpuHotRemoveEnabled { get => this._cpuHotRemoveEnabled; set { {_cpuHotRemoveEnabled = value;} } }

        /// <summary>Internal Acessors for MemoryHotAddEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IHardwareProfileInternal.MemoryHotAddEnabled { get => this._memoryHotAddEnabled; set { {_memoryHotAddEnabled = value;} } }

        /// <summary>Backing field for <see cref="NumCoresPerSocket" /> property.</summary>
        private int? _numCoresPerSocket;

        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public int? NumCoresPerSocket { get => this._numCoresPerSocket; set => this._numCoresPerSocket = value; }

        /// <summary>Backing field for <see cref="NumCpUs" /> property.</summary>
        private int? _numCpUs;

        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.PropertyOrigin.Owned)]
        public int? NumCpUs { get => this._numCpUs; set => this._numCpUs = value; }

        /// <summary>Creates an new <see cref="HardwareProfile" /> instance.</summary>
        public HardwareProfile()
        {

        }
    }
    /// Specifies the hardware settings for the virtual machine.
    public partial interface IHardwareProfile :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.",
        SerializedName = @"cpuHotAddEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CpuHotAddEnabled { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.",
        SerializedName = @"cpuHotRemoveEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CpuHotRemoveEnabled { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets a value indicating whether memory can be added while this virtual machine is running.",
        SerializedName = @"memoryHotAddEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MemoryHotAddEnabled { get;  }
        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets memory size in MBs for the vm.",
        SerializedName = @"memorySizeMB",
        PossibleTypes = new [] { typeof(int) })]
        int? MemorySizeMb { get; set; }
        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.",
        SerializedName = @"numCoresPerSocket",
        PossibleTypes = new [] { typeof(int) })]
        int? NumCoresPerSocket { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the number of vCPUs for the vm.",
        SerializedName = @"numCPUs",
        PossibleTypes = new [] { typeof(int) })]
        int? NumCpUs { get; set; }

    }
    /// Specifies the hardware settings for the virtual machine.
    internal partial interface IHardwareProfileInternal

    {
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be added while this virtual machine is running.
        /// </summary>
        bool? CpuHotAddEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether virtual processors can be removed while this virtual machine is running.
        /// </summary>
        bool? CpuHotRemoveEnabled { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether memory can be added while this virtual machine is running.
        /// </summary>
        bool? MemoryHotAddEnabled { get; set; }
        /// <summary>Gets or sets memory size in MBs for the vm.</summary>
        int? MemorySizeMb { get; set; }
        /// <summary>
        /// Gets or sets the number of cores per socket for the vm. Defaults to 1 if unspecified.
        /// </summary>
        int? NumCoresPerSocket { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        int? NumCpUs { get; set; }

    }
}