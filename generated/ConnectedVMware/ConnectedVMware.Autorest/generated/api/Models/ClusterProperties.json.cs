// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Extensions;

    /// <summary>Describes the properties of a Cluster.</summary>
    public partial class ClusterProperties
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject into a new instance of <see cref="ClusterProperties" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal ClusterProperties(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_uuid = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("uuid"), out var __jsonUuid) ? (string)__jsonUuid : (string)_uuid;}
            {_vCenterId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("vCenterId"), out var __jsonVCenterId) ? (string)__jsonVCenterId : (string)_vCenterId;}
            {_moRefId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("moRefId"), out var __jsonMoRefId) ? (string)__jsonMoRefId : (string)_moRefId;}
            {_inventoryItemId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("inventoryItemId"), out var __jsonInventoryItemId) ? (string)__jsonInventoryItemId : (string)_inventoryItemId;}
            {_moName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("moName"), out var __jsonMoName) ? (string)__jsonMoName : (string)_moName;}
            {_statuses = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonArray>("statuses"), out var __jsonStatuses) ? If( __jsonStatuses as Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonArray, out var __v) ? new global::System.Func<System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IResourceStatus>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__v, (__u)=>(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IResourceStatus) (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.ResourceStatus.FromJson(__u) )) ))() : null : _statuses;}
            {_customResourceName = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("customResourceName"), out var __jsonCustomResourceName) ? (string)__jsonCustomResourceName : (string)_customResourceName;}
            {_usedMemoryGb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("usedMemoryGB"), out var __jsonUsedMemoryGb) ? (long?)__jsonUsedMemoryGb : _usedMemoryGb;}
            {_totalMemoryGb = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("totalMemoryGB"), out var __jsonTotalMemoryGb) ? (long?)__jsonTotalMemoryGb : _totalMemoryGb;}
            {_usedCpuMHz = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("usedCpuMHz"), out var __jsonUsedCpuMHz) ? (long?)__jsonUsedCpuMHz : _usedCpuMHz;}
            {_totalCpuMHz = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber>("totalCpuMHz"), out var __jsonTotalCpuMHz) ? (long?)__jsonTotalCpuMHz : _totalCpuMHz;}
            {_datastoreId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonArray>("datastoreIds"), out var __jsonDatastoreIds) ? If( __jsonDatastoreIds as Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonArray, out var __q) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__q, (__p)=>(string) (__p is Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString __o ? (string)(__o.ToString()) : null)) ))() : null : _datastoreId;}
            {_networkId = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonArray>("networkIds"), out var __jsonNetworkIds) ? If( __jsonNetworkIds as Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonArray, out var __l) ? new global::System.Func<System.Collections.Generic.List<string>>(()=> global::System.Linq.Enumerable.ToList(global::System.Linq.Enumerable.Select(__l, (__k)=>(string) (__k is Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString __j ? (string)(__j.ToString()) : null)) ))() : null : _networkId;}
            {_provisioningState = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString>("provisioningState"), out var __jsonProvisioningState) ? (string)__jsonProvisioningState : (string)_provisioningState;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IClusterProperties.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IClusterProperties.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Models.IClusterProperties FromJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject json ? new ClusterProperties(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="ClusterProperties" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode" />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="ClusterProperties" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode" />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._uuid)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._uuid.ToString()) : null, "uuid" ,container.Add );
            }
            AddIf( null != (((object)this._vCenterId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._vCenterId.ToString()) : null, "vCenterId" ,container.Add );
            AddIf( null != (((object)this._moRefId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._moRefId.ToString()) : null, "moRefId" ,container.Add );
            AddIf( null != (((object)this._inventoryItemId)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._inventoryItemId.ToString()) : null, "inventoryItemId" ,container.Add );
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._moName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._moName.ToString()) : null, "moName" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._statuses)
                {
                    var __w = new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.XNodeArray();
                    foreach( var __x in this._statuses )
                    {
                        AddIf(__x?.ToJson(null, serializationMode) ,__w.Add);
                    }
                    container.Add("statuses",__w);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._customResourceName)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._customResourceName.ToString()) : null, "customResourceName" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._usedMemoryGb ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((long)this._usedMemoryGb) : null, "usedMemoryGB" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._totalMemoryGb ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((long)this._totalMemoryGb) : null, "totalMemoryGB" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._usedCpuMHz ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((long)this._usedCpuMHz) : null, "usedCpuMHz" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._totalCpuMHz ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNumber((long)this._totalCpuMHz) : null, "totalCpuMHz" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._datastoreId)
                {
                    var __r = new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.XNodeArray();
                    foreach( var __s in this._datastoreId )
                    {
                        AddIf(null != (((object)__s)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(__s.ToString()) : null ,__r.Add);
                    }
                    container.Add("datastoreIds",__r);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                if (null != this._networkId)
                {
                    var __m = new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.XNodeArray();
                    foreach( var __n in this._networkId )
                    {
                        AddIf(null != (((object)__n)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(__n.ToString()) : null ,__m.Add);
                    }
                    container.Add("networkIds",__m);
                }
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != (((object)this._provisioningState)?.ToString()) ? (Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.ConnectedVMware.Runtime.Json.JsonString(this._provisioningState.ToString()) : null, "provisioningState" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}