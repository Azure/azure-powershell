// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>Function App stack runtimes.</summary>
    public partial class FunctionAppRuntimes :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimes,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal
    {

        /// <summary>Backing field for <see cref="LinuxRuntimeSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings _linuxRuntimeSetting;

        /// <summary>Linux-specific settings associated with the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings LinuxRuntimeSetting { get => (this._linuxRuntimeSetting = this._linuxRuntimeSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.FunctionAppRuntimeSettings()); }

        /// <summary>Application settings associated with the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary LinuxRuntimeSettingAppSettingsDictionary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppSettingsDictionary; }

        /// <summary>End-of-life date for the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public global::System.DateTime? LinuxRuntimeSettingEndOfLifeDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).EndOfLifeDate; }

        /// <summary>
        /// <code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingIsAutoUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsAutoUpdate; }

        /// <summary>
        /// <code>true</code> if the minor version the default; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingIsDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsDefault; }

        /// <summary><code>true</code> if the stack is deprecated; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingIsDeprecated { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsDeprecated; }

        /// <summary>
        /// <code>true</code> if the minor version is early-access; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingIsEarlyAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsEarlyAccess; }

        /// <summary><code>true</code> if the stack should be hidden; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingIsHidden { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsHidden; }

        /// <summary><code>true</code> if the stack is in preview; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingIsPreview { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsPreview; }

        /// <summary>
        /// <code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingRemoteDebuggingSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).RemoteDebuggingSupported; }

        /// <summary>Function App stack minor version (runtime only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string LinuxRuntimeSettingRuntimeVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).RuntimeVersion; }

        /// <summary>List of supported Functions extension versions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] LinuxRuntimeSettingSupportedFunctionsExtensionVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SupportedFunctionsExtensionVersion; }

        /// <summary>
        /// <code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingsAppInsightsSettingsIsDefaultOff { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightSettingIsDefaultOff; }

        /// <summary>
        /// <code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingsAppInsightsSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightSettingIsSupported; }

        /// <summary>
        /// <code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingsGitHubActionSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSettingIsSupported; }

        /// <summary>The minor version that is supported for GitHub Actions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string LinuxRuntimeSettingsGitHubActionSettingsSupportedVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSettingSupportedVersion; }

        /// <summary>JavaVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryJavaVersion; }

        /// <summary>LinuxFxVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryLinuxFxVersion; }

        /// <summary>PowerShellVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryPowerShellVersion; }

        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? LinuxRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryUse32BitWorkerProcess; }

        /// <summary>Internal Acessors for LinuxRuntimeSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSetting { get => (this._linuxRuntimeSetting = this._linuxRuntimeSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.FunctionAppRuntimeSettings()); set { {_linuxRuntimeSetting = value;} } }

        /// <summary>Internal Acessors for LinuxRuntimeSettingAppInsightsSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppInsightsWebAppStackSettings Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingAppInsightsSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightsSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightsSetting = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingAppSettingsDictionary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingAppSettingsDictionary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppSettingsDictionary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppSettingsDictionary = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingEndOfLifeDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingEndOfLifeDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).EndOfLifeDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).EndOfLifeDate = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingGitHubActionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IGitHubActionWebAppStackSettings Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingGitHubActionSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSetting = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingIsAutoUpdate</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingIsAutoUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsAutoUpdate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsAutoUpdate = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingIsDefault</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingIsDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsDefault; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsDefault = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingIsDeprecated</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingIsDeprecated { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsDeprecated; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsDeprecated = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingIsEarlyAccess</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingIsEarlyAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsEarlyAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsEarlyAccess = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingIsHidden</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingIsHidden { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsHidden; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsHidden = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingIsPreview</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingIsPreview { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsPreview; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).IsPreview = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingRemoteDebuggingSupported</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingRemoteDebuggingSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).RemoteDebuggingSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).RemoteDebuggingSupported = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingRuntimeVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingRuntimeVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).RuntimeVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).RuntimeVersion = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingSiteConfigPropertiesDictionary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionary Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingSiteConfigPropertiesDictionary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertiesDictionary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertiesDictionary = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingSupportedFunctionsExtensionVersion</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingSupportedFunctionsExtensionVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SupportedFunctionsExtensionVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SupportedFunctionsExtensionVersion = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingsAppInsightsSettingsIsDefaultOff</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsAppInsightsSettingsIsDefaultOff { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightSettingIsDefaultOff; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightSettingIsDefaultOff = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingsAppInsightsSettingsIsSupported</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsAppInsightsSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightSettingIsSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).AppInsightSettingIsSupported = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingsGitHubActionSettingsIsSupported</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsGitHubActionSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSettingIsSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSettingIsSupported = value; }

        /// <summary>Internal Acessors for LinuxRuntimeSettingsGitHubActionSettingsSupportedVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsGitHubActionSettingsSupportedVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSettingSupportedVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).GitHubActionSettingSupportedVersion = value; }

        /// <summary>
        /// Internal Acessors for LinuxRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryJavaVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryJavaVersion = value; }

        /// <summary>
        /// Internal Acessors for LinuxRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryLinuxFxVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryLinuxFxVersion = value; }

        /// <summary>
        /// Internal Acessors for LinuxRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryPowerShellVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryPowerShellVersion = value; }

        /// <summary>
        /// Internal Acessors for LinuxRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess
        /// </summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.LinuxRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryUse32BitWorkerProcess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)LinuxRuntimeSetting).SiteConfigPropertyDictionaryUse32BitWorkerProcess = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingAppInsightsSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppInsightsWebAppStackSettings Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingAppInsightsSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightsSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightsSetting = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingAppSettingsDictionary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingAppSettingsDictionary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppSettingsDictionary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppSettingsDictionary = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingEndOfLifeDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingEndOfLifeDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).EndOfLifeDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).EndOfLifeDate = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingGitHubActionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IGitHubActionWebAppStackSettings Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingGitHubActionSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSetting = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingIsAutoUpdate</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingIsAutoUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsAutoUpdate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsAutoUpdate = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingIsDefault</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingIsDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsDefault; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsDefault = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingIsDeprecated</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingIsDeprecated { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsDeprecated; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsDeprecated = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingIsEarlyAccess</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingIsEarlyAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsEarlyAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsEarlyAccess = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingIsHidden</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingIsHidden { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsHidden; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsHidden = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingIsPreview</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingIsPreview { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsPreview; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsPreview = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingRemoteDebuggingSupported</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingRemoteDebuggingSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).RemoteDebuggingSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).RemoteDebuggingSupported = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingRuntimeVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingRuntimeVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).RuntimeVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).RuntimeVersion = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingSiteConfigPropertiesDictionary</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionary Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingSiteConfigPropertiesDictionary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertiesDictionary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertiesDictionary = value; }

        /// <summary>Internal Acessors for WindowRuntimeSettingSupportedFunctionsExtensionVersion</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowRuntimeSettingSupportedFunctionsExtensionVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SupportedFunctionsExtensionVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SupportedFunctionsExtensionVersion = value; }

        /// <summary>Internal Acessors for WindowsRuntimeSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSetting { get => (this._windowsRuntimeSetting = this._windowsRuntimeSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.FunctionAppRuntimeSettings()); set { {_windowsRuntimeSetting = value;} } }

        /// <summary>Internal Acessors for WindowsRuntimeSettingsAppInsightsSettingsIsDefaultOff</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsAppInsightsSettingsIsDefaultOff { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightSettingIsDefaultOff; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightSettingIsDefaultOff = value; }

        /// <summary>Internal Acessors for WindowsRuntimeSettingsAppInsightsSettingsIsSupported</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsAppInsightsSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightSettingIsSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightSettingIsSupported = value; }

        /// <summary>Internal Acessors for WindowsRuntimeSettingsGitHubActionSettingsIsSupported</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsGitHubActionSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSettingIsSupported; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSettingIsSupported = value; }

        /// <summary>
        /// Internal Acessors for WindowsRuntimeSettingsGitHubActionSettingsSupportedVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsGitHubActionSettingsSupportedVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSettingSupportedVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSettingSupportedVersion = value; }

        /// <summary>
        /// Internal Acessors for WindowsRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryJavaVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryJavaVersion = value; }

        /// <summary>
        /// Internal Acessors for WindowsRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryLinuxFxVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryLinuxFxVersion = value; }

        /// <summary>
        /// Internal Acessors for WindowsRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryPowerShellVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryPowerShellVersion = value; }

        /// <summary>
        /// Internal Acessors for WindowsRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess
        /// </summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimesInternal.WindowsRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryUse32BitWorkerProcess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryUse32BitWorkerProcess = value; }

        /// <summary>Application settings associated with the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary WindowRuntimeSettingAppSettingsDictionary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppSettingsDictionary; }

        /// <summary>End-of-life date for the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public global::System.DateTime? WindowRuntimeSettingEndOfLifeDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).EndOfLifeDate; }

        /// <summary>
        /// <code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingIsAutoUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsAutoUpdate; }

        /// <summary>
        /// <code>true</code> if the minor version the default; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingIsDefault { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsDefault; }

        /// <summary><code>true</code> if the stack is deprecated; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingIsDeprecated { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsDeprecated; }

        /// <summary>
        /// <code>true</code> if the minor version is early-access; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingIsEarlyAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsEarlyAccess; }

        /// <summary><code>true</code> if the stack should be hidden; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingIsHidden { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsHidden; }

        /// <summary><code>true</code> if the stack is in preview; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingIsPreview { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).IsPreview; }

        /// <summary>
        /// <code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowRuntimeSettingRemoteDebuggingSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).RemoteDebuggingSupported; }

        /// <summary>Function App stack minor version (runtime only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string WindowRuntimeSettingRuntimeVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).RuntimeVersion; }

        /// <summary>List of supported Functions extension versions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string[] WindowRuntimeSettingSupportedFunctionsExtensionVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SupportedFunctionsExtensionVersion; }

        /// <summary>Backing field for <see cref="WindowsRuntimeSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings _windowsRuntimeSetting;

        /// <summary>Windows-specific settings associated with the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings WindowsRuntimeSetting { get => (this._windowsRuntimeSetting = this._windowsRuntimeSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.FunctionAppRuntimeSettings()); }

        /// <summary>
        /// <code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowsRuntimeSettingsAppInsightsSettingsIsDefaultOff { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightSettingIsDefaultOff; }

        /// <summary>
        /// <code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowsRuntimeSettingsAppInsightsSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).AppInsightSettingIsSupported; }

        /// <summary>
        /// <code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowsRuntimeSettingsGitHubActionSettingsIsSupported { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSettingIsSupported; }

        /// <summary>The minor version that is supported for GitHub Actions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string WindowsRuntimeSettingsGitHubActionSettingsSupportedVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).GitHubActionSettingSupportedVersion; }

        /// <summary>JavaVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryJavaVersion; }

        /// <summary>LinuxFxVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryLinuxFxVersion; }

        /// <summary>PowerShellVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryPowerShellVersion; }

        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? WindowsRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsInternal)WindowsRuntimeSetting).SiteConfigPropertyDictionaryUse32BitWorkerProcess; }

        /// <summary>Creates an new <see cref="FunctionAppRuntimes" /> instance.</summary>
        public FunctionAppRuntimes()
        {

        }
    }
    /// Function App stack runtimes.
    public partial interface IFunctionAppRuntimes :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable
    {
        /// <summary>Application settings associated with the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Application settings associated with the minor version.",
        SerializedName = @"appSettingsDictionary",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary LinuxRuntimeSettingAppSettingsDictionary { get;  }
        /// <summary>End-of-life date for the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End-of-life date for the minor version.",
        SerializedName = @"endOfLifeDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LinuxRuntimeSettingEndOfLifeDate { get;  }
        /// <summary>
        /// <code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.",
        SerializedName = @"isAutoUpdate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingIsAutoUpdate { get;  }
        /// <summary>
        /// <code>true</code> if the minor version the default; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the minor version the default; otherwise, <code>false</code>.",
        SerializedName = @"isDefault",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingIsDefault { get;  }
        /// <summary><code>true</code> if the stack is deprecated; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack is deprecated; otherwise, <code>false</code>.",
        SerializedName = @"isDeprecated",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingIsDeprecated { get;  }
        /// <summary>
        /// <code>true</code> if the minor version is early-access; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the minor version is early-access; otherwise, <code>false</code>.",
        SerializedName = @"isEarlyAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingIsEarlyAccess { get;  }
        /// <summary><code>true</code> if the stack should be hidden; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack should be hidden; otherwise, <code>false</code>.",
        SerializedName = @"isHidden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingIsHidden { get;  }
        /// <summary><code>true</code> if the stack is in preview; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack is in preview; otherwise, <code>false</code>.",
        SerializedName = @"isPreview",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingIsPreview { get;  }
        /// <summary>
        /// <code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.",
        SerializedName = @"remoteDebuggingSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingRemoteDebuggingSupported { get;  }
        /// <summary>Function App stack minor version (runtime only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Function App stack minor version (runtime only).",
        SerializedName = @"runtimeVersion",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxRuntimeSettingRuntimeVersion { get;  }
        /// <summary>List of supported Functions extension versions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of supported Functions extension versions.",
        SerializedName = @"supportedFunctionsExtensionVersions",
        PossibleTypes = new [] { typeof(string) })]
        string[] LinuxRuntimeSettingSupportedFunctionsExtensionVersion { get;  }
        /// <summary>
        /// <code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.",
        SerializedName = @"isDefaultOff",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingsAppInsightsSettingsIsDefaultOff { get;  }
        /// <summary>
        /// <code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.",
        SerializedName = @"isSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingsAppInsightsSettingsIsSupported { get;  }
        /// <summary>
        /// <code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.",
        SerializedName = @"isSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingsGitHubActionSettingsIsSupported { get;  }
        /// <summary>The minor version that is supported for GitHub Actions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minor version that is supported for GitHub Actions.",
        SerializedName = @"supportedVersion",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxRuntimeSettingsGitHubActionSettingsSupportedVersion { get;  }
        /// <summary>JavaVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"JavaVersion configuration setting.",
        SerializedName = @"javaVersion",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get;  }
        /// <summary>LinuxFxVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"LinuxFxVersion configuration setting.",
        SerializedName = @"linuxFxVersion",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get;  }
        /// <summary>PowerShellVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"PowerShellVersion configuration setting.",
        SerializedName = @"powerShellVersion",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get;  }
        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.",
        SerializedName = @"use32BitWorkerProcess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? LinuxRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get;  }
        /// <summary>Application settings associated with the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Application settings associated with the minor version.",
        SerializedName = @"appSettingsDictionary",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary WindowRuntimeSettingAppSettingsDictionary { get;  }
        /// <summary>End-of-life date for the minor version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End-of-life date for the minor version.",
        SerializedName = @"endOfLifeDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? WindowRuntimeSettingEndOfLifeDate { get;  }
        /// <summary>
        /// <code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.",
        SerializedName = @"isAutoUpdate",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingIsAutoUpdate { get;  }
        /// <summary>
        /// <code>true</code> if the minor version the default; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the minor version the default; otherwise, <code>false</code>.",
        SerializedName = @"isDefault",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingIsDefault { get;  }
        /// <summary><code>true</code> if the stack is deprecated; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack is deprecated; otherwise, <code>false</code>.",
        SerializedName = @"isDeprecated",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingIsDeprecated { get;  }
        /// <summary>
        /// <code>true</code> if the minor version is early-access; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the minor version is early-access; otherwise, <code>false</code>.",
        SerializedName = @"isEarlyAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingIsEarlyAccess { get;  }
        /// <summary><code>true</code> if the stack should be hidden; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack should be hidden; otherwise, <code>false</code>.",
        SerializedName = @"isHidden",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingIsHidden { get;  }
        /// <summary><code>true</code> if the stack is in preview; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if the stack is in preview; otherwise, <code>false</code>.",
        SerializedName = @"isPreview",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingIsPreview { get;  }
        /// <summary>
        /// <code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.",
        SerializedName = @"remoteDebuggingSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowRuntimeSettingRemoteDebuggingSupported { get;  }
        /// <summary>Function App stack minor version (runtime only).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Function App stack minor version (runtime only).",
        SerializedName = @"runtimeVersion",
        PossibleTypes = new [] { typeof(string) })]
        string WindowRuntimeSettingRuntimeVersion { get;  }
        /// <summary>List of supported Functions extension versions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"List of supported Functions extension versions.",
        SerializedName = @"supportedFunctionsExtensionVersions",
        PossibleTypes = new [] { typeof(string) })]
        string[] WindowRuntimeSettingSupportedFunctionsExtensionVersion { get;  }
        /// <summary>
        /// <code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.",
        SerializedName = @"isDefaultOff",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowsRuntimeSettingsAppInsightsSettingsIsDefaultOff { get;  }
        /// <summary>
        /// <code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.",
        SerializedName = @"isSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowsRuntimeSettingsAppInsightsSettingsIsSupported { get;  }
        /// <summary>
        /// <code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.",
        SerializedName = @"isSupported",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowsRuntimeSettingsGitHubActionSettingsIsSupported { get;  }
        /// <summary>The minor version that is supported for GitHub Actions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The minor version that is supported for GitHub Actions.",
        SerializedName = @"supportedVersion",
        PossibleTypes = new [] { typeof(string) })]
        string WindowsRuntimeSettingsGitHubActionSettingsSupportedVersion { get;  }
        /// <summary>JavaVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"JavaVersion configuration setting.",
        SerializedName = @"javaVersion",
        PossibleTypes = new [] { typeof(string) })]
        string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get;  }
        /// <summary>LinuxFxVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"LinuxFxVersion configuration setting.",
        SerializedName = @"linuxFxVersion",
        PossibleTypes = new [] { typeof(string) })]
        string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get;  }
        /// <summary>PowerShellVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"PowerShellVersion configuration setting.",
        SerializedName = @"powerShellVersion",
        PossibleTypes = new [] { typeof(string) })]
        string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get;  }
        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.",
        SerializedName = @"use32BitWorkerProcess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowsRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get;  }

    }
    /// Function App stack runtimes.
    internal partial interface IFunctionAppRuntimesInternal

    {
        /// <summary>Linux-specific settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings LinuxRuntimeSetting { get; set; }
        /// <summary>Application Insights settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppInsightsWebAppStackSettings LinuxRuntimeSettingAppInsightsSetting { get; set; }
        /// <summary>Application settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary LinuxRuntimeSettingAppSettingsDictionary { get; set; }
        /// <summary>End-of-life date for the minor version.</summary>
        global::System.DateTime? LinuxRuntimeSettingEndOfLifeDate { get; set; }
        /// <summary>GitHub Actions settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IGitHubActionWebAppStackSettings LinuxRuntimeSettingGitHubActionSetting { get; set; }
        /// <summary>
        /// <code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingIsAutoUpdate { get; set; }
        /// <summary>
        /// <code>true</code> if the minor version the default; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingIsDefault { get; set; }
        /// <summary><code>true</code> if the stack is deprecated; otherwise, <code>false</code>.</summary>
        bool? LinuxRuntimeSettingIsDeprecated { get; set; }
        /// <summary>
        /// <code>true</code> if the minor version is early-access; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingIsEarlyAccess { get; set; }
        /// <summary><code>true</code> if the stack should be hidden; otherwise, <code>false</code>.</summary>
        bool? LinuxRuntimeSettingIsHidden { get; set; }
        /// <summary><code>true</code> if the stack is in preview; otherwise, <code>false</code>.</summary>
        bool? LinuxRuntimeSettingIsPreview { get; set; }
        /// <summary>
        /// <code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingRemoteDebuggingSupported { get; set; }
        /// <summary>Function App stack minor version (runtime only).</summary>
        string LinuxRuntimeSettingRuntimeVersion { get; set; }
        /// <summary>Configuration settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionary LinuxRuntimeSettingSiteConfigPropertiesDictionary { get; set; }
        /// <summary>List of supported Functions extension versions.</summary>
        string[] LinuxRuntimeSettingSupportedFunctionsExtensionVersion { get; set; }
        /// <summary>
        /// <code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingsAppInsightsSettingsIsDefaultOff { get; set; }
        /// <summary>
        /// <code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingsAppInsightsSettingsIsSupported { get; set; }
        /// <summary>
        /// <code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingsGitHubActionSettingsIsSupported { get; set; }
        /// <summary>The minor version that is supported for GitHub Actions.</summary>
        string LinuxRuntimeSettingsGitHubActionSettingsSupportedVersion { get; set; }
        /// <summary>JavaVersion configuration setting.</summary>
        string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get; set; }
        /// <summary>LinuxFxVersion configuration setting.</summary>
        string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get; set; }
        /// <summary>PowerShellVersion configuration setting.</summary>
        string LinuxRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get; set; }
        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? LinuxRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get; set; }
        /// <summary>Application Insights settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IAppInsightsWebAppStackSettings WindowRuntimeSettingAppInsightsSetting { get; set; }
        /// <summary>Application settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettingsAppSettingsDictionary WindowRuntimeSettingAppSettingsDictionary { get; set; }
        /// <summary>End-of-life date for the minor version.</summary>
        global::System.DateTime? WindowRuntimeSettingEndOfLifeDate { get; set; }
        /// <summary>GitHub Actions settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IGitHubActionWebAppStackSettings WindowRuntimeSettingGitHubActionSetting { get; set; }
        /// <summary>
        /// <code>true</code> if the stack version is auto-updated; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowRuntimeSettingIsAutoUpdate { get; set; }
        /// <summary>
        /// <code>true</code> if the minor version the default; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowRuntimeSettingIsDefault { get; set; }
        /// <summary><code>true</code> if the stack is deprecated; otherwise, <code>false</code>.</summary>
        bool? WindowRuntimeSettingIsDeprecated { get; set; }
        /// <summary>
        /// <code>true</code> if the minor version is early-access; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowRuntimeSettingIsEarlyAccess { get; set; }
        /// <summary><code>true</code> if the stack should be hidden; otherwise, <code>false</code>.</summary>
        bool? WindowRuntimeSettingIsHidden { get; set; }
        /// <summary><code>true</code> if the stack is in preview; otherwise, <code>false</code>.</summary>
        bool? WindowRuntimeSettingIsPreview { get; set; }
        /// <summary>
        /// <code>true</code> if remote debugging is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowRuntimeSettingRemoteDebuggingSupported { get; set; }
        /// <summary>Function App stack minor version (runtime only).</summary>
        string WindowRuntimeSettingRuntimeVersion { get; set; }
        /// <summary>Configuration settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionary WindowRuntimeSettingSiteConfigPropertiesDictionary { get; set; }
        /// <summary>List of supported Functions extension versions.</summary>
        string[] WindowRuntimeSettingSupportedFunctionsExtensionVersion { get; set; }
        /// <summary>Windows-specific settings associated with the minor version.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IFunctionAppRuntimeSettings WindowsRuntimeSetting { get; set; }
        /// <summary>
        /// <code>true</code> if Application Insights is disabled by default for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowsRuntimeSettingsAppInsightsSettingsIsDefaultOff { get; set; }
        /// <summary>
        /// <code>true</code> if remote Application Insights is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowsRuntimeSettingsAppInsightsSettingsIsSupported { get; set; }
        /// <summary>
        /// <code>true</code> if GitHub Actions is supported for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowsRuntimeSettingsGitHubActionSettingsIsSupported { get; set; }
        /// <summary>The minor version that is supported for GitHub Actions.</summary>
        string WindowsRuntimeSettingsGitHubActionSettingsSupportedVersion { get; set; }
        /// <summary>JavaVersion configuration setting.</summary>
        string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryJavaVersion { get; set; }
        /// <summary>LinuxFxVersion configuration setting.</summary>
        string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryLinuxFxVersion { get; set; }
        /// <summary>PowerShellVersion configuration setting.</summary>
        string WindowsRuntimeSettingsSiteConfigPropertiesDictionaryPowerShellVersion { get; set; }
        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? WindowsRuntimeSettingsSiteConfigPropertiesDictionaryUse32BitWorkerProcess { get; set; }

    }
}