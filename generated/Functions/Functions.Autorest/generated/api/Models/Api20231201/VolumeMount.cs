// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    public partial class VolumeMount :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVolumeMount,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVolumeMountInternal
    {

        /// <summary>Backing field for <see cref="ContainerMountPath" /> property.</summary>
        private string _containerMountPath;

        /// <summary>Target path on the container where volume is mounted on</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string ContainerMountPath { get => this._containerMountPath; set => this._containerMountPath = value; }

        /// <summary>Backing field for <see cref="Data" /> property.</summary>
        private string _data;

        /// <summary>Config Data to be mounted on the volume</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string Data { get => this._data; set => this._data = value; }

        /// <summary>Backing field for <see cref="ReadOnly" /> property.</summary>
        private bool? _readOnly;

        /// <summary>Boolean to specify if the mount is read only on the container</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public bool? ReadOnly { get => this._readOnly; set => this._readOnly = value; }

        /// <summary>Backing field for <see cref="VolumeSubPath" /> property.</summary>
        private string _volumeSubPath;

        /// <summary>Sub path in the volume where volume is mounted from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string VolumeSubPath { get => this._volumeSubPath; set => this._volumeSubPath = value; }

        /// <summary>Creates an new <see cref="VolumeMount" /> instance.</summary>
        public VolumeMount()
        {

        }
    }
    public partial interface IVolumeMount :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable
    {
        /// <summary>Target path on the container where volume is mounted on</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Target path on the container where volume is mounted on",
        SerializedName = @"containerMountPath",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerMountPath { get; set; }
        /// <summary>Config Data to be mounted on the volume</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Config Data to be mounted on the volume",
        SerializedName = @"data",
        PossibleTypes = new [] { typeof(string) })]
        string Data { get; set; }
        /// <summary>Boolean to specify if the mount is read only on the container</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Boolean to specify if the mount is read only on the container",
        SerializedName = @"readOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ReadOnly { get; set; }
        /// <summary>Sub path in the volume where volume is mounted from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Sub path in the volume where volume is mounted from.",
        SerializedName = @"volumeSubPath",
        PossibleTypes = new [] { typeof(string) })]
        string VolumeSubPath { get; set; }

    }
    internal partial interface IVolumeMountInternal

    {
        /// <summary>Target path on the container where volume is mounted on</summary>
        string ContainerMountPath { get; set; }
        /// <summary>Config Data to be mounted on the volume</summary>
        string Data { get; set; }
        /// <summary>Boolean to specify if the mount is read only on the container</summary>
        bool? ReadOnly { get; set; }
        /// <summary>Sub path in the volume where volume is mounted from.</summary>
        string VolumeSubPath { get; set; }

    }
}