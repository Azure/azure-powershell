// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>Container of a site</summary>
    public partial class SiteContainer :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainer,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource __proxyOnlyResource = new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ProxyOnlyResource();

        /// <summary>Auth Type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AuthType? AuthType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).AuthType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).AuthType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AuthType)""); }

        /// <summary>Created Time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreatedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).CreatedTime; }

        /// <summary>List of environment variables</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IEnvironmentVariable[] EnvironmentVariable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).EnvironmentVariable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).EnvironmentVariable = value ?? null /* arrayOf */; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; }

        /// <summary>Image Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string Image { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).Image; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).Image = value ?? null; }

        /// <summary>
        /// <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public bool? IsMain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).IsMain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).IsMain = value ?? default(bool); }

        /// <summary>Kind of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Kind = value ?? null; }

        /// <summary>Last Modified Time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).LastModifiedTime; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type = value; }

        /// <summary>Internal Acessors for CreatedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerInternal.CreatedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).CreatedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).CreatedTime = value; }

        /// <summary>Internal Acessors for LastModifiedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerInternal.LastModifiedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).LastModifiedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).LastModifiedTime = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerProperties Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.SiteContainerProperties()); set { {_property = value;} } }

        /// <summary>Resource Name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Name; }

        /// <summary>Password Secret</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string PasswordSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).PasswordSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).PasswordSecret = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerProperties _property;

        /// <summary>SiteContainer resource specific properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.SiteContainerProperties()); set => this._property = value; }

        /// <summary>StartUp Command</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string StartUpCommand { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).StartUpCommand; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).StartUpCommand = value ?? null; }

        /// <summary>Target Port</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string TargetPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).TargetPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).TargetPort = value ?? null; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal)__proxyOnlyResource).Type; }

        /// <summary>UserManagedIdentity ClientId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string UserManagedIdentityClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).UserManagedIdentityClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).UserManagedIdentityClientId = value ?? null; }

        /// <summary>User Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public string UserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).UserName = value ?? null; }

        /// <summary>List of volume mounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVolumeMount[] VolumeMount { get => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).VolumeMount; set => ((Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerPropertiesInternal)Property).VolumeMount = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="SiteContainer" /> instance.</summary>
        public SiteContainer()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyOnlyResource), __proxyOnlyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyOnlyResource), __proxyOnlyResource);
        }
    }
    /// Container of a site
    public partial interface ISiteContainer :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResource
    {
        /// <summary>Auth Type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Auth Type",
        SerializedName = @"authType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AuthType) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AuthType? AuthType { get; set; }
        /// <summary>Created Time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Created Time",
        SerializedName = @"createdTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreatedTime { get;  }
        /// <summary>List of environment variables</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of environment variables",
        SerializedName = @"environmentVariables",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IEnvironmentVariable) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IEnvironmentVariable[] EnvironmentVariable { get; set; }
        /// <summary>Image Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Image Name",
        SerializedName = @"image",
        PossibleTypes = new [] { typeof(string) })]
        string Image { get; set; }
        /// <summary>
        /// <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if the container is the main site container; <code>false</code> otherwise.",
        SerializedName = @"isMain",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsMain { get; set; }
        /// <summary>Last Modified Time</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last Modified Time",
        SerializedName = @"lastModifiedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastModifiedTime { get;  }
        /// <summary>Password Secret</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password Secret",
        SerializedName = @"passwordSecret",
        PossibleTypes = new [] { typeof(string) })]
        string PasswordSecret { get; set; }
        /// <summary>StartUp Command</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"StartUp Command",
        SerializedName = @"startUpCommand",
        PossibleTypes = new [] { typeof(string) })]
        string StartUpCommand { get; set; }
        /// <summary>Target Port</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Target Port",
        SerializedName = @"targetPort",
        PossibleTypes = new [] { typeof(string) })]
        string TargetPort { get; set; }
        /// <summary>UserManagedIdentity ClientId</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"UserManagedIdentity ClientId",
        SerializedName = @"userManagedIdentityClientId",
        PossibleTypes = new [] { typeof(string) })]
        string UserManagedIdentityClientId { get; set; }
        /// <summary>User Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User Name",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string UserName { get; set; }
        /// <summary>List of volume mounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of volume mounts",
        SerializedName = @"volumeMounts",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVolumeMount) })]
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVolumeMount[] VolumeMount { get; set; }

    }
    /// Container of a site
    internal partial interface ISiteContainerInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IProxyOnlyResourceInternal
    {
        /// <summary>Auth Type</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.AuthType? AuthType { get; set; }
        /// <summary>Created Time</summary>
        global::System.DateTime? CreatedTime { get; set; }
        /// <summary>List of environment variables</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IEnvironmentVariable[] EnvironmentVariable { get; set; }
        /// <summary>Image Name</summary>
        string Image { get; set; }
        /// <summary>
        /// <code>true</code> if the container is the main site container; <code>false</code> otherwise.
        /// </summary>
        bool? IsMain { get; set; }
        /// <summary>Last Modified Time</summary>
        global::System.DateTime? LastModifiedTime { get; set; }
        /// <summary>Password Secret</summary>
        string PasswordSecret { get; set; }
        /// <summary>SiteContainer resource specific properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteContainerProperties Property { get; set; }
        /// <summary>StartUp Command</summary>
        string StartUpCommand { get; set; }
        /// <summary>Target Port</summary>
        string TargetPort { get; set; }
        /// <summary>UserManagedIdentity ClientId</summary>
        string UserManagedIdentityClientId { get; set; }
        /// <summary>User Name</summary>
        string UserName { get; set; }
        /// <summary>List of volume mounts</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.IVolumeMount[] VolumeMount { get; set; }

    }
}