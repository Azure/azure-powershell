// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Extensions;

    /// <summary>Site config properties dictionary.</summary>
    public partial class SiteConfigPropertiesDictionary :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionary,
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionaryInternal
    {

        /// <summary>Backing field for <see cref="JavaVersion" /> property.</summary>
        private string _javaVersion;

        /// <summary>JavaVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string JavaVersion { get => this._javaVersion; }

        /// <summary>Backing field for <see cref="LinuxFxVersion" /> property.</summary>
        private string _linuxFxVersion;

        /// <summary>LinuxFxVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string LinuxFxVersion { get => this._linuxFxVersion; }

        /// <summary>Internal Acessors for JavaVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionaryInternal.JavaVersion { get => this._javaVersion; set { {_javaVersion = value;} } }

        /// <summary>Internal Acessors for LinuxFxVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionaryInternal.LinuxFxVersion { get => this._linuxFxVersion; set { {_linuxFxVersion = value;} } }

        /// <summary>Internal Acessors for PowerShellVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionaryInternal.PowerShellVersion { get => this._powerShellVersion; set { {_powerShellVersion = value;} } }

        /// <summary>Internal Acessors for Use32BitWorkerProcess</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Functions.Models.Api20231201.ISiteConfigPropertiesDictionaryInternal.Use32BitWorkerProcess { get => this._use32BitWorkerProcess; set { {_use32BitWorkerProcess = value;} } }

        /// <summary>Backing field for <see cref="PowerShellVersion" /> property.</summary>
        private string _powerShellVersion;

        /// <summary>PowerShellVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public string PowerShellVersion { get => this._powerShellVersion; }

        /// <summary>Backing field for <see cref="Use32BitWorkerProcess" /> property.</summary>
        private bool? _use32BitWorkerProcess;

        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Origin(Microsoft.Azure.PowerShell.Cmdlets.Functions.PropertyOrigin.Owned)]
        public bool? Use32BitWorkerProcess { get => this._use32BitWorkerProcess; }

        /// <summary>Creates an new <see cref="SiteConfigPropertiesDictionary" /> instance.</summary>
        public SiteConfigPropertiesDictionary()
        {

        }
    }
    /// Site config properties dictionary.
    public partial interface ISiteConfigPropertiesDictionary :
        Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.IJsonSerializable
    {
        /// <summary>JavaVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"JavaVersion configuration setting.",
        SerializedName = @"javaVersion",
        PossibleTypes = new [] { typeof(string) })]
        string JavaVersion { get;  }
        /// <summary>LinuxFxVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"LinuxFxVersion configuration setting.",
        SerializedName = @"linuxFxVersion",
        PossibleTypes = new [] { typeof(string) })]
        string LinuxFxVersion { get;  }
        /// <summary>PowerShellVersion configuration setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"PowerShellVersion configuration setting.",
        SerializedName = @"powerShellVersion",
        PossibleTypes = new [] { typeof(string) })]
        string PowerShellVersion { get;  }
        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Functions.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.",
        SerializedName = @"use32BitWorkerProcess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Use32BitWorkerProcess { get;  }

    }
    /// Site config properties dictionary.
    internal partial interface ISiteConfigPropertiesDictionaryInternal

    {
        /// <summary>JavaVersion configuration setting.</summary>
        string JavaVersion { get; set; }
        /// <summary>LinuxFxVersion configuration setting.</summary>
        string LinuxFxVersion { get; set; }
        /// <summary>PowerShellVersion configuration setting.</summary>
        string PowerShellVersion { get; set; }
        /// <summary>
        /// <code>true</code> if use32BitWorkerProcess should be set to true for the stack; otherwise, <code>false</code>.
        /// </summary>
        bool? Use32BitWorkerProcess { get; set; }

    }
}