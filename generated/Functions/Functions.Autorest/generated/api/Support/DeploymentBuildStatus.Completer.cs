// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Functions.Support
{

    /// <summary>Deployment build status.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Functions.Support.DeploymentBuildStatusTypeConverter))]
    public partial struct DeploymentBuildStatus :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "TimedOut".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'TimedOut'", "TimedOut", global::System.Management.Automation.CompletionResultType.ParameterValue, "TimedOut");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RuntimeFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RuntimeFailed'", "RuntimeFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "RuntimeFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BuildAborted".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BuildAborted'", "BuildAborted", global::System.Management.Automation.CompletionResultType.ParameterValue, "BuildAborted");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BuildFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BuildFailed'", "BuildFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "BuildFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BuildRequestReceived".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BuildRequestReceived'", "BuildRequestReceived", global::System.Management.Automation.CompletionResultType.ParameterValue, "BuildRequestReceived");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BuildPending".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BuildPending'", "BuildPending", global::System.Management.Automation.CompletionResultType.ParameterValue, "BuildPending");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BuildInProgress".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BuildInProgress'", "BuildInProgress", global::System.Management.Automation.CompletionResultType.ParameterValue, "BuildInProgress");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "BuildSuccessful".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'BuildSuccessful'", "BuildSuccessful", global::System.Management.Automation.CompletionResultType.ParameterValue, "BuildSuccessful");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PostBuildRestartRequired".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PostBuildRestartRequired'", "PostBuildRestartRequired", global::System.Management.Automation.CompletionResultType.ParameterValue, "PostBuildRestartRequired");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StartPolling".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StartPolling'", "StartPolling", global::System.Management.Automation.CompletionResultType.ParameterValue, "StartPolling");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "StartPollingWithRestart".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'StartPollingWithRestart'", "StartPollingWithRestart", global::System.Management.Automation.CompletionResultType.ParameterValue, "StartPollingWithRestart");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RuntimeStarting".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RuntimeStarting'", "RuntimeStarting", global::System.Management.Automation.CompletionResultType.ParameterValue, "RuntimeStarting");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RuntimeSuccessful".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RuntimeSuccessful'", "RuntimeSuccessful", global::System.Management.Automation.CompletionResultType.ParameterValue, "RuntimeSuccessful");
            }
        }
    }
}