// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Database Migration Resource properties for CosmosDb for Mongo.</summary>
    public partial class DatabaseMigrationPropertiesCosmosDbMongo :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationPropertiesCosmosDbMongo,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationPropertiesCosmosDbMongoInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBaseProperties"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBaseProperties __databaseMigrationBaseProperties = new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.DatabaseMigrationBaseProperties();

        /// <summary>Backing field for <see cref="CollectionList" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoMigrationCollection[] _collectionList;

        /// <summary>List of Mongo Collections to be migrated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoMigrationCollection[] CollectionList { get => this._collectionList; set => this._collectionList = value; }

        /// <summary>Database migration end time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public global::System.DateTime? EndedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).EndedOn; }

        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ResourceType Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).Kind = value ; }

        /// <summary>Internal Acessors for EndedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.EndedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).EndedOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).EndedOn = value; }

        /// <summary>Internal Acessors for MigrationFailureError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IErrorInfo Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.MigrationFailureError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureError; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureError = value; }

        /// <summary>Internal Acessors for MigrationFailureErrorCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.MigrationFailureErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureErrorCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureErrorCode = value; }

        /// <summary>Internal Acessors for MigrationFailureErrorMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.MigrationFailureErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureErrorMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureErrorMessage = value; }

        /// <summary>Internal Acessors for MigrationStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.MigrationStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationStatus = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).ProvisioningState = value; }

        /// <summary>Internal Acessors for StartedOn</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal.StartedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).StartedOn; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).StartedOn = value; }

        /// <summary>Internal Acessors for SourceMongoConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationPropertiesCosmosDbMongoInternal.SourceMongoConnection { get => (this._sourceMongoConnection = this._sourceMongoConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.MongoConnectionInformation()); set { {_sourceMongoConnection = value;} } }

        /// <summary>Internal Acessors for TargetMongoConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationPropertiesCosmosDbMongoInternal.TargetMongoConnection { get => (this._targetMongoConnection = this._targetMongoConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.MongoConnectionInformation()); set { {_targetMongoConnection = value;} } }

        /// <summary>Error details in case of migration failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IErrorInfo MigrationFailureError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureError; }

        /// <summary>Error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string MigrationFailureErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureErrorCode; }

        /// <summary>Error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string MigrationFailureErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationFailureErrorMessage; }

        /// <summary>ID for current migration operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string MigrationOperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationOperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationOperationId = value ?? null; }

        /// <summary>Resource Id of the Migration Service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string MigrationService { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationService; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationService = value ?? null; }

        /// <summary>Migration status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string MigrationStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).MigrationStatus; }

        /// <summary>Error message for migration provisioning failure, if any.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string ProvisioningError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).ProvisioningError; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).ProvisioningError = value ?? null; }

        /// <summary>
        /// Provisioning State of migration. ProvisioningState as Succeeded implies that validations have been performed and migration
        /// has started.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).ProvisioningState; }

        /// <summary>Resource Id of the target resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public string Scope { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).Scope; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).Scope = value ?? null; }

        /// <summary>Backing field for <see cref="SourceMongoConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation _sourceMongoConnection;

        /// <summary>Source Mongo connection details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation SourceMongoConnection { get => (this._sourceMongoConnection = this._sourceMongoConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.MongoConnectionInformation()); set => this._sourceMongoConnection = value; }

        /// <summary>Host of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceMongoConnectionHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).Host; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).Host = value ?? null; }

        /// <summary>Password to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public System.Security.SecureString SourceMongoConnectionPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).Password = value ?? null; }

        /// <summary>Port of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? SourceMongoConnectionPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).Port = value ?? default(int); }

        /// <summary>ConnectionString to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceMongoConnectionString { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).ConnectionString; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).ConnectionString = value ?? null; }

        /// <summary>Whether to UseSsl or UseTls to connect to Mongo. Default is true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? SourceMongoConnectionUseSsl { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).UseSsl; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).UseSsl = value ?? default(bool); }

        /// <summary>User name to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceMongoConnectionUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)SourceMongoConnection).UserName = value ?? null; }

        /// <summary>Database migration start time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inherited)]
        public global::System.DateTime? StartedOn { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal)__databaseMigrationBaseProperties).StartedOn; }

        /// <summary>Backing field for <see cref="TargetMongoConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation _targetMongoConnection;

        /// <summary>Target Cosmos DB Mongo connection details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation TargetMongoConnection { get => (this._targetMongoConnection = this._targetMongoConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.MongoConnectionInformation()); set => this._targetMongoConnection = value; }

        /// <summary>Host of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetMongoConnectionHost { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).Host; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).Host = value ?? null; }

        /// <summary>Password to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public System.Security.SecureString TargetMongoConnectionPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).Password = value ?? null; }

        /// <summary>Port of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public int? TargetMongoConnectionPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).Port; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).Port = value ?? default(int); }

        /// <summary>ConnectionString to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetMongoConnectionString { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).ConnectionString; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).ConnectionString = value ?? null; }

        /// <summary>Whether to UseSsl or UseTls to connect to Mongo. Default is true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public bool? TargetMongoConnectionUseSsl { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).UseSsl; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).UseSsl = value ?? default(bool); }

        /// <summary>User name to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetMongoConnectionUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).UserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformationInternal)TargetMongoConnection).UserName = value ?? null; }

        /// <summary>
        /// Creates an new <see cref="DatabaseMigrationPropertiesCosmosDbMongo" /> instance.
        /// </summary>
        public DatabaseMigrationPropertiesCosmosDbMongo()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__databaseMigrationBaseProperties), __databaseMigrationBaseProperties);
            await eventListener.AssertObjectIsValid(nameof(__databaseMigrationBaseProperties), __databaseMigrationBaseProperties);
        }
    }
    /// Database Migration Resource properties for CosmosDb for Mongo.
    public partial interface IDatabaseMigrationPropertiesCosmosDbMongo :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBaseProperties
    {
        /// <summary>List of Mongo Collections to be migrated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of Mongo Collections to be migrated.",
        SerializedName = @"collectionList",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoMigrationCollection) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoMigrationCollection[] CollectionList { get; set; }
        /// <summary>Host of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Host of mongo connection.",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string SourceMongoConnectionHost { get; set; }
        /// <summary>Password to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password to connect to Mongo.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString SourceMongoConnectionPassword { get; set; }
        /// <summary>Port of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Port of mongo connection.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? SourceMongoConnectionPort { get; set; }
        /// <summary>ConnectionString to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ConnectionString to connect to Mongo.",
        SerializedName = @"connectionString",
        PossibleTypes = new [] { typeof(string) })]
        string SourceMongoConnectionString { get; set; }
        /// <summary>Whether to UseSsl or UseTls to connect to Mongo. Default is true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to UseSsl or UseTls to connect to Mongo. Default is true.",
        SerializedName = @"useSsl",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SourceMongoConnectionUseSsl { get; set; }
        /// <summary>User name to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name to connect to Mongo.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string SourceMongoConnectionUserName { get; set; }
        /// <summary>Host of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Host of mongo connection.",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        string TargetMongoConnectionHost { get; set; }
        /// <summary>Password to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password to connect to Mongo.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString TargetMongoConnectionPassword { get; set; }
        /// <summary>Port of mongo connection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Port of mongo connection.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? TargetMongoConnectionPort { get; set; }
        /// <summary>ConnectionString to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ConnectionString to connect to Mongo.",
        SerializedName = @"connectionString",
        PossibleTypes = new [] { typeof(string) })]
        string TargetMongoConnectionString { get; set; }
        /// <summary>Whether to UseSsl or UseTls to connect to Mongo. Default is true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to UseSsl or UseTls to connect to Mongo. Default is true.",
        SerializedName = @"useSsl",
        PossibleTypes = new [] { typeof(bool) })]
        bool? TargetMongoConnectionUseSsl { get; set; }
        /// <summary>User name to connect to Mongo.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"User name to connect to Mongo.",
        SerializedName = @"userName",
        PossibleTypes = new [] { typeof(string) })]
        string TargetMongoConnectionUserName { get; set; }

    }
    /// Database Migration Resource properties for CosmosDb for Mongo.
    internal partial interface IDatabaseMigrationPropertiesCosmosDbMongoInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IDatabaseMigrationBasePropertiesInternal
    {
        /// <summary>List of Mongo Collections to be migrated.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoMigrationCollection[] CollectionList { get; set; }
        /// <summary>Source Mongo connection details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation SourceMongoConnection { get; set; }
        /// <summary>Host of mongo connection.</summary>
        string SourceMongoConnectionHost { get; set; }
        /// <summary>Password to connect to Mongo.</summary>
        System.Security.SecureString SourceMongoConnectionPassword { get; set; }
        /// <summary>Port of mongo connection.</summary>
        int? SourceMongoConnectionPort { get; set; }
        /// <summary>ConnectionString to connect to Mongo.</summary>
        string SourceMongoConnectionString { get; set; }
        /// <summary>Whether to UseSsl or UseTls to connect to Mongo. Default is true.</summary>
        bool? SourceMongoConnectionUseSsl { get; set; }
        /// <summary>User name to connect to Mongo.</summary>
        string SourceMongoConnectionUserName { get; set; }
        /// <summary>Target Cosmos DB Mongo connection details.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IMongoConnectionInformation TargetMongoConnection { get; set; }
        /// <summary>Host of mongo connection.</summary>
        string TargetMongoConnectionHost { get; set; }
        /// <summary>Password to connect to Mongo.</summary>
        System.Security.SecureString TargetMongoConnectionPassword { get; set; }
        /// <summary>Port of mongo connection.</summary>
        int? TargetMongoConnectionPort { get; set; }
        /// <summary>ConnectionString to connect to Mongo.</summary>
        string TargetMongoConnectionString { get; set; }
        /// <summary>Whether to UseSsl or UseTls to connect to Mongo. Default is true.</summary>
        bool? TargetMongoConnectionUseSsl { get; set; }
        /// <summary>User name to connect to Mongo.</summary>
        string TargetMongoConnectionUserName { get; set; }

    }
}