// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Extensions;

    /// <summary>Backup Configuration</summary>
    public partial class BackupConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal
    {

        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string AzureBlobAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobAccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobAccountKey = value ?? null; }

        /// <summary>Authentication type used for accessing Azure Blob Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthType? AzureBlobAuthType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobAuthType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobAuthType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthType)""); }

        /// <summary>Blob container name where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string AzureBlobContainerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobContainerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobContainerName = value ?? null; }

        /// <summary>Resource Id of the storage account where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string AzureBlobStorageAccountResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobStorageAccountResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobStorageAccountResourceId = value ?? null; }

        /// <summary>Password for username to access file share location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public System.Security.SecureString FileSharePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileSharePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileSharePassword = value ?? null; }

        /// <summary>Location as SMB share or local drive where backups are placed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string FileSharePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileSharePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileSharePath = value ?? null; }

        /// <summary>Username to access the file share location for backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string FileShareUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileShareUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileShareUsername = value ?? null; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityPrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityTenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ManagedServiceIdentityType? IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ManagedServiceIdentityType)""); }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api60.IManagedServiceIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityUserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>Internal Acessors for AzureBlobIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api60.IManagedServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.AzureBlobIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlobIdentity = value; }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityPrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityPrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityTenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).IdentityTenantId = value; }

        /// <summary>Internal Acessors for SourceLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.SourceLocation { get => (this._sourceLocation = this._sourceLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.SourceLocation()); set { {_sourceLocation = value;} } }

        /// <summary>Internal Acessors for SourceLocationAzureBlob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IAzureBlob Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.SourceLocationAzureBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).AzureBlob = value; }

        /// <summary>Internal Acessors for SourceLocationFileShare</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISqlFileShare Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.SourceLocationFileShare { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileShare; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileShare = value; }

        /// <summary>Internal Acessors for SourceLocationFileStorageType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.SourceLocationFileStorageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileStorageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileStorageType = value; }

        /// <summary>Internal Acessors for TargetLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocation Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IBackupConfigurationInternal.TargetLocation { get => (this._targetLocation = this._targetLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.TargetLocation()); set { {_targetLocation = value;} } }

        /// <summary>Backing field for <see cref="SourceLocation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocation _sourceLocation;

        /// <summary>Source location of backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocation SourceLocation { get => (this._sourceLocation = this._sourceLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.SourceLocation()); set => this._sourceLocation = value; }

        /// <summary>Backup storage Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string SourceLocationFileStorageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocationInternal)SourceLocation).FileStorageType; }

        /// <summary>Backing field for <see cref="TargetLocation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocation _targetLocation;

        /// <summary>Target location for copying backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocation TargetLocation { get => (this._targetLocation = this._targetLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.TargetLocation()); set => this._targetLocation = value; }

        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetLocationAccountKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocationInternal)TargetLocation).AccountKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocationInternal)TargetLocation).AccountKey = value ?? null; }

        /// <summary>Resource Id of the storage account copying backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Origin(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.PropertyOrigin.Inlined)]
        public string TargetLocationStorageAccountResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocationInternal)TargetLocation).StorageAccountResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocationInternal)TargetLocation).StorageAccountResourceId = value ?? null; }

        /// <summary>Creates an new <see cref="BackupConfiguration" /> instance.</summary>
        public BackupConfiguration()
        {

        }
    }
    /// Backup Configuration
    public partial interface IBackupConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.IJsonSerializable
    {
        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage Account Key.",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobAccountKey { get; set; }
        /// <summary>Authentication type used for accessing Azure Blob Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authentication type used for accessing Azure Blob Storage.",
        SerializedName = @"authType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthType? AzureBlobAuthType { get; set; }
        /// <summary>Blob container name where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Blob container name where backups are stored.",
        SerializedName = @"blobContainerName",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobContainerName { get; set; }
        /// <summary>Resource Id of the storage account where backups are stored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id of the storage account where backups are stored.",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string AzureBlobStorageAccountResourceId { get; set; }
        /// <summary>Password for username to access file share location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for username to access file share location.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString FileSharePassword { get; set; }
        /// <summary>Location as SMB share or local drive where backups are placed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Location as SMB share or local drive where backups are placed.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string FileSharePath { get; set; }
        /// <summary>Username to access the file share location for backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Username to access the file share location for backups.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string FileShareUsername { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ManagedServiceIdentityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api60.IManagedServiceIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api60.IManagedServiceIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Backup storage Type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Backup storage Type.",
        SerializedName = @"fileStorageType",
        PossibleTypes = new [] { typeof(string) })]
        string SourceLocationFileStorageType { get;  }
        /// <summary>Storage Account Key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage Account Key.",
        SerializedName = @"accountKey",
        PossibleTypes = new [] { typeof(string) })]
        string TargetLocationAccountKey { get; set; }
        /// <summary>Resource Id of the storage account copying backups.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id of the storage account copying backups.",
        SerializedName = @"storageAccountResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string TargetLocationStorageAccountResourceId { get; set; }

    }
    /// Backup Configuration
    internal partial interface IBackupConfigurationInternal

    {
        /// <summary>Storage Account Key.</summary>
        string AzureBlobAccountKey { get; set; }
        /// <summary>Authentication type used for accessing Azure Blob Storage.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.AuthType? AzureBlobAuthType { get; set; }
        /// <summary>Blob container name where backups are stored.</summary>
        string AzureBlobContainerName { get; set; }
        /// <summary>Identity details for authentication using a Managed Identity.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api60.IManagedServiceIdentity AzureBlobIdentity { get; set; }
        /// <summary>Resource Id of the storage account where backups are stored.</summary>
        string AzureBlobStorageAccountResourceId { get; set; }
        /// <summary>Password for username to access file share location.</summary>
        System.Security.SecureString FileSharePassword { get; set; }
        /// <summary>Location as SMB share or local drive where backups are placed.</summary>
        string FileSharePath { get; set; }
        /// <summary>Username to access the file share location for backups.</summary>
        string FileShareUsername { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Support.ManagedServiceIdentityType? IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api60.IManagedServiceIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Source location of backups.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISourceLocation SourceLocation { get; set; }
        /// <summary>Source Azure Blob.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.IAzureBlob SourceLocationAzureBlob { get; set; }
        /// <summary>Source File share.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ISqlFileShare SourceLocationFileShare { get; set; }
        /// <summary>Backup storage Type.</summary>
        string SourceLocationFileStorageType { get; set; }
        /// <summary>Target location for copying backups.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DataMigration.Models.Api20250315Preview.ITargetLocation TargetLocation { get; set; }
        /// <summary>Storage Account Key.</summary>
        string TargetLocationAccountKey { get; set; }
        /// <summary>Resource Id of the storage account copying backups.</summary>
        string TargetLocationStorageAccountResourceId { get; set; }

    }
}