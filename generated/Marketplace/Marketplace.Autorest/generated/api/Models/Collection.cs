// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Extensions;

    /// <summary>The Collection data structure.</summary>
    public partial class Collection :
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollection,
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.Resource();

        /// <summary>Indicating whether all subscriptions are selected (=true) or not (=false).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public bool? AllSubscription { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).AllSubscription; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).AllSubscription = value ?? default(bool); }

        /// <summary>Gets list of collection rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IRule> AppliedRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).AppliedRule; }

        /// <summary>
        /// Indicating whether all items are approved for this collection (=true) or not (=false).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public bool? ApproveAllItem { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).ApproveAllItem; }

        /// <summary>Gets the modified date of all items approved.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public global::System.DateTime? ApproveAllItemsModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).ApproveAllItemsModifiedAt; }

        /// <summary>Gets or sets the association with Commercial's Billing Account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public string Claim { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).Claim; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).Claim = value ?? null; }

        /// <summary>Gets collection Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public string CollectionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).CollectionId; }

        /// <summary>Gets or sets collection name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public string CollectionName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).CollectionName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).CollectionName = value ?? null; }

        /// <summary>Indicating whether the collection is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public bool? Enabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).Enabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).Enabled = value ?? default(bool); }

        /// <summary>The resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Id; }

        /// <summary>Internal Acessors for AppliedRule</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IRule> Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal.AppliedRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).AppliedRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).AppliedRule = value; }

        /// <summary>Internal Acessors for ApproveAllItem</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal.ApproveAllItem { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).ApproveAllItem; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).ApproveAllItem = value; }

        /// <summary>Internal Acessors for ApproveAllItemsModifiedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal.ApproveAllItemsModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).ApproveAllItemsModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).ApproveAllItemsModifiedAt = value; }

        /// <summary>Internal Acessors for CollectionId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal.CollectionId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).CollectionId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).CollectionId = value; }

        /// <summary>Internal Acessors for NumberOfOffer</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal.NumberOfOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).NumberOfOffer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).NumberOfOffer = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionProperties Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.CollectionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Name; }

        /// <summary>Gets the number of offers associated with the collection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public long? NumberOfOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).NumberOfOffer; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionProperties _property;

        /// <summary>The collection data structure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.CollectionProperties()); set => this._property = value; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done,
        /// explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SubscriptionsList { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).SubscriptionsList; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionPropertiesInternal)Property).SubscriptionsList = value ?? null /* arrayOf */; }

        /// <summary>Metadata pertaining to creation and last modification of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataCreatedByType = value ?? null; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>The type of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="Collection" /> instance.</summary>
        public Collection()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// The Collection data structure.
    public partial interface ICollection :
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResource
    {
        /// <summary>Indicating whether all subscriptions are selected (=true) or not (=false).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicating whether all subscriptions are selected (=true) or not (=false).",
        SerializedName = @"allSubscriptions",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllSubscription { get; set; }
        /// <summary>Gets list of collection rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets list of collection rules",
        SerializedName = @"appliedRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IRule> AppliedRule { get;  }
        /// <summary>
        /// Indicating whether all items are approved for this collection (=true) or not (=false).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Indicating whether all items are approved for this collection (=true) or not (=false).",
        SerializedName = @"approveAllItems",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ApproveAllItem { get;  }
        /// <summary>Gets the modified date of all items approved.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the modified date of all items approved.",
        SerializedName = @"approveAllItemsModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ApproveAllItemsModifiedAt { get;  }
        /// <summary>Gets or sets the association with Commercial's Billing Account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the association with Commercial's Billing Account.",
        SerializedName = @"claim",
        PossibleTypes = new [] { typeof(string) })]
        string Claim { get; set; }
        /// <summary>Gets collection Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets collection Id.",
        SerializedName = @"collectionId",
        PossibleTypes = new [] { typeof(string) })]
        string CollectionId { get;  }
        /// <summary>Gets or sets collection name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets collection name.",
        SerializedName = @"collectionName",
        PossibleTypes = new [] { typeof(string) })]
        string CollectionName { get; set; }
        /// <summary>Indicating whether the collection is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicating whether the collection is enabled or disabled.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>Gets the number of offers associated with the collection.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the number of offers associated with the collection.",
        SerializedName = @"numberOfOffers",
        PossibleTypes = new [] { typeof(long) })]
        long? NumberOfOffer { get;  }
        /// <summary>
        /// Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done,
        /// explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done, explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request",
        SerializedName = @"subscriptionsList",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SubscriptionsList { get; set; }

    }
    /// The Collection data structure.
    internal partial interface ICollectionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IResourceInternal
    {
        /// <summary>Indicating whether all subscriptions are selected (=true) or not (=false).</summary>
        bool? AllSubscription { get; set; }
        /// <summary>Gets list of collection rules</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IRule> AppliedRule { get; set; }
        /// <summary>
        /// Indicating whether all items are approved for this collection (=true) or not (=false).
        /// </summary>
        bool? ApproveAllItem { get; set; }
        /// <summary>Gets the modified date of all items approved.</summary>
        global::System.DateTime? ApproveAllItemsModifiedAt { get; set; }
        /// <summary>Gets or sets the association with Commercial's Billing Account.</summary>
        string Claim { get; set; }
        /// <summary>Gets collection Id.</summary>
        string CollectionId { get; set; }
        /// <summary>Gets or sets collection name.</summary>
        string CollectionName { get; set; }
        /// <summary>Indicating whether the collection is enabled or disabled.</summary>
        bool? Enabled { get; set; }
        /// <summary>Gets the number of offers associated with the collection.</summary>
        long? NumberOfOffer { get; set; }
        /// <summary>The collection data structure.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.ICollectionProperties Property { get; set; }
        /// <summary>
        /// Gets or sets subscription ids list. Empty list indicates all subscriptions are selected, null indicates no update is done,
        /// explicit list indicates the explicit selected subscriptions. On insert, null is considered as bad request
        /// </summary>
        System.Collections.Generic.List<string> SubscriptionsList { get; set; }

    }
}