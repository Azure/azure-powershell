// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Extensions;

    /// <summary>Query approved plans response</summary>
    public partial class QueryApprovedPlansDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IQueryApprovedPlansDetails,
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Models.IQueryApprovedPlansDetailsInternal
    {

        /// <summary>Backing field for <see cref="AllSubscription" /> property.</summary>
        private bool? _allSubscription;

        /// <summary>Indicates whether all subscriptions are approved for this plan</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Owned)]
        public bool? AllSubscription { get => this._allSubscription; set => this._allSubscription = value; }

        /// <summary>Backing field for <see cref="PlanId" /> property.</summary>
        private string _planId;

        /// <summary>Plan id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Owned)]
        public string PlanId { get => this._planId; set => this._planId = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private System.Collections.Generic.List<string> _subscriptionId;

        /// <summary>
        /// Approved subscription ids list. In case all subscriptions are approved for a plan, allSubscriptions flag is true and list
        /// is empty ( else flag is set to false). In case both subscriptions list is empty and allSubscriptions flag is false, the
        /// plan is not approved for any subscription.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Origin(Microsoft.Azure.PowerShell.Cmdlets.Marketplace.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Creates an new <see cref="QueryApprovedPlansDetails" /> instance.</summary>
        public QueryApprovedPlansDetails()
        {

        }
    }
    /// Query approved plans response
    public partial interface IQueryApprovedPlansDetails :
        Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.IJsonSerializable
    {
        /// <summary>Indicates whether all subscriptions are approved for this plan</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether all subscriptions are approved for this plan",
        SerializedName = @"allSubscriptions",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllSubscription { get; set; }
        /// <summary>Plan id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Plan id",
        SerializedName = @"planId",
        PossibleTypes = new [] { typeof(string) })]
        string PlanId { get; set; }
        /// <summary>
        /// Approved subscription ids list. In case all subscriptions are approved for a plan, allSubscriptions flag is true and list
        /// is empty ( else flag is set to false). In case both subscriptions list is empty and allSubscriptions flag is false, the
        /// plan is not approved for any subscription.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Marketplace.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Approved subscription ids list. In case all subscriptions are approved for a plan, allSubscriptions flag is true and list is empty ( else flag is set to false). In case both subscriptions list is empty and allSubscriptions flag is false, the plan is not approved for any subscription.",
        SerializedName = @"subscriptionIds",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SubscriptionId { get; set; }

    }
    /// Query approved plans response
    internal partial interface IQueryApprovedPlansDetailsInternal

    {
        /// <summary>Indicates whether all subscriptions are approved for this plan</summary>
        bool? AllSubscription { get; set; }
        /// <summary>Plan id</summary>
        string PlanId { get; set; }
        /// <summary>
        /// Approved subscription ids list. In case all subscriptions are approved for a plan, allSubscriptions flag is true and list
        /// is empty ( else flag is set to false). In case both subscriptions list is empty and allSubscriptions flag is false, the
        /// plan is not approved for any subscription.
        /// </summary>
        System.Collections.Generic.List<string> SubscriptionId { get; set; }

    }
}