// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Extensions;

    /// <summary>Parameters for creating or updating a vault</summary>
    public partial class VaultPatchParameters :
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParameters,
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersInternal
    {

        /// <summary>
        /// An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant
        /// ID as the key vault's tenant ID.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IAccessPolicyEntry> AccessPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).AccessPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).AccessPolicy = value ?? null /* arrayOf */; }

        /// <summary>
        /// The vault's create mode to indicate whether the vault need to be recovered or not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string CreateMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).CreateMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).CreateMode = value ?? null; }

        /// <summary>
        /// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates
        /// protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable
        /// deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible -
        /// that is, the property does not accept false as its value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public bool? EnablePurgeProtection { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnablePurgeProtection; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnablePurgeProtection = value ?? default(bool); }

        /// <summary>
        /// Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC)
        /// for authorization of data actions, and the access policies specified in vault properties will be ignored. When false,
        /// the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager
        /// will be ignored. If null or not specified, the value of this property will not change.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public bool? EnableRbacAuthorization { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnableRbacAuthorization; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnableRbacAuthorization = value ?? default(bool); }

        /// <summary>
        /// Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot
        /// be reverted to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public bool? EnableSoftDelete { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnableSoftDelete; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnableSoftDelete = value ?? default(bool); }

        /// <summary>
        /// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key
        /// vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public bool? EnabledForDeployment { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnabledForDeployment; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnabledForDeployment = value ?? default(bool); }

        /// <summary>
        /// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public bool? EnabledForDiskEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnabledForDiskEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnabledForDiskEncryption = value ?? default(bool); }

        /// <summary>
        /// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public bool? EnabledForTemplateDeployment { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnabledForTemplateDeployment; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).EnabledForTemplateDeployment = value ?? default(bool); }

        /// <summary>Internal Acessors for NetworkAcls</summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.INetworkRuleSet Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersInternal.NetworkAcls { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAcls; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAcls = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchProperties Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.VaultPatchProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.ISku Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersInternal.Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).Sku = value; }

        /// <summary>Internal Acessors for SkuFamily</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersInternal.SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SkuFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SkuFamily = value; }

        /// <summary>
        /// Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'. If not specified the default is 'AzureServices'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string NetworkAclsBypass { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsBypass; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsBypass = value ?? null; }

        /// <summary>
        /// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property
        /// has been evaluated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string NetworkAclsDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsDefaultAction = value ?? null; }

        /// <summary>The list of IP address rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IIPRule> NetworkAclsIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsIPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsIPRule = value ?? null /* arrayOf */; }

        /// <summary>The list of virtual network rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVirtualNetworkRule> NetworkAclsVirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsVirtualNetworkRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).NetworkAclsVirtualNetworkRule = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchProperties _property;

        /// <summary>Properties of the vault</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.VaultPatchProperties()); set => this._property = value; }

        /// <summary>
        /// Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except
        /// private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall
        /// rules, meaning that even if the firewall rules are present we will not honor the rules.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).PublicNetworkAccess = value ?? null; }

        /// <summary>SKU family name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SkuFamily; }

        /// <summary>
        /// SKU name to specify whether the key vault is a standard vault or a premium vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SkuName = value ?? null; }

        /// <summary>softDelete data retention days. It accepts >=7 and <=90.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public int? SoftDeleteRetentionInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SoftDeleteRetentionInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).SoftDeleteRetentionInDay = value ?? default(int); }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersTags _tag;

        /// <summary>The tags that will be assigned to the key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.VaultPatchParametersTags()); set => this._tag = value; }

        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Origin(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PropertyOrigin.Inlined)]
        public string TenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchPropertiesInternal)Property).TenantId = value ?? null; }

        /// <summary>Creates an new <see cref="VaultPatchParameters" /> instance.</summary>
        public VaultPatchParameters()
        {

        }
    }
    /// Parameters for creating or updating a vault
    public partial interface IVaultPatchParameters :
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.IJsonSerializable
    {
        /// <summary>
        /// An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant
        /// ID as the key vault's tenant ID.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
        SerializedName = @"accessPolicies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IAccessPolicyEntry) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IAccessPolicyEntry> AccessPolicy { get; set; }
        /// <summary>
        /// The vault's create mode to indicate whether the vault need to be recovered or not.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The vault's create mode to indicate whether the vault need to be recovered or not.",
        SerializedName = @"createMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("recover", "default")]
        string CreateMode { get; set; }
        /// <summary>
        /// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates
        /// protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable
        /// deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible -
        /// that is, the property does not accept false as its value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible - that is, the property does not accept false as its value.",
        SerializedName = @"enablePurgeProtection",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnablePurgeProtection { get; set; }
        /// <summary>
        /// Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC)
        /// for authorization of data actions, and the access policies specified in vault properties will be ignored. When false,
        /// the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager
        /// will be ignored. If null or not specified, the value of this property will not change.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be  ignored. When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the value of this property will not change.",
        SerializedName = @"enableRbacAuthorization",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableRbacAuthorization { get; set; }
        /// <summary>
        /// Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot
        /// be reverted to false.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot be reverted to false.",
        SerializedName = @"enableSoftDelete",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableSoftDelete { get; set; }
        /// <summary>
        /// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key
        /// vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault.",
        SerializedName = @"enabledForDeployment",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnabledForDeployment { get; set; }
        /// <summary>
        /// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.",
        SerializedName = @"enabledForDiskEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnabledForDiskEncryption { get; set; }
        /// <summary>
        /// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.",
        SerializedName = @"enabledForTemplateDeployment",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnabledForTemplateDeployment { get; set; }
        /// <summary>
        /// Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'. If not specified the default is 'AzureServices'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'.  If not specified the default is 'AzureServices'.",
        SerializedName = @"bypass",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("AzureServices", "None")]
        string NetworkAclsBypass { get; set; }
        /// <summary>
        /// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property
        /// has been evaluated.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("Allow", "Deny")]
        string NetworkAclsDefaultAction { get; set; }
        /// <summary>The list of IP address rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of IP address rules.",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IIPRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IIPRule> NetworkAclsIPRule { get; set; }
        /// <summary>The list of virtual network rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of virtual network rules.",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVirtualNetworkRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVirtualNetworkRule> NetworkAclsVirtualNetworkRule { get; set; }
        /// <summary>
        /// Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except
        /// private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall
        /// rules, meaning that even if the firewall rules are present we will not honor the rules.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall rules, meaning that even if the firewall rules are present we will not honor the rules.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(string) })]
        string PublicNetworkAccess { get; set; }
        /// <summary>SKU family name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"SKU family name",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        string SkuFamily { get;  }
        /// <summary>
        /// SKU name to specify whether the key vault is a standard vault or a premium vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"SKU name to specify whether the key vault is a standard vault or a premium vault.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("standard", "premium")]
        string SkuName { get; set; }
        /// <summary>softDelete data retention days. It accepts >=7 and <=90.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"softDelete data retention days. It accepts >=7 and <=90.",
        SerializedName = @"softDeleteRetentionInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? SoftDeleteRetentionInDay { get; set; }
        /// <summary>The tags that will be assigned to the key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The tags that will be assigned to the key vault. ",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersTags Tag { get; set; }
        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string TenantId { get; set; }

    }
    /// Parameters for creating or updating a vault
    internal partial interface IVaultPatchParametersInternal

    {
        /// <summary>
        /// An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant
        /// ID as the key vault's tenant ID.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IAccessPolicyEntry> AccessPolicy { get; set; }
        /// <summary>
        /// The vault's create mode to indicate whether the vault need to be recovered or not.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("recover", "default")]
        string CreateMode { get; set; }
        /// <summary>
        /// Property specifying whether protection against purge is enabled for this vault. Setting this property to true activates
        /// protection against purge for this vault and its content - only the Key Vault service may initiate a hard, irrecoverable
        /// deletion. The setting is effective only if soft delete is also enabled. Enabling this functionality is irreversible -
        /// that is, the property does not accept false as its value.
        /// </summary>
        bool? EnablePurgeProtection { get; set; }
        /// <summary>
        /// Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC)
        /// for authorization of data actions, and the access policies specified in vault properties will be ignored. When false,
        /// the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager
        /// will be ignored. If null or not specified, the value of this property will not change.
        /// </summary>
        bool? EnableRbacAuthorization { get; set; }
        /// <summary>
        /// Property to specify whether the 'soft delete' functionality is enabled for this key vault. Once set to true, it cannot
        /// be reverted to false.
        /// </summary>
        bool? EnableSoftDelete { get; set; }
        /// <summary>
        /// Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key
        /// vault.
        /// </summary>
        bool? EnabledForDeployment { get; set; }
        /// <summary>
        /// Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys.
        /// </summary>
        bool? EnabledForDiskEncryption { get; set; }
        /// <summary>
        /// Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault.
        /// </summary>
        bool? EnabledForTemplateDeployment { get; set; }
        /// <summary>
        /// A collection of rules governing the accessibility of the vault from specific network locations.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.INetworkRuleSet NetworkAcls { get; set; }
        /// <summary>
        /// Tells what traffic can bypass network rules. This can be 'AzureServices' or 'None'. If not specified the default is 'AzureServices'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("AzureServices", "None")]
        string NetworkAclsBypass { get; set; }
        /// <summary>
        /// The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property
        /// has been evaluated.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("Allow", "Deny")]
        string NetworkAclsDefaultAction { get; set; }
        /// <summary>The list of IP address rules.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IIPRule> NetworkAclsIPRule { get; set; }
        /// <summary>The list of virtual network rules.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVirtualNetworkRule> NetworkAclsVirtualNetworkRule { get; set; }
        /// <summary>Properties of the vault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchProperties Property { get; set; }
        /// <summary>
        /// Property to specify whether the vault will accept traffic from public internet. If set to 'disabled' all traffic except
        /// private endpoint traffic and that that originates from trusted services will be blocked. This will override the set firewall
        /// rules, meaning that even if the firewall rules are present we will not honor the rules.
        /// </summary>
        string PublicNetworkAccess { get; set; }
        /// <summary>SKU details</summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.ISku Sku { get; set; }
        /// <summary>SKU family name</summary>
        string SkuFamily { get; set; }
        /// <summary>
        /// SKU name to specify whether the key vault is a standard vault or a premium vault.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.KeyVault.PSArgumentCompleterAttribute("standard", "premium")]
        string SkuName { get; set; }
        /// <summary>softDelete data retention days. It accepts >=7 and <=90.</summary>
        int? SoftDeleteRetentionInDay { get; set; }
        /// <summary>The tags that will be assigned to the key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.KeyVault.Models.IVaultPatchParametersTags Tag { get; set; }
        /// <summary>
        /// The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault.
        /// </summary>
        string TenantId { get; set; }

    }
}