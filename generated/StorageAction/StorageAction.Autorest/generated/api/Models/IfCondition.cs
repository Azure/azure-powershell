// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Extensions;

    /// <summary>The if block of storage task operation</summary>
    public partial class IfCondition :
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition,
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfConditionInternal
    {

        /// <summary>Backing field for <see cref="Condition" /> property.</summary>
        private string _condition;

        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public string Condition { get => this._condition; set => this._condition = value; }

        /// <summary>Backing field for <see cref="Operation" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> _operation;

        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> Operation { get => this._operation; set => this._operation = value; }

        /// <summary>Creates an new <see cref="IfCondition" /> instance.</summary>
        public IfCondition()
        {

        }
    }
    /// The if block of storage task operation
    public partial interface IIfCondition :
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string Condition { get; set; }
        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of operations to execute when the condition predicate satisfies.",
        SerializedName = @"operations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> Operation { get; set; }

    }
    /// The if block of storage task operation
    internal partial interface IIfConditionInternal

    {
        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        string Condition { get; set; }
        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> Operation { get; set; }

    }
}