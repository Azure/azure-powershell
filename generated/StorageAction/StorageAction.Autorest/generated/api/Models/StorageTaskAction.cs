// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Extensions;

    /// <summary>
    /// The storage task action represents conditional statements and operations to be performed on target objects.
    /// </summary>
    public partial class StorageTaskAction :
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskAction,
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal
    {

        /// <summary>Backing field for <see cref="Else" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseCondition _else;

        /// <summary>The else block of storage task operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseCondition Else { get => (this._else = this._else ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.ElseCondition()); set => this._else = value; }

        /// <summary>List of operations to execute in the else block</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> ElseOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseConditionInternal)Else).Operation; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseConditionInternal)Else).Operation = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="If" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition _if;

        /// <summary>The if block of storage task operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition If { get => (this._if = this._if ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IfCondition()); set => this._if = value; }

        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Inlined)]
        public string IfCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfConditionInternal)If).Condition; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfConditionInternal)If).Condition = value ; }

        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> IfOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfConditionInternal)If).Operation; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfConditionInternal)If).Operation = value ; }

        /// <summary>Internal Acessors for Else</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseCondition Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal.Else { get => (this._else = this._else ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.ElseCondition()); set { {_else = value;} } }

        /// <summary>Internal Acessors for If</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskActionInternal.If { get => (this._if = this._if ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IfCondition()); set { {_if = value;} } }

        /// <summary>Creates an new <see cref="StorageTaskAction" /> instance.</summary>
        public StorageTaskAction()
        {

        }
    }
    /// The storage task action represents conditional statements and operations to be performed on target objects.
    public partial interface IStorageTaskAction :
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.IJsonSerializable
    {
        /// <summary>List of operations to execute in the else block</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of operations to execute in the else block",
        SerializedName = @"operations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> ElseOperation { get; set; }
        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.",
        SerializedName = @"condition",
        PossibleTypes = new [] { typeof(string) })]
        string IfCondition { get; set; }
        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of operations to execute when the condition predicate satisfies.",
        SerializedName = @"operations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> IfOperation { get; set; }

    }
    /// The storage task action represents conditional statements and operations to be performed on target objects.
    internal partial interface IStorageTaskActionInternal

    {
        /// <summary>The else block of storage task operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IElseCondition Else { get; set; }
        /// <summary>List of operations to execute in the else block</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> ElseOperation { get; set; }
        /// <summary>The if block of storage task operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IIfCondition If { get; set; }
        /// <summary>
        /// Condition predicate to evaluate each object. See https://aka.ms/storagetaskconditions for valid properties and operators.
        /// </summary>
        string IfCondition { get; set; }
        /// <summary>List of operations to execute when the condition predicate satisfies.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StorageAction.Models.IStorageTaskOperation> IfOperation { get; set; }

    }
}