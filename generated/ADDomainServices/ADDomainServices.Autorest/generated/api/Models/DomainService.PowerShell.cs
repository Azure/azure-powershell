// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Runtime.PowerShell;

    /// <summary>Domain service.</summary>
    [System.ComponentModel.TypeConverter(typeof(DomainServiceTypeConverter))]
    public partial class DomainService
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainService"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainService" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainService DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new DomainService(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainService"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainService" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainService DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new DomainService(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainService"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal DomainService(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainServicePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("Location"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Location = (string) content.GetValueForProperty("Location",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Location, global::System.Convert.ToString);
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceTags) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Tag, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ResourceTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Etag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Etag = (string) content.GetValueForProperty("Etag",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Etag, global::System.Convert.ToString);
            }
            if (content.Contains("LdapsSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapsSetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ILdapsSettings) content.GetValueForProperty("LdapsSetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapsSetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.LdapsSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("NotificationSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.INotificationSettings) content.GetValueForProperty("NotificationSetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.NotificationSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("MigrationProperty"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProperty = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IMigrationProperties) content.GetValueForProperty("MigrationProperty",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProperty, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.MigrationPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilteredSync"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).FilteredSync = (string) content.GetValueForProperty("FilteredSync",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).FilteredSync, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceForestSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceForestSettings) content.GetValueForProperty("ResourceForestSetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ResourceForestSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("DomainSecuritySetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainSecuritySettings) content.GetValueForProperty("DomainSecuritySetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainSecuritySettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Version"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Version = (int?) content.GetValueForProperty("Version",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Version, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TenantId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).TenantId = (string) content.GetValueForProperty("TenantId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).TenantId, global::System.Convert.ToString);
            }
            if (content.Contains("DomainName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainName = (string) content.GetValueForProperty("DomainName",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainName, global::System.Convert.ToString);
            }
            if (content.Contains("DeploymentId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DeploymentId = (string) content.GetValueForProperty("DeploymentId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DeploymentId, global::System.Convert.ToString);
            }
            if (content.Contains("SyncOwner"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).SyncOwner = (string) content.GetValueForProperty("SyncOwner",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).SyncOwner, global::System.Convert.ToString);
            }
            if (content.Contains("ReplicaSet"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ReplicaSet = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IReplicaSet>) content.GetValueForProperty("ReplicaSet",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ReplicaSet, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IReplicaSet>(__y, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ReplicaSetTypeConverter.ConvertFrom));
            }
            if (content.Contains("DomainConfigurationType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainConfigurationType = (string) content.GetValueForProperty("DomainConfigurationType",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainConfigurationType, global::System.Convert.ToString);
            }
            if (content.Contains("Sku"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Sku = (string) content.GetValueForProperty("Sku",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Sku, global::System.Convert.ToString);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingLdap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingLdap = (string) content.GetValueForProperty("LdapSettingLdap",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingLdap, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingPfxCertificate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificate = (byte[]) content.GetValueForProperty("LdapSettingPfxCertificate",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificate, i => i);
            }
            if (content.Contains("LdapSettingPublicCertificate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPublicCertificate = (string) content.GetValueForProperty("LdapSettingPublicCertificate",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPublicCertificate, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingCertificateThumbprint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateThumbprint = (string) content.GetValueForProperty("LdapSettingCertificateThumbprint",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateThumbprint, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingExternalAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingExternalAccess = (string) content.GetValueForProperty("LdapSettingExternalAccess",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingExternalAccess, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceForestSettingResourceForest"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingResourceForest = (string) content.GetValueForProperty("ResourceForestSettingResourceForest",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingResourceForest, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingNtlmV1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingNtlmV1 = (string) content.GetValueForProperty("DomainSecuritySettingNtlmV1",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingNtlmV1, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingTlsV1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingTlsV1 = (string) content.GetValueForProperty("DomainSecuritySettingTlsV1",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingTlsV1, global::System.Convert.ToString);
            }
            if (content.Contains("NotificationSettingAdditionalRecipient"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingAdditionalRecipient = (System.Collections.Generic.List<string>) content.GetValueForProperty("NotificationSettingAdditionalRecipient",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingAdditionalRecipient, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("MigrationPropertyMigrationProgress"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyMigrationProgress = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IMigrationProgress) content.GetValueForProperty("MigrationPropertyMigrationProgress",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyMigrationProgress, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.MigrationProgressTypeConverter.ConvertFrom);
            }
            if (content.Contains("LdapSettingPfxCertificatePassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificatePassword = (System.Security.SecureString) content.GetValueForProperty("LdapSettingPfxCertificatePassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificatePassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("LdapSettingCertificateNotAfter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateNotAfter = (global::System.DateTime?) content.GetValueForProperty("LdapSettingCertificateNotAfter",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateNotAfter, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ResourceForestSettingSettings"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingSettings = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IForestTrust>) content.GetValueForProperty("ResourceForestSettingSettings",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingSettings, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IForestTrust>(__y, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ForestTrustTypeConverter.ConvertFrom));
            }
            if (content.Contains("DomainSecuritySettingSyncNtlmPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncNtlmPassword = (string) content.GetValueForProperty("DomainSecuritySettingSyncNtlmPassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncNtlmPassword, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingSyncKerberosPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncKerberosPassword = (string) content.GetValueForProperty("DomainSecuritySettingSyncKerberosPassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncKerberosPassword, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingSyncOnPremPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncOnPremPassword = (string) content.GetValueForProperty("DomainSecuritySettingSyncOnPremPassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncOnPremPassword, global::System.Convert.ToString);
            }
            if (content.Contains("NotificationSettingNotifyGlobalAdmin"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyGlobalAdmin = (string) content.GetValueForProperty("NotificationSettingNotifyGlobalAdmin",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyGlobalAdmin, global::System.Convert.ToString);
            }
            if (content.Contains("NotificationSettingNotifyDcAdmin"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyDcAdmin = (string) content.GetValueForProperty("NotificationSettingNotifyDcAdmin",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyDcAdmin, global::System.Convert.ToString);
            }
            if (content.Contains("MigrationPropertyOldSubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldSubnetId = (string) content.GetValueForProperty("MigrationPropertyOldSubnetId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldSubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("MigrationPropertyOldVnetSiteId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldVnetSiteId = (string) content.GetValueForProperty("MigrationPropertyOldVnetSiteId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldVnetSiteId, global::System.Convert.ToString);
            }
            if (content.Contains("MigrationProgressCompletionPercentage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressCompletionPercentage = (double?) content.GetValueForProperty("MigrationProgressCompletionPercentage",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressCompletionPercentage, (__y)=> (double) global::System.Convert.ChangeType(__y, typeof(double)));
            }
            if (content.Contains("MigrationProgressMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressMessage = (string) content.GetValueForProperty("MigrationProgressMessage",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressMessage, global::System.Convert.ToString);
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainService"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal DomainService(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainServicePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("Location"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Location = (string) content.GetValueForProperty("Location",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Location, global::System.Convert.ToString);
            }
            if (content.Contains("Tag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Tag = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceTags) content.GetValueForProperty("Tag",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Tag, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ResourceTagsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Etag"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Etag = (string) content.GetValueForProperty("Etag",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceInternal)this).Etag, global::System.Convert.ToString);
            }
            if (content.Contains("LdapsSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapsSetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ILdapsSettings) content.GetValueForProperty("LdapsSetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapsSetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.LdapsSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("NotificationSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.INotificationSettings) content.GetValueForProperty("NotificationSetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.NotificationSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("MigrationProperty"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProperty = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IMigrationProperties) content.GetValueForProperty("MigrationProperty",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProperty, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.MigrationPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("FilteredSync"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).FilteredSync = (string) content.GetValueForProperty("FilteredSync",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).FilteredSync, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceForestSetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IResourceForestSettings) content.GetValueForProperty("ResourceForestSetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ResourceForestSettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("DomainSecuritySetting"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySetting = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainSecuritySettings) content.GetValueForProperty("DomainSecuritySetting",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySetting, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.DomainSecuritySettingsTypeConverter.ConvertFrom);
            }
            if (content.Contains("Version"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Version = (int?) content.GetValueForProperty("Version",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Version, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("TenantId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).TenantId = (string) content.GetValueForProperty("TenantId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).TenantId, global::System.Convert.ToString);
            }
            if (content.Contains("DomainName"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainName = (string) content.GetValueForProperty("DomainName",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainName, global::System.Convert.ToString);
            }
            if (content.Contains("DeploymentId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DeploymentId = (string) content.GetValueForProperty("DeploymentId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DeploymentId, global::System.Convert.ToString);
            }
            if (content.Contains("SyncOwner"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).SyncOwner = (string) content.GetValueForProperty("SyncOwner",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).SyncOwner, global::System.Convert.ToString);
            }
            if (content.Contains("ReplicaSet"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ReplicaSet = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IReplicaSet>) content.GetValueForProperty("ReplicaSet",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ReplicaSet, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IReplicaSet>(__y, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ReplicaSetTypeConverter.ConvertFrom));
            }
            if (content.Contains("DomainConfigurationType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainConfigurationType = (string) content.GetValueForProperty("DomainConfigurationType",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainConfigurationType, global::System.Convert.ToString);
            }
            if (content.Contains("Sku"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Sku = (string) content.GetValueForProperty("Sku",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).Sku, global::System.Convert.ToString);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingLdap"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingLdap = (string) content.GetValueForProperty("LdapSettingLdap",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingLdap, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingPfxCertificate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificate = (byte[]) content.GetValueForProperty("LdapSettingPfxCertificate",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificate, i => i);
            }
            if (content.Contains("LdapSettingPublicCertificate"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPublicCertificate = (string) content.GetValueForProperty("LdapSettingPublicCertificate",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPublicCertificate, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingCertificateThumbprint"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateThumbprint = (string) content.GetValueForProperty("LdapSettingCertificateThumbprint",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateThumbprint, global::System.Convert.ToString);
            }
            if (content.Contains("LdapSettingExternalAccess"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingExternalAccess = (string) content.GetValueForProperty("LdapSettingExternalAccess",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingExternalAccess, global::System.Convert.ToString);
            }
            if (content.Contains("ResourceForestSettingResourceForest"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingResourceForest = (string) content.GetValueForProperty("ResourceForestSettingResourceForest",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingResourceForest, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingNtlmV1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingNtlmV1 = (string) content.GetValueForProperty("DomainSecuritySettingNtlmV1",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingNtlmV1, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingTlsV1"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingTlsV1 = (string) content.GetValueForProperty("DomainSecuritySettingTlsV1",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingTlsV1, global::System.Convert.ToString);
            }
            if (content.Contains("NotificationSettingAdditionalRecipient"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingAdditionalRecipient = (System.Collections.Generic.List<string>) content.GetValueForProperty("NotificationSettingAdditionalRecipient",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingAdditionalRecipient, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("MigrationPropertyMigrationProgress"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyMigrationProgress = (Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IMigrationProgress) content.GetValueForProperty("MigrationPropertyMigrationProgress",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyMigrationProgress, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.MigrationProgressTypeConverter.ConvertFrom);
            }
            if (content.Contains("LdapSettingPfxCertificatePassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificatePassword = (System.Security.SecureString) content.GetValueForProperty("LdapSettingPfxCertificatePassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingPfxCertificatePassword, (object ss) => (System.Security.SecureString)ss);
            }
            if (content.Contains("LdapSettingCertificateNotAfter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateNotAfter = (global::System.DateTime?) content.GetValueForProperty("LdapSettingCertificateNotAfter",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).LdapSettingCertificateNotAfter, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("ResourceForestSettingSettings"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingSettings = (System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IForestTrust>) content.GetValueForProperty("ResourceForestSettingSettings",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).ResourceForestSettingSettings, __y => TypeConverterExtensions.SelectToList<Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IForestTrust>(__y, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.ForestTrustTypeConverter.ConvertFrom));
            }
            if (content.Contains("DomainSecuritySettingSyncNtlmPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncNtlmPassword = (string) content.GetValueForProperty("DomainSecuritySettingSyncNtlmPassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncNtlmPassword, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingSyncKerberosPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncKerberosPassword = (string) content.GetValueForProperty("DomainSecuritySettingSyncKerberosPassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncKerberosPassword, global::System.Convert.ToString);
            }
            if (content.Contains("DomainSecuritySettingSyncOnPremPassword"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncOnPremPassword = (string) content.GetValueForProperty("DomainSecuritySettingSyncOnPremPassword",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).DomainSecuritySettingSyncOnPremPassword, global::System.Convert.ToString);
            }
            if (content.Contains("NotificationSettingNotifyGlobalAdmin"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyGlobalAdmin = (string) content.GetValueForProperty("NotificationSettingNotifyGlobalAdmin",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyGlobalAdmin, global::System.Convert.ToString);
            }
            if (content.Contains("NotificationSettingNotifyDcAdmin"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyDcAdmin = (string) content.GetValueForProperty("NotificationSettingNotifyDcAdmin",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).NotificationSettingNotifyDcAdmin, global::System.Convert.ToString);
            }
            if (content.Contains("MigrationPropertyOldSubnetId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldSubnetId = (string) content.GetValueForProperty("MigrationPropertyOldSubnetId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldSubnetId, global::System.Convert.ToString);
            }
            if (content.Contains("MigrationPropertyOldVnetSiteId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldVnetSiteId = (string) content.GetValueForProperty("MigrationPropertyOldVnetSiteId",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationPropertyOldVnetSiteId, global::System.Convert.ToString);
            }
            if (content.Contains("MigrationProgressCompletionPercentage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressCompletionPercentage = (double?) content.GetValueForProperty("MigrationProgressCompletionPercentage",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressCompletionPercentage, (__y)=> (double) global::System.Convert.ChangeType(__y, typeof(double)));
            }
            if (content.Contains("MigrationProgressMessage"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressMessage = (string) content.GetValueForProperty("MigrationProgressMessage",((Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainServiceInternal)this).MigrationProgressMessage, global::System.Convert.ToString);
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="DomainService" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="DomainService" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Models.IDomainService FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.ADDomainServices.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Domain service.
    [System.ComponentModel.TypeConverter(typeof(DomainServiceTypeConverter))]
    public partial interface IDomainService

    {

    }
}