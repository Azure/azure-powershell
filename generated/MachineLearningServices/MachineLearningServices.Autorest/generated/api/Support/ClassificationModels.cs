// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support
{

    /// <summary>Enum for all classification models supported by AutoML.</summary>
    public partial struct ClassificationModels :
        System.IEquatable<ClassificationModels>
    {
        /// <summary>Naive Bayes classifier for multivariate Bernoulli models.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels BernoulliNaiveBayes = @"BernoulliNaiveBayes";

        /// <summary>
        /// Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
        /// The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred
        /// from the data features.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels DecisionTree = @"DecisionTree";

        /// <summary>
        /// Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is
        /// related to the widely used random forest algorithm.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels ExtremeRandomTrees = @"ExtremeRandomTrees";

        /// <summary>
        /// The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process
        /// works on this theory of execution.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels GradientBoosting = @"GradientBoosting";

        /// <summary>
        /// K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
        /// which further means that the new data point will be assigned a value based on how closely it matches the points in the
        /// training set.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels Knn = @"KNN";

        /// <summary>
        /// LightGBM is a gradient boosting framework that uses tree based learning algorithms.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels LightGbm = @"LightGBM";

        /// <summary>
        /// A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group
        /// classification problems.
        /// After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
        /// Linear SVM performs best when input data is linear, i.e., data can be easily classified by drawing the straight line between
        /// classified values on a plotted graph.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels LinearSvm = @"LinearSVM";

        /// <summary>
        /// Logistic regression is a fundamental classification technique.
        /// It belongs to the group of linear classifiers and is somewhat similar to polynomial and linear regression.
        /// Logistic regression is fast and relatively uncomplicated, and it's convenient for you to interpret the results.
        /// Although it's essentially a method for binary classification, it can also be applied to multiclass problems.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels LogisticRegression = @"LogisticRegression";

        /// <summary>
        /// The multinomial Naive Bayes classifier is suitable for classification with discrete features (e.g., word counts for text
        /// classification).
        /// The multinomial distribution normally requires integer feature counts. However, in practice, fractional counts such as
        /// tf-idf may also work.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels MultinomialNaiveBayes = @"MultinomialNaiveBayes";

        /// <summary>
        /// Random forest is a supervised learning algorithm.
        /// The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
        /// The general idea of the bagging method is that a combination of learning models increases the overall result.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels RandomForest = @"RandomForest";

        /// <summary>
        /// SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
        /// to find the model parameters that correspond to the best fit between predicted and actual outputs.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels Sgd = @"SGD";

        /// <summary>
        /// A support vector machine (SVM) is a supervised machine learning model that uses classification algorithms for two-group
        /// classification problems.
        /// After giving an SVM model sets of labeled training data for each category, they're able to categorize new text.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels Svm = @"SVM";

        /// <summary>
        /// XGBoost: Extreme Gradient Boosting Algorithm. This algorithm is used for structured data where target column values can
        /// be divided into distinct class values.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels XgBoostClassifier = @"XGBoostClassifier";

        /// <summary>the value for an instance of the <see cref="ClassificationModels" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Creates an instance of the <see cref="ClassificationModels"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private ClassificationModels(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Conversion from arbitrary object to ClassificationModels</summary>
        /// <param name="value">the value to convert to an instance of <see cref="ClassificationModels" />.</param>
        internal static object CreateFrom(object value)
        {
            return new ClassificationModels(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type ClassificationModels</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type ClassificationModels (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is ClassificationModels && Equals((ClassificationModels)obj);
        }

        /// <summary>Returns hashCode for enum ClassificationModels</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Returns string representation for ClassificationModels</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to ClassificationModels</summary>
        /// <param name="value">the value to convert to an instance of <see cref="ClassificationModels" />.</param>

        public static implicit operator ClassificationModels(string value)
        {
            return new ClassificationModels(value);
        }

        /// <summary>Implicit operator to convert ClassificationModels to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="ClassificationModels" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum ClassificationModels</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum ClassificationModels</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ClassificationModels e2)
        {
            return e2.Equals(e1);
        }
    }
}