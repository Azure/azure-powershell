// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support
{

    /// <summary>Enum for all forecasting models supported by AutoML.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.ForecastingModelsTypeConverter))]
    public partial struct ForecastingModels :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AutoArima".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AutoArima'", "AutoArima", global::System.Management.Automation.CompletionResultType.ParameterValue, "AutoArima");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Prophet".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Prophet'", "Prophet", global::System.Management.Automation.CompletionResultType.ParameterValue, "Prophet");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Naive".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Naive'", "Naive", global::System.Management.Automation.CompletionResultType.ParameterValue, "Naive");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SeasonalNaive".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SeasonalNaive'", "SeasonalNaive", global::System.Management.Automation.CompletionResultType.ParameterValue, "SeasonalNaive");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Average".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Average'", "Average", global::System.Management.Automation.CompletionResultType.ParameterValue, "Average");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SeasonalAverage".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SeasonalAverage'", "SeasonalAverage", global::System.Management.Automation.CompletionResultType.ParameterValue, "SeasonalAverage");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ExponentialSmoothing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ExponentialSmoothing'", "ExponentialSmoothing", global::System.Management.Automation.CompletionResultType.ParameterValue, "ExponentialSmoothing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Arimax".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Arimax'", "Arimax", global::System.Management.Automation.CompletionResultType.ParameterValue, "Arimax");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "TCNForecaster".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'TCNForecaster'", "TCNForecaster", global::System.Management.Automation.CompletionResultType.ParameterValue, "TCNForecaster");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ElasticNet".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ElasticNet'", "ElasticNet", global::System.Management.Automation.CompletionResultType.ParameterValue, "ElasticNet");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "GradientBoosting".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'GradientBoosting'", "GradientBoosting", global::System.Management.Automation.CompletionResultType.ParameterValue, "GradientBoosting");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DecisionTree".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DecisionTree'", "DecisionTree", global::System.Management.Automation.CompletionResultType.ParameterValue, "DecisionTree");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "KNN".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'KNN'", "KNN", global::System.Management.Automation.CompletionResultType.ParameterValue, "KNN");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LassoLars".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'LassoLars'", "LassoLars", global::System.Management.Automation.CompletionResultType.ParameterValue, "LassoLars");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SGD".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SGD'", "SGD", global::System.Management.Automation.CompletionResultType.ParameterValue, "SGD");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "RandomForest".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'RandomForest'", "RandomForest", global::System.Management.Automation.CompletionResultType.ParameterValue, "RandomForest");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ExtremeRandomTrees".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ExtremeRandomTrees'", "ExtremeRandomTrees", global::System.Management.Automation.CompletionResultType.ParameterValue, "ExtremeRandomTrees");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "LightGBM".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'LightGBM'", "LightGBM", global::System.Management.Automation.CompletionResultType.ParameterValue, "LightGBM");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "XGBoostRegressor".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'XGBoostRegressor'", "XGBoostRegressor", global::System.Management.Automation.CompletionResultType.ParameterValue, "XGBoostRegressor");
            }
        }
    }
}