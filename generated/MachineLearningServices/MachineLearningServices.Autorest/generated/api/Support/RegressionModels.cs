// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support
{

    /// <summary>Enum for all Regression models supported by AutoML.</summary>
    public partial struct RegressionModels :
        System.IEquatable<RegressionModels>
    {
        /// <summary>
        /// Decision Trees are a non-parametric supervised learning method used for both classification and regression tasks.
        /// The goal is to create a model that predicts the value of a target variable by learning simple decision rules inferred
        /// from the data features.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels DecisionTree = @"DecisionTree";

        /// <summary>
        /// Elastic net is a popular type of regularized linear regression that combines two popular penalties, specifically the L1
        /// and L2 penalty functions.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels ElasticNet = @"ElasticNet";

        /// <summary>
        /// Extreme Trees is an ensemble machine learning algorithm that combines the predictions from many decision trees. It is
        /// related to the widely used random forest algorithm.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels ExtremeRandomTrees = @"ExtremeRandomTrees";

        /// <summary>
        /// The technique of transiting week learners into a strong learner is called Boosting. The gradient boosting algorithm process
        /// works on this theory of execution.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels GradientBoosting = @"GradientBoosting";

        /// <summary>
        /// K-nearest neighbors (KNN) algorithm uses 'feature similarity' to predict the values of new datapoints
        /// which further means that the new data point will be assigned a value based on how closely it matches the points in the
        /// training set.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels Knn = @"KNN";

        /// <summary>
        /// Lasso model fit with Least Angle Regression a.k.a. Lars. It is a Linear Model trained with an L1 prior as regularizer.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels LassoLars = @"LassoLars";

        /// <summary>
        /// LightGBM is a gradient boosting framework that uses tree based learning algorithms.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels LightGbm = @"LightGBM";

        /// <summary>
        /// Random forest is a supervised learning algorithm.
        /// The "forest" it builds, is an ensemble of decision trees, usually trained with the “bagging” method.
        /// The general idea of the bagging method is that a combination of learning models increases the overall result.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels RandomForest = @"RandomForest";

        /// <summary>
        /// SGD: Stochastic gradient descent is an optimization algorithm often used in machine learning applications
        /// to find the model parameters that correspond to the best fit between predicted and actual outputs.
        /// It's an inexact but powerful technique.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels Sgd = @"SGD";

        /// <summary>
        /// XGBoostRegressor: Extreme Gradient Boosting Regressor is a supervised machine learning model using ensemble of base learners.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels XgBoostRegressor = @"XGBoostRegressor";

        /// <summary>the value for an instance of the <see cref="RegressionModels" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to RegressionModels</summary>
        /// <param name="value">the value to convert to an instance of <see cref="RegressionModels" />.</param>
        internal static object CreateFrom(object value)
        {
            return new RegressionModels(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type RegressionModels</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type RegressionModels (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is RegressionModels && Equals((RegressionModels)obj);
        }

        /// <summary>Returns hashCode for enum RegressionModels</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="RegressionModels"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private RegressionModels(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for RegressionModels</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to RegressionModels</summary>
        /// <param name="value">the value to convert to an instance of <see cref="RegressionModels" />.</param>

        public static implicit operator RegressionModels(string value)
        {
            return new RegressionModels(value);
        }

        /// <summary>Implicit operator to convert RegressionModels to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="RegressionModels" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum RegressionModels</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum RegressionModels</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels e1, Microsoft.Azure.PowerShell.Cmdlets.MachineLearningServices.Support.RegressionModels e2)
        {
            return e2.Equals(e1);
        }
    }
}