// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Peering.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Extensions;

    /// <summary>
    /// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
    /// </summary>
    public partial class Peering :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeering,
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Resource();

        /// <summary>The set of connections that constitute a direct peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IDirectConnection> DirectConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectConnection = value ?? null /* arrayOf */; }

        /// <summary>The identifier of the referenced resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string DirectPeerAsnId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectPeerAsnId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectPeerAsnId = value ?? null; }

        /// <summary>The type of direct peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string DirectPeeringType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectPeeringType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectPeeringType = value ?? null; }

        /// <summary>The flag that indicates whether or not the peering is used for peering service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public bool? DirectUseForPeeringService { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectUseForPeeringService; }

        /// <summary>The set of connections that constitute an exchange peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IExchangeConnection> ExchangeConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ExchangeConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ExchangeConnection = value ?? null /* arrayOf */; }

        /// <summary>The identifier of the referenced resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string ExchangePeerAsnId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ExchangePeerAsnId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ExchangePeerAsnId = value ?? null; }

        /// <summary>The ID of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Id; }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private string _kind;

        /// <summary>The kind of the peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.FormatTable(Index = 2)]
        public string Kind { get => this._kind; set => this._kind = value; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>The location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.FormatTable(Index = 5)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>Internal Acessors for Direct</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesDirect Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.Direct { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).Direct; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).Direct = value; }

        /// <summary>Internal Acessors for DirectPeerAsn</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.ISubResource Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.DirectPeerAsn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectPeerAsn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectPeerAsn = value; }

        /// <summary>Internal Acessors for DirectUseForPeeringService</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.DirectUseForPeeringService { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectUseForPeeringService; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).DirectUseForPeeringService = value; }

        /// <summary>Internal Acessors for Exchange</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesExchange Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.Exchange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).Exchange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).Exchange = value; }

        /// <summary>Internal Acessors for ExchangePeerAsn</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.ISubResource Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.ExchangePeerAsn { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ExchangePeerAsn; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ExchangePeerAsn = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringProperties Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.PeeringProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSku Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.PeeringSku()); set { {_sku = value;} } }

        /// <summary>Internal Acessors for SkuFamily</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Family; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Family = value; }

        /// <summary>Internal Acessors for SkuSize</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.SkuSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Size; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Size = value; }

        /// <summary>Internal Acessors for SkuTier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringInternal.SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Tier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Tier = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.FormatTable(Index = 0)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Name; }

        /// <summary>The location of the peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.FormatTable(Index = 3)]
        public string PeeringLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).PeeringLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).PeeringLocation = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringProperties _property;

        /// <summary>The properties that define a peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.PeeringProperties()); set => this._property = value; }

        /// <summary>The provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.FormatTable(Index = 4)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSku _sku;

        /// <summary>The SKU that defines the tier and kind of the peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.PeeringSku()); set => this._sku = value; }

        /// <summary>The family of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Family; }

        /// <summary>The name of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.FormatTable(Index = 1)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Name = value ?? null; }

        /// <summary>The size of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string SkuSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Size; }

        /// <summary>The tier of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSkuInternal)Sku).Tier; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringTags _tag;

        /// <summary>The resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.PeeringTags()); set => this._tag = value; }

        /// <summary>The type of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="Peering" /> instance.</summary>
        public Peering()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
    public partial interface IPeering :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResource
    {
        /// <summary>The set of connections that constitute a direct peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of connections that constitute a direct peering.",
        SerializedName = @"connections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IDirectConnection) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IDirectConnection> DirectConnection { get; set; }
        /// <summary>The identifier of the referenced resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The identifier of the referenced resource.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string DirectPeerAsnId { get; set; }
        /// <summary>The type of direct peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of direct peering.",
        SerializedName = @"directPeeringType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Edge", "Transit", "Cdn", "Internal", "Ix", "IxRs", "Voice", "EdgeZoneForOperators")]
        string DirectPeeringType { get; set; }
        /// <summary>The flag that indicates whether or not the peering is used for peering service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The flag that indicates whether or not the peering is used for peering service.",
        SerializedName = @"useForPeeringService",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DirectUseForPeeringService { get;  }
        /// <summary>The set of connections that constitute an exchange peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of connections that constitute an exchange peering.",
        SerializedName = @"connections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IExchangeConnection) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IExchangeConnection> ExchangeConnection { get; set; }
        /// <summary>The identifier of the referenced resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The identifier of the referenced resource.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ExchangePeerAsnId { get; set; }
        /// <summary>The kind of the peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The kind of the peering.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Direct", "Exchange")]
        string Kind { get; set; }
        /// <summary>The location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The location of the resource.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>The location of the peering.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The location of the peering.",
        SerializedName = @"peeringLocation",
        PossibleTypes = new [] { typeof(string) })]
        string PeeringLocation { get; set; }
        /// <summary>The provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Succeeded", "Updating", "Deleting", "Failed")]
        string ProvisioningState { get;  }
        /// <summary>The family of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The family of the peering SKU.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Direct", "Exchange")]
        string SkuFamily { get;  }
        /// <summary>The name of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the peering SKU.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>The size of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The size of the peering SKU.",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Free", "Metered", "Unlimited")]
        string SkuSize { get;  }
        /// <summary>The tier of the peering SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The tier of the peering SKU.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Basic", "Premium")]
        string SkuTier { get;  }
        /// <summary>The resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The resource tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringTags Tag { get; set; }

    }
    /// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
    internal partial interface IPeeringInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IResourceInternal
    {
        /// <summary>The properties that define a direct peering.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesDirect Direct { get; set; }
        /// <summary>The set of connections that constitute a direct peering.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IDirectConnection> DirectConnection { get; set; }
        /// <summary>The reference of the peer ASN.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.ISubResource DirectPeerAsn { get; set; }
        /// <summary>The identifier of the referenced resource.</summary>
        string DirectPeerAsnId { get; set; }
        /// <summary>The type of direct peering.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Edge", "Transit", "Cdn", "Internal", "Ix", "IxRs", "Voice", "EdgeZoneForOperators")]
        string DirectPeeringType { get; set; }
        /// <summary>The flag that indicates whether or not the peering is used for peering service.</summary>
        bool? DirectUseForPeeringService { get; set; }
        /// <summary>The properties that define an exchange peering.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringPropertiesExchange Exchange { get; set; }
        /// <summary>The set of connections that constitute an exchange peering.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IExchangeConnection> ExchangeConnection { get; set; }
        /// <summary>The reference of the peer ASN.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.ISubResource ExchangePeerAsn { get; set; }
        /// <summary>The identifier of the referenced resource.</summary>
        string ExchangePeerAsnId { get; set; }
        /// <summary>The kind of the peering.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Direct", "Exchange")]
        string Kind { get; set; }
        /// <summary>The location of the resource.</summary>
        string Location { get; set; }
        /// <summary>The location of the peering.</summary>
        string PeeringLocation { get; set; }
        /// <summary>The properties that define a peering.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringProperties Property { get; set; }
        /// <summary>The provisioning state of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Succeeded", "Updating", "Deleting", "Failed")]
        string ProvisioningState { get; set; }
        /// <summary>The SKU that defines the tier and kind of the peering.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringSku Sku { get; set; }
        /// <summary>The family of the peering SKU.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Direct", "Exchange")]
        string SkuFamily { get; set; }
        /// <summary>The name of the peering SKU.</summary>
        string SkuName { get; set; }
        /// <summary>The size of the peering SKU.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Free", "Metered", "Unlimited")]
        string SkuSize { get; set; }
        /// <summary>The tier of the peering SKU.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Peering.PSArgumentCompleterAttribute("Basic", "Premium")]
        string SkuTier { get; set; }
        /// <summary>The resource tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.IPeeringTags Tag { get; set; }

    }
}