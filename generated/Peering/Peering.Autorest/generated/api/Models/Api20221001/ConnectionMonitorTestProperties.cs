// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Extensions;

    /// <summary>The properties that define a Connection Monitor Test.</summary>
    public partial class ConnectionMonitorTestProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IConnectionMonitorTestProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IConnectionMonitorTestPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Destination" /> property.</summary>
        private string _destination;

        /// <summary>The Connection Monitor test destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public string Destination { get => this._destination; set => this._destination = value; }

        /// <summary>Backing field for <see cref="DestinationPort" /> property.</summary>
        private int? _destinationPort;

        /// <summary>The Connection Monitor test destination port</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public int? DestinationPort { get => this._destinationPort; set => this._destinationPort = value; }

        /// <summary>Backing field for <see cref="IsTestSuccessful" /> property.</summary>
        private bool? _isTestSuccessful;

        /// <summary>The flag that indicates if the Connection Monitor test is successful or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public bool? IsTestSuccessful { get => this._isTestSuccessful; }

        /// <summary>Internal Acessors for IsTestSuccessful</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IConnectionMonitorTestPropertiesInternal.IsTestSuccessful { get => this._isTestSuccessful; set { {_isTestSuccessful = value;} } }

        /// <summary>Internal Acessors for Path</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IConnectionMonitorTestPropertiesInternal.Path { get => this._path; set { {_path = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Peering.Models.Api20221001.IConnectionMonitorTestPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Backing field for <see cref="Path" /> property.</summary>
        private string[] _path;

        /// <summary>The path representing the Connection Monitor test.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public string[] Path { get => this._path; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ProvisioningState? _provisioningState;

        /// <summary>The provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="SourceAgent" /> property.</summary>
        private string _sourceAgent;

        /// <summary>The Connection Monitor test source agent</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public string SourceAgent { get => this._sourceAgent; set => this._sourceAgent = value; }

        /// <summary>Backing field for <see cref="TestFrequencyInSec" /> property.</summary>
        private int? _testFrequencyInSec;

        /// <summary>The Connection Monitor test frequency in seconds</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Origin(Microsoft.Azure.PowerShell.Cmdlets.Peering.PropertyOrigin.Owned)]
        public int? TestFrequencyInSec { get => this._testFrequencyInSec; set => this._testFrequencyInSec = value; }

        /// <summary>Creates an new <see cref="ConnectionMonitorTestProperties" /> instance.</summary>
        public ConnectionMonitorTestProperties()
        {

        }
    }
    /// The properties that define a Connection Monitor Test.
    public partial interface IConnectionMonitorTestProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.IJsonSerializable
    {
        /// <summary>The Connection Monitor test destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Connection Monitor test destination",
        SerializedName = @"destination",
        PossibleTypes = new [] { typeof(string) })]
        string Destination { get; set; }
        /// <summary>The Connection Monitor test destination port</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Connection Monitor test destination port",
        SerializedName = @"destinationPort",
        PossibleTypes = new [] { typeof(int) })]
        int? DestinationPort { get; set; }
        /// <summary>The flag that indicates if the Connection Monitor test is successful or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The flag that indicates if the Connection Monitor test is successful or not.",
        SerializedName = @"isTestSuccessful",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsTestSuccessful { get;  }
        /// <summary>The path representing the Connection Monitor test.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The path representing the Connection Monitor test.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string[] Path { get;  }
        /// <summary>The provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>The Connection Monitor test source agent</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Connection Monitor test source agent",
        SerializedName = @"sourceAgent",
        PossibleTypes = new [] { typeof(string) })]
        string SourceAgent { get; set; }
        /// <summary>The Connection Monitor test frequency in seconds</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Peering.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Connection Monitor test frequency in seconds",
        SerializedName = @"testFrequencyInSec",
        PossibleTypes = new [] { typeof(int) })]
        int? TestFrequencyInSec { get; set; }

    }
    /// The properties that define a Connection Monitor Test.
    internal partial interface IConnectionMonitorTestPropertiesInternal

    {
        /// <summary>The Connection Monitor test destination</summary>
        string Destination { get; set; }
        /// <summary>The Connection Monitor test destination port</summary>
        int? DestinationPort { get; set; }
        /// <summary>The flag that indicates if the Connection Monitor test is successful or not.</summary>
        bool? IsTestSuccessful { get; set; }
        /// <summary>The path representing the Connection Monitor test.</summary>
        string[] Path { get; set; }
        /// <summary>The provisioning state of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Peering.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>The Connection Monitor test source agent</summary>
        string SourceAgent { get; set; }
        /// <summary>The Connection Monitor test frequency in seconds</summary>
        int? TestFrequencyInSec { get; set; }

    }
}