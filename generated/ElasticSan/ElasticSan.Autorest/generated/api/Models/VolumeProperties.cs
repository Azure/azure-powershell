// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Extensions;

    /// <summary>Volume response properties.</summary>
    [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.DoNotFormat]
    public partial class VolumeProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumeProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal
    {

        /// <summary>Backing field for <see cref="CreationData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationData _creationData;

        /// <summary>State of the operation on the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationData CreationData { get => (this._creationData = this._creationData ?? new Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.SourceCreationData()); set => this._creationData = value; }

        /// <summary>This enumerates the possible sources of a volume creation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string CreationDataCreateSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationDataInternal)CreationData).CreateSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationDataInternal)CreationData).CreateSource = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string CreationDataSourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationDataInternal)CreationData).SourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationDataInternal)CreationData).SourceId = value ?? null; }

        /// <summary>Backing field for <see cref="ManagedBy" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IManagedByInfo _managedBy;

        /// <summary>Parent resource information.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IManagedByInfo ManagedBy { get => (this._managedBy = this._managedBy ?? new Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ManagedByInfo()); set => this._managedBy = value; }

        /// <summary>Resource ID of the resource managing the volume.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string ManagedByResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IManagedByInfoInternal)ManagedBy).ResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IManagedByInfoInternal)ManagedBy).ResourceId = value ?? null; }

        /// <summary>Internal Acessors for CreationData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationData Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.CreationData { get => (this._creationData = this._creationData ?? new Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.SourceCreationData()); set { {_creationData = value;} } }

        /// <summary>Internal Acessors for ManagedBy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IManagedByInfo Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.ManagedBy { get => (this._managedBy = this._managedBy ?? new Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ManagedByInfo()); set { {_managedBy = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for StorageTarget</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfo Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.StorageTarget { get => (this._storageTarget = this._storageTarget ?? new Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IscsiTargetInfo()); set { {_storageTarget = value;} } }

        /// <summary>Internal Acessors for StorageTargetIqn</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.StorageTargetIqn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetIqn; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetIqn = value; }

        /// <summary>Internal Acessors for StorageTargetPortalHostname</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.StorageTargetPortalHostname { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetPortalHostname; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetPortalHostname = value; }

        /// <summary>Internal Acessors for StorageTargetPortalPort</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.StorageTargetPortalPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetPortalPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetPortalPort = value; }

        /// <summary>Internal Acessors for StorageTargetProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.StorageTargetProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).ProvisioningState = value; }

        /// <summary>Internal Acessors for VolumeId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IVolumePropertiesInternal.VolumeId { get => this._volumeId; set { {_volumeId = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>State of the operation on the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="SizeGiB" /> property.</summary>
        private long _sizeGiB;

        /// <summary>Volume size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Owned)]
        public long SizeGiB { get => this._sizeGiB; set => this._sizeGiB = value; }

        /// <summary>Backing field for <see cref="StorageTarget" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfo _storageTarget;

        /// <summary>Storage target information</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfo StorageTarget { get => (this._storageTarget = this._storageTarget ?? new Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IscsiTargetInfo()); }

        /// <summary>
        /// iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string StorageTargetIqn { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetIqn; }

        /// <summary>iSCSI Target Portal Host Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string StorageTargetPortalHostname { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetPortalHostname; }

        /// <summary>iSCSI Target Portal Port</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public int? StorageTargetPortalPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).TargetPortalPort; }

        /// <summary>State of the operation on the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string StorageTargetProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).ProvisioningState; }

        /// <summary>Operational status of the iSCSI Target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Inlined)]
        public string StorageTargetStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfoInternal)StorageTarget).Status = value ?? null; }

        /// <summary>Backing field for <see cref="VolumeId" /> property.</summary>
        private string _volumeId;

        /// <summary>Unique Id of the volume in GUID format</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Origin(Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PropertyOrigin.Owned)]
        public string VolumeId { get => this._volumeId; }

        /// <summary>Creates an new <see cref="VolumeProperties" /> instance.</summary>
        public VolumeProperties()
        {

        }
    }
    /// Volume response properties.
    public partial interface IVolumeProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.IJsonSerializable
    {
        /// <summary>This enumerates the possible sources of a volume creation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This enumerates the possible sources of a volume creation.",
        SerializedName = @"createSource",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("None", "VolumeSnapshot", "DiskSnapshot", "Disk", "DiskRestorePoint")]
        string CreationDataCreateSource { get; set; }
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Fully qualified resource ID for the resource. E.g. ""/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}""",
        SerializedName = @"sourceId",
        PossibleTypes = new [] { typeof(string) })]
        string CreationDataSourceId { get; set; }
        /// <summary>Resource ID of the resource managing the volume.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID of the resource managing the volume.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ManagedByResourceId { get; set; }
        /// <summary>State of the operation on the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"State of the operation on the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("Invalid", "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", "Deleting")]
        string ProvisioningState { get;  }
        /// <summary>Volume size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Volume size.",
        SerializedName = @"sizeGiB",
        PossibleTypes = new [] { typeof(long) })]
        long SizeGiB { get; set; }
        /// <summary>
        /// iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"iSCSI Target IQN (iSCSI Qualified Name); example: ""iqn.2005-03.org.iscsi:server"".",
        SerializedName = @"targetIqn",
        PossibleTypes = new [] { typeof(string) })]
        string StorageTargetIqn { get;  }
        /// <summary>iSCSI Target Portal Host Name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"iSCSI Target Portal Host Name",
        SerializedName = @"targetPortalHostname",
        PossibleTypes = new [] { typeof(string) })]
        string StorageTargetPortalHostname { get;  }
        /// <summary>iSCSI Target Portal Port</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"iSCSI Target Portal Port",
        SerializedName = @"targetPortalPort",
        PossibleTypes = new [] { typeof(int) })]
        int? StorageTargetPortalPort { get;  }
        /// <summary>State of the operation on the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"State of the operation on the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("Invalid", "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", "Deleting")]
        string StorageTargetProvisioningState { get;  }
        /// <summary>Operational status of the iSCSI Target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Operational status of the iSCSI Target.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("Invalid", "Unknown", "Healthy", "Unhealthy", "Updating", "Running", "Stopped", "Stopped (deallocated)")]
        string StorageTargetStatus { get;  }
        /// <summary>Unique Id of the volume in GUID format</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Unique Id of the volume in GUID format",
        SerializedName = @"volumeId",
        PossibleTypes = new [] { typeof(string) })]
        string VolumeId { get;  }

    }
    /// Volume response properties.
    internal partial interface IVolumePropertiesInternal

    {
        /// <summary>State of the operation on the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.ISourceCreationData CreationData { get; set; }
        /// <summary>This enumerates the possible sources of a volume creation.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("None", "VolumeSnapshot", "DiskSnapshot", "Disk", "DiskRestorePoint")]
        string CreationDataCreateSource { get; set; }
        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        string CreationDataSourceId { get; set; }
        /// <summary>Parent resource information.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IManagedByInfo ManagedBy { get; set; }
        /// <summary>Resource ID of the resource managing the volume.</summary>
        string ManagedByResourceId { get; set; }
        /// <summary>State of the operation on the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("Invalid", "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", "Deleting")]
        string ProvisioningState { get; set; }
        /// <summary>Volume size.</summary>
        long SizeGiB { get; set; }
        /// <summary>Storage target information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.Models.IIscsiTargetInfo StorageTarget { get; set; }
        /// <summary>
        /// iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server".
        /// </summary>
        string StorageTargetIqn { get; set; }
        /// <summary>iSCSI Target Portal Host Name</summary>
        string StorageTargetPortalHostname { get; set; }
        /// <summary>iSCSI Target Portal Port</summary>
        int? StorageTargetPortalPort { get; set; }
        /// <summary>State of the operation on the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("Invalid", "Succeeded", "Failed", "Canceled", "Pending", "Creating", "Updating", "Deleting")]
        string StorageTargetProvisioningState { get; set; }
        /// <summary>Operational status of the iSCSI Target.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ElasticSan.PSArgumentCompleterAttribute("Invalid", "Unknown", "Healthy", "Unhealthy", "Updating", "Running", "Stopped", "Stopped (deallocated)")]
        string StorageTargetStatus { get; set; }
        /// <summary>Unique Id of the volume in GUID format</summary>
        string VolumeId { get; set; }

    }
}