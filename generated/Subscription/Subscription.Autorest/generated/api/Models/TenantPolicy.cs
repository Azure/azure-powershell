// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Extensions;

    /// <summary>Tenant policy.</summary>
    public partial class TenantPolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.ITenantPolicy,
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.ITenantPolicyInternal
    {

        /// <summary>Backing field for <see cref="BlockSubscriptionsIntoTenant" /> property.</summary>
        private bool? _blockSubscriptionsIntoTenant;

        /// <summary>Blocks the entering of subscriptions into user's tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public bool? BlockSubscriptionsIntoTenant { get => this._blockSubscriptionsIntoTenant; set => this._blockSubscriptionsIntoTenant = value; }

        /// <summary>Backing field for <see cref="BlockSubscriptionsLeavingTenant" /> property.</summary>
        private bool? _blockSubscriptionsLeavingTenant;

        /// <summary>Blocks the leaving of subscriptions from user's tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public bool? BlockSubscriptionsLeavingTenant { get => this._blockSubscriptionsLeavingTenant; set => this._blockSubscriptionsLeavingTenant = value; }

        /// <summary>Backing field for <see cref="ExemptedPrincipal" /> property.</summary>
        private System.Collections.Generic.List<string> _exemptedPrincipal;

        /// <summary>
        /// List of user objectIds that are exempted from the set subscription tenant policies for the user's tenant.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> ExemptedPrincipal { get => this._exemptedPrincipal; set => this._exemptedPrincipal = value; }

        /// <summary>Internal Acessors for PolicyId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Subscription.Models.ITenantPolicyInternal.PolicyId { get => this._policyId; set { {_policyId = value;} } }

        /// <summary>Backing field for <see cref="PolicyId" /> property.</summary>
        private string _policyId;

        /// <summary>Policy Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Origin(Microsoft.Azure.PowerShell.Cmdlets.Subscription.PropertyOrigin.Owned)]
        public string PolicyId { get => this._policyId; }

        /// <summary>Creates an new <see cref="TenantPolicy" /> instance.</summary>
        public TenantPolicy()
        {

        }
    }
    /// Tenant policy.
    public partial interface ITenantPolicy :
        Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.IJsonSerializable
    {
        /// <summary>Blocks the entering of subscriptions into user's tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Blocks the entering of subscriptions into user's tenant.",
        SerializedName = @"blockSubscriptionsIntoTenant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BlockSubscriptionsIntoTenant { get; set; }
        /// <summary>Blocks the leaving of subscriptions from user's tenant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Blocks the leaving of subscriptions from user's tenant.",
        SerializedName = @"blockSubscriptionsLeavingTenant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? BlockSubscriptionsLeavingTenant { get; set; }
        /// <summary>
        /// List of user objectIds that are exempted from the set subscription tenant policies for the user's tenant.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of user objectIds that are exempted from the set subscription tenant policies for the user's tenant.",
        SerializedName = @"exemptedPrincipals",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ExemptedPrincipal { get; set; }
        /// <summary>Policy Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Subscription.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Policy Id.",
        SerializedName = @"policyId",
        PossibleTypes = new [] { typeof(string) })]
        string PolicyId { get;  }

    }
    /// Tenant policy.
    internal partial interface ITenantPolicyInternal

    {
        /// <summary>Blocks the entering of subscriptions into user's tenant.</summary>
        bool? BlockSubscriptionsIntoTenant { get; set; }
        /// <summary>Blocks the leaving of subscriptions from user's tenant.</summary>
        bool? BlockSubscriptionsLeavingTenant { get; set; }
        /// <summary>
        /// List of user objectIds that are exempted from the set subscription tenant policies for the user's tenant.
        /// </summary>
        System.Collections.Generic.List<string> ExemptedPrincipal { get; set; }
        /// <summary>Policy Id.</summary>
        string PolicyId { get; set; }

    }
}