// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Extensions;

    /// <summary>NetworkFeatures resource specific properties</summary>
    public partial class NetworkFeaturesProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal
    {

        /// <summary>Backing field for <see cref="HybridConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IRelayServiceConnectionEntity[] _hybridConnection;

        /// <summary>The Hybrid Connections summary view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IRelayServiceConnectionEntity[] HybridConnection { get => this._hybridConnection; }

        /// <summary>Backing field for <see cref="HybridConnectionsV2" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IHybridConnection[] _hybridConnectionsV2;

        /// <summary>The Hybrid Connection V2 (Service Bus) view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IHybridConnection[] HybridConnectionsV2 { get => this._hybridConnectionsV2; }

        /// <summary>Internal Acessors for HybridConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IRelayServiceConnectionEntity[] Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.HybridConnection { get => this._hybridConnection; set { {_hybridConnection = value;} } }

        /// <summary>Internal Acessors for HybridConnectionsV2</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IHybridConnection[] Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.HybridConnectionsV2 { get => this._hybridConnectionsV2; set { {_hybridConnectionsV2 = value;} } }

        /// <summary>Internal Acessors for VirtualNetworkConnection</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfo Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.VirtualNetworkConnection { get => (this._virtualNetworkConnection = this._virtualNetworkConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.VnetInfo()); set { {_virtualNetworkConnection = value;} } }

        /// <summary>Internal Acessors for VirtualNetworkConnectionCertThumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.VirtualNetworkConnectionCertThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).CertThumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).CertThumbprint = value; }

        /// <summary>Internal Acessors for VirtualNetworkConnectionResyncRequired</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.VirtualNetworkConnectionResyncRequired { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).ResyncRequired; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).ResyncRequired = value; }

        /// <summary>Internal Acessors for VirtualNetworkConnectionRoute</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetRoute[] Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.VirtualNetworkConnectionRoute { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).Route; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).Route = value; }

        /// <summary>Internal Acessors for VirtualNetworkName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.INetworkFeaturesPropertiesInternal.VirtualNetworkName { get => this._virtualNetworkName; set { {_virtualNetworkName = value;} } }

        /// <summary>Backing field for <see cref="VirtualNetworkConnection" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfo _virtualNetworkConnection;

        /// <summary>The Virtual Network summary view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfo VirtualNetworkConnection { get => (this._virtualNetworkConnection = this._virtualNetworkConnection ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.VnetInfo()); }

        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
        /// Point-To-Site VPN connection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string VirtualNetworkConnectionCertBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).CertBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).CertBlob = value ?? null; }

        /// <summary>The client certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string VirtualNetworkConnectionCertThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).CertThumbprint; }

        /// <summary>
        /// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string VirtualNetworkConnectionDnsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).DnsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).DnsServer = value ?? null; }

        /// <summary>Flag that is used to denote if this is VNET injection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public bool? VirtualNetworkConnectionIsSwift { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).IsSwift; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).IsSwift = value ?? default(bool); }

        /// <summary><code>true</code> if a resync is required; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public bool? VirtualNetworkConnectionResyncRequired { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).ResyncRequired; }

        /// <summary>The routes that this Virtual Network connection uses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetRoute[] VirtualNetworkConnectionRoute { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).Route; }

        /// <summary>The Virtual Network's resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string VirtualNetworkConnectionVnetResourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).VnetResourceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfoInternal)VirtualNetworkConnection).VnetResourceId = value ?? null; }

        /// <summary>Backing field for <see cref="VirtualNetworkName" /> property.</summary>
        private string _virtualNetworkName;

        /// <summary>The Virtual Network name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public string VirtualNetworkName { get => this._virtualNetworkName; }

        /// <summary>Creates an new <see cref="NetworkFeaturesProperties" /> instance.</summary>
        public NetworkFeaturesProperties()
        {

        }
    }
    /// NetworkFeatures resource specific properties
    public partial interface INetworkFeaturesProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.IJsonSerializable
    {
        /// <summary>The Hybrid Connections summary view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Hybrid Connections summary view.",
        SerializedName = @"hybridConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IRelayServiceConnectionEntity) })]
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IRelayServiceConnectionEntity[] HybridConnection { get;  }
        /// <summary>The Hybrid Connection V2 (Service Bus) view.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Hybrid Connection V2 (Service Bus) view.",
        SerializedName = @"hybridConnectionsV2",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IHybridConnection) })]
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IHybridConnection[] HybridConnectionsV2 { get;  }
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
        /// Point-To-Site VPN connection.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A certificate file (.cer) blob containing the public key of the private key used to authenticate a
        Point-To-Site VPN connection.",
        SerializedName = @"certBlob",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkConnectionCertBlob { get; set; }
        /// <summary>The client certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The client certificate thumbprint.",
        SerializedName = @"certThumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkConnectionCertThumbprint { get;  }
        /// <summary>
        /// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.",
        SerializedName = @"dnsServers",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkConnectionDnsServer { get; set; }
        /// <summary>Flag that is used to denote if this is VNET injection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag that is used to denote if this is VNET injection",
        SerializedName = @"isSwift",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VirtualNetworkConnectionIsSwift { get; set; }
        /// <summary><code>true</code> if a resync is required; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"<code>true</code> if a resync is required; otherwise, <code>false</code>.",
        SerializedName = @"resyncRequired",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VirtualNetworkConnectionResyncRequired { get;  }
        /// <summary>The routes that this Virtual Network connection uses.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The routes that this Virtual Network connection uses.",
        SerializedName = @"routes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetRoute) })]
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetRoute[] VirtualNetworkConnectionRoute { get;  }
        /// <summary>The Virtual Network's resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Virtual Network's resource ID.",
        SerializedName = @"vnetResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkConnectionVnetResourceId { get; set; }
        /// <summary>The Virtual Network name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The Virtual Network name.",
        SerializedName = @"virtualNetworkName",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualNetworkName { get;  }

    }
    /// NetworkFeatures resource specific properties
    internal partial interface INetworkFeaturesPropertiesInternal

    {
        /// <summary>The Hybrid Connections summary view.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IRelayServiceConnectionEntity[] HybridConnection { get; set; }
        /// <summary>The Hybrid Connection V2 (Service Bus) view.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IHybridConnection[] HybridConnectionsV2 { get; set; }
        /// <summary>The Virtual Network summary view.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetInfo VirtualNetworkConnection { get; set; }
        /// <summary>
        /// A certificate file (.cer) blob containing the public key of the private key used to authenticate a
        /// Point-To-Site VPN connection.
        /// </summary>
        string VirtualNetworkConnectionCertBlob { get; set; }
        /// <summary>The client certificate thumbprint.</summary>
        string VirtualNetworkConnectionCertThumbprint { get; set; }
        /// <summary>
        /// DNS servers to be used by this Virtual Network. This should be a comma-separated list of IP addresses.
        /// </summary>
        string VirtualNetworkConnectionDnsServer { get; set; }
        /// <summary>Flag that is used to denote if this is VNET injection</summary>
        bool? VirtualNetworkConnectionIsSwift { get; set; }
        /// <summary><code>true</code> if a resync is required; otherwise, <code>false</code>.</summary>
        bool? VirtualNetworkConnectionResyncRequired { get; set; }
        /// <summary>The routes that this Virtual Network connection uses.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IVnetRoute[] VirtualNetworkConnectionRoute { get; set; }
        /// <summary>The Virtual Network's resource ID.</summary>
        string VirtualNetworkConnectionVnetResourceId { get; set; }
        /// <summary>The Virtual Network name.</summary>
        string VirtualNetworkName { get; set; }

    }
}