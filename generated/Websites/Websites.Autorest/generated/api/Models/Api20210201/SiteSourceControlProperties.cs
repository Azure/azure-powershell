// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Extensions;

    /// <summary>SiteSourceControl resource specific properties</summary>
    public partial class SiteSourceControlProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ISiteSourceControlProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ISiteSourceControlPropertiesInternal
    {

        /// <summary>Backing field for <see cref="Branch" /> property.</summary>
        private string _branch;

        /// <summary>Name of branch to use for deployment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public string Branch { get => this._branch; set => this._branch = value; }

        /// <summary>
        /// Runtime stack is used to determine the workflow file content for code base apps.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string CodeConfigurationRuntimeStack { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).CodeConfigurationRuntimeStack; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).CodeConfigurationRuntimeStack = value ?? null; }

        /// <summary>
        /// Runtime version is used to determine what build version to set in the workflow file.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string CodeConfigurationRuntimeVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).CodeConfigurationRuntimeVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).CodeConfigurationRuntimeVersion = value ?? null; }

        /// <summary>The image name for the build.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string ContainerConfigurationImageName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationImageName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationImageName = value ?? null; }

        /// <summary>The password used to upload the image to the container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string ContainerConfigurationPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationPassword = value ?? null; }

        /// <summary>The server URL for the container registry where the build will be hosted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string ContainerConfigurationServerUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationServerUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationServerUrl = value ?? null; }

        /// <summary>The username used to upload the image to the container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public string ContainerConfigurationUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfigurationUsername = value ?? null; }

        /// <summary>Backing field for <see cref="DeploymentRollbackEnabled" /> property.</summary>
        private bool? _deploymentRollbackEnabled;

        /// <summary><code>true</code> to enable deployment rollback; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public bool? DeploymentRollbackEnabled { get => this._deploymentRollbackEnabled; set => this._deploymentRollbackEnabled = value; }

        /// <summary>Backing field for <see cref="GitHubActionConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfiguration _gitHubActionConfiguration;

        /// <summary>If GitHub Action is selected, than the associated configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfiguration GitHubActionConfiguration { get => (this._gitHubActionConfiguration = this._gitHubActionConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.GitHubActionConfiguration()); set => this._gitHubActionConfiguration = value; }

        /// <summary>
        /// Workflow option to determine whether the workflow file should be generated and written to the repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public bool? GitHubActionConfigurationGenerateWorkflowFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).GenerateWorkflowFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).GenerateWorkflowFile = value ?? default(bool); }

        /// <summary>This will help determine the workflow configuration to select.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Inlined)]
        public bool? GitHubActionConfigurationIsLinux { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).IsLinux; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).IsLinux = value ?? default(bool); }

        /// <summary>Backing field for <see cref="IsGitHubAction" /> property.</summary>
        private bool? _isGitHubAction;

        /// <summary><code>true</code> if this is deployed via GitHub action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public bool? IsGitHubAction { get => this._isGitHubAction; set => this._isGitHubAction = value; }

        /// <summary>Backing field for <see cref="IsManualIntegration" /> property.</summary>
        private bool? _isManualIntegration;

        /// <summary>
        /// <code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures
        /// webhooks into online repos like GitHub).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public bool? IsManualIntegration { get => this._isManualIntegration; set => this._isManualIntegration = value; }

        /// <summary>Backing field for <see cref="IsMercurial" /> property.</summary>
        private bool? _isMercurial;

        /// <summary>
        /// <code>true</code> for a Mercurial repository; <code>false</code> for a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public bool? IsMercurial { get => this._isMercurial; set => this._isMercurial = value; }

        /// <summary>Internal Acessors for GitHubActionConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfiguration Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ISiteSourceControlPropertiesInternal.GitHubActionConfiguration { get => (this._gitHubActionConfiguration = this._gitHubActionConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.GitHubActionConfiguration()); set { {_gitHubActionConfiguration = value;} } }

        /// <summary>Internal Acessors for GitHubActionConfigurationCodeConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionCodeConfiguration Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ISiteSourceControlPropertiesInternal.GitHubActionConfigurationCodeConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).CodeConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).CodeConfiguration = value; }

        /// <summary>Internal Acessors for GitHubActionConfigurationContainerConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionContainerConfiguration Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.ISiteSourceControlPropertiesInternal.GitHubActionConfigurationContainerConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfigurationInternal)GitHubActionConfiguration).ContainerConfiguration = value; }

        /// <summary>Backing field for <see cref="RepoUrl" /> property.</summary>
        private string _repoUrl;

        /// <summary>Repository or source control URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Origin(Microsoft.Azure.PowerShell.Cmdlets.Websites.PropertyOrigin.Owned)]
        public string RepoUrl { get => this._repoUrl; set => this._repoUrl = value; }

        /// <summary>Creates an new <see cref="SiteSourceControlProperties" /> instance.</summary>
        public SiteSourceControlProperties()
        {

        }
    }
    /// SiteSourceControl resource specific properties
    public partial interface ISiteSourceControlProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.IJsonSerializable
    {
        /// <summary>Name of branch to use for deployment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of branch to use for deployment.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string Branch { get; set; }
        /// <summary>
        /// Runtime stack is used to determine the workflow file content for code base apps.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Runtime stack is used to determine the workflow file content for code base apps.",
        SerializedName = @"runtimeStack",
        PossibleTypes = new [] { typeof(string) })]
        string CodeConfigurationRuntimeStack { get; set; }
        /// <summary>
        /// Runtime version is used to determine what build version to set in the workflow file.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Runtime version is used to determine what build version to set in the workflow file.",
        SerializedName = @"runtimeVersion",
        PossibleTypes = new [] { typeof(string) })]
        string CodeConfigurationRuntimeVersion { get; set; }
        /// <summary>The image name for the build.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image name for the build.",
        SerializedName = @"imageName",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerConfigurationImageName { get; set; }
        /// <summary>The password used to upload the image to the container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password used to upload the image to the container registry.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerConfigurationPassword { get; set; }
        /// <summary>The server URL for the container registry where the build will be hosted.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The server URL for the container registry where the build will be hosted.",
        SerializedName = @"serverUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerConfigurationServerUrl { get; set; }
        /// <summary>The username used to upload the image to the container registry.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The username used to upload the image to the container registry.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerConfigurationUsername { get; set; }
        /// <summary><code>true</code> to enable deployment rollback; otherwise, <code>false</code>.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> to enable deployment rollback; otherwise, <code>false</code>.",
        SerializedName = @"deploymentRollbackEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DeploymentRollbackEnabled { get; set; }
        /// <summary>
        /// Workflow option to determine whether the workflow file should be generated and written to the repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Workflow option to determine whether the workflow file should be generated and written to the repository.",
        SerializedName = @"generateWorkflowFile",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GitHubActionConfigurationGenerateWorkflowFile { get; set; }
        /// <summary>This will help determine the workflow configuration to select.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This will help determine the workflow configuration to select.",
        SerializedName = @"isLinux",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GitHubActionConfigurationIsLinux { get; set; }
        /// <summary><code>true</code> if this is deployed via GitHub action.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> if this is deployed via GitHub action.",
        SerializedName = @"isGitHubAction",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsGitHubAction { get; set; }
        /// <summary>
        /// <code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures
        /// webhooks into online repos like GitHub).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures webhooks into online repos like GitHub).",
        SerializedName = @"isManualIntegration",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsManualIntegration { get; set; }
        /// <summary>
        /// <code>true</code> for a Mercurial repository; <code>false</code> for a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"<code>true</code> for a Mercurial repository; <code>false</code> for a Git repository.",
        SerializedName = @"isMercurial",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsMercurial { get; set; }
        /// <summary>Repository or source control URL.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Websites.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Repository or source control URL.",
        SerializedName = @"repoUrl",
        PossibleTypes = new [] { typeof(string) })]
        string RepoUrl { get; set; }

    }
    /// SiteSourceControl resource specific properties
    internal partial interface ISiteSourceControlPropertiesInternal

    {
        /// <summary>Name of branch to use for deployment.</summary>
        string Branch { get; set; }
        /// <summary>
        /// Runtime stack is used to determine the workflow file content for code base apps.
        /// </summary>
        string CodeConfigurationRuntimeStack { get; set; }
        /// <summary>
        /// Runtime version is used to determine what build version to set in the workflow file.
        /// </summary>
        string CodeConfigurationRuntimeVersion { get; set; }
        /// <summary>The image name for the build.</summary>
        string ContainerConfigurationImageName { get; set; }
        /// <summary>The password used to upload the image to the container registry.</summary>
        string ContainerConfigurationPassword { get; set; }
        /// <summary>The server URL for the container registry where the build will be hosted.</summary>
        string ContainerConfigurationServerUrl { get; set; }
        /// <summary>The username used to upload the image to the container registry.</summary>
        string ContainerConfigurationUsername { get; set; }
        /// <summary><code>true</code> to enable deployment rollback; otherwise, <code>false</code>.</summary>
        bool? DeploymentRollbackEnabled { get; set; }
        /// <summary>If GitHub Action is selected, than the associated configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionConfiguration GitHubActionConfiguration { get; set; }
        /// <summary>GitHub Action code configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionCodeConfiguration GitHubActionConfigurationCodeConfiguration { get; set; }
        /// <summary>GitHub Action container configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Websites.Models.Api20210201.IGitHubActionContainerConfiguration GitHubActionConfigurationContainerConfiguration { get; set; }
        /// <summary>
        /// Workflow option to determine whether the workflow file should be generated and written to the repository.
        /// </summary>
        bool? GitHubActionConfigurationGenerateWorkflowFile { get; set; }
        /// <summary>This will help determine the workflow configuration to select.</summary>
        bool? GitHubActionConfigurationIsLinux { get; set; }
        /// <summary><code>true</code> if this is deployed via GitHub action.</summary>
        bool? IsGitHubAction { get; set; }
        /// <summary>
        /// <code>true</code> to limit to manual integration; <code>false</code> to enable continuous integration (which configures
        /// webhooks into online repos like GitHub).
        /// </summary>
        bool? IsManualIntegration { get; set; }
        /// <summary>
        /// <code>true</code> for a Mercurial repository; <code>false</code> for a Git repository.
        /// </summary>
        bool? IsMercurial { get; set; }
        /// <summary>Repository or source control URL.</summary>
        string RepoUrl { get; set; }

    }
}