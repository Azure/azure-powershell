// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Extensions;

    /// <summary>Response for Resource detailed carbon emissions</summary>
    public partial class ResourceCarbonEmissionItemDetailData :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IResourceCarbonEmissionItemDetailData,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IResourceCarbonEmissionItemDetailDataInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionData" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionData __carbonEmissionData = new Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.CarbonEmissionData();

        /// <summary>Backing field for <see cref="CategoryType" /> property.</summary>
        private string _categoryType;

        /// <summary>Resource Item category, see supported value defined in CategoryTypeEnum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string CategoryType { get => this._categoryType; set => this._categoryType = value; }

        /// <summary>
        /// The data type of the query result, indicating the format of the returned response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public string DataType { get => "ResourceItemDetailsData"; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).DataType = "ResourceItemDetailsData"; }

        /// <summary>Backing field for <see cref="ItemName" /> property.</summary>
        private string _itemName;

        /// <summary>It's resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string ItemName { get => this._itemName; set => this._itemName = value; }

        /// <summary>
        /// Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over
        /// the specified date range (e.g., March-June).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double LatestMonthEmission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).LatestMonthEmission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).LatestMonthEmission = value ; }

        /// <summary>Backing field for <see cref="Location" /> property.</summary>
        private string _location;

        /// <summary>Resource Location (e.g., 'east us').</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string Location { get => this._location; set => this._location = value; }

        /// <summary>
        /// The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions
        /// - previousMonthEmissions) / previousMonthEmissions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double? MonthOverMonthEmissionsChangeRatio { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthOverMonthEmissionsChangeRatio; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthOverMonthEmissionsChangeRatio = value ?? default(double); }

        /// <summary>
        /// The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double? MonthlyEmissionsChangeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthlyEmissionsChangeValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthlyEmissionsChangeValue = value ?? default(double); }

        /// <summary>
        /// Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted
        /// left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value
        /// is measured in kgCO2E.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double PreviousMonthEmission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).PreviousMonthEmission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).PreviousMonthEmission = value ; }

        /// <summary>Backing field for <see cref="ResourceGroup" /> property.</summary>
        private string _resourceGroup;

        /// <summary>Resource Group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string ResourceGroup { get => this._resourceGroup; set => this._resourceGroup = value; }

        /// <summary>Backing field for <see cref="ResourceId" /> property.</summary>
        private string _resourceId;

        /// <summary>
        /// The fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string ResourceId { get => this._resourceId; set => this._resourceId = value; }

        /// <summary>Backing field for <see cref="ResourceType" /> property.</summary>
        private string _resourceType;

        /// <summary>The type of resource, for example: microsoft.storage/storageaccounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string ResourceType { get => this._resourceType; set => this._resourceType = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>Subscription Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Creates an new <see cref="ResourceCarbonEmissionItemDetailData" /> instance.</summary>
        public ResourceCarbonEmissionItemDetailData()
        {
            this.__carbonEmissionData.DataType = "ResourceItemDetailsData";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__carbonEmissionData), __carbonEmissionData);
            await eventListener.AssertObjectIsValid(nameof(__carbonEmissionData), __carbonEmissionData);
        }
    }
    /// Response for Resource detailed carbon emissions
    public partial interface IResourceCarbonEmissionItemDetailData :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionData
    {
        /// <summary>Resource Item category, see supported value defined in CategoryTypeEnum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource Item category, see supported value defined in CategoryTypeEnum",
        SerializedName = @"categoryType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("Subscription", "ResourceGroup", "Location", "Resource", "ResourceType")]
        string CategoryType { get; set; }
        /// <summary>It's resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"It's resource name.",
        SerializedName = @"itemName",
        PossibleTypes = new [] { typeof(string) })]
        string ItemName { get; set; }
        /// <summary>Resource Location (e.g., 'east us').</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource Location (e.g., 'east us').",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string Location { get; set; }
        /// <summary>Resource Group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource Group",
        SerializedName = @"resourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceGroup { get; set; }
        /// <summary>
        /// The fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceId { get; set; }
        /// <summary>The type of resource, for example: microsoft.storage/storageaccounts</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of resource, for example: microsoft.storage/storageaccounts",
        SerializedName = @"resourceType",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceType { get; set; }
        /// <summary>Subscription Id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Subscription Id",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get; set; }

    }
    /// Response for Resource detailed carbon emissions
    internal partial interface IResourceCarbonEmissionItemDetailDataInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal
    {
        /// <summary>Resource Item category, see supported value defined in CategoryTypeEnum</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("Subscription", "ResourceGroup", "Location", "Resource", "ResourceType")]
        string CategoryType { get; set; }
        /// <summary>It's resource name.</summary>
        string ItemName { get; set; }
        /// <summary>Resource Location (e.g., 'east us').</summary>
        string Location { get; set; }
        /// <summary>Resource Group</summary>
        string ResourceGroup { get; set; }
        /// <summary>
        /// The fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        string ResourceId { get; set; }
        /// <summary>The type of resource, for example: microsoft.storage/storageaccounts</summary>
        string ResourceType { get; set; }
        /// <summary>Subscription Id</summary>
        string SubscriptionId { get; set; }

    }
}