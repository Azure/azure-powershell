// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Extensions;

    /// <summary>Response for Monthly Carbon Emissions Summary</summary>
    public partial class CarbonEmissionMonthlySummaryData :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionMonthlySummaryData,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionMonthlySummaryDataInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionData" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionData __carbonEmissionData = new Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.CarbonEmissionData();

        /// <summary>Backing field for <see cref="CarbonIntensity" /> property.</summary>
        private double _carbonIntensity;

        /// <summary>
        /// Carbon intensity for the specified month, typically in units of kgCO2E per unit of normalized usage
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public double CarbonIntensity { get => this._carbonIntensity; set => this._carbonIntensity = value; }

        /// <summary>
        /// The data type of the query result, indicating the format of the returned response.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public string DataType { get => "MonthlySummaryData"; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).DataType = "MonthlySummaryData"; }

        /// <summary>Backing field for <see cref="Date" /> property.</summary>
        private string _date;

        /// <summary>
        /// The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g., 2024-03-01)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string Date { get => this._date; set => this._date = value; }

        /// <summary>
        /// Total carbon emissions for the specified query parameters, measured in kgCO2E. This value represents total emissions over
        /// the specified date range (e.g., March-June).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double LatestMonthEmission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).LatestMonthEmission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).LatestMonthEmission = value ; }

        /// <summary>
        /// The percentage change in carbon emissions between the current and previous DateRange. This is calculated as: (latestMonthEmissions
        /// - previousMonthEmissions) / previousMonthEmissions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double? MonthOverMonthEmissionsChangeRatio { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthOverMonthEmissionsChangeRatio; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthOverMonthEmissionsChangeRatio = value ?? default(double); }

        /// <summary>
        /// The change in carbon emissions between the current and previous period, calculated as: latestMonthEmissions - previousMonthEmissions.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double? MonthlyEmissionsChangeValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthlyEmissionsChangeValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).MonthlyEmissionsChangeValue = value ?? default(double); }

        /// <summary>
        /// Total carbon emissions for the previous month’s date range, which is the same period as the specified date range but shifted
        /// left by one month (e.g., if the specified range is March - June, the previous month’s range will be Feb - May). The value
        /// is measured in kgCO2E.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public double PreviousMonthEmission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).PreviousMonthEmission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal)__carbonEmissionData).PreviousMonthEmission = value ; }

        /// <summary>Creates an new <see cref="CarbonEmissionMonthlySummaryData" /> instance.</summary>
        public CarbonEmissionMonthlySummaryData()
        {
            this.__carbonEmissionData.DataType = "MonthlySummaryData";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__carbonEmissionData), __carbonEmissionData);
            await eventListener.AssertObjectIsValid(nameof(__carbonEmissionData), __carbonEmissionData);
        }
    }
    /// Response for Monthly Carbon Emissions Summary
    public partial interface ICarbonEmissionMonthlySummaryData :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionData
    {
        /// <summary>
        /// Carbon intensity for the specified month, typically in units of kgCO2E per unit of normalized usage
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Carbon intensity for the specified month, typically in units of kgCO2E per unit of normalized usage",
        SerializedName = @"carbonIntensity",
        PossibleTypes = new [] { typeof(double) })]
        double CarbonIntensity { get; set; }
        /// <summary>
        /// The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g., 2024-03-01)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g., 2024-03-01)",
        SerializedName = @"date",
        PossibleTypes = new [] { typeof(string) })]
        string Date { get; set; }

    }
    /// Response for Monthly Carbon Emissions Summary
    internal partial interface ICarbonEmissionMonthlySummaryDataInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.ICarbonEmissionDataInternal
    {
        /// <summary>
        /// Carbon intensity for the specified month, typically in units of kgCO2E per unit of normalized usage
        /// </summary>
        double CarbonIntensity { get; set; }
        /// <summary>
        /// The date, representing the month, for which the emissions data is reported, formatted as yyyy-MM-dd (e.g., 2024-03-01)
        /// </summary>
        string Date { get; set; }

    }
}