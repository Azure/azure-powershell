// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Extensions;

    /// <summary>Query Parameters for ItemDetailsReport</summary>
    public partial class ItemDetailsQueryFilter :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IItemDetailsQueryFilter,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IItemDetailsQueryFilterInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilter" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilter __queryFilter = new Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.QueryFilter();

        /// <summary>
        /// List of carbon emission scopes. Required. Accepts one or more values from EmissionScopeEnum (e.g., Scope1, Scope2, Scope3)
        /// in list form. The output will include the total emissions for the specified scopes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> CarbonScopeList { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).CarbonScopeList; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).CarbonScopeList = value ; }

        /// <summary>Backing field for <see cref="CategoryType" /> property.</summary>
        private string _categoryType;

        /// <summary>
        /// Specifies the category type for detailed emissions data, such as Resource, ResourceGroup, ResourceType, Location, or Subscription.
        /// See supported types in CategoryTypeEnum.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string CategoryType { get => this._categoryType; set => this._categoryType = value; }

        /// <summary>
        /// The start and end dates for carbon emissions data. Required. For ItemDetailsReport and TopItemsSummaryReport, only one
        /// month of data is supported at a time, so start and end dates should be equal within DateRange (e.g., start: 2024-06-01
        /// and end: 2024-06-01).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IDateRange DateRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRange = value ?? null /* model class */; }

        /// <summary>
        /// End date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public global::System.DateTime DateRangeEnd { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRangeEnd; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRangeEnd = value ; }

        /// <summary>
        /// Start date parameter in yyyy-MM-01 format. Only the first day of each month is accepted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public global::System.DateTime DateRangeStart { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRangeStart; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRangeStart = value ; }

        /// <summary>
        /// List of locations(Azure Region Display Name) for carbon emissions data, with each location specified in lowercase (e.g.,
        /// 'east us'). Optional. You can use the command 'az account list-locations -o table' to find Azure Region Display Names.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> LocationList { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).LocationList; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).LocationList = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for DateRange</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IDateRange Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal.DateRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).DateRange = value; }

        /// <summary>Backing field for <see cref="OrderBy" /> property.</summary>
        private string _orderBy;

        /// <summary>
        /// The column name to order the results by. See supported values in OrderByColumnEnum.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string OrderBy { get => this._orderBy; set => this._orderBy = value; }

        /// <summary>Backing field for <see cref="PageSize" /> property.</summary>
        private int _pageSize;

        /// <summary>Number of items to return in one request, max value is 5000.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public int PageSize { get => this._pageSize; set => this._pageSize = value; }

        /// <summary>
        /// The ReportType requested for carbon emissions data. Required. Specifies how data is aggregated and displayed in the output,
        /// as explained in the ReportTypeEnum.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public string ReportType { get => "ItemDetailsReport"; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).ReportType = "ItemDetailsReport"; }

        /// <summary>
        /// List of resource group URLs for carbon emissions data. Optional. Each URL must follow the format '/subscriptions/{subscriptionId}/resourcegroups/{resourceGroup}',
        /// and should be in all lowercase.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> ResourceGroupUrlList { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).ResourceGroupUrlList; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).ResourceGroupUrlList = value ?? null /* arrayOf */; }

        /// <summary>
        /// List of resource types for carbon emissions data. Optional. Each resource type should be specified in lowercase, following
        /// the format 'microsoft.{service}/{resourceType}', e.g., 'microsoft.storage/storageaccounts'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> ResourceTypeList { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).ResourceTypeList; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).ResourceTypeList = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SkipToken" /> property.</summary>
        private string _skipToken;

        /// <summary>
        /// Pagination token for fetching the next page of data. This token is nullable and will be returned in the previous response
        /// if additional data pages are available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string SkipToken { get => this._skipToken; set => this._skipToken = value; }

        /// <summary>Backing field for <see cref="SortDirection" /> property.</summary>
        private string _sortDirection;

        /// <summary>Direction for sorting results. See supported values in SortDirectionEnum.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Owned)]
        public string SortDirection { get => this._sortDirection; set => this._sortDirection = value; }

        /// <summary>
        /// List of subscription IDs for which carbon emissions data is requested. Required. Each subscription ID should be in lowercase
        /// format. The max length of list is 100.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Origin(Microsoft.Azure.PowerShell.Cmdlets.Carbon.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> SubscriptionList { get => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).SubscriptionList; set => ((Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal)__queryFilter).SubscriptionList = value ; }

        /// <summary>Creates an new <see cref="ItemDetailsQueryFilter" /> instance.</summary>
        public ItemDetailsQueryFilter()
        {
            this.__queryFilter.ReportType = "ItemDetailsReport";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__queryFilter), __queryFilter);
            await eventListener.AssertObjectIsValid(nameof(__queryFilter), __queryFilter);
        }
    }
    /// Query Parameters for ItemDetailsReport
    public partial interface IItemDetailsQueryFilter :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilter
    {
        /// <summary>
        /// Specifies the category type for detailed emissions data, such as Resource, ResourceGroup, ResourceType, Location, or Subscription.
        /// See supported types in CategoryTypeEnum.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the category type for detailed emissions data, such as Resource, ResourceGroup, ResourceType, Location, or Subscription. See supported types in CategoryTypeEnum.",
        SerializedName = @"categoryType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("Subscription", "ResourceGroup", "Location", "Resource", "ResourceType")]
        string CategoryType { get; set; }
        /// <summary>
        /// The column name to order the results by. See supported values in OrderByColumnEnum.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The column name to order the results by. See supported values in OrderByColumnEnum.",
        SerializedName = @"orderBy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("ItemName", "LatestMonthEmissions", "PreviousMonthEmissions", "MonthOverMonthEmissionsChangeRatio", "MonthlyEmissionsChangeValue", "ResourceGroup")]
        string OrderBy { get; set; }
        /// <summary>Number of items to return in one request, max value is 5000.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of items to return in one request, max value is 5000.",
        SerializedName = @"pageSize",
        PossibleTypes = new [] { typeof(int) })]
        int PageSize { get; set; }
        /// <summary>
        /// Pagination token for fetching the next page of data. This token is nullable and will be returned in the previous response
        /// if additional data pages are available.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Pagination token for fetching the next page of data. This token is nullable and will be returned in the previous response if additional data pages are available.",
        SerializedName = @"skipToken",
        PossibleTypes = new [] { typeof(string) })]
        string SkipToken { get; set; }
        /// <summary>Direction for sorting results. See supported values in SortDirectionEnum.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Carbon.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Direction for sorting results. See supported values in SortDirectionEnum.",
        SerializedName = @"sortDirection",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("Desc", "Asc")]
        string SortDirection { get; set; }

    }
    /// Query Parameters for ItemDetailsReport
    internal partial interface IItemDetailsQueryFilterInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Carbon.Models.IQueryFilterInternal
    {
        /// <summary>
        /// Specifies the category type for detailed emissions data, such as Resource, ResourceGroup, ResourceType, Location, or Subscription.
        /// See supported types in CategoryTypeEnum.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("Subscription", "ResourceGroup", "Location", "Resource", "ResourceType")]
        string CategoryType { get; set; }
        /// <summary>
        /// The column name to order the results by. See supported values in OrderByColumnEnum.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("ItemName", "LatestMonthEmissions", "PreviousMonthEmissions", "MonthOverMonthEmissionsChangeRatio", "MonthlyEmissionsChangeValue", "ResourceGroup")]
        string OrderBy { get; set; }
        /// <summary>Number of items to return in one request, max value is 5000.</summary>
        int PageSize { get; set; }
        /// <summary>
        /// Pagination token for fetching the next page of data. This token is nullable and will be returned in the previous response
        /// if additional data pages are available.
        /// </summary>
        string SkipToken { get; set; }
        /// <summary>Direction for sorting results. See supported values in SortDirectionEnum.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Carbon.PSArgumentCompleterAttribute("Desc", "Asc")]
        string SortDirection { get; set; }

    }
}