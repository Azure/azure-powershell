// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support
{

    /// <summary>State of the update as it relates to this stamp.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Support.StateTypeConverter))]
    public partial struct State :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HasPrerequisite".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HasPrerequisite'", "HasPrerequisite", global::System.Management.Automation.CompletionResultType.ParameterValue, "HasPrerequisite");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Obsolete".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Obsolete'", "Obsolete", global::System.Management.Automation.CompletionResultType.ParameterValue, "Obsolete");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Ready".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Ready'", "Ready", global::System.Management.Automation.CompletionResultType.ParameterValue, "Ready");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "NotApplicableBecauseAnotherUpdateIsInProgress".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'NotApplicableBecauseAnotherUpdateIsInProgress'", "NotApplicableBecauseAnotherUpdateIsInProgress", global::System.Management.Automation.CompletionResultType.ParameterValue, "NotApplicableBecauseAnotherUpdateIsInProgress");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Preparing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Preparing'", "Preparing", global::System.Management.Automation.CompletionResultType.ParameterValue, "Preparing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Installing".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Installing'", "Installing", global::System.Management.Automation.CompletionResultType.ParameterValue, "Installing");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Installed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Installed'", "Installed", global::System.Management.Automation.CompletionResultType.ParameterValue, "Installed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PreparationFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PreparationFailed'", "PreparationFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "PreparationFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InstallationFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InstallationFailed'", "InstallationFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "InstallationFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Invalid".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Invalid'", "Invalid", global::System.Management.Automation.CompletionResultType.ParameterValue, "Invalid");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Recalled".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Recalled'", "Recalled", global::System.Management.Automation.CompletionResultType.ParameterValue, "Recalled");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Downloading".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Downloading'", "Downloading", global::System.Management.Automation.CompletionResultType.ParameterValue, "Downloading");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DownloadFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DownloadFailed'", "DownloadFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "DownloadFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HealthChecking".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HealthChecking'", "HealthChecking", global::System.Management.Automation.CompletionResultType.ParameterValue, "HealthChecking");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HealthCheckFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HealthCheckFailed'", "HealthCheckFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "HealthCheckFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ReadyToInstall".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ReadyToInstall'", "ReadyToInstall", global::System.Management.Automation.CompletionResultType.ParameterValue, "ReadyToInstall");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ScanInProgress".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ScanInProgress'", "ScanInProgress", global::System.Management.Automation.CompletionResultType.ParameterValue, "ScanInProgress");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "ScanFailed".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'ScanFailed'", "ScanFailed", global::System.Management.Automation.CompletionResultType.ParameterValue, "ScanFailed");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdditionalContentRequired".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdditionalContentRequired'", "AdditionalContentRequired", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdditionalContentRequired");
            }
        }
    }
}