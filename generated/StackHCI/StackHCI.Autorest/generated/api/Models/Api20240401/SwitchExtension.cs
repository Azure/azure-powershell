// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Extensions;

    /// <summary>This represents extensions installed on virtualSwitch.</summary>
    public partial class SwitchExtension :
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.ISwitchExtension,
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.ISwitchExtensionInternal
    {

        /// <summary>Backing field for <see cref="ExtensionEnabled" /> property.</summary>
        private bool? _extensionEnabled;

        /// <summary>This represents whether extension is enabled on virtualSwitch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        public bool? ExtensionEnabled { get => this._extensionEnabled; }

        /// <summary>Backing field for <see cref="ExtensionName" /> property.</summary>
        private string _extensionName;

        /// <summary>This will show extension name for virtualSwitch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        public string ExtensionName { get => this._extensionName; }

        /// <summary>Internal Acessors for ExtensionEnabled</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.ISwitchExtensionInternal.ExtensionEnabled { get => this._extensionEnabled; set { {_extensionEnabled = value;} } }

        /// <summary>Internal Acessors for ExtensionName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.ISwitchExtensionInternal.ExtensionName { get => this._extensionName; set { {_extensionName = value;} } }

        /// <summary>Internal Acessors for SwitchId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Models.Api20240401.ISwitchExtensionInternal.SwitchId { get => this._switchId; set { {_switchId = value;} } }

        /// <summary>Backing field for <see cref="SwitchId" /> property.</summary>
        private string _switchId;

        /// <summary>Unique identifier for virtualSwitch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCI.PropertyOrigin.Owned)]
        public string SwitchId { get => this._switchId; }

        /// <summary>Creates an new <see cref="SwitchExtension" /> instance.</summary>
        public SwitchExtension()
        {

        }
    }
    /// This represents extensions installed on virtualSwitch.
    public partial interface ISwitchExtension :
        Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.IJsonSerializable
    {
        /// <summary>This represents whether extension is enabled on virtualSwitch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This represents whether extension is enabled on virtualSwitch.",
        SerializedName = @"extensionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ExtensionEnabled { get;  }
        /// <summary>This will show extension name for virtualSwitch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"This will show extension name for virtualSwitch.",
        SerializedName = @"extensionName",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionName { get;  }
        /// <summary>Unique identifier for virtualSwitch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCI.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Unique identifier for virtualSwitch.",
        SerializedName = @"switchId",
        PossibleTypes = new [] { typeof(string) })]
        string SwitchId { get;  }

    }
    /// This represents extensions installed on virtualSwitch.
    internal partial interface ISwitchExtensionInternal

    {
        /// <summary>This represents whether extension is enabled on virtualSwitch.</summary>
        bool? ExtensionEnabled { get; set; }
        /// <summary>This will show extension name for virtualSwitch.</summary>
        string ExtensionName { get; set; }
        /// <summary>Unique identifier for virtualSwitch.</summary>
        string SwitchId { get; set; }

    }
}