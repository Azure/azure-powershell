// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Extensions;

    /// <summary>Properties to configure retention settings for the eventhub</summary>
    [Microsoft.Azure.PowerShell.Cmdlets.EventHub.DoNotFormat]
    public partial class RetentionDescription :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.IRetentionDescription,
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Models.IRetentionDescriptionInternal
    {

        /// <summary>Backing field for <see cref="CleanupPolicy" /> property.</summary>
        private string _cleanupPolicy;

        /// <summary>Enumerates the possible values for cleanup policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public string CleanupPolicy { get => this._cleanupPolicy; set => this._cleanupPolicy = value; }

        /// <summary>Backing field for <see cref="MinCompactionLagInMin" /> property.</summary>
        private long? _minCompactionLagInMin;

        /// <summary>
        /// The minimum time a message will remain ineligible for compaction in the log. This value is used when cleanupPolicy is
        /// Compact or DeleteOrCompact.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public long? MinCompactionLagInMin { get => this._minCompactionLagInMin; set => this._minCompactionLagInMin = value; }

        /// <summary>Backing field for <see cref="RetentionTimeInHour" /> property.</summary>
        private long? _retentionTimeInHour;

        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This should be positive value upto namespace SKU max. -1 is a
        /// special case where retention time is infinite, but the size of an entity is restricted and its size depends on namespace
        /// SKU type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public long? RetentionTimeInHour { get => this._retentionTimeInHour; set => this._retentionTimeInHour = value; }

        /// <summary>Backing field for <see cref="TombstoneRetentionTimeInHour" /> property.</summary>
        private int? _tombstoneRetentionTimeInHour;

        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is used when cleanupPolicy is Compact
        /// or DeleteOrCompact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer
        /// begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker
        /// within the compacted Event Hub
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventHub.PropertyOrigin.Owned)]
        public int? TombstoneRetentionTimeInHour { get => this._tombstoneRetentionTimeInHour; set => this._tombstoneRetentionTimeInHour = value; }

        /// <summary>Creates an new <see cref="RetentionDescription" /> instance.</summary>
        public RetentionDescription()
        {

        }
    }
    /// Properties to configure retention settings for the eventhub
    public partial interface IRetentionDescription :
        Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.IJsonSerializable
    {
        /// <summary>Enumerates the possible values for cleanup policy</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enumerates the possible values for cleanup policy",
        SerializedName = @"cleanupPolicy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventHub.PSArgumentCompleterAttribute("Delete", "Compact", "DeleteOrCompact")]
        string CleanupPolicy { get; set; }
        /// <summary>
        /// The minimum time a message will remain ineligible for compaction in the log. This value is used when cleanupPolicy is
        /// Compact or DeleteOrCompact.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum time a message will remain ineligible for compaction in the log. This value is used when cleanupPolicy is Compact or DeleteOrCompact.",
        SerializedName = @"minCompactionLagInMins",
        PossibleTypes = new [] { typeof(long) })]
        long? MinCompactionLagInMin { get; set; }
        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This should be positive value upto namespace SKU max. -1 is a
        /// special case where retention time is infinite, but the size of an entity is restricted and its size depends on namespace
        /// SKU type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of hours to retain the events for this Event Hub. This should be positive value upto namespace SKU max. -1 is a special case where retention time is infinite, but the size of an entity is restricted and its size depends on namespace SKU type.",
        SerializedName = @"retentionTimeInHours",
        PossibleTypes = new [] { typeof(long) })]
        long? RetentionTimeInHour { get; set; }
        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is used when cleanupPolicy is Compact
        /// or DeleteOrCompact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer
        /// begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker
        /// within the compacted Event Hub
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventHub.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Number of hours to retain the tombstone markers of a compacted Event Hub. This value is used when cleanupPolicy is Compact or DeleteOrCompact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker within the compacted Event Hub",
        SerializedName = @"tombstoneRetentionTimeInHours",
        PossibleTypes = new [] { typeof(int) })]
        int? TombstoneRetentionTimeInHour { get; set; }

    }
    /// Properties to configure retention settings for the eventhub
    internal partial interface IRetentionDescriptionInternal

    {
        /// <summary>Enumerates the possible values for cleanup policy</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventHub.PSArgumentCompleterAttribute("Delete", "Compact", "DeleteOrCompact")]
        string CleanupPolicy { get; set; }
        /// <summary>
        /// The minimum time a message will remain ineligible for compaction in the log. This value is used when cleanupPolicy is
        /// Compact or DeleteOrCompact.
        /// </summary>
        long? MinCompactionLagInMin { get; set; }
        /// <summary>
        /// Number of hours to retain the events for this Event Hub. This should be positive value upto namespace SKU max. -1 is a
        /// special case where retention time is infinite, but the size of an entity is restricted and its size depends on namespace
        /// SKU type.
        /// </summary>
        long? RetentionTimeInHour { get; set; }
        /// <summary>
        /// Number of hours to retain the tombstone markers of a compacted Event Hub. This value is used when cleanupPolicy is Compact
        /// or DeleteOrCompact. Consumer must complete reading the tombstone marker within this specified amount of time if consumer
        /// begins from starting offset to ensure they get a valid snapshot for the specific key described by the tombstone marker
        /// within the compacted Event Hub
        /// </summary>
        int? TombstoneRetentionTimeInHour { get; set; }

    }
}