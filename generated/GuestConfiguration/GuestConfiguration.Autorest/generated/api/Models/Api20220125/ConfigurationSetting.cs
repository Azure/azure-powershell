// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125
{
    using static Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Extensions;

    /// <summary>Configuration setting of LCM (Local Configuration Manager).</summary>
    public partial class ConfigurationSetting :
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSetting,
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal
    {

        /// <summary>Backing field for <see cref="ActionAfterReboot" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? _actionAfterReboot;

        /// <summary>
        /// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? ActionAfterReboot { get => this._actionAfterReboot; }

        /// <summary>Backing field for <see cref="AllowModuleOverwrite" /> property.</summary>
        private bool? _allowModuleOverwrite;

        /// <summary>
        /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public bool? AllowModuleOverwrite { get => this._allowModuleOverwrite; }

        /// <summary>Backing field for <see cref="ConfigurationMode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? _configurationMode;

        /// <summary>
        /// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values
        /// are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? ConfigurationMode { get => this._configurationMode; }

        /// <summary>Backing field for <see cref="ConfigurationModeFrequencyMin" /> property.</summary>
        private float? _configurationModeFrequencyMin;

        /// <summary>
        /// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public float? ConfigurationModeFrequencyMin { get => this._configurationModeFrequencyMin; }

        /// <summary>Internal Acessors for ActionAfterReboot</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal.ActionAfterReboot { get => this._actionAfterReboot; set { {_actionAfterReboot = value;} } }

        /// <summary>Internal Acessors for AllowModuleOverwrite</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal.AllowModuleOverwrite { get => this._allowModuleOverwrite; set { {_allowModuleOverwrite = value;} } }

        /// <summary>Internal Acessors for ConfigurationMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal.ConfigurationMode { get => this._configurationMode; set { {_configurationMode = value;} } }

        /// <summary>Internal Acessors for ConfigurationModeFrequencyMin</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal.ConfigurationModeFrequencyMin { get => this._configurationModeFrequencyMin; set { {_configurationModeFrequencyMin = value;} } }

        /// <summary>Internal Acessors for RebootIfNeeded</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal.RebootIfNeeded { get => this._rebootIfNeeded; set { {_rebootIfNeeded = value;} } }

        /// <summary>Internal Acessors for RefreshFrequencyMin</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal.RefreshFrequencyMin { get => this._refreshFrequencyMin; set { {_refreshFrequencyMin = value;} } }

        /// <summary>Backing field for <see cref="RebootIfNeeded" /> property.</summary>
        private bool? _rebootIfNeeded;

        /// <summary>
        /// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you
        /// will have to manually reboot the node for any configuration that requires it. The default value is false. To use this
        /// setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public bool? RebootIfNeeded { get => this._rebootIfNeeded; }

        /// <summary>Backing field for <see cref="RefreshFrequencyMin" /> property.</summary>
        private float? _refreshFrequencyMin;

        /// <summary>
        /// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored
        /// if the LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public float? RefreshFrequencyMin { get => this._refreshFrequencyMin; }

        /// <summary>Creates an new <see cref="ConfigurationSetting" /> instance.</summary>
        public ConfigurationSetting()
        {

        }
    }
    /// Configuration setting of LCM (Local Configuration Manager).
    public partial interface IConfigurationSetting :
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration",
        SerializedName = @"actionAfterReboot",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? ActionAfterReboot { get;  }
        /// <summary>
        /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false",
        SerializedName = @"allowModuleOverwrite",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowModuleOverwrite { get;  }
        /// <summary>
        /// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values
        /// are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.",
        SerializedName = @"configurationMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? ConfigurationMode { get;  }
        /// <summary>
        /// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.",
        SerializedName = @"configurationModeFrequencyMins",
        PossibleTypes = new [] { typeof(float) })]
        float? ConfigurationModeFrequencyMin { get;  }
        /// <summary>
        /// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you
        /// will have to manually reboot the node for any configuration that requires it. The default value is false. To use this
        /// setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.",
        SerializedName = @"rebootIfNeeded",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RebootIfNeeded { get;  }
        /// <summary>
        /// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored
        /// if the LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.",
        SerializedName = @"refreshFrequencyMins",
        PossibleTypes = new [] { typeof(float) })]
        float? RefreshFrequencyMin { get;  }

    }
    /// Configuration setting of LCM (Local Configuration Manager).
    internal partial interface IConfigurationSettingInternal

    {
        /// <summary>
        /// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? ActionAfterReboot { get; set; }
        /// <summary>
        /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false
        /// </summary>
        bool? AllowModuleOverwrite { get; set; }
        /// <summary>
        /// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values
        /// are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? ConfigurationMode { get; set; }
        /// <summary>
        /// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        float? ConfigurationModeFrequencyMin { get; set; }
        /// <summary>
        /// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you
        /// will have to manually reboot the node for any configuration that requires it. The default value is false. To use this
        /// setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module.
        /// </summary>
        bool? RebootIfNeeded { get; set; }
        /// <summary>
        /// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored
        /// if the LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        float? RefreshFrequencyMin { get; set; }

    }
}