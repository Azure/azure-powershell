// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125
{
    using static Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Extensions;

    /// <summary>
    /// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file
    /// containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
    /// </summary>
    public partial class GuestConfigurationNavigation :
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigation,
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal
    {

        /// <summary>Backing field for <see cref="AssignmentSource" /> property.</summary>
        private string _assignmentSource;

        /// <summary>Specifies the origin of the configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public string AssignmentSource { get => this._assignmentSource; }

        /// <summary>Backing field for <see cref="AssignmentType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.AssignmentType? _assignmentType;

        /// <summary>
        /// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect
        /// and ApplyAndMonitor.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.AssignmentType? AssignmentType { get => this._assignmentType; set => this._assignmentType = value; }

        /// <summary>Backing field for <see cref="ConfigurationParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] _configurationParameter;

        /// <summary>The configuration parameters for the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] ConfigurationParameter { get => this._configurationParameter; set => this._configurationParameter = value; }

        /// <summary>Backing field for <see cref="ConfigurationProtectedParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] _configurationProtectedParameter;

        /// <summary>The protected configuration parameters for the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] ConfigurationProtectedParameter { get => this._configurationProtectedParameter; set => this._configurationProtectedParameter = value; }

        /// <summary>Backing field for <see cref="ConfigurationSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSetting _configurationSetting;

        /// <summary>The configuration setting for the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSetting ConfigurationSetting { get => (this._configurationSetting = this._configurationSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.ConfigurationSetting()); }

        /// <summary>
        /// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? ConfigurationSettingActionAfterReboot { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ActionAfterReboot; }

        /// <summary>
        /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Inlined)]
        public bool? ConfigurationSettingAllowModuleOverwrite { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).AllowModuleOverwrite; }

        /// <summary>
        /// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values
        /// are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? ConfigurationSettingConfigurationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ConfigurationMode; }

        /// <summary>
        /// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Inlined)]
        public float? ConfigurationSettingConfigurationModeFrequencyMin { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ConfigurationModeFrequencyMin; }

        /// <summary>
        /// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you
        /// will have to manually reboot the node for any configuration that requires it. The default value is false. To use this
        /// setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Inlined)]
        public bool? ConfigurationSettingRebootIfNeeded { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).RebootIfNeeded; }

        /// <summary>
        /// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored
        /// if the LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Inlined)]
        public float? ConfigurationSettingRefreshFrequencyMin { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).RefreshFrequencyMin; }

        /// <summary>Backing field for <see cref="ContentHash" /> property.</summary>
        private string _contentHash;

        /// <summary>Combined hash of the guest configuration package and configuration parameters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public string ContentHash { get => this._contentHash; set => this._contentHash = value; }

        /// <summary>Backing field for <see cref="ContentType" /> property.</summary>
        private string _contentType;

        /// <summary>
        /// Specifies the content type of the configuration. Possible values could be Builtin or Custom.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public string ContentType { get => this._contentType; }

        /// <summary>Backing field for <see cref="ContentUri" /> property.</summary>
        private string _contentUri;

        /// <summary>Uri of the storage where guest configuration package is uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public string ContentUri { get => this._contentUri; set => this._contentUri = value; }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.Kind? _kind;

        /// <summary>Kind of the guest configuration. For example:DSC</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.Kind? Kind { get => this._kind; set => this._kind = value; }

        /// <summary>Internal Acessors for AssignmentSource</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.AssignmentSource { get => this._assignmentSource; set { {_assignmentSource = value;} } }

        /// <summary>Internal Acessors for ConfigurationSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSetting Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSetting { get => (this._configurationSetting = this._configurationSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.ConfigurationSetting()); set { {_configurationSetting = value;} } }

        /// <summary>Internal Acessors for ConfigurationSettingActionAfterReboot</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSettingActionAfterReboot { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ActionAfterReboot; set => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ActionAfterReboot = value; }

        /// <summary>Internal Acessors for ConfigurationSettingAllowModuleOverwrite</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSettingAllowModuleOverwrite { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).AllowModuleOverwrite; set => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).AllowModuleOverwrite = value; }

        /// <summary>Internal Acessors for ConfigurationSettingConfigurationMode</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSettingConfigurationMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ConfigurationMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ConfigurationMode = value; }

        /// <summary>Internal Acessors for ConfigurationSettingConfigurationModeFrequencyMin</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSettingConfigurationModeFrequencyMin { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ConfigurationModeFrequencyMin; set => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).ConfigurationModeFrequencyMin = value; }

        /// <summary>Internal Acessors for ConfigurationSettingRebootIfNeeded</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSettingRebootIfNeeded { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).RebootIfNeeded; set => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).RebootIfNeeded = value; }

        /// <summary>Internal Acessors for ConfigurationSettingRefreshFrequencyMin</summary>
        float? Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ConfigurationSettingRefreshFrequencyMin { get => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).RefreshFrequencyMin; set => ((Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSettingInternal)ConfigurationSetting).RefreshFrequencyMin = value; }

        /// <summary>Internal Acessors for ContentType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IGuestConfigurationNavigationInternal.ContentType { get => this._contentType; set { {_contentType = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>Version of the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Origin(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.PropertyOrigin.Owned)]
        public string Version { get => this._version; set => this._version = value; }

        /// <summary>Creates an new <see cref="GuestConfigurationNavigation" /> instance.</summary>
        public GuestConfigurationNavigation()
        {

        }
    }
    /// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file
    /// containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
    public partial interface IGuestConfigurationNavigation :
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.IJsonSerializable
    {
        /// <summary>Specifies the origin of the configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the origin of the configuration.",
        SerializedName = @"assignmentSource",
        PossibleTypes = new [] { typeof(string) })]
        string AssignmentSource { get;  }
        /// <summary>
        /// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect
        /// and ApplyAndMonitor.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect and ApplyAndMonitor.",
        SerializedName = @"assignmentType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.AssignmentType) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.AssignmentType? AssignmentType { get; set; }
        /// <summary>The configuration parameters for the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The configuration parameters for the guest configuration.",
        SerializedName = @"configurationParameter",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] ConfigurationParameter { get; set; }
        /// <summary>The protected configuration parameters for the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The protected configuration parameters for the guest configuration.",
        SerializedName = @"configurationProtectedParameter",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] ConfigurationProtectedParameter { get; set; }
        /// <summary>
        /// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration and StopConfiguration",
        SerializedName = @"actionAfterReboot",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? ConfigurationSettingActionAfterReboot { get;  }
        /// <summary>
        /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node. Otherwise, false",
        SerializedName = @"allowModuleOverwrite",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfigurationSettingAllowModuleOverwrite { get;  }
        /// <summary>
        /// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values
        /// are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.",
        SerializedName = @"configurationMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? ConfigurationSettingConfigurationMode { get;  }
        /// <summary>
        /// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode property is set to ApplyOnly. The default value is 15.",
        SerializedName = @"configurationModeFrequencyMins",
        PossibleTypes = new [] { typeof(float) })]
        float? ConfigurationSettingConfigurationModeFrequencyMin { get;  }
        /// <summary>
        /// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you
        /// will have to manually reboot the node for any configuration that requires it. The default value is false. To use this
        /// setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you will have to manually reboot the node for any configuration that requires it. The default value is false. To use this setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting with the xPendingReboot module.",
        SerializedName = @"rebootIfNeeded",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ConfigurationSettingRebootIfNeeded { get;  }
        /// <summary>
        /// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored
        /// if the LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored if the LCM is not configured in pull mode. The default value is 30.",
        SerializedName = @"refreshFrequencyMins",
        PossibleTypes = new [] { typeof(float) })]
        float? ConfigurationSettingRefreshFrequencyMin { get;  }
        /// <summary>Combined hash of the guest configuration package and configuration parameters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Combined hash of the guest configuration package and configuration parameters.",
        SerializedName = @"contentHash",
        PossibleTypes = new [] { typeof(string) })]
        string ContentHash { get; set; }
        /// <summary>
        /// Specifies the content type of the configuration. Possible values could be Builtin or Custom.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the content type of the configuration. Possible values could be Builtin or Custom.",
        SerializedName = @"contentType",
        PossibleTypes = new [] { typeof(string) })]
        string ContentType { get;  }
        /// <summary>Uri of the storage where guest configuration package is uploaded.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Uri of the storage where guest configuration package is uploaded.",
        SerializedName = @"contentUri",
        PossibleTypes = new [] { typeof(string) })]
        string ContentUri { get; set; }
        /// <summary>Kind of the guest configuration. For example:DSC</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Kind of the guest configuration. For example:DSC",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.Kind) })]
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.Kind? Kind { get; set; }
        /// <summary>Name of the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the guest configuration.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Version of the guest configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Version of the guest configuration.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get; set; }

    }
    /// Guest configuration is an artifact that encapsulates DSC configuration and its dependencies. The artifact is a zip file
    /// containing DSC configuration (as MOF) and dependent resources and other dependencies like modules.
    internal partial interface IGuestConfigurationNavigationInternal

    {
        /// <summary>Specifies the origin of the configuration.</summary>
        string AssignmentSource { get; set; }
        /// <summary>
        /// Specifies the assignment type and execution of the configuration. Possible values are Audit, DeployAndAutoCorrect, ApplyAndAutoCorrect
        /// and ApplyAndMonitor.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.AssignmentType? AssignmentType { get; set; }
        /// <summary>The configuration parameters for the guest configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] ConfigurationParameter { get; set; }
        /// <summary>The protected configuration parameters for the guest configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationParameter[] ConfigurationProtectedParameter { get; set; }
        /// <summary>The configuration setting for the guest configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Models.Api20220125.IConfigurationSetting ConfigurationSetting { get; set; }
        /// <summary>
        /// Specifies what happens after a reboot during the application of a configuration. The possible values are ContinueConfiguration
        /// and StopConfiguration
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ActionAfterReboot? ConfigurationSettingActionAfterReboot { get; set; }
        /// <summary>
        /// If true - new configurations downloaded from the pull service are allowed to overwrite the old ones on the target node.
        /// Otherwise, false
        /// </summary>
        bool? ConfigurationSettingAllowModuleOverwrite { get; set; }
        /// <summary>
        /// Specifies how the LCM(Local Configuration Manager) actually applies the configuration to the target nodes. Possible values
        /// are ApplyOnly, ApplyAndMonitor, and ApplyAndAutoCorrect.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.ConfigurationMode? ConfigurationSettingConfigurationMode { get; set; }
        /// <summary>
        /// How often, in minutes, the current configuration is checked and applied. This property is ignored if the ConfigurationMode
        /// property is set to ApplyOnly. The default value is 15.
        /// </summary>
        float? ConfigurationSettingConfigurationModeFrequencyMin { get; set; }
        /// <summary>
        /// Set this to true to automatically reboot the node after a configuration that requires reboot is applied. Otherwise, you
        /// will have to manually reboot the node for any configuration that requires it. The default value is false. To use this
        /// setting when a reboot condition is enacted by something other than DSC (such as Windows Installer), combine this setting
        /// with the xPendingReboot module.
        /// </summary>
        bool? ConfigurationSettingRebootIfNeeded { get; set; }
        /// <summary>
        /// The time interval, in minutes, at which the LCM checks a pull service to get updated configurations. This value is ignored
        /// if the LCM is not configured in pull mode. The default value is 30.
        /// </summary>
        float? ConfigurationSettingRefreshFrequencyMin { get; set; }
        /// <summary>Combined hash of the guest configuration package and configuration parameters.</summary>
        string ContentHash { get; set; }
        /// <summary>
        /// Specifies the content type of the configuration. Possible values could be Builtin or Custom.
        /// </summary>
        string ContentType { get; set; }
        /// <summary>Uri of the storage where guest configuration package is uploaded.</summary>
        string ContentUri { get; set; }
        /// <summary>Kind of the guest configuration. For example:DSC</summary>
        Microsoft.Azure.PowerShell.Cmdlets.GuestConfiguration.Support.Kind? Kind { get; set; }
        /// <summary>Name of the guest configuration.</summary>
        string Name { get; set; }
        /// <summary>Version of the guest configuration.</summary>
        string Version { get; set; }

    }
}