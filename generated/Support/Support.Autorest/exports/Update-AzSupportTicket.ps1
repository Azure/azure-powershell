
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
This API allows you to update the severity level, ticket status, advanced diagnostic consent and your contact information in the support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer.
In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
.Description
This API allows you to update the severity level, ticket status, advanced diagnostic consent and your contact information in the support ticket.<br/><br/>Note: The severity levels cannot be changed if a support ticket is actively being worked upon by an Azure support engineer.
In such a case, contact your support engineer to request severity update by adding a new communication using the Communications API.
.Example
Update-AzSupportTicket -Name "test12345678" -Status "Closed"

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

INPUTOBJECT <ISupportIdentity>: Identity Parameter
  [ChatTranscriptName <String>]: ChatTranscript name.
  [CommunicationName <String>]: Communication name.
  [FileName <String>]: File Name
  [FileWorkspaceName <String>]: File Workspace Name
  [Id <String>]: Resource identity path
  [ProblemClassificationName <String>]: Name of problem classification.
  [ServiceName <String>]: Name of the Azure service.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
  [SupportTicketName <String>]: Support ticket name.

SECONDARYCONSENT <ISecondaryConsent[]>: This property indicates secondary consents for the support ticket
  [Type <String>]: The service name for which the secondary consent is being provided. The value needs to be retrieved from the Problem Classification API response.
  [UserConsent <String>]: User consent value provided
.Link
https://learn.microsoft.com/powershell/module/az.support/update-azsupportticket
#>
function Update-AzSupportTicket {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Alias('SupportTicketName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [System.String]
    # Support ticket name.
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("Yes", "No")]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Advanced diagnostic consent to be updated on the support ticket.
    ${AdvancedDiagnosticConsent},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String[]]
    # Email addresses listed will be copied on any correspondence about the support ticket.
    ${ContactDetailAdditionalEmailAddress},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Country of the user.
    # This is the ISO 3166-1 alpha-3 code.
    ${ContactDetailCountry},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # First name.
    ${ContactDetailFirstName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Last name.
    ${ContactDetailLastName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Phone number.
    # This is required if preferred contact method is phone.
    ${ContactDetailPhoneNumber},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("email", "phone")]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Preferred contact method.
    ${ContactDetailPreferredContactMethod},

    [Parameter()]
    [ArgumentCompleter({'"en-us"','"es-es"','"fr-fr"','"de-de"','"it-it"','"ja-jp"','"ko-kr"','"ru-ru"','"pt-br"','"zh-tw"','"zh-hans"'})]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Preferred language of support from Azure.
    # Support languages vary based on the severity you choose for your support ticket.
    # Learn more at [Azure Severity and responsiveness](https://azure.microsoft.com/support/plans/response/).
    # Use the standard language-country code.
    # Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.
    ${ContactDetailPreferredSupportLanguage},

    [Parameter()]
    [ArgumentCompleter({'"Afghanistan Standard Time"', '"Alaskan Standard Time"', '"Arab Standard Time"', '"Arabian Standard Time"', '"Arabic Standard Time"', '"Argentina Standard Time"', '"Atlantic Standard Time"', '"AUS Central Standard Time"', '"AUS Eastern Standard Time"', '"Azerbaijan Standard Time"', '"Azores Standard Time"','"Canada Central Standard Time"','"Cape Verde Standard Time"','"Caucasus Standard Time"','"Cen. Australia Standard Time"','"Central America Standard Time"','"Central Asia Standard Time"','"Central Brazilian Standard Time"','"Central Europe Standard Time"','"Central European Standard Time"','"Central Pacific Standard Time"','"Central Standard Time"','"Central Standard Time (Mexico)"','"China Standard Time"','"Dateline Standard Time"','"E. Africa Standard Time"','"E. Australia Standard Time"','"E. Europe Standard Time"','"E. South America Standard Time"','"Eastern Standard Time"','"Eastern Standard Time (Mexico)"','"Egypt Standard Time"','"Ekaterinburg Standard Time"','"Fiji Standard Time"','"FLE Standard Time"','"Georgian Standard Time"','"GMT Standard Time"','"Greenland Standard Time"','"Greenwich Standard Time"','"GTB Standard Time"','"Hawaiian Standard Time"','"India Standard Time"','"Iran Standard Time"','"Israel Standard Time"','"Jordan Standard Time"','"Korea Standard Time"','"Mauritius Standard Time"','"Mid-Atlantic Standard Time"','"Middle East Standard Time"','"Montevideo Standard Time"','"Morocco Standard Time"','"Mountain Standard Time"','"Mountain Standard Time (Mexico)"','"Myanmar Standard Time"','"N. Central Asia Standard Time"','"Namibia Standard Time"','"Nepal Standard Time"','"New Zealand Standard Time"','"Newfoundland Standard Time"','"North Asia East Standard Time"','"North Asia Standard Time"','"Pacific SA Standard Time"','"Pacific Standard Time"','"Pacific Standard Time (Mexico)"','"Pakistan Standard Time"','"Romance Standard Time"','"Russian Standard Time"','"SA Eastern Standard Time"','"SA Pacific Standard Time"','"SA Western Standard Time"','"Samoa Standard Time"','"SE Asia Standard Time"','"Singapore Standard Time"','"South Africa Standard Time"','"Sri Lanka Standard Time"','"Taipei Standard Time"','"Tasmania Standard Time"','"Tokyo Standard Time"','"Tonga Standard Time"','"Turkey Standard Time"','"US Eastern Standard Time"','"US Mountain Standard Time"','"UTC"','"Venezuela Standard Time"','"Vladivostok Standard Time"','"W. Australia Standard Time"','"W. Central Africa Standard Time"','"W. Europe Standard Time"','"West Asia Standard Time"','"West Pacific Standard Time"','"Yakutsk Standard Time"'})]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Time zone of the user.
    # This is the name of the time zone from [Microsoft Time Zone Index Values](https://support.microsoft.com/help/973627/microsoft-time-zone-index-values).
    ${ContactDetailPreferredTimeZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Primary email address.
    ${ContactDetailPrimaryEmailAddress},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISecondaryConsent[]]
    # This property indicates secondary consents for the support ticket
    ${SecondaryConsent},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("minimal", "moderate", "critical", "highestcriticalimpact")]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Severity level.
    ${Severity},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("open", "closed")]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Status to be updated on the ticket.
    ${Status},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Support.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.Support.private\Update-AzSupportTicket_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.Support.private\Update-AzSupportTicket_UpdateViaIdentityExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Support.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
