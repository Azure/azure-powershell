
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
This API allows you to upload content to a file
.Description
This API allows you to upload content to a file
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportIdentity
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IUploadFile
.Outputs
System.Boolean
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

FILEWORKSPACEINPUTOBJECT <ISupportIdentity>: Identity Parameter
  [ChatTranscriptName <String>]: ChatTranscript name.
  [CommunicationName <String>]: Communication name.
  [FileName <String>]: File Name
  [FileWorkspaceName <String>]: File Workspace Name
  [Id <String>]: Resource identity path
  [ProblemClassificationName <String>]: Name of problem classification.
  [ServiceName <String>]: Name of the Azure service.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
  [SupportTicketName <String>]: Support ticket name.

INPUTOBJECT <ISupportIdentity>: Identity Parameter
  [ChatTranscriptName <String>]: ChatTranscript name.
  [CommunicationName <String>]: Communication name.
  [FileName <String>]: File Name
  [FileWorkspaceName <String>]: File Workspace Name
  [Id <String>]: Resource identity path
  [ProblemClassificationName <String>]: Name of problem classification.
  [ServiceName <String>]: Name of the Azure service.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
  [SupportTicketName <String>]: Support ticket name.

UPLOADFILE <IUploadFile>: File content associated with the file under a workspace.
  [ChunkIndex <Int32?>]: Index of the uploaded chunk (Index starts at 0)
  [Content <String>]: File Content in base64 encoded format
.Link
https://learn.microsoft.com/powershell/module/az.support/invoke-azsupportuploadfilesnosubscription
#>
function Invoke-AzSupportUploadFilesNoSubscription {
[OutputType([System.Boolean])]
[CmdletBinding(DefaultParameterSetName='UploadExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='Upload', Mandatory)]
    [Parameter(ParameterSetName='UploadExpanded', Mandatory)]
    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspace', Mandatory)]
    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspaceExpanded', Mandatory)]
    [Parameter(ParameterSetName='UploadViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='UploadViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [System.String]
    # File Name
    ${FileName},

    [Parameter(ParameterSetName='Upload', Mandatory)]
    [Parameter(ParameterSetName='UploadExpanded', Mandatory)]
    [Parameter(ParameterSetName='UploadViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='UploadViaJsonString', Mandatory)]
    [Alias('WorkspaceName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [System.String]
    # File WorkspaceName
    ${FileWorkspaceName},

    [Parameter(ParameterSetName='UploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspace', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspaceExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportIdentity]
    # Identity Parameter
    ${FileWorkspaceInputObject},

    [Parameter(ParameterSetName='Upload', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentity', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspace', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IUploadFile]
    # File content associated with the file under a workspace.
    ${UploadFile},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspaceExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.Int32]
    # Index of the uploaded chunk (Index starts at 0)
    ${ChunkIndex},

    [Parameter(ParameterSetName='UploadExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityExpanded')]
    [Parameter(ParameterSetName='UploadViaIdentityFileWorkspaceExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # File Content in base64 encoded format
    ${Content},

    [Parameter(ParameterSetName='UploadViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Upload operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='UploadViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Body')]
    [System.String]
    # Json string supplied to the Upload operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Returns true when the command succeeds
    ${PassThru},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Support.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            Upload = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_Upload';
            UploadExpanded = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadExpanded';
            UploadViaIdentity = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadViaIdentity';
            UploadViaIdentityExpanded = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadViaIdentityExpanded';
            UploadViaIdentityFileWorkspace = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadViaIdentityFileWorkspace';
            UploadViaIdentityFileWorkspaceExpanded = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadViaIdentityFileWorkspaceExpanded';
            UploadViaJsonFilePath = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadViaJsonFilePath';
            UploadViaJsonString = 'Az.Support.private\Invoke-AzSupportUploadFilesNoSubscription_UploadViaJsonString';
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
