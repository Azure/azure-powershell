// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Support.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Cmdlets;
    using System;

    /// <summary>
    /// Create a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management
    /// issues for the specified subscription. Learn the [prerequisites](https://aka.ms/supportAPI) required to create a support
    /// ticket.<br/><br/>Always call the Services and ProblemClassifications API to get the most recent set of services and problem
    /// categories required for support ticket creation.<br/><br/>Adding attachments is not currently supported via the API. To
    /// add a file to an existing support ticket, visit the [Manage support ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest)
    /// page in the Azure portal, select the support ticket, and use the file upload control to add a new file.<br/><br/>Providing
    /// consent to share diagnostic information with Azure support is currently not supported via the API. The Azure support engineer
    /// working on your ticket will reach out to you for consent if your issue requires gathering diagnostic information from
    /// your Azure resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include _x-ms-authorization-auxiliary_
    /// header to provide an auxiliary token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant).
    /// The primary token will be from the tenant for whom a support ticket is being raised against the subscription, i.e. Cloud
    /// solution provider (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider (CSP) partner tenant.
    /// </summary>
    /// <remarks>
    /// [OpenAPI] Create=>PUT:"/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzSupportTicket_CreateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Description(@"Create a new support ticket for Subscription and Service limits (Quota), Technical, Billing, and Subscription Management issues for the specified subscription. Learn the [prerequisites](https://aka.ms/supportAPI) required to create a support ticket.<br/><br/>Always call the Services and ProblemClassifications API to get the most recent set of services and problem categories required for support ticket creation.<br/><br/>Adding attachments is not currently supported via the API. To add a file to an existing support ticket, visit the [Manage support ticket](https://portal.azure.com/#blade/Microsoft_Azure_Support/HelpAndSupportBlade/managesupportrequest) page in the Azure portal, select the support ticket, and use the file upload control to add a new file.<br/><br/>Providing consent to share diagnostic information with Azure support is currently not supported via the API. The Azure support engineer working on your ticket will reach out to you for consent if your issue requires gathering diagnostic information from your Azure resources.<br/><br/>**Creating a support ticket for on-behalf-of**: Include _x-ms-authorization-auxiliary_ header to provide an auxiliary token as per [documentation](https://docs.microsoft.com/azure/azure-resource-manager/management/authenticate-multi-tenant). The primary token will be from the tenant for whom a support ticket is being raised against the subscription, i.e. Cloud solution provider (CSP) customer tenant. The auxiliary token will be from the Cloud solution provider (CSP) partner tenant.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Support.HttpPath(Path = "/subscriptions/{subscriptionId}/providers/Microsoft.Support/supportTickets/{supportTicketName}", ApiVersion = "2024-04-01")]
    public partial class NewAzSupportTicket_CreateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Object that represents SupportTicketDetails resource.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails _createSupportTicketParametersBody = new Microsoft.Azure.PowerShell.Cmdlets.Support.Models.SupportTicketDetails();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>Advanced diagnostic consent to be updated on the support ticket.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Advanced diagnostic consent to be updated on the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Advanced diagnostic consent to be updated on the support ticket.",
        SerializedName = @"advancedDiagnosticConsent",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("Yes", "No")]
        public string AdvancedDiagnosticConsent { get => _createSupportTicketParametersBody.AdvancedDiagnosticConsent ?? null; set => _createSupportTicketParametersBody.AdvancedDiagnosticConsent = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Support Client => Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.ClientAPI;

        /// <summary>
        /// Additional email addresses listed will be copied on any correspondence about the support ticket.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional email addresses listed will be copied on any correspondence about the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional email addresses listed will be copied on any correspondence about the support ticket.",
        SerializedName = @"additionalEmailAddresses",
        PossibleTypes = new [] { typeof(string) })]
        public string[] ContactDetailAdditionalEmailAddress { get => _createSupportTicketParametersBody.ContactDetailAdditionalEmailAddress?.ToArray() ?? null /* fixedArrayOf */; set => _createSupportTicketParametersBody.ContactDetailAdditionalEmailAddress = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>Country of the user. This is the ISO 3166-1 alpha-3 code.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Country of the user. This is the ISO 3166-1 alpha-3 code.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Country of the user. This is the ISO 3166-1 alpha-3 code.",
        SerializedName = @"country",
        PossibleTypes = new [] { typeof(string) })]
        public string ContactDetailCountry { get => _createSupportTicketParametersBody.ContactDetailCountry ?? null; set => _createSupportTicketParametersBody.ContactDetailCountry = value; }

        /// <summary>First name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "First name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"First name.",
        SerializedName = @"firstName",
        PossibleTypes = new [] { typeof(string) })]
        public string ContactDetailFirstName { get => _createSupportTicketParametersBody.ContactDetailFirstName ?? null; set => _createSupportTicketParametersBody.ContactDetailFirstName = value; }

        /// <summary>Last name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Last name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Last name.",
        SerializedName = @"lastName",
        PossibleTypes = new [] { typeof(string) })]
        public string ContactDetailLastName { get => _createSupportTicketParametersBody.ContactDetailLastName ?? null; set => _createSupportTicketParametersBody.ContactDetailLastName = value; }

        /// <summary>Phone number. This is required if preferred contact method is phone.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Phone number. This is required if preferred contact method is phone.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Phone number. This is required if preferred contact method is phone.",
        SerializedName = @"phoneNumber",
        PossibleTypes = new [] { typeof(string) })]
        public string ContactDetailPhoneNumber { get => _createSupportTicketParametersBody.ContactDetailPhoneNumber ?? null; set => _createSupportTicketParametersBody.ContactDetailPhoneNumber = value; }

        /// <summary>Preferred contact method.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Preferred contact method.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Preferred contact method.",
        SerializedName = @"preferredContactMethod",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("email", "phone")]
        public string ContactDetailPreferredContactMethod { get => _createSupportTicketParametersBody.ContactDetailPreferredContactMethod ?? null; set => _createSupportTicketParametersBody.ContactDetailPreferredContactMethod = value; }

        /// <summary>
        /// Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket.
        /// Learn more at [Azure Severity and responsiveness](https://azure.microsoft.com/support/plans/response). Use the standard
        /// language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French,
        /// 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for
        /// Chinese and 'de-de' for German.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Learn more at [Azure Severity and responsiveness](https://azure.microsoft.com/support/plans/response). Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Preferred language of support from Azure. Support languages vary based on the severity you choose for your support ticket. Learn more at [Azure Severity and responsiveness](https://azure.microsoft.com/support/plans/response). Use the standard language-country code. Valid values are 'en-us' for English, 'zh-hans' for Chinese, 'es-es' for Spanish, 'fr-fr' for French, 'ja-jp' for Japanese, 'ko-kr' for Korean, 'ru-ru' for Russian, 'pt-br' for Portuguese, 'it-it' for Italian, 'zh-tw' for Chinese and 'de-de' for German.",
        SerializedName = @"preferredSupportLanguage",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.CompleterInfo(
        Name = @"Support Language Completer",
        Description =@"Gets the list of valid support languages",
        Script = @"'""en-us""','""es-es""','""fr-fr""','""de-de""','""it-it""','""ja-jp""','""ko-kr""','""ru-ru""','""pt-br""','""zh-tw""','""zh-hans""'")]
        public string ContactDetailPreferredSupportLanguage { get => _createSupportTicketParametersBody.ContactDetailPreferredSupportLanguage ?? null; set => _createSupportTicketParametersBody.ContactDetailPreferredSupportLanguage = value; }

        /// <summary>
        /// Time zone of the user. This is the name of the time zone from [Microsoft Time Zone Index Values](https://support.microsoft.com/help/973627/microsoft-time-zone-index-values).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Time zone of the user. This is the name of the time zone from [Microsoft Time Zone Index Values](https://support.microsoft.com/help/973627/microsoft-time-zone-index-values).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Time zone of the user. This is the name of the time zone from [Microsoft Time Zone Index Values](https://support.microsoft.com/help/973627/microsoft-time-zone-index-values).",
        SerializedName = @"preferredTimeZone",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.CompleterInfo(
        Name = @"Time Zone Completer",
        Description =@"Gets the list of valid time zones",
        Script = @"'""Afghanistan Standard Time""', '""Alaskan Standard Time""', '""Arab Standard Time""', '""Arabian Standard Time""', '""Arabic Standard Time""', '""Argentina Standard Time""', '""Atlantic Standard Time""', '""AUS Central Standard Time""', '""AUS Eastern Standard Time""', '""Azerbaijan Standard Time""', '""Azores Standard Time""','""Canada Central Standard Time""','""Cape Verde Standard Time""','""Caucasus Standard Time""','""Cen. Australia Standard Time""','""Central America Standard Time""','""Central Asia Standard Time""','""Central Brazilian Standard Time""','""Central Europe Standard Time""','""Central European Standard Time""','""Central Pacific Standard Time""','""Central Standard Time""','""Central Standard Time (Mexico)""','""China Standard Time""','""Dateline Standard Time""','""E. Africa Standard Time""','""E. Australia Standard Time""','""E. Europe Standard Time""','""E. South America Standard Time""','""Eastern Standard Time""','""Eastern Standard Time (Mexico)""','""Egypt Standard Time""','""Ekaterinburg Standard Time""','""Fiji Standard Time""','""FLE Standard Time""','""Georgian Standard Time""','""GMT Standard Time""','""Greenland Standard Time""','""Greenwich Standard Time""','""GTB Standard Time""','""Hawaiian Standard Time""','""India Standard Time""','""Iran Standard Time""','""Israel Standard Time""','""Jordan Standard Time""','""Korea Standard Time""','""Mauritius Standard Time""','""Mid-Atlantic Standard Time""','""Middle East Standard Time""','""Montevideo Standard Time""','""Morocco Standard Time""','""Mountain Standard Time""','""Mountain Standard Time (Mexico)""','""Myanmar Standard Time""','""N. Central Asia Standard Time""','""Namibia Standard Time""','""Nepal Standard Time""','""New Zealand Standard Time""','""Newfoundland Standard Time""','""North Asia East Standard Time""','""North Asia Standard Time""','""Pacific SA Standard Time""','""Pacific Standard Time""','""Pacific Standard Time (Mexico)""','""Pakistan Standard Time""','""Romance Standard Time""','""Russian Standard Time""','""SA Eastern Standard Time""','""SA Pacific Standard Time""','""SA Western Standard Time""','""Samoa Standard Time""','""SE Asia Standard Time""','""Singapore Standard Time""','""South Africa Standard Time""','""Sri Lanka Standard Time""','""Taipei Standard Time""','""Tasmania Standard Time""','""Tokyo Standard Time""','""Tonga Standard Time""','""Turkey Standard Time""','""US Eastern Standard Time""','""US Mountain Standard Time""','""UTC""','""Venezuela Standard Time""','""Vladivostok Standard Time""','""W. Australia Standard Time""','""W. Central Africa Standard Time""','""W. Europe Standard Time""','""West Asia Standard Time""','""West Pacific Standard Time""','""Yakutsk Standard Time""'")]
        public string ContactDetailPreferredTimeZone { get => _createSupportTicketParametersBody.ContactDetailPreferredTimeZone ?? null; set => _createSupportTicketParametersBody.ContactDetailPreferredTimeZone = value; }

        /// <summary>Primary email address.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Primary email address.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Primary email address.",
        SerializedName = @"primaryEmailAddress",
        PossibleTypes = new [] { typeof(string) })]
        public string ContactDetailPrimaryEmailAddress { get => _createSupportTicketParametersBody.ContactDetailPrimaryEmailAddress ?? null; set => _createSupportTicketParametersBody.ContactDetailPrimaryEmailAddress = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Detailed description of the question or issue.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Detailed description of the question or issue.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Detailed description of the question or issue.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        public string Description { get => _createSupportTicketParametersBody.Description ?? null; set => _createSupportTicketParametersBody.Description = value; }

        /// <summary>Enrollment Id associated with the support ticket.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Enrollment Id associated with the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enrollment Id associated with the support ticket.",
        SerializedName = @"enrollmentId",
        PossibleTypes = new [] { typeof(string) })]
        public string EnrollmentId { get => _createSupportTicketParametersBody.EnrollmentId ?? null; set => _createSupportTicketParametersBody.EnrollmentId = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>File workspace name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "File workspace name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"File workspace name.",
        SerializedName = @"fileWorkspaceName",
        PossibleTypes = new [] { typeof(string) })]
        public string FileWorkspaceName { get => _createSupportTicketParametersBody.FileWorkspaceName ?? null; set => _createSupportTicketParametersBody.FileWorkspaceName = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Support ticket name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Support ticket name.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Support ticket name.",
        SerializedName = @"supportTicketName",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("SupportTicketName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>
        /// Each Azure service has its own set of issue categories, also known as problem classification. This parameter is the unique
        /// Id for the type of problem you are experiencing.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Each Azure service has its own set of issue categories, also known as problem classification. This parameter is the unique Id for the type of problem you are experiencing.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Each Azure service has its own set of issue categories, also known as problem classification. This parameter is the unique Id for the type of problem you are experiencing.",
        SerializedName = @"problemClassificationId",
        PossibleTypes = new [] { typeof(string) })]
        public string ProblemClassificationId { get => _createSupportTicketParametersBody.ProblemClassificationId ?? null; set => _createSupportTicketParametersBody.ProblemClassificationId = value; }

        /// <summary>Problem scoping questions associated with the support ticket.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Problem scoping questions associated with the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Problem scoping questions associated with the support ticket.",
        SerializedName = @"problemScopingQuestions",
        PossibleTypes = new [] { typeof(string) })]
        public string ProblemScopingQuestion { get => _createSupportTicketParametersBody.ProblemScopingQuestion ?? null; set => _createSupportTicketParametersBody.ProblemScopingQuestion = value; }

        /// <summary>Time in UTC (ISO 8601 format) when the problem started.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Time in UTC (ISO 8601 format) when the problem started.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time in UTC (ISO 8601 format) when the problem started.",
        SerializedName = @"problemStartTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime ProblemStartTime { get => _createSupportTicketParametersBody.ProblemStartTime ?? default(global::System.DateTime); set => _createSupportTicketParametersBody.ProblemStartTime = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>This property is required for providing the region and new quota limits.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This property is required for providing the region and new quota limits.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property is required for providing the region and new quota limits.",
        SerializedName = @"quotaChangeRequests",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IQuotaChangeRequest) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IQuotaChangeRequest[] QuotaTicketDetailQuotaChangeRequest { get => _createSupportTicketParametersBody.QuotaTicketDetailQuotaChangeRequest?.ToArray() ?? null /* fixedArrayOf */; set => _createSupportTicketParametersBody.QuotaTicketDetailQuotaChangeRequest = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IQuotaChangeRequest>(value) : null); }

        /// <summary>
        /// Required for certain quota types when there is a sub type, such as Batch, for which you are requesting a quota increase.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Required for certain quota types when there is a sub type, such as Batch, for which you are requesting a quota increase.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Required for certain quota types when there is a sub type, such as Batch, for which you are requesting a quota increase.",
        SerializedName = @"quotaChangeRequestSubType",
        PossibleTypes = new [] { typeof(string) })]
        public string QuotaTicketDetailQuotaChangeRequestSubType { get => _createSupportTicketParametersBody.QuotaTicketDetailQuotaChangeRequestSubType ?? null; set => _createSupportTicketParametersBody.QuotaTicketDetailQuotaChangeRequestSubType = value; }

        /// <summary>Quota change request version.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Quota change request version.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Quota change request version.",
        SerializedName = @"quotaChangeRequestVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string QuotaTicketDetailQuotaChangeRequestVersion { get => _createSupportTicketParametersBody.QuotaTicketDetailQuotaChangeRequestVersion ?? null; set => _createSupportTicketParametersBody.QuotaTicketDetailQuotaChangeRequestVersion = value; }

        /// <summary>Indicates if this requires a 24x7 response from Azure.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates if this requires a 24x7 response from Azure.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates if this requires a 24x7 response from Azure.",
        SerializedName = @"require24X7Response",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter Require24X7Response { get => _createSupportTicketParametersBody.Require24X7Response ?? default(global::System.Management.Automation.SwitchParameter); set => _createSupportTicketParametersBody.Require24X7Response = value; }

        /// <summary>This property indicates secondary consents for the support ticket</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This property indicates secondary consents for the support ticket")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This property indicates secondary consents for the support ticket",
        SerializedName = @"secondaryConsent",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISecondaryConsent) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISecondaryConsent[] SecondaryConsent { get => _createSupportTicketParametersBody.SecondaryConsent?.ToArray() ?? null /* fixedArrayOf */; set => _createSupportTicketParametersBody.SecondaryConsent = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISecondaryConsent>(value) : null); }

        /// <summary>
        /// This is the resource Id of the Azure service resource associated with the support ticket.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "This is the resource Id of the Azure service resource associated with the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"This is the resource Id of the Azure service resource associated with the support ticket.",
        SerializedName = @"serviceId",
        PossibleTypes = new [] { typeof(string) })]
        public string ServiceId { get => _createSupportTicketParametersBody.ServiceId ?? null; set => _createSupportTicketParametersBody.ServiceId = value; }

        /// <summary>
        /// A value that indicates the urgency of the case, which in turn determines the response time according to the service level
        /// agreement of the technical support plan you have with Azure. Note: 'Highest critical impact', also known as the 'Emergency
        /// - Severe impact' level in the Azure portal is reserved only for our Premium customers.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure. Note: 'Highest critical impact', also known as the 'Emergency - Severe impact' level in the Azure portal is reserved only for our Premium customers.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"A value that indicates the urgency of the case, which in turn determines the response time according to the service level agreement of the technical support plan you have with Azure. Note: 'Highest critical impact', also known as the 'Emergency - Severe impact' level in the Azure portal is reserved only for our Premium customers.",
        SerializedName = @"severity",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.PSArgumentCompleterAttribute("minimal", "moderate", "critical", "highestcriticalimpact")]
        public string Severity { get => _createSupportTicketParametersBody.Severity ?? null; set => _createSupportTicketParametersBody.Severity = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The ID of the target subscription. The value must be an UUID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The ID of the target subscription. The value must be an UUID.")]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The ID of the target subscription. The value must be an UUID.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.DefaultInfo(
        Name = @"",
        Description =@"",
        Script = @"(Get-AzContext).Subscription.Id",
        SetCondition = @"")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Path)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Support plan id associated with the support ticket.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Support plan id associated with the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Support plan id associated with the support ticket.",
        SerializedName = @"supportPlanId",
        PossibleTypes = new [] { typeof(string) })]
        public string SupportPlanId { get => _createSupportTicketParametersBody.SupportPlanId ?? null; set => _createSupportTicketParametersBody.SupportPlanId = value; }

        /// <summary>System generated support ticket Id that is unique.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "System generated support ticket Id that is unique.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"System generated support ticket Id that is unique.",
        SerializedName = @"supportTicketId",
        PossibleTypes = new [] { typeof(string) })]
        public string SupportTicketId { get => _createSupportTicketParametersBody.SupportTicketId ?? null; set => _createSupportTicketParametersBody.SupportTicketId = value; }

        /// <summary>
        /// This is the resource Id of the Azure service resource (For example: A virtual machine resource or an HDInsight resource)
        /// for which the support ticket is created.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This is the resource Id of the Azure service resource (For example: A virtual machine resource or an HDInsight resource) for which the support ticket is created.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This is the resource Id of the Azure service resource (For example: A virtual machine resource or an HDInsight resource) for which the support ticket is created.",
        SerializedName = @"resourceId",
        PossibleTypes = new [] { typeof(string) })]
        public string TechnicalTicketDetailResourceId { get => _createSupportTicketParametersBody.TechnicalTicketDetailResourceId ?? null; set => _createSupportTicketParametersBody.TechnicalTicketDetailResourceId = value; }

        /// <summary>Title of the support ticket.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Title of the support ticket.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Support.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Support.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Title of the support ticket.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        public string Title { get => _createSupportTicketParametersBody.Title ?? null; set => _createSupportTicketParametersBody.Title = value; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails">Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of NewAzSupportTicket_CreateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.Support.Cmdlets.NewAzSupportTicket_CreateExpanded Clone()
        {
            var clone = new NewAzSupportTicket_CreateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._createSupportTicketParametersBody = this._createSupportTicketParametersBody;
            clone.SubscriptionId = this.SubscriptionId;
            clone.Name = this.Name;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.DelayBeforePolling:
                    {
                        var data = messageData();
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        else
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                int delay = (int)(response.Headers.RetryAfter?.Delta?.TotalSeconds ?? 30);
                                WriteDebug($"Delaying {delay} seconds before polling.");
                                for (var now = 0; now < delay; ++now)
                                {
                                    WriteProgress(new global::System.Management.Automation.ProgressRecord(1, "In progress", "Checking operation status")
                                    {
                                        PercentComplete = now * 100 / delay
                                    });
                                    await global::System.Threading.Tasks.Task.Delay(1000, token);
                                }
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewAzSupportTicket_CreateExpanded" /> cmdlet class.
        /// </summary>
        public NewAzSupportTicket_CreateExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'SupportTicketsCreate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    await this.Client.SupportTicketsCreate(SubscriptionId, Name, _createSupportTicketParametersBody, onOk, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.SerializationMode.IncludeCreate);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { SubscriptionId=SubscriptionId,Name=Name})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Support.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Support.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails">Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Support.Models.ISupportTicketDetails
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}