// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support
{

    /// <summary>Gets or sets the test failover state.</summary>
    public partial struct TestFailoverState :
        System.IEquatable<TestFailoverState>
    {
        /// <summary>
        /// Test failover cleanup has completed/failed. This is a transient state before the state is moved back to None.
        /// </summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState MarkedForDeletion = @"MarkedForDeletion";

        /// <summary>Test failover is not active.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState None = @"None";

        /// <summary>Cleaning up test protected entities is in progress.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverCleanupCompleting = @"TestFailoverCleanupCompleting";

        /// <summary>Test failover cleanup has been initiated.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverCleanupInitiated = @"TestFailoverCleanupInitiated";

        /// <summary>Test failover has been completed successfully.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverCompleted = @"TestFailoverCompleted";

        /// <summary>Preparing test protected entities is in progress.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverCompleting = @"TestFailoverCompleting";

        /// <summary>Preparing test protected entities failed.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverCompletionFailed = @"TestFailoverCompletionFailed";

        /// <summary>Test failover initiation failed..</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverFailed = @"TestFailoverFailed";

        /// <summary>Test failover has been initiated.</summary>
        public static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState TestFailoverInitiated = @"TestFailoverInitiated";

        /// <summary>the value for an instance of the <see cref="TestFailoverState" /> Enum.</summary>
        private string _value { get; set; }

        /// <summary>Conversion from arbitrary object to TestFailoverState</summary>
        /// <param name="value">the value to convert to an instance of <see cref="TestFailoverState" />.</param>
        internal static object CreateFrom(object value)
        {
            return new TestFailoverState(global::System.Convert.ToString(value));
        }

        /// <summary>Compares values of enum type TestFailoverState</summary>
        /// <param name="e">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public bool Equals(Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState e)
        {
            return _value.Equals(e._value);
        }

        /// <summary>Compares values of enum type TestFailoverState (override for Object)</summary>
        /// <param name="obj">the value to compare against this instance.</param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public override bool Equals(object obj)
        {
            return obj is TestFailoverState && Equals((TestFailoverState)obj);
        }

        /// <summary>Returns hashCode for enum TestFailoverState</summary>
        /// <returns>The hashCode of the value</returns>
        public override int GetHashCode()
        {
            return this._value.GetHashCode();
        }

        /// <summary>Creates an instance of the <see cref="TestFailoverState"/> Enum class.</summary>
        /// <param name="underlyingValue">the value to create an instance for.</param>
        private TestFailoverState(string underlyingValue)
        {
            this._value = underlyingValue;
        }

        /// <summary>Returns string representation for TestFailoverState</summary>
        /// <returns>A string for this value.</returns>
        public override string ToString()
        {
            return this._value;
        }

        /// <summary>Implicit operator to convert string to TestFailoverState</summary>
        /// <param name="value">the value to convert to an instance of <see cref="TestFailoverState" />.</param>

        public static implicit operator TestFailoverState(string value)
        {
            return new TestFailoverState(value);
        }

        /// <summary>Implicit operator to convert TestFailoverState to string</summary>
        /// <param name="e">the value to convert to an instance of <see cref="TestFailoverState" />.</param>

        public static implicit operator string(Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState e)
        {
            return e._value;
        }

        /// <summary>Overriding != operator for enum TestFailoverState</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are not equal to the same value</returns>
        public static bool operator !=(Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState e1, Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState e2)
        {
            return !e2.Equals(e1);
        }

        /// <summary>Overriding == operator for enum TestFailoverState</summary>
        /// <param name="e1">the value to compare against <paramref name="e2" /></param>
        /// <param name="e2">the value to compare against <paramref name="e1" /></param>
        /// <returns><c>true</c> if the two instances are equal to the same value</returns>
        public static bool operator ==(Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState e1, Microsoft.Azure.PowerShell.Cmdlets.Migrate.Support.TestFailoverState e2)
        {
            return e2.Equals(e1);
        }
    }
}