// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Extensions;

    /// <summary>HyperVToAzStack disk input.</summary>
    public partial class HyperVToAzStackHcidiskInput :
        Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IHyperVToAzStackHcidiskInput,
        Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IHyperVToAzStackHcidiskInputInternal
    {

        /// <summary>Backing field for <see cref="DiskBlockSize" /> property.</summary>
        private long? _diskBlockSize;

        /// <summary>Gets or sets a value of disk block size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public long? DiskBlockSize { get => this._diskBlockSize; set => this._diskBlockSize = value; }

        /// <summary>Backing field for <see cref="DiskController" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputs _diskController;

        /// <summary>Disk controller.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputs DiskController { get => (this._diskController = this._diskController ?? new Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.DiskControllerInputs()); set => this._diskController = value; }

        /// <summary>Gets or sets the controller ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Inlined)]
        public int? DiskControllerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputsInternal)DiskController).ControllerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputsInternal)DiskController).ControllerId = value ?? default(int); }

        /// <summary>Gets or sets the controller Location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Inlined)]
        public int? DiskControllerLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputsInternal)DiskController).ControllerLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputsInternal)DiskController).ControllerLocation = value ?? default(int); }

        /// <summary>Gets or sets the controller name (IDE,SCSI).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Inlined)]
        public string DiskControllerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputsInternal)DiskController).ControllerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputsInternal)DiskController).ControllerName = value ?? null; }

        /// <summary>Backing field for <see cref="DiskFileFormat" /> property.</summary>
        private string _diskFileFormat;

        /// <summary>Gets or sets the type of the virtual hard disk, vhd or vhdx.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public string DiskFileFormat { get => this._diskFileFormat; set => this._diskFileFormat = value; }

        /// <summary>Backing field for <see cref="DiskId" /> property.</summary>
        private string _diskId;

        /// <summary>Gets or sets the disk Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public string DiskId { get => this._diskId; set => this._diskId = value; }

        /// <summary>Backing field for <see cref="DiskIdentifier" /> property.</summary>
        private string _diskIdentifier;

        /// <summary>Gets or sets a value of disk identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public string DiskIdentifier { get => this._diskIdentifier; set => this._diskIdentifier = value; }

        /// <summary>Backing field for <see cref="DiskLogicalSectorSize" /> property.</summary>
        private long? _diskLogicalSectorSize;

        /// <summary>Gets or sets a value of disk logical sector size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public long? DiskLogicalSectorSize { get => this._diskLogicalSectorSize; set => this._diskLogicalSectorSize = value; }

        /// <summary>Backing field for <see cref="DiskPhysicalSectorSize" /> property.</summary>
        private long? _diskPhysicalSectorSize;

        /// <summary>Gets or sets a value of disk physical sector size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public long? DiskPhysicalSectorSize { get => this._diskPhysicalSectorSize; set => this._diskPhysicalSectorSize = value; }

        /// <summary>Backing field for <see cref="DiskSizeGb" /> property.</summary>
        private long _diskSizeGb;

        /// <summary>Gets or sets the disk size in GB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public long DiskSizeGb { get => this._diskSizeGb; set => this._diskSizeGb = value; }

        /// <summary>Backing field for <see cref="IsDynamic" /> property.</summary>
        private bool? _isDynamic;

        /// <summary>
        /// Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public bool? IsDynamic { get => this._isDynamic; set => this._isDynamic = value; }

        /// <summary>Backing field for <see cref="IsOSDisk" /> property.</summary>
        private bool _isOSDisk;

        /// <summary>Gets or sets a value indicating whether disk is os disk.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public bool IsOSDisk { get => this._isOSDisk; set => this._isOSDisk = value; }

        /// <summary>Internal Acessors for DiskController</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputs Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IHyperVToAzStackHcidiskInputInternal.DiskController { get => (this._diskController = this._diskController ?? new Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.DiskControllerInputs()); set { {_diskController = value;} } }

        /// <summary>Backing field for <see cref="StorageContainerId" /> property.</summary>
        private string _storageContainerId;

        /// <summary>Gets or sets the target storage account ARM Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Origin(Microsoft.Azure.PowerShell.Cmdlets.Migrate.PropertyOrigin.Owned)]
        public string StorageContainerId { get => this._storageContainerId; set => this._storageContainerId = value; }

        /// <summary>Creates an new <see cref="HyperVToAzStackHcidiskInput" /> instance.</summary>
        public HyperVToAzStackHcidiskInput()
        {

        }
    }
    /// HyperVToAzStack disk input.
    public partial interface IHyperVToAzStackHcidiskInput :
        Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.IJsonSerializable
    {
        /// <summary>Gets or sets a value of disk block size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a value of disk block size.",
        SerializedName = @"diskBlockSize",
        PossibleTypes = new [] { typeof(long) })]
        long? DiskBlockSize { get; set; }
        /// <summary>Gets or sets the controller ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the controller ID.",
        SerializedName = @"controllerId",
        PossibleTypes = new [] { typeof(int) })]
        int? DiskControllerId { get; set; }
        /// <summary>Gets or sets the controller Location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the controller Location.",
        SerializedName = @"controllerLocation",
        PossibleTypes = new [] { typeof(int) })]
        int? DiskControllerLocation { get; set; }
        /// <summary>Gets or sets the controller name (IDE,SCSI).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the controller name (IDE,SCSI).",
        SerializedName = @"controllerName",
        PossibleTypes = new [] { typeof(string) })]
        string DiskControllerName { get; set; }
        /// <summary>Gets or sets the type of the virtual hard disk, vhd or vhdx.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or sets the type of the virtual hard disk, vhd or vhdx.",
        SerializedName = @"diskFileFormat",
        PossibleTypes = new [] { typeof(string) })]
        string DiskFileFormat { get; set; }
        /// <summary>Gets or sets the disk Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or sets the disk Id.",
        SerializedName = @"diskId",
        PossibleTypes = new [] { typeof(string) })]
        string DiskId { get; set; }
        /// <summary>Gets or sets a value of disk identifier.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a value of disk identifier.",
        SerializedName = @"diskIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string DiskIdentifier { get; set; }
        /// <summary>Gets or sets a value of disk logical sector size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a value of disk logical sector size.",
        SerializedName = @"diskLogicalSectorSize",
        PossibleTypes = new [] { typeof(long) })]
        long? DiskLogicalSectorSize { get; set; }
        /// <summary>Gets or sets a value of disk physical sector size.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a value of disk physical sector size.",
        SerializedName = @"diskPhysicalSectorSize",
        PossibleTypes = new [] { typeof(long) })]
        long? DiskPhysicalSectorSize { get; set; }
        /// <summary>Gets or sets the disk size in GB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or sets the disk size in GB.",
        SerializedName = @"diskSizeGB",
        PossibleTypes = new [] { typeof(long) })]
        long DiskSizeGb { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.",
        SerializedName = @"isDynamic",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsDynamic { get; set; }
        /// <summary>Gets or sets a value indicating whether disk is os disk.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Gets or sets a value indicating whether disk is os disk.",
        SerializedName = @"isOsDisk",
        PossibleTypes = new [] { typeof(bool) })]
        bool IsOSDisk { get; set; }
        /// <summary>Gets or sets the target storage account ARM Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Migrate.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Gets or sets the target storage account ARM Id.",
        SerializedName = @"storageContainerId",
        PossibleTypes = new [] { typeof(string) })]
        string StorageContainerId { get; set; }

    }
    /// HyperVToAzStack disk input.
    internal partial interface IHyperVToAzStackHcidiskInputInternal

    {
        /// <summary>Gets or sets a value of disk block size.</summary>
        long? DiskBlockSize { get; set; }
        /// <summary>Disk controller.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Migrate.Models.Api20240901.IDiskControllerInputs DiskController { get; set; }
        /// <summary>Gets or sets the controller ID.</summary>
        int? DiskControllerId { get; set; }
        /// <summary>Gets or sets the controller Location.</summary>
        int? DiskControllerLocation { get; set; }
        /// <summary>Gets or sets the controller name (IDE,SCSI).</summary>
        string DiskControllerName { get; set; }
        /// <summary>Gets or sets the type of the virtual hard disk, vhd or vhdx.</summary>
        string DiskFileFormat { get; set; }
        /// <summary>Gets or sets the disk Id.</summary>
        string DiskId { get; set; }
        /// <summary>Gets or sets a value of disk identifier.</summary>
        string DiskIdentifier { get; set; }
        /// <summary>Gets or sets a value of disk logical sector size.</summary>
        long? DiskLogicalSectorSize { get; set; }
        /// <summary>Gets or sets a value of disk physical sector size.</summary>
        long? DiskPhysicalSectorSize { get; set; }
        /// <summary>Gets or sets the disk size in GB.</summary>
        long DiskSizeGb { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether dynamic sizing is enabled on the virtual hard disk.
        /// </summary>
        bool? IsDynamic { get; set; }
        /// <summary>Gets or sets a value indicating whether disk is os disk.</summary>
        bool IsOSDisk { get; set; }
        /// <summary>Gets or sets the target storage account ARM Id.</summary>
        string StorageContainerId { get; set; }

    }
}