// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.VMware.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Extensions;

    /// <summary>NSX Segment Properties</summary>
    public partial class WorkloadNetworkSegmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentProperties,
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ConnectedGateway" /> property.</summary>
        private string _connectedGateway;

        /// <summary>Gateway which to connect segment to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string ConnectedGateway { get => this._connectedGateway; set => this._connectedGateway = value; }

        /// <summary>Backing field for <see cref="DisplayName" /> property.</summary>
        private string _displayName;

        /// <summary>Display name of the segment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string DisplayName { get => this._displayName; set => this._displayName = value; }

        /// <summary>Internal Acessors for PortVif</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal.PortVif { get => this._portVif; set { {_portVif = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for Status</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal.Status { get => this._status; set { {_status = value;} } }

        /// <summary>Internal Acessors for Subnet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnet Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPropertiesInternal.Subnet { get => (this._subnet = this._subnet ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.WorkloadNetworkSegmentSubnet()); set { {_subnet = value;} } }

        /// <summary>Backing field for <see cref="PortVif" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> _portVif;

        /// <summary>Port Vif which segment is associated with.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> PortVif { get => this._portVif; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>The provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="Revision" /> property.</summary>
        private long? _revision;

        /// <summary>NSX revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public long? Revision { get => this._revision; set => this._revision = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>Segment status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        public string Status { get => this._status; }

        /// <summary>Backing field for <see cref="Subnet" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnet _subnet;

        /// <summary>Subnet which to connect segment to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnet Subnet { get => (this._subnet = this._subnet ?? new Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.WorkloadNetworkSegmentSubnet()); set => this._subnet = value; }

        /// <summary>DHCP Range assigned for subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SubnetDhcpRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnetInternal)Subnet).DhcpRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnetInternal)Subnet).DhcpRange = value ?? null /* arrayOf */; }

        /// <summary>Gateway address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Origin(Microsoft.Azure.PowerShell.Cmdlets.VMware.PropertyOrigin.Inlined)]
        public string SubnetGatewayAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnetInternal)Subnet).GatewayAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnetInternal)Subnet).GatewayAddress = value ?? null; }

        /// <summary>Creates an new <see cref="WorkloadNetworkSegmentProperties" /> instance.</summary>
        public WorkloadNetworkSegmentProperties()
        {

        }
    }
    /// NSX Segment Properties
    public partial interface IWorkloadNetworkSegmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.IJsonSerializable
    {
        /// <summary>Gateway which to connect segment to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gateway which to connect segment to.",
        SerializedName = @"connectedGateway",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectedGateway { get; set; }
        /// <summary>Display name of the segment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Display name of the segment.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get; set; }
        /// <summary>Port Vif which segment is associated with.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Port Vif which segment is associated with.",
        SerializedName = @"portVif",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> PortVif { get;  }
        /// <summary>The provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The provisioning state",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Building", "Deleting", "Updating")]
        string ProvisioningState { get;  }
        /// <summary>NSX revision number.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"NSX revision number.",
        SerializedName = @"revision",
        PossibleTypes = new [] { typeof(long) })]
        long? Revision { get; set; }
        /// <summary>Segment status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Segment status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("SUCCESS", "FAILURE")]
        string Status { get;  }
        /// <summary>DHCP Range assigned for subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"DHCP Range assigned for subnet.",
        SerializedName = @"dhcpRanges",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SubnetDhcpRange { get; set; }
        /// <summary>Gateway address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.VMware.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gateway address.",
        SerializedName = @"gatewayAddress",
        PossibleTypes = new [] { typeof(string) })]
        string SubnetGatewayAddress { get; set; }

    }
    /// NSX Segment Properties
    internal partial interface IWorkloadNetworkSegmentPropertiesInternal

    {
        /// <summary>Gateway which to connect segment to.</summary>
        string ConnectedGateway { get; set; }
        /// <summary>Display name of the segment.</summary>
        string DisplayName { get; set; }
        /// <summary>Port Vif which segment is associated with.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentPortVif> PortVif { get; set; }
        /// <summary>The provisioning state</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Building", "Deleting", "Updating")]
        string ProvisioningState { get; set; }
        /// <summary>NSX revision number.</summary>
        long? Revision { get; set; }
        /// <summary>Segment status.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.VMware.PSArgumentCompleterAttribute("SUCCESS", "FAILURE")]
        string Status { get; set; }
        /// <summary>Subnet which to connect segment to.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.VMware.Models.IWorkloadNetworkSegmentSubnet Subnet { get; set; }
        /// <summary>DHCP Range assigned for subnet.</summary>
        System.Collections.Generic.List<string> SubnetDhcpRange { get; set; }
        /// <summary>Gateway address.</summary>
        string SubnetGatewayAddress { get; set; }

    }
}