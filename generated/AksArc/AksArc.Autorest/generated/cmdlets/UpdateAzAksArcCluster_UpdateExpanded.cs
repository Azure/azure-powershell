// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.AksArc.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Cmdlets;
    using System;

    /// <summary>Update the provisioned cluster instance</summary>
    /// <remarks>
    /// [OpenAPI] Get=>GET:"/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default"
    /// [OpenAPI] CreateOrUpdate=>PUT:"/{connectedClusterResourceUri}/providers/Microsoft.HybridContainerService/provisionedClusterInstances/default"
    /// </remarks>
    [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.InternalExport]
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzAksArcCluster_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Description(@"Update the provisioned cluster instance")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Generated]
    public partial class UpdateAzAksArcCluster_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>The provisioned cluster resource definition.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster _provisionedClusterInstanceBody = new Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.ProvisionedCluster();

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>The agent pool properties for the provisioned cluster.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The agent pool properties for the provisioned cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The agent pool properties for the provisioned cluster.",
        SerializedName = @"agentPoolProfiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.INamedAgentPoolProfile) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.INamedAgentPoolProfile[] AgentPoolProfile { get => _provisionedClusterInstanceBody.AgentPoolProfile?.ToArray() ?? null /* fixedArrayOf */; set => _provisionedClusterInstanceBody.AgentPoolProfile = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.INamedAgentPoolProfile>(value) : null); }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Valid values are 'true' and 'false'</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Valid values are 'true' and 'false'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Valid values are 'true' and 'false'",
        SerializedName = @"balance-similar-node-groups",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileBalanceSimilarNodeGroup { get => _provisionedClusterInstanceBody.AutoScalerProfileBalanceSimilarNodeGroup ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileBalanceSimilarNodeGroup = value; }

        /// <summary>
        /// If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders)
        /// for more information.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If not specified, the default is 'random'. See [expanders](https://github.com/kubernetes/autoscaler/blob/master/cluster-autoscaler/FAQ.md#what-are-expanders) for more information.",
        SerializedName = @"expander",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.PSArgumentCompleterAttribute("least-waste", "most-pods", "priority", "random")]
        public string AutoScalerProfileExpander { get => _provisionedClusterInstanceBody.AutoScalerProfileExpander ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileExpander = value; }

        /// <summary>The default is 10.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is 10.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is 10.",
        SerializedName = @"max-empty-bulk-delete",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileMaxEmptyBulkDelete { get => _provisionedClusterInstanceBody.AutoScalerProfileMaxEmptyBulkDelete ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileMaxEmptyBulkDelete = value; }

        /// <summary>The default is 600.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is 600.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is 600.",
        SerializedName = @"max-graceful-termination-sec",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileMaxGracefulTerminationSec { get => _provisionedClusterInstanceBody.AutoScalerProfileMaxGracefulTerminationSec ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileMaxGracefulTerminationSec = value; }

        /// <summary>
        /// The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '15m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.",
        SerializedName = @"max-node-provision-time",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileMaxNodeProvisionTime { get => _provisionedClusterInstanceBody.AutoScalerProfileMaxNodeProvisionTime ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileMaxNodeProvisionTime = value; }

        /// <summary>The default is 45. The maximum is 100 and the minimum is 0.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is 45. The maximum is 100 and the minimum is 0.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is 45. The maximum is 100 and the minimum is 0.",
        SerializedName = @"max-total-unready-percentage",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileMaxTotalUnreadyPercentage { get => _provisionedClusterInstanceBody.AutoScalerProfileMaxTotalUnreadyPercentage ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileMaxTotalUnreadyPercentage = value; }

        /// <summary>
        /// For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all
        /// the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be
        /// an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"For scenarios like burst/batch scale where you don't want CA to act before the kubernetes scheduler could schedule all the pods, you can tell CA to ignore unscheduled pods before they're a certain age. The default is '0s'. Values must be an integer followed by a unit ('s' for seconds, 'm' for minutes, 'h' for hours, etc).",
        SerializedName = @"new-pod-scale-up-delay",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileNewPodScaleUpDelay { get => _provisionedClusterInstanceBody.AutoScalerProfileNewPodScaleUpDelay ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileNewPodScaleUpDelay = value; }

        /// <summary>This must be an integer. The default is 3.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "This must be an integer. The default is 3.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This must be an integer. The default is 3.",
        SerializedName = @"ok-total-unready-count",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileOkTotalUnreadyCount { get => _provisionedClusterInstanceBody.AutoScalerProfileOkTotalUnreadyCount ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileOkTotalUnreadyCount = value; }

        /// <summary>
        /// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.",
        SerializedName = @"scale-down-delay-after-add",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScaleDownDelayAfterAdd { get => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownDelayAfterAdd ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownDelayAfterAdd = value; }

        /// <summary>
        /// The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m)
        /// is supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is the scan-interval. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.",
        SerializedName = @"scale-down-delay-after-delete",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScaleDownDelayAfterDelete { get => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownDelayAfterDelete ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownDelayAfterDelete = value; }

        /// <summary>
        /// The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '3m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.",
        SerializedName = @"scale-down-delay-after-failure",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScaleDownDelayAfterFailure { get => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownDelayAfterFailure ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownDelayAfterFailure = value; }

        /// <summary>
        /// The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '10m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.",
        SerializedName = @"scale-down-unneeded-time",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScaleDownUnneededTime { get => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownUnneededTime ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownUnneededTime = value; }

        /// <summary>
        /// The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '20m'. Values must be an integer followed by an 'm'. No unit of time other than minutes (m) is supported.",
        SerializedName = @"scale-down-unready-time",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScaleDownUnreadyTime { get => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownUnreadyTime ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownUnreadyTime = value; }

        /// <summary>The default is '0.5'.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '0.5'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '0.5'.",
        SerializedName = @"scale-down-utilization-threshold",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScaleDownUtilizationThreshold { get => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownUtilizationThreshold ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScaleDownUtilizationThreshold = value; }

        /// <summary>The default is '10'. Values must be an integer number of seconds.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is '10'. Values must be an integer number of seconds.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is '10'. Values must be an integer number of seconds.",
        SerializedName = @"scan-interval",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileScanInterval { get => _provisionedClusterInstanceBody.AutoScalerProfileScanInterval ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileScanInterval = value; }

        /// <summary>The default is true.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is true.",
        SerializedName = @"skip-nodes-with-local-storage",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileSkipNodesWithLocalStorage { get => _provisionedClusterInstanceBody.AutoScalerProfileSkipNodesWithLocalStorage ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileSkipNodesWithLocalStorage = value; }

        /// <summary>The default is true.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The default is true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The default is true.",
        SerializedName = @"skip-nodes-with-system-pods",
        PossibleTypes = new [] { typeof(string) })]
        public string AutoScalerProfileSkipNodesWithSystemPod { get => _provisionedClusterInstanceBody.AutoScalerProfileSkipNodesWithSystemPod ?? null; set => _provisionedClusterInstanceBody.AutoScalerProfileSkipNodesWithSystemPod = value; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.AksArc Client => Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.ClientAPI;

        /// <summary>IP Address or CIDR for SSH access to VMs in the provisioned cluster</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IP Address or CIDR for SSH access to VMs in the provisioned cluster")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP Address or CIDR for SSH access to VMs in the provisioned cluster",
        SerializedName = @"authorizedIPRanges",
        PossibleTypes = new [] { typeof(string) })]
        public string ClusterVMAccessProfileAuthorizedIprange { get => _provisionedClusterInstanceBody.ClusterVMAccessProfileAuthorizedIprange ?? null; set => _provisionedClusterInstanceBody.ClusterVMAccessProfileAuthorizedIprange = value; }

        /// <summary>Backing field for <see cref="ConnectedClusterResourceUri" /> property.</summary>
        private string _connectedClusterResourceUri;

        /// <summary>
        /// The fully qualified Azure Resource Manager identifier of the connected cluster resource.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The fully qualified Azure Resource Manager identifier of the connected cluster resource.")]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The fully qualified Azure Resource Manager identifier of the connected cluster resource.",
        SerializedName = @"connectedClusterResourceUri",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Path)]
        public string ConnectedClusterResourceUri { get => this._connectedClusterResourceUri; set => this._connectedClusterResourceUri = value; }

        /// <summary>
        /// Number of control plane nodes. The default value is 1, and the count should be an odd number
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of control plane nodes. The default value is 1, and the count should be an odd number")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of control plane nodes. The default value is 1, and the count should be an odd number",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(int) })]
        public int ControlPlaneCount { get => _provisionedClusterInstanceBody.ControlPlaneCount ?? default(int); set => _provisionedClusterInstanceBody.ControlPlaneCount = value; }

        /// <summary>IP address of the Kubernetes API server</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "IP address of the Kubernetes API server")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"IP address of the Kubernetes API server",
        SerializedName = @"hostIP",
        PossibleTypes = new [] { typeof(string) })]
        public string ControlPlaneEndpointHostIP { get => _provisionedClusterInstanceBody.ControlPlaneEndpointHostIP ?? null; set => _provisionedClusterInstanceBody.ControlPlaneEndpointHostIP = value; }

        /// <summary>VM sku size of the control plane nodes</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "VM sku size of the control plane nodes")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"VM sku size of the control plane nodes",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        public string ControlPlaneVMSize { get => _provisionedClusterInstanceBody.ControlPlaneVMSize ?? null; set => _provisionedClusterInstanceBody.ControlPlaneVMSize = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>ARM Id of the extended location.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "ARM Id of the extended location.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ARM Id of the extended location.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string ExtendedLocationName { get => _provisionedClusterInstanceBody.ExtendedLocationName ?? null; set => _provisionedClusterInstanceBody.ExtendedLocationName = value; }

        /// <summary>The extended location type. Allowed value: 'CustomLocation'</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The extended location type. Allowed value: 'CustomLocation'")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The extended location type. Allowed value: 'CustomLocation'",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.PSArgumentCompleterAttribute("CustomLocation")]
        public string ExtendedLocationType { get => _provisionedClusterInstanceBody.ExtendedLocationType ?? null; set => _provisionedClusterInstanceBody.ExtendedLocationType = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>
        /// List of ARM resource Ids (maximum 1) for the infrastructure network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "List of ARM resource Ids (maximum 1) for the infrastructure network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of ARM resource Ids (maximum 1) for the infrastructure network object e.g. /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureStackHCI/logicalNetworks/{logicalNetworkName}",
        SerializedName = @"vnetSubnetIds",
        PossibleTypes = new [] { typeof(string) })]
        public string[] InfraNetworkProfileVnetSubnetId { get => _provisionedClusterInstanceBody.InfraNetworkProfileVnetSubnetId?.ToArray() ?? null /* fixedArrayOf */; set => _provisionedClusterInstanceBody.InfraNetworkProfileVnetSubnetId = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>The version of Kubernetes in use by the provisioned cluster.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The version of Kubernetes in use by the provisioned cluster.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The version of Kubernetes in use by the provisioned cluster.",
        SerializedName = @"kubernetesVersion",
        PossibleTypes = new [] { typeof(string) })]
        public string KubernetesVersion { get => _provisionedClusterInstanceBody.KubernetesVersion ?? null; set => _provisionedClusterInstanceBody.KubernetesVersion = value; }

        /// <summary>Indicates whether Azure Hybrid Benefit is opted in. Default value is false</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether Azure Hybrid Benefit is opted in. Default value is false")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether Azure Hybrid Benefit is opted in. Default value is false",
        SerializedName = @"azureHybridBenefit",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.PSArgumentCompleterAttribute("True", "False", "NotApplicable")]
        public string LicenseProfileAzureHybridBenefit { get => _provisionedClusterInstanceBody.LicenseProfileAzureHybridBenefit ?? null; set => _provisionedClusterInstanceBody.LicenseProfileAzureHybridBenefit = value; }

        /// <summary>Number of HA Proxy load balancer VMs. The default value is 0.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Number of HA Proxy load balancer VMs. The default value is 0.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of HA Proxy load balancer VMs. The default value is 0.",
        SerializedName = @"count",
        PossibleTypes = new [] { typeof(int) })]
        public int LoadBalancerProfileCount { get => _provisionedClusterInstanceBody.LoadBalancerProfileCount ?? default(int); set => _provisionedClusterInstanceBody.LoadBalancerProfileCount = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// Network policy used for building Kubernetes network. Possible values include: 'calico'.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Network policy used for building Kubernetes network. Possible values include: 'calico'.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Network policy used for building Kubernetes network. Possible values include: 'calico'.",
        SerializedName = @"networkPolicy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.PSArgumentCompleterAttribute("calico")]
        public string NetworkProfileNetworkPolicy { get => _provisionedClusterInstanceBody.NetworkProfileNetworkPolicy ?? null; set => _provisionedClusterInstanceBody.NetworkProfileNetworkPolicy = value; }

        /// <summary>A CIDR notation IP Address range from which to assign pod IPs.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A CIDR notation IP Address range from which to assign pod IPs.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A CIDR notation IP Address range from which to assign pod IPs.",
        SerializedName = @"podCidr",
        PossibleTypes = new [] { typeof(string) })]
        public string NetworkProfilePodCidr { get => _provisionedClusterInstanceBody.NetworkProfilePodCidr ?? null; set => _provisionedClusterInstanceBody.NetworkProfilePodCidr = value; }

        /// <summary>Indicates whether to enable NFS CSI Driver. The default value is true.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether to enable NFS CSI Driver. The default value is true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to enable NFS CSI Driver. The default value is true.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter NfCsiDriverEnabled { get => _provisionedClusterInstanceBody.NfCsiDriverEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _provisionedClusterInstanceBody.NfCsiDriverEnabled = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>Indicates whether to enable SMB CSI Driver. The default value is true.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Indicates whether to enable SMB CSI Driver. The default value is true.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates whether to enable SMB CSI Driver. The default value is true.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(global::System.Management.Automation.SwitchParameter) })]
        public global::System.Management.Automation.SwitchParameter SmbCsiDriverEnabled { get => _provisionedClusterInstanceBody.SmbCsiDriverEnabled ?? default(global::System.Management.Automation.SwitchParameter); set => _provisionedClusterInstanceBody.SmbCsiDriverEnabled = value; }

        /// <summary>
        /// The list of SSH public keys used to authenticate with VMs. A maximum of 1 key may be specified.
        /// </summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The list of SSH public keys used to authenticate with VMs. A maximum of 1 key may be specified.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.Category(global::Microsoft.Azure.PowerShell.Cmdlets.AksArc.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of SSH public keys used to authenticate with VMs. A maximum of 1 key may be specified.",
        SerializedName = @"publicKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.ILinuxProfilePropertiesSshPublicKeysItem) })]
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.ILinuxProfilePropertiesSshPublicKeysItem[] SshPublicKey { get => _provisionedClusterInstanceBody.SshPublicKey?.ToArray() ?? null /* fixedArrayOf */; set => _provisionedClusterInstanceBody.SshPublicKey = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.ILinuxProfilePropertiesSshPublicKeysItem>(value) : null); }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster">Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>a duplicate instance of UpdateAzAksArcCluster_UpdateExpanded</returns>
        public Microsoft.Azure.PowerShell.Cmdlets.AksArc.Cmdlets.UpdateAzAksArcCluster_UpdateExpanded Clone()
        {
            var clone = new UpdateAzAksArcCluster_UpdateExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._provisionedClusterInstanceBody = this._provisionedClusterInstanceBody;
            clone.ConnectedClusterResourceUri = this.ConnectedClusterResourceUri;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.DelayBeforePolling:
                    {
                        var data = messageData();
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        else
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                int delay = (int)(response.Headers.RetryAfter?.Delta?.TotalSeconds ?? 30);
                                WriteDebug($"Delaying {delay} seconds before polling.");
                                for (var now = 0; now < delay; ++now)
                                {
                                    WriteProgress(new global::System.Management.Automation.ProgressRecord(1, "In progress", "Checking operation status")
                                    {
                                        PercentComplete = now * 100 / delay
                                    });
                                    await global::System.Threading.Tasks.Task.Delay(1000, token);
                                }
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ProvisionedClusterInstancesCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    _provisionedClusterInstanceBody = await this.Client.ProvisionedClusterInstancesGetWithResult(ConnectedClusterResourceUri, this, Pipeline);
                    this.Update_provisionedClusterInstanceBody();
                    await this.Client.ProvisionedClusterInstancesCreateOrUpdate(ConnectedClusterResourceUri, _provisionedClusterInstanceBody, onOk, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.SerializationMode.IncludeUpdate);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { ConnectedClusterResourceUri=ConnectedClusterResourceUri})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAzAksArcCluster_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzAksArcCluster_UpdateExpanded()
        {

        }

        private void Update_provisionedClusterInstanceBody()
        {
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ExtendedLocationName")))
            {
                this.ExtendedLocationName = (string)(this.MyInvocation?.BoundParameters["ExtendedLocationName"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("KubernetesVersion")))
            {
                this.KubernetesVersion = (string)(this.MyInvocation?.BoundParameters["KubernetesVersion"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AgentPoolProfile")))
            {
                this.AgentPoolProfile = (Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.INamedAgentPoolProfile[])(this.MyInvocation?.BoundParameters["AgentPoolProfile"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NetworkProfileNetworkPolicy")))
            {
                this.NetworkProfileNetworkPolicy = (string)(this.MyInvocation?.BoundParameters["NetworkProfileNetworkPolicy"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NetworkProfilePodCidr")))
            {
                this.NetworkProfilePodCidr = (string)(this.MyInvocation?.BoundParameters["NetworkProfilePodCidr"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileExpander")))
            {
                this.AutoScalerProfileExpander = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileExpander"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ExtendedLocationType")))
            {
                this.ExtendedLocationType = (string)(this.MyInvocation?.BoundParameters["ExtendedLocationType"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ControlPlaneCount")))
            {
                this.ControlPlaneCount = (int)(this.MyInvocation?.BoundParameters["ControlPlaneCount"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ControlPlaneVMSize")))
            {
                this.ControlPlaneVMSize = (string)(this.MyInvocation?.BoundParameters["ControlPlaneVMSize"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("LoadBalancerProfileCount")))
            {
                this.LoadBalancerProfileCount = (int)(this.MyInvocation?.BoundParameters["LoadBalancerProfileCount"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ClusterVMAccessProfileAuthorizedIprange")))
            {
                this.ClusterVMAccessProfileAuthorizedIprange = (string)(this.MyInvocation?.BoundParameters["ClusterVMAccessProfileAuthorizedIprange"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("LicenseProfileAzureHybridBenefit")))
            {
                this.LicenseProfileAzureHybridBenefit = (string)(this.MyInvocation?.BoundParameters["LicenseProfileAzureHybridBenefit"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileBalanceSimilarNodeGroup")))
            {
                this.AutoScalerProfileBalanceSimilarNodeGroup = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileBalanceSimilarNodeGroup"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileMaxEmptyBulkDelete")))
            {
                this.AutoScalerProfileMaxEmptyBulkDelete = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileMaxEmptyBulkDelete"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileMaxGracefulTerminationSec")))
            {
                this.AutoScalerProfileMaxGracefulTerminationSec = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileMaxGracefulTerminationSec"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileMaxNodeProvisionTime")))
            {
                this.AutoScalerProfileMaxNodeProvisionTime = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileMaxNodeProvisionTime"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileMaxTotalUnreadyPercentage")))
            {
                this.AutoScalerProfileMaxTotalUnreadyPercentage = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileMaxTotalUnreadyPercentage"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileNewPodScaleUpDelay")))
            {
                this.AutoScalerProfileNewPodScaleUpDelay = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileNewPodScaleUpDelay"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileOkTotalUnreadyCount")))
            {
                this.AutoScalerProfileOkTotalUnreadyCount = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileOkTotalUnreadyCount"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScanInterval")))
            {
                this.AutoScalerProfileScanInterval = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScanInterval"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScaleDownDelayAfterAdd")))
            {
                this.AutoScalerProfileScaleDownDelayAfterAdd = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScaleDownDelayAfterAdd"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScaleDownDelayAfterDelete")))
            {
                this.AutoScalerProfileScaleDownDelayAfterDelete = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScaleDownDelayAfterDelete"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScaleDownDelayAfterFailure")))
            {
                this.AutoScalerProfileScaleDownDelayAfterFailure = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScaleDownDelayAfterFailure"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScaleDownUnneededTime")))
            {
                this.AutoScalerProfileScaleDownUnneededTime = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScaleDownUnneededTime"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScaleDownUnreadyTime")))
            {
                this.AutoScalerProfileScaleDownUnreadyTime = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScaleDownUnreadyTime"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileScaleDownUtilizationThreshold")))
            {
                this.AutoScalerProfileScaleDownUtilizationThreshold = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileScaleDownUtilizationThreshold"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileSkipNodesWithLocalStorage")))
            {
                this.AutoScalerProfileSkipNodesWithLocalStorage = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileSkipNodesWithLocalStorage"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AutoScalerProfileSkipNodesWithSystemPod")))
            {
                this.AutoScalerProfileSkipNodesWithSystemPod = (string)(this.MyInvocation?.BoundParameters["AutoScalerProfileSkipNodesWithSystemPod"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("SshPublicKey")))
            {
                this.SshPublicKey = (Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.ILinuxProfilePropertiesSshPublicKeysItem[])(this.MyInvocation?.BoundParameters["SshPublicKey"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ControlPlaneEndpointHostIP")))
            {
                this.ControlPlaneEndpointHostIP = (string)(this.MyInvocation?.BoundParameters["ControlPlaneEndpointHostIP"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("SmbCsiDriverEnabled")))
            {
                this.SmbCsiDriverEnabled = (global::System.Management.Automation.SwitchParameter)(this.MyInvocation?.BoundParameters["SmbCsiDriverEnabled"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NfCsiDriverEnabled")))
            {
                this.NfCsiDriverEnabled = (global::System.Management.Automation.SwitchParameter)(this.MyInvocation?.BoundParameters["NfCsiDriverEnabled"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("InfraNetworkProfileVnetSubnetId")))
            {
                this.InfraNetworkProfileVnetSubnetId = (string[])(this.MyInvocation?.BoundParameters["InfraNetworkProfileVnetSubnetId"]);
            }
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.AksArc.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.AksArc.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster">Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.AksArc.Models.IProvisionedCluster
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}