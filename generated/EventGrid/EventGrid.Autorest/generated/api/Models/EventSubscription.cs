// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Extensions;

    /// <summary>Event Subscription.</summary>
    public partial class EventSubscription :
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscription,
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal,
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Resource();

        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent
        /// to the dead letter destination.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination DeadLetterDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterDestination = value ?? null /* model class */; }

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens
        /// being used during delivery / dead-lettering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination DeadLetterWithResourceIdentityDeadLetterDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestination = value ?? null /* model class */; }

        /// <summary>Type of the endpoint for the dead letter destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType; }

        /// <summary>
        /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
        /// and a set of user-assigned identities. The type 'None' will remove any identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string DeadLetterWithResourceIdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityType = value ?? null; }

        /// <summary>The user identity associated with the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string DeadLetterWithResourceIdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityUserAssignedIdentity = value ?? null; }

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination DeliveryWithResourceIdentityDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityDestination = value ?? null /* model class */; }

        /// <summary>
        /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
        /// and a set of user-assigned identities. The type 'None' will remove any identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string DeliveryWithResourceIdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityType = value ?? null; }

        /// <summary>The user identity associated with the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string DeliveryWithResourceIdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityUserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityUserAssignedIdentity = value ?? null; }

        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination Destination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Destination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Destination = value ?? null /* model class */; }

        /// <summary>Type of the endpoint for the dead letter destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string EndpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).EndpointType; }

        /// <summary>The event delivery schema for the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string EventDeliverySchema { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).EventDeliverySchema; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).EventDeliverySchema = value ?? null; }

        /// <summary>Expiration time of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public global::System.DateTime? ExpirationTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).ExpirationTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).ExpirationTimeUtc = value ?? default(global::System.DateTime); }

        /// <summary>An array of advanced filters that are used for filtering event subscriptions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> FilterAdvancedFilter { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterAdvancedFilter; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterAdvancedFilter = value ?? null /* arrayOf */; }

        /// <summary>
        /// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public bool? FilterEnableAdvancedFilteringOnArray { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterEnableAdvancedFilteringOnArray; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterEnableAdvancedFilteringOnArray = value ?? default(bool); }

        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all
        /// default event types, set the IncludedEventTypes to null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> FilterIncludedEventType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterIncludedEventType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterIncludedEventType = value ?? null /* arrayOf */; }

        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public bool? FilterIsSubjectCaseSensitive { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterIsSubjectCaseSensitive; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterIsSubjectCaseSensitive = value ?? default(bool); }

        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string FilterSubjectBeginsWith { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterSubjectBeginsWith; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterSubjectBeginsWith = value ?? null; }

        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string FilterSubjectEndsWith { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterSubjectEndsWith; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).FilterSubjectEndsWith = value ?? null; }

        /// <summary>Fully qualified identifier of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Id; }

        /// <summary>List of user defined labels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> Label { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Label; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Label = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for DeadLetterDestination</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.DeadLetterDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterDestination = value; }

        /// <summary>Internal Acessors for DeadLetterWithResourceIdentityDeadLetterDestination</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.DeadLetterWithResourceIdentityDeadLetterDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestination; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestination = value; }

        /// <summary>
        /// Internal Acessors for DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType = value; }

        /// <summary>Internal Acessors for EndpointType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.EndpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).EndpointType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).EndpointType = value; }

        /// <summary>Internal Acessors for Filter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionFilter Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.Filter { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Filter; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Filter = value; }

        /// <summary>Internal Acessors for PropertiesDeadLetterWithResourceIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterWithResourceIdentity Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.PropertiesDeadLetterWithResourceIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentity = value; }

        /// <summary>Internal Acessors for PropertiesDeadLetterWithResourceIdentityIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionIdentity Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.PropertiesDeadLetterWithResourceIdentityIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeadLetterWithResourceIdentityIdentity = value; }

        /// <summary>Internal Acessors for PropertiesDeliveryWithResourceIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeliveryWithResourceIdentity Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.PropertiesDeliveryWithResourceIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentity = value; }

        /// <summary>Internal Acessors for PropertiesDeliveryWithResourceIdentityIdentity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionIdentity Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.PropertiesDeliveryWithResourceIdentityIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).DeliveryWithResourceIdentityIdentity = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.EventSubscriptionProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for RetryPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IRetryPolicy Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.RetryPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).RetryPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).RetryPolicy = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.SystemData()); set { {_systemData = value;} } }

        /// <summary>Internal Acessors for Topic</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionInternal.Topic { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Topic; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Topic = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Type = value; }

        /// <summary>Name of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties _property;

        /// <summary>Properties of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.EventSubscriptionProperties()); set => this._property = value; }

        /// <summary>Provisioning state of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Time To Live (in minutes) for events.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public int? RetryPolicyEventTimeToLiveInMinute { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).RetryPolicyEventTimeToLiveInMinute; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).RetryPolicyEventTimeToLiveInMinute = value ?? default(int); }

        /// <summary>Maximum number of delivery retry attempts for events.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public int? RetryPolicyMaxDeliveryAttempt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).RetryPolicyMaxDeliveryAttempt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).RetryPolicyMaxDeliveryAttempt = value ?? default(int); }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemData _systemData;

        /// <summary>The system metadata relating to Event Subscription resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).CreatedByType = value ?? null; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemDataInternal)SystemData).LastModifiedByType = value ?? null; }

        /// <summary>Name of the topic of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inlined)]
        public string Topic { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionPropertiesInternal)Property).Topic; }

        /// <summary>Type of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Origin(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="EventSubscription" /> instance.</summary>
        public EventSubscription()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Event Subscription.
    public partial interface IEventSubscription :
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResource
    {
        /// <summary>Type of the endpoint for the dead letter destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of the endpoint for the dead letter destination",
        SerializedName = @"endpointType",
        PossibleTypes = new [] { typeof(string) })]
        string DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType { get;  }
        /// <summary>
        /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
        /// and a set of user-assigned identities. The type 'None' will remove any identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("SystemAssigned", "UserAssigned")]
        string DeadLetterWithResourceIdentityType { get; set; }
        /// <summary>The user identity associated with the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user identity associated with the resource.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string DeadLetterWithResourceIdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Information about the destination where events have to be delivered for the event subscription.
        Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.",
        SerializedName = @"destination",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination DeliveryWithResourceIdentityDestination { get; set; }
        /// <summary>
        /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
        /// and a set of user-assigned identities. The type 'None' will remove any identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity and a set of user-assigned identities. The type 'None' will remove any identity.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("SystemAssigned", "UserAssigned")]
        string DeliveryWithResourceIdentityType { get; set; }
        /// <summary>The user identity associated with the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The user identity associated with the resource.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string DeliveryWithResourceIdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Information about the destination where events have to be delivered for the event subscription.
        Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.",
        SerializedName = @"destination",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination) })]
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination Destination { get; set; }
        /// <summary>Type of the endpoint for the dead letter destination</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of the endpoint for the dead letter destination",
        SerializedName = @"endpointType",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointType { get;  }
        /// <summary>The event delivery schema for the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The event delivery schema for the event subscription.",
        SerializedName = @"eventDeliverySchema",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("EventGridSchema", "CustomInputSchema", "CloudEventSchemaV1_0")]
        string EventDeliverySchema { get; set; }
        /// <summary>Expiration time of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Expiration time of the event subscription.",
        SerializedName = @"expirationTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationTimeUtc { get; set; }
        /// <summary>An array of advanced filters that are used for filtering event subscriptions.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of advanced filters that are used for filtering event subscriptions.",
        SerializedName = @"advancedFilters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> FilterAdvancedFilter { get; set; }
        /// <summary>
        /// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.",
        SerializedName = @"enableAdvancedFilteringOnArrays",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FilterEnableAdvancedFilteringOnArray { get; set; }
        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all
        /// default event types, set the IncludedEventTypes to null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all default event types, set the IncludedEventTypes to null.",
        SerializedName = @"includedEventTypes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> FilterIncludedEventType { get; set; }
        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        should be compared in a case sensitive manner.",
        SerializedName = @"isSubjectCaseSensitive",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FilterIsSubjectCaseSensitive { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An optional string to filter events for an event subscription based on a resource path prefix.
        The format of this depends on the publisher of the events.
        Wildcard characters are not supported in this path.",
        SerializedName = @"subjectBeginsWith",
        PossibleTypes = new [] { typeof(string) })]
        string FilterSubjectBeginsWith { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An optional string to filter events for an event subscription based on a resource path suffix.
        Wildcard characters are not supported in this path.",
        SerializedName = @"subjectEndsWith",
        PossibleTypes = new [] { typeof(string) })]
        string FilterSubjectEndsWith { get; set; }
        /// <summary>List of user defined labels.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of user defined labels.",
        SerializedName = @"labels",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> Label { get; set; }
        /// <summary>Provisioning state of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the event subscription.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("Creating", "Updating", "Deleting", "Succeeded", "Canceled", "Failed", "AwaitingManualAction")]
        string ProvisioningState { get;  }
        /// <summary>Time To Live (in minutes) for events.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Time To Live (in minutes) for events.",
        SerializedName = @"eventTimeToLiveInMinutes",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryPolicyEventTimeToLiveInMinute { get; set; }
        /// <summary>Maximum number of delivery retry attempts for events.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Maximum number of delivery retry attempts for events.",
        SerializedName = @"maxDeliveryAttempts",
        PossibleTypes = new [] { typeof(int) })]
        int? RetryPolicyMaxDeliveryAttempt { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get;  }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get;  }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataCreatedByType { get;  }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get;  }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get;  }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataLastModifiedByType { get;  }
        /// <summary>Name of the topic of the event subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Name of the topic of the event subscription.",
        SerializedName = @"topic",
        PossibleTypes = new [] { typeof(string) })]
        string Topic { get;  }

    }
    /// Event Subscription.
    internal partial interface IEventSubscriptionInternal :
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceInternal
    {
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent
        /// to the dead letter destination.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination DeadLetterDestination { get; set; }
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens
        /// being used during delivery / dead-lettering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterDestination DeadLetterWithResourceIdentityDeadLetterDestination { get; set; }
        /// <summary>Type of the endpoint for the dead letter destination</summary>
        string DeadLetterWithResourceIdentityDeadLetterDestinationEndpointType { get; set; }
        /// <summary>
        /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
        /// and a set of user-assigned identities. The type 'None' will remove any identity.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("SystemAssigned", "UserAssigned")]
        string DeadLetterWithResourceIdentityType { get; set; }
        /// <summary>The user identity associated with the resource.</summary>
        string DeadLetterWithResourceIdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination DeliveryWithResourceIdentityDestination { get; set; }
        /// <summary>
        /// The type of managed identity used. The type 'SystemAssigned, UserAssigned' includes both an implicitly created identity
        /// and a set of user-assigned identities. The type 'None' will remove any identity.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("SystemAssigned", "UserAssigned")]
        string DeliveryWithResourceIdentityType { get; set; }
        /// <summary>The user identity associated with the resource.</summary>
        string DeliveryWithResourceIdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses Azure Event Grid's identity to acquire the authentication tokens being used during delivery / dead-lettering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionDestination Destination { get; set; }
        /// <summary>Type of the endpoint for the dead letter destination</summary>
        string EndpointType { get; set; }
        /// <summary>The event delivery schema for the event subscription.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("EventGridSchema", "CustomInputSchema", "CloudEventSchemaV1_0")]
        string EventDeliverySchema { get; set; }
        /// <summary>Expiration time of the event subscription.</summary>
        global::System.DateTime? ExpirationTimeUtc { get; set; }
        /// <summary>Information about the filter for the event subscription.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionFilter Filter { get; set; }
        /// <summary>An array of advanced filters that are used for filtering event subscriptions.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IAdvancedFilter> FilterAdvancedFilter { get; set; }
        /// <summary>
        /// Allows advanced filters to be evaluated against an array of values instead of expecting a singular value.
        /// </summary>
        bool? FilterEnableAdvancedFilteringOnArray { get; set; }
        /// <summary>
        /// A list of applicable event types that need to be part of the event subscription. If it is desired to subscribe to all
        /// default event types, set the IncludedEventTypes to null.
        /// </summary>
        System.Collections.Generic.List<string> FilterIncludedEventType { get; set; }
        /// <summary>
        /// Specifies if the SubjectBeginsWith and SubjectEndsWith properties of the filter
        /// should be compared in a case sensitive manner.
        /// </summary>
        bool? FilterIsSubjectCaseSensitive { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path prefix.
        /// The format of this depends on the publisher of the events.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        string FilterSubjectBeginsWith { get; set; }
        /// <summary>
        /// An optional string to filter events for an event subscription based on a resource path suffix.
        /// Wildcard characters are not supported in this path.
        /// </summary>
        string FilterSubjectEndsWith { get; set; }
        /// <summary>List of user defined labels.</summary>
        System.Collections.Generic.List<string> Label { get; set; }
        /// <summary>
        /// The dead letter destination of the event subscription. Any event that cannot be delivered to its' destination is sent
        /// to the dead letter destination.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens
        /// being used during delivery / dead-lettering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeadLetterWithResourceIdentity PropertiesDeadLetterWithResourceIdentity { get; set; }
        /// <summary>The identity to use when dead-lettering events.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionIdentity PropertiesDeadLetterWithResourceIdentityIdentity { get; set; }
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// Uses the managed identity setup on the parent resource (namely, topic or domain) to acquire the authentication tokens
        /// being used during delivery / dead-lettering.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IDeliveryWithResourceIdentity PropertiesDeliveryWithResourceIdentity { get; set; }
        /// <summary>The identity to use when delivering events.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionIdentity PropertiesDeliveryWithResourceIdentityIdentity { get; set; }
        /// <summary>Properties of the event subscription.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventSubscriptionProperties Property { get; set; }
        /// <summary>Provisioning state of the event subscription.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("Creating", "Updating", "Deleting", "Succeeded", "Canceled", "Failed", "AwaitingManualAction")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// The retry policy for events. This can be used to configure maximum number of delivery attempts and time to live for events.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IRetryPolicy RetryPolicy { get; set; }
        /// <summary>Time To Live (in minutes) for events.</summary>
        int? RetryPolicyEventTimeToLiveInMinute { get; set; }
        /// <summary>Maximum number of delivery retry attempts for events.</summary>
        int? RetryPolicyMaxDeliveryAttempt { get; set; }
        /// <summary>The system metadata relating to Event Subscription resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataLastModifiedByType { get; set; }
        /// <summary>Name of the topic of the event subscription.</summary>
        string Topic { get; set; }

    }
}