// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Cmdlets;
    using System;

    /// <summary>Synchronously creates or updates a new channel with the specified parameters.</summary>
    /// <remarks>
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsCommon.New, @"AzEventGridChannel_CreateViaIdentityPartnerNamespaceExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Description(@"Synchronously creates or updates a new channel with the specified parameters.")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Generated]
    [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.HttpPath(Path = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/partnerNamespaces/{partnerNamespaceName}/channels/{channelName}", ApiVersion = "2023-06-01-preview")]
    public partial class NewAzEventGridChannel_CreateViaIdentityPartnerNamespaceExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>Channel info.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel _channelInfoBody = new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.Channel();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The type of the event channel which represents the direction flow of events.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The type of the event channel which represents the direction flow of events.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The type of the event channel which represents the direction flow of events.",
        SerializedName = @"channelType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("PartnerTopic", "PartnerDestination")]
        public string ChannelType { get => _channelInfoBody.ChannelType ?? null; set => _channelInfoBody.ChannelType = value; }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.EventGrid Client => Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.ClientAPI;

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>
        /// A collection of inline event types for the resource. The inline event type keys are of type string which represents the
        /// name of the event.An example of a valid inline event name is "Contoso.OrderCreated".The inline event type values are of
        /// type InlineEventProperties and will contain additional information for every inline event type.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.An example of a valid inline event name is \"Contoso.OrderCreated\".The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A collection of inline event types for the resource. The inline event type keys are of type string which represents the name of the event.An example of a valid inline event name is ""Contoso.OrderCreated"".The inline event type values are of type InlineEventProperties and will contain additional information for every inline event type.",
        SerializedName = @"inlineEventTypes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventTypeInfoInlineEventTypes) })]
        [global::System.Management.Automation.Alias("InlineEvent")]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventTypeInfoInlineEventTypes EventTypeInfoInlineEventType { get => _channelInfoBody.EventTypeInfoInlineEventType ?? null /* object */; set => _channelInfoBody.EventTypeInfoInlineEventType = value; }

        /// <summary>The kind of event type used.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The kind of event type used.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The kind of event type used.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("Inline")]
        [global::System.Management.Automation.Alias("EventTypeKind")]
        public string EventTypeInfoKind { get => _channelInfoBody.EventTypeInfoKind ?? null; set => _channelInfoBody.EventTypeInfoKind = value; }

        /// <summary>
        /// Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,the channel
        /// and corresponding partner topic are deleted.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,the channel and corresponding partner topic are deleted.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Expiration time of the channel. If this timer expires while the corresponding partner topic is never activated,the channel and corresponding partner topic are deleted.",
        SerializedName = @"expirationTimeIfNotActivatedUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime ExpirationTimeIfNotActivatedUtc { get => _channelInfoBody.ExpirationTimeIfNotActivatedUtc ?? default(global::System.DateTime); set => _channelInfoBody.ExpirationTimeIfNotActivatedUtc = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// Context or helpful message that can be used during the approval process by the subscriber.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Context or helpful message that can be used during the approval process by the subscriber.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Context or helpful message that can be used during the approval process by the subscriber.",
        SerializedName = @"messageForActivation",
        PossibleTypes = new [] { typeof(string) })]
        public string MessageForActivation { get => _channelInfoBody.MessageForActivation ?? null; set => _channelInfoBody.MessageForActivation = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of the channel.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Name of the channel.")]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of the channel.",
        SerializedName = @"channelName",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("ChannelName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>
        /// Azure subscription ID of the subscriber. The partner destination associated with the channel will becreated under this
        /// Azure subscription.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure subscription ID of the subscriber. The partner destination associated with the channel will becreated under this Azure subscription.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure subscription ID of the subscriber. The partner destination associated with the channel will becreated under this Azure subscription.",
        SerializedName = @"azureSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string PartnerDestinationInfoAzureSubscriptionId { get => _channelInfoBody.PartnerDestinationInfoAzureSubscriptionId ?? null; set => _channelInfoBody.PartnerDestinationInfoAzureSubscriptionId = value; }

        /// <summary>Additional context of the partner destination endpoint.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Additional context of the partner destination endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Additional context of the partner destination endpoint.",
        SerializedName = @"endpointServiceContext",
        PossibleTypes = new [] { typeof(string) })]
        public string PartnerDestinationInfoEndpointServiceContext { get => _channelInfoBody.PartnerDestinationInfoEndpointServiceContext ?? null; set => _channelInfoBody.PartnerDestinationInfoEndpointServiceContext = value; }

        /// <summary>Name of the partner destination associated with the channel.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the partner destination associated with the channel.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the partner destination associated with the channel.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        public string PartnerDestinationInfoName { get => _channelInfoBody.PartnerDestinationInfoName ?? null; set => _channelInfoBody.PartnerDestinationInfoName = value; }

        /// <summary>
        /// Azure Resource Group of the subscriber. The partner destination associated with the channel will becreated under this
        /// resource group.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure Resource Group of the subscriber. The partner destination associated with the channel will becreated under this resource group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Resource Group of the subscriber. The partner destination associated with the channel will becreated under this resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        public string PartnerDestinationInfoResourceGroupName { get => _channelInfoBody.PartnerDestinationInfoResourceGroupName ?? null; set => _channelInfoBody.PartnerDestinationInfoResourceGroupName = value; }

        /// <summary>Change history of the resource move.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Change history of the resource move.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Change history of the resource move.",
        SerializedName = @"resourceMoveChangeHistory",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceMoveChangeHistory) })]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceMoveChangeHistory[] PartnerDestinationInfoResourceMoveChangeHistory { get => _channelInfoBody.PartnerDestinationInfoResourceMoveChangeHistory?.ToArray() ?? null /* fixedArrayOf */; set => _channelInfoBody.PartnerDestinationInfoResourceMoveChangeHistory = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IResourceMoveChangeHistory>(value) : null); }

        /// <summary>Backing field for <see cref="PartnerNamespaceInputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity _partnerNamespaceInputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IEventGridIdentity PartnerNamespaceInputObject { get => this._partnerNamespaceInputObject; set => this._partnerNamespaceInputObject = value; }

        /// <summary>
        /// Azure subscription ID of the subscriber. The partner topic associated with the channel will becreated under this Azure
        /// subscription.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure subscription ID of the subscriber. The partner topic associated with the channel will becreated under this Azure subscription.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure subscription ID of the subscriber. The partner topic associated with the channel will becreated under this Azure subscription.",
        SerializedName = @"azureSubscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        public string PartnerTopicInfoAzureSubscriptionId { get => _channelInfoBody.PartnerTopicInfoAzureSubscriptionId ?? null; set => _channelInfoBody.PartnerTopicInfoAzureSubscriptionId = value; }

        /// <summary>Name of the partner topic associated with the channel.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Name of the partner topic associated with the channel.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the partner topic associated with the channel.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("PartnerTopicName")]
        public string PartnerTopicInfoName { get => _channelInfoBody.PartnerTopicInfoName ?? null; set => _channelInfoBody.PartnerTopicInfoName = value; }

        /// <summary>
        /// Azure Resource Group of the subscriber. The partner topic associated with the channel will becreated under this resource
        /// group.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Azure Resource Group of the subscriber. The partner topic associated with the channel will becreated under this resource group.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Resource Group of the subscriber. The partner topic associated with the channel will becreated under this resource group.",
        SerializedName = @"resourceGroupName",
        PossibleTypes = new [] { typeof(string) })]
        public string PartnerTopicInfoResourceGroupName { get => _channelInfoBody.PartnerTopicInfoResourceGroupName ?? null; set => _channelInfoBody.PartnerTopicInfoResourceGroupName = value; }

        /// <summary>
        /// The source information is provided by the publisher to determine the scope or context from which the eventsare originating.
        /// This information can be used by the subscriber during the approval process of thecreated partner topic.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The source information is provided by the publisher to determine the scope or context from which the eventsare originating. This information can be used by the subscriber during the approval process of thecreated partner topic.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The source information is provided by the publisher to determine the scope or context from which the eventsare originating. This information can be used by the subscriber during the approval process of thecreated partner topic.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("PartnerTopicSource")]
        public string PartnerTopicInfoSource { get => _channelInfoBody.PartnerTopicInfoSource ?? null; set => _channelInfoBody.PartnerTopicInfoSource = value; }

        /// <summary>
        /// When specified, forces the cmdlet return a 'bool' given that there isn't a return type by default.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Returns true when the command succeeds")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter PassThru { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>Provisioning state of the channel.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Provisioning state of the channel.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Provisioning state of the channel.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("Creating", "Updating", "Deleting", "Succeeded", "Canceled", "Failed", "IdleDueToMirroredPartnerTopicDeletion", "IdleDueToMirroredPartnerDestinationDeletion")]
        public string ProvisioningState { get => _channelInfoBody.ProvisioningState ?? null; set => _channelInfoBody.ProvisioningState = value; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>The readiness state of the corresponding partner topic.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The readiness state of the corresponding partner topic.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Category(global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The readiness state of the corresponding partner topic.",
        SerializedName = @"readinessState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.EventGrid.PSArgumentCompleterAttribute("NeverActivated", "Activated")]
        public string ReadinessState { get => _channelInfoBody.ReadinessState ?? null; set => _channelInfoBody.ReadinessState = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel">Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel">Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NewAzEventGridChannel_CreateViaIdentityPartnerNamespaceExpanded" /> cmdlet
        /// class.
        /// </summary>
        public NewAzEventGridChannel_CreateViaIdentityPartnerNamespaceExpanded()
        {

        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'ChannelsCreateOrUpdate' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (PartnerNamespaceInputObject?.Id != null)
                    {
                        this.PartnerNamespaceInputObject.Id += $"/channels/{(global::System.Uri.EscapeDataString(this.Name.ToString()))}";
                        await this.Client.ChannelsCreateOrUpdateViaIdentity(PartnerNamespaceInputObject.Id, _channelInfoBody, onOk, onCreated, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode.IncludeCreate);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == PartnerNamespaceInputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("PartnerNamespaceInputObject has null value for PartnerNamespaceInputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, PartnerNamespaceInputObject) );
                        }
                        if (null == PartnerNamespaceInputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("PartnerNamespaceInputObject has null value for PartnerNamespaceInputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, PartnerNamespaceInputObject) );
                        }
                        if (null == PartnerNamespaceInputObject.PartnerNamespaceName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("PartnerNamespaceInputObject has null value for PartnerNamespaceInputObject.PartnerNamespaceName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, PartnerNamespaceInputObject) );
                        }
                        await this.Client.ChannelsCreateOrUpdate(PartnerNamespaceInputObject.SubscriptionId ?? null, PartnerNamespaceInputObject.ResourceGroupName ?? null, PartnerNamespaceInputObject.PartnerNamespaceName ?? null, Name, _channelInfoBody, onOk, onCreated, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.SerializationMode.IncludeCreate);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Name=Name})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel">Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel
                var result = (await response);
                WriteObject(result, false);
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                // Unrecognized Response. Create an error record based on what we have.
                var ex = new Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Runtime.RestException(responseMessage);
                WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                {
                  ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                });
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel">Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.EventGrid.Models.IChannel
                var result = (await response);
                WriteObject(result, false);
            }
        }
    }
}