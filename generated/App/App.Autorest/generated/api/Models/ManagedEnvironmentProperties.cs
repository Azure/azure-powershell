// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.App.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Extensions;

    /// <summary>Managed environment resource specific properties</summary>
    public partial class ManagedEnvironmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentProperties,
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal
    {

        /// <summary>Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string AppLogConfigurationDestination { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).Destination; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).Destination = value ?? null; }

        /// <summary>Backing field for <see cref="AppLogsConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfiguration _appLogsConfiguration;

        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfiguration AppLogsConfiguration { get => (this._appLogsConfiguration = this._appLogsConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.AppLogsConfiguration()); set => this._appLogsConfiguration = value; }

        /// <summary>Backing field for <see cref="CustomDomainConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfiguration _customDomainConfiguration;

        /// <summary>Custom domain configuration for the environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfiguration CustomDomainConfiguration { get => (this._customDomainConfiguration = this._customDomainConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.CustomDomainConfiguration()); set => this._customDomainConfiguration = value; }

        /// <summary>Certificate password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public System.Security.SecureString CustomDomainConfigurationCertificatePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificatePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificatePassword = value ?? null; }

        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public byte[] CustomDomainConfigurationCertificateValue { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificateValue; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CertificateValue = value ?? null /* byte array */; }

        /// <summary>Id used to verify domain name ownership</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationCustomDomainVerificationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CustomDomainVerificationId; }

        /// <summary>Dns suffix for the environment domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationDnsSuffix { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).DnsSuffix; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).DnsSuffix = value ?? null; }

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public global::System.DateTime? CustomDomainConfigurationExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).ExpirationDate; }

        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationSubjectName { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).SubjectName; }

        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string CustomDomainConfigurationThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).Thumbprint; }

        /// <summary>Backing field for <see cref="DaprAiConnectionString" /> property.</summary>
        private string _daprAiConnectionString;

        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string DaprAiConnectionString { get => this._daprAiConnectionString; set => this._daprAiConnectionString = value; }

        /// <summary>Backing field for <see cref="DaprAiInstrumentationKey" /> property.</summary>
        private string _daprAiInstrumentationKey;

        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string DaprAiInstrumentationKey { get => this._daprAiInstrumentationKey; set => this._daprAiInstrumentationKey = value; }

        /// <summary>Backing field for <see cref="DaprConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfiguration _daprConfiguration;

        /// <summary>The configuration of Dapr component.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfiguration DaprConfiguration { get => (this._daprConfiguration = this._daprConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.DaprConfiguration()); set => this._daprConfiguration = value; }

        /// <summary>The version of Dapr</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string DaprConfigurationVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfigurationInternal)DaprConfiguration).Version; }

        /// <summary>Backing field for <see cref="DefaultDomain" /> property.</summary>
        private string _defaultDomain;

        /// <summary>Default Domain Name for the cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string DefaultDomain { get => this._defaultDomain; }

        /// <summary>Backing field for <see cref="DeploymentError" /> property.</summary>
        private string _deploymentError;

        /// <summary>Any errors that occurred during deployment or deployment validation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string DeploymentError { get => this._deploymentError; }

        /// <summary>Backing field for <see cref="EventStreamEndpoint" /> property.</summary>
        private string _eventStreamEndpoint;

        /// <summary>The endpoint of the eventstream of the Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string EventStreamEndpoint { get => this._eventStreamEndpoint; }

        /// <summary>Backing field for <see cref="InfrastructureResourceGroup" /> property.</summary>
        private string _infrastructureResourceGroup;

        /// <summary>
        /// Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a
        /// subnet ID is provided, this resource group will be created in the same subscription as the subnet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string InfrastructureResourceGroup { get => this._infrastructureResourceGroup; set => this._infrastructureResourceGroup = value; }

        /// <summary>Backing field for <see cref="KedaConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfiguration _kedaConfiguration;

        /// <summary>The configuration of Keda component.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfiguration KedaConfiguration { get => (this._kedaConfiguration = this._kedaConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.KedaConfiguration()); set => this._kedaConfiguration = value; }

        /// <summary>The version of Keda</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string KedaConfigurationVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfigurationInternal)KedaConfiguration).Version; }

        /// <summary>Log analytics customer id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string LogAnalyticConfigurationCustomerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationCustomerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationCustomerId = value ?? null; }

        /// <summary>Log analytics customer key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string LogAnalyticConfigurationSharedKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationSharedKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticConfigurationSharedKey = value ?? null; }

        /// <summary>Internal Acessors for AppLogConfigurationLogAnalyticsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.ILogAnalyticsConfiguration Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.AppLogConfigurationLogAnalyticsConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticsConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfigurationInternal)AppLogsConfiguration).LogAnalyticsConfiguration = value; }

        /// <summary>Internal Acessors for AppLogsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfiguration Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.AppLogsConfiguration { get => (this._appLogsConfiguration = this._appLogsConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.AppLogsConfiguration()); set { {_appLogsConfiguration = value;} } }

        /// <summary>Internal Acessors for CustomDomainConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfiguration Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.CustomDomainConfiguration { get => (this._customDomainConfiguration = this._customDomainConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.CustomDomainConfiguration()); set { {_customDomainConfiguration = value;} } }

        /// <summary>Internal Acessors for CustomDomainConfigurationCustomDomainVerificationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationCustomDomainVerificationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CustomDomainVerificationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).CustomDomainVerificationId = value; }

        /// <summary>Internal Acessors for CustomDomainConfigurationExpirationDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).ExpirationDate = value; }

        /// <summary>Internal Acessors for CustomDomainConfigurationSubjectName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationSubjectName { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).SubjectName; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).SubjectName = value; }

        /// <summary>Internal Acessors for CustomDomainConfigurationThumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.CustomDomainConfigurationThumbprint { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).Thumbprint; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfigurationInternal)CustomDomainConfiguration).Thumbprint = value; }

        /// <summary>Internal Acessors for DaprConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfiguration Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.DaprConfiguration { get => (this._daprConfiguration = this._daprConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.DaprConfiguration()); set { {_daprConfiguration = value;} } }

        /// <summary>Internal Acessors for DaprConfigurationVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.DaprConfigurationVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfigurationInternal)DaprConfiguration).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfigurationInternal)DaprConfiguration).Version = value; }

        /// <summary>Internal Acessors for DefaultDomain</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.DefaultDomain { get => this._defaultDomain; set { {_defaultDomain = value;} } }

        /// <summary>Internal Acessors for DeploymentError</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.DeploymentError { get => this._deploymentError; set { {_deploymentError = value;} } }

        /// <summary>Internal Acessors for EventStreamEndpoint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.EventStreamEndpoint { get => this._eventStreamEndpoint; set { {_eventStreamEndpoint = value;} } }

        /// <summary>Internal Acessors for KedaConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfiguration Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.KedaConfiguration { get => (this._kedaConfiguration = this._kedaConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.KedaConfiguration()); set { {_kedaConfiguration = value;} } }

        /// <summary>Internal Acessors for KedaConfigurationVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.KedaConfigurationVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfigurationInternal)KedaConfiguration).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfigurationInternal)KedaConfiguration).Version = value; }

        /// <summary>Internal Acessors for PeerAuthentication</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthentication Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.PeerAuthentication { get => (this._peerAuthentication = this._peerAuthentication ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.ManagedEnvironmentPropertiesPeerAuthentication()); set { {_peerAuthentication = value;} } }

        /// <summary>Internal Acessors for PeerAuthenticationMtl</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IMtls Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.PeerAuthenticationMtl { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthenticationInternal)PeerAuthentication).Mtl; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthenticationInternal)PeerAuthentication).Mtl = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for StaticIP</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.StaticIP { get => this._staticIP; set { {_staticIP = value;} } }

        /// <summary>Internal Acessors for VnetConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfiguration Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesInternal.VnetConfiguration { get => (this._vnetConfiguration = this._vnetConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.VnetConfiguration()); set { {_vnetConfiguration = value;} } }

        /// <summary>Boolean indicating whether the mutual TLS authentication is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public bool? MtlEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthenticationInternal)PeerAuthentication).MtlEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthenticationInternal)PeerAuthentication).MtlEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="PeerAuthentication" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthentication _peerAuthentication;

        /// <summary>Peer authentication settings for the Managed Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthentication PeerAuthentication { get => (this._peerAuthentication = this._peerAuthentication ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.ManagedEnvironmentPropertiesPeerAuthentication()); set => this._peerAuthentication = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="StaticIP" /> property.</summary>
        private string _staticIP;

        /// <summary>Static IP of the Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string StaticIP { get => this._staticIP; }

        /// <summary>Backing field for <see cref="VnetConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfiguration _vnetConfiguration;

        /// <summary>Vnet configuration for the environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfiguration VnetConfiguration { get => (this._vnetConfiguration = this._vnetConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.App.Models.VnetConfiguration()); set => this._vnetConfiguration = value; }

        /// <summary>
        /// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string VnetConfigurationDockerBridgeCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).DockerBridgeCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).DockerBridgeCidr = value ?? null; }

        /// <summary>
        /// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string VnetConfigurationInfrastructureSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).InfrastructureSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).InfrastructureSubnetId = value ?? null; }

        /// <summary>
        /// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static
        /// IP resource. They must provide infrastructureSubnetId if enabling this property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public bool? VnetConfigurationInternal { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).Internal; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).Internal = value ?? default(bool); }

        /// <summary>
        /// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any
        /// other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string VnetConfigurationPlatformReservedCidr { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedCidr; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedCidr = value ?? null; }

        /// <summary>
        /// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Inlined)]
        public string VnetConfigurationPlatformReservedDnsIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedDnsIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfigurationInternal)VnetConfiguration).PlatformReservedDnsIP = value ?? null; }

        /// <summary>Backing field for <see cref="WorkloadProfile" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IWorkloadProfile> _workloadProfile;

        /// <summary>Workload profiles configured for the Managed Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IWorkloadProfile> WorkloadProfile { get => this._workloadProfile; set => this._workloadProfile = value; }

        /// <summary>Backing field for <see cref="ZoneRedundant" /> property.</summary>
        private bool? _zoneRedundant;

        /// <summary>Whether or not this Managed Environment is zone-redundant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public bool? ZoneRedundant { get => this._zoneRedundant; set => this._zoneRedundant = value; }

        /// <summary>Creates an new <see cref="ManagedEnvironmentProperties" /> instance.</summary>
        public ManagedEnvironmentProperties()
        {

        }
    }
    /// Managed environment resource specific properties
    public partial interface IManagedEnvironmentProperties :
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IJsonSerializable
    {
        /// <summary>Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'",
        SerializedName = @"destination",
        PossibleTypes = new [] { typeof(string) })]
        string AppLogConfigurationDestination { get; set; }
        /// <summary>Certificate password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"Certificate password.",
        SerializedName = @"certificatePassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString CustomDomainConfigurationCertificatePassword { get; set; }
        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"PFX or PEM blob",
        SerializedName = @"certificateValue",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] CustomDomainConfigurationCertificateValue { get; set; }
        /// <summary>Id used to verify domain name ownership</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Id used to verify domain name ownership",
        SerializedName = @"customDomainVerificationId",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationCustomDomainVerificationId { get;  }
        /// <summary>Dns suffix for the environment domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Dns suffix for the environment domain",
        SerializedName = @"dnsSuffix",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationDnsSuffix { get; set; }
        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate expiration date.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CustomDomainConfigurationExpirationDate { get;  }
        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Subject name of the certificate.",
        SerializedName = @"subjectName",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationSubjectName { get;  }
        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate thumbprint.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainConfigurationThumbprint { get;  }
        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Application Insights connection string used by Dapr to export Service to Service communication telemetry",
        SerializedName = @"daprAIConnectionString",
        PossibleTypes = new [] { typeof(string) })]
        string DaprAiConnectionString { get; set; }
        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry",
        SerializedName = @"daprAIInstrumentationKey",
        PossibleTypes = new [] { typeof(string) })]
        string DaprAiInstrumentationKey { get; set; }
        /// <summary>The version of Dapr</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The version of Dapr",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string DaprConfigurationVersion { get;  }
        /// <summary>Default Domain Name for the cluster</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Default Domain Name for the cluster",
        SerializedName = @"defaultDomain",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultDomain { get;  }
        /// <summary>Any errors that occurred during deployment or deployment validation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Any errors that occurred during deployment or deployment validation",
        SerializedName = @"deploymentErrors",
        PossibleTypes = new [] { typeof(string) })]
        string DeploymentError { get;  }
        /// <summary>The endpoint of the eventstream of the Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The endpoint of the eventstream of the Environment.",
        SerializedName = @"eventStreamEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string EventStreamEndpoint { get;  }
        /// <summary>
        /// Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a
        /// subnet ID is provided, this resource group will be created in the same subscription as the subnet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a subnet ID is provided, this resource group will be created in the same subscription as the subnet.",
        SerializedName = @"infrastructureResourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureResourceGroup { get; set; }
        /// <summary>The version of Keda</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The version of Keda",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string KedaConfigurationVersion { get;  }
        /// <summary>Log analytics customer id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Log analytics customer id",
        SerializedName = @"customerId",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticConfigurationCustomerId { get; set; }
        /// <summary>Log analytics customer key</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = true,
        Description = @"Log analytics customer key",
        SerializedName = @"sharedKey",
        PossibleTypes = new [] { typeof(string) })]
        string LogAnalyticConfigurationSharedKey { get; set; }
        /// <summary>Boolean indicating whether the mutual TLS authentication is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Boolean indicating whether the mutual TLS authentication is enabled",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? MtlEnabled { get; set; }
        /// <summary>Provisioning state of the Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the Environment.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Waiting", "InitializationInProgress", "InfrastructureSetupInProgress", "InfrastructureSetupComplete", "ScheduledForDelete", "UpgradeRequested", "UpgradeFailed")]
        string ProvisioningState { get;  }
        /// <summary>Static IP of the Environment</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Static IP of the Environment",
        SerializedName = @"staticIp",
        PossibleTypes = new [] { typeof(string) })]
        string StaticIP { get;  }
        /// <summary>
        /// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.",
        SerializedName = @"dockerBridgeCidr",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationDockerBridgeCidr { get; set; }
        /// <summary>
        /// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.",
        SerializedName = @"infrastructureSubnetId",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationInfrastructureSubnetId { get; set; }
        /// <summary>
        /// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static
        /// IP resource. They must provide infrastructureSubnetId if enabling this property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Boolean indicating the environment only has an internal load balancer. These environments do not have a public static IP resource. They must provide infrastructureSubnetId if enabling this property",
        SerializedName = @"internal",
        PossibleTypes = new [] { typeof(bool) })]
        bool? VnetConfigurationInternal { get; set; }
        /// <summary>
        /// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any
        /// other provided IP ranges.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any other provided IP ranges.",
        SerializedName = @"platformReservedCidr",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationPlatformReservedCidr { get; set; }
        /// <summary>
        /// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @" An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.",
        SerializedName = @"platformReservedDnsIP",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigurationPlatformReservedDnsIP { get; set; }
        /// <summary>Workload profiles configured for the Managed Environment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Workload profiles configured for the Managed Environment.",
        SerializedName = @"workloadProfiles",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.App.Models.IWorkloadProfile) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IWorkloadProfile> WorkloadProfile { get; set; }
        /// <summary>Whether or not this Managed Environment is zone-redundant.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Whether or not this Managed Environment is zone-redundant.",
        SerializedName = @"zoneRedundant",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ZoneRedundant { get; set; }

    }
    /// Managed environment resource specific properties
    internal partial interface IManagedEnvironmentPropertiesInternal

    {
        /// <summary>Logs destination, can be 'log-analytics', 'azure-monitor' or 'none'</summary>
        string AppLogConfigurationDestination { get; set; }
        /// <summary>
        /// Log Analytics configuration, must only be provided when destination is configured as 'log-analytics'
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.ILogAnalyticsConfiguration AppLogConfigurationLogAnalyticsConfiguration { get; set; }
        /// <summary>
        /// Cluster configuration which enables the log daemon to export
        /// app logs to a destination. Currently only "log-analytics" is
        /// supported
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IAppLogsConfiguration AppLogsConfiguration { get; set; }
        /// <summary>Custom domain configuration for the environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICustomDomainConfiguration CustomDomainConfiguration { get; set; }
        /// <summary>Certificate password.</summary>
        System.Security.SecureString CustomDomainConfigurationCertificatePassword { get; set; }
        /// <summary>PFX or PEM blob</summary>
        byte[] CustomDomainConfigurationCertificateValue { get; set; }
        /// <summary>Id used to verify domain name ownership</summary>
        string CustomDomainConfigurationCustomDomainVerificationId { get; set; }
        /// <summary>Dns suffix for the environment domain</summary>
        string CustomDomainConfigurationDnsSuffix { get; set; }
        /// <summary>Certificate expiration date.</summary>
        global::System.DateTime? CustomDomainConfigurationExpirationDate { get; set; }
        /// <summary>Subject name of the certificate.</summary>
        string CustomDomainConfigurationSubjectName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        string CustomDomainConfigurationThumbprint { get; set; }
        /// <summary>
        /// Application Insights connection string used by Dapr to export Service to Service communication telemetry
        /// </summary>
        string DaprAiConnectionString { get; set; }
        /// <summary>
        /// Azure Monitor instrumentation key used by Dapr to export Service to Service communication telemetry
        /// </summary>
        string DaprAiInstrumentationKey { get; set; }
        /// <summary>The configuration of Dapr component.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IDaprConfiguration DaprConfiguration { get; set; }
        /// <summary>The version of Dapr</summary>
        string DaprConfigurationVersion { get; set; }
        /// <summary>Default Domain Name for the cluster</summary>
        string DefaultDomain { get; set; }
        /// <summary>Any errors that occurred during deployment or deployment validation</summary>
        string DeploymentError { get; set; }
        /// <summary>The endpoint of the eventstream of the Environment.</summary>
        string EventStreamEndpoint { get; set; }
        /// <summary>
        /// Name of the platform-managed resource group created for the Managed Environment to host infrastructure resources. If a
        /// subnet ID is provided, this resource group will be created in the same subscription as the subnet.
        /// </summary>
        string InfrastructureResourceGroup { get; set; }
        /// <summary>The configuration of Keda component.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IKedaConfiguration KedaConfiguration { get; set; }
        /// <summary>The version of Keda</summary>
        string KedaConfigurationVersion { get; set; }
        /// <summary>Log analytics customer id</summary>
        string LogAnalyticConfigurationCustomerId { get; set; }
        /// <summary>Log analytics customer key</summary>
        string LogAnalyticConfigurationSharedKey { get; set; }
        /// <summary>Boolean indicating whether the mutual TLS authentication is enabled</summary>
        bool? MtlEnabled { get; set; }
        /// <summary>Peer authentication settings for the Managed Environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IManagedEnvironmentPropertiesPeerAuthentication PeerAuthentication { get; set; }
        /// <summary>Mutual TLS authentication settings for the Managed Environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IMtls PeerAuthenticationMtl { get; set; }
        /// <summary>Provisioning state of the Environment.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Waiting", "InitializationInProgress", "InfrastructureSetupInProgress", "InfrastructureSetupComplete", "ScheduledForDelete", "UpgradeRequested", "UpgradeFailed")]
        string ProvisioningState { get; set; }
        /// <summary>Static IP of the Environment</summary>
        string StaticIP { get; set; }
        /// <summary>Vnet configuration for the environment</summary>
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.IVnetConfiguration VnetConfiguration { get; set; }
        /// <summary>
        /// CIDR notation IP range assigned to the Docker bridge, network. Must not overlap with any other provided IP ranges.
        /// </summary>
        string VnetConfigurationDockerBridgeCidr { get; set; }
        /// <summary>
        /// Resource ID of a subnet for infrastructure components. Must not overlap with any other provided IP ranges.
        /// </summary>
        string VnetConfigurationInfrastructureSubnetId { get; set; }
        /// <summary>
        /// Boolean indicating the environment only has an internal load balancer. These environments do not have a public static
        /// IP resource. They must provide infrastructureSubnetId if enabling this property
        /// </summary>
        bool? VnetConfigurationInternal { get; set; }
        /// <summary>
        /// IP range in CIDR notation that can be reserved for environment infrastructure IP addresses. Must not overlap with any
        /// other provided IP ranges.
        /// </summary>
        string VnetConfigurationPlatformReservedCidr { get; set; }
        /// <summary>
        /// An IP address from the IP range defined by platformReservedCidr that will be reserved for the internal DNS server.
        /// </summary>
        string VnetConfigurationPlatformReservedDnsIP { get; set; }
        /// <summary>Workload profiles configured for the Managed Environment.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.App.Models.IWorkloadProfile> WorkloadProfile { get; set; }
        /// <summary>Whether or not this Managed Environment is zone-redundant.</summary>
        bool? ZoneRedundant { get; set; }

    }
}