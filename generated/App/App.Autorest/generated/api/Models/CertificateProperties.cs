// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.App.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Extensions;

    /// <summary>Certificate resource specific properties</summary>
    public partial class CertificateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="ExpirationDate" /> property.</summary>
        private global::System.DateTime? _expirationDate;

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public global::System.DateTime? ExpirationDate { get => this._expirationDate; }

        /// <summary>Backing field for <see cref="IssueDate" /> property.</summary>
        private global::System.DateTime? _issueDate;

        /// <summary>Certificate issue Date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public global::System.DateTime? IssueDate { get => this._issueDate; }

        /// <summary>Backing field for <see cref="Issuer" /> property.</summary>
        private string _issuer;

        /// <summary>Certificate issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string Issuer { get => this._issuer; }

        /// <summary>Internal Acessors for ExpirationDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.ExpirationDate { get => this._expirationDate; set { {_expirationDate = value;} } }

        /// <summary>Internal Acessors for IssueDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.IssueDate { get => this._issueDate; set { {_issueDate = value;} } }

        /// <summary>Internal Acessors for Issuer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.Issuer { get => this._issuer; set { {_issuer = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for PublicKeyHash</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.PublicKeyHash { get => this._publicKeyHash; set { {_publicKeyHash = value;} } }

        /// <summary>Internal Acessors for SubjectAlternativeName</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.SubjectAlternativeName { get => this._subjectAlternativeName; set { {_subjectAlternativeName = value;} } }

        /// <summary>Internal Acessors for SubjectName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.SubjectName { get => this._subjectName; set { {_subjectName = value;} } }

        /// <summary>Internal Acessors for Thumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.Thumbprint { get => this._thumbprint; set { {_thumbprint = value;} } }

        /// <summary>Internal Acessors for Valid</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.App.Models.ICertificatePropertiesInternal.Valid { get => this._valid; set { {_valid = value;} } }

        /// <summary>Backing field for <see cref="Password" /> property.</summary>
        private System.Security.SecureString _password;

        /// <summary>Certificate password</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public System.Security.SecureString Password { get => this._password; set => this._password = value; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicKeyHash" /> property.</summary>
        private string _publicKeyHash;

        /// <summary>Public key hash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string PublicKeyHash { get => this._publicKeyHash; }

        /// <summary>Backing field for <see cref="SubjectAlternativeName" /> property.</summary>
        private System.Collections.Generic.List<string> _subjectAlternativeName;

        /// <summary>Subject alternative names the certificate applies to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> SubjectAlternativeName { get => this._subjectAlternativeName; }

        /// <summary>Backing field for <see cref="SubjectName" /> property.</summary>
        private string _subjectName;

        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string SubjectName { get => this._subjectName; }

        /// <summary>Backing field for <see cref="Thumbprint" /> property.</summary>
        private string _thumbprint;

        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public string Thumbprint { get => this._thumbprint; }

        /// <summary>Backing field for <see cref="Valid" /> property.</summary>
        private bool? _valid;

        /// <summary>Is the certificate valid?.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public bool? Valid { get => this._valid; }

        /// <summary>Backing field for <see cref="Value" /> property.</summary>
        private byte[] _value;

        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Origin(Microsoft.Azure.PowerShell.Cmdlets.App.PropertyOrigin.Owned)]
        public byte[] Value { get => this._value; set => this._value = value; }

        /// <summary>Creates an new <see cref="CertificateProperties" /> instance.</summary>
        public CertificateProperties()
        {

        }
    }
    /// Certificate resource specific properties
    public partial interface ICertificateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.IJsonSerializable
    {
        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate expiration date.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ExpirationDate { get;  }
        /// <summary>Certificate issue Date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate issue Date.",
        SerializedName = @"issueDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? IssueDate { get;  }
        /// <summary>Certificate issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate issuer.",
        SerializedName = @"issuer",
        PossibleTypes = new [] { typeof(string) })]
        string Issuer { get;  }
        /// <summary>Certificate password</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Certificate password",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString Password { get; set; }
        /// <summary>Provisioning state of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the certificate.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "DeleteFailed", "Pending")]
        string ProvisioningState { get;  }
        /// <summary>Public key hash.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Public key hash.",
        SerializedName = @"publicKeyHash",
        PossibleTypes = new [] { typeof(string) })]
        string PublicKeyHash { get;  }
        /// <summary>Subject alternative names the certificate applies to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Subject alternative names the certificate applies to.",
        SerializedName = @"subjectAlternativeNames",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SubjectAlternativeName { get;  }
        /// <summary>Subject name of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Subject name of the certificate.",
        SerializedName = @"subjectName",
        PossibleTypes = new [] { typeof(string) })]
        string SubjectName { get;  }
        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate thumbprint.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get;  }
        /// <summary>Is the certificate valid?.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Is the certificate valid?.",
        SerializedName = @"valid",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Valid { get;  }
        /// <summary>PFX or PEM blob</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.App.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"PFX or PEM blob",
        SerializedName = @"value",
        PossibleTypes = new [] { typeof(byte[]) })]
        byte[] Value { get; set; }

    }
    /// Certificate resource specific properties
    internal partial interface ICertificatePropertiesInternal

    {
        /// <summary>Certificate expiration date.</summary>
        global::System.DateTime? ExpirationDate { get; set; }
        /// <summary>Certificate issue Date.</summary>
        global::System.DateTime? IssueDate { get; set; }
        /// <summary>Certificate issuer.</summary>
        string Issuer { get; set; }
        /// <summary>Certificate password</summary>
        System.Security.SecureString Password { get; set; }
        /// <summary>Provisioning state of the certificate.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.App.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "DeleteFailed", "Pending")]
        string ProvisioningState { get; set; }
        /// <summary>Public key hash.</summary>
        string PublicKeyHash { get; set; }
        /// <summary>Subject alternative names the certificate applies to.</summary>
        System.Collections.Generic.List<string> SubjectAlternativeName { get; set; }
        /// <summary>Subject name of the certificate.</summary>
        string SubjectName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        string Thumbprint { get; set; }
        /// <summary>Is the certificate valid?.</summary>
        bool? Valid { get; set; }
        /// <summary>PFX or PEM blob</summary>
        byte[] Value { get; set; }

    }
}