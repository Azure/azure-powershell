// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Extensions;

    /// <summary>The properties of the Linker.</summary>
    public partial class LinkerProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AuthInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IAuthInfoBase _authInfo;

        /// <summary>The authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IAuthInfoBase AuthInfo { get => (this._authInfo = this._authInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.AuthInfoBase()); set => this._authInfo = value; }

        /// <summary>Backing field for <see cref="ClientType" /> property.</summary>
        private string _clientType;

        /// <summary>The application client type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public string ClientType { get => this._clientType; set => this._clientType = value; }

        /// <summary>Backing field for <see cref="ConfigurationInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfo _configurationInfo;

        /// <summary>
        /// The connection information consumed by applications, including secrets, connection strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfo ConfigurationInfo { get => (this._configurationInfo = this._configurationInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ConfigurationInfo()); set => this._configurationInfo = value; }

        /// <summary>
        /// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied
        /// to the source application. Default is enable. If optOut, no configuration change will be made on source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string ConfigurationInfoAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).Action; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).Action = value ?? null; }

        /// <summary>
        /// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this
        /// property is to full fill more customized configurations
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoAdditionalConfigurations ConfigurationInfoAdditionalConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).AdditionalConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).AdditionalConfiguration = value ?? null /* model class */; }

        /// <summary>
        /// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be
        /// used for generate configurations
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoCustomizedKeys ConfigurationInfoCustomizedKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).CustomizedKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).CustomizedKey = value ?? null /* model class */; }

        /// <summary>
        /// Indicates whether to clean up previous operation when Linker is updating or deleting
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string ConfigurationInfoDeleteOrUpdateBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).DeleteOrUpdateBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoInternal)ConfigurationInfo).DeleteOrUpdateBehavior = value ?? null; }

        /// <summary>Allow Azure services to access the target service if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string FirewallRuleAzureService { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRuleAzureService; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRuleAzureService = value ?? null; }

        /// <summary>
        /// Allow caller client IP to access the target service if true. the property is used when connecting local application to
        /// target service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string FirewallRuleCallerClientIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRuleCallerClientIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRuleCallerClientIP = value ?? null; }

        /// <summary>
        /// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client
        /// IPs for a given database account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> FirewallRuleIPRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRuleIPRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRuleIPRange = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for ConfigurationInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfo Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal.ConfigurationInfo { get => (this._configurationInfo = this._configurationInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ConfigurationInfo()); set { {_configurationInfo = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for PublicNetworkSolution</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolution Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal.PublicNetworkSolution { get => (this._publicNetworkSolution = this._publicNetworkSolution ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.PublicNetworkSolution()); set { {_publicNetworkSolution = value;} } }

        /// <summary>Internal Acessors for PublicNetworkSolutionFirewallRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IFirewallRules Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal.PublicNetworkSolutionFirewallRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).FirewallRule = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SecretStore</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStore Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal.SecretStore { get => (this._secretStore = this._secretStore ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.SecretStore()); set { {_secretStore = value;} } }

        /// <summary>Internal Acessors for VNetSolution</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolution Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ILinkerPropertiesInternal.VNetSolution { get => (this._vNetSolution = this._vNetSolution ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.VNetSolution()); set { {_vNetSolution = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>The provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="PublicNetworkSolution" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolution _publicNetworkSolution;

        /// <summary>The network solution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolution PublicNetworkSolution { get => (this._publicNetworkSolution = this._publicNetworkSolution ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.PublicNetworkSolution()); set => this._publicNetworkSolution = value; }

        /// <summary>
        /// Optional. Indicates public network solution. If enable, enable public network access of target service with best try.
        /// Default is enable. If optOut, opt out public network access configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string PublicNetworkSolutionAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).Action; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).Action = value ?? null; }

        /// <summary>
        /// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string PublicNetworkSolutionDeleteOrUpdateBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).DeleteOrUpdateBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolutionInternal)PublicNetworkSolution).DeleteOrUpdateBehavior = value ?? null; }

        /// <summary>Backing field for <see cref="Scope" /> property.</summary>
        private string _scope;

        /// <summary>connection scope in source service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public string Scope { get => this._scope; set => this._scope = value; }

        /// <summary>Backing field for <see cref="SecretStore" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStore _secretStore;

        /// <summary>An option to store secret value in secure place</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStore SecretStore { get => (this._secretStore = this._secretStore ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.SecretStore()); set => this._secretStore = value; }

        /// <summary>The key vault id to store secret</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string SecretStoreKeyVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStoreInternal)SecretStore).KeyVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStoreInternal)SecretStore).KeyVaultId = value ?? null; }

        /// <summary>The key vault secret name to store secret, only valid when storing one secret</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string SecretStoreKeyVaultSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStoreInternal)SecretStore).KeyVaultSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStoreInternal)SecretStore).KeyVaultSecretName = value ?? null; }

        /// <summary>Backing field for <see cref="TargetService" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ITargetServiceBase _targetService;

        /// <summary>The target service properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ITargetServiceBase TargetService { get => (this._targetService = this._targetService ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.TargetServiceBase()); set => this._targetService = value; }

        /// <summary>Backing field for <see cref="VNetSolution" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolution _vNetSolution;

        /// <summary>The VNet solution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolution VNetSolution { get => (this._vNetSolution = this._vNetSolution ?? new Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.VNetSolution()); set => this._vNetSolution = value; }

        /// <summary>
        /// Indicates whether to clean up previous operation when Linker is updating or deleting
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string VNetSolutionDeleteOrUpdateBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolutionInternal)VNetSolution).DeleteOrUpdateBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolutionInternal)VNetSolution).DeleteOrUpdateBehavior = value ?? null; }

        /// <summary>Type of VNet solution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Origin(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PropertyOrigin.Inlined)]
        public string VNetSolutionType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolutionInternal)VNetSolution).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolutionInternal)VNetSolution).Type = value ?? null; }

        /// <summary>Creates an new <see cref="LinkerProperties" /> instance.</summary>
        public LinkerProperties()
        {

        }
    }
    /// The properties of the Linker.
    public partial interface ILinkerProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.IJsonSerializable
    {
        /// <summary>The authentication type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The authentication type.",
        SerializedName = @"authInfo",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IAuthInfoBase) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IAuthInfoBase AuthInfo { get; set; }
        /// <summary>The application client type</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The application client type",
        SerializedName = @"clientType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("none", "dotnet", "java", "python", "go", "php", "ruby", "django", "nodejs", "springBoot", "kafka-springBoot")]
        string ClientType { get; set; }
        /// <summary>
        /// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied
        /// to the source application. Default is enable. If optOut, no configuration change will be made on source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied to the source application. Default is enable. If optOut, no configuration change will be made on source.",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Internal", "enable", "optOut")]
        string ConfigurationInfoAction { get; set; }
        /// <summary>
        /// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this
        /// property is to full fill more customized configurations
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this property is to full fill more customized configurations",
        SerializedName = @"additionalConfigurations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoAdditionalConfigurations) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoAdditionalConfigurations ConfigurationInfoAdditionalConfiguration { get; set; }
        /// <summary>
        /// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be
        /// used for generate configurations
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be used for generate configurations",
        SerializedName = @"customizedKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoCustomizedKeys) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoCustomizedKeys ConfigurationInfoCustomizedKey { get; set; }
        /// <summary>
        /// Indicates whether to clean up previous operation when Linker is updating or deleting
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether to clean up previous operation when Linker is updating or deleting",
        SerializedName = @"deleteOrUpdateBehavior",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Default", "ForcedCleanup")]
        string ConfigurationInfoDeleteOrUpdateBehavior { get; set; }
        /// <summary>Allow Azure services to access the target service if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow Azure services to access the target service if true.",
        SerializedName = @"azureServices",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("true", "false")]
        string FirewallRuleAzureService { get; set; }
        /// <summary>
        /// Allow caller client IP to access the target service if true. the property is used when connecting local application to
        /// target service.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow caller client IP to access the target service if true. the property is used when connecting local application to target service.",
        SerializedName = @"callerClientIP",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("true", "false")]
        string FirewallRuleCallerClientIP { get; set; }
        /// <summary>
        /// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client
        /// IPs for a given database account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client IPs for a given database account.",
        SerializedName = @"ipRanges",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> FirewallRuleIPRange { get; set; }
        /// <summary>The provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The provisioning state. ",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>
        /// Optional. Indicates public network solution. If enable, enable public network access of target service with best try.
        /// Default is enable. If optOut, opt out public network access configuration.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional. Indicates public network solution. If enable, enable public network access of target service with best try. Default is enable. If optOut, opt out public network access configuration.",
        SerializedName = @"action",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Internal", "enable", "optOut")]
        string PublicNetworkSolutionAction { get; set; }
        /// <summary>
        /// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting",
        SerializedName = @"deleteOrUpdateBehavior",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Default", "ForcedCleanup")]
        string PublicNetworkSolutionDeleteOrUpdateBehavior { get; set; }
        /// <summary>connection scope in source service.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"connection scope in source service.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        string Scope { get; set; }
        /// <summary>The key vault id to store secret</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The key vault id to store secret",
        SerializedName = @"keyVaultId",
        PossibleTypes = new [] { typeof(string) })]
        string SecretStoreKeyVaultId { get; set; }
        /// <summary>The key vault secret name to store secret, only valid when storing one secret</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The key vault secret name to store secret, only valid when storing one secret",
        SerializedName = @"keyVaultSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string SecretStoreKeyVaultSecretName { get; set; }
        /// <summary>The target service properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The target service properties",
        SerializedName = @"targetService",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ITargetServiceBase) })]
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ITargetServiceBase TargetService { get; set; }
        /// <summary>
        /// Indicates whether to clean up previous operation when Linker is updating or deleting
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether to clean up previous operation when Linker is updating or deleting",
        SerializedName = @"deleteOrUpdateBehavior",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Default", "ForcedCleanup")]
        string VNetSolutionDeleteOrUpdateBehavior { get; set; }
        /// <summary>Type of VNet solution.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of VNet solution.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("serviceEndpoint", "privateLink")]
        string VNetSolutionType { get; set; }

    }
    /// The properties of the Linker.
    internal partial interface ILinkerPropertiesInternal

    {
        /// <summary>The authentication type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IAuthInfoBase AuthInfo { get; set; }
        /// <summary>The application client type</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("none", "dotnet", "java", "python", "go", "php", "ruby", "django", "nodejs", "springBoot", "kafka-springBoot")]
        string ClientType { get; set; }
        /// <summary>
        /// The connection information consumed by applications, including secrets, connection strings.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfo ConfigurationInfo { get; set; }
        /// <summary>
        /// Optional, indicate whether to apply configurations on source application. If enable, generate configurations and applied
        /// to the source application. Default is enable. If optOut, no configuration change will be made on source.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Internal", "enable", "optOut")]
        string ConfigurationInfoAction { get; set; }
        /// <summary>
        /// A dictionary of additional configurations to be added. Service will auto generate a set of basic configurations and this
        /// property is to full fill more customized configurations
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoAdditionalConfigurations ConfigurationInfoAdditionalConfiguration { get; set; }
        /// <summary>
        /// Optional. A dictionary of default key name and customized key name mapping. If not specified, default key name will be
        /// used for generate configurations
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IConfigurationInfoCustomizedKeys ConfigurationInfoCustomizedKey { get; set; }
        /// <summary>
        /// Indicates whether to clean up previous operation when Linker is updating or deleting
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Default", "ForcedCleanup")]
        string ConfigurationInfoDeleteOrUpdateBehavior { get; set; }
        /// <summary>Allow Azure services to access the target service if true.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("true", "false")]
        string FirewallRuleAzureService { get; set; }
        /// <summary>
        /// Allow caller client IP to access the target service if true. the property is used when connecting local application to
        /// target service.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("true", "false")]
        string FirewallRuleCallerClientIP { get; set; }
        /// <summary>
        /// This value specifies the set of IP addresses or IP address ranges in CIDR form to be included as the allowed list of client
        /// IPs for a given database account.
        /// </summary>
        System.Collections.Generic.List<string> FirewallRuleIPRange { get; set; }
        /// <summary>The provisioning state.</summary>
        string ProvisioningState { get; set; }
        /// <summary>The network solution.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IPublicNetworkSolution PublicNetworkSolution { get; set; }
        /// <summary>
        /// Optional. Indicates public network solution. If enable, enable public network access of target service with best try.
        /// Default is enable. If optOut, opt out public network access configuration.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Internal", "enable", "optOut")]
        string PublicNetworkSolutionAction { get; set; }
        /// <summary>
        /// Indicates whether to clean up previous operation(such as firewall rules) when Linker is updating or deleting
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Default", "ForcedCleanup")]
        string PublicNetworkSolutionDeleteOrUpdateBehavior { get; set; }
        /// <summary>
        /// Describe firewall rules of target service to make sure source application could connect to the target.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IFirewallRules PublicNetworkSolutionFirewallRule { get; set; }
        /// <summary>connection scope in source service.</summary>
        string Scope { get; set; }
        /// <summary>An option to store secret value in secure place</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ISecretStore SecretStore { get; set; }
        /// <summary>The key vault id to store secret</summary>
        string SecretStoreKeyVaultId { get; set; }
        /// <summary>The key vault secret name to store secret, only valid when storing one secret</summary>
        string SecretStoreKeyVaultSecretName { get; set; }
        /// <summary>The target service properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.ITargetServiceBase TargetService { get; set; }
        /// <summary>The VNet solution.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.Models.IVNetSolution VNetSolution { get; set; }
        /// <summary>
        /// Indicates whether to clean up previous operation when Linker is updating or deleting
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("Default", "ForcedCleanup")]
        string VNetSolutionDeleteOrUpdateBehavior { get; set; }
        /// <summary>Type of VNet solution.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ServiceLinker.PSArgumentCompleterAttribute("serviceEndpoint", "privateLink")]
        string VNetSolutionType { get; set; }

    }
}