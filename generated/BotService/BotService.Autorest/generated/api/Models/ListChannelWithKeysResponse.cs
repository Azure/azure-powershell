// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.BotService.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Extensions;

    /// <summary>The ARM channel of list channel with keys operation response.</summary>
    public partial class ListChannelWithKeysResponse :
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponse,
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponseInternal,
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannel" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannel __botChannel = new Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.BotChannel();

        /// <summary>Backing field for <see cref="ChangedTime" /> property.</summary>
        private string _changedTime;

        /// <summary>Changed time of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Owned)]
        public string ChangedTime { get => this._changedTime; set => this._changedTime = value; }

        /// <summary>The channel name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string ChannelName { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).ChannelName; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).ChannelName = value ?? null; }

        /// <summary>Backing field for <see cref="EntityTag" /> property.</summary>
        private string _entityTag;

        /// <summary>Entity tag of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Owned)]
        public string EntityTag { get => this._entityTag; set => this._entityTag = value; }

        /// <summary>Entity Tag</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string Etag { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Etag = value ?? null; }

        /// <summary>Specifies the resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Id; }

        /// <summary>Required. Gets or sets the Kind of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string Kind { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Kind = value ?? null; }

        /// <summary>Specifies the location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Location = value ?? null; }

        /// <summary>Internal Acessors for PropertiesProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal.PropertiesProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesProvisioningState = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannel Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal.Property { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).Property; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).Property = value; }

        /// <summary>Internal Acessors for Resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannel Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponseInternal.Resource { get => (this._resource = this._resource ?? new Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.Channel()); set { {_resource = value;} } }

        /// <summary>Internal Acessors for ResourceProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponseInternal.ResourceProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).ProvisioningState = value; }

        /// <summary>Internal Acessors for Setting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettings Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponseInternal.Setting { get => (this._setting = this._setting ?? new Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ChannelSettings()); set { {_setting = value;} } }

        /// <summary>Internal Acessors for SettingExtensionKey1</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponseInternal.SettingExtensionKey1 { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ExtensionKey1; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ExtensionKey1 = value; }

        /// <summary>Internal Acessors for SettingExtensionKey2</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IListChannelWithKeysResponseInternal.SettingExtensionKey2 { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ExtensionKey2; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ExtensionKey2 = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Name = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ISku Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal.Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Sku = value; }

        /// <summary>Internal Acessors for SkuTier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal.SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).SkuTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).SkuTier = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Type = value; }

        /// <summary>Internal Acessors for Zone</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal.Zone { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Zone; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Zone = value; }

        /// <summary>Specifies the name of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Name; }

        /// <summary>Entity Tag of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string PropertiesEtag { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesEtag; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesEtag = value ?? null; }

        /// <summary>Specifies the location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string PropertiesLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesLocation = value ?? null; }

        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string PropertiesProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).PropertiesProvisioningState; }

        /// <summary>The set of properties specific to bot channel resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannel Property { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).Property; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal)__botChannel).Property = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; set => this._provisioningState = value; }

        /// <summary>Backing field for <see cref="Resource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannel _resource;

        /// <summary>The set of properties specific to bot channel resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannel Resource { get => (this._resource = this._resource ?? new Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.Channel()); set => this._resource = value; }

        /// <summary>The channel name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string ResourceChannelName { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).Name = value ?? null; }

        /// <summary>Entity Tag of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string ResourceEtag { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).Etag = value ?? null; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Specifies the location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string ResourceLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).Location = value ?? null; }

        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string ResourceProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelInternal)Resource).ProvisioningState; }

        /// <summary>Backing field for <see cref="Setting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettings _setting;

        /// <summary>Channel settings</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettings Setting { get => (this._setting = this._setting ?? new Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ChannelSettings()); set => this._setting = value; }

        /// <summary>The bot icon url</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string SettingBotIconUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).BotIconUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).BotIconUrl = value ?? null; }

        /// <summary>The bot id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string SettingBotId { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).BotId; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).BotId = value ?? null; }

        /// <summary>The channel display name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string SettingChannelDisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ChannelDisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ChannelDisplayName = value ?? null; }

        /// <summary>The channel id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string SettingChannelId { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ChannelId; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ChannelId = value ?? null; }

        /// <summary>
        /// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public bool? SettingDisableLocalAuth { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).DisableLocalAuth; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).DisableLocalAuth = value ?? default(bool); }

        /// <summary>The extensionKey1</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string SettingExtensionKey1 { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ExtensionKey1; }

        /// <summary>The extensionKey2</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public string SettingExtensionKey2 { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).ExtensionKey2; }

        /// <summary>Whether this channel is enabled for the bot</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public bool? SettingIsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).IsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).IsEnabled = value ?? default(bool); }

        /// <summary>The list of sites</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ISite> SettingSite { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).Site; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettingsInternal)Setting).Site = value ?? null /* arrayOf */; }

        /// <summary>Gets or sets the SKU of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ISku Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Sku = value ?? null /* model class */; }

        /// <summary>The sku name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).SkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).SkuName = value ?? null; }

        /// <summary>Gets the sku tier. This is based on the SKU name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).SkuTier; }

        /// <summary>Contains resource tags defined as key/value pairs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Tag = value ?? null /* model class */; }

        /// <summary>Specifies the type of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Type; }

        /// <summary>Entity zones</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Origin(Microsoft.Azure.PowerShell.Cmdlets.BotService.PropertyOrigin.Inherited)]
        public System.Collections.Generic.List<string> Zone { get => ((Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IResourceInternal)__botChannel).Zone; }

        /// <summary>Creates an new <see cref="ListChannelWithKeysResponse" /> instance.</summary>
        public ListChannelWithKeysResponse()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__botChannel), __botChannel);
            await eventListener.AssertObjectIsValid(nameof(__botChannel), __botChannel);
        }
    }
    /// The ARM channel of list channel with keys operation response.
    public partial interface IListChannelWithKeysResponse :
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannel
    {
        /// <summary>Changed time of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Changed time of the resource",
        SerializedName = @"changedTime",
        PossibleTypes = new [] { typeof(string) })]
        string ChangedTime { get; set; }
        /// <summary>Entity tag of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Entity tag of the resource",
        SerializedName = @"entityTag",
        PossibleTypes = new [] { typeof(string) })]
        string EntityTag { get; set; }
        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Provisioning state of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get; set; }
        /// <summary>The channel name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The channel name",
        SerializedName = @"channelName",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceChannelName { get; set; }
        /// <summary>Entity Tag of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Entity Tag of the resource",
        SerializedName = @"etag",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceEtag { get; set; }
        /// <summary>Specifies the location of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the location of the resource.",
        SerializedName = @"location",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceLocation { get; set; }
        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ResourceProvisioningState { get;  }
        /// <summary>The bot icon url</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The bot icon url",
        SerializedName = @"botIconUrl",
        PossibleTypes = new [] { typeof(string) })]
        string SettingBotIconUrl { get; set; }
        /// <summary>The bot id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The bot id",
        SerializedName = @"botId",
        PossibleTypes = new [] { typeof(string) })]
        string SettingBotId { get; set; }
        /// <summary>The channel display name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The channel display name",
        SerializedName = @"channelDisplayName",
        PossibleTypes = new [] { typeof(string) })]
        string SettingChannelDisplayName { get; set; }
        /// <summary>The channel id</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The channel id",
        SerializedName = @"channelId",
        PossibleTypes = new [] { typeof(string) })]
        string SettingChannelId { get; set; }
        /// <summary>
        /// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.",
        SerializedName = @"disableLocalAuth",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingDisableLocalAuth { get; set; }
        /// <summary>The extensionKey1</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The extensionKey1",
        SerializedName = @"extensionKey1",
        PossibleTypes = new [] { typeof(string) })]
        string SettingExtensionKey1 { get;  }
        /// <summary>The extensionKey2</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The extensionKey2",
        SerializedName = @"extensionKey2",
        PossibleTypes = new [] { typeof(string) })]
        string SettingExtensionKey2 { get;  }
        /// <summary>Whether this channel is enabled for the bot</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether this channel is enabled for the bot",
        SerializedName = @"isEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SettingIsEnabled { get; set; }
        /// <summary>The list of sites</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.BotService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of sites",
        SerializedName = @"sites",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ISite) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ISite> SettingSite { get; set; }

    }
    /// The ARM channel of list channel with keys operation response.
    internal partial interface IListChannelWithKeysResponseInternal :
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IBotChannelInternal
    {
        /// <summary>Changed time of the resource</summary>
        string ChangedTime { get; set; }
        /// <summary>Entity tag of the resource</summary>
        string EntityTag { get; set; }
        /// <summary>Provisioning state of the resource</summary>
        string ProvisioningState { get; set; }
        /// <summary>The set of properties specific to bot channel resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannel Resource { get; set; }
        /// <summary>The channel name</summary>
        string ResourceChannelName { get; set; }
        /// <summary>Entity Tag of the resource</summary>
        string ResourceEtag { get; set; }
        /// <summary>Specifies the location of the resource.</summary>
        string ResourceLocation { get; set; }
        /// <summary>Provisioning state of the resource</summary>
        string ResourceProvisioningState { get; set; }
        /// <summary>Channel settings</summary>
        Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.IChannelSettings Setting { get; set; }
        /// <summary>The bot icon url</summary>
        string SettingBotIconUrl { get; set; }
        /// <summary>The bot id</summary>
        string SettingBotId { get; set; }
        /// <summary>The channel display name</summary>
        string SettingChannelDisplayName { get; set; }
        /// <summary>The channel id</summary>
        string SettingChannelId { get; set; }
        /// <summary>
        /// Opt-out of local authentication and ensure only MSI and AAD can be used exclusively for authentication.
        /// </summary>
        bool? SettingDisableLocalAuth { get; set; }
        /// <summary>The extensionKey1</summary>
        string SettingExtensionKey1 { get; set; }
        /// <summary>The extensionKey2</summary>
        string SettingExtensionKey2 { get; set; }
        /// <summary>Whether this channel is enabled for the bot</summary>
        bool? SettingIsEnabled { get; set; }
        /// <summary>The list of sites</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.BotService.Models.ISite> SettingSite { get; set; }

    }
}