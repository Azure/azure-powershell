
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a InformaticaServerlessRuntimeResource
.Description
Create a InformaticaServerlessRuntimeResource
.Example
New-AzInformaticaServerlessRuntime `
    -OrganizationName "Demo-Org" `
    -ResourceGroupName "InformaticaTestRg" `
    -ServerlessRuntimeName "serverlessRuntimeDemo" `
    -NetworkInterfaceConfigurationVnetId "/subscriptions/ce37d538-dfa3-49c3-b3cd-149b4b7db48a/resourceGroups/InformaticaTestRg/providers/Microsoft.Network/virtualNetworks/liftr-vnet-serverless" `
    -NetworkInterfaceConfigurationSubnetId "/subscriptions/ce37d538-dfa3-49c3-b3cd-149b4b7db48a/resourceGroups/InformaticaTestRg/providers/Microsoft.Network/virtualNetworks/liftr-vnet-serverless/subnets/default" `
    -ServerlessAccountLocation "westus2" `
    -Platform "AZURE" `
    -ApplicationType "CDI" `
    -ExecutionTimeout 3600 `
    -ServerlessRuntimeConfigCdieConfigProp @(
        @{
            EngineName = "Data_Integration_Server"
            EngineVersion = "68.0"
            ApplicationConfigs = @(
                @{
                    Type = "TOMCAT_CFG"
                    Name = "INFA_DTM_STAGING_ENABLED_CONNECTORS"
                    Value = ""
                    Platform = "all"
                    Customized = $false
                    DefaultValue = ""
                }
            )
        }
    )


.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Informatica.Models.IInformaticaServerlessRuntimeResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ADVANCEDCUSTOMPROPERTY <IAdvancedCustomProperties[]>: String KV pairs indicating Advanced custom properties.
  [Key <String>]: advanced custom properties key
  [Value <String>]: advanced custom properties value

SERVERLESSRUNTIMECONFIGCDICONFIGPROP <ICdiConfigProps[]>: The List of Informatica Serverless Runtime CDI Config Properties.
  ApplicationConfig <List<IApplicationConfigs>>: ApplicationConfigs of the CDI or CDIE.
    Customized <String>: Customized value of the application config.
    DefaultValue <String>: Default value of the application config.
    Name <String>: Name of the application config.
    Platform <String>: Platform type of the application config.
    Type <String>: Type of the application config.
    Value <String>: Value of the application config.
  EngineName <String>: EngineName of the application config.
  EngineVersion <String>: EngineVersion of the application config.

SERVERLESSRUNTIMECONFIGCDIECONFIGPROP <ICdiConfigProps[]>: The List of Informatica Serverless Runtime CDIE Config Properties.
  ApplicationConfig <List<IApplicationConfigs>>: ApplicationConfigs of the CDI or CDIE.
    Customized <String>: Customized value of the application config.
    DefaultValue <String>: Default value of the application config.
    Name <String>: Name of the application config.
    Platform <String>: Platform type of the application config.
    Type <String>: Type of the application config.
    Value <String>: Value of the application config.
  EngineName <String>: EngineName of the application config.
  EngineVersion <String>: EngineVersion of the application config.

SERVERLESSRUNTIMETAG <IServerlessRuntimeTag[]>: Serverless Runtime Tags
  [Name <String>]: The name (also known as the key) of the tag.
  [Value <String>]: The value of the tag.
.Link
https://learn.microsoft.com/powershell/module/az.informatica/new-azinformaticaserverlessruntime
#>
function New-AzInformaticaServerlessRuntime {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Informatica.Models.IInformaticaServerlessRuntimeResource])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('ServerlessRuntimeName')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Path')]
    [System.String]
    # Name of the Serverless Runtime resource
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Path')]
    [System.String]
    # Name of the Organizations resource
    ${OrganizationName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Models.IAdvancedCustomProperties[]]
    # String KV pairs indicating Advanced custom properties.
    ${AdvancedCustomProperty},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.PSArgumentCompleterAttribute("CDI", "CDIE")]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Application type of the Serverless Runtime environment.
    ${ApplicationType},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Compute units of the serverless runtime.
    ${ComputeUnit},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # description of the serverless runtime.
    ${Description},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Serverless Execution timeout
    ${ExecutionTimeout},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Virtual network subnet resource id
    ${NetworkInterfaceConfigurationSubnetId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Virtual network resource id
    ${NetworkInterfaceConfigurationVnetId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Virtual network resource guid
    ${NetworkInterfaceConfigurationVnetResourceGuid},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.PSArgumentCompleterAttribute("AZURE")]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Platform type of the Serverless Runtime.
    ${Platform},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Serverless account creation location
    ${ServerlessAccountLocation},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Models.ICdiConfigProps[]]
    # The List of Informatica Serverless Runtime CDI Config Properties.
    ${ServerlessRuntimeConfigCdiConfigProp},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Models.ICdiConfigProps[]]
    # The List of Informatica Serverless Runtime CDIE Config Properties.
    ${ServerlessRuntimeConfigCdieConfigProp},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Models.IServerlessRuntimeTag[]]
    # Serverless Runtime Tags
    ${ServerlessRuntimeTag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # User context token for OBO flow.
    ${ServerlessRuntimeUserContextPropertyUserContextToken},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Supplementary file location.
    ${SupplementaryFileLocation},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Informatica.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.Informatica.private\New-AzInformaticaServerlessRuntime_CreateExpanded';
            CreateViaJsonFilePath = 'Az.Informatica.private\New-AzInformaticaServerlessRuntime_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.Informatica.private\New-AzInformaticaServerlessRuntime_CreateViaJsonString';
        }
        if (('CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Informatica.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Informatica.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
