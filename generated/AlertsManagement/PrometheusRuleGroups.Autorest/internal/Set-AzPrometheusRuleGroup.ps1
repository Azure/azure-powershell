
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create or update a Prometheus rule group definition.
.Description
Create or update a Prometheus rule group definition.
.Example
{{ Add code here }}
.Example
{{ Add code here }}

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRuleGroupResource
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

RULE <IPrometheusRule[]>: Defines the rules in the Prometheus rule group.
  Expression <String>: The PromQL expression to evaluate. https://prometheus.io/docs/prometheus/latest/querying/basics/. Evaluated periodically as given by 'interval', and the result recorded as a new set of time series with the metric name as given by 'record'.
  [Action <IPrometheusRuleGroupAction[]>]: Actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
    [ActionGroupId <String>]: The resource id of the action group to use.
    [ActionProperty <IPrometheusRuleGroupActionProperties>]: The properties of an action group object.
      [(Any) <String>]: This indicates any property can be added to this object.
  [Alert <String>]: Alert rule name.
  [Annotation <IPrometheusRuleAnnotations>]: The annotations clause specifies a set of informational labels that can be used to store longer additional information such as alert descriptions or runbook links. The annotation values can be templated.
    [(Any) <String>]: This indicates any property can be added to this object.
  [Enabled <Boolean?>]: Enable/disable rule.
  [For <TimeSpan?>]: The amount of time alert must be active before firing.
  [Label <IPrometheusRuleLabels>]: Labels to add or overwrite before storing the result.
    [(Any) <String>]: This indicates any property can be added to this object.
  [Record <String>]: Recorded metrics name.
  [ResolveConfigurationAutoResolved <Boolean?>]: Enable alert auto-resolution.
  [ResolveConfigurationTimeToResolve <TimeSpan?>]: Alert auto-resolution timeout.
  [Severity <Int32?>]: The severity of the alerts fired by the rule. Must be between 0 and 4.
.Link
https://learn.microsoft.com/powershell/module/az.alertsmanagement/set-azprometheusrulegroup
#>
function Set-AzPrometheusRuleGroup {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRuleGroupResource])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Path')]
    [System.String]
    # The name of the rule group.
    ${RuleGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api20230301.IPrometheusRule[]]
    # Defines the rules in the Prometheus rule group.
    # To construct, see NOTES section for RULE properties and create a hash table.
    ${Rule},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [System.String[]]
    # Target Azure Monitor workspaces resource ids.
    # This api-version is currently limited to creating with one scope.
    # This may change in future.
    ${Scope},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [System.String]
    # Apply rule to data from a specific cluster.
    ${ClusterName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [System.String]
    # Rule group description.
    ${Description},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Enable/disable rule group.
    ${Enabled},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [System.TimeSpan]
    # The interval in which to run the Prometheus rule group represented in ISO 8601 duration format.
    # Should be between 1 and 15 minutes
    ${Interval},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Models.Api30.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        $mapping = @{
            UpdateExpanded = 'Az.PrometheusRuleGroups.private\Set-AzPrometheusRuleGroup_UpdateExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.PrometheusRuleGroups.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }

        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {

        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {

        throw
    }

}
end {
    try {
        $steppablePipeline.End()

    } catch {

        throw
    }
} 
}
