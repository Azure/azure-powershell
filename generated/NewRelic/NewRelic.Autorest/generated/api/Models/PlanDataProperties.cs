// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Extensions;

    /// <summary>Plan details</summary>
    public partial class PlanDataProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataPropertiesInternal
    {

        /// <summary>Backing field for <see cref="AccountCreationSource" /> property.</summary>
        private string _accountCreationSource;

        /// <summary>Source of account creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public string AccountCreationSource { get => this._accountCreationSource; set => this._accountCreationSource = value; }

        /// <summary>Internal Acessors for PlanData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanData Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataPropertiesInternal.PlanData { get => (this._planData = this._planData ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.PlanData()); set { {_planData = value;} } }

        /// <summary>Backing field for <see cref="OrgCreationSource" /> property.</summary>
        private string _orgCreationSource;

        /// <summary>Source of org creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public string OrgCreationSource { get => this._orgCreationSource; set => this._orgCreationSource = value; }

        /// <summary>Backing field for <see cref="PlanData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanData _planData;

        /// <summary>Plan details</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanData PlanData { get => (this._planData = this._planData ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.PlanData()); set => this._planData = value; }

        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string PlanDataBillingCycle { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).BillingCycle; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).BillingCycle = value ?? null; }

        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public global::System.DateTime? PlanDataEffectiveDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).EffectiveDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).EffectiveDate = value ?? default(global::System.DateTime); }

        /// <summary>plan id as published by NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string PlanDataPlanDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).PlanDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).PlanDetail = value ?? null; }

        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string PlanDataUsageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).UsageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanDataInternal)PlanData).UsageType = value ?? null; }

        /// <summary>Creates an new <see cref="PlanDataProperties" /> instance.</summary>
        public PlanDataProperties()
        {

        }
    }
    /// Plan details
    public partial interface IPlanDataProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IJsonSerializable
    {
        /// <summary>Source of account creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Source of account creation",
        SerializedName = @"accountCreationSource",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("LIFTR", "NEWRELIC")]
        string AccountCreationSource { get; set; }
        /// <summary>Source of org creation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Source of org creation",
        SerializedName = @"orgCreationSource",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("LIFTR", "NEWRELIC")]
        string OrgCreationSource { get; set; }
        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Different billing cycles like MONTHLY/WEEKLY. this could be enum",
        SerializedName = @"billingCycle",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("YEARLY", "MONTHLY", "WEEKLY")]
        string PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"date when plan was applied",
        SerializedName = @"effectiveDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by NewRelic</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"plan id as published by NewRelic",
        SerializedName = @"planDetails",
        PossibleTypes = new [] { typeof(string) })]
        string PlanDataPlanDetail { get; set; }
        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Different usage type like PAYG/COMMITTED. this could be enum",
        SerializedName = @"usageType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("PAYG", "COMMITTED")]
        string PlanDataUsageType { get; set; }

    }
    /// Plan details
    internal partial interface IPlanDataPropertiesInternal

    {
        /// <summary>Source of account creation</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("LIFTR", "NEWRELIC")]
        string AccountCreationSource { get; set; }
        /// <summary>Source of org creation</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("LIFTR", "NEWRELIC")]
        string OrgCreationSource { get; set; }
        /// <summary>Plan details</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IPlanData PlanData { get; set; }
        /// <summary>Different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("YEARLY", "MONTHLY", "WEEKLY")]
        string PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by NewRelic</summary>
        string PlanDataPlanDetail { get; set; }
        /// <summary>Different usage type like PAYG/COMMITTED. this could be enum</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("PAYG", "COMMITTED")]
        string PlanDataUsageType { get; set; }

    }
}