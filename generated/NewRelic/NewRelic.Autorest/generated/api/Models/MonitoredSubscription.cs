// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Extensions;

    /// <summary>
    /// The list of subscriptions and it's monitoring status by current NewRelic monitor.
    /// </summary>
    public partial class MonitoredSubscription :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoredSubscription,
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoredSubscriptionInternal
    {

        /// <summary>Backing field for <see cref="Error" /> property.</summary>
        private string _error;

        /// <summary>The reason of not monitoring the subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public string Error { get => this._error; set => this._error = value; }

        /// <summary>
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty,
        /// all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
        /// specified, the rules will only include resources with the associated tags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag> LogRuleFilteringTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleFilteringTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleFilteringTag = value ?? null /* arrayOf */; }

        /// <summary>Flag specifying if AAD logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string LogRuleSendAadLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleSendAadLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleSendAadLog = value ?? null; }

        /// <summary>
        /// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string LogRuleSendActivityLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleSendActivityLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleSendActivityLog = value ?? null; }

        /// <summary>Flag specifying if subscription logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string LogRuleSendSubscriptionLog { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleSendSubscriptionLog; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRuleSendSubscriptionLog = value ?? null; }

        /// <summary>List of filtering tags to be used for capturing metrics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag> MetricRuleFilteringTag { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRuleFilteringTag; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRuleFilteringTag = value ?? null /* arrayOf */; }

        /// <summary>Flag specifying if metrics should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string MetricRuleSendMetric { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRuleSendMetric; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRuleSendMetric = value ?? null; }

        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string MetricRuleUserEmail { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRuleUserEmail; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRuleUserEmail = value ?? null; }

        /// <summary>Internal Acessors for TagRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesProperties Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoredSubscriptionInternal.TagRule { get => (this._tagRule = this._tagRule ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.MonitoringTagRulesProperties()); set { {_tagRule = value;} } }

        /// <summary>Internal Acessors for TagRuleLogRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.ILogRules Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoredSubscriptionInternal.TagRuleLogRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).LogRule = value; }

        /// <summary>Internal Acessors for TagRuleMetricRule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMetricRules Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoredSubscriptionInternal.TagRuleMetricRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).MetricRule = value; }

        /// <summary>Internal Acessors for TagRuleProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoredSubscriptionInternal.TagRuleProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).ProvisioningState = value; }

        /// <summary>Backing field for <see cref="Status" /> property.</summary>
        private string _status;

        /// <summary>The state of monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public string Status { get => this._status; set => this._status = value; }

        /// <summary>Backing field for <see cref="SubscriptionId" /> property.</summary>
        private string _subscriptionId;

        /// <summary>The subscriptionId to be monitored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        public string SubscriptionId { get => this._subscriptionId; set => this._subscriptionId = value; }

        /// <summary>Backing field for <see cref="TagRule" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesProperties _tagRule;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesProperties TagRule { get => (this._tagRule = this._tagRule ?? new Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.MonitoringTagRulesProperties()); set => this._tagRule = value; }

        /// <summary>Provisioning State of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Origin(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PropertyOrigin.Inlined)]
        public string TagRuleProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesPropertiesInternal)TagRule).ProvisioningState; }

        /// <summary>Creates an new <see cref="MonitoredSubscription" /> instance.</summary>
        public MonitoredSubscription()
        {

        }
    }
    /// The list of subscriptions and it's monitoring status by current NewRelic monitor.
    public partial interface IMonitoredSubscription :
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.IJsonSerializable
    {
        /// <summary>The reason of not monitoring the subscription.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The reason of not monitoring the subscription.",
        SerializedName = @"error",
        PossibleTypes = new [] { typeof(string) })]
        string Error { get; set; }
        /// <summary>
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty,
        /// all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
        /// specified, the rules will only include resources with the associated tags.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
        If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.",
        SerializedName = @"filteringTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag> LogRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if AAD logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag specifying if AAD logs should be sent for the Monitor resource.",
        SerializedName = @"sendAadLogs",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LogRuleSendAadLog { get; set; }
        /// <summary>
        /// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.",
        SerializedName = @"sendActivityLogs",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LogRuleSendActivityLog { get; set; }
        /// <summary>Flag specifying if subscription logs should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag specifying if subscription logs should be sent for the Monitor resource.",
        SerializedName = @"sendSubscriptionLogs",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LogRuleSendSubscriptionLog { get; set; }
        /// <summary>List of filtering tags to be used for capturing metrics.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of filtering tags to be used for capturing metrics.",
        SerializedName = @"filteringTags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag> MetricRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if metrics should be sent for the Monitor resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag specifying if metrics should be sent for the Monitor resource.",
        SerializedName = @"sendMetrics",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string MetricRuleSendMetric { get; set; }
        /// <summary>User Email</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User Email",
        SerializedName = @"userEmail",
        PossibleTypes = new [] { typeof(string) })]
        string MetricRuleUserEmail { get; set; }
        /// <summary>The state of monitoring.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The state of monitoring.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("InProgress", "Active", "Failed", "Deleting")]
        string Status { get; set; }
        /// <summary>The subscriptionId to be monitored.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The subscriptionId to be monitored.",
        SerializedName = @"subscriptionId",
        PossibleTypes = new [] { typeof(string) })]
        string SubscriptionId { get; set; }
        /// <summary>Provisioning State of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning State of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Accepted", "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "NotSpecified")]
        string TagRuleProvisioningState { get;  }

    }
    /// The list of subscriptions and it's monitoring status by current NewRelic monitor.
    internal partial interface IMonitoredSubscriptionInternal

    {
        /// <summary>The reason of not monitoring the subscription.</summary>
        string Error { get; set; }
        /// <summary>
        /// List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty,
        /// all resources will be captured.
        /// If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are
        /// specified, the rules will only include resources with the associated tags.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag> LogRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if AAD logs should be sent for the Monitor resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LogRuleSendAadLog { get; set; }
        /// <summary>
        /// Flag specifying if activity logs from Azure resources should be sent for the Monitor resource.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LogRuleSendActivityLog { get; set; }
        /// <summary>Flag specifying if subscription logs should be sent for the Monitor resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LogRuleSendSubscriptionLog { get; set; }
        /// <summary>List of filtering tags to be used for capturing metrics.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IFilteringTag> MetricRuleFilteringTag { get; set; }
        /// <summary>Flag specifying if metrics should be sent for the Monitor resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string MetricRuleSendMetric { get; set; }
        /// <summary>User Email</summary>
        string MetricRuleUserEmail { get; set; }
        /// <summary>The state of monitoring.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("InProgress", "Active", "Failed", "Deleting")]
        string Status { get; set; }
        /// <summary>The subscriptionId to be monitored.</summary>
        string SubscriptionId { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMonitoringTagRulesProperties TagRule { get; set; }
        /// <summary>Set of rules for sending logs for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.ILogRules TagRuleLogRule { get; set; }
        /// <summary>Set of rules for sending metrics for the Monitor resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.NewRelic.Models.IMetricRules TagRuleMetricRule { get; set; }
        /// <summary>Provisioning State of the resource</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.NewRelic.PSArgumentCompleterAttribute("Accepted", "Creating", "Updating", "Deleting", "Succeeded", "Failed", "Canceled", "Deleted", "NotSpecified")]
        string TagRuleProvisioningState { get; set; }

    }
}