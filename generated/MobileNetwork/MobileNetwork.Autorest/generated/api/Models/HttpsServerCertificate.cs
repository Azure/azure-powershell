// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Extensions;

    /// <summary>HTTPS server certificate configuration.</summary>
    public partial class HttpsServerCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificate,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificateInternal
    {

        /// <summary>Backing field for <see cref="CertificateUrl" /> property.</summary>
        private string _certificateUrl;

        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public string CertificateUrl { get => this._certificateUrl; set => this._certificateUrl = value; }

        /// <summary>Internal Acessors for Provisioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioning Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificateInternal.Provisioning { get => (this._provisioning = this._provisioning ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.CertificateProvisioning()); set { {_provisioning = value;} } }

        /// <summary>Internal Acessors for ProvisioningReason</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificateInternal.ProvisioningReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioningInternal)Provisioning).Reason; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioningInternal)Provisioning).Reason = value ?? null; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificateInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioningInternal)Provisioning).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioningInternal)Provisioning).State = value ?? null; }

        /// <summary>Backing field for <see cref="Provisioning" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioning _provisioning;

        /// <summary>The provisioning state of the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioning Provisioning { get => (this._provisioning = this._provisioning ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.CertificateProvisioning()); }

        /// <summary>Reason for certificate provisioning failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ProvisioningReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioningInternal)Provisioning).Reason; }

        /// <summary>The certificate's provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioningInternal)Provisioning).State; }

        /// <summary>Creates an new <see cref="HttpsServerCertificate" /> instance.</summary>
        public HttpsServerCertificate()
        {

        }
    }
    /// HTTPS server certificate configuration.
    public partial interface IHttpsServerCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IJsonSerializable
    {
        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.",
        SerializedName = @"certificateUrl",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateUrl { get; set; }
        /// <summary>Reason for certificate provisioning failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Reason for certificate provisioning failure.",
        SerializedName = @"reason",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningReason { get;  }
        /// <summary>The certificate's provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The certificate's provisioning state",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("NotProvisioned", "Provisioned", "Failed")]
        string ProvisioningState { get;  }

    }
    /// HTTPS server certificate configuration.
    internal partial interface IHttpsServerCertificateInternal

    {
        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        string CertificateUrl { get; set; }
        /// <summary>The provisioning state of the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioning Provisioning { get; set; }
        /// <summary>Reason for certificate provisioning failure.</summary>
        string ProvisioningReason { get; set; }
        /// <summary>The certificate's provisioning state</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("NotProvisioned", "Provisioned", "Failed")]
        string ProvisioningState { get; set; }

    }
}