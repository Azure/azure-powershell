// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Extensions;

    /// <summary>Packet core control plane resource.</summary>
    public partial class PacketCoreControlPlane :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlane,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.TrackedResource();

        /// <summary>Azure Stack Edge device resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string AzureStackEdgeDeviceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).AzureStackEdgeDeviceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).AzureStackEdgeDeviceId = value ?? null; }

        /// <summary>Azure Stack HCI cluster resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string AzureStackHciClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).AzureStackHciClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).AzureStackHciClusterId = value ?? null; }

        /// <summary>Azure Arc connected cluster resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string ConnectedClusterId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ConnectedClusterId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ConnectedClusterId = value ?? null; }

        /// <summary>The IPv4 address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string ControlPlaneAccessInterfaceIpv4Address { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceIpv4Address; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceIpv4Address = value ?? null; }

        /// <summary>The default IPv4 gateway (router).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string ControlPlaneAccessInterfaceIpv4Gateway { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceIpv4Gateway; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceIpv4Gateway = value ?? null; }

        /// <summary>The IPv4 subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string ControlPlaneAccessInterfaceIpv4Subnet { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceIpv4Subnet; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceIpv4Subnet = value ?? null; }

        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string ControlPlaneAccessInterfaceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceName; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterfaceName = value ?? null; }

        /// <summary>The core network technology generation (5G core or EPC / 4G core).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string CoreNetworkTechnology { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).CoreNetworkTechnology; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).CoreNetworkTechnology = value ?? null; }

        /// <summary>Azure Arc custom location resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string CustomLocationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).CustomLocationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).CustomLocationId = value ?? null; }

        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string HttpsServerCertificateUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).HttpsServerCertificateUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).HttpsServerCertificateUrl = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentity _identity;

        /// <summary>The identity used to retrieve the ingress certificate from Azure key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ManagedServiceIdentity()); set => this._identity = value; }

        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; }

        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).TenantId; }

        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>Installation state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string InstallationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InstallationState; }

        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInteropSettings InteropSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InteropSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InteropSetting = value ?? null /* model class */; }

        /// <summary>How to authenticate users who access local diagnostics APIs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string LocalDiagnosticAccessAuthenticationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticAccessAuthenticationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticAccessAuthenticationType = value ; }

        /// <summary>The certificate's provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticsAccessHttpsServerCertificateProvisioningState; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 0)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResourceInternal)__trackedResource).Location = value ?? null; }

        /// <summary>Internal Acessors for ControlPlaneAccessInterface</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IInterfaceProperties Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.ControlPlaneAccessInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ControlPlaneAccessInterface = value ?? null /* model class */; }

        /// <summary>Internal Acessors for HttpsServerCertificateProvisioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioning Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.HttpsServerCertificateProvisioning { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).HttpsServerCertificateProvisioning; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).HttpsServerCertificateProvisioning = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentity Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ManagedServiceIdentity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).PrincipalId = value ?? null; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentityInternal)Identity).TenantId = value ?? null; }

        /// <summary>Internal Acessors for Installation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IInstallation Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.Installation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Installation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Installation = value ?? null /* model class */; }

        /// <summary>Internal Acessors for InstallationOperation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAsyncOperationId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.InstallationOperation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InstallationOperation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InstallationOperation = value ?? null /* model class */; }

        /// <summary>Internal Acessors for InstallationState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.InstallationState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InstallationState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).InstallationState = value ?? null; }

        /// <summary>Internal Acessors for LocalDiagnosticAccessHttpsServerCertificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificate Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.LocalDiagnosticAccessHttpsServerCertificate { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticAccessHttpsServerCertificate; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticAccessHttpsServerCertificate = value ?? null /* model class */; }

        /// <summary>Internal Acessors for LocalDiagnosticsAccess</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ILocalDiagnosticsAccessConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.LocalDiagnosticsAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticsAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticsAccess = value ?? null /* model class */; }

        /// <summary>
        /// Internal Acessors for LocalDiagnosticsAccessHttpsServerCertificateProvisioningState
        /// </summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticsAccessHttpsServerCertificateProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).LocalDiagnosticsAccessHttpsServerCertificateProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for OperationId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.OperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).OperationId; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).OperationId = value ?? null; }

        /// <summary>Internal Acessors for Platform</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPlatformConfiguration Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.Platform { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Platform; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Platform = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PlatformAzureStackEdgeDevice</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.PlatformAzureStackEdgeDevice { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackEdgeDevice; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackEdgeDevice = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PlatformAzureStackEdgeDevices</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId> Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.PlatformAzureStackEdgeDevices { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackEdgeDevices; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackEdgeDevices = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for PlatformAzureStackHciCluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackHciClusterResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.PlatformAzureStackHciCluster { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackHciCluster; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackHciCluster = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PlatformConnectedCluster</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IConnectedClusterResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.PlatformConnectedCluster { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformConnectedCluster; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformConnectedCluster = value ?? null /* model class */; }

        /// <summary>Internal Acessors for PlatformCustomLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICustomLocationResourceId Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.PlatformCustomLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformCustomLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformCustomLocation = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormat Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.PacketCoreControlPlanePropertiesFormat()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningReason</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.ProvisioningReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ProvisioningReason; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ProvisioningReason = value ?? null; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for RollbackVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlaneInternal.RollbackVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).RollbackVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).RollbackVersion = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Id = value ?? null; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Name = value ?? null; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Type = value ?? null; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 1)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Name; }

        /// <summary>Azure Async Operation ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string OperationId { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).OperationId; }

        /// <summary>
        /// The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices,
        /// all devices will appear in this list.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId> PlatformAzureStackEdgeDevices { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformAzureStackEdgeDevices; }

        /// <summary>The platform type where packet core is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string PlatformType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformType; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).PlatformType = value ; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormat _property;

        /// <summary>Packet core control plane Properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormat Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.PacketCoreControlPlanePropertiesFormat()); set => this._property = value; }

        /// <summary>Reason for certificate provisioning failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string ProvisioningReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ProvisioningReason; }

        /// <summary>The provisioning state of the packet core control plane resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 3)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.FormatTable(Index = 2)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// The previous version of the packet core software that was deployed. Used when performing the rollback action.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string RollbackVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).RollbackVersion; }

        /// <summary>
        /// Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet
        /// core control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ISiteResourceId> Site { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Site; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Site = value ; }

        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Sku = value ; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inherited)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IResourceInternal)__trackedResource).Type; }

        /// <summary>
        /// The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU
        /// set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public int? UeMtu { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).UeMtu; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).UeMtu = value ?? default(int); }

        /// <summary>The version of the packet core software that is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.DoNotFormat]
        public string Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInternal)Property).Version = value ?? null; }

        /// <summary>Creates an new <see cref="PacketCoreControlPlane" /> instance.</summary>
        public PacketCoreControlPlane()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// Packet core control plane resource.
    public partial interface IPacketCoreControlPlane :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResource
    {
        /// <summary>Azure Stack Edge device resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure Stack Edge device resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string AzureStackEdgeDeviceId { get; set; }
        /// <summary>Azure Stack HCI cluster resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure Stack HCI cluster resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string AzureStackHciClusterId { get; set; }
        /// <summary>Azure Arc connected cluster resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure Arc connected cluster resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ConnectedClusterId { get; set; }
        /// <summary>The IPv4 address.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The IPv4 address.",
        SerializedName = @"ipv4Address",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceIpv4Address { get; set; }
        /// <summary>The default IPv4 gateway (router).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The default IPv4 gateway (router).",
        SerializedName = @"ipv4Gateway",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceIpv4Gateway { get; set; }
        /// <summary>The IPv4 subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The IPv4 subnet.",
        SerializedName = @"ipv4Subnet",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceIpv4Subnet { get; set; }
        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ControlPlaneAccessInterfaceName { get; set; }
        /// <summary>The core network technology generation (5G core or EPC / 4G core).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The core network technology generation (5G core or EPC / 4G core).",
        SerializedName = @"coreNetworkTechnology",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("5GC", "EPC")]
        string CoreNetworkTechnology { get; set; }
        /// <summary>Azure Arc custom location resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Azure Arc custom location resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string CustomLocationId { get; set; }
        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.",
        SerializedName = @"certificateUrl",
        PossibleTypes = new [] { typeof(string) })]
        string HttpsServerCertificateUrl { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>Installation state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Installation state",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("Uninstalled", "Installing", "Installed", "Updating", "Upgrading", "Uninstalling", "Reinstalling", "RollingBack", "Failed")]
        string InstallationState { get;  }
        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Settings to allow interoperability with third party components e.g. RANs and UEs.",
        SerializedName = @"interopSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInteropSettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInteropSettings InteropSetting { get; set; }
        /// <summary>How to authenticate users who access local diagnostics APIs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"How to authenticate users who access local diagnostics APIs.",
        SerializedName = @"authenticationType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("AAD", "Password")]
        string LocalDiagnosticAccessAuthenticationType { get; set; }
        /// <summary>The certificate's provisioning state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The certificate's provisioning state",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("NotProvisioned", "Provisioned", "Failed")]
        string LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get;  }
        /// <summary>Azure Async Operation ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Azure Async Operation ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string OperationId { get;  }
        /// <summary>
        /// The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices,
        /// all devices will appear in this list.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices, all devices will appear in this list.",
        SerializedName = @"azureStackEdgeDevices",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId> PlatformAzureStackEdgeDevices { get;  }
        /// <summary>The platform type where packet core is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The platform type where packet core is deployed.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("AKS-HCI", "3P-AZURE-STACK-HCI")]
        string PlatformType { get; set; }
        /// <summary>Reason for certificate provisioning failure.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Reason for certificate provisioning failure.",
        SerializedName = @"reason",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningReason { get;  }
        /// <summary>The provisioning state of the packet core control plane resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The provisioning state of the packet core control plane resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("Unknown", "Succeeded", "Accepted", "Deleting", "Failed", "Canceled", "Deleted")]
        string ProvisioningState { get;  }
        /// <summary>
        /// The previous version of the packet core software that was deployed. Used when performing the rollback action.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The previous version of the packet core software that was deployed. Used when performing the rollback action.",
        SerializedName = @"rollbackVersion",
        PossibleTypes = new [] { typeof(string) })]
        string RollbackVersion { get;  }
        /// <summary>
        /// Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet
        /// core control plane.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet core control plane.",
        SerializedName = @"sites",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ISiteResourceId) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ISiteResourceId> Site { get; set; }
        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The SKU defining the throughput and SIM allowances for this packet core control plane deployment.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("G0", "G1", "G2", "G5", "G10")]
        string Sku { get; set; }
        /// <summary>
        /// The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU
        /// set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.",
        SerializedName = @"ueMtu",
        PossibleTypes = new [] { typeof(int) })]
        int? UeMtu { get; set; }
        /// <summary>The version of the packet core software that is deployed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the packet core software that is deployed.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get; set; }

    }
    /// Packet core control plane resource.
    internal partial interface IPacketCoreControlPlaneInternal :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ITrackedResourceInternal
    {
        /// <summary>Azure Stack Edge device resource ID.</summary>
        string AzureStackEdgeDeviceId { get; set; }
        /// <summary>Azure Stack HCI cluster resource ID.</summary>
        string AzureStackHciClusterId { get; set; }
        /// <summary>Azure Arc connected cluster resource ID.</summary>
        string ConnectedClusterId { get; set; }
        /// <summary>
        /// The control plane interface on the access network. For 5G networks, this is the N2 interface. For 4G networks, this is
        /// the S1-MME interface.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IInterfaceProperties ControlPlaneAccessInterface { get; set; }
        /// <summary>The IPv4 address.</summary>
        string ControlPlaneAccessInterfaceIpv4Address { get; set; }
        /// <summary>The default IPv4 gateway (router).</summary>
        string ControlPlaneAccessInterfaceIpv4Gateway { get; set; }
        /// <summary>The IPv4 subnet.</summary>
        string ControlPlaneAccessInterfaceIpv4Subnet { get; set; }
        /// <summary>
        /// The logical name for this interface. This should match one of the interfaces configured on your Azure Stack Edge device.
        /// </summary>
        string ControlPlaneAccessInterfaceName { get; set; }
        /// <summary>The core network technology generation (5G core or EPC / 4G core).</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("5GC", "EPC")]
        string CoreNetworkTechnology { get; set; }
        /// <summary>Azure Arc custom location resource ID.</summary>
        string CustomLocationId { get; set; }
        /// <summary>The provisioning state of the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICertificateProvisioning HttpsServerCertificateProvisioning { get; set; }
        /// <summary>
        /// The certificate URL, unversioned. For example: https://contosovault.vault.azure.net/certificates/ingress.
        /// </summary>
        string HttpsServerCertificateUrl { get; set; }
        /// <summary>The identity used to retrieve the ingress certificate from Azure key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IManagedServiceIdentity Identity { get; set; }
        /// <summary>
        /// The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>
        /// The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
        /// </summary>
        string IdentityTenantId { get; set; }
        /// <summary>
        /// Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed).
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM
        /// resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
        /// The dictionary values can be empty objects ({}) in requests.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>The installation state of the packet core control plane resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IInstallation Installation { get; set; }
        /// <summary>A reference to an in-progress installation operation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAsyncOperationId InstallationOperation { get; set; }
        /// <summary>Installation state</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("Uninstalled", "Installing", "Installed", "Updating", "Upgrading", "Uninstalling", "Reinstalling", "RollingBack", "Failed")]
        string InstallationState { get; set; }
        /// <summary>
        /// Settings to allow interoperability with third party components e.g. RANs and UEs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormatInteropSettings InteropSetting { get; set; }
        /// <summary>How to authenticate users who access local diagnostics APIs.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("AAD", "Password")]
        string LocalDiagnosticAccessAuthenticationType { get; set; }
        /// <summary>The HTTPS server TLS certificate used to secure local access to diagnostics.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IHttpsServerCertificate LocalDiagnosticAccessHttpsServerCertificate { get; set; }
        /// <summary>
        /// The kubernetes ingress configuration to control access to packet core diagnostics over local APIs.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ILocalDiagnosticsAccessConfiguration LocalDiagnosticsAccess { get; set; }
        /// <summary>The certificate's provisioning state</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("NotProvisioned", "Provisioned", "Failed")]
        string LocalDiagnosticsAccessHttpsServerCertificateProvisioningState { get; set; }
        /// <summary>Azure Async Operation ID.</summary>
        string OperationId { get; set; }
        /// <summary>The platform where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPlatformConfiguration Platform { get; set; }
        /// <summary>
        /// The Azure Stack Edge device where the packet core is deployed. If the device is part of a fault tolerant pair, either
        /// device in the pair can be specified.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId PlatformAzureStackEdgeDevice { get; set; }
        /// <summary>
        /// The Azure Stack Edge devices where the packet core is deployed. If the packet core is deployed across multiple devices,
        /// all devices will appear in this list.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackEdgeDeviceResourceId> PlatformAzureStackEdgeDevices { get; set; }
        /// <summary>The Azure Stack HCI cluster where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IAzureStackHciClusterResourceId PlatformAzureStackHciCluster { get; set; }
        /// <summary>Azure Arc connected cluster where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IConnectedClusterResourceId PlatformConnectedCluster { get; set; }
        /// <summary>Azure Arc custom location where the packet core is deployed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ICustomLocationResourceId PlatformCustomLocation { get; set; }
        /// <summary>The platform type where packet core is deployed.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("AKS-HCI", "3P-AZURE-STACK-HCI")]
        string PlatformType { get; set; }
        /// <summary>Packet core control plane Properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.IPacketCoreControlPlanePropertiesFormat Property { get; set; }
        /// <summary>Reason for certificate provisioning failure.</summary>
        string ProvisioningReason { get; set; }
        /// <summary>The provisioning state of the packet core control plane resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("Unknown", "Succeeded", "Accepted", "Deleting", "Failed", "Canceled", "Deleted")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// The previous version of the packet core software that was deployed. Used when performing the rollback action.
        /// </summary>
        string RollbackVersion { get; set; }
        /// <summary>
        /// Site(s) under which this packet core control plane should be deployed. The sites must be in the same location as the packet
        /// core control plane.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.ISiteResourceId> Site { get; set; }
        /// <summary>
        /// The SKU defining the throughput and SIM allowances for this packet core control plane deployment.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PSArgumentCompleterAttribute("G0", "G1", "G2", "G5", "G10")]
        string Sku { get; set; }
        /// <summary>
        /// The MTU (in bytes) signaled to the UE. The same MTU is set on the user plane data links for all data networks. The MTU
        /// set on the user plane access link is calculated to be 60 bytes greater than this value to allow for GTP encapsulation.
        /// </summary>
        int? UeMtu { get; set; }
        /// <summary>The version of the packet core software that is deployed.</summary>
        string Version { get; set; }

    }
}