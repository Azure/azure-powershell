// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101
{
    using static Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Extensions;

    /// <summary>
    /// The network address and port translation settings to use for the attached data network.
    /// </summary>
    public partial class NaptConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfigurationInternal
    {

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? _enabled;

        /// <summary>Whether NAPT is enabled for connections to this attached data network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>Internal Acessors for PinholeTimeout</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeouts Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfigurationInternal.PinholeTimeout { get => (this._pinholeTimeout = this._pinholeTimeout ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.PinholeTimeouts()); set { {_pinholeTimeout = value;} } }

        /// <summary>Internal Acessors for PortRange</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRange Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfigurationInternal.PortRange { get => (this._portRange = this._portRange ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.PortRange()); set { {_portRange = value;} } }

        /// <summary>Internal Acessors for PortReuseHoldTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimes Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.INaptConfigurationInternal.PortReuseHoldTime { get => (this._portReuseHoldTime = this._portReuseHoldTime ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.PortReuseHoldTimes()); set { {_portReuseHoldTime = value;} } }

        /// <summary>Backing field for <see cref="PinholeLimit" /> property.</summary>
        private int? _pinholeLimit;

        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is
        /// the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        public int? PinholeLimit { get => this._pinholeLimit; set => this._pinholeLimit = value; }

        /// <summary>Backing field for <see cref="PinholeTimeout" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeouts _pinholeTimeout;

        /// <summary>
        /// Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeouts PinholeTimeout { get => (this._pinholeTimeout = this._pinholeTimeout ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.PinholeTimeouts()); set => this._pinholeTimeout = value; }

        /// <summary>
        /// Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PinholeTimeoutIcmp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeoutsInternal)PinholeTimeout).Icmp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeoutsInternal)PinholeTimeout).Icmp = value ?? default(int); }

        /// <summary>Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PinholeTimeoutTcp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeoutsInternal)PinholeTimeout).Tcp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeoutsInternal)PinholeTimeout).Tcp = value ?? default(int); }

        /// <summary>Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PinholeTimeoutUdp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeoutsInternal)PinholeTimeout).Udp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeoutsInternal)PinholeTimeout).Udp = value ?? default(int); }

        /// <summary>Backing field for <see cref="PortRange" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRange _portRange;

        /// <summary>
        /// Range of port numbers to use as translated ports on each translated address.
        /// If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
        /// (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above
        /// are reserved for non-NAPT use.)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRange PortRange { get => (this._portRange = this._portRange ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.PortRange()); set => this._portRange = value; }

        /// <summary>The maximum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PortRangeMaxPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRangeInternal)PortRange).MaxPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRangeInternal)PortRange).MaxPort = value ?? default(int); }

        /// <summary>The minimum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PortRangeMinPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRangeInternal)PortRange).MinPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRangeInternal)PortRange).MinPort = value ?? default(int); }

        /// <summary>Backing field for <see cref="PortReuseHoldTime" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimes _portReuseHoldTime;

        /// <summary>
        /// The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by
        /// another pinhole. All hold times must be at least 1 second.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimes PortReuseHoldTime { get => (this._portReuseHoldTime = this._portReuseHoldTime ?? new Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.PortReuseHoldTimes()); set => this._portReuseHoldTime = value; }

        /// <summary>
        /// Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for
        /// TCP is 2 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PortReuseHoldTimeTcp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimesInternal)PortReuseHoldTime).Tcp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimesInternal)PortReuseHoldTime).Tcp = value ?? default(int); }

        /// <summary>
        /// Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for
        /// UDP is 1 minute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Origin(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.PropertyOrigin.Inlined)]
        public int? PortReuseHoldTimeUdp { get => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimesInternal)PortReuseHoldTime).Udp; set => ((Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimesInternal)PortReuseHoldTime).Udp = value ?? default(int); }

        /// <summary>Creates an new <see cref="NaptConfiguration" /> instance.</summary>
        public NaptConfiguration()
        {

        }
    }
    /// The network address and port translation settings to use for the attached data network.
    public partial interface INaptConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.IJsonSerializable
    {
        /// <summary>Whether NAPT is enabled for connections to this attached data network.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether NAPT is enabled for connections to this attached data network.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled) })]
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? Enabled { get; set; }
        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is
        /// the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is the N6 interface. For 4G networks, this is the SGi interface.",
        SerializedName = @"pinholeLimits",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeLimit { get; set; }
        /// <summary>
        /// Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.",
        SerializedName = @"icmp",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeTimeoutIcmp { get; set; }
        /// <summary>Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.",
        SerializedName = @"tcp",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeTimeoutTcp { get; set; }
        /// <summary>Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.",
        SerializedName = @"udp",
        PossibleTypes = new [] { typeof(int) })]
        int? PinholeTimeoutUdp { get; set; }
        /// <summary>The maximum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The maximum port number",
        SerializedName = @"maxPort",
        PossibleTypes = new [] { typeof(int) })]
        int? PortRangeMaxPort { get; set; }
        /// <summary>The minimum port number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The minimum port number",
        SerializedName = @"minPort",
        PossibleTypes = new [] { typeof(int) })]
        int? PortRangeMinPort { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for
        /// TCP is 2 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for TCP is 2 minutes.",
        SerializedName = @"tcp",
        PossibleTypes = new [] { typeof(int) })]
        int? PortReuseHoldTimeTcp { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for
        /// UDP is 1 minute.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for UDP is 1 minute.",
        SerializedName = @"udp",
        PossibleTypes = new [] { typeof(int) })]
        int? PortReuseHoldTimeUdp { get; set; }

    }
    /// The network address and port translation settings to use for the attached data network.
    internal partial interface INaptConfigurationInternal

    {
        /// <summary>Whether NAPT is enabled for connections to this attached data network.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Support.NaptEnabled? Enabled { get; set; }
        /// <summary>
        /// Maximum number of UDP and TCP pinholes that can be open simultaneously on the core interface. For 5G networks, this is
        /// the N6 interface. For 4G networks, this is the SGi interface.
        /// </summary>
        int? PinholeLimit { get; set; }
        /// <summary>
        /// Expiry times of inactive NAPT pinholes, in seconds. All timers must be at least 1 second.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPinholeTimeouts PinholeTimeout { get; set; }
        /// <summary>
        /// Pinhole timeout for ICMP pinholes in seconds. Default for ICMP Echo is 30 seconds.
        /// </summary>
        int? PinholeTimeoutIcmp { get; set; }
        /// <summary>Pinhole timeout for TCP pinholes in seconds. Default for TCP is 3 minutes.</summary>
        int? PinholeTimeoutTcp { get; set; }
        /// <summary>Pinhole timeout for UDP pinholes in seconds. Default for UDP is 30 seconds.</summary>
        int? PinholeTimeoutUdp { get; set; }
        /// <summary>
        /// Range of port numbers to use as translated ports on each translated address.
        /// If not specified and NAPT is enabled, this range defaults to 1,024 - 49,999.
        /// (Ports under 1,024 should not be used because these are special purpose ports reserved by IANA. Ports 50,000 and above
        /// are reserved for non-NAPT use.)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortRange PortRange { get; set; }
        /// <summary>The maximum port number</summary>
        int? PortRangeMaxPort { get; set; }
        /// <summary>The minimum port number</summary>
        int? PortRangeMinPort { get; set; }
        /// <summary>
        /// The minimum time (in seconds) that will pass before a port that was used by a closed pinhole can be recycled for use by
        /// another pinhole. All hold times must be at least 1 second.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.MobileNetwork.Models.Api20221101.IPortReuseHoldTimes PortReuseHoldTime { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a TCP port that was used by a closed pinhole can be reused. Default for
        /// TCP is 2 minutes.
        /// </summary>
        int? PortReuseHoldTimeTcp { get; set; }
        /// <summary>
        /// Minimum time in seconds that will pass before a UDP port that was used by a closed pinhole can be reused. Default for
        /// UDP is 1 minute.
        /// </summary>
        int? PortReuseHoldTimeUdp { get; set; }

    }
}