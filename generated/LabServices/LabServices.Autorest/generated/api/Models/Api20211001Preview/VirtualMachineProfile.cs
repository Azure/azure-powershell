// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Extensions;

    /// <summary>The base virtual machine configuration for a lab.</summary>
    public partial class VirtualMachineProfile :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfile,
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal
    {

        /// <summary>Backing field for <see cref="AdditionalCapability" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineAdditionalCapabilities _additionalCapability;

        /// <summary>Additional VM capabilities.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineAdditionalCapabilities AdditionalCapability { get => (this._additionalCapability = this._additionalCapability ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.VirtualMachineAdditionalCapabilities()); set => this._additionalCapability = value; }

        /// <summary>Flag to pre-install dedicated GPU drivers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AdditionalCapabilityInstallGpuDriver { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineAdditionalCapabilitiesInternal)AdditionalCapability).InstallGpuDriver; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineAdditionalCapabilitiesInternal)AdditionalCapability).InstallGpuDriver = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState)""); }

        /// <summary>Backing field for <see cref="AdminUser" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials _adminUser;

        /// <summary>Credentials for the admin user on the VM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials AdminUser { get => (this._adminUser = this._adminUser ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.Credentials()); set => this._adminUser = value; }

        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AdminUserPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)AdminUser).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)AdminUser).Password = value ?? null; }

        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AdminUserUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)AdminUser).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)AdminUser).Username = value ; }

        /// <summary>Backing field for <see cref="CreateOption" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.CreateOption _createOption;

        /// <summary>Indicates what lab virtual machines are created from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.CreateOption CreateOption { get => this._createOption; set => this._createOption = value; }

        /// <summary>Backing field for <see cref="ImageReference" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReference _imageReference;

        /// <summary>The image configuration for lab virtual machines.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReference ImageReference { get => (this._imageReference = this._imageReference ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ImageReference()); set => this._imageReference = value; }

        /// <summary>The actual version of the image after use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceExactVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).ExactVersion; }

        /// <summary>Image resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Id = value ?? null; }

        /// <summary>The image offer if applicable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Offer; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Offer = value ?? null; }

        /// <summary>The image publisher</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferencePublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Publisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Publisher = value ?? null; }

        /// <summary>The image SKU</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Sku = value ?? null; }

        /// <summary>The image version specified on creation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).Version = value ?? null; }

        /// <summary>Internal Acessors for AdditionalCapability</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineAdditionalCapabilities Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.AdditionalCapability { get => (this._additionalCapability = this._additionalCapability ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.VirtualMachineAdditionalCapabilities()); set { {_additionalCapability = value;} } }

        /// <summary>Internal Acessors for AdminUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.AdminUser { get => (this._adminUser = this._adminUser ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.Credentials()); set { {_adminUser = value;} } }

        /// <summary>Internal Acessors for ImageReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReference Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.ImageReference { get => (this._imageReference = this._imageReference ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ImageReference()); set { {_imageReference = value;} } }

        /// <summary>Internal Acessors for ImageReferenceExactVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.ImageReferenceExactVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).ExactVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReferenceInternal)ImageReference).ExactVersion = value; }

        /// <summary>Internal Acessors for NonAdminUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.NonAdminUser { get => (this._nonAdminUser = this._nonAdminUser ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.Credentials()); set { {_nonAdminUser = value;} } }

        /// <summary>Internal Acessors for OSType</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.OSType? Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.OSType { get => this._oSType; set { {_oSType = value;} } }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISku Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineProfileInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.Sku()); set { {_sku = value;} } }

        /// <summary>Backing field for <see cref="NonAdminUser" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials _nonAdminUser;

        /// <summary>Credentials for the non-admin user on the VM, if one exists.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials NonAdminUser { get => (this._nonAdminUser = this._nonAdminUser ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.Credentials()); set => this._nonAdminUser = value; }

        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string NonAdminUserPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)NonAdminUser).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)NonAdminUser).Password = value ?? null; }

        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string NonAdminUserUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)NonAdminUser).Username; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentialsInternal)NonAdminUser).Username = value ?? null; }

        /// <summary>Backing field for <see cref="OSType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.OSType? _oSType;

        /// <summary>The OS type of the image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.OSType? OSType { get => this._oSType; }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISku _sku;

        /// <summary>The SKU for the lab. Defines the type of virtual machines used in the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.Sku()); set => this._sku = value; }

        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
        /// resource this may be omitted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public int? SkuCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Capacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Capacity = value ?? default(int); }

        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Family; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Family = value ?? null; }

        /// <summary>The name of the SKU. Ex - P3. It is typically a letter+number code</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Name = value ; }

        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Size; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Size = value ?? null; }

        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
        /// on a PUT.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.SkuTier? SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Tier; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISkuInternal)Sku).Tier = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.SkuTier)""); }

        /// <summary>Backing field for <see cref="UsageQuota" /> property.</summary>
        private global::System.TimeSpan _usageQuota;

        /// <summary>
        /// The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public global::System.TimeSpan UsageQuota { get => this._usageQuota; set => this._usageQuota = value; }

        /// <summary>Backing field for <see cref="UseSharedPassword" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? _useSharedPassword;

        /// <summary>Enabling this option will use the same password for all user VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? UseSharedPassword { get => this._useSharedPassword; set => this._useSharedPassword = value; }

        /// <summary>Creates an new <see cref="VirtualMachineProfile" /> instance.</summary>
        public VirtualMachineProfile()
        {

        }
    }
    /// The base virtual machine configuration for a lab.
    public partial interface IVirtualMachineProfile :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IJsonSerializable
    {
        /// <summary>Flag to pre-install dedicated GPU drivers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag to pre-install dedicated GPU drivers.",
        SerializedName = @"installGpuDrivers",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AdditionalCapabilityInstallGpuDriver { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password for the user. This is required for the TemplateVM createOption.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string AdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The username to use when signing in to lab VMs.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string AdminUserUsername { get; set; }
        /// <summary>Indicates what lab virtual machines are created from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Indicates what lab virtual machines are created from.",
        SerializedName = @"createOption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.CreateOption) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.CreateOption CreateOption { get; set; }
        /// <summary>The actual version of the image after use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The actual version of the image after use.",
        SerializedName = @"exactVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceExactVersion { get;  }
        /// <summary>Image resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Image resource ID",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceId { get; set; }
        /// <summary>The image offer if applicable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image offer if applicable.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceOffer { get; set; }
        /// <summary>The image publisher</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image publisher",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferencePublisher { get; set; }
        /// <summary>The image SKU</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image SKU",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceSku { get; set; }
        /// <summary>The image version specified on creation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The image version specified on creation.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceVersion { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The password for the user. This is required for the TemplateVM createOption.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(string) })]
        string NonAdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The username to use when signing in to lab VMs.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string NonAdminUserUsername { get; set; }
        /// <summary>The OS type of the image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The OS type of the image",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.OSType) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.OSType? OSType { get;  }
        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
        /// resource this may be omitted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? SkuCapacity { get; set; }
        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"If the service has different generations of hardware, for the same SKU, then that can be captured here.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        string SkuFamily { get; set; }
        /// <summary>The name of the SKU. Ex - P3. It is typically a letter+number code</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The name of the SKU. Ex - P3. It is typically a letter+number code",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. ",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        string SkuSize { get; set; }
        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
        /// on a PUT.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.SkuTier) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.SkuTier? SkuTier { get; set; }
        /// <summary>
        /// The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.",
        SerializedName = @"usageQuota",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan UsageQuota { get; set; }
        /// <summary>Enabling this option will use the same password for all user VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enabling this option will use the same password for all user VMs.",
        SerializedName = @"useSharedPassword",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState) })]
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? UseSharedPassword { get; set; }

    }
    /// The base virtual machine configuration for a lab.
    internal partial interface IVirtualMachineProfileInternal

    {
        /// <summary>Additional VM capabilities.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IVirtualMachineAdditionalCapabilities AdditionalCapability { get; set; }
        /// <summary>Flag to pre-install dedicated GPU drivers.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? AdditionalCapabilityInstallGpuDriver { get; set; }
        /// <summary>Credentials for the admin user on the VM.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials AdminUser { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        string AdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        string AdminUserUsername { get; set; }
        /// <summary>Indicates what lab virtual machines are created from.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.CreateOption CreateOption { get; set; }
        /// <summary>The image configuration for lab virtual machines.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.IImageReference ImageReference { get; set; }
        /// <summary>The actual version of the image after use.</summary>
        string ImageReferenceExactVersion { get; set; }
        /// <summary>Image resource ID</summary>
        string ImageReferenceId { get; set; }
        /// <summary>The image offer if applicable.</summary>
        string ImageReferenceOffer { get; set; }
        /// <summary>The image publisher</summary>
        string ImageReferencePublisher { get; set; }
        /// <summary>The image SKU</summary>
        string ImageReferenceSku { get; set; }
        /// <summary>The image version specified on creation.</summary>
        string ImageReferenceVersion { get; set; }
        /// <summary>Credentials for the non-admin user on the VM, if one exists.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20211001Preview.ICredentials NonAdminUser { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        string NonAdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        string NonAdminUserUsername { get; set; }
        /// <summary>The OS type of the image</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.OSType? OSType { get; set; }
        /// <summary>The SKU for the lab. Defines the type of virtual machines used in the lab.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.Api20.ISku Sku { get; set; }
        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
        /// resource this may be omitted.
        /// </summary>
        int? SkuCapacity { get; set; }
        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// </summary>
        string SkuFamily { get; set; }
        /// <summary>The name of the SKU. Ex - P3. It is typically a letter+number code</summary>
        string SkuName { get; set; }
        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// </summary>
        string SkuSize { get; set; }
        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
        /// on a PUT.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.SkuTier? SkuTier { get; set; }
        /// <summary>
        /// The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        /// </summary>
        global::System.TimeSpan UsageQuota { get; set; }
        /// <summary>Enabling this option will use the same password for all user VMs.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Support.EnableState? UseSharedPassword { get; set; }

    }
}