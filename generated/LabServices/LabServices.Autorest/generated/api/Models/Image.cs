// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Extensions;

    /// <summary>Lab services virtual machine image</summary>
    public partial class Image :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImage,
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal,
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IProxyResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ProxyResource();

        /// <summary>The image author.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Author { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Author; }

        /// <summary>The available regions of the image in the shared gallery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> AvailableRegion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).AvailableRegion; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).AvailableRegion = value ?? null /* arrayOf */; }

        /// <summary>A description of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Description; }

        /// <summary>The image display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).DisplayName; }

        /// <summary>Is the image enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string EnabledState { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageUpdatePropertiesInternal)Property).EnabledState; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageUpdatePropertiesInternal)Property).EnabledState = value ?? null; }

        /// <summary>URL of the image icon.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string IconUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).IconUrl; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Id; }

        /// <summary>Internal Acessors for Author</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Author { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Author; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Author = value ?? null; }

        /// <summary>Internal Acessors for Description</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Description { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Description; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Description = value ?? null; }

        /// <summary>Internal Acessors for DisplayName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.DisplayName { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).DisplayName; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).DisplayName = value ?? null; }

        /// <summary>Internal Acessors for IconUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.IconUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).IconUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).IconUrl = value ?? null; }

        /// <summary>Internal Acessors for OSState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.OSState { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).OSState; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).OSState = value ?? null; }

        /// <summary>Internal Acessors for OSType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.OSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).OSType = value ?? null; }

        /// <summary>Internal Acessors for Offer</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Offer { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Offer; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Offer = value ?? null; }

        /// <summary>Internal Acessors for Plan</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Plan { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Plan; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Plan = value ?? null; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageProperties Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ImageProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for Publisher</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Publisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Publisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Publisher = value ?? null; }

        /// <summary>Internal Acessors for SharedGalleryId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SharedGalleryId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).SharedGalleryId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).SharedGalleryId = value ?? null; }

        /// <summary>Internal Acessors for Sku</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Sku = value ?? null; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.SystemData()); set { {_systemData = value;} } }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedByType = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedByType = value ?? null; }

        /// <summary>Internal Acessors for TermsStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.TermsStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).TermsStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).TermsStatus = value ?? null; }

        /// <summary>Internal Acessors for Version</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageInternal.Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Version; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Version = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Id = value ?? null; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Name = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Type = value ?? null; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Name; }

        /// <summary>The OS State of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string OSState { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).OSState; }

        /// <summary>The OS Type of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string OSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).OSType; }

        /// <summary>The ID of an offer associated with the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Offer { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Offer; }

        /// <summary>The ID of marketplace plan associated with the image (optional).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Plan { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Plan; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageProperties _property;

        /// <summary>Image resource properties</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ImageProperties()); set => this._property = value; }

        /// <summary>Current provisioning state of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).ProvisioningState; }

        /// <summary>The ID of the publisher of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Publisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Publisher; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>The ID for the image in the shared gallery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SharedGalleryId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).SharedGalleryId; }

        /// <summary>The image SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Sku { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Sku; }

        /// <summary>Backing field for <see cref="SystemData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemData _systemData;

        /// <summary>Metadata pertaining to creation and last modification of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemData SystemData { get => (this._systemData = this._systemData ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.SystemData()); }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).CreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemDataInternal)SystemData).LastModifiedByType; }

        /// <summary>The status of image terms of use (enabled = accepted, disabled = not accepted).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string TermsStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).TermsStatus; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IResourceInternal)__proxyResource).Type; }

        /// <summary>The image version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string Version { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImagePropertiesInternal)Property).Version; }

        /// <summary>Creates an new <see cref="Image" /> instance.</summary>
        public Image()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }
    }
    /// Lab services virtual machine image
    public partial interface IImage :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IProxyResource
    {
        /// <summary>The image author.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The image author.",
        SerializedName = @"author",
        PossibleTypes = new [] { typeof(string) })]
        string Author { get;  }
        /// <summary>The available regions of the image in the shared gallery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The available regions of the image in the shared gallery.",
        SerializedName = @"availableRegions",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> AvailableRegion { get; set; }
        /// <summary>A description of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A description of the image.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get;  }
        /// <summary>The image display name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The image display name.",
        SerializedName = @"displayName",
        PossibleTypes = new [] { typeof(string) })]
        string DisplayName { get;  }
        /// <summary>Is the image enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Is the image enabled",
        SerializedName = @"enabledState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EnabledState { get; set; }
        /// <summary>URL of the image icon.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"URL of the image icon.",
        SerializedName = @"iconUrl",
        PossibleTypes = new [] { typeof(string) })]
        string IconUrl { get;  }
        /// <summary>The OS State of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The OS State of the image.",
        SerializedName = @"osState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Generalized", "Specialized")]
        string OSState { get;  }
        /// <summary>The OS Type of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The OS Type of the image.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Windows", "Linux")]
        string OSType { get;  }
        /// <summary>The ID of an offer associated with the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of an offer associated with the image.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string Offer { get;  }
        /// <summary>The ID of marketplace plan associated with the image (optional).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of marketplace plan associated with the image (optional).",
        SerializedName = @"plan",
        PossibleTypes = new [] { typeof(string) })]
        string Plan { get;  }
        /// <summary>Current provisioning state of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Current provisioning state of the image.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked")]
        string ProvisioningState { get;  }
        /// <summary>The ID of the publisher of the image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID of the publisher of the image.",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string Publisher { get;  }
        /// <summary>The ID for the image in the shared gallery.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The ID for the image in the shared gallery.",
        SerializedName = @"sharedGalleryId",
        PossibleTypes = new [] { typeof(string) })]
        string SharedGalleryId { get;  }
        /// <summary>The image SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The image SKU.",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string Sku { get;  }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp of resource creation (UTC).",
        SerializedName = @"createdAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataCreatedAt { get;  }
        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The identity that created the resource.",
        SerializedName = @"createdBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataCreatedBy { get;  }
        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The type of identity that created the resource.",
        SerializedName = @"createdByType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataCreatedByType { get;  }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp of resource last modification (UTC)",
        SerializedName = @"lastModifiedAt",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? SystemDataLastModifiedAt { get;  }
        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The identity that last modified the resource.",
        SerializedName = @"lastModifiedBy",
        PossibleTypes = new [] { typeof(string) })]
        string SystemDataLastModifiedBy { get;  }
        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The type of identity that last modified the resource.",
        SerializedName = @"lastModifiedByType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataLastModifiedByType { get;  }
        /// <summary>The status of image terms of use (enabled = accepted, disabled = not accepted).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The status of image terms of use (enabled = accepted, disabled = not accepted).",
        SerializedName = @"termsStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string TermsStatus { get;  }
        /// <summary>The image version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The image version.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get;  }

    }
    /// Lab services virtual machine image
    internal partial interface IImageInternal :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IProxyResourceInternal
    {
        /// <summary>The image author.</summary>
        string Author { get; set; }
        /// <summary>The available regions of the image in the shared gallery.</summary>
        System.Collections.Generic.List<string> AvailableRegion { get; set; }
        /// <summary>A description of the image.</summary>
        string Description { get; set; }
        /// <summary>The image display name.</summary>
        string DisplayName { get; set; }
        /// <summary>Is the image enabled</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EnabledState { get; set; }
        /// <summary>URL of the image icon.</summary>
        string IconUrl { get; set; }
        /// <summary>The OS State of the image.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Generalized", "Specialized")]
        string OSState { get; set; }
        /// <summary>The OS Type of the image.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Windows", "Linux")]
        string OSType { get; set; }
        /// <summary>The ID of an offer associated with the image.</summary>
        string Offer { get; set; }
        /// <summary>The ID of marketplace plan associated with the image (optional).</summary>
        string Plan { get; set; }
        /// <summary>Image resource properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageProperties Property { get; set; }
        /// <summary>Current provisioning state of the image.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Creating", "Updating", "Deleting", "Succeeded", "Failed", "Locked")]
        string ProvisioningState { get; set; }
        /// <summary>The ID of the publisher of the image.</summary>
        string Publisher { get; set; }
        /// <summary>The ID for the image in the shared gallery.</summary>
        string SharedGalleryId { get; set; }
        /// <summary>The image SKU.</summary>
        string Sku { get; set; }
        /// <summary>Metadata pertaining to creation and last modification of the image.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISystemData SystemData { get; set; }
        /// <summary>The timestamp of resource creation (UTC).</summary>
        global::System.DateTime? SystemDataCreatedAt { get; set; }
        /// <summary>The identity that created the resource.</summary>
        string SystemDataCreatedBy { get; set; }
        /// <summary>The type of identity that created the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataCreatedByType { get; set; }
        /// <summary>The timestamp of resource last modification (UTC)</summary>
        global::System.DateTime? SystemDataLastModifiedAt { get; set; }
        /// <summary>The identity that last modified the resource.</summary>
        string SystemDataLastModifiedBy { get; set; }
        /// <summary>The type of identity that last modified the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("User", "Application", "ManagedIdentity", "Key")]
        string SystemDataLastModifiedByType { get; set; }
        /// <summary>The status of image terms of use (enabled = accepted, disabled = not accepted).</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string TermsStatus { get; set; }
        /// <summary>The image version.</summary>
        string Version { get; set; }

    }
}