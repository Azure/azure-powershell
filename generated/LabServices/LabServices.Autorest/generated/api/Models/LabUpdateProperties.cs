// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Extensions;

    /// <summary>Properties of a lab resource used for updates.</summary>
    public partial class LabUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal
    {

        /// <summary>Flag to pre-install dedicated GPU drivers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AdditionalCapabilityInstallGpuDriver { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdditionalCapabilityInstallGpuDriver; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdditionalCapabilityInstallGpuDriver = value ?? null; }

        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public System.Security.SecureString AdminUserPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdminUserPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdminUserPassword = value ?? null; }

        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AdminUserUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdminUserUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdminUserUsername = value ?? null; }

        /// <summary>Backing field for <see cref="AutoShutdownProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfile _autoShutdownProfile;

        /// <summary>
        /// The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting
        /// idle.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfile AutoShutdownProfile { get => (this._autoShutdownProfile = this._autoShutdownProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.AutoShutdownProfile()); set => this._autoShutdownProfile = value; }

        /// <summary>
        /// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoShutdownProfileDisconnectDelay { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).DisconnectDelay; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).DisconnectDelay = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoShutdownProfileIdleDelay { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).IdleDelay; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).IdleDelay = value ?? default(global::System.TimeSpan); }

        /// <summary>
        /// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? AutoShutdownProfileNoConnectDelay { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).NoConnectDelay; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).NoConnectDelay = value ?? default(global::System.TimeSpan); }

        /// <summary>Whether shutdown on disconnect is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AutoShutdownProfileShutdownOnDisconnect { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnDisconnect; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnDisconnect = value ?? null; }

        /// <summary>Whether a VM will get shutdown when it has idled for a period of time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AutoShutdownProfileShutdownOnIdle { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnIdle; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownOnIdle = value ?? null; }

        /// <summary>
        /// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string AutoShutdownProfileShutdownWhenNotConnected { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownWhenNotConnected; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfileInternal)AutoShutdownProfile).ShutdownWhenNotConnected = value ?? null; }

        /// <summary>Backing field for <see cref="ConnectionProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfile _connectionProfile;

        /// <summary>
        /// The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports
        /// are open.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfile ConnectionProfile { get => (this._connectionProfile = this._connectionProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ConnectionProfile()); set => this._connectionProfile = value; }

        /// <summary>The enabled access level for Client Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ConnectionProfileClientRdpAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).ClientRdpAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).ClientRdpAccess = value ?? null; }

        /// <summary>The enabled access level for Client Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ConnectionProfileClientSshAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).ClientSshAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).ClientSshAccess = value ?? null; }

        /// <summary>The enabled access level for Web Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ConnectionProfileWebRdpAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).WebRdpAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).WebRdpAccess = value ?? null; }

        /// <summary>The enabled access level for Web Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ConnectionProfileWebSshAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).WebSshAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfileInternal)ConnectionProfile).WebSshAccess = value ?? null; }

        /// <summary>Backing field for <see cref="Description" /> property.</summary>
        private string _description;

        /// <summary>The description of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string Description { get => this._description; set => this._description = value; }

        /// <summary>The actual version of the image after use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceExactVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceExactVersion; }

        /// <summary>Image resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceId = value ?? null; }

        /// <summary>The image offer if applicable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceOffer { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceOffer; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceOffer = value ?? null; }

        /// <summary>The image publisher</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferencePublisher { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferencePublisher; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferencePublisher = value ?? null; }

        /// <summary>The image SKU</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceSku = value ?? null; }

        /// <summary>The image version specified on creation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string ImageReferenceVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceVersion = value ?? null; }

        /// <summary>Backing field for <see cref="LabPlanId" /> property.</summary>
        private string _labPlanId;

        /// <summary>
        /// The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating
        /// a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string LabPlanId { get => this._labPlanId; set => this._labPlanId = value; }

        /// <summary>Internal Acessors for AutoShutdownProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.AutoShutdownProfile { get => (this._autoShutdownProfile = this._autoShutdownProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.AutoShutdownProfile()); set { {_autoShutdownProfile = value;} } }

        /// <summary>Internal Acessors for ConnectionProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.ConnectionProfile { get => (this._connectionProfile = this._connectionProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ConnectionProfile()); set { {_connectionProfile = value;} } }

        /// <summary>Internal Acessors for ImageReferenceExactVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.ImageReferenceExactVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceExactVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReferenceExactVersion = value ?? null; }

        /// <summary>Internal Acessors for RosterProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.RosterProfile { get => (this._rosterProfile = this._rosterProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.RosterProfile()); set { {_rosterProfile = value;} } }

        /// <summary>Internal Acessors for SecurityProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.SecurityProfile()); set { {_securityProfile = value;} } }

        /// <summary>Internal Acessors for SecurityProfileRegistrationCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.SecurityProfileRegistrationCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfileInternal)SecurityProfile).RegistrationCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfileInternal)SecurityProfile).RegistrationCode = value ?? null; }

        /// <summary>Internal Acessors for VirtualMachineProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfile Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfile { get => (this._virtualMachineProfile = this._virtualMachineProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.VirtualMachineProfile()); set { {_virtualMachineProfile = value;} } }

        /// <summary>Internal Acessors for VirtualMachineProfileAdditionalCapability</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineAdditionalCapabilities Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfileAdditionalCapability { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdditionalCapability; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdditionalCapability = value ?? null /* model class */; }

        /// <summary>Internal Acessors for VirtualMachineProfileAdminUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ICredentials Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfileAdminUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdminUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).AdminUser = value ?? null /* model class */; }

        /// <summary>Internal Acessors for VirtualMachineProfileImageReference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageReference Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfileImageReference { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReference; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).ImageReference = value ?? null /* model class */; }

        /// <summary>Internal Acessors for VirtualMachineProfileNonAdminUser</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ICredentials Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfileNonAdminUser { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).NonAdminUser; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).NonAdminUser = value ?? null /* model class */; }

        /// <summary>Internal Acessors for VirtualMachineProfileOSType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfileOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).OSType = value ?? null; }

        /// <summary>Internal Acessors for VirtualMachineProfileSku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISku Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ILabUpdatePropertiesInternal.VirtualMachineProfileSku { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).Sku; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).Sku = value ?? null /* model class */; }

        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public System.Security.SecureString NonAdminUserPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).NonAdminUserPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).NonAdminUserPassword = value ?? null; }

        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string NonAdminUserUsername { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).NonAdminUserUsername; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).NonAdminUserUsername = value ?? null; }

        /// <summary>Backing field for <see cref="RosterProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfile _rosterProfile;

        /// <summary>The lab user list management profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfile RosterProfile { get => (this._rosterProfile = this._rosterProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.RosterProfile()); set => this._rosterProfile = value; }

        /// <summary>
        /// The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileActiveDirectoryGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).ActiveDirectoryGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).ActiveDirectoryGroupId = value ?? null; }

        /// <summary>The base URI identifying the lms instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLmsInstance { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LmsInstance; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LmsInstance = value ?? null; }

        /// <summary>The unique id of the azure lab services tool in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLtiClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LtiClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LtiClientId = value ?? null; }

        /// <summary>The unique context identifier for the lab in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLtiContextId { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LtiContextId; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LtiContextId = value ?? null; }

        /// <summary>
        /// The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string RosterProfileLtiRosterEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LtiRosterEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfileInternal)RosterProfile).LtiRosterEndpoint = value ?? null; }

        /// <summary>Backing field for <see cref="SecurityProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfile _securityProfile;

        /// <summary>The lab security profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfile SecurityProfile { get => (this._securityProfile = this._securityProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.SecurityProfile()); set => this._securityProfile = value; }

        /// <summary>Whether any user or only specified users can register to a lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SecurityProfileOpenAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfileInternal)SecurityProfile).OpenAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfileInternal)SecurityProfile).OpenAccess = value ?? null; }

        /// <summary>The registration code for the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SecurityProfileRegistrationCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfileInternal)SecurityProfile).RegistrationCode; }

        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
        /// resource this may be omitted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public int? SkuCapacity { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuCapacity; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuCapacity = value ?? default(int); }

        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuFamily { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuFamily; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuFamily = value ?? null; }

        /// <summary>The name of the SKU. Ex - P3. It is typically a letter+number code</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuName = value ?? null; }

        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuSize = value ?? null; }

        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
        /// on a PUT.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).SkuTier = value ?? null; }

        /// <summary>Backing field for <see cref="Title" /> property.</summary>
        private string _title;

        /// <summary>The title of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        public string Title { get => this._title; set => this._title = value; }

        /// <summary>Backing field for <see cref="VirtualMachineProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfile _virtualMachineProfile;

        /// <summary>The profile used for creating lab virtual machines.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfile VirtualMachineProfile { get => (this._virtualMachineProfile = this._virtualMachineProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.VirtualMachineProfile()); set => this._virtualMachineProfile = value; }

        /// <summary>Indicates what lab virtual machines are created from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string VirtualMachineProfileCreateOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).CreateOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).CreateOption = value ?? null; }

        /// <summary>The OS type of the image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string VirtualMachineProfileOSType { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).OSType; }

        /// <summary>
        /// The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public global::System.TimeSpan? VirtualMachineProfileUsageQuota { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).UsageQuota; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).UsageQuota = value ?? default(global::System.TimeSpan); }

        /// <summary>Enabling this option will use the same password for all user VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Origin(Microsoft.Azure.PowerShell.Cmdlets.LabServices.PropertyOrigin.Inlined)]
        public string VirtualMachineProfileUseSharedPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).UseSharedPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfileInternal)VirtualMachineProfile).UseSharedPassword = value ?? null; }

        /// <summary>Creates an new <see cref="LabUpdateProperties" /> instance.</summary>
        public LabUpdateProperties()
        {

        }
    }
    /// Properties of a lab resource used for updates.
    public partial interface ILabUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.IJsonSerializable
    {
        /// <summary>Flag to pre-install dedicated GPU drivers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Flag to pre-install dedicated GPU drivers.",
        SerializedName = @"installGpuDrivers",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string AdditionalCapabilityInstallGpuDriver { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = true,
        Description = @"The password for the user. This is required for the TemplateVM createOption.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The username to use when signing in to lab VMs.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string AdminUserUsername { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The amount of time a VM will stay running after a user disconnects if this behavior is enabled.",
        SerializedName = @"disconnectDelay",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoShutdownProfileDisconnectDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The amount of time a VM will idle before it is shutdown if this behavior is enabled.",
        SerializedName = @"idleDelay",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoShutdownProfileIdleDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.",
        SerializedName = @"noConnectDelay",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? AutoShutdownProfileNoConnectDelay { get; set; }
        /// <summary>Whether shutdown on disconnect is enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether shutdown on disconnect is enabled",
        SerializedName = @"shutdownOnDisconnect",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string AutoShutdownProfileShutdownOnDisconnect { get; set; }
        /// <summary>Whether a VM will get shutdown when it has idled for a period of time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether a VM will get shutdown when it has idled for a period of time.",
        SerializedName = @"shutdownOnIdle",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("None", "UserAbsence", "LowUsage")]
        string AutoShutdownProfileShutdownOnIdle { get; set; }
        /// <summary>
        /// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether a VM will get shutdown when it hasn't been connected to after a period of time.",
        SerializedName = @"shutdownWhenNotConnected",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string AutoShutdownProfileShutdownWhenNotConnected { get; set; }
        /// <summary>The enabled access level for Client Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The enabled access level for Client Access over RDP.",
        SerializedName = @"clientRdpAccess",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileClientRdpAccess { get; set; }
        /// <summary>The enabled access level for Client Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The enabled access level for Client Access over SSH.",
        SerializedName = @"clientSshAccess",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileClientSshAccess { get; set; }
        /// <summary>The enabled access level for Web Access over RDP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The enabled access level for Web Access over RDP.",
        SerializedName = @"webRdpAccess",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileWebRdpAccess { get; set; }
        /// <summary>The enabled access level for Web Access over SSH.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The enabled access level for Web Access over SSH.",
        SerializedName = @"webSshAccess",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileWebSshAccess { get; set; }
        /// <summary>The description of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The description of the lab.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string Description { get; set; }
        /// <summary>The actual version of the image after use.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The actual version of the image after use.",
        SerializedName = @"exactVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceExactVersion { get;  }
        /// <summary>Image resource ID</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Image resource ID",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceId { get; set; }
        /// <summary>The image offer if applicable.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The image offer if applicable.",
        SerializedName = @"offer",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceOffer { get; set; }
        /// <summary>The image publisher</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The image publisher",
        SerializedName = @"publisher",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferencePublisher { get; set; }
        /// <summary>The image SKU</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The image SKU",
        SerializedName = @"sku",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceSku { get; set; }
        /// <summary>The image version specified on creation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The image version specified on creation.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string ImageReferenceVersion { get; set; }
        /// <summary>
        /// The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating
        /// a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..",
        SerializedName = @"labPlanId",
        PossibleTypes = new [] { typeof(string) })]
        string LabPlanId { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = true,
        Description = @"The password for the user. This is required for the TemplateVM createOption.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString NonAdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The username to use when signing in to lab VMs.",
        SerializedName = @"username",
        PossibleTypes = new [] { typeof(string) })]
        string NonAdminUserUsername { get; set; }
        /// <summary>
        /// The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.",
        SerializedName = @"activeDirectoryGroupId",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileActiveDirectoryGroupId { get; set; }
        /// <summary>The base URI identifying the lms instance.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The base URI identifying the lms instance.",
        SerializedName = @"lmsInstance",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLmsInstance { get; set; }
        /// <summary>The unique id of the azure lab services tool in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The unique id of the azure lab services tool in the lms.",
        SerializedName = @"ltiClientId",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLtiClientId { get; set; }
        /// <summary>The unique context identifier for the lab in the lms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The unique context identifier for the lab in the lms.",
        SerializedName = @"ltiContextId",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLtiContextId { get; set; }
        /// <summary>
        /// The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The uri of the names and roles service endpoint on the lms for the class attached to this lab.",
        SerializedName = @"ltiRosterEndpoint",
        PossibleTypes = new [] { typeof(string) })]
        string RosterProfileLtiRosterEndpoint { get; set; }
        /// <summary>Whether any user or only specified users can register to a lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether any user or only specified users can register to a lab.",
        SerializedName = @"openAccess",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string SecurityProfileOpenAccess { get; set; }
        /// <summary>The registration code for the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The registration code for the lab.",
        SerializedName = @"registrationCode",
        PossibleTypes = new [] { typeof(string) })]
        string SecurityProfileRegistrationCode { get;  }
        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
        /// resource this may be omitted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the resource this may be omitted.",
        SerializedName = @"capacity",
        PossibleTypes = new [] { typeof(int) })]
        int? SkuCapacity { get; set; }
        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"If the service has different generations of hardware, for the same SKU, then that can be captured here.",
        SerializedName = @"family",
        PossibleTypes = new [] { typeof(string) })]
        string SkuFamily { get; set; }
        /// <summary>The name of the SKU. Ex - P3. It is typically a letter+number code</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The name of the SKU. Ex - P3. It is typically a letter+number code",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string SkuName { get; set; }
        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code. ",
        SerializedName = @"size",
        PossibleTypes = new [] { typeof(string) })]
        string SkuSize { get; set; }
        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
        /// on a PUT.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required on a PUT.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Free", "Basic", "Standard", "Premium")]
        string SkuTier { get; set; }
        /// <summary>The title of the lab.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The title of the lab.",
        SerializedName = @"title",
        PossibleTypes = new [] { typeof(string) })]
        string Title { get; set; }
        /// <summary>Indicates what lab virtual machines are created from.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Indicates what lab virtual machines are created from.",
        SerializedName = @"createOption",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Image", "TemplateVM")]
        string VirtualMachineProfileCreateOption { get; set; }
        /// <summary>The OS type of the image</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The OS type of the image",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Windows", "Linux")]
        string VirtualMachineProfileOSType { get;  }
        /// <summary>
        /// The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.",
        SerializedName = @"usageQuota",
        PossibleTypes = new [] { typeof(global::System.TimeSpan) })]
        global::System.TimeSpan? VirtualMachineProfileUsageQuota { get; set; }
        /// <summary>Enabling this option will use the same password for all user VMs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.LabServices.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Enabling this option will use the same password for all user VMs.",
        SerializedName = @"useSharedPassword",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string VirtualMachineProfileUseSharedPassword { get; set; }

    }
    /// Properties of a lab resource used for updates.
    internal partial interface ILabUpdatePropertiesInternal

    {
        /// <summary>Flag to pre-install dedicated GPU drivers.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string AdditionalCapabilityInstallGpuDriver { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        System.Security.SecureString AdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        string AdminUserUsername { get; set; }
        /// <summary>
        /// The resource auto shutdown configuration for the lab. This controls whether actions are taken on resources that are sitting
        /// idle.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IAutoShutdownProfile AutoShutdownProfile { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running after a user disconnects if this behavior is enabled.
        /// </summary>
        global::System.TimeSpan? AutoShutdownProfileDisconnectDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will idle before it is shutdown if this behavior is enabled.
        /// </summary>
        global::System.TimeSpan? AutoShutdownProfileIdleDelay { get; set; }
        /// <summary>
        /// The amount of time a VM will stay running before it is shutdown if no connection is made and this behavior is enabled.
        /// </summary>
        global::System.TimeSpan? AutoShutdownProfileNoConnectDelay { get; set; }
        /// <summary>Whether shutdown on disconnect is enabled</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string AutoShutdownProfileShutdownOnDisconnect { get; set; }
        /// <summary>Whether a VM will get shutdown when it has idled for a period of time.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("None", "UserAbsence", "LowUsage")]
        string AutoShutdownProfileShutdownOnIdle { get; set; }
        /// <summary>
        /// Whether a VM will get shutdown when it hasn't been connected to after a period of time.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string AutoShutdownProfileShutdownWhenNotConnected { get; set; }
        /// <summary>
        /// The connection profile for the lab. This controls settings such as web access to lab resources or whether RDP or SSH ports
        /// are open.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IConnectionProfile ConnectionProfile { get; set; }
        /// <summary>The enabled access level for Client Access over RDP.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileClientRdpAccess { get; set; }
        /// <summary>The enabled access level for Client Access over SSH.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileClientSshAccess { get; set; }
        /// <summary>The enabled access level for Web Access over RDP.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileWebRdpAccess { get; set; }
        /// <summary>The enabled access level for Web Access over SSH.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Public", "Private", "None")]
        string ConnectionProfileWebSshAccess { get; set; }
        /// <summary>The description of the lab.</summary>
        string Description { get; set; }
        /// <summary>The actual version of the image after use.</summary>
        string ImageReferenceExactVersion { get; set; }
        /// <summary>Image resource ID</summary>
        string ImageReferenceId { get; set; }
        /// <summary>The image offer if applicable.</summary>
        string ImageReferenceOffer { get; set; }
        /// <summary>The image publisher</summary>
        string ImageReferencePublisher { get; set; }
        /// <summary>The image SKU</summary>
        string ImageReferenceSku { get; set; }
        /// <summary>The image version specified on creation.</summary>
        string ImageReferenceVersion { get; set; }
        /// <summary>
        /// The ID of the lab plan. Used during resource creation to provide defaults and acts as a permission container when creating
        /// a lab via labs.azure.com. Setting a labPlanId on an existing lab provides organization..
        /// </summary>
        string LabPlanId { get; set; }
        /// <summary>The password for the user. This is required for the TemplateVM createOption.</summary>
        System.Security.SecureString NonAdminUserPassword { get; set; }
        /// <summary>The username to use when signing in to lab VMs.</summary>
        string NonAdminUserUsername { get; set; }
        /// <summary>The lab user list management profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IRosterProfile RosterProfile { get; set; }
        /// <summary>
        /// The AAD group ID which this lab roster is populated from. Having this set enables AAD sync mode.
        /// </summary>
        string RosterProfileActiveDirectoryGroupId { get; set; }
        /// <summary>The base URI identifying the lms instance.</summary>
        string RosterProfileLmsInstance { get; set; }
        /// <summary>The unique id of the azure lab services tool in the lms.</summary>
        string RosterProfileLtiClientId { get; set; }
        /// <summary>The unique context identifier for the lab in the lms.</summary>
        string RosterProfileLtiContextId { get; set; }
        /// <summary>
        /// The uri of the names and roles service endpoint on the lms for the class attached to this lab.
        /// </summary>
        string RosterProfileLtiRosterEndpoint { get; set; }
        /// <summary>The lab security profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISecurityProfile SecurityProfile { get; set; }
        /// <summary>Whether any user or only specified users can register to a lab.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string SecurityProfileOpenAccess { get; set; }
        /// <summary>The registration code for the lab.</summary>
        string SecurityProfileRegistrationCode { get; set; }
        /// <summary>
        /// If the SKU supports scale out/in then the capacity integer should be included. If scale out/in is not possible for the
        /// resource this may be omitted.
        /// </summary>
        int? SkuCapacity { get; set; }
        /// <summary>
        /// If the service has different generations of hardware, for the same SKU, then that can be captured here.
        /// </summary>
        string SkuFamily { get; set; }
        /// <summary>The name of the SKU. Ex - P3. It is typically a letter+number code</summary>
        string SkuName { get; set; }
        /// <summary>
        /// The SKU size. When the name field is the combination of tier and some other value, this would be the standalone code.
        /// </summary>
        string SkuSize { get; set; }
        /// <summary>
        /// This field is required to be implemented by the Resource Provider if the service has more than one tier, but is not required
        /// on a PUT.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Free", "Basic", "Standard", "Premium")]
        string SkuTier { get; set; }
        /// <summary>The title of the lab.</summary>
        string Title { get; set; }
        /// <summary>The profile used for creating lab virtual machines.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineProfile VirtualMachineProfile { get; set; }
        /// <summary>Additional VM capabilities.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IVirtualMachineAdditionalCapabilities VirtualMachineProfileAdditionalCapability { get; set; }
        /// <summary>Credentials for the admin user on the VM.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ICredentials VirtualMachineProfileAdminUser { get; set; }
        /// <summary>Indicates what lab virtual machines are created from.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Image", "TemplateVM")]
        string VirtualMachineProfileCreateOption { get; set; }
        /// <summary>The image configuration for lab virtual machines.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.IImageReference VirtualMachineProfileImageReference { get; set; }
        /// <summary>Credentials for the non-admin user on the VM, if one exists.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ICredentials VirtualMachineProfileNonAdminUser { get; set; }
        /// <summary>The OS type of the image</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Windows", "Linux")]
        string VirtualMachineProfileOSType { get; set; }
        /// <summary>The SKU for the lab. Defines the type of virtual machines used in the lab.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.LabServices.Models.ISku VirtualMachineProfileSku { get; set; }
        /// <summary>
        /// The initial quota alloted to each lab user. Must be a time span between 0 and 9999 hours.
        /// </summary>
        global::System.TimeSpan? VirtualMachineProfileUsageQuota { get; set; }
        /// <summary>Enabling this option will use the same password for all user VMs.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.LabServices.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string VirtualMachineProfileUseSharedPassword { get; set; }

    }
}