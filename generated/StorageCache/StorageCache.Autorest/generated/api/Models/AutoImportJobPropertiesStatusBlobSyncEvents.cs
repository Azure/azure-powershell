// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>The storage account blob change feed status of the auto import job.</summary>
    public partial class AutoImportJobPropertiesStatusBlobSyncEvents :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal
    {

        /// <summary>Backing field for <see cref="Deletion" /> property.</summary>
        private long? _deletion;

        /// <summary>Number of deletions during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? Deletion { get => this._deletion; }

        /// <summary>Backing field for <see cref="ImportedDirectory" /> property.</summary>
        private long? _importedDirectory;

        /// <summary>Number of directories imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedDirectory { get => this._importedDirectory; }

        /// <summary>Backing field for <see cref="ImportedFile" /> property.</summary>
        private long? _importedFile;

        /// <summary>Number of files imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedFile { get => this._importedFile; }

        /// <summary>Backing field for <see cref="ImportedSymlink" /> property.</summary>
        private long? _importedSymlink;

        /// <summary>Number of symlinks imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedSymlink { get => this._importedSymlink; }

        /// <summary>Backing field for <see cref="LastChangeFeedEventConsumedTime" /> property.</summary>
        private global::System.DateTime? _lastChangeFeedEventConsumedTime;

        /// <summary>Date and time of the last Change Feed event consumed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? LastChangeFeedEventConsumedTime { get => this._lastChangeFeedEventConsumedTime; }

        /// <summary>Backing field for <see cref="LastTimeFullySynchronized" /> property.</summary>
        private global::System.DateTime? _lastTimeFullySynchronized;

        /// <summary>Date and time when last fully synchronized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? LastTimeFullySynchronized { get => this._lastTimeFullySynchronized; }

        /// <summary>Internal Acessors for Deletion</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.Deletion { get => this._deletion; set { {_deletion = value;} } }

        /// <summary>Internal Acessors for ImportedDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.ImportedDirectory { get => this._importedDirectory; set { {_importedDirectory = value;} } }

        /// <summary>Internal Acessors for ImportedFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.ImportedFile { get => this._importedFile; set { {_importedFile = value;} } }

        /// <summary>Internal Acessors for ImportedSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.ImportedSymlink { get => this._importedSymlink; set { {_importedSymlink = value;} } }

        /// <summary>Internal Acessors for LastChangeFeedEventConsumedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.LastChangeFeedEventConsumedTime { get => this._lastChangeFeedEventConsumedTime; set { {_lastChangeFeedEventConsumedTime = value;} } }

        /// <summary>Internal Acessors for LastTimeFullySynchronized</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.LastTimeFullySynchronized { get => this._lastTimeFullySynchronized; set { {_lastTimeFullySynchronized = value;} } }

        /// <summary>Internal Acessors for PreexistingDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.PreexistingDirectory { get => this._preexistingDirectory; set { {_preexistingDirectory = value;} } }

        /// <summary>Internal Acessors for PreexistingFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.PreexistingFile { get => this._preexistingFile; set { {_preexistingFile = value;} } }

        /// <summary>Internal Acessors for PreexistingSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.PreexistingSymlink { get => this._preexistingSymlink; set { {_preexistingSymlink = value;} } }

        /// <summary>Internal Acessors for RateOfBlobImport</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.RateOfBlobImport { get => this._rateOfBlobImport; set { {_rateOfBlobImport = value;} } }

        /// <summary>Internal Acessors for TotalBlobsImported</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.TotalBlobsImported { get => this._totalBlobsImported; set { {_totalBlobsImported = value;} } }

        /// <summary>Internal Acessors for TotalConflict</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.TotalConflict { get => this._totalConflict; set { {_totalConflict = value;} } }

        /// <summary>Internal Acessors for TotalError</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal.TotalError { get => this._totalError; set { {_totalError = value;} } }

        /// <summary>Backing field for <see cref="PreexistingDirectory" /> property.</summary>
        private long? _preexistingDirectory;

        /// <summary>Number of preexisting directories during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingDirectory { get => this._preexistingDirectory; }

        /// <summary>Backing field for <see cref="PreexistingFile" /> property.</summary>
        private long? _preexistingFile;

        /// <summary>Number of preexisting files during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingFile { get => this._preexistingFile; }

        /// <summary>Backing field for <see cref="PreexistingSymlink" /> property.</summary>
        private long? _preexistingSymlink;

        /// <summary>Number of preexisting symlinks during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingSymlink { get => this._preexistingSymlink; }

        /// <summary>Backing field for <see cref="RateOfBlobImport" /> property.</summary>
        private long? _rateOfBlobImport;

        /// <summary>Rate of blob import per second during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? RateOfBlobImport { get => this._rateOfBlobImport; }

        /// <summary>Backing field for <see cref="TotalBlobsImported" /> property.</summary>
        private long? _totalBlobsImported;

        /// <summary>Total number of blobs imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalBlobsImported { get => this._totalBlobsImported; }

        /// <summary>Backing field for <see cref="TotalConflict" /> property.</summary>
        private long? _totalConflict;

        /// <summary>Total conflicts encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalConflict { get => this._totalConflict; }

        /// <summary>Backing field for <see cref="TotalError" /> property.</summary>
        private long? _totalError;

        /// <summary>Total errors encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalError { get => this._totalError; }

        /// <summary>
        /// Creates an new <see cref="AutoImportJobPropertiesStatusBlobSyncEvents" /> instance.
        /// </summary>
        public AutoImportJobPropertiesStatusBlobSyncEvents()
        {

        }
    }
    /// The storage account blob change feed status of the auto import job.
    public partial interface IAutoImportJobPropertiesStatusBlobSyncEvents :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>Number of deletions during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of deletions during auto import.",
        SerializedName = @"deletions",
        PossibleTypes = new [] { typeof(long) })]
        long? Deletion { get;  }
        /// <summary>Number of directories imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of directories imported during auto import.",
        SerializedName = @"importedDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedDirectory { get;  }
        /// <summary>Number of files imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of files imported during auto import.",
        SerializedName = @"importedFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedFile { get;  }
        /// <summary>Number of symlinks imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of symlinks imported during auto import.",
        SerializedName = @"importedSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedSymlink { get;  }
        /// <summary>Date and time of the last Change Feed event consumed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Date and time of the last Change Feed event consumed.",
        SerializedName = @"lastChangeFeedEventConsumedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastChangeFeedEventConsumedTime { get;  }
        /// <summary>Date and time when last fully synchronized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Date and time when last fully synchronized.",
        SerializedName = @"lastTimeFullySynchronized",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastTimeFullySynchronized { get;  }
        /// <summary>Number of preexisting directories during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting directories during auto import.",
        SerializedName = @"preexistingDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingDirectory { get;  }
        /// <summary>Number of preexisting files during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting files during auto import.",
        SerializedName = @"preexistingFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingFile { get;  }
        /// <summary>Number of preexisting symlinks during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting symlinks during auto import.",
        SerializedName = @"preexistingSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingSymlink { get;  }
        /// <summary>Rate of blob import per second during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Rate of blob import per second during auto import.",
        SerializedName = @"rateOfBlobImport",
        PossibleTypes = new [] { typeof(long) })]
        long? RateOfBlobImport { get;  }
        /// <summary>Total number of blobs imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total number of blobs imported during auto import.",
        SerializedName = @"totalBlobsImported",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBlobsImported { get;  }
        /// <summary>Total conflicts encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total conflicts encountered during auto import.",
        SerializedName = @"totalConflicts",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalConflict { get;  }
        /// <summary>Total errors encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total errors encountered during auto import.",
        SerializedName = @"totalErrors",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalError { get;  }

    }
    /// The storage account blob change feed status of the auto import job.
    internal partial interface IAutoImportJobPropertiesStatusBlobSyncEventsInternal

    {
        /// <summary>Number of deletions during auto import.</summary>
        long? Deletion { get; set; }
        /// <summary>Number of directories imported during auto import.</summary>
        long? ImportedDirectory { get; set; }
        /// <summary>Number of files imported during auto import.</summary>
        long? ImportedFile { get; set; }
        /// <summary>Number of symlinks imported during auto import.</summary>
        long? ImportedSymlink { get; set; }
        /// <summary>Date and time of the last Change Feed event consumed.</summary>
        global::System.DateTime? LastChangeFeedEventConsumedTime { get; set; }
        /// <summary>Date and time when last fully synchronized.</summary>
        global::System.DateTime? LastTimeFullySynchronized { get; set; }
        /// <summary>Number of preexisting directories during auto import.</summary>
        long? PreexistingDirectory { get; set; }
        /// <summary>Number of preexisting files during auto import.</summary>
        long? PreexistingFile { get; set; }
        /// <summary>Number of preexisting symlinks during auto import.</summary>
        long? PreexistingSymlink { get; set; }
        /// <summary>Rate of blob import per second during auto import.</summary>
        long? RateOfBlobImport { get; set; }
        /// <summary>Total number of blobs imported during auto import.</summary>
        long? TotalBlobsImported { get; set; }
        /// <summary>Total conflicts encountered during auto import.</summary>
        long? TotalConflict { get; set; }
        /// <summary>Total errors encountered during auto import.</summary>
        long? TotalError { get; set; }

    }
}