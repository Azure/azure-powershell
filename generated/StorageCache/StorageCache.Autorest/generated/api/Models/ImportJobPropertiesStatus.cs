// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>The status of the import</summary>
    public partial class ImportJobPropertiesStatus :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatus,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal
    {

        /// <summary>Backing field for <see cref="BlobsImportedPerSecond" /> property.</summary>
        private long? _blobsImportedPerSecond;

        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? BlobsImportedPerSecond { get => this._blobsImportedPerSecond; }

        /// <summary>Backing field for <see cref="BlobsWalkedPerSecond" /> property.</summary>
        private long? _blobsWalkedPerSecond;

        /// <summary>A recent and frequently updated rate of blobs walked per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? BlobsWalkedPerSecond { get => this._blobsWalkedPerSecond; }

        /// <summary>Backing field for <see cref="ImportedDirectory" /> property.</summary>
        private long? _importedDirectory;

        /// <summary>New or modified directories that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedDirectory { get => this._importedDirectory; }

        /// <summary>Backing field for <see cref="ImportedFile" /> property.</summary>
        private long? _importedFile;

        /// <summary>New or modified files that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedFile { get => this._importedFile; }

        /// <summary>Backing field for <see cref="ImportedSymlink" /> property.</summary>
        private long? _importedSymlink;

        /// <summary>Newly added symbolic links into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedSymlink { get => this._importedSymlink; }

        /// <summary>Backing field for <see cref="LastCompletionTime" /> property.</summary>
        private global::System.DateTime? _lastCompletionTime;

        /// <summary>The time (in UTC) of the last completed import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? LastCompletionTime { get => this._lastCompletionTime; }

        /// <summary>Backing field for <see cref="LastStartedTime" /> property.</summary>
        private global::System.DateTime? _lastStartedTime;

        /// <summary>The time (in UTC) the latest import job started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? LastStartedTime { get => this._lastStartedTime; }

        /// <summary>Internal Acessors for BlobsImportedPerSecond</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.BlobsImportedPerSecond { get => this._blobsImportedPerSecond; set { {_blobsImportedPerSecond = value;} } }

        /// <summary>Internal Acessors for BlobsWalkedPerSecond</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.BlobsWalkedPerSecond { get => this._blobsWalkedPerSecond; set { {_blobsWalkedPerSecond = value;} } }

        /// <summary>Internal Acessors for ImportedDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.ImportedDirectory { get => this._importedDirectory; set { {_importedDirectory = value;} } }

        /// <summary>Internal Acessors for ImportedFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.ImportedFile { get => this._importedFile; set { {_importedFile = value;} } }

        /// <summary>Internal Acessors for ImportedSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.ImportedSymlink { get => this._importedSymlink; set { {_importedSymlink = value;} } }

        /// <summary>Internal Acessors for LastCompletionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.LastCompletionTime { get => this._lastCompletionTime; set { {_lastCompletionTime = value;} } }

        /// <summary>Internal Acessors for LastStartedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.LastStartedTime { get => this._lastStartedTime; set { {_lastStartedTime = value;} } }

        /// <summary>Internal Acessors for PreexistingDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.PreexistingDirectory { get => this._preexistingDirectory; set { {_preexistingDirectory = value;} } }

        /// <summary>Internal Acessors for PreexistingFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.PreexistingFile { get => this._preexistingFile; set { {_preexistingFile = value;} } }

        /// <summary>Internal Acessors for PreexistingSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.PreexistingSymlink { get => this._preexistingSymlink; set { {_preexistingSymlink = value;} } }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for StatusMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.StatusMessage { get => this._statusMessage; set { {_statusMessage = value;} } }

        /// <summary>Internal Acessors for TotalBlobsImported</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.TotalBlobsImported { get => this._totalBlobsImported; set { {_totalBlobsImported = value;} } }

        /// <summary>Internal Acessors for TotalBlobsWalked</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.TotalBlobsWalked { get => this._totalBlobsWalked; set { {_totalBlobsWalked = value;} } }

        /// <summary>Internal Acessors for TotalConflict</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.TotalConflict { get => this._totalConflict; set { {_totalConflict = value;} } }

        /// <summary>Internal Acessors for TotalError</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatusInternal.TotalError { get => this._totalError; set { {_totalError = value;} } }

        /// <summary>Backing field for <see cref="PreexistingDirectory" /> property.</summary>
        private long? _preexistingDirectory;

        /// <summary>Directories that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingDirectory { get => this._preexistingDirectory; }

        /// <summary>Backing field for <see cref="PreexistingFile" /> property.</summary>
        private long? _preexistingFile;

        /// <summary>Files that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingFile { get => this._preexistingFile; }

        /// <summary>Backing field for <see cref="PreexistingSymlink" /> property.</summary>
        private long? _preexistingSymlink;

        /// <summary>Symbolic links that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingSymlink { get => this._preexistingSymlink; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>
        /// The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been
        /// canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre
        /// namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could
        /// not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Backing field for <see cref="StatusMessage" /> property.</summary>
        private string _statusMessage;

        /// <summary>The status message of the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string StatusMessage { get => this._statusMessage; }

        /// <summary>Backing field for <see cref="TotalBlobsImported" /> property.</summary>
        private long? _totalBlobsImported;

        /// <summary>The total blobs that have been imported since import began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalBlobsImported { get => this._totalBlobsImported; }

        /// <summary>Backing field for <see cref="TotalBlobsWalked" /> property.</summary>
        private long? _totalBlobsWalked;

        /// <summary>The total blob objects walked.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalBlobsWalked { get => this._totalBlobsWalked; }

        /// <summary>Backing field for <see cref="TotalConflict" /> property.</summary>
        private int? _totalConflict;

        /// <summary>Number of conflicts in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public int? TotalConflict { get => this._totalConflict; }

        /// <summary>Backing field for <see cref="TotalError" /> property.</summary>
        private int? _totalError;

        /// <summary>Number of errors in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public int? TotalError { get => this._totalError; }

        /// <summary>Creates an new <see cref="ImportJobPropertiesStatus" /> instance.</summary>
        public ImportJobPropertiesStatus()
        {

        }
    }
    /// The status of the import
    public partial interface IImportJobPropertiesStatus :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A recent and frequently updated rate of total files, directories, and symlinks imported per second.",
        SerializedName = @"blobsImportedPerSecond",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobsImportedPerSecond { get;  }
        /// <summary>A recent and frequently updated rate of blobs walked per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A recent and frequently updated rate of blobs walked per second.",
        SerializedName = @"blobsWalkedPerSecond",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobsWalkedPerSecond { get;  }
        /// <summary>New or modified directories that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"New or modified directories that have been imported into the filesystem.",
        SerializedName = @"importedDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedDirectory { get;  }
        /// <summary>New or modified files that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"New or modified files that have been imported into the filesystem.",
        SerializedName = @"importedFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedFile { get;  }
        /// <summary>Newly added symbolic links into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Newly added symbolic links into the filesystem.",
        SerializedName = @"importedSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedSymlink { get;  }
        /// <summary>The time (in UTC) of the last completed import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time (in UTC) of the last completed import job.",
        SerializedName = @"lastCompletionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastCompletionTime { get;  }
        /// <summary>The time (in UTC) the latest import job started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time (in UTC) the latest import job started.",
        SerializedName = @"lastStartedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastStartedTime { get;  }
        /// <summary>Directories that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Directories that already exist in the filesystem and have not been modified.",
        SerializedName = @"preexistingDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingDirectory { get;  }
        /// <summary>Files that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Files that already exist in the filesystem and have not been modified.",
        SerializedName = @"preexistingFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingFile { get;  }
        /// <summary>Symbolic links that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Symbolic links that already exist in the filesystem and have not been modified.",
        SerializedName = @"preexistingSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingSymlink { get;  }
        /// <summary>
        /// The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been
        /// canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre
        /// namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could
        /// not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("InProgress", "Cancelling", "Canceled", "Completed", "CompletedPartial", "Failed")]
        string State { get;  }
        /// <summary>The status message of the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The status message of the import job.",
        SerializedName = @"statusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string StatusMessage { get;  }
        /// <summary>The total blobs that have been imported since import began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total blobs that have been imported since import began.",
        SerializedName = @"totalBlobsImported",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBlobsImported { get;  }
        /// <summary>The total blob objects walked.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total blob objects walked.",
        SerializedName = @"totalBlobsWalked",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBlobsWalked { get;  }
        /// <summary>Number of conflicts in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of conflicts in the import job.",
        SerializedName = @"totalConflicts",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalConflict { get;  }
        /// <summary>Number of errors in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of errors in the import job.",
        SerializedName = @"totalErrors",
        PossibleTypes = new [] { typeof(int) })]
        int? TotalError { get;  }

    }
    /// The status of the import
    internal partial interface IImportJobPropertiesStatusInternal

    {
        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        long? BlobsImportedPerSecond { get; set; }
        /// <summary>A recent and frequently updated rate of blobs walked per second.</summary>
        long? BlobsWalkedPerSecond { get; set; }
        /// <summary>New or modified directories that have been imported into the filesystem.</summary>
        long? ImportedDirectory { get; set; }
        /// <summary>New or modified files that have been imported into the filesystem.</summary>
        long? ImportedFile { get; set; }
        /// <summary>Newly added symbolic links into the filesystem.</summary>
        long? ImportedSymlink { get; set; }
        /// <summary>The time (in UTC) of the last completed import job.</summary>
        global::System.DateTime? LastCompletionTime { get; set; }
        /// <summary>The time (in UTC) the latest import job started.</summary>
        global::System.DateTime? LastStartedTime { get; set; }
        /// <summary>Directories that already exist in the filesystem and have not been modified.</summary>
        long? PreexistingDirectory { get; set; }
        /// <summary>Files that already exist in the filesystem and have not been modified.</summary>
        long? PreexistingFile { get; set; }
        /// <summary>Symbolic links that already exist in the filesystem and have not been modified.</summary>
        long? PreexistingSymlink { get; set; }
        /// <summary>
        /// The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been
        /// canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre
        /// namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could
        /// not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("InProgress", "Cancelling", "Canceled", "Completed", "CompletedPartial", "Failed")]
        string State { get; set; }
        /// <summary>The status message of the import job.</summary>
        string StatusMessage { get; set; }
        /// <summary>The total blobs that have been imported since import began.</summary>
        long? TotalBlobsImported { get; set; }
        /// <summary>The total blob objects walked.</summary>
        long? TotalBlobsWalked { get; set; }
        /// <summary>Number of conflicts in the import job.</summary>
        int? TotalConflict { get; set; }
        /// <summary>Number of errors in the import job.</summary>
        int? TotalError { get; set; }

    }
}