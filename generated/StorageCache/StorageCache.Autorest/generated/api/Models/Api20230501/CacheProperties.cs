// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Properties of the cache.</summary>
    public partial class CacheProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheProperties,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal
    {

        /// <summary>Backing field for <see cref="CacheSizeGb" /> property.</summary>
        private int? _cacheSizeGb;

        /// <summary>The size of this Cache, in GB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public int? CacheSizeGb { get => this._cacheSizeGb; set => this._cacheSizeGb = value; }

        /// <summary>Backing field for <see cref="DirectoryServicesSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettings _directoryServicesSetting;

        /// <summary>Specifies Directory Services settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettings DirectoryServicesSetting { get => (this._directoryServicesSetting = this._directoryServicesSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheDirectorySettings()); set => this._directoryServicesSetting = value; }

        /// <summary>Backing field for <see cref="EncryptionSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettings _encryptionSetting;

        /// <summary>Specifies encryption settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettings EncryptionSetting { get => (this._encryptionSetting = this._encryptionSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheEncryptionSettings()); set => this._encryptionSetting = value; }

        /// <summary>
        /// Specifies whether the service will automatically rotate to the newest version of the key in the key vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? EncryptionSettingRotationToLatestKeyVersionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).RotationToLatestKeyVersionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).RotationToLatestKeyVersionEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="Health" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealth _health;

        /// <summary>Health of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealth Health { get => (this._health = this._health ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheHealth()); }

        /// <summary>Outstanding conditions that need to be investigated and resolved.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICondition[] HealthCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).Condition; }

        /// <summary>
        /// List of cache health states. Down is when the cluster is not responding. Degraded is when its functioning but has some
        /// alerts. Transitioning when it is creating or deleting. Unknown will be returned in old api versions when a new value is
        /// added in future versions. WaitingForKey is when the create is waiting for the system assigned identity to be given access
        /// to the encryption key in the encryption settings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType? HealthState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).State = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType)""); }

        /// <summary>Describes explanation of state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string HealthStatusDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).StatusDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).StatusDescription = value ?? null; }

        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeyUrl = value ?? null; }

        /// <summary>Internal Acessors for EncryptionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.EncryptionSetting { get => (this._encryptionSetting = this._encryptionSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheEncryptionSettings()); set { {_encryptionSetting = value;} } }

        /// <summary>Internal Acessors for EncryptionSettingKeyEncryptionKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReference Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.EncryptionSettingKeyEncryptionKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKey = value; }

        /// <summary>Internal Acessors for Health</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealth Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.Health { get => (this._health = this._health ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheHealth()); set { {_health = value;} } }

        /// <summary>Internal Acessors for HealthCondition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICondition[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.HealthCondition { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).Condition; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealthInternal)Health).Condition = value; }

        /// <summary>Internal Acessors for KeyEncryptionKeySourceVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReferenceSourceVault Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.KeyEncryptionKeySourceVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeySourceVault; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeySourceVault = value; }

        /// <summary>Internal Acessors for MountAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.MountAddress { get => this._mountAddress; set { {_mountAddress = value;} } }

        /// <summary>Internal Acessors for NetworkSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.NetworkSetting { get => (this._networkSetting = this._networkSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheNetworkSettings()); set { {_networkSetting = value;} } }

        /// <summary>Internal Acessors for NetworkSettingUtilityAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.NetworkSettingUtilityAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).UtilityAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).UtilityAddress = value; }

        /// <summary>Internal Acessors for PrimingJob</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IPrimingJob[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.PrimingJob { get => this._primingJob; set { {_primingJob = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for SecuritySetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheSecuritySettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.SecuritySetting { get => (this._securitySetting = this._securitySetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheSecuritySettings()); set { {_securitySetting = value;} } }

        /// <summary>Internal Acessors for SpaceAllocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IStorageTargetSpaceAllocation[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.SpaceAllocation { get => this._spaceAllocation; set { {_spaceAllocation = value;} } }

        /// <summary>Internal Acessors for UpgradeSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeSetting { get => (this._upgradeSetting = this._upgradeSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUpgradeSettings()); set { {_upgradeSetting = value;} } }

        /// <summary>Internal Acessors for UpgradeStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatus Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeStatus { get => (this._upgradeStatus = this._upgradeStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUpgradeStatus()); set { {_upgradeStatus = value;} } }

        /// <summary>Internal Acessors for UpgradeStatusCurrentFirmwareVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeStatusCurrentFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).CurrentFirmwareVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).CurrentFirmwareVersion = value; }

        /// <summary>Internal Acessors for UpgradeStatusFirmwareUpdateDeadline</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeStatusFirmwareUpdateDeadline { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).FirmwareUpdateDeadline; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).FirmwareUpdateDeadline = value; }

        /// <summary>Internal Acessors for UpgradeStatusFirmwareUpdateStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeStatusFirmwareUpdateStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).FirmwareUpdateStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).FirmwareUpdateStatus = value; }

        /// <summary>Internal Acessors for UpgradeStatusLastFirmwareUpdate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeStatusLastFirmwareUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).LastFirmwareUpdate; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).LastFirmwareUpdate = value; }

        /// <summary>Internal Acessors for UpgradeStatusPendingFirmwareVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICachePropertiesInternal.UpgradeStatusPendingFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).PendingFirmwareVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).PendingFirmwareVersion = value; }

        /// <summary>Backing field for <see cref="MountAddress" /> property.</summary>
        private string[] _mountAddress;

        /// <summary>Array of IPv4 addresses that can be used by clients mounting this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string[] MountAddress { get => this._mountAddress; }

        /// <summary>Backing field for <see cref="NetworkSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettings _networkSetting;

        /// <summary>Specifies network settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettings NetworkSetting { get => (this._networkSetting = this._networkSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheNetworkSettings()); set => this._networkSetting = value; }

        /// <summary>DNS search domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string NetworkSettingDnsSearchDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).DnsSearchDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).DnsSearchDomain = value ?? null; }

        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string[] NetworkSettingDnsServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).DnsServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).DnsServer = value ?? null /* arrayOf */; }

        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public int? NetworkSettingMtu { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).Mtu; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).Mtu = value ?? default(int); }

        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string NetworkSettingNtpServer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).NtpServer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).NtpServer = value ?? null; }

        /// <summary>Array of additional IP addresses used by this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string[] NetworkSettingUtilityAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal)NetworkSetting).UtilityAddress; }

        /// <summary>Backing field for <see cref="PrimingJob" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IPrimingJob[] _primingJob;

        /// <summary>Specifies the priming jobs defined in the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IPrimingJob[] PrimingJob { get => this._primingJob; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? _provisioningState;

        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="SecuritySetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheSecuritySettings _securitySetting;

        /// <summary>Specifies security settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheSecuritySettings SecuritySetting { get => (this._securitySetting = this._securitySetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheSecuritySettings()); set => this._securitySetting = value; }

        /// <summary>NFS access policies defined for this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.INfsAccessPolicy[] SecuritySettingAccessPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheSecuritySettingsInternal)SecuritySetting).AccessPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheSecuritySettingsInternal)SecuritySetting).AccessPolicy = value ?? null /* arrayOf */; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SourceVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).SourceVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettingsInternal)EncryptionSetting).SourceVaultId = value ?? null; }

        /// <summary>Backing field for <see cref="SpaceAllocation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IStorageTargetSpaceAllocation[] _spaceAllocation;

        /// <summary>Specifies the space allocation percentage for each storage target in the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IStorageTargetSpaceAllocation[] SpaceAllocation { get => this._spaceAllocation; }

        /// <summary>Backing field for <see cref="Subnet" /> property.</summary>
        private string _subnet;

        /// <summary>Subnet used for the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string Subnet { get => this._subnet; set => this._subnet = value; }

        /// <summary>Backing field for <see cref="UpgradeSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettings _upgradeSetting;

        /// <summary>Upgrade settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettings UpgradeSetting { get => (this._upgradeSetting = this._upgradeSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUpgradeSettings()); set => this._upgradeSetting = value; }

        /// <summary>
        /// When upgradeScheduleEnabled is true, this field holds the user-chosen upgrade time. At the user-chosen time, the firmware
        /// update will automatically be installed on the cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeSettingScheduledTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettingsInternal)UpgradeSetting).ScheduledTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettingsInternal)UpgradeSetting).ScheduledTime = value ?? default(global::System.DateTime); }

        /// <summary>
        /// True if the user chooses to select an installation time between now and firmwareUpdateDeadline. Else the firmware will
        /// automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public bool? UpgradeSettingUpgradeScheduleEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettingsInternal)UpgradeSetting).UpgradeScheduleEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettingsInternal)UpgradeSetting).UpgradeScheduleEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="UpgradeStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatus _upgradeStatus;

        /// <summary>Upgrade status of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatus UpgradeStatus { get => (this._upgradeStatus = this._upgradeStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.CacheUpgradeStatus()); }

        /// <summary>Version string of the firmware currently installed on this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UpgradeStatusCurrentFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).CurrentFirmwareVersion; }

        /// <summary>
        /// Time at which the pending firmware update will automatically be installed on the cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeStatusFirmwareUpdateDeadline { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).FirmwareUpdateDeadline; }

        /// <summary>
        /// True if there is a firmware update ready to install on this cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? UpgradeStatusFirmwareUpdateStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).FirmwareUpdateStatus; }

        /// <summary>Time of the last successful firmware update.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? UpgradeStatusLastFirmwareUpdate { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).LastFirmwareUpdate; }

        /// <summary>
        /// When firmwareUpdateAvailable is true, this field holds the version string for the update.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string UpgradeStatusPendingFirmwareVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatusInternal)UpgradeStatus).PendingFirmwareVersion; }

        /// <summary>Backing field for <see cref="Zone" /> property.</summary>
        private string[] _zone;

        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string[] Zone { get => this._zone; set => this._zone = value; }

        /// <summary>Creates an new <see cref="CacheProperties" /> instance.</summary>
        public CacheProperties()
        {

        }
    }
    /// Properties of the cache.
    public partial interface ICacheProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>The size of this Cache, in GB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The size of this Cache, in GB.",
        SerializedName = @"cacheSizeGB",
        PossibleTypes = new [] { typeof(int) })]
        int? CacheSizeGb { get; set; }
        /// <summary>Specifies Directory Services settings of the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies Directory Services settings of the cache.",
        SerializedName = @"directoryServicesSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettings) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettings DirectoryServicesSetting { get; set; }
        /// <summary>
        /// Specifies whether the service will automatically rotate to the newest version of the key in the key vault.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Specifies whether the service will automatically rotate to the newest version of the key in the key vault.",
        SerializedName = @"rotationToLatestKeyVersionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EncryptionSettingRotationToLatestKeyVersionEnabled { get; set; }
        /// <summary>Outstanding conditions that need to be investigated and resolved.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Outstanding conditions that need to be investigated and resolved.",
        SerializedName = @"conditions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICondition) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICondition[] HealthCondition { get;  }
        /// <summary>
        /// List of cache health states. Down is when the cluster is not responding. Degraded is when its functioning but has some
        /// alerts. Transitioning when it is creating or deleting. Unknown will be returned in old api versions when a new value is
        /// added in future versions. WaitingForKey is when the create is waiting for the system assigned identity to be given access
        /// to the encryption key in the encryption settings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of cache health states. Down is when the cluster is not responding.  Degraded is when its functioning but has some alerts. Transitioning when it is creating or deleting. Unknown will be returned in old api versions when a new value is added in future versions. WaitingForKey is when the create is waiting for the system assigned identity to be given access to the encryption key in the encryption settings.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType? HealthState { get; set; }
        /// <summary>Describes explanation of state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes explanation of state.",
        SerializedName = @"statusDescription",
        PossibleTypes = new [] { typeof(string) })]
        string HealthStatusDescription { get; set; }
        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL referencing a key encryption key in key vault.",
        SerializedName = @"keyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Array of IPv4 addresses that can be used by clients mounting this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of IPv4 addresses that can be used by clients mounting this cache.",
        SerializedName = @"mountAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] MountAddress { get;  }
        /// <summary>DNS search domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS search domain",
        SerializedName = @"dnsSearchDomain",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkSettingDnsSearchDomain { get; set; }
        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.",
        SerializedName = @"dnsServers",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkSettingDnsServer { get; set; }
        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 maximum transmission unit configured for the subnet.",
        SerializedName = @"mtu",
        PossibleTypes = new [] { typeof(int) })]
        int? NetworkSettingMtu { get; set; }
        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.",
        SerializedName = @"ntpServer",
        PossibleTypes = new [] { typeof(string) })]
        string NetworkSettingNtpServer { get; set; }
        /// <summary>Array of additional IP addresses used by this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of additional IP addresses used by this cache.",
        SerializedName = @"utilityAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] NetworkSettingUtilityAddress { get;  }
        /// <summary>Specifies the priming jobs defined in the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the priming jobs defined in the cache.",
        SerializedName = @"primingJobs",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IPrimingJob) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IPrimingJob[] PrimingJob { get;  }
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? ProvisioningState { get;  }
        /// <summary>NFS access policies defined for this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NFS access policies defined for this cache.",
        SerializedName = @"accessPolicies",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.INfsAccessPolicy) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.INfsAccessPolicy[] SecuritySettingAccessPolicy { get; set; }
        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SourceVaultId { get; set; }
        /// <summary>Specifies the space allocation percentage for each storage target in the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Specifies the space allocation percentage for each storage target in the cache.",
        SerializedName = @"spaceAllocation",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IStorageTargetSpaceAllocation) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IStorageTargetSpaceAllocation[] SpaceAllocation { get;  }
        /// <summary>Subnet used for the cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Subnet used for the cache.",
        SerializedName = @"subnet",
        PossibleTypes = new [] { typeof(string) })]
        string Subnet { get; set; }
        /// <summary>
        /// When upgradeScheduleEnabled is true, this field holds the user-chosen upgrade time. At the user-chosen time, the firmware
        /// update will automatically be installed on the cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"When upgradeScheduleEnabled is true, this field holds the user-chosen upgrade time. At the user-chosen time, the firmware update will automatically be installed on the cache.",
        SerializedName = @"scheduledTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeSettingScheduledTime { get; set; }
        /// <summary>
        /// True if the user chooses to select an installation time between now and firmwareUpdateDeadline. Else the firmware will
        /// automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"True if the user chooses to select an installation time between now and firmwareUpdateDeadline. Else the firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.",
        SerializedName = @"upgradeScheduleEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UpgradeSettingUpgradeScheduleEnabled { get; set; }
        /// <summary>Version string of the firmware currently installed on this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Version string of the firmware currently installed on this cache.",
        SerializedName = @"currentFirmwareVersion",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeStatusCurrentFirmwareVersion { get;  }
        /// <summary>
        /// Time at which the pending firmware update will automatically be installed on the cache.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time at which the pending firmware update will automatically be installed on the cache.",
        SerializedName = @"firmwareUpdateDeadline",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeStatusFirmwareUpdateDeadline { get;  }
        /// <summary>
        /// True if there is a firmware update ready to install on this cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"True if there is a firmware update ready to install on this cache. The firmware will automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.",
        SerializedName = @"firmwareUpdateStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? UpgradeStatusFirmwareUpdateStatus { get;  }
        /// <summary>Time of the last successful firmware update.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Time of the last successful firmware update.",
        SerializedName = @"lastFirmwareUpdate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? UpgradeStatusLastFirmwareUpdate { get;  }
        /// <summary>
        /// When firmwareUpdateAvailable is true, this field holds the version string for the update.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"When firmwareUpdateAvailable is true, this field holds the version string for the update.",
        SerializedName = @"pendingFirmwareVersion",
        PossibleTypes = new [] { typeof(string) })]
        string UpgradeStatusPendingFirmwareVersion { get;  }
        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Availability zones for resources. This field should only contain a single element in the array.",
        SerializedName = @"zones",
        PossibleTypes = new [] { typeof(string) })]
        string[] Zone { get; set; }

    }
    /// Properties of the cache.
    internal partial interface ICachePropertiesInternal

    {
        /// <summary>The size of this Cache, in GB.</summary>
        int? CacheSizeGb { get; set; }
        /// <summary>Specifies Directory Services settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheDirectorySettings DirectoryServicesSetting { get; set; }
        /// <summary>Specifies encryption settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheEncryptionSettings EncryptionSetting { get; set; }
        /// <summary>Specifies the location of the key encryption key in key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReference EncryptionSettingKeyEncryptionKey { get; set; }
        /// <summary>
        /// Specifies whether the service will automatically rotate to the newest version of the key in the key vault.
        /// </summary>
        bool? EncryptionSettingRotationToLatestKeyVersionEnabled { get; set; }
        /// <summary>Health of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheHealth Health { get; set; }
        /// <summary>Outstanding conditions that need to be investigated and resolved.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICondition[] HealthCondition { get; set; }
        /// <summary>
        /// List of cache health states. Down is when the cluster is not responding. Degraded is when its functioning but has some
        /// alerts. Transitioning when it is creating or deleting. Unknown will be returned in old api versions when a new value is
        /// added in future versions. WaitingForKey is when the create is waiting for the system assigned identity to be given access
        /// to the encryption key in the encryption settings.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.HealthStateType? HealthState { get; set; }
        /// <summary>Describes explanation of state.</summary>
        string HealthStatusDescription { get; set; }
        /// <summary>Describes a resource Id to source key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReferenceSourceVault KeyEncryptionKeySourceVault { get; set; }
        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Array of IPv4 addresses that can be used by clients mounting this cache.</summary>
        string[] MountAddress { get; set; }
        /// <summary>Specifies network settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettings NetworkSetting { get; set; }
        /// <summary>DNS search domain</summary>
        string NetworkSettingDnsSearchDomain { get; set; }
        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        string[] NetworkSettingDnsServer { get; set; }
        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        int? NetworkSettingMtu { get; set; }
        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        string NetworkSettingNtpServer { get; set; }
        /// <summary>Array of additional IP addresses used by this cache.</summary>
        string[] NetworkSettingUtilityAddress { get; set; }
        /// <summary>Specifies the priming jobs defined in the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IPrimingJob[] PrimingJob { get; set; }
        /// <summary>
        /// ARM provisioning state, see https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/Addendum.md#provisioningstate-property
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.ProvisioningStateType? ProvisioningState { get; set; }
        /// <summary>Specifies security settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheSecuritySettings SecuritySetting { get; set; }
        /// <summary>NFS access policies defined for this cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.INfsAccessPolicy[] SecuritySettingAccessPolicy { get; set; }
        /// <summary>Resource Id.</summary>
        string SourceVaultId { get; set; }
        /// <summary>Specifies the space allocation percentage for each storage target in the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IStorageTargetSpaceAllocation[] SpaceAllocation { get; set; }
        /// <summary>Subnet used for the cache.</summary>
        string Subnet { get; set; }
        /// <summary>Upgrade settings of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeSettings UpgradeSetting { get; set; }
        /// <summary>
        /// When upgradeScheduleEnabled is true, this field holds the user-chosen upgrade time. At the user-chosen time, the firmware
        /// update will automatically be installed on the cache.
        /// </summary>
        global::System.DateTime? UpgradeSettingScheduledTime { get; set; }
        /// <summary>
        /// True if the user chooses to select an installation time between now and firmwareUpdateDeadline. Else the firmware will
        /// automatically be installed after firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        bool? UpgradeSettingUpgradeScheduleEnabled { get; set; }
        /// <summary>Upgrade status of the cache.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheUpgradeStatus UpgradeStatus { get; set; }
        /// <summary>Version string of the firmware currently installed on this cache.</summary>
        string UpgradeStatusCurrentFirmwareVersion { get; set; }
        /// <summary>
        /// Time at which the pending firmware update will automatically be installed on the cache.
        /// </summary>
        global::System.DateTime? UpgradeStatusFirmwareUpdateDeadline { get; set; }
        /// <summary>
        /// True if there is a firmware update ready to install on this cache. The firmware will automatically be installed after
        /// firmwareUpdateDeadline if not triggered earlier via the upgrade operation.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.FirmwareStatusType? UpgradeStatusFirmwareUpdateStatus { get; set; }
        /// <summary>Time of the last successful firmware update.</summary>
        global::System.DateTime? UpgradeStatusLastFirmwareUpdate { get; set; }
        /// <summary>
        /// When firmwareUpdateAvailable is true, this field holds the version string for the update.
        /// </summary>
        string UpgradeStatusPendingFirmwareVersion { get; set; }
        /// <summary>
        /// Availability zones for resources. This field should only contain a single element in the array.
        /// </summary>
        string[] Zone { get; set; }

    }
}