// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Properties of the AML file system.</summary>
    public partial class AmlFilesystemProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemProperties,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal
    {

        /// <summary>Backing field for <see cref="ClientInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfo _clientInfo;

        /// <summary>Client information for the AML file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfo ClientInfo { get => (this._clientInfo = this._clientInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemClientInfo()); }

        /// <summary>The version of Lustre running in the AML file system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ClientInfoLustreVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).LustreVersion; }

        /// <summary>
        /// The IPv4 address used by clients to mount the AML file system's Lustre Management Service (MGS).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ClientInfoMgsAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).MgsAddress; }

        /// <summary>Recommended command to mount the AML file system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ClientInfoMountCommand { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).MountCommand; }

        /// <summary>Recommended AKS Persistent Volume for the CSI driver, in Base64 encoded YAML</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ContainerStorageInterfacePersistentVolume { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfacePersistentVolume; }

        /// <summary>
        /// Recommended AKS Persistent Volume Claim for the CSI driver, in Base64 encoded YAML
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ContainerStorageInterfacePersistentVolumeClaim { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfacePersistentVolumeClaim; }

        /// <summary>Recommended AKS Storage Class for the CSI driver, in Base64 encoded YAML</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ContainerStorageInterfaceStorageClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfaceStorageClass; }

        /// <summary>Backing field for <see cref="EncryptionSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettings _encryptionSetting;

        /// <summary>Specifies encryption settings of the AML file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettings EncryptionSetting { get => (this._encryptionSetting = this._encryptionSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemEncryptionSettings()); set => this._encryptionSetting = value; }

        /// <summary>Backing field for <see cref="FilesystemSubnet" /> property.</summary>
        private string _filesystemSubnet;

        /// <summary>
        /// Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24
        /// subnet mask within the VNET's address space.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string FilesystemSubnet { get => this._filesystemSubnet; set => this._filesystemSubnet = value; }

        /// <summary>Backing field for <see cref="Health" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealth _health;

        /// <summary>Health of the AML file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealth Health { get => (this._health = this._health ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemHealth()); }

        /// <summary>List of AML file system health states.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemHealthStateType? HealthState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealthInternal)Health).State; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealthInternal)Health).State = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemHealthStateType)""); }

        /// <summary>Server-defined error code for the AML file system health</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string HealthStatusCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealthInternal)Health).StatusCode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealthInternal)Health).StatusCode = value ?? null; }

        /// <summary>Describes the health state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string HealthStatusDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealthInternal)Health).StatusDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealthInternal)Health).StatusDescription = value ?? null; }

        /// <summary>Backing field for <see cref="Hsm" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsm _hsm;

        /// <summary>Hydration and archive settings and status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsm Hsm { get => (this._hsm = this._hsm ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemPropertiesHsm()); set => this._hsm = value; }

        /// <summary>Archive status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemArchive[] HsmArchiveStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).ArchiveStatus; }

        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeyUrl = value ?? null; }

        /// <summary>Backing field for <see cref="MaintenanceWindow" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindow _maintenanceWindow;

        /// <summary>Start time of a 30-minute weekly maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindow MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemPropertiesMaintenanceWindow()); set => this._maintenanceWindow = value; }

        /// <summary>Day of the week on which the maintenance window will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.MaintenanceDayOfWeekType? MaintenanceWindowDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindowInternal)MaintenanceWindow).DayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindowInternal)MaintenanceWindow).DayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.MaintenanceDayOfWeekType)""); }

        /// <summary>The time of day (in UTC) to start the maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string MaintenanceWindowTimeOfDayUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindowInternal)MaintenanceWindow).TimeOfDayUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindowInternal)MaintenanceWindow).TimeOfDayUtc = value ?? null; }

        /// <summary>Internal Acessors for ClientInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfo Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ClientInfo { get => (this._clientInfo = this._clientInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemClientInfo()); set { {_clientInfo = value;} } }

        /// <summary>Internal Acessors for ClientInfoContainerStorageInterface</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemContainerStorageInterface Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ClientInfoContainerStorageInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterface = value; }

        /// <summary>Internal Acessors for ClientInfoLustreVersion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ClientInfoLustreVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).LustreVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).LustreVersion = value; }

        /// <summary>Internal Acessors for ClientInfoMgsAddress</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ClientInfoMgsAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).MgsAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).MgsAddress = value; }

        /// <summary>Internal Acessors for ClientInfoMountCommand</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ClientInfoMountCommand { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).MountCommand; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).MountCommand = value; }

        /// <summary>Internal Acessors for ContainerStorageInterfacePersistentVolume</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ContainerStorageInterfacePersistentVolume { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfacePersistentVolume; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfacePersistentVolume = value; }

        /// <summary>Internal Acessors for ContainerStorageInterfacePersistentVolumeClaim</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ContainerStorageInterfacePersistentVolumeClaim { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfacePersistentVolumeClaim; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfacePersistentVolumeClaim = value; }

        /// <summary>Internal Acessors for ContainerStorageInterfaceStorageClass</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ContainerStorageInterfaceStorageClass { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfaceStorageClass; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfoInternal)ClientInfo).ContainerStorageInterfaceStorageClass = value; }

        /// <summary>Internal Acessors for EncryptionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.EncryptionSetting { get => (this._encryptionSetting = this._encryptionSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemEncryptionSettings()); set { {_encryptionSetting = value;} } }

        /// <summary>Internal Acessors for EncryptionSettingKeyEncryptionKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReference Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.EncryptionSettingKeyEncryptionKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKey = value; }

        /// <summary>Internal Acessors for Health</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealth Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.Health { get => (this._health = this._health ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemHealth()); set { {_health = value;} } }

        /// <summary>Internal Acessors for Hsm</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsm Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.Hsm { get => (this._hsm = this._hsm ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemPropertiesHsm()); set { {_hsm = value;} } }

        /// <summary>Internal Acessors for HsmArchiveStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemArchive[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.HsmArchiveStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).ArchiveStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).ArchiveStatus = value; }

        /// <summary>Internal Acessors for HsmSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHsmSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.HsmSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).Setting; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).Setting = value; }

        /// <summary>Internal Acessors for KeyEncryptionKeySourceVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReferenceSourceVault Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.KeyEncryptionKeySourceVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeySourceVault; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeySourceVault = value; }

        /// <summary>Internal Acessors for MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindow Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.AmlFilesystemPropertiesMaintenanceWindow()); set { {_maintenanceWindow = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemProvisioningStateType? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for ThroughputProvisionedMBps</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesInternal.ThroughputProvisionedMBps { get => this._throughputProvisionedMBps; set { {_throughputProvisionedMBps = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemProvisioningStateType? _provisioningState;

        /// <summary>ARM provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemProvisioningStateType? ProvisioningState { get => this._provisioningState; }

        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider
        /// must have permission to create SAS tokens on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SettingContainer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).SettingContainer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).SettingContainer = value ?? null; }

        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SettingImportPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).SettingImportPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).SettingImportPrefix = value ?? null; }

        /// <summary>
        /// Resource ID of storage container used for logging events and errors. Must be a separate container in the same storage
        /// account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the
        /// storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SettingLoggingContainer { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).SettingLoggingContainer; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsmInternal)Hsm).SettingLoggingContainer = value ?? null; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SourceVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).SourceVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).SourceVaultId = value ?? null; }

        /// <summary>Backing field for <see cref="StorageCapacityTiB" /> property.</summary>
        private float _storageCapacityTiB;

        /// <summary>The size of the AML file system, in TiB. This might be rounded up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public float StorageCapacityTiB { get => this._storageCapacityTiB; set => this._storageCapacityTiB = value; }

        /// <summary>Backing field for <see cref="ThroughputProvisionedMBps" /> property.</summary>
        private int? _throughputProvisionedMBps;

        /// <summary>
        /// Throughput provisioned in MB per sec, calculated as storageCapacityTiB * per-unit storage throughput
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public int? ThroughputProvisionedMBps { get => this._throughputProvisionedMBps; }

        /// <summary>Creates an new <see cref="AmlFilesystemProperties" /> instance.</summary>
        public AmlFilesystemProperties()
        {

        }
    }
    /// Properties of the AML file system.
    public partial interface IAmlFilesystemProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>The version of Lustre running in the AML file system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The version of Lustre running in the AML file system",
        SerializedName = @"lustreVersion",
        PossibleTypes = new [] { typeof(string) })]
        string ClientInfoLustreVersion { get;  }
        /// <summary>
        /// The IPv4 address used by clients to mount the AML file system's Lustre Management Service (MGS).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The IPv4 address used by clients to mount the AML file system's Lustre Management Service (MGS).",
        SerializedName = @"mgsAddress",
        PossibleTypes = new [] { typeof(string) })]
        string ClientInfoMgsAddress { get;  }
        /// <summary>Recommended command to mount the AML file system</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Recommended command to mount the AML file system",
        SerializedName = @"mountCommand",
        PossibleTypes = new [] { typeof(string) })]
        string ClientInfoMountCommand { get;  }
        /// <summary>Recommended AKS Persistent Volume for the CSI driver, in Base64 encoded YAML</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Recommended AKS Persistent Volume for the CSI driver, in Base64 encoded YAML",
        SerializedName = @"persistentVolume",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerStorageInterfacePersistentVolume { get;  }
        /// <summary>
        /// Recommended AKS Persistent Volume Claim for the CSI driver, in Base64 encoded YAML
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Recommended AKS Persistent Volume Claim for the CSI driver, in Base64 encoded YAML",
        SerializedName = @"persistentVolumeClaim",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerStorageInterfacePersistentVolumeClaim { get;  }
        /// <summary>Recommended AKS Storage Class for the CSI driver, in Base64 encoded YAML</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Recommended AKS Storage Class for the CSI driver, in Base64 encoded YAML",
        SerializedName = @"storageClass",
        PossibleTypes = new [] { typeof(string) })]
        string ContainerStorageInterfaceStorageClass { get;  }
        /// <summary>
        /// Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24
        /// subnet mask within the VNET's address space.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24 subnet mask within the VNET's address space.",
        SerializedName = @"filesystemSubnet",
        PossibleTypes = new [] { typeof(string) })]
        string FilesystemSubnet { get; set; }
        /// <summary>List of AML file system health states.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"List of AML file system health states.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemHealthStateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemHealthStateType? HealthState { get; set; }
        /// <summary>Server-defined error code for the AML file system health</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Server-defined error code for the AML file system health",
        SerializedName = @"statusCode",
        PossibleTypes = new [] { typeof(string) })]
        string HealthStatusCode { get; set; }
        /// <summary>Describes the health state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Describes the health state.",
        SerializedName = @"statusDescription",
        PossibleTypes = new [] { typeof(string) })]
        string HealthStatusDescription { get; set; }
        /// <summary>Archive status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Archive status",
        SerializedName = @"archiveStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemArchive) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemArchive[] HsmArchiveStatus { get;  }
        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The URL referencing a key encryption key in key vault.",
        SerializedName = @"keyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Day of the week on which the maintenance window will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Day of the week on which the maintenance window will occur.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.MaintenanceDayOfWeekType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.MaintenanceDayOfWeekType? MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>The time of day (in UTC) to start the maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The time of day (in UTC) to start the maintenance window.",
        SerializedName = @"timeOfDayUTC",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowTimeOfDayUtc { get; set; }
        /// <summary>ARM provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"ARM provisioning state.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemProvisioningStateType) })]
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemProvisioningStateType? ProvisioningState { get;  }
        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider
        /// must have permission to create SAS tokens on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider must have permission to create SAS tokens on the storage account.",
        SerializedName = @"container",
        PossibleTypes = new [] { typeof(string) })]
        string SettingContainer { get; set; }
        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.",
        SerializedName = @"importPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string SettingImportPrefix { get; set; }
        /// <summary>
        /// Resource ID of storage container used for logging events and errors. Must be a separate container in the same storage
        /// account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the
        /// storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID of storage container used for logging events and errors.  Must be a separate container in the same storage account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the storage account.",
        SerializedName = @"loggingContainer",
        PossibleTypes = new [] { typeof(string) })]
        string SettingLoggingContainer { get; set; }
        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource Id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SourceVaultId { get; set; }
        /// <summary>The size of the AML file system, in TiB. This might be rounded up.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The size of the AML file system, in TiB. This might be rounded up.",
        SerializedName = @"storageCapacityTiB",
        PossibleTypes = new [] { typeof(float) })]
        float StorageCapacityTiB { get; set; }
        /// <summary>
        /// Throughput provisioned in MB per sec, calculated as storageCapacityTiB * per-unit storage throughput
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Throughput provisioned in MB per sec, calculated as storageCapacityTiB * per-unit storage throughput",
        SerializedName = @"throughputProvisionedMBps",
        PossibleTypes = new [] { typeof(int) })]
        int? ThroughputProvisionedMBps { get;  }

    }
    /// Properties of the AML file system.
    internal partial interface IAmlFilesystemPropertiesInternal

    {
        /// <summary>Client information for the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemClientInfo ClientInfo { get; set; }
        /// <summary>Container Storage Interface information for the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemContainerStorageInterface ClientInfoContainerStorageInterface { get; set; }
        /// <summary>The version of Lustre running in the AML file system</summary>
        string ClientInfoLustreVersion { get; set; }
        /// <summary>
        /// The IPv4 address used by clients to mount the AML file system's Lustre Management Service (MGS).
        /// </summary>
        string ClientInfoMgsAddress { get; set; }
        /// <summary>Recommended command to mount the AML file system</summary>
        string ClientInfoMountCommand { get; set; }
        /// <summary>Recommended AKS Persistent Volume for the CSI driver, in Base64 encoded YAML</summary>
        string ContainerStorageInterfacePersistentVolume { get; set; }
        /// <summary>
        /// Recommended AKS Persistent Volume Claim for the CSI driver, in Base64 encoded YAML
        /// </summary>
        string ContainerStorageInterfacePersistentVolumeClaim { get; set; }
        /// <summary>Recommended AKS Storage Class for the CSI driver, in Base64 encoded YAML</summary>
        string ContainerStorageInterfaceStorageClass { get; set; }
        /// <summary>Specifies encryption settings of the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemEncryptionSettings EncryptionSetting { get; set; }
        /// <summary>Specifies the location of the encryption key in Key Vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReference EncryptionSettingKeyEncryptionKey { get; set; }
        /// <summary>
        /// Subnet used for managing the AML file system and for client-facing operations. This subnet should have at least a /24
        /// subnet mask within the VNET's address space.
        /// </summary>
        string FilesystemSubnet { get; set; }
        /// <summary>Health of the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHealth Health { get; set; }
        /// <summary>List of AML file system health states.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemHealthStateType? HealthState { get; set; }
        /// <summary>Server-defined error code for the AML file system health</summary>
        string HealthStatusCode { get; set; }
        /// <summary>Describes the health state.</summary>
        string HealthStatusDescription { get; set; }
        /// <summary>Hydration and archive settings and status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesHsm Hsm { get; set; }
        /// <summary>Archive status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemArchive[] HsmArchiveStatus { get; set; }
        /// <summary>Specifies HSM settings of the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemHsmSettings HsmSetting { get; set; }
        /// <summary>Describes a resource Id to source key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IKeyVaultKeyReferenceSourceVault KeyEncryptionKeySourceVault { get; set; }
        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Start time of a 30-minute weekly maintenance window.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.IAmlFilesystemPropertiesMaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary>Day of the week on which the maintenance window will occur.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.MaintenanceDayOfWeekType? MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>The time of day (in UTC) to start the maintenance window.</summary>
        string MaintenanceWindowTimeOfDayUtc { get; set; }
        /// <summary>ARM provisioning state.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Support.AmlFilesystemProvisioningStateType? ProvisioningState { get; set; }
        /// <summary>
        /// Resource ID of storage container used for hydrating the namespace and archiving from the namespace. The resource provider
        /// must have permission to create SAS tokens on the storage account.
        /// </summary>
        string SettingContainer { get; set; }
        /// <summary>
        /// Only blobs in the non-logging container that start with this path/prefix get hydrated into the cluster namespace.
        /// </summary>
        string SettingImportPrefix { get; set; }
        /// <summary>
        /// Resource ID of storage container used for logging events and errors. Must be a separate container in the same storage
        /// account as the hydration and archive container. The resource provider must have permission to create SAS tokens on the
        /// storage account.
        /// </summary>
        string SettingLoggingContainer { get; set; }
        /// <summary>Resource Id.</summary>
        string SourceVaultId { get; set; }
        /// <summary>The size of the AML file system, in TiB. This might be rounded up.</summary>
        float StorageCapacityTiB { get; set; }
        /// <summary>
        /// Throughput provisioned in MB per sec, calculated as storageCapacityTiB * per-unit storage throughput
        /// </summary>
        int? ThroughputProvisionedMBps { get; set; }

    }
}