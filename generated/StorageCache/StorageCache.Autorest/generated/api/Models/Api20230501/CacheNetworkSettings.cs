// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Cache network settings.</summary>
    public partial class CacheNetworkSettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettings,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal
    {

        /// <summary>Backing field for <see cref="DnsSearchDomain" /> property.</summary>
        private string _dnsSearchDomain;

        /// <summary>DNS search domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string DnsSearchDomain { get => this._dnsSearchDomain; set => this._dnsSearchDomain = value; }

        /// <summary>Backing field for <see cref="DnsServer" /> property.</summary>
        private string[] _dnsServer;

        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string[] DnsServer { get => this._dnsServer; set => this._dnsServer = value; }

        /// <summary>Internal Acessors for UtilityAddress</summary>
        string[] Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.Api20230501.ICacheNetworkSettingsInternal.UtilityAddress { get => this._utilityAddress; set { {_utilityAddress = value;} } }

        /// <summary>Backing field for <see cref="Mtu" /> property.</summary>
        private int? _mtu;

        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public int? Mtu { get => this._mtu; set => this._mtu = value; }

        /// <summary>Backing field for <see cref="NtpServer" /> property.</summary>
        private string _ntpServer;

        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string NtpServer { get => this._ntpServer; set => this._ntpServer = value; }

        /// <summary>Backing field for <see cref="UtilityAddress" /> property.</summary>
        private string[] _utilityAddress;

        /// <summary>Array of additional IP addresses used by this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string[] UtilityAddress { get => this._utilityAddress; }

        /// <summary>Creates an new <see cref="CacheNetworkSettings" /> instance.</summary>
        public CacheNetworkSettings()
        {

        }
    }
    /// Cache network settings.
    public partial interface ICacheNetworkSettings :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>DNS search domain</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS search domain",
        SerializedName = @"dnsSearchDomain",
        PossibleTypes = new [] { typeof(string) })]
        string DnsSearchDomain { get; set; }
        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"DNS servers for the cache to use.  It will be set from the network configuration if no value is provided.",
        SerializedName = @"dnsServers",
        PossibleTypes = new [] { typeof(string) })]
        string[] DnsServer { get; set; }
        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The IPv4 maximum transmission unit configured for the subnet.",
        SerializedName = @"mtu",
        PossibleTypes = new [] { typeof(int) })]
        int? Mtu { get; set; }
        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.",
        SerializedName = @"ntpServer",
        PossibleTypes = new [] { typeof(string) })]
        string NtpServer { get; set; }
        /// <summary>Array of additional IP addresses used by this cache.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Array of additional IP addresses used by this cache.",
        SerializedName = @"utilityAddresses",
        PossibleTypes = new [] { typeof(string) })]
        string[] UtilityAddress { get;  }

    }
    /// Cache network settings.
    internal partial interface ICacheNetworkSettingsInternal

    {
        /// <summary>DNS search domain</summary>
        string DnsSearchDomain { get; set; }
        /// <summary>
        /// DNS servers for the cache to use. It will be set from the network configuration if no value is provided.
        /// </summary>
        string[] DnsServer { get; set; }
        /// <summary>The IPv4 maximum transmission unit configured for the subnet.</summary>
        int? Mtu { get; set; }
        /// <summary>
        /// NTP server IP Address or FQDN for the cache to use. The default is time.windows.com.
        /// </summary>
        string NtpServer { get; set; }
        /// <summary>Array of additional IP addresses used by this cache.</summary>
        string[] UtilityAddress { get; set; }

    }
}