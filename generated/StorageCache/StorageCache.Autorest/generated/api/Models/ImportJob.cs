// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>
    /// An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    /// </summary>
    public partial class ImportJob :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJob,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IValidates,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IHeaderSerializable
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResource"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.TrackedResource();

        /// <summary>
        /// The administrative status of the import job. Possible values: 'Active', 'Cancel'. Passing in a value of 'Cancel' will
        /// cancel the current active import job. By default it is set to 'Active'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string AdminStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).AdminStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).AdminStatus = value ?? null; }

        /// <summary>Backing field for <see cref="AzureAsyncOperation" /> property.</summary>
        private string _azureAsyncOperation;

        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string AzureAsyncOperation { get => this._azureAsyncOperation; set => this._azureAsyncOperation = value; }

        /// <summary>
        /// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file
        /// is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with
        /// the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and
        /// re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways
        /// extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/
        /// for a thorough explanation of these resolution modes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ConflictResolutionMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ConflictResolutionMode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ConflictResolutionMode = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Id; }

        /// <summary>
        /// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> ImportPrefix { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ImportPrefix; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ImportPrefix = value ?? null /* arrayOf */; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResourceInternal)__trackedResource).Location = value ?? null; }

        /// <summary>
        /// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means
        /// exit immediately and is the default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public int? MaximumError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).MaximumError; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).MaximumError = value ?? default(int); }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobProperties Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ImportJobProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for Status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatus Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.Status { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).Status = value ?? null /* model class */; }

        /// <summary>Internal Acessors for StatusBlobsImportedPerSecond</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusBlobsImportedPerSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusBlobsImportedPerSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusBlobsImportedPerSecond = value ?? default(long); }

        /// <summary>Internal Acessors for StatusBlobsWalkedPerSecond</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusBlobsWalkedPerSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusBlobsWalkedPerSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusBlobsWalkedPerSecond = value ?? default(long); }

        /// <summary>Internal Acessors for StatusImportedDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusImportedDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedDirectory = value ?? default(long); }

        /// <summary>Internal Acessors for StatusImportedFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusImportedFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedFile = value ?? default(long); }

        /// <summary>Internal Acessors for StatusImportedSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusImportedSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedSymlink; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedSymlink = value ?? default(long); }

        /// <summary>Internal Acessors for StatusLastCompletionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusLastCompletionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusLastCompletionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusLastCompletionTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for StatusLastStartedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusLastStartedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusLastStartedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusLastStartedTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for StatusMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusMessage; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusMessage = value ?? null; }

        /// <summary>Internal Acessors for StatusPreexistingDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusPreexistingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingDirectory = value ?? default(long); }

        /// <summary>Internal Acessors for StatusPreexistingFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusPreexistingFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingFile = value ?? default(long); }

        /// <summary>Internal Acessors for StatusPreexistingSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusPreexistingSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingSymlink; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingSymlink = value ?? default(long); }

        /// <summary>Internal Acessors for StatusState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusState; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusState = value ?? null; }

        /// <summary>Internal Acessors for StatusTotalBlobsImported</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusTotalBlobsImported { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalBlobsImported; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalBlobsImported = value ?? default(long); }

        /// <summary>Internal Acessors for StatusTotalBlobsWalked</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusTotalBlobsWalked { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalBlobsWalked; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalBlobsWalked = value ?? default(long); }

        /// <summary>Internal Acessors for StatusTotalConflict</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusTotalConflict { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalConflict; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalConflict = value ?? default(int); }

        /// <summary>Internal Acessors for StatusTotalError</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal.StatusTotalError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalError; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalError = value ?? default(int); }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Id = value ?? null; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Name = value ?? null; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Type = value ?? null; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobProperties _property;

        /// <summary>Properties of the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ImportJobProperties()); set => this._property = value; }

        /// <summary>ARM provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusBlobsImportedPerSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusBlobsImportedPerSecond; }

        /// <summary>A recent and frequently updated rate of blobs walked per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusBlobsWalkedPerSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusBlobsWalkedPerSecond; }

        /// <summary>New or modified directories that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusImportedDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedDirectory; }

        /// <summary>New or modified files that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusImportedFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedFile; }

        /// <summary>Newly added symbolic links into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusImportedSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusImportedSymlink; }

        /// <summary>The time (in UTC) of the last completed import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? StatusLastCompletionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusLastCompletionTime; }

        /// <summary>The time (in UTC) the latest import job started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? StatusLastStartedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusLastStartedTime; }

        /// <summary>The status message of the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string StatusMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusMessage; }

        /// <summary>Directories that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusPreexistingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingDirectory; }

        /// <summary>Files that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusPreexistingFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingFile; }

        /// <summary>Symbolic links that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusPreexistingSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusPreexistingSymlink; }

        /// <summary>
        /// The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been
        /// canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre
        /// namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could
        /// not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string StatusState { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusState; }

        /// <summary>The total blobs that have been imported since import began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusTotalBlobsImported { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalBlobsImported; }

        /// <summary>The total blob objects walked.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? StatusTotalBlobsWalked { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalBlobsWalked; }

        /// <summary>Number of conflicts in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public int? StatusTotalConflict { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalConflict; }

        /// <summary>Number of errors in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public int? StatusTotalError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesInternal)Property).StatusTotalError; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemData = value ?? null /* model class */; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataCreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).SystemDataLastModifiedByType; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="ImportJob" /> instance.</summary>
        public ImportJob()
        {

        }

        /// <param name="headers"></param>
        void Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IHeaderSerializable.ReadHeaders(global::System.Net.Http.Headers.HttpResponseHeaders headers)
        {
            if (headers.TryGetValues("azure-async-operation", out var __azureAsyncOperationHeader0))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobInternal)this).AzureAsyncOperation = System.Linq.Enumerable.FirstOrDefault(__azureAsyncOperationHeader0) is string __headerAzureAsyncOperationHeader0 ? __headerAzureAsyncOperationHeader0 : (string)null;
            }
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    public partial interface IImportJob :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResource
    {
        /// <summary>
        /// The administrative status of the import job. Possible values: 'Active', 'Cancel'. Passing in a value of 'Cancel' will
        /// cancel the current active import job. By default it is set to 'Active'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The administrative status of the import job. Possible values: 'Active', 'Cancel'. Passing in a value of 'Cancel' will cancel the current active import job. By default it is set to 'Active'.",
        SerializedName = @"adminStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Active", "Cancel")]
        string AdminStatus { get; set; }

        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"",
        SerializedName = @"azure-async-operation",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAsyncOperation { get; set; }
        /// <summary>
        /// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file
        /// is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with
        /// the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and
        /// re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways
        /// extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/
        /// for a thorough explanation of these resolution modes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/ for a thorough explanation of these resolution modes.",
        SerializedName = @"conflictResolutionMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Fail", "Skip", "OverwriteIfDirty", "OverwriteAlways")]
        string ConflictResolutionMode { get; set; }
        /// <summary>
        /// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.",
        SerializedName = @"importPrefixes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ImportPrefix { get; set; }
        /// <summary>
        /// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means
        /// exit immediately and is the default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means exit immediately and is the default.",
        SerializedName = @"maximumErrors",
        PossibleTypes = new [] { typeof(int) })]
        int? MaximumError { get; set; }
        /// <summary>ARM provisioning state.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"ARM provisioning state.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Succeeded", "Failed", "Creating", "Deleting", "Updating", "Canceled")]
        string ProvisioningState { get;  }
        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A recent and frequently updated rate of total files, directories, and symlinks imported per second.",
        SerializedName = @"blobsImportedPerSecond",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusBlobsImportedPerSecond { get;  }
        /// <summary>A recent and frequently updated rate of blobs walked per second.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A recent and frequently updated rate of blobs walked per second.",
        SerializedName = @"blobsWalkedPerSecond",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusBlobsWalkedPerSecond { get;  }
        /// <summary>New or modified directories that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"New or modified directories that have been imported into the filesystem.",
        SerializedName = @"importedDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusImportedDirectory { get;  }
        /// <summary>New or modified files that have been imported into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"New or modified files that have been imported into the filesystem.",
        SerializedName = @"importedFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusImportedFile { get;  }
        /// <summary>Newly added symbolic links into the filesystem.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Newly added symbolic links into the filesystem.",
        SerializedName = @"importedSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusImportedSymlink { get;  }
        /// <summary>The time (in UTC) of the last completed import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time (in UTC) of the last completed import job.",
        SerializedName = @"lastCompletionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StatusLastCompletionTime { get;  }
        /// <summary>The time (in UTC) the latest import job started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time (in UTC) the latest import job started.",
        SerializedName = @"lastStartedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? StatusLastStartedTime { get;  }
        /// <summary>The status message of the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The status message of the import job.",
        SerializedName = @"statusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string StatusMessage { get;  }
        /// <summary>Directories that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Directories that already exist in the filesystem and have not been modified.",
        SerializedName = @"preexistingDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusPreexistingDirectory { get;  }
        /// <summary>Files that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Files that already exist in the filesystem and have not been modified.",
        SerializedName = @"preexistingFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusPreexistingFile { get;  }
        /// <summary>Symbolic links that already exist in the filesystem and have not been modified.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Symbolic links that already exist in the filesystem and have not been modified.",
        SerializedName = @"preexistingSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusPreexistingSymlink { get;  }
        /// <summary>
        /// The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been
        /// canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre
        /// namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could
        /// not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("InProgress", "Cancelling", "Canceled", "Completed", "CompletedPartial", "Failed")]
        string StatusState { get;  }
        /// <summary>The total blobs that have been imported since import began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total blobs that have been imported since import began.",
        SerializedName = @"totalBlobsImported",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusTotalBlobsImported { get;  }
        /// <summary>The total blob objects walked.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The total blob objects walked.",
        SerializedName = @"totalBlobsWalked",
        PossibleTypes = new [] { typeof(long) })]
        long? StatusTotalBlobsWalked { get;  }
        /// <summary>Number of conflicts in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of conflicts in the import job.",
        SerializedName = @"totalConflicts",
        PossibleTypes = new [] { typeof(int) })]
        int? StatusTotalConflict { get;  }
        /// <summary>Number of errors in the import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of errors in the import job.",
        SerializedName = @"totalErrors",
        PossibleTypes = new [] { typeof(int) })]
        int? StatusTotalError { get;  }

    }
    /// An import job instance. Follows Azure Resource Manager standards: https://github.com/Azure/azure-resource-manager-rpc/blob/master/v1.0/resource-api-reference.md
    internal partial interface IImportJobInternal :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.ITrackedResourceInternal
    {
        /// <summary>
        /// The administrative status of the import job. Possible values: 'Active', 'Cancel'. Passing in a value of 'Cancel' will
        /// cancel the current active import job. By default it is set to 'Active'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Active", "Cancel")]
        string AdminStatus { get; set; }

        string AzureAsyncOperation { get; set; }
        /// <summary>
        /// How the import job will handle conflicts. For example, if the import job is trying to bring in a directory, but a file
        /// is at that path, how it handles it. Fail indicates that the import job should stop immediately and not do anything with
        /// the conflict. Skip indicates that it should pass over the conflict. OverwriteIfDirty causes the import job to delete and
        /// re-import the file or directory if it is a conflicting type, is dirty, or was not previously imported. OverwriteAlways
        /// extends OverwriteIfDirty to include releasing files that had been restored but were not dirty. Please reference https://learn.microsoft.com/en-us/azure/azure-managed-lustre/
        /// for a thorough explanation of these resolution modes.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Fail", "Skip", "OverwriteIfDirty", "OverwriteAlways")]
        string ConflictResolutionMode { get; set; }
        /// <summary>
        /// An array of blob paths/prefixes that get imported into the cluster namespace. It has '/' as the default value.
        /// </summary>
        System.Collections.Generic.List<string> ImportPrefix { get; set; }
        /// <summary>
        /// Total non-conflict oriented errors the import job will tolerate before exiting with failure. -1 means infinite. 0 means
        /// exit immediately and is the default.
        /// </summary>
        int? MaximumError { get; set; }
        /// <summary>Properties of the import job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobProperties Property { get; set; }
        /// <summary>ARM provisioning state.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Succeeded", "Failed", "Creating", "Deleting", "Updating", "Canceled")]
        string ProvisioningState { get; set; }
        /// <summary>The status of the import</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IImportJobPropertiesStatus Status { get; set; }
        /// <summary>
        /// A recent and frequently updated rate of total files, directories, and symlinks imported per second.
        /// </summary>
        long? StatusBlobsImportedPerSecond { get; set; }
        /// <summary>A recent and frequently updated rate of blobs walked per second.</summary>
        long? StatusBlobsWalkedPerSecond { get; set; }
        /// <summary>New or modified directories that have been imported into the filesystem.</summary>
        long? StatusImportedDirectory { get; set; }
        /// <summary>New or modified files that have been imported into the filesystem.</summary>
        long? StatusImportedFile { get; set; }
        /// <summary>Newly added symbolic links into the filesystem.</summary>
        long? StatusImportedSymlink { get; set; }
        /// <summary>The time (in UTC) of the last completed import job.</summary>
        global::System.DateTime? StatusLastCompletionTime { get; set; }
        /// <summary>The time (in UTC) the latest import job started.</summary>
        global::System.DateTime? StatusLastStartedTime { get; set; }
        /// <summary>The status message of the import job.</summary>
        string StatusMessage { get; set; }
        /// <summary>Directories that already exist in the filesystem and have not been modified.</summary>
        long? StatusPreexistingDirectory { get; set; }
        /// <summary>Files that already exist in the filesystem and have not been modified.</summary>
        long? StatusPreexistingFile { get; set; }
        /// <summary>Symbolic links that already exist in the filesystem and have not been modified.</summary>
        long? StatusPreexistingSymlink { get; set; }
        /// <summary>
        /// The operational state of the import job. InProgress indicates the import is still running. Canceled indicates it has been
        /// canceled by the user. Completed indicates import finished, successfully importing all discovered blobs into the Lustre
        /// namespace. CompletedPartial indicates the import finished but some blobs either were found to be conflicting and could
        /// not be imported or other errors were encountered. Failed means the import was unable to complete due to a fatal error.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("InProgress", "Cancelling", "Canceled", "Completed", "CompletedPartial", "Failed")]
        string StatusState { get; set; }
        /// <summary>The total blobs that have been imported since import began.</summary>
        long? StatusTotalBlobsImported { get; set; }
        /// <summary>The total blob objects walked.</summary>
        long? StatusTotalBlobsWalked { get; set; }
        /// <summary>Number of conflicts in the import job.</summary>
        int? StatusTotalConflict { get; set; }
        /// <summary>Number of errors in the import job.</summary>
        int? StatusTotalError { get; set; }

    }
}