// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>The status of the auto import job.</summary>
    public partial class AutoImportJobPropertiesStatus :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatus,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal
    {

        /// <summary>Backing field for <see cref="BlobSyncEvent" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents _blobSyncEvent;

        /// <summary>The storage account blob change feed status of the auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents BlobSyncEvent { get => (this._blobSyncEvent = this._blobSyncEvent ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AutoImportJobPropertiesStatusBlobSyncEvents()); }

        /// <summary>Number of deletions during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventDeletion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).Deletion; }

        /// <summary>Number of directories imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventImportedDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedDirectory; }

        /// <summary>Number of files imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventImportedFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedFile; }

        /// <summary>Number of symlinks imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventImportedSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedSymlink; }

        /// <summary>Date and time of the last Change Feed event consumed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? BlobSyncEventLastChangeFeedEventConsumedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).LastChangeFeedEventConsumedTime; }

        /// <summary>Date and time when last fully synchronized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public global::System.DateTime? BlobSyncEventLastTimeFullySynchronized { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).LastTimeFullySynchronized; }

        /// <summary>Number of preexisting directories during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventPreexistingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingDirectory; }

        /// <summary>Number of preexisting files during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventPreexistingFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingFile; }

        /// <summary>Number of preexisting symlinks during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventPreexistingSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingSymlink; }

        /// <summary>Rate of blob import per second during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventRateOfBlobImport { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).RateOfBlobImport; }

        /// <summary>Total number of blobs imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventTotalBlobsImported { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalBlobsImported; }

        /// <summary>Total conflicts encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventTotalConflict { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalConflict; }

        /// <summary>Total errors encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? BlobSyncEventTotalError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalError; }

        /// <summary>Backing field for <see cref="ImportedDirectory" /> property.</summary>
        private long? _importedDirectory;

        /// <summary>Number of directories imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedDirectory { get => this._importedDirectory; }

        /// <summary>Backing field for <see cref="ImportedFile" /> property.</summary>
        private long? _importedFile;

        /// <summary>Number of files imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedFile { get => this._importedFile; }

        /// <summary>Backing field for <see cref="ImportedSymlink" /> property.</summary>
        private long? _importedSymlink;

        /// <summary>Number of symlinks imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? ImportedSymlink { get => this._importedSymlink; }

        /// <summary>Backing field for <see cref="LastCompletionTimeUtc" /> property.</summary>
        private global::System.DateTime? _lastCompletionTimeUtc;

        /// <summary>The time (in UTC) of the last completed auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? LastCompletionTimeUtc { get => this._lastCompletionTimeUtc; }

        /// <summary>Backing field for <see cref="LastStartedTimeUtc" /> property.</summary>
        private global::System.DateTime? _lastStartedTimeUtc;

        /// <summary>The time (in UTC) the latest auto import job started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? LastStartedTimeUtc { get => this._lastStartedTimeUtc; }

        /// <summary>Internal Acessors for BlobSyncEvent</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEvent { get => (this._blobSyncEvent = this._blobSyncEvent ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AutoImportJobPropertiesStatusBlobSyncEvents()); set { {_blobSyncEvent = value;} } }

        /// <summary>Internal Acessors for BlobSyncEventDeletion</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventDeletion { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).Deletion; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).Deletion = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventImportedDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventImportedDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedDirectory = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventImportedFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventImportedFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedFile = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventImportedSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventImportedSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedSymlink; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).ImportedSymlink = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventLastChangeFeedEventConsumedTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventLastChangeFeedEventConsumedTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).LastChangeFeedEventConsumedTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).LastChangeFeedEventConsumedTime = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for BlobSyncEventLastTimeFullySynchronized</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventLastTimeFullySynchronized { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).LastTimeFullySynchronized; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).LastTimeFullySynchronized = value ?? default(global::System.DateTime); }

        /// <summary>Internal Acessors for BlobSyncEventPreexistingDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventPreexistingDirectory { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingDirectory; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingDirectory = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventPreexistingFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventPreexistingFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingFile = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventPreexistingSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventPreexistingSymlink { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingSymlink; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).PreexistingSymlink = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventRateOfBlobImport</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventRateOfBlobImport { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).RateOfBlobImport; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).RateOfBlobImport = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventTotalBlobsImported</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventTotalBlobsImported { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalBlobsImported; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalBlobsImported = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventTotalConflict</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventTotalConflict { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalConflict; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalConflict = value ?? default(long); }

        /// <summary>Internal Acessors for BlobSyncEventTotalError</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.BlobSyncEventTotalError { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalError; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEventsInternal)BlobSyncEvent).TotalError = value ?? default(long); }

        /// <summary>Internal Acessors for ImportedDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.ImportedDirectory { get => this._importedDirectory; set { {_importedDirectory = value;} } }

        /// <summary>Internal Acessors for ImportedFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.ImportedFile { get => this._importedFile; set { {_importedFile = value;} } }

        /// <summary>Internal Acessors for ImportedSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.ImportedSymlink { get => this._importedSymlink; set { {_importedSymlink = value;} } }

        /// <summary>Internal Acessors for LastCompletionTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.LastCompletionTimeUtc { get => this._lastCompletionTimeUtc; set { {_lastCompletionTimeUtc = value;} } }

        /// <summary>Internal Acessors for LastStartedTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.LastStartedTimeUtc { get => this._lastStartedTimeUtc; set { {_lastStartedTimeUtc = value;} } }

        /// <summary>Internal Acessors for PreexistingDirectory</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.PreexistingDirectory { get => this._preexistingDirectory; set { {_preexistingDirectory = value;} } }

        /// <summary>Internal Acessors for PreexistingFile</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.PreexistingFile { get => this._preexistingFile; set { {_preexistingFile = value;} } }

        /// <summary>Internal Acessors for PreexistingSymlink</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.PreexistingSymlink { get => this._preexistingSymlink; set { {_preexistingSymlink = value;} } }

        /// <summary>Internal Acessors for RateOfBlobImport</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.RateOfBlobImport { get => this._rateOfBlobImport; set { {_rateOfBlobImport = value;} } }

        /// <summary>Internal Acessors for RateOfBlobWalk</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.RateOfBlobWalk { get => this._rateOfBlobWalk; set { {_rateOfBlobWalk = value;} } }

        /// <summary>Internal Acessors for ScanEndTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.ScanEndTime { get => this._scanEndTime; set { {_scanEndTime = value;} } }

        /// <summary>Internal Acessors for ScanStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.ScanStartTime { get => this._scanStartTime; set { {_scanStartTime = value;} } }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Internal Acessors for StatusCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.StatusCode { get => this._statusCode; set { {_statusCode = value;} } }

        /// <summary>Internal Acessors for StatusMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.StatusMessage { get => this._statusMessage; set { {_statusMessage = value;} } }

        /// <summary>Internal Acessors for TotalBlobsImported</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.TotalBlobsImported { get => this._totalBlobsImported; set { {_totalBlobsImported = value;} } }

        /// <summary>Internal Acessors for TotalBlobsWalked</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.TotalBlobsWalked { get => this._totalBlobsWalked; set { {_totalBlobsWalked = value;} } }

        /// <summary>Internal Acessors for TotalConflict</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.TotalConflict { get => this._totalConflict; set { {_totalConflict = value;} } }

        /// <summary>Internal Acessors for TotalError</summary>
        long? Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusInternal.TotalError { get => this._totalError; set { {_totalError = value;} } }

        /// <summary>Backing field for <see cref="PreexistingDirectory" /> property.</summary>
        private long? _preexistingDirectory;

        /// <summary>Number of preexisting directories during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingDirectory { get => this._preexistingDirectory; }

        /// <summary>Backing field for <see cref="PreexistingFile" /> property.</summary>
        private long? _preexistingFile;

        /// <summary>Number of preexisting files during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingFile { get => this._preexistingFile; }

        /// <summary>Backing field for <see cref="PreexistingSymlink" /> property.</summary>
        private long? _preexistingSymlink;

        /// <summary>Number of preexisting symlinks during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? PreexistingSymlink { get => this._preexistingSymlink; }

        /// <summary>Backing field for <see cref="RateOfBlobImport" /> property.</summary>
        private long? _rateOfBlobImport;

        /// <summary>Rate of blob import during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? RateOfBlobImport { get => this._rateOfBlobImport; }

        /// <summary>Backing field for <see cref="RateOfBlobWalk" /> property.</summary>
        private long? _rateOfBlobWalk;

        /// <summary>Rate of blobs walked during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? RateOfBlobWalk { get => this._rateOfBlobWalk; }

        /// <summary>Backing field for <see cref="ScanEndTime" /> property.</summary>
        private global::System.DateTime? _scanEndTime;

        /// <summary>Date and time of when the full scan ended.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? ScanEndTime { get => this._scanEndTime; }

        /// <summary>Backing field for <see cref="ScanStartTime" /> property.</summary>
        private global::System.DateTime? _scanStartTime;

        /// <summary>Date and time of when the currently running full scan began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public global::System.DateTime? ScanStartTime { get => this._scanStartTime; }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>The state of the auto import operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Backing field for <see cref="StatusCode" /> property.</summary>
        private string _statusCode;

        /// <summary>Server-defined status code for auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string StatusCode { get => this._statusCode; }

        /// <summary>Backing field for <see cref="StatusMessage" /> property.</summary>
        private string _statusMessage;

        /// <summary>Server-defined status message for auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public string StatusMessage { get => this._statusMessage; }

        /// <summary>Backing field for <see cref="TotalBlobsImported" /> property.</summary>
        private long? _totalBlobsImported;

        /// <summary>Total number of blobs imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalBlobsImported { get => this._totalBlobsImported; }

        /// <summary>Backing field for <see cref="TotalBlobsWalked" /> property.</summary>
        private long? _totalBlobsWalked;

        /// <summary>Total number of blobs walked during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalBlobsWalked { get => this._totalBlobsWalked; }

        /// <summary>Backing field for <see cref="TotalConflict" /> property.</summary>
        private long? _totalConflict;

        /// <summary>Total conflicts encountered during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalConflict { get => this._totalConflict; }

        /// <summary>Backing field for <see cref="TotalError" /> property.</summary>
        private long? _totalError;

        /// <summary>Total errors encountered during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        public long? TotalError { get => this._totalError; }

        /// <summary>Creates an new <see cref="AutoImportJobPropertiesStatus" /> instance.</summary>
        public AutoImportJobPropertiesStatus()
        {

        }
    }
    /// The status of the auto import job.
    public partial interface IAutoImportJobPropertiesStatus :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>Number of deletions during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of deletions during auto import.",
        SerializedName = @"deletions",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventDeletion { get;  }
        /// <summary>Number of directories imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of directories imported during auto import.",
        SerializedName = @"importedDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventImportedDirectory { get;  }
        /// <summary>Number of files imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of files imported during auto import.",
        SerializedName = @"importedFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventImportedFile { get;  }
        /// <summary>Number of symlinks imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of symlinks imported during auto import.",
        SerializedName = @"importedSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventImportedSymlink { get;  }
        /// <summary>Date and time of the last Change Feed event consumed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Date and time of the last Change Feed event consumed.",
        SerializedName = @"lastChangeFeedEventConsumedTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BlobSyncEventLastChangeFeedEventConsumedTime { get;  }
        /// <summary>Date and time when last fully synchronized.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Date and time when last fully synchronized.",
        SerializedName = @"lastTimeFullySynchronized",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? BlobSyncEventLastTimeFullySynchronized { get;  }
        /// <summary>Number of preexisting directories during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting directories during auto import.",
        SerializedName = @"preexistingDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventPreexistingDirectory { get;  }
        /// <summary>Number of preexisting files during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting files during auto import.",
        SerializedName = @"preexistingFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventPreexistingFile { get;  }
        /// <summary>Number of preexisting symlinks during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting symlinks during auto import.",
        SerializedName = @"preexistingSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventPreexistingSymlink { get;  }
        /// <summary>Rate of blob import per second during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Rate of blob import per second during auto import.",
        SerializedName = @"rateOfBlobImport",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventRateOfBlobImport { get;  }
        /// <summary>Total number of blobs imported during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total number of blobs imported during auto import.",
        SerializedName = @"totalBlobsImported",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventTotalBlobsImported { get;  }
        /// <summary>Total conflicts encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total conflicts encountered during auto import.",
        SerializedName = @"totalConflicts",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventTotalConflict { get;  }
        /// <summary>Total errors encountered during auto import.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total errors encountered during auto import.",
        SerializedName = @"totalErrors",
        PossibleTypes = new [] { typeof(long) })]
        long? BlobSyncEventTotalError { get;  }
        /// <summary>Number of directories imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of directories imported during full scan.",
        SerializedName = @"importedDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedDirectory { get;  }
        /// <summary>Number of files imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of files imported during full scan.",
        SerializedName = @"importedFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedFile { get;  }
        /// <summary>Number of symlinks imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of symlinks imported during full scan.",
        SerializedName = @"importedSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? ImportedSymlink { get;  }
        /// <summary>The time (in UTC) of the last completed auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time (in UTC) of the last completed auto import job.",
        SerializedName = @"lastCompletionTimeUTC",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastCompletionTimeUtc { get;  }
        /// <summary>The time (in UTC) the latest auto import job started.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The time (in UTC) the latest auto import job started.",
        SerializedName = @"lastStartedTimeUTC",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastStartedTimeUtc { get;  }
        /// <summary>Number of preexisting directories during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting directories during full scan.",
        SerializedName = @"preexistingDirectories",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingDirectory { get;  }
        /// <summary>Number of preexisting files during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting files during full scan.",
        SerializedName = @"preexistingFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingFile { get;  }
        /// <summary>Number of preexisting symlinks during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Number of preexisting symlinks during full scan.",
        SerializedName = @"preexistingSymlinks",
        PossibleTypes = new [] { typeof(long) })]
        long? PreexistingSymlink { get;  }
        /// <summary>Rate of blob import during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Rate of blob import during full scan.",
        SerializedName = @"rateOfBlobImport",
        PossibleTypes = new [] { typeof(long) })]
        long? RateOfBlobImport { get;  }
        /// <summary>Rate of blobs walked during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Rate of blobs walked during full scan.",
        SerializedName = @"rateOfBlobWalk",
        PossibleTypes = new [] { typeof(long) })]
        long? RateOfBlobWalk { get;  }
        /// <summary>Date and time of when the full scan ended.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Date and time of when the full scan ended.",
        SerializedName = @"scanEndTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ScanEndTime { get;  }
        /// <summary>Date and time of when the currently running full scan began.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Date and time of when the currently running full scan began.",
        SerializedName = @"scanStartTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ScanStartTime { get;  }
        /// <summary>The state of the auto import operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The state of the auto import operation.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("InProgress", "Failed", "Disabling", "Disabled")]
        string State { get;  }
        /// <summary>Server-defined status code for auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Server-defined status code for auto import job.",
        SerializedName = @"statusCode",
        PossibleTypes = new [] { typeof(string) })]
        string StatusCode { get;  }
        /// <summary>Server-defined status message for auto import job.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Server-defined status message for auto import job.",
        SerializedName = @"statusMessage",
        PossibleTypes = new [] { typeof(string) })]
        string StatusMessage { get;  }
        /// <summary>Total number of blobs imported during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total number of blobs imported during full scan.",
        SerializedName = @"totalBlobsImported",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBlobsImported { get;  }
        /// <summary>Total number of blobs walked during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total number of blobs walked during full scan.",
        SerializedName = @"totalBlobsWalked",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalBlobsWalked { get;  }
        /// <summary>Total conflicts encountered during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total conflicts encountered during full scan.",
        SerializedName = @"totalConflicts",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalConflict { get;  }
        /// <summary>Total errors encountered during full scan.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Total errors encountered during full scan.",
        SerializedName = @"totalErrors",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalError { get;  }

    }
    /// The status of the auto import job.
    internal partial interface IAutoImportJobPropertiesStatusInternal

    {
        /// <summary>The storage account blob change feed status of the auto import job.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents BlobSyncEvent { get; set; }
        /// <summary>Number of deletions during auto import.</summary>
        long? BlobSyncEventDeletion { get; set; }
        /// <summary>Number of directories imported during auto import.</summary>
        long? BlobSyncEventImportedDirectory { get; set; }
        /// <summary>Number of files imported during auto import.</summary>
        long? BlobSyncEventImportedFile { get; set; }
        /// <summary>Number of symlinks imported during auto import.</summary>
        long? BlobSyncEventImportedSymlink { get; set; }
        /// <summary>Date and time of the last Change Feed event consumed.</summary>
        global::System.DateTime? BlobSyncEventLastChangeFeedEventConsumedTime { get; set; }
        /// <summary>Date and time when last fully synchronized.</summary>
        global::System.DateTime? BlobSyncEventLastTimeFullySynchronized { get; set; }
        /// <summary>Number of preexisting directories during auto import.</summary>
        long? BlobSyncEventPreexistingDirectory { get; set; }
        /// <summary>Number of preexisting files during auto import.</summary>
        long? BlobSyncEventPreexistingFile { get; set; }
        /// <summary>Number of preexisting symlinks during auto import.</summary>
        long? BlobSyncEventPreexistingSymlink { get; set; }
        /// <summary>Rate of blob import per second during auto import.</summary>
        long? BlobSyncEventRateOfBlobImport { get; set; }
        /// <summary>Total number of blobs imported during auto import.</summary>
        long? BlobSyncEventTotalBlobsImported { get; set; }
        /// <summary>Total conflicts encountered during auto import.</summary>
        long? BlobSyncEventTotalConflict { get; set; }
        /// <summary>Total errors encountered during auto import.</summary>
        long? BlobSyncEventTotalError { get; set; }
        /// <summary>Number of directories imported during full scan.</summary>
        long? ImportedDirectory { get; set; }
        /// <summary>Number of files imported during full scan.</summary>
        long? ImportedFile { get; set; }
        /// <summary>Number of symlinks imported during full scan.</summary>
        long? ImportedSymlink { get; set; }
        /// <summary>The time (in UTC) of the last completed auto import job.</summary>
        global::System.DateTime? LastCompletionTimeUtc { get; set; }
        /// <summary>The time (in UTC) the latest auto import job started.</summary>
        global::System.DateTime? LastStartedTimeUtc { get; set; }
        /// <summary>Number of preexisting directories during full scan.</summary>
        long? PreexistingDirectory { get; set; }
        /// <summary>Number of preexisting files during full scan.</summary>
        long? PreexistingFile { get; set; }
        /// <summary>Number of preexisting symlinks during full scan.</summary>
        long? PreexistingSymlink { get; set; }
        /// <summary>Rate of blob import during full scan.</summary>
        long? RateOfBlobImport { get; set; }
        /// <summary>Rate of blobs walked during full scan.</summary>
        long? RateOfBlobWalk { get; set; }
        /// <summary>Date and time of when the full scan ended.</summary>
        global::System.DateTime? ScanEndTime { get; set; }
        /// <summary>Date and time of when the currently running full scan began.</summary>
        global::System.DateTime? ScanStartTime { get; set; }
        /// <summary>The state of the auto import operation.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("InProgress", "Failed", "Disabling", "Disabled")]
        string State { get; set; }
        /// <summary>Server-defined status code for auto import job.</summary>
        string StatusCode { get; set; }
        /// <summary>Server-defined status message for auto import job.</summary>
        string StatusMessage { get; set; }
        /// <summary>Total number of blobs imported during full scan.</summary>
        long? TotalBlobsImported { get; set; }
        /// <summary>Total number of blobs walked during full scan.</summary>
        long? TotalBlobsWalked { get; set; }
        /// <summary>Total conflicts encountered during full scan.</summary>
        long? TotalConflict { get; set; }
        /// <summary>Total errors encountered during full scan.</summary>
        long? TotalError { get; set; }

    }
}