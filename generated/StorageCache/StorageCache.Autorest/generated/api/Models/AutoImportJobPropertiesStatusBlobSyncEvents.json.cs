// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>The storage account blob change feed status of the auto import job.</summary>
    public partial class AutoImportJobPropertiesStatusBlobSyncEvents
    {

        /// <summary>
        /// <c>AfterFromJson</c> will be called after the json deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>

        partial void AfterFromJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json);

        /// <summary>
        /// <c>AfterToJson</c> will be called after the json serialization has finished, allowing customization of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject"
        /// /> before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>

        partial void AfterToJson(ref Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject container);

        /// <summary>
        /// <c>BeforeFromJson</c> will be called before the json deserialization has commenced, allowing complete customization of
        /// the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name= "returnNow" />
        /// output parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="json">The JsonNode that should be deserialized into this object.</param>
        /// <param name="returnNow">Determines if the rest of the deserialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeFromJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json, ref bool returnNow);

        /// <summary>
        /// <c>BeforeToJson</c> will be called before the json serialization has commenced, allowing complete customization of the
        /// object before it is serialized.
        /// If you wish to disable the default serialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="container">The JSON container that the serialization result will be placed in.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeToJson(ref Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject container, ref bool returnNow);

        /// <summary>
        /// Deserializes a Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject into a new instance of <see cref="AutoImportJobPropertiesStatusBlobSyncEvents" />.
        /// </summary>
        /// <param name="json">A Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject instance to deserialize from.</param>
        internal AutoImportJobPropertiesStatusBlobSyncEvents(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json)
        {
            bool returnNow = false;
            BeforeFromJson(json, ref returnNow);
            if (returnNow)
            {
                return;
            }
            {_importedFile = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("importedFiles"), out var __jsonImportedFiles) ? (long?)__jsonImportedFiles : _importedFile;}
            {_importedDirectory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("importedDirectories"), out var __jsonImportedDirectories) ? (long?)__jsonImportedDirectories : _importedDirectory;}
            {_importedSymlink = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("importedSymlinks"), out var __jsonImportedSymlinks) ? (long?)__jsonImportedSymlinks : _importedSymlink;}
            {_preexistingFile = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("preexistingFiles"), out var __jsonPreexistingFiles) ? (long?)__jsonPreexistingFiles : _preexistingFile;}
            {_preexistingDirectory = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("preexistingDirectories"), out var __jsonPreexistingDirectories) ? (long?)__jsonPreexistingDirectories : _preexistingDirectory;}
            {_preexistingSymlink = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("preexistingSymlinks"), out var __jsonPreexistingSymlinks) ? (long?)__jsonPreexistingSymlinks : _preexistingSymlink;}
            {_totalBlobsImported = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("totalBlobsImported"), out var __jsonTotalBlobsImported) ? (long?)__jsonTotalBlobsImported : _totalBlobsImported;}
            {_rateOfBlobImport = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("rateOfBlobImport"), out var __jsonRateOfBlobImport) ? (long?)__jsonRateOfBlobImport : _rateOfBlobImport;}
            {_totalError = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("totalErrors"), out var __jsonTotalErrors) ? (long?)__jsonTotalErrors : _totalError;}
            {_totalConflict = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("totalConflicts"), out var __jsonTotalConflicts) ? (long?)__jsonTotalConflicts : _totalConflict;}
            {_deletion = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber>("deletions"), out var __jsonDeletions) ? (long?)__jsonDeletions : _deletion;}
            {_lastChangeFeedEventConsumedTime = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString>("lastChangeFeedEventConsumedTime"), out var __jsonLastChangeFeedEventConsumedTime) ? global::System.DateTime.TryParse((string)__jsonLastChangeFeedEventConsumedTime, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastChangeFeedEventConsumedTimeValue) ? __jsonLastChangeFeedEventConsumedTimeValue : _lastChangeFeedEventConsumedTime : _lastChangeFeedEventConsumedTime;}
            {_lastTimeFullySynchronized = If( json?.PropertyT<Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString>("lastTimeFullySynchronized"), out var __jsonLastTimeFullySynchronized) ? global::System.DateTime.TryParse((string)__jsonLastTimeFullySynchronized, global::System.Globalization.CultureInfo.InvariantCulture, global::System.Globalization.DateTimeStyles.AdjustToUniversal, out var __jsonLastTimeFullySynchronizedValue) ? __jsonLastTimeFullySynchronizedValue : _lastTimeFullySynchronized : _lastTimeFullySynchronized;}
            AfterFromJson(json);
        }

        /// <summary>
        /// Deserializes a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode"/> into an instance of Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents.
        /// </summary>
        /// <param name="node">a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode" /> to deserialize from.</param>
        /// <returns>
        /// an instance of Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAutoImportJobPropertiesStatusBlobSyncEvents FromJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode node)
        {
            return node is Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject json ? new AutoImportJobPropertiesStatusBlobSyncEvents(json) : null;
        }

        /// <summary>
        /// Serializes this instance of <see cref="AutoImportJobPropertiesStatusBlobSyncEvents" /> into a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode"
        /// />.
        /// </summary>
        /// <param name="container">The <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject"/> container to serialize this object into. If the caller
        /// passes in <c>null</c>, a new instance will be created and returned to the caller.</param>
        /// <param name="serializationMode">Allows the caller to choose the depth of the serialization. See <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode"/>.</param>
        /// <returns>
        /// a serialized instance of <see cref="AutoImportJobPropertiesStatusBlobSyncEvents" /> as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode"
        /// />.
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode ToJson(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject container, Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode serializationMode)
        {
            container = container ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonObject();

            bool returnNow = false;
            BeforeToJson(ref container, ref returnNow);
            if (returnNow)
            {
                return container;
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._importedFile ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._importedFile) : null, "importedFiles" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._importedDirectory ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._importedDirectory) : null, "importedDirectories" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._importedSymlink ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._importedSymlink) : null, "importedSymlinks" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._preexistingFile ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._preexistingFile) : null, "preexistingFiles" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._preexistingDirectory ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._preexistingDirectory) : null, "preexistingDirectories" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._preexistingSymlink ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._preexistingSymlink) : null, "preexistingSymlinks" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._totalBlobsImported ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._totalBlobsImported) : null, "totalBlobsImported" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._rateOfBlobImport ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._rateOfBlobImport) : null, "rateOfBlobImport" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._totalError ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._totalError) : null, "totalErrors" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._totalConflict ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._totalConflict) : null, "totalConflicts" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._deletion ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode)new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNumber((long)this._deletion) : null, "deletions" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._lastChangeFeedEventConsumedTime ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString(this._lastChangeFeedEventConsumedTime?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastChangeFeedEventConsumedTime" ,container.Add );
            }
            if (serializationMode.HasFlag(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.SerializationMode.IncludeRead))
            {
                AddIf( null != this._lastTimeFullySynchronized ? (Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonNode) new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Json.JsonString(this._lastTimeFullySynchronized?.ToString(@"yyyy'-'MM'-'dd'T'HH':'mm':'ss.fffffffK",global::System.Globalization.CultureInfo.InvariantCulture)) : null, "lastTimeFullySynchronized" ,container.Add );
            }
            AfterToJson(ref container);
            return container;
        }
    }
}