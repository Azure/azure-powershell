// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Extensions;

    /// <summary>Properties of the AML file system.</summary>
    public partial class AmlFilesystemUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="EncryptionSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettings _encryptionSetting;

        /// <summary>Specifies encryption settings of the AML file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettings EncryptionSetting { get => (this._encryptionSetting = this._encryptionSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AmlFilesystemEncryptionSettings()); set => this._encryptionSetting = value; }

        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string KeyEncryptionKeyUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeyUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeyUrl = value ?? null; }

        /// <summary>Backing field for <see cref="MaintenanceWindow" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindow _maintenanceWindow;

        /// <summary>Start time of a 30-minute weekly maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindow MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AmlFilesystemUpdatePropertiesMaintenanceWindow()); set => this._maintenanceWindow = value; }

        /// <summary>Day of the week on which the maintenance window will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string MaintenanceWindowDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindowInternal)MaintenanceWindow).DayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindowInternal)MaintenanceWindow).DayOfWeek = value ?? null; }

        /// <summary>The time of day (in UTC) to start the maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string MaintenanceWindowTimeOfDayUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindowInternal)MaintenanceWindow).TimeOfDayUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindowInternal)MaintenanceWindow).TimeOfDayUtc = value ?? null; }

        /// <summary>Internal Acessors for EncryptionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal.EncryptionSetting { get => (this._encryptionSetting = this._encryptionSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AmlFilesystemEncryptionSettings()); set { {_encryptionSetting = value;} } }

        /// <summary>Internal Acessors for EncryptionSettingKeyEncryptionKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IKeyVaultKeyReference Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal.EncryptionSettingKeyEncryptionKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKey = value ?? null /* model class */; }

        /// <summary>Internal Acessors for KeyEncryptionKeySourceVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IKeyVaultKeyReferenceSourceVault Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal.KeyEncryptionKeySourceVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeySourceVault; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).KeyEncryptionKeySourceVault = value ?? null /* model class */; }

        /// <summary>Internal Acessors for MaintenanceWindow</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindow Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal.MaintenanceWindow { get => (this._maintenanceWindow = this._maintenanceWindow ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AmlFilesystemUpdatePropertiesMaintenanceWindow()); set { {_maintenanceWindow = value;} } }

        /// <summary>Internal Acessors for RootSquashSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettings Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal.RootSquashSetting { get => (this._rootSquashSetting = this._rootSquashSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AmlFilesystemRootSquashSettings()); set { {_rootSquashSetting = value;} } }

        /// <summary>Internal Acessors for RootSquashSettingStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesInternal.RootSquashSettingStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).Status; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).Status = value ?? null; }

        /// <summary>Backing field for <see cref="RootSquashSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettings _rootSquashSetting;

        /// <summary>Specifies root squash settings of the AML file system.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettings RootSquashSetting { get => (this._rootSquashSetting = this._rootSquashSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.AmlFilesystemRootSquashSettings()); set => this._rootSquashSetting = value; }

        /// <summary>
        /// Squash mode of the AML file system. 'All': User and Group IDs on files will be squashed to the provided values for all
        /// users on non-trusted systems. 'RootOnly': User and Group IDs on files will be squashed to provided values for solely the
        /// root user on non-trusted systems. 'None': No squashing of User and Group IDs is performed for any users on any systems.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string RootSquashSettingMode { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).Mode; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).Mode = value ?? null; }

        /// <summary>Semicolon separated NID IP Address list(s) to be added to the TrustedSystems.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string RootSquashSettingNoSquashNidList { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).NoSquashNidList; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).NoSquashNidList = value ?? null; }

        /// <summary>Group ID to squash to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? RootSquashSettingSquashGid { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).SquashGid; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).SquashGid = value ?? default(long); }

        /// <summary>User ID to squash to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public long? RootSquashSettingSquashUid { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).SquashUid; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).SquashUid = value ?? default(long); }

        /// <summary>AML file system squash status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string RootSquashSettingStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettingsInternal)RootSquashSetting).Status; }

        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Origin(Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PropertyOrigin.Inlined)]
        public string SourceVaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).SourceVaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettingsInternal)EncryptionSetting).SourceVaultId = value ?? null; }

        /// <summary>Creates an new <see cref="AmlFilesystemUpdateProperties" /> instance.</summary>
        public AmlFilesystemUpdateProperties()
        {

        }
    }
    /// Properties of the AML file system.
    public partial interface IAmlFilesystemUpdateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.IJsonSerializable
    {
        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The URL referencing a key encryption key in key vault.",
        SerializedName = @"keyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Day of the week on which the maintenance window will occur.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Day of the week on which the maintenance window will occur.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")]
        string MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>The time of day (in UTC) to start the maintenance window.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The time of day (in UTC) to start the maintenance window.",
        SerializedName = @"timeOfDayUTC",
        PossibleTypes = new [] { typeof(string) })]
        string MaintenanceWindowTimeOfDayUtc { get; set; }
        /// <summary>
        /// Squash mode of the AML file system. 'All': User and Group IDs on files will be squashed to the provided values for all
        /// users on non-trusted systems. 'RootOnly': User and Group IDs on files will be squashed to provided values for solely the
        /// root user on non-trusted systems. 'None': No squashing of User and Group IDs is performed for any users on any systems.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Squash mode of the AML file system. 'All': User and Group IDs on files will be squashed to the provided values for all users on non-trusted systems. 'RootOnly': User and Group IDs on files will be squashed to provided values for solely the root user on non-trusted systems. 'None': No squashing of User and Group IDs is performed for any users on any systems.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("None", "RootOnly", "All")]
        string RootSquashSettingMode { get; set; }
        /// <summary>Semicolon separated NID IP Address list(s) to be added to the TrustedSystems.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Semicolon separated NID IP Address list(s) to be added to the TrustedSystems.",
        SerializedName = @"noSquashNidLists",
        PossibleTypes = new [] { typeof(string) })]
        string RootSquashSettingNoSquashNidList { get; set; }
        /// <summary>Group ID to squash to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Group ID to squash to.",
        SerializedName = @"squashGID",
        PossibleTypes = new [] { typeof(long) })]
        long? RootSquashSettingSquashGid { get; set; }
        /// <summary>User ID to squash to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User ID to squash to.",
        SerializedName = @"squashUID",
        PossibleTypes = new [] { typeof(long) })]
        long? RootSquashSettingSquashUid { get; set; }
        /// <summary>AML file system squash status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"AML file system squash status.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        string RootSquashSettingStatus { get;  }
        /// <summary>Resource Id.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource Id.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SourceVaultId { get; set; }

    }
    /// Properties of the AML file system.
    internal partial interface IAmlFilesystemUpdatePropertiesInternal

    {
        /// <summary>Specifies encryption settings of the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemEncryptionSettings EncryptionSetting { get; set; }
        /// <summary>Specifies the location of the encryption key in Key Vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IKeyVaultKeyReference EncryptionSettingKeyEncryptionKey { get; set; }
        /// <summary>Describes a resource Id to source key vault.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IKeyVaultKeyReferenceSourceVault KeyEncryptionKeySourceVault { get; set; }
        /// <summary>The URL referencing a key encryption key in key vault.</summary>
        string KeyEncryptionKeyUrl { get; set; }
        /// <summary>Start time of a 30-minute weekly maintenance window.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemUpdatePropertiesMaintenanceWindow MaintenanceWindow { get; set; }
        /// <summary>Day of the week on which the maintenance window will occur.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")]
        string MaintenanceWindowDayOfWeek { get; set; }
        /// <summary>The time of day (in UTC) to start the maintenance window.</summary>
        string MaintenanceWindowTimeOfDayUtc { get; set; }
        /// <summary>Specifies root squash settings of the AML file system.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StorageCache.Models.IAmlFilesystemRootSquashSettings RootSquashSetting { get; set; }
        /// <summary>
        /// Squash mode of the AML file system. 'All': User and Group IDs on files will be squashed to the provided values for all
        /// users on non-trusted systems. 'RootOnly': User and Group IDs on files will be squashed to provided values for solely the
        /// root user on non-trusted systems. 'None': No squashing of User and Group IDs is performed for any users on any systems.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StorageCache.PSArgumentCompleterAttribute("None", "RootOnly", "All")]
        string RootSquashSettingMode { get; set; }
        /// <summary>Semicolon separated NID IP Address list(s) to be added to the TrustedSystems.</summary>
        string RootSquashSettingNoSquashNidList { get; set; }
        /// <summary>Group ID to squash to.</summary>
        long? RootSquashSettingSquashGid { get; set; }
        /// <summary>User ID to squash to.</summary>
        long? RootSquashSettingSquashUid { get; set; }
        /// <summary>AML file system squash status.</summary>
        string RootSquashSettingStatus { get; set; }
        /// <summary>Resource Id.</summary>
        string SourceVaultId { get; set; }

    }
}