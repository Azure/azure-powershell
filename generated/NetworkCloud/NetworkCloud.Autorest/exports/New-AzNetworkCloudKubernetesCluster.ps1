
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a new Kubernetes cluster or update the properties of the existing one.
.Description
Create a new Kubernetes cluster or update the properties of the existing one.
.Example
$tagHash = @{tags = "tag1" }
$agentPoolConfiguration = @{
    count = 1
    mode = "System"
    name = "agentPoolName"
    vmSkuName = "vmSkuName"
    administratorConfiguration = "administratorConfiguration"
}
$sshPublicKey = @{
    KeyData = "ssh-rsa aaaKyfsdx= fakekey@vm"
}
New-AzNetworkCloudKubernetesCluster -ResourceGroupName resourceGroupName `
                -KubernetesClusterName default -Location location `
                -ExtendedLocationName extendedLocationName `
                -ExtendedLocationType "CustomLocation" `
                -KubernetesVersion kubernetesVersion `
                -AadConfigurationAdminGroupObjectId adminGroupObjectIds `
                -AdminUsername "azureuser" `
                -SshPublicKey $sshPublicKey `
                -InitialAgentPoolConfiguration $agentPoolConfiguration `
                -NetworkConfigurationCloudServicesNetworkId cloudServicesNetworkId `
                -NetworkConfigurationCniNetworkId cniNetworkId `
                -SubscriptionId subscriptionId `
                -Tag $tagHash

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IKubernetesCluster
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ATTACHEDNETWORKCONFIGURATIONL2NETWORK <IL2NetworkAttachmentConfiguration[]>: The list of Layer 2 Networks and related configuration for attachment.
  NetworkId <String>: The resource ID of the network that is being configured for attachment.
  [PluginType <KubernetesPluginType?>]: The indicator of how this network will be utilized by the Kubernetes cluster.

ATTACHEDNETWORKCONFIGURATIONL3NETWORK <IL3NetworkAttachmentConfiguration[]>: The list of Layer 3 Networks and related configuration for attachment.
  NetworkId <String>: The resource ID of the network that is being configured for attachment.
  [IpamEnabled <L3NetworkConfigurationIpamEnabled?>]: The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
  [PluginType <KubernetesPluginType?>]: The indicator of how this network will be utilized by the Kubernetes cluster.

ATTACHEDNETWORKCONFIGURATIONTRUNKEDNETWORK <ITrunkedNetworkAttachmentConfiguration[]>: The list of Trunked Networks and related configuration for attachment.
  NetworkId <String>: The resource ID of the network that is being configured for attachment.
  [PluginType <KubernetesPluginType?>]: The indicator of how this network will be utilized by the Kubernetes cluster.

BGPADVERTISEMENT <IBgpAdvertisement[]>: The association of IP address pools to the communities and peers, allowing for announcement of IPs.
  IPAddressPool <String[]>: The names of the IP address pools associated with this announcement.
  [AdvertiseToFabric <AdvertiseToFabric?>]: The indicator of if this advertisement is also made to the network fabric associated with the Network Cloud Cluster. This field is ignored if fabricPeeringEnabled is set to False.
  [Community <String[]>]: The names of the BGP communities to be associated with the announcement, utilizing a BGP community string in 1234:1234 format.
  [Peer <String[]>]: The names of the BGP peers to limit this advertisement to. If no values are specified, all BGP peers will receive this advertisement.

BGPIPADDRESSPOOL <IIPAddressPool[]>: The list of pools of IP addresses that can be allocated to Load Balancer services.
  Address <String[]>: The list of IP address ranges. Each range can be a either a subnet in CIDR format or an explicit start-end range of IP addresses.
  Name <String>: The name used to identify this IP address pool for association with a BGP advertisement.
  [AutoAssign <BfdEnabled?>]: The indicator to determine if automatic allocation from the pool should occur.
  [OnlyUseHostIP <BfdEnabled?>]: The indicator to prevent the use of IP addresses ending with .0 and .255 for this pool. Enabling this option will only use IP addresses between .1 and .254 inclusive.

BGPPEER <IServiceLoadBalancerBgpPeer[]>: The list of additional BgpPeer entities that the Kubernetes cluster will peer with. All peering must be explicitly defined.
  Name <String>: The name used to identify this BGP peer for association with a BGP advertisement.
  PeerAddress <String>: The IPv4 or IPv6 address used to connect this BGP session.
  PeerAsn <Int64>: The autonomous system number expected from the remote end of the BGP session.
  [BfdEnabled <BfdEnabled?>]: The indicator of BFD enablement for this BgpPeer.
  [BgpMultiHop <BgpMultiHop?>]: The indicator to enable multi-hop peering support.
  [HoldTime <String>]: The requested BGP hold time value. This field uses ISO 8601 duration format, for example P1H.
  [KeepAliveTime <String>]: The requested BGP keepalive time value. This field uses ISO 8601 duration format, for example P1H.
  [MyAsn <Int64?>]: The autonomous system number used for the local end of the BGP session.
  [Password <String>]: The authentication password for routers enforcing TCP MD5 authenticated sessions.
  [PeerPort <Int64?>]: The port used to connect this BGP session.

CONTROLPLANENODECONFIGURATIONADMINPUBLICKEY <ISshPublicKey[]>: The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
  KeyData <String>: The SSH public key data.

INITIALAGENTPOOLCONFIGURATION <IInitialAgentPoolConfiguration[]>: The agent pools that are created with this Kubernetes cluster for running critical system services and workloads. This data in this field is only used during creation, and the field will be empty following the creation of the Kubernetes Cluster. After creation, the management of agent pools is done using the agentPools sub-resource.
  Count <Int64>: The number of virtual machines that use this configuration.
  Mode <AgentPoolMode>: The selection of how this agent pool is utilized, either as a system pool or a user pool. System pools run the features and critical services for the Kubernetes Cluster, while user pools are dedicated to user workloads. Every Kubernetes cluster must contain at least one system node pool with at least one node.
  Name <String>: The name that will be used for the agent pool resource representing this agent pool.
  VMSkuName <String>: The name of the VM SKU that determines the size of resources allocated for node VMs.
  [AdministratorConfigurationAdminUsername <String>]: The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes. If not supplied, a user name will be chosen by the service.
  [AdministratorConfigurationSshPublicKey <ISshPublicKey[]>]: The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
    KeyData <String>: The SSH public key data.
  [AgentOptionHugepagesCount <Int64?>]: The number of hugepages to allocate.
  [AgentOptionHugepagesSize <HugepagesSize?>]: The size of the hugepages to allocate.
  [AttachedNetworkConfigurationL2Network <IL2NetworkAttachmentConfiguration[]>]: The list of Layer 2 Networks and related configuration for attachment.
    NetworkId <String>: The resource ID of the network that is being configured for attachment.
    [PluginType <KubernetesPluginType?>]: The indicator of how this network will be utilized by the Kubernetes cluster.
  [AttachedNetworkConfigurationL3Network <IL3NetworkAttachmentConfiguration[]>]: The list of Layer 3 Networks and related configuration for attachment.
    NetworkId <String>: The resource ID of the network that is being configured for attachment.
    [IpamEnabled <L3NetworkConfigurationIpamEnabled?>]: The indication of whether this network will or will not perform IP address management and allocate IP addresses when attached.
    [PluginType <KubernetesPluginType?>]: The indicator of how this network will be utilized by the Kubernetes cluster.
  [AttachedNetworkConfigurationTrunkedNetwork <ITrunkedNetworkAttachmentConfiguration[]>]: The list of Trunked Networks and related configuration for attachment.
    NetworkId <String>: The resource ID of the network that is being configured for attachment.
    [PluginType <KubernetesPluginType?>]: The indicator of how this network will be utilized by the Kubernetes cluster.
  [AvailabilityZone <String[]>]: The list of availability zones of the Network Cloud cluster used for the provisioning of nodes in this agent pool. If not specified, all availability zones will be used.
  [Label <IKubernetesLabel[]>]: The labels applied to the nodes in this agent pool.
    Key <String>: The name of the label or taint.
    Value <String>: The value of the label or taint.
  [Taint <IKubernetesLabel[]>]: The taints applied to the nodes in this agent pool.
  [UpgradeSettingMaxSurge <String>]: The maximum number or percentage of nodes that are surged during upgrade. This can either be set to an integer (e.g. '5') or a percentage (e.g. '50%'). If a percentage is specified, it is the percentage of the total agent pool size at the time of the upgrade. For percentages, fractional nodes are rounded up. If not specified, the default is 1.

SSHPUBLICKEY <ISshPublicKey[]>: The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster. In some cases, specification of public keys may be required to produce a working environment.
  KeyData <String>: The SSH public key data.
.Link
https://learn.microsoft.com/powershell/module/az.networkcloud/new-aznetworkcloudkubernetescluster
#>
function New-AzNetworkCloudKubernetesCluster {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IKubernetesCluster])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Path')]
    [System.String]
    # The name of the Kubernetes cluster.
    ${KubernetesClusterName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.Int64]
    # The number of virtual machines that use this configuration.
    ${ControlPlaneNodeConfigurationCount},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The name of the VM SKU supplied during creation.
    ${ControlPlaneNodeConfigurationVMSkuName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The resource ID of the extended location on which the resource will be created.
    ${ExtendedLocationName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The extended location type, for example, CustomLocation.
    ${ExtendedLocationType},

    [Parameter(Mandatory)]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IInitialAgentPoolConfiguration[]]
    # The agent pools that are created with this Kubernetes cluster for running critical system services and workloads.
    # This data in this field is only used during creation, and the field will be empty following the creation of the Kubernetes Cluster.
    # After creation, the management of agent pools is done using the agentPools sub-resource.
    # To construct, see NOTES section for INITIALAGENTPOOLCONFIGURATION properties and create a hash table.
    ${InitialAgentPoolConfiguration},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The Kubernetes version for this cluster.
    # Accepts n.n, n.n.n, and n.n.n-n format.
    # The interpreted version used will be resolved into this field after creation or update.
    ${KubernetesVersion},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The resource ID of the associated Cloud Services network.
    ${NetworkConfigurationCloudServicesNetworkId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The resource ID of the Layer 3 network that is used for creation of the Container Networking Interface network.
    ${NetworkConfigurationCniNetworkId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String[]]
    # The list of Azure Active Directory group object IDs that will have an administrative role on the Kubernetes cluster.
    ${AadConfigurationAdminGroupObjectId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes.
    # If not supplied, a user name will be chosen by the service.
    ${AdminUsername},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL2NetworkAttachmentConfiguration[]]
    # The list of Layer 2 Networks and related configuration for attachment.
    # To construct, see NOTES section for ATTACHEDNETWORKCONFIGURATIONL2NETWORK properties and create a hash table.
    ${AttachedNetworkConfigurationL2Network},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IL3NetworkAttachmentConfiguration[]]
    # The list of Layer 3 Networks and related configuration for attachment.
    # To construct, see NOTES section for ATTACHEDNETWORKCONFIGURATIONL3NETWORK properties and create a hash table.
    ${AttachedNetworkConfigurationL3Network},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ITrunkedNetworkAttachmentConfiguration[]]
    # The list of Trunked Networks and related configuration for attachment.
    # To construct, see NOTES section for ATTACHEDNETWORKCONFIGURATIONTRUNKEDNETWORK properties and create a hash table.
    ${AttachedNetworkConfigurationTrunkedNetwork},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IBgpAdvertisement[]]
    # The association of IP address pools to the communities and peers, allowing for announcement of IPs.
    # To construct, see NOTES section for BGPADVERTISEMENT properties and create a hash table.
    ${BgpAdvertisement},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IIPAddressPool[]]
    # The list of pools of IP addresses that can be allocated to Load Balancer services.
    # To construct, see NOTES section for BGPIPADDRESSPOOL properties and create a hash table.
    ${BgpIPAddressPool},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.IServiceLoadBalancerBgpPeer[]]
    # The list of additional BgpPeer entities that the Kubernetes cluster will peer with.
    # All peering must be explicitly defined.
    # To construct, see NOTES section for BGPPEER properties and create a hash table.
    ${BgpPeer},

    [Parameter()]
    [ArgumentCompleter([Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled])]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Support.FabricPeeringEnabled]
    # The indicator to specify if the load balancer peers with the network fabric.
    ${BgpServiceLoadBalancerConfigurationFabricPeeringEnabled},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ISshPublicKey[]]
    # The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster.
    # In some cases, specification of public keys may be required to produce a working environment.
    # To construct, see NOTES section for CONTROLPLANENODECONFIGURATIONADMINPUBLICKEY properties and create a hash table.
    ${ControlPlaneNodeConfigurationAdminPublicKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The user name for the administrator that will be applied to the operating systems that run Kubernetes nodes.
    # If not supplied, a user name will be chosen by the service.
    ${ControlPlaneNodeConfigurationAdminUsername},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String[]]
    # The list of availability zones of the Network Cloud cluster to be used for the provisioning of nodes in the control plane.
    # If not specified, all availability zones will be used.
    ${ControlPlaneNodeConfigurationAvailabilityZone},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The location of the managed resource group.
    # If not specified, the location of the parent resource is chosen.
    ${ManagedResourceGroupConfigurationLocation},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The name for the managed resource group.
    # If not specified, the unique name is automatically generated.
    ${ManagedResourceGroupConfigurationName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String]
    # The IP address assigned to the Kubernetes DNS service.
    # It must be within the Kubernetes service address range specified in service CIDR.
    ${NetworkConfigurationDnsServiceIP},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String[]]
    # The CIDR notation IP ranges from which to assign pod IPs.
    # One IPv4 CIDR is expected for single-stack networking.
    # Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
    ${NetworkConfigurationPodCidr},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [System.String[]]
    # The CIDR notation IP ranges from which to assign service IPs.
    # One IPv4 CIDR is expected for single-stack networking.
    # Two CIDRs, one for each IP family (IPv4/IPv6), is expected for dual-stack networking.
    ${NetworkConfigurationServiceCidr},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api20230701.ISshPublicKey[]]
    # The SSH configuration for the operating systems that run the nodes in the Kubernetes cluster.
    # In some cases, specification of public keys may be required to produce a working environment.
    # To construct, see NOTES section for SSHPUBLICKEY properties and create a hash table.
    ${SshPublicKey},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Models.Api40.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.NetworkCloud.private\New-AzNetworkCloudKubernetesCluster_CreateExpanded';
        }
        if (('CreateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId')) {
            $testPlayback = $false
            $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.NetworkCloud.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
