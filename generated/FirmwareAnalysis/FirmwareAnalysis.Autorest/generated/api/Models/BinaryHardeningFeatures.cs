// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Extensions;

    /// <summary>Binary hardening features.</summary>
    public partial class BinaryHardeningFeatures :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IBinaryHardeningFeatures,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IBinaryHardeningFeaturesInternal
    {

        /// <summary>Backing field for <see cref="Canary" /> property.</summary>
        private bool? _canary;

        /// <summary>Flag indicating if the binary was compiled with stack canaries enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? Canary { get => this._canary; set => this._canary = value; }

        /// <summary>Backing field for <see cref="NoExecute" /> property.</summary>
        private bool? _noExecute;

        /// <summary>Flag indicating the binary's stack is set to NX (no-execute).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? NoExecute { get => this._noExecute; set => this._noExecute = value; }

        /// <summary>Backing field for <see cref="PositionIndependentExecutable" /> property.</summary>
        private bool? _positionIndependentExecutable;

        /// <summary>
        /// Flag indicating the binary was compiled to be a position independent executable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? PositionIndependentExecutable { get => this._positionIndependentExecutable; set => this._positionIndependentExecutable = value; }

        /// <summary>Backing field for <see cref="RelocationReadOnly" /> property.</summary>
        private bool? _relocationReadOnly;

        /// <summary>Flag indicating the binary has enabled relocation read-only protections.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? RelocationReadOnly { get => this._relocationReadOnly; set => this._relocationReadOnly = value; }

        /// <summary>Backing field for <see cref="Stripped" /> property.</summary>
        private bool? _stripped;

        /// <summary>Flag indicating if debug symbols have been stripped from the binary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public bool? Stripped { get => this._stripped; set => this._stripped = value; }

        /// <summary>Creates an new <see cref="BinaryHardeningFeatures" /> instance.</summary>
        public BinaryHardeningFeatures()
        {

        }
    }
    /// Binary hardening features.
    public partial interface IBinaryHardeningFeatures :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IJsonSerializable
    {
        /// <summary>Flag indicating if the binary was compiled with stack canaries enabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag indicating if the binary was compiled with stack canaries enabled.",
        SerializedName = @"canary",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Canary { get; set; }
        /// <summary>Flag indicating the binary's stack is set to NX (no-execute).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag indicating the binary's stack is set to NX (no-execute).",
        SerializedName = @"noExecute",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NoExecute { get; set; }
        /// <summary>
        /// Flag indicating the binary was compiled to be a position independent executable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag indicating the binary was compiled to be a position independent executable.",
        SerializedName = @"positionIndependentExecutable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? PositionIndependentExecutable { get; set; }
        /// <summary>Flag indicating the binary has enabled relocation read-only protections.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag indicating the binary has enabled relocation read-only protections.",
        SerializedName = @"relocationReadOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RelocationReadOnly { get; set; }
        /// <summary>Flag indicating if debug symbols have been stripped from the binary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Flag indicating if debug symbols have been stripped from the binary.",
        SerializedName = @"stripped",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Stripped { get; set; }

    }
    /// Binary hardening features.
    internal partial interface IBinaryHardeningFeaturesInternal

    {
        /// <summary>Flag indicating if the binary was compiled with stack canaries enabled.</summary>
        bool? Canary { get; set; }
        /// <summary>Flag indicating the binary's stack is set to NX (no-execute).</summary>
        bool? NoExecute { get; set; }
        /// <summary>
        /// Flag indicating the binary was compiled to be a position independent executable.
        /// </summary>
        bool? PositionIndependentExecutable { get; set; }
        /// <summary>Flag indicating the binary has enabled relocation read-only protections.</summary>
        bool? RelocationReadOnly { get; set; }
        /// <summary>Flag indicating if debug symbols have been stripped from the binary.</summary>
        bool? Stripped { get; set; }

    }
}