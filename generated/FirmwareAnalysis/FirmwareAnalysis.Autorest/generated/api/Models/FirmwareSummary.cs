// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Extensions;

    /// <summary>Properties for high level summary of firmware analysis results.</summary>
    public partial class FirmwareSummary :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IFirmwareSummary,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IFirmwareSummaryInternal,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties __summaryResourceProperties = new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.SummaryResourceProperties();

        /// <summary>Backing field for <see cref="AnalysisTimeSecond" /> property.</summary>
        private long? _analysisTimeSecond;

        /// <summary>Time used for analysis</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? AnalysisTimeSecond { get => this._analysisTimeSecond; set => this._analysisTimeSecond = value; }

        /// <summary>Backing field for <see cref="BinaryCount" /> property.</summary>
        private long? _binaryCount;

        /// <summary>Binary count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? BinaryCount { get => this._binaryCount; set => this._binaryCount = value; }

        /// <summary>Backing field for <see cref="ComponentCount" /> property.</summary>
        private long? _componentCount;

        /// <summary>Components count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? ComponentCount { get => this._componentCount; set => this._componentCount = value; }

        /// <summary>Backing field for <see cref="ExtractedFileCount" /> property.</summary>
        private long? _extractedFileCount;

        /// <summary>Extracted file count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? ExtractedFileCount { get => this._extractedFileCount; set => this._extractedFileCount = value; }

        /// <summary>Backing field for <see cref="ExtractedSize" /> property.</summary>
        private long? _extractedSize;

        /// <summary>Total extracted size of the firmware in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? ExtractedSize { get => this._extractedSize; set => this._extractedSize = value; }

        /// <summary>Backing field for <see cref="FileSize" /> property.</summary>
        private long? _fileSize;

        /// <summary>Firmware file size in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? FileSize { get => this._fileSize; set => this._fileSize = value; }

        /// <summary>Backing field for <see cref="RootFileSystem" /> property.</summary>
        private long? _rootFileSystem;

        /// <summary>The number of root file systems found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? RootFileSystem { get => this._rootFileSystem; set => this._rootFileSystem = value; }

        /// <summary>Describes the type of summary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inherited)]
        public string SummaryType { get => "Firmware"; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal)__summaryResourceProperties).SummaryType = "Firmware"; }

        /// <summary>Creates an new <see cref="FirmwareSummary" /> instance.</summary>
        public FirmwareSummary()
        {
            this.__summaryResourceProperties.SummaryType = "Firmware";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__summaryResourceProperties), __summaryResourceProperties);
            await eventListener.AssertObjectIsValid(nameof(__summaryResourceProperties), __summaryResourceProperties);
        }
    }
    /// Properties for high level summary of firmware analysis results.
    public partial interface IFirmwareSummary :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties
    {
        /// <summary>Time used for analysis</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Time used for analysis",
        SerializedName = @"analysisTimeSeconds",
        PossibleTypes = new [] { typeof(long) })]
        long? AnalysisTimeSecond { get; set; }
        /// <summary>Binary count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Binary count",
        SerializedName = @"binaryCount",
        PossibleTypes = new [] { typeof(long) })]
        long? BinaryCount { get; set; }
        /// <summary>Components count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Components count.",
        SerializedName = @"componentCount",
        PossibleTypes = new [] { typeof(long) })]
        long? ComponentCount { get; set; }
        /// <summary>Extracted file count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Extracted file count.",
        SerializedName = @"extractedFileCount",
        PossibleTypes = new [] { typeof(long) })]
        long? ExtractedFileCount { get; set; }
        /// <summary>Total extracted size of the firmware in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total extracted size of the firmware in bytes.",
        SerializedName = @"extractedSize",
        PossibleTypes = new [] { typeof(long) })]
        long? ExtractedSize { get; set; }
        /// <summary>Firmware file size in bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Firmware file size in bytes.",
        SerializedName = @"fileSize",
        PossibleTypes = new [] { typeof(long) })]
        long? FileSize { get; set; }
        /// <summary>The number of root file systems found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The number of root file systems found.",
        SerializedName = @"rootFileSystems",
        PossibleTypes = new [] { typeof(long) })]
        long? RootFileSystem { get; set; }

    }
    /// Properties for high level summary of firmware analysis results.
    internal partial interface IFirmwareSummaryInternal :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal
    {
        /// <summary>Time used for analysis</summary>
        long? AnalysisTimeSecond { get; set; }
        /// <summary>Binary count</summary>
        long? BinaryCount { get; set; }
        /// <summary>Components count.</summary>
        long? ComponentCount { get; set; }
        /// <summary>Extracted file count.</summary>
        long? ExtractedFileCount { get; set; }
        /// <summary>Total extracted size of the firmware in bytes.</summary>
        long? ExtractedSize { get; set; }
        /// <summary>Firmware file size in bytes.</summary>
        long? FileSize { get; set; }
        /// <summary>The number of root file systems found.</summary>
        long? RootFileSystem { get; set; }

    }
}