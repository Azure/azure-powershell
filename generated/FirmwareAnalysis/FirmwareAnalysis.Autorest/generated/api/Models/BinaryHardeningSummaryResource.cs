// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Extensions;

    /// <summary>Properties for a binary hardening analysis summary.</summary>
    public partial class BinaryHardeningSummaryResource :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IBinaryHardeningSummaryResource,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.IBinaryHardeningSummaryResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties __summaryResourceProperties = new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.SummaryResourceProperties();

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal)__summaryResourceProperties).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal)__summaryResourceProperties).ProvisioningState = value ?? null; }

        /// <summary>Backing field for <see cref="NotExecutableStackCount" /> property.</summary>
        private long? _notExecutableStackCount;

        /// <summary>Total number of analyzed files that were found to have a nonexecutable stack</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? NotExecutableStackCount { get => this._notExecutableStackCount; set => this._notExecutableStackCount = value; }

        /// <summary>Backing field for <see cref="PositionIndependentExecutableCount" /> property.</summary>
        private long? _positionIndependentExecutableCount;

        /// <summary>
        /// Total number of analyzed files that were compiled to be a position independent executable
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? PositionIndependentExecutableCount { get => this._positionIndependentExecutableCount; set => this._positionIndependentExecutableCount = value; }

        /// <summary>The status of the last operation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inherited)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal)__summaryResourceProperties).ProvisioningState; }

        /// <summary>Backing field for <see cref="RelocationReadOnlyCount" /> property.</summary>
        private long? _relocationReadOnlyCount;

        /// <summary>
        /// Total number of analyzed files that have enabled relocation read-only protections
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? RelocationReadOnlyCount { get => this._relocationReadOnlyCount; set => this._relocationReadOnlyCount = value; }

        /// <summary>Backing field for <see cref="StackCanaryCount" /> property.</summary>
        private long? _stackCanaryCount;

        /// <summary>Total number of analyzed files that have stack canaries enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? StackCanaryCount { get => this._stackCanaryCount; set => this._stackCanaryCount = value; }

        /// <summary>Backing field for <see cref="StrippedBinaryCount" /> property.</summary>
        private long? _strippedBinaryCount;

        /// <summary>Total number of analyzed files that have debug symbols stripped</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? StrippedBinaryCount { get => this._strippedBinaryCount; set => this._strippedBinaryCount = value; }

        /// <summary>The type of summary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inherited)]
        public string SummaryType { get => "BinaryHardening"; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal)__summaryResourceProperties).SummaryType = "BinaryHardening"; }

        /// <summary>Backing field for <see cref="TotalFile" /> property.</summary>
        private long? _totalFile;

        /// <summary>Total number of binaries that were analyzed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? TotalFile { get => this._totalFile; set => this._totalFile = value; }

        /// <summary>Creates an new <see cref="BinaryHardeningSummaryResource" /> instance.</summary>
        public BinaryHardeningSummaryResource()
        {
            this.__summaryResourceProperties.SummaryType = "BinaryHardening";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__summaryResourceProperties), __summaryResourceProperties);
            await eventListener.AssertObjectIsValid(nameof(__summaryResourceProperties), __summaryResourceProperties);
        }
    }
    /// Properties for a binary hardening analysis summary.
    public partial interface IBinaryHardeningSummaryResource :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties
    {
        /// <summary>Total number of analyzed files that were found to have a nonexecutable stack</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of analyzed files that were found to have a nonexecutable stack",
        SerializedName = @"notExecutableStackCount",
        PossibleTypes = new [] { typeof(long) })]
        long? NotExecutableStackCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that were compiled to be a position independent executable
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of analyzed files that were compiled to be a position independent executable",
        SerializedName = @"positionIndependentExecutableCount",
        PossibleTypes = new [] { typeof(long) })]
        long? PositionIndependentExecutableCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that have enabled relocation read-only protections
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of analyzed files that have enabled relocation read-only protections",
        SerializedName = @"relocationReadOnlyCount",
        PossibleTypes = new [] { typeof(long) })]
        long? RelocationReadOnlyCount { get; set; }
        /// <summary>Total number of analyzed files that have stack canaries enabled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of analyzed files that have stack canaries enabled",
        SerializedName = @"stackCanaryCount",
        PossibleTypes = new [] { typeof(long) })]
        long? StackCanaryCount { get; set; }
        /// <summary>Total number of analyzed files that have debug symbols stripped</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of analyzed files that have debug symbols stripped",
        SerializedName = @"strippedBinaryCount",
        PossibleTypes = new [] { typeof(long) })]
        long? StrippedBinaryCount { get; set; }
        /// <summary>Total number of binaries that were analyzed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of binaries that were analyzed",
        SerializedName = @"totalFiles",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalFile { get; set; }

    }
    /// Properties for a binary hardening analysis summary.
    internal partial interface IBinaryHardeningSummaryResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal
    {
        /// <summary>Total number of analyzed files that were found to have a nonexecutable stack</summary>
        long? NotExecutableStackCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that were compiled to be a position independent executable
        /// </summary>
        long? PositionIndependentExecutableCount { get; set; }
        /// <summary>
        /// Total number of analyzed files that have enabled relocation read-only protections
        /// </summary>
        long? RelocationReadOnlyCount { get; set; }
        /// <summary>Total number of analyzed files that have stack canaries enabled</summary>
        long? StackCanaryCount { get; set; }
        /// <summary>Total number of analyzed files that have debug symbols stripped</summary>
        long? StrippedBinaryCount { get; set; }
        /// <summary>Total number of binaries that were analyzed</summary>
        long? TotalFile { get; set; }

    }
}