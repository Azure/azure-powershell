// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Extensions;

    /// <summary>Properties for cryptographic key summary.</summary>
    public partial class CryptoKeySummaryResource :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoKeySummaryResource,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ICryptoKeySummaryResourceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties __summaryResourceProperties = new Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.SummaryResourceProperties();

        /// <summary>Backing field for <see cref="PairedKey" /> property.</summary>
        private long? _pairedKey;

        /// <summary>Total number of keys found that have a matching paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? PairedKey { get => this._pairedKey; set => this._pairedKey = value; }

        /// <summary>Backing field for <see cref="PrivateKey" /> property.</summary>
        private long? _privateKey;

        /// <summary>Total number of private keys found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? PrivateKey { get => this._privateKey; set => this._privateKey = value; }

        /// <summary>Backing field for <see cref="PublicKey" /> property.</summary>
        private long? _publicKey;

        /// <summary>Total number of (non-certificate) public keys found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? PublicKey { get => this._publicKey; set => this._publicKey = value; }

        /// <summary>Backing field for <see cref="ShortKeySize" /> property.</summary>
        private long? _shortKeySize;

        /// <summary>Total number of keys found that have an insecure key size for the algorithm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? ShortKeySize { get => this._shortKeySize; set => this._shortKeySize = value; }

        /// <summary>Describes the type of summary.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Inherited)]
        public string SummaryType { get => "CryptoKey"; set => ((Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal)__summaryResourceProperties).SummaryType = "CryptoKey"; }

        /// <summary>Backing field for <see cref="TotalKey" /> property.</summary>
        private long? _totalKey;

        /// <summary>Total number of cryptographic keys found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Origin(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.PropertyOrigin.Owned)]
        public long? TotalKey { get => this._totalKey; set => this._totalKey = value; }

        /// <summary>Creates an new <see cref="CryptoKeySummaryResource" /> instance.</summary>
        public CryptoKeySummaryResource()
        {
            this.__summaryResourceProperties.SummaryType = "CryptoKey";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__summaryResourceProperties), __summaryResourceProperties);
            await eventListener.AssertObjectIsValid(nameof(__summaryResourceProperties), __summaryResourceProperties);
        }
    }
    /// Properties for cryptographic key summary.
    public partial interface ICryptoKeySummaryResource :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourceProperties
    {
        /// <summary>Total number of keys found that have a matching paired key or certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of keys found that have a matching paired key or certificate.",
        SerializedName = @"pairedKeys",
        PossibleTypes = new [] { typeof(long) })]
        long? PairedKey { get; set; }
        /// <summary>Total number of private keys found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of private keys found.",
        SerializedName = @"privateKeys",
        PossibleTypes = new [] { typeof(long) })]
        long? PrivateKey { get; set; }
        /// <summary>Total number of (non-certificate) public keys found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of (non-certificate) public keys found.",
        SerializedName = @"publicKeys",
        PossibleTypes = new [] { typeof(long) })]
        long? PublicKey { get; set; }
        /// <summary>Total number of keys found that have an insecure key size for the algorithm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of keys found that have an insecure key size for the algorithm.",
        SerializedName = @"shortKeySize",
        PossibleTypes = new [] { typeof(long) })]
        long? ShortKeySize { get; set; }
        /// <summary>Total number of cryptographic keys found.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Total number of cryptographic keys found.",
        SerializedName = @"totalKeys",
        PossibleTypes = new [] { typeof(long) })]
        long? TotalKey { get; set; }

    }
    /// Properties for cryptographic key summary.
    internal partial interface ICryptoKeySummaryResourceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.FirmwareAnalysis.Models.ISummaryResourcePropertiesInternal
    {
        /// <summary>Total number of keys found that have a matching paired key or certificate.</summary>
        long? PairedKey { get; set; }
        /// <summary>Total number of private keys found.</summary>
        long? PrivateKey { get; set; }
        /// <summary>Total number of (non-certificate) public keys found.</summary>
        long? PublicKey { get; set; }
        /// <summary>Total number of keys found that have an insecure key size for the algorithm.</summary>
        long? ShortKeySize { get; set; }
        /// <summary>Total number of cryptographic keys found.</summary>
        long? TotalKey { get; set; }

    }
}