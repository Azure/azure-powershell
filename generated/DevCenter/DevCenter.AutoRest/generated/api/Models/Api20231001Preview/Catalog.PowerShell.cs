// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview
{
    using Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.PowerShell;

    /// <summary>Represents a catalog.</summary>
    [System.ComponentModel.TypeConverter(typeof(CatalogTypeConverter))]
    public partial class Catalog
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.Catalog"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal Catalog(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("SystemDataCreatedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedBy = (string) content.GetValueForProperty("SystemDataCreatedBy",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataCreatedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataCreatedAt",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemDataCreatedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedByType = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType?) content.GetValueForProperty("SystemDataCreatedByType",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedByType, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType.CreateFrom);
            }
            if (content.Contains("SystemDataLastModifiedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedBy = (string) content.GetValueForProperty("SystemDataLastModifiedBy",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedByType = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType?) content.GetValueForProperty("SystemDataLastModifiedByType",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedByType, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType.CreateFrom);
            }
            if (content.Contains("SystemDataLastModifiedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataLastModifiedAt",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemData = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.ISystemData) content.GetValueForProperty("SystemData",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemData, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.SystemDataTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ProvisioningState = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState?) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ProvisioningState, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState.CreateFrom);
            }
            if (content.Contains("GitHub"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHub = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog) content.GetValueForProperty("GitHub",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHub, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.GitCatalogTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdoGit"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGit = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog) content.GetValueForProperty("AdoGit",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGit, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.GitCatalogTypeConverter.ConvertFrom);
            }
            if (content.Contains("SyncType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncType = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType?) content.GetValueForProperty("SyncType",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncType, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType.CreateFrom);
            }
            if (content.Contains("LastSyncStat"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStat = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ISyncStats) content.GetValueForProperty("LastSyncStat",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStat, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.SyncStatsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SyncState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncState = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState?) content.GetValueForProperty("SyncState",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncState, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState.CreateFrom);
            }
            if (content.Contains("ConnectionState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ConnectionState = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState?) content.GetValueForProperty("ConnectionState",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ConnectionState, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState.CreateFrom);
            }
            if (content.Contains("LastConnectionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastConnectionTime = (global::System.DateTime?) content.GetValueForProperty("LastConnectionTime",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastConnectionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("LastSyncTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncTime = (global::System.DateTime?) content.GetValueForProperty("LastSyncTime",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("GitHubUri"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubUri = (string) content.GetValueForProperty("GitHubUri",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubUri, global::System.Convert.ToString);
            }
            if (content.Contains("GitHubBranch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubBranch = (string) content.GetValueForProperty("GitHubBranch",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubBranch, global::System.Convert.ToString);
            }
            if (content.Contains("GitHubSecretIdentifier"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubSecretIdentifier = (string) content.GetValueForProperty("GitHubSecretIdentifier",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubSecretIdentifier, global::System.Convert.ToString);
            }
            if (content.Contains("GitHubPath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubPath = (string) content.GetValueForProperty("GitHubPath",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubPath, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitUri"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitUri = (string) content.GetValueForProperty("AdoGitUri",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitUri, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitBranch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitBranch = (string) content.GetValueForProperty("AdoGitBranch",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitBranch, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitSecretIdentifier"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitSecretIdentifier = (string) content.GetValueForProperty("AdoGitSecretIdentifier",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitSecretIdentifier, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitPath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitPath = (string) content.GetValueForProperty("AdoGitPath",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitPath, global::System.Convert.ToString);
            }
            if (content.Contains("LastSyncStatAdded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatAdded = (int?) content.GetValueForProperty("LastSyncStatAdded",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatAdded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatUpdated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUpdated = (int?) content.GetValueForProperty("LastSyncStatUpdated",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUpdated, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatUnchanged"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUnchanged = (int?) content.GetValueForProperty("LastSyncStatUnchanged",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUnchanged, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatRemoved"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatRemoved = (int?) content.GetValueForProperty("LastSyncStatRemoved",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatRemoved, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatValidationError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatValidationError = (int?) content.GetValueForProperty("LastSyncStatValidationError",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatValidationError, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatSynchronizationError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatSynchronizationError = (int?) content.GetValueForProperty("LastSyncStatSynchronizationError",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatSynchronizationError, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.Catalog"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal Catalog(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("SystemDataCreatedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedBy = (string) content.GetValueForProperty("SystemDataCreatedBy",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataCreatedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataCreatedAt",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemDataCreatedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedByType = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType?) content.GetValueForProperty("SystemDataCreatedByType",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataCreatedByType, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType.CreateFrom);
            }
            if (content.Contains("SystemDataLastModifiedBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedBy = (string) content.GetValueForProperty("SystemDataLastModifiedBy",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedBy, global::System.Convert.ToString);
            }
            if (content.Contains("SystemDataLastModifiedByType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedByType = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType?) content.GetValueForProperty("SystemDataLastModifiedByType",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedByType, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType.CreateFrom);
            }
            if (content.Contains("SystemDataLastModifiedAt"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedAt = (global::System.DateTime?) content.GetValueForProperty("SystemDataLastModifiedAt",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemDataLastModifiedAt, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("SystemData"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemData = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.ISystemData) content.GetValueForProperty("SystemData",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).SystemData, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.SystemDataTypeConverter.ConvertFrom);
            }
            if (content.Contains("Id"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Id = (string) content.GetValueForProperty("Id",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Id, global::System.Convert.ToString);
            }
            if (content.Contains("Name"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Name = (string) content.GetValueForProperty("Name",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Name, global::System.Convert.ToString);
            }
            if (content.Contains("Type"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Type = (string) content.GetValueForProperty("Type",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)this).Type, global::System.Convert.ToString);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ProvisioningState = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState?) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ProvisioningState, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState.CreateFrom);
            }
            if (content.Contains("GitHub"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHub = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog) content.GetValueForProperty("GitHub",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHub, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.GitCatalogTypeConverter.ConvertFrom);
            }
            if (content.Contains("AdoGit"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGit = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog) content.GetValueForProperty("AdoGit",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGit, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.GitCatalogTypeConverter.ConvertFrom);
            }
            if (content.Contains("SyncType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncType = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType?) content.GetValueForProperty("SyncType",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncType, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType.CreateFrom);
            }
            if (content.Contains("LastSyncStat"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStat = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ISyncStats) content.GetValueForProperty("LastSyncStat",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStat, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.SyncStatsTypeConverter.ConvertFrom);
            }
            if (content.Contains("SyncState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncState = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState?) content.GetValueForProperty("SyncState",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).SyncState, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState.CreateFrom);
            }
            if (content.Contains("ConnectionState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ConnectionState = (Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState?) content.GetValueForProperty("ConnectionState",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).ConnectionState, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState.CreateFrom);
            }
            if (content.Contains("LastConnectionTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastConnectionTime = (global::System.DateTime?) content.GetValueForProperty("LastConnectionTime",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastConnectionTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("LastSyncTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncTime = (global::System.DateTime?) content.GetValueForProperty("LastSyncTime",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncTime, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("GitHubUri"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubUri = (string) content.GetValueForProperty("GitHubUri",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubUri, global::System.Convert.ToString);
            }
            if (content.Contains("GitHubBranch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubBranch = (string) content.GetValueForProperty("GitHubBranch",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubBranch, global::System.Convert.ToString);
            }
            if (content.Contains("GitHubSecretIdentifier"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubSecretIdentifier = (string) content.GetValueForProperty("GitHubSecretIdentifier",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubSecretIdentifier, global::System.Convert.ToString);
            }
            if (content.Contains("GitHubPath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubPath = (string) content.GetValueForProperty("GitHubPath",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).GitHubPath, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitUri"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitUri = (string) content.GetValueForProperty("AdoGitUri",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitUri, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitBranch"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitBranch = (string) content.GetValueForProperty("AdoGitBranch",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitBranch, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitSecretIdentifier"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitSecretIdentifier = (string) content.GetValueForProperty("AdoGitSecretIdentifier",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitSecretIdentifier, global::System.Convert.ToString);
            }
            if (content.Contains("AdoGitPath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitPath = (string) content.GetValueForProperty("AdoGitPath",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).AdoGitPath, global::System.Convert.ToString);
            }
            if (content.Contains("LastSyncStatAdded"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatAdded = (int?) content.GetValueForProperty("LastSyncStatAdded",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatAdded, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatUpdated"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUpdated = (int?) content.GetValueForProperty("LastSyncStatUpdated",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUpdated, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatUnchanged"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUnchanged = (int?) content.GetValueForProperty("LastSyncStatUnchanged",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatUnchanged, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatRemoved"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatRemoved = (int?) content.GetValueForProperty("LastSyncStatRemoved",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatRemoved, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatValidationError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatValidationError = (int?) content.GetValueForProperty("LastSyncStatValidationError",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatValidationError, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("LastSyncStatSynchronizationError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatSynchronizationError = (int?) content.GetValueForProperty("LastSyncStatSynchronizationError",((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal)this).LastSyncStatSynchronizationError, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.Catalog"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalog" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalog DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new Catalog(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.Catalog"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalog" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalog DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new Catalog(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="Catalog" />, deserializing the content from a json string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>an instance of the <see cref="Catalog" /> model class.</returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalog FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.SerializationMode.IncludeAll)?.ToString();
    }
    /// Represents a catalog.
    [System.ComponentModel.TypeConverter(typeof(CatalogTypeConverter))]
    public partial interface ICatalog

    {

    }
}