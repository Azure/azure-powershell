// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Extensions;

    /// <summary>Represents a catalog.</summary>
    public partial class Catalog :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalog,
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal,
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResource __resource = new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.Resource();

        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitBranch; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitBranch = value ?? null; }

        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitPath = value ?? null; }

        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitSecretIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitSecretIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitSecretIdentifier = value ?? null; }

        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string AdoGitUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGitUri = value ?? null; }

        /// <summary>The connection state of the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState? ConnectionState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).ConnectionState; }

        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubBranch { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubBranch; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubBranch = value ?? null; }

        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubPath = value ?? null; }

        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubSecretIdentifier { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubSecretIdentifier; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubSecretIdentifier = value ?? null; }

        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public string GitHubUri { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubUri; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHubUri = value ?? null; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Id; }

        /// <summary>When the catalog was last connected.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastConnectionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastConnectionTime; }

        /// <summary>Count of catalog items added during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public int? LastSyncStatAdded { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatAdded; }

        /// <summary>Count of catalog items removed during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public int? LastSyncStatRemoved { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatRemoved; }

        /// <summary>Count of synchronization errors that occured during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public int? LastSyncStatSynchronizationError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatSynchronizationError; }

        /// <summary>Count of catalog items that were unchanged during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public int? LastSyncStatUnchanged { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatUnchanged; }

        /// <summary>Count of catalog items updated during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public int? LastSyncStatUpdated { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatUpdated; }

        /// <summary>Count of catalog items that had validation errors during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public int? LastSyncStatValidationError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatValidationError; }

        /// <summary>When the catalog was last synced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastSyncTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncTime; }

        /// <summary>Internal Acessors for AdoGit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.AdoGit { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGit; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).AdoGit = value; }

        /// <summary>Internal Acessors for ConnectionState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.ConnectionState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).ConnectionState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).ConnectionState = value; }

        /// <summary>Internal Acessors for GitHub</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.GitHub { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHub; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).GitHub = value; }

        /// <summary>Internal Acessors for LastConnectionTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastConnectionTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastConnectionTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastConnectionTime = value; }

        /// <summary>Internal Acessors for LastSyncStat</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ISyncStats Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStat { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStat; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStat = value; }

        /// <summary>Internal Acessors for LastSyncStatAdded</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStatAdded { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatAdded; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatAdded = value; }

        /// <summary>Internal Acessors for LastSyncStatRemoved</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStatRemoved { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatRemoved; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatRemoved = value; }

        /// <summary>Internal Acessors for LastSyncStatSynchronizationError</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStatSynchronizationError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatSynchronizationError; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatSynchronizationError = value; }

        /// <summary>Internal Acessors for LastSyncStatUnchanged</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStatUnchanged { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatUnchanged; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatUnchanged = value; }

        /// <summary>Internal Acessors for LastSyncStatUpdated</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStatUpdated { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatUpdated; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatUpdated = value; }

        /// <summary>Internal Acessors for LastSyncStatValidationError</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncStatValidationError { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatValidationError; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncStatValidationError = value; }

        /// <summary>Internal Acessors for LastSyncTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.LastSyncTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).LastSyncTime = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogProperties Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for SyncState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState? Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogInternal.SyncState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).SyncState; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).SyncState = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.ISystemData Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Name; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogProperties _property;

        /// <summary>Catalog properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.CatalogProperties()); set => this._property = value; }

        /// <summary>The provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState? ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).ProvisioningState; }

        /// <summary>The synchronization state of the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState? SyncState { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogPropertiesInternal)Property).SyncState; }

        /// <summary>Indicates the type of sync that is configured for the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType? SyncType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).SyncType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogUpdatePropertiesInternal)Property).SyncType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType)""); }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType? SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataCreatedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType)""); }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType? SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).SystemDataLastModifiedByType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CreatedByType)""); }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Origin(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal)__resource).Type; }

        /// <summary>Creates an new <see cref="Catalog" /> instance.</summary>
        public Catalog()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__resource), __resource);
            await eventListener.AssertObjectIsValid(nameof(__resource), __resource);
        }
    }
    /// Represents a catalog.
    public partial interface ICatalog :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResource
    {
        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git branch.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder where the catalog items can be found inside the repository.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A reference to the Key Vault secret containing a security token to authenticate to a Git repository.",
        SerializedName = @"secretIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string AdoGitUri { get; set; }
        /// <summary>The connection state of the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The connection state of the catalog.",
        SerializedName = @"connectionState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState? ConnectionState { get;  }
        /// <summary>Git branch.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git branch.",
        SerializedName = @"branch",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The folder where the catalog items can be found inside the repository.",
        SerializedName = @"path",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"A reference to the Key Vault secret containing a security token to authenticate to a Git repository.",
        SerializedName = @"secretIdentifier",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Git URI.",
        SerializedName = @"uri",
        PossibleTypes = new [] { typeof(string) })]
        string GitHubUri { get; set; }
        /// <summary>When the catalog was last connected.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"When the catalog was last connected.",
        SerializedName = @"lastConnectionTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastConnectionTime { get;  }
        /// <summary>Count of catalog items added during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of catalog items added during synchronization.",
        SerializedName = @"added",
        PossibleTypes = new [] { typeof(int) })]
        int? LastSyncStatAdded { get;  }
        /// <summary>Count of catalog items removed during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of catalog items removed during synchronization.",
        SerializedName = @"removed",
        PossibleTypes = new [] { typeof(int) })]
        int? LastSyncStatRemoved { get;  }
        /// <summary>Count of synchronization errors that occured during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of synchronization errors that occured during synchronization.",
        SerializedName = @"synchronizationErrors",
        PossibleTypes = new [] { typeof(int) })]
        int? LastSyncStatSynchronizationError { get;  }
        /// <summary>Count of catalog items that were unchanged during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of catalog items that were unchanged during synchronization.",
        SerializedName = @"unchanged",
        PossibleTypes = new [] { typeof(int) })]
        int? LastSyncStatUnchanged { get;  }
        /// <summary>Count of catalog items updated during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of catalog items updated during synchronization.",
        SerializedName = @"updated",
        PossibleTypes = new [] { typeof(int) })]
        int? LastSyncStatUpdated { get;  }
        /// <summary>Count of catalog items that had validation errors during synchronization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Count of catalog items that had validation errors during synchronization.",
        SerializedName = @"validationErrors",
        PossibleTypes = new [] { typeof(int) })]
        int? LastSyncStatValidationError { get;  }
        /// <summary>When the catalog was last synced.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"When the catalog was last synced.",
        SerializedName = @"lastSyncTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastSyncTime { get;  }
        /// <summary>The provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>The synchronization state of the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The synchronization state of the catalog.",
        SerializedName = @"syncState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState? SyncState { get;  }
        /// <summary>Indicates the type of sync that is configured for the catalog.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Indicates the type of sync that is configured for the catalog.",
        SerializedName = @"syncType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType) })]
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType? SyncType { get; set; }

    }
    /// Represents a catalog.
    internal partial interface ICatalogInternal :
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api30.IResourceInternal
    {
        /// <summary>Properties for an Azure DevOps catalog type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog AdoGit { get; set; }
        /// <summary>Git branch.</summary>
        string AdoGitBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        string AdoGitPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        string AdoGitSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        string AdoGitUri { get; set; }
        /// <summary>The connection state of the catalog.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogConnectionState? ConnectionState { get; set; }
        /// <summary>Properties for a GitHub catalog type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.IGitCatalog GitHub { get; set; }
        /// <summary>Git branch.</summary>
        string GitHubBranch { get; set; }
        /// <summary>The folder where the catalog items can be found inside the repository.</summary>
        string GitHubPath { get; set; }
        /// <summary>
        /// A reference to the Key Vault secret containing a security token to authenticate to a Git repository.
        /// </summary>
        string GitHubSecretIdentifier { get; set; }
        /// <summary>Git URI.</summary>
        string GitHubUri { get; set; }
        /// <summary>When the catalog was last connected.</summary>
        global::System.DateTime? LastConnectionTime { get; set; }
        /// <summary>Stats of the latest synchronization.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ISyncStats LastSyncStat { get; set; }
        /// <summary>Count of catalog items added during synchronization.</summary>
        int? LastSyncStatAdded { get; set; }
        /// <summary>Count of catalog items removed during synchronization.</summary>
        int? LastSyncStatRemoved { get; set; }
        /// <summary>Count of synchronization errors that occured during synchronization.</summary>
        int? LastSyncStatSynchronizationError { get; set; }
        /// <summary>Count of catalog items that were unchanged during synchronization.</summary>
        int? LastSyncStatUnchanged { get; set; }
        /// <summary>Count of catalog items updated during synchronization.</summary>
        int? LastSyncStatUpdated { get; set; }
        /// <summary>Count of catalog items that had validation errors during synchronization.</summary>
        int? LastSyncStatValidationError { get; set; }
        /// <summary>When the catalog was last synced.</summary>
        global::System.DateTime? LastSyncTime { get; set; }
        /// <summary>Catalog properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Models.Api20231001Preview.ICatalogProperties Property { get; set; }
        /// <summary>The provisioning state of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.ProvisioningState? ProvisioningState { get; set; }
        /// <summary>The synchronization state of the catalog.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncState? SyncState { get; set; }
        /// <summary>Indicates the type of sync that is configured for the catalog.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DevCenter.Support.CatalogSyncType? SyncType { get; set; }

    }
}