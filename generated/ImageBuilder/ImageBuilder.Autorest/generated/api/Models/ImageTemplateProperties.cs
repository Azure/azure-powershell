// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Extensions;

    /// <summary>Describes the properties of an image template</summary>
    public partial class ImageTemplateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal
    {

        /// <summary>Backing field for <see cref="BuildTimeoutInMinute" /> property.</summary>
        private int? _buildTimeoutInMinute;

        /// <summary>
        /// Maximum duration to wait while building the image template (includes all customizations, optimization, validations, and
        /// distributions). Omit or specify 0 to use the default (4 hours).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public int? BuildTimeoutInMinute { get => this._buildTimeoutInMinute; set => this._buildTimeoutInMinute = value; }

        /// <summary>Backing field for <see cref="Customize" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateCustomizer> _customize;

        /// <summary>
        /// Specifies the properties used to describe the customization steps of the image, like Image source etc
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateCustomizer> Customize { get => this._customize; set => this._customize = value; }

        /// <summary>Backing field for <see cref="Distribute" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateDistributor> _distribute;

        /// <summary>The distribution targets where the image output needs to go to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateDistributor> Distribute { get => this._distribute; set => this._distribute = value; }

        /// <summary>Backing field for <see cref="ExactStagingResourceGroup" /> property.</summary>
        private string _exactStagingResourceGroup;

        /// <summary>
        /// The staging resource group id in the same subscription as the image template that will be used to build the image. This
        /// read-only field differs from 'stagingResourceGroup' only if the value specified in the 'stagingResourceGroup' field is
        /// empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public string ExactStagingResourceGroup { get => this._exactStagingResourceGroup; }

        /// <summary>Backing field for <see cref="LastRunStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatus _lastRunStatus;

        /// <summary>State of 'run' that is currently executing or was last executed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatus LastRunStatus { get => (this._lastRunStatus = this._lastRunStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplateLastRunStatus()); }

        /// <summary>End time of the last run (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastRunStatusEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).EndTime; }

        /// <summary>Verbose information about the last run state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string LastRunStatusMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).Message; }

        /// <summary>State of the last run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string LastRunStatusRunState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).RunState; }

        /// <summary>Sub-state of the last run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string LastRunStatusRunSubState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).RunSubState; }

        /// <summary>Start time of the last run (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastRunStatusStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).StartTime; }

        /// <summary>Internal Acessors for ExactStagingResourceGroup</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.ExactStagingResourceGroup { get => this._exactStagingResourceGroup; set { {_exactStagingResourceGroup = value;} } }

        /// <summary>Internal Acessors for LastRunStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatus Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.LastRunStatus { get => (this._lastRunStatus = this._lastRunStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplateLastRunStatus()); set { {_lastRunStatus = value;} } }

        /// <summary>Internal Acessors for LastRunStatusEndTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.LastRunStatusEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).EndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).EndTime = value; }

        /// <summary>Internal Acessors for LastRunStatusMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.LastRunStatusMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).Message = value; }

        /// <summary>Internal Acessors for LastRunStatusRunState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.LastRunStatusRunState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).RunState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).RunState = value; }

        /// <summary>Internal Acessors for LastRunStatusRunSubState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.LastRunStatusRunSubState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).RunSubState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).RunSubState = value; }

        /// <summary>Internal Acessors for LastRunStatusStartTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.LastRunStatusStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).StartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatusInternal)LastRunStatus).StartTime = value; }

        /// <summary>Internal Acessors for Optimize</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimize Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.Optimize { get => (this._optimize = this._optimize ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplatePropertiesOptimize()); set { {_optimize = value;} } }

        /// <summary>Internal Acessors for OptimizeVMBoot</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimizeVMBoot Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.OptimizeVMBoot { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimizeInternal)Optimize).VMBoot; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimizeInternal)Optimize).VMBoot = value; }

        /// <summary>Internal Acessors for ProvisioningError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningError Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.ProvisioningError { get => (this._provisioningError = this._provisioningError ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ProvisioningError()); set { {_provisioningError = value;} } }

        /// <summary>Internal Acessors for ProvisioningErrorCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.ProvisioningErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningErrorInternal)ProvisioningError).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningErrorInternal)ProvisioningError).Code = value; }

        /// <summary>Internal Acessors for ProvisioningErrorMessage</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.ProvisioningErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningErrorInternal)ProvisioningError).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningErrorInternal)ProvisioningError).Message = value; }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for VMProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfile Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.VMProfile { get => (this._vMProfile = this._vMProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplateVMProfile()); set { {_vMProfile = value;} } }

        /// <summary>Internal Acessors for VMProfileVnetConfig</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IVirtualNetworkConfig Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.VMProfileVnetConfig { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VnetConfig; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VnetConfig = value; }

        /// <summary>Internal Acessors for Validate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidate Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesInternal.Validate { get => (this._validate = this._validate ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplatePropertiesValidate()); set { {_validate = value;} } }

        /// <summary>Backing field for <see cref="Optimize" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimize _optimize;

        /// <summary>Specifies optimization to be performed on image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimize Optimize { get => (this._optimize = this._optimize ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplatePropertiesOptimize()); set => this._optimize = value; }

        /// <summary>Backing field for <see cref="ProvisioningError" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningError _provisioningError;

        /// <summary>Provisioning error, if any</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningError ProvisioningError { get => (this._provisioningError = this._provisioningError ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ProvisioningError()); }

        /// <summary>Error code of the provisioning failure</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string ProvisioningErrorCode { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningErrorInternal)ProvisioningError).Code; }

        /// <summary>Verbose error message about the provisioning failure</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string ProvisioningErrorMessage { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningErrorInternal)ProvisioningError).Message; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="Source" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateSource _source;

        /// <summary>Specifies the properties used to describe the source image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateSource Source { get => (this._source = this._source ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplateSource()); set => this._source = value; }

        /// <summary>Backing field for <see cref="StagingResourceGroup" /> property.</summary>
        private string _stagingResourceGroup;

        /// <summary>
        /// The staging resource group id in the same subscription as the image template that will be used to build the image. If
        /// this field is empty, a resource group with a random name will be created. If the resource group specified in this field
        /// doesn't exist, it will be created with the same name. If the resource group specified exists, it must be empty and in
        /// the same region as the image template. The resource group created will be deleted during template deletion if this field
        /// is empty or the resource group specified doesn't exist, but if the resource group specified exists the resources created
        /// in the resource group will be deleted during template deletion and the resource group itself will remain.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        public string StagingResourceGroup { get => this._stagingResourceGroup; set => this._stagingResourceGroup = value; }

        /// <summary>
        /// Enabling this field will improve VM boot time by optimizing the final customized image output.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string VMBootState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimizeInternal)Optimize).VMBootState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimizeInternal)Optimize).VMBootState = value ?? null; }

        /// <summary>Backing field for <see cref="VMProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfile _vMProfile;

        /// <summary>Describes how virtual machine is set up to build images</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfile VMProfile { get => (this._vMProfile = this._vMProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplateVMProfile()); set => this._vMProfile = value; }

        /// <summary>
        /// Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public int? VMProfileOsdiskSizeGb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).OSDiskSizeGb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).OSDiskSizeGb = value ?? default(int); }

        /// <summary>
        /// Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM.
        /// This may include the identity of the image template.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> VMProfileUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).UserAssignedIdentity = value ?? null /* arrayOf */; }

        /// <summary>
        /// Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default
        /// (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string VMProfileVmsize { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VMSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VMSize = value ?? null; }

        /// <summary>Backing field for <see cref="Validate" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidate _validate;

        /// <summary>
        /// Configuration options and list of validations to be performed on the resulting image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidate Validate { get => (this._validate = this._validate ?? new Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.ImageTemplatePropertiesValidate()); set => this._validate = value; }

        /// <summary>
        /// If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior.
        /// If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with
        /// caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image
        /// run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public bool? ValidateContinueDistributeOnFailure { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidateInternal)Validate).ContinueDistributeOnFailure; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidateInternal)Validate).ContinueDistributeOnFailure = value ?? default(bool); }

        /// <summary>List of validations to be performed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateInVMValidator> ValidateInVMValidation { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidateInternal)Validate).InVMValidation; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidateInternal)Validate).InVMValidation = value ?? null /* arrayOf */; }

        /// <summary>
        /// If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build
        /// will be run to generate and then validate a customized image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public bool? ValidateSourceValidationOnly { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidateInternal)Validate).SourceValidationOnly; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidateInternal)Validate).SourceValidationOnly = value ?? default(bool); }

        /// <summary>
        /// Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. Omit or specify empty string
        /// to use the default (Standard_A1_v2).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string VnetConfigProxyVMSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VnetConfigProxyVMSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VnetConfigProxyVMSize = value ?? null; }

        /// <summary>Resource id of a pre-existing subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Origin(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PropertyOrigin.Inlined)]
        public string VnetConfigSubnetId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VnetConfigSubnetId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfileInternal)VMProfile).VnetConfigSubnetId = value ?? null; }

        /// <summary>Creates an new <see cref="ImageTemplateProperties" /> instance.</summary>
        public ImageTemplateProperties()
        {

        }
    }
    /// Describes the properties of an image template
    public partial interface IImageTemplateProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Maximum duration to wait while building the image template (includes all customizations, optimization, validations, and
        /// distributions). Omit or specify 0 to use the default (4 hours).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Maximum duration to wait while building the image template (includes all customizations, optimization, validations, and distributions). Omit or specify 0 to use the default (4 hours).",
        SerializedName = @"buildTimeoutInMinutes",
        PossibleTypes = new [] { typeof(int) })]
        int? BuildTimeoutInMinute { get; set; }
        /// <summary>
        /// Specifies the properties used to describe the customization steps of the image, like Image source etc
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the properties used to describe the customization steps of the image, like Image source etc",
        SerializedName = @"customize",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateCustomizer) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateCustomizer> Customize { get; set; }
        /// <summary>The distribution targets where the image output needs to go to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The distribution targets where the image output needs to go to.",
        SerializedName = @"distribute",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateDistributor) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateDistributor> Distribute { get; set; }
        /// <summary>
        /// The staging resource group id in the same subscription as the image template that will be used to build the image. This
        /// read-only field differs from 'stagingResourceGroup' only if the value specified in the 'stagingResourceGroup' field is
        /// empty.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The staging resource group id in the same subscription as the image template that will be used to build the image. This read-only field differs from 'stagingResourceGroup' only if the value specified in the 'stagingResourceGroup' field is empty.",
        SerializedName = @"exactStagingResourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string ExactStagingResourceGroup { get;  }
        /// <summary>End time of the last run (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"End time of the last run (UTC)",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastRunStatusEndTime { get;  }
        /// <summary>Verbose information about the last run state</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Verbose information about the last run state",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string LastRunStatusMessage { get;  }
        /// <summary>State of the last run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"State of the last run",
        SerializedName = @"runState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Running", "Canceling", "Succeeded", "PartiallySucceeded", "Failed", "Canceled")]
        string LastRunStatusRunState { get;  }
        /// <summary>Sub-state of the last run</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Sub-state of the last run",
        SerializedName = @"runSubState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Queued", "Building", "Customizing", "Optimizing", "Validating", "Distributing")]
        string LastRunStatusRunSubState { get;  }
        /// <summary>Start time of the last run (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Start time of the last run (UTC)",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastRunStatusStartTime { get;  }
        /// <summary>Error code of the provisioning failure</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Error code of the provisioning failure",
        SerializedName = @"provisioningErrorCode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("BadSourceType", "BadPIRSource", "BadManagedImageSource", "BadSharedImageVersionSource", "BadCustomizerType", "UnsupportedCustomizerType", "NoCustomizerScript", "BadValidatorType", "UnsupportedValidatorType", "NoValidatorScript", "BadDistributeType", "BadSharedImageDistribute", "BadStagingResourceGroup", "ServerError", "Other")]
        string ProvisioningErrorCode { get;  }
        /// <summary>Verbose error message about the provisioning failure</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Verbose error message about the provisioning failure",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningErrorMessage { get;  }
        /// <summary>Provisioning state of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the resource",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Creating", "Updating", "Succeeded", "Failed", "Deleting", "Canceled")]
        string ProvisioningState { get;  }
        /// <summary>Specifies the properties used to describe the source image.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the properties used to describe the source image.",
        SerializedName = @"source",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateSource) })]
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateSource Source { get; set; }
        /// <summary>
        /// The staging resource group id in the same subscription as the image template that will be used to build the image. If
        /// this field is empty, a resource group with a random name will be created. If the resource group specified in this field
        /// doesn't exist, it will be created with the same name. If the resource group specified exists, it must be empty and in
        /// the same region as the image template. The resource group created will be deleted during template deletion if this field
        /// is empty or the resource group specified doesn't exist, but if the resource group specified exists the resources created
        /// in the resource group will be deleted during template deletion and the resource group itself will remain.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The staging resource group id in the same subscription as the image template that will be used to build the image. If this field is empty, a resource group with a random name will be created. If the resource group specified in this field doesn't exist, it will be created with the same name. If the resource group specified exists, it must be empty and in the same region as the image template. The resource group created will be deleted during template deletion if this field is empty or the resource group specified doesn't exist, but if the resource group specified exists the resources created in the resource group will be deleted during template deletion and the resource group itself will remain.",
        SerializedName = @"stagingResourceGroup",
        PossibleTypes = new [] { typeof(string) })]
        string StagingResourceGroup { get; set; }
        /// <summary>
        /// Enabling this field will improve VM boot time by optimizing the final customized image output.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enabling this field will improve VM boot time by optimizing the final customized image output.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string VMBootState { get; set; }
        /// <summary>
        /// Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size.",
        SerializedName = @"osDiskSizeGB",
        PossibleTypes = new [] { typeof(int) })]
        int? VMProfileOsdiskSizeGb { get; set; }
        /// <summary>
        /// Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM.
        /// This may include the identity of the image template.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM. This may include the identity of the image template.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> VMProfileUserAssignedIdentity { get; set; }
        /// <summary>
        /// Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default
        /// (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images).",
        SerializedName = @"vmSize",
        PossibleTypes = new [] { typeof(string) })]
        string VMProfileVmsize { get; set; }
        /// <summary>
        /// If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior.
        /// If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with
        /// caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image
        /// run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior. If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]",
        SerializedName = @"continueDistributeOnFailure",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ValidateContinueDistributeOnFailure { get; set; }
        /// <summary>List of validations to be performed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of validations to be performed.",
        SerializedName = @"inVMValidations",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateInVMValidator) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateInVMValidator> ValidateInVMValidation { get; set; }
        /// <summary>
        /// If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build
        /// will be run to generate and then validate a customized image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build will be run to generate and then validate a customized image.",
        SerializedName = @"sourceValidationOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ValidateSourceValidationOnly { get; set; }
        /// <summary>
        /// Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. Omit or specify empty string
        /// to use the default (Standard_A1_v2).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. Omit or specify empty string to use the default (Standard_A1_v2).",
        SerializedName = @"proxyVmSize",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigProxyVMSize { get; set; }
        /// <summary>Resource id of a pre-existing subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource id of a pre-existing subnet.",
        SerializedName = @"subnetId",
        PossibleTypes = new [] { typeof(string) })]
        string VnetConfigSubnetId { get; set; }

    }
    /// Describes the properties of an image template
    internal partial interface IImageTemplatePropertiesInternal

    {
        /// <summary>
        /// Maximum duration to wait while building the image template (includes all customizations, optimization, validations, and
        /// distributions). Omit or specify 0 to use the default (4 hours).
        /// </summary>
        int? BuildTimeoutInMinute { get; set; }
        /// <summary>
        /// Specifies the properties used to describe the customization steps of the image, like Image source etc
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateCustomizer> Customize { get; set; }
        /// <summary>The distribution targets where the image output needs to go to.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateDistributor> Distribute { get; set; }
        /// <summary>
        /// The staging resource group id in the same subscription as the image template that will be used to build the image. This
        /// read-only field differs from 'stagingResourceGroup' only if the value specified in the 'stagingResourceGroup' field is
        /// empty.
        /// </summary>
        string ExactStagingResourceGroup { get; set; }
        /// <summary>State of 'run' that is currently executing or was last executed.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateLastRunStatus LastRunStatus { get; set; }
        /// <summary>End time of the last run (UTC)</summary>
        global::System.DateTime? LastRunStatusEndTime { get; set; }
        /// <summary>Verbose information about the last run state</summary>
        string LastRunStatusMessage { get; set; }
        /// <summary>State of the last run</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Running", "Canceling", "Succeeded", "PartiallySucceeded", "Failed", "Canceled")]
        string LastRunStatusRunState { get; set; }
        /// <summary>Sub-state of the last run</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Queued", "Building", "Customizing", "Optimizing", "Validating", "Distributing")]
        string LastRunStatusRunSubState { get; set; }
        /// <summary>Start time of the last run (UTC)</summary>
        global::System.DateTime? LastRunStatusStartTime { get; set; }
        /// <summary>Specifies optimization to be performed on image.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimize Optimize { get; set; }
        /// <summary>Optimization is applied on the image for a faster VM boot.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesOptimizeVMBoot OptimizeVMBoot { get; set; }
        /// <summary>Provisioning error, if any</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IProvisioningError ProvisioningError { get; set; }
        /// <summary>Error code of the provisioning failure</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("BadSourceType", "BadPIRSource", "BadManagedImageSource", "BadSharedImageVersionSource", "BadCustomizerType", "UnsupportedCustomizerType", "NoCustomizerScript", "BadValidatorType", "UnsupportedValidatorType", "NoValidatorScript", "BadDistributeType", "BadSharedImageDistribute", "BadStagingResourceGroup", "ServerError", "Other")]
        string ProvisioningErrorCode { get; set; }
        /// <summary>Verbose error message about the provisioning failure</summary>
        string ProvisioningErrorMessage { get; set; }
        /// <summary>Provisioning state of the resource</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Creating", "Updating", "Succeeded", "Failed", "Deleting", "Canceled")]
        string ProvisioningState { get; set; }
        /// <summary>Specifies the properties used to describe the source image.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateSource Source { get; set; }
        /// <summary>
        /// The staging resource group id in the same subscription as the image template that will be used to build the image. If
        /// this field is empty, a resource group with a random name will be created. If the resource group specified in this field
        /// doesn't exist, it will be created with the same name. If the resource group specified exists, it must be empty and in
        /// the same region as the image template. The resource group created will be deleted during template deletion if this field
        /// is empty or the resource group specified doesn't exist, but if the resource group specified exists the resources created
        /// in the resource group will be deleted during template deletion and the resource group itself will remain.
        /// </summary>
        string StagingResourceGroup { get; set; }
        /// <summary>
        /// Enabling this field will improve VM boot time by optimizing the final customized image output.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string VMBootState { get; set; }
        /// <summary>Describes how virtual machine is set up to build images</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateVMProfile VMProfile { get; set; }
        /// <summary>
        /// Size of the OS disk in GB. Omit or specify 0 to use Azure's default OS disk size.
        /// </summary>
        int? VMProfileOsdiskSizeGb { get; set; }
        /// <summary>
        /// Optional array of resource IDs of user assigned managed identities to be configured on the build VM and validation VM.
        /// This may include the identity of the image template.
        /// </summary>
        System.Collections.Generic.List<string> VMProfileUserAssignedIdentity { get; set; }
        /// <summary>
        /// Size of the virtual machine used to build, customize and capture images. Omit or specify empty string to use the default
        /// (Standard_D1_v2 for Gen1 images and Standard_D2ds_v4 for Gen2 images).
        /// </summary>
        string VMProfileVmsize { get; set; }
        /// <summary>
        /// Optional configuration of the virtual network to use to deploy the build VM and validation VM in. Omit if no specific
        /// virtual network needs to be used.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IVirtualNetworkConfig VMProfileVnetConfig { get; set; }
        /// <summary>
        /// Configuration options and list of validations to be performed on the resulting image.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplatePropertiesValidate Validate { get; set; }
        /// <summary>
        /// If validation fails and this field is set to false, output image(s) will not be distributed. This is the default behavior.
        /// If validation fails and this field is set to true, output image(s) will still be distributed. Please use this option with
        /// caution as it may result in bad images being distributed for use. In either case (true or false), the end to end image
        /// run will be reported as having failed in case of a validation failure. [Note: This field has no effect if validation succeeds.]
        /// </summary>
        bool? ValidateContinueDistributeOnFailure { get; set; }
        /// <summary>List of validations to be performed.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ImageBuilder.Models.IImageTemplateInVMValidator> ValidateInVMValidation { get; set; }
        /// <summary>
        /// If this field is set to true, the image specified in the 'source' section will directly be validated. No separate build
        /// will be run to generate and then validate a customized image.
        /// </summary>
        bool? ValidateSourceValidationOnly { get; set; }
        /// <summary>
        /// Size of the proxy virtual machine used to pass traffic to the build VM and validation VM. Omit or specify empty string
        /// to use the default (Standard_A1_v2).
        /// </summary>
        string VnetConfigProxyVMSize { get; set; }
        /// <summary>Resource id of a pre-existing subnet.</summary>
        string VnetConfigSubnetId { get; set; }

    }
}