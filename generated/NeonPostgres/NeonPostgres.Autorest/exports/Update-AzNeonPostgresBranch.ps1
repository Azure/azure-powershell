
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Update a Branch
.Description
Update a Branch
.Example
Update-AzNeonPostgresBranch -Name "br-damp-bird-a82olmcu" -OrganizationName "NeonDemoOrgPS1" -ProjectName "dawn-breeze-86932057" -ResourceGroupName "neonrg" -SubscriptionId "00000000-0000-0000-0000-000000000000" -DatabaseName "updated-db" -EntityName "updated-entity" -ParentId "parent-branch-id" -RoleName "admin"

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.INeonPostgresIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IBranch
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

ATTRIBUTE <IAttributes[]>: Additional attributes for the entity
  Name <String>: Name of the attribute
  Value <String>: Value of the attribute

DATABASE <INeonDatabaseProperties[]>: Neon Databases associated with the branch
  [Attribute <List<IAttributes>>]: Additional attributes for the entity
    Name <String>: Name of the attribute
    Value <String>: Value of the attribute
  [BranchId <String>]: The ID of the branch this database belongs to
  [EntityName <String>]: Name of the resource
  [OwnerName <String>]: The name of the role that owns the database

ENDPOINT <IEndpointProperties[]>: Endpoints associated with the branch
  [Attribute <List<IAttributes>>]: Additional attributes for the entity
    Name <String>: Name of the attribute
    Value <String>: Value of the attribute
  [BranchId <String>]: The ID of the branch this endpoint belongs to
  [EndpointType <String>]: The type of the endpoint
  [EntityName <String>]: Name of the resource
  [ProjectId <String>]: The ID of the project this endpoint belongs to

INPUTOBJECT <INeonPostgresIdentity>: Identity Parameter
  [BranchName <String>]: The name of the Branch
  [Id <String>]: Resource identity path
  [OrganizationName <String>]: Name of the Neon Organizations resource
  [ProjectName <String>]: The name of the Project
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

ORGANIZATIONINPUTOBJECT <INeonPostgresIdentity>: Identity Parameter
  [BranchName <String>]: The name of the Branch
  [Id <String>]: Resource identity path
  [OrganizationName <String>]: Name of the Neon Organizations resource
  [ProjectName <String>]: The name of the Project
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

PROJECTINPUTOBJECT <INeonPostgresIdentity>: Identity Parameter
  [BranchName <String>]: The name of the Branch
  [Id <String>]: Resource identity path
  [OrganizationName <String>]: Name of the Neon Organizations resource
  [ProjectName <String>]: The name of the Project
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.

ROLE <INeonRoleProperties[]>: Roles associated with the branch
  [Attribute <List<IAttributes>>]: Additional attributes for the entity
    Name <String>: Name of the attribute
    Value <String>: Value of the attribute
  [BranchId <String>]: The ID of the branch this role belongs to
  [EntityName <String>]: Name of the resource
  [IsSuperUser <Boolean?>]: Indicates whether the role has superuser privileges
  [Permission <List<String>>]: Permissions assigned to the role
.Link
https://learn.microsoft.com/powershell/module/az.neonpostgres/update-azneonpostgresbranch
#>
function Update-AzNeonPostgresBranch {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IBranch])]
[CmdletBinding(DefaultParameterSetName='UpdateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Parameter(ParameterSetName='UpdateViaIdentityOrganizationExpanded', Mandatory)]
    [Parameter(ParameterSetName='UpdateViaIdentityProjectExpanded', Mandatory)]
    [Alias('BranchName')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [System.String]
    # The name of the Branch
    ${Name},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [System.String]
    # Name of the Neon Organizations resource
    ${OrganizationName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Parameter(ParameterSetName='UpdateViaIdentityOrganizationExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [System.String]
    # The name of the Project
    ${ProjectName},

    [Parameter(ParameterSetName='UpdateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='UpdateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='UpdateViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.INeonPostgresIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='UpdateViaIdentityOrganizationExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.INeonPostgresIdentity]
    # Identity Parameter
    ${OrganizationInputObject},

    [Parameter(ParameterSetName='UpdateViaIdentityProjectExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.INeonPostgresIdentity]
    # Identity Parameter
    ${ProjectInputObject},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IAttributes[]]
    # Additional attributes for the entity
    ${Attribute},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.INeonDatabaseProperties[]]
    # Neon Databases associated with the branch
    ${Database},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [System.String]
    # Database name associated with the branch
    ${DatabaseName},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IEndpointProperties[]]
    # Endpoints associated with the branch
    ${Endpoint},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [System.String]
    # Name of the resource
    ${EntityName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [System.String]
    # The ID of the parent branch
    ${ParentId},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [System.String]
    # The ID of the project this branch belongs to
    ${ProjectId},

    [Parameter()]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.INeonRoleProperties[]]
    # Roles associated with the branch
    ${Role},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Body')]
    [System.String]
    # Role name associated with the branch
    ${RoleName},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            UpdateExpanded = 'Az.NeonPostgres.private\Update-AzNeonPostgresBranch_UpdateExpanded';
            UpdateViaIdentityExpanded = 'Az.NeonPostgres.private\Update-AzNeonPostgresBranch_UpdateViaIdentityExpanded';
            UpdateViaIdentityOrganizationExpanded = 'Az.NeonPostgres.private\Update-AzNeonPostgresBranch_UpdateViaIdentityOrganizationExpanded';
            UpdateViaIdentityProjectExpanded = 'Az.NeonPostgres.private\Update-AzNeonPostgresBranch_UpdateViaIdentityProjectExpanded';
        }
        if (('UpdateExpanded') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
