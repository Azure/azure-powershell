// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Extensions;

    /// <summary>Connection uri parameters for the associated database</summary>
    public partial class ConnectionUriProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IConnectionUriProperties,
        Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IConnectionUriPropertiesInternal
    {

        /// <summary>Backing field for <see cref="BranchId" /> property.</summary>
        private string _branchId;

        /// <summary>Branch Id associated with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public string BranchId { get => this._branchId; set => this._branchId = value; }

        /// <summary>Backing field for <see cref="ConnectionStringUri" /> property.</summary>
        private System.Security.SecureString _connectionStringUri;

        /// <summary>connection uri returned for the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public System.Security.SecureString ConnectionStringUri { get => this._connectionStringUri; }

        /// <summary>Backing field for <see cref="DatabaseName" /> property.</summary>
        private string _databaseName;

        /// <summary>Database name associated with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public string DatabaseName { get => this._databaseName; set => this._databaseName = value; }

        /// <summary>Backing field for <see cref="EndpointId" /> property.</summary>
        private string _endpointId;

        /// <summary>the endpoint Id with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public string EndpointId { get => this._endpointId; set => this._endpointId = value; }

        /// <summary>Backing field for <see cref="IsPooled" /> property.</summary>
        private bool? _isPooled;

        /// <summary>Indicates if the connection is pooled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public bool? IsPooled { get => this._isPooled; set => this._isPooled = value; }

        /// <summary>Internal Acessors for ConnectionStringUri</summary>
        System.Security.SecureString Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Models.IConnectionUriPropertiesInternal.ConnectionStringUri { get => this._connectionStringUri; set { {_connectionStringUri = value;} } }

        /// <summary>Backing field for <see cref="ProjectId" /> property.</summary>
        private string _projectId;

        /// <summary>Project Id associated with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public string ProjectId { get => this._projectId; set => this._projectId = value; }

        /// <summary>Backing field for <see cref="RoleName" /> property.</summary>
        private string _roleName;

        /// <summary>The role name used for authentication</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Origin(Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.PropertyOrigin.Owned)]
        public string RoleName { get => this._roleName; set => this._roleName = value; }

        /// <summary>Creates an new <see cref="ConnectionUriProperties" /> instance.</summary>
        public ConnectionUriProperties()
        {

        }
    }
    /// Connection uri parameters for the associated database
    public partial interface IConnectionUriProperties :
        Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.IJsonSerializable
    {
        /// <summary>Branch Id associated with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Branch Id associated with this connection",
        SerializedName = @"branchId",
        PossibleTypes = new [] { typeof(string) })]
        string BranchId { get; set; }
        /// <summary>connection uri returned for the database</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"connection uri returned for the database",
        SerializedName = @"connectionStringUri",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString ConnectionStringUri { get;  }
        /// <summary>Database name associated with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Database name associated with this connection",
        SerializedName = @"databaseName",
        PossibleTypes = new [] { typeof(string) })]
        string DatabaseName { get; set; }
        /// <summary>the endpoint Id with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"the endpoint Id with this connection",
        SerializedName = @"endpointId",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointId { get; set; }
        /// <summary>Indicates if the connection is pooled</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates if the connection is pooled",
        SerializedName = @"isPooled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsPooled { get; set; }
        /// <summary>Project Id associated with this connection</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Project Id associated with this connection",
        SerializedName = @"projectId",
        PossibleTypes = new [] { typeof(string) })]
        string ProjectId { get; set; }
        /// <summary>The role name used for authentication</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.NeonPostgres.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The role name used for authentication",
        SerializedName = @"roleName",
        PossibleTypes = new [] { typeof(string) })]
        string RoleName { get; set; }

    }
    /// Connection uri parameters for the associated database
    internal partial interface IConnectionUriPropertiesInternal

    {
        /// <summary>Branch Id associated with this connection</summary>
        string BranchId { get; set; }
        /// <summary>connection uri returned for the database</summary>
        System.Security.SecureString ConnectionStringUri { get; set; }
        /// <summary>Database name associated with this connection</summary>
        string DatabaseName { get; set; }
        /// <summary>the endpoint Id with this connection</summary>
        string EndpointId { get; set; }
        /// <summary>Indicates if the connection is pooled</summary>
        bool? IsPooled { get; set; }
        /// <summary>Project Id associated with this connection</summary>
        string ProjectId { get; set; }
        /// <summary>The role name used for authentication</summary>
        string RoleName { get; set; }

    }
}