// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>
    /// Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical
    /// AND is performed on all filters.
    /// </summary>
    public partial class ManagementPolicyFilter :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyFilter,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyFilterInternal
    {

        /// <summary>Backing field for <see cref="BlobIndexMatch" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> _blobIndexMatch;

        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> BlobIndexMatch { get => this._blobIndexMatch; set => this._blobIndexMatch = value; }

        /// <summary>Backing field for <see cref="BlobType" /> property.</summary>
        private System.Collections.Generic.List<string> _blobType;

        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> BlobType { get => this._blobType; set => this._blobType = value; }

        /// <summary>Backing field for <see cref="PrefixMatch" /> property.</summary>
        private System.Collections.Generic.List<string> _prefixMatch;

        /// <summary>An array of strings for prefixes to be match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> PrefixMatch { get => this._prefixMatch; set => this._prefixMatch = value; }

        /// <summary>Creates an new <see cref="ManagementPolicyFilter" /> instance.</summary>
        public ManagementPolicyFilter()
        {

        }
    }
    /// Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical
    /// AND is performed on all filters.
    public partial interface IManagementPolicyFilter :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of blob index tag based filters, there can be at most 10 tag filters",
        SerializedName = @"blobIndexMatch",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> BlobIndexMatch { get; set; }
        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.",
        SerializedName = @"blobTypes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> BlobType { get; set; }
        /// <summary>An array of strings for prefixes to be match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of strings for prefixes to be match.",
        SerializedName = @"prefixMatch",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PrefixMatch { get; set; }

    }
    /// Filters limit rule actions to a subset of blobs within the storage account. If multiple filters are defined, a logical
    /// AND is performed on all filters.
    internal partial interface IManagementPolicyFilterInternal

    {
        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> BlobIndexMatch { get; set; }
        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        System.Collections.Generic.List<string> BlobType { get; set; }
        /// <summary>An array of strings for prefixes to be match.</summary>
        System.Collections.Generic.List<string> PrefixMatch { get; set; }

    }
}