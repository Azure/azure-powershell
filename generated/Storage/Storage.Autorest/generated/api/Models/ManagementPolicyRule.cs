// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.</summary>
    public partial class ManagementPolicyRule :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyRule,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyRuleInternal
    {

        /// <summary>Backing field for <see cref="Definition" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinition _definition;

        /// <summary>An object that defines the Lifecycle rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinition Definition { get => (this._definition = this._definition ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ManagementPolicyDefinition()); set => this._definition = value; }

        /// <summary>An object that defines the action set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyAction DefinitionAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).Action; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).Action = value ; }

        /// <summary>Backing field for <see cref="Enabled" /> property.</summary>
        private bool? _enabled;

        /// <summary>Rule is enabled if set to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? Enabled { get => this._enabled; set => this._enabled = value; }

        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> FilterBlobIndexMatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).FilterBlobIndexMatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).FilterBlobIndexMatch = value ?? null /* arrayOf */; }

        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> FilterBlobType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).FilterBlobType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).FilterBlobType = value ?? null /* arrayOf */; }

        /// <summary>An array of strings for prefixes to be match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> FilterPrefixMatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).FilterPrefixMatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).FilterPrefixMatch = value ?? null /* arrayOf */; }

        /// <summary>Internal Acessors for Definition</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinition Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyRuleInternal.Definition { get => (this._definition = this._definition ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ManagementPolicyDefinition()); set { {_definition = value;} } }

        /// <summary>Internal Acessors for DefinitionFilter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyFilter Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyRuleInternal.DefinitionFilter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).Filter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinitionInternal)Definition).Filter = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyRuleInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>
        /// A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within
        /// a policy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type= @"Lifecycle";

        /// <summary>The valid value is Lifecycle</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Creates an new <see cref="ManagementPolicyRule" /> instance.</summary>
        public ManagementPolicyRule()
        {

        }
    }
    /// An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
    public partial interface IManagementPolicyRule :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>An object that defines the action set.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An object that defines the action set.",
        SerializedName = @"actions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyAction) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyAction DefinitionAction { get; set; }
        /// <summary>Rule is enabled if set to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Rule is enabled if set to true.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? Enabled { get; set; }
        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of blob index tag based filters, there can be at most 10 tag filters",
        SerializedName = @"blobIndexMatch",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> FilterBlobIndexMatch { get; set; }
        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are supported for appendBlob.",
        SerializedName = @"blobTypes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> FilterBlobType { get; set; }
        /// <summary>An array of strings for prefixes to be match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"An array of strings for prefixes to be match.",
        SerializedName = @"prefixMatch",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> FilterPrefixMatch { get; set; }
        /// <summary>
        /// A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within
        /// a policy.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within a policy.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>The valid value is Lifecycle</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The valid value is Lifecycle",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }

    }
    /// An object that wraps the Lifecycle rule. Each rule is uniquely defined by name.
    internal partial interface IManagementPolicyRuleInternal

    {
        /// <summary>An object that defines the Lifecycle rule.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyDefinition Definition { get; set; }
        /// <summary>An object that defines the action set.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyAction DefinitionAction { get; set; }
        /// <summary>An object that defines the filter set.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IManagementPolicyFilter DefinitionFilter { get; set; }
        /// <summary>Rule is enabled if set to true.</summary>
        bool? Enabled { get; set; }
        /// <summary>An array of blob index tag based filters, there can be at most 10 tag filters</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITagFilter> FilterBlobIndexMatch { get; set; }
        /// <summary>
        /// An array of predefined enum values. Currently blockBlob supports all tiering and delete actions. Only delete actions are
        /// supported for appendBlob.
        /// </summary>
        System.Collections.Generic.List<string> FilterBlobType { get; set; }
        /// <summary>An array of strings for prefixes to be match.</summary>
        System.Collections.Generic.List<string> FilterPrefixMatch { get; set; }
        /// <summary>
        /// A rule name can contain any combination of alpha numeric characters. Rule name is case-sensitive. It must be unique within
        /// a policy.
        /// </summary>
        string Name { get; set; }
        /// <summary>The valid value is Lifecycle</summary>
        string Type { get; set; }

    }
}