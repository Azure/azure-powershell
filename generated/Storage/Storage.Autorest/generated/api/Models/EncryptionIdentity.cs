// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>Encryption identity for the storage account.</summary>
    public partial class EncryptionIdentity :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionIdentity,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryptionIdentityInternal
    {

        /// <summary>Backing field for <see cref="EncryptionFederatedIdentityClientId" /> property.</summary>
        private string _encryptionFederatedIdentityClientId;

        /// <summary>
        /// ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys
        /// server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string EncryptionFederatedIdentityClientId { get => this._encryptionFederatedIdentityClientId; set => this._encryptionFederatedIdentityClientId = value; }

        /// <summary>Backing field for <see cref="EncryptionUserAssignedIdentity" /> property.</summary>
        private string _encryptionUserAssignedIdentity;

        /// <summary>
        /// Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string EncryptionUserAssignedIdentity { get => this._encryptionUserAssignedIdentity; set => this._encryptionUserAssignedIdentity = value; }

        /// <summary>Creates an new <see cref="EncryptionIdentity" /> instance.</summary>
        public EncryptionIdentity()
        {

        }
    }
    /// Encryption identity for the storage account.
    public partial interface IEncryptionIdentity :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys
        /// server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys server-side encryption on the storage account.",
        SerializedName = @"federatedIdentityClientId",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionFederatedIdentityClientId { get; set; }
        /// <summary>
        /// Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.",
        SerializedName = @"userAssignedIdentity",
        PossibleTypes = new [] { typeof(string) })]
        string EncryptionUserAssignedIdentity { get; set; }

    }
    /// Encryption identity for the storage account.
    internal partial interface IEncryptionIdentityInternal

    {
        /// <summary>
        /// ClientId of the multi-tenant application to be used in conjunction with the user-assigned identity for cross-tenant customer-managed-keys
        /// server-side encryption on the storage account.
        /// </summary>
        string EncryptionFederatedIdentityClientId { get; set; }
        /// <summary>
        /// Resource identifier of the UserAssigned identity to be associated with server-side encryption on the storage account.
        /// </summary>
        string EncryptionUserAssignedIdentity { get; set; }

    }
}