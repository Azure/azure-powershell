// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The storage account.</summary>
    public partial class StorageAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccount,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResource __trackedResource = new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.TrackedResource();

        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier
        /// is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs
        /// storage account type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string AccessTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AccessTier; }

        /// <summary>
        /// If customer initiated account migration is in progress, the value will be true else it will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AccountMigrationInProgress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AccountMigrationInProgress; }

        /// <summary>Specifies the Active Directory account type for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyAccountType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyAccountType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyAccountType = value ?? null; }

        /// <summary>Specifies the security identifier (SID) for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyAzureStorageSid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyAzureStorageSid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyAzureStorageSid = value ?? null; }

        /// <summary>Specifies the domain GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyDomainGuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyDomainGuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyDomainGuid = value ?? null; }

        /// <summary>Specifies the primary domain that the AD DNS server is authoritative for.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyDomainName = value ?? null; }

        /// <summary>Specifies the security identifier (SID).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyDomainSid { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyDomainSid; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyDomainSid = value ?? null; }

        /// <summary>Specifies the Active Directory forest to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyForestName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyForestName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyForestName = value ?? null; }

        /// <summary>Specifies the NetBIOS domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertyNetBiosDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyNetBiosDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertyNetBiosDomainName = value ?? null; }

        /// <summary>Specifies the Active Directory SAMAccountName for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ActiveDirectoryPropertySamAccountName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertySamAccountName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ActiveDirectoryPropertySamAccountName = value ?? null; }

        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is false
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowBlobPublicAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowBlobPublicAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowBlobPublicAccess = value ?? default(bool); }

        /// <summary>
        /// Allow or disallow cross AAD tenant object replication. Set this property to true for new or existing accounts only if
        /// object replication policies will involve storage accounts in different AAD tenants. The default interpretation is false
        /// for new accounts to follow best security practices by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowCrossTenantReplication { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowCrossTenantReplication; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowCrossTenantReplication = value ?? default(bool); }

        /// <summary>
        /// Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD).
        /// The default value is null, which is equivalent to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? AllowSharedKeyAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowSharedKeyAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowSharedKeyAccess = value ?? default(bool); }

        /// <summary>
        /// Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string AllowedCopyScope { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowedCopyScope; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AllowedCopyScope = value ?? null; }

        /// <summary>
        /// Default share permission for users using Kerberos authentication if RBAC role is not assigned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string AzureFileIdentityBasedAuthenticationDefaultSharePermission { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFileIdentityBasedAuthenticationDefaultSharePermission; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFileIdentityBasedAuthenticationDefaultSharePermission = value ?? null; }

        /// <summary>
        /// Indicates the directory service used. Note that this enum may be extended in the future.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string AzureFileIdentityBasedAuthenticationDirectoryServiceOption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFileIdentityBasedAuthenticationDirectoryServiceOption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFileIdentityBasedAuthenticationDirectoryServiceOption = value ?? null; }

        /// <summary>Failure reason when blob restore is failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string BlobRestoreStatusFailureReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusFailureReason; }

        /// <summary>Id for tracking blob restore request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string BlobRestoreStatusRestoreId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusRestoreId; }

        /// <summary>Gets the creation date and time of the storage account in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CreationTime; }

        /// <summary>
        /// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string CustomDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CustomDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CustomDomainName = value ?? null; }

        /// <summary>
        /// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? CustomDomainUseSubDomainName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CustomDomainUseSubDomainName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CustomDomainUseSubDomainName = value ?? default(bool); }

        /// <summary>
        /// A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? DefaultToOAuthAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).DefaultToOAuthAuthentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).DefaultToOAuthAuthentication = value ?? default(bool); }

        /// <summary>
        /// Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string DnsEndpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).DnsEndpointType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).DnsEndpointType = value ?? null; }

        /// <summary>Allows https traffic only to storage service if sets to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? EnableHttpsTrafficOnly { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).EnableHttpsTrafficOnly; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).EnableHttpsTrafficOnly = value ?? default(bool); }

        /// <summary>NFS 3.0 protocol support enabled if set to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? EnableNfsV3 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).EnableNfsV3; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).EnableNfsV3 = value ?? default(bool); }

        /// <summary>
        /// Encryption settings to be used for server-side encryption for the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryption Encryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).Encryption; }

        /// <summary>Backing field for <see cref="ExtendedLocation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocation _extendedLocation;

        /// <summary>The extendedLocation of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocation ExtendedLocation { get => (this._extendedLocation = this._extendedLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ExtendedLocation()); set => this._extendedLocation = value; }

        /// <summary>The name of the extended location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ExtendedLocationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocationInternal)ExtendedLocation).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocationInternal)ExtendedLocation).Name = value ?? null; }

        /// <summary>The type of the extended location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ExtendedLocationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocationInternal)ExtendedLocation).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocationInternal)ExtendedLocation).Type = value ?? null; }

        /// <summary>
        /// If the failover is in progress, the value will be true, otherwise, it will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? FailoverInProgress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).FailoverInProgress; }

        /// <summary>
        /// A boolean flag which indicates whether or not account failover is supported for the account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? GeoReplicationStatCanFailover { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatCanFailover; }

        /// <summary>
        /// A boolean flag which indicates whether or not planned account failover is supported for the account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? GeoReplicationStatCanPlannedFailover { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatCanPlannedFailover; }

        /// <summary>
        /// All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes
        /// following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime
        /// is not available, this can happen if secondary is offline or we are in bootstrap.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? GeoReplicationStatLastSyncTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatLastSyncTime; }

        /// <summary>The redundancy type of the account after an account failover is performed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string GeoReplicationStatPostFailoverRedundancy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatPostFailoverRedundancy; }

        /// <summary>
        /// The redundancy type of the account after a planned account failover is performed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string GeoReplicationStatPostPlannedFailoverRedundancy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatPostPlannedFailoverRedundancy; }

        /// <summary>
        /// The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and
        /// operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in
        /// progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location
        /// is temporarily unavailable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string GeoReplicationStatStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatStatus; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Id; }

        /// <summary>Backing field for <see cref="Identity" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentity _identity;

        /// <summary>The identity of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentity Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Identity()); set => this._identity = value; }

        /// <summary>The principal ID of resource identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).PrincipalId; }

        /// <summary>The tenant ID of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).TenantId; }

        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string IdentityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).Type = value ?? null; }

        /// <summary>
        /// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage
        /// account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).UserAssignedIdentity; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).UserAssignedIdentity = value ?? null /* model class */; }

        /// <summary>
        /// This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can
        /// be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and
        /// any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ImmutabilityPolicyAllowProtectedAppendWrite { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutabilityPolicyAllowProtectedAppendWrite; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutabilityPolicyAllowProtectedAppendWrite = value ?? default(bool); }

        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay = value ?? default(int); }

        /// <summary>
        /// The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows
        /// increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked
        /// state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked
        /// state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which
        /// cannot be reverted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ImmutabilityPolicyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutabilityPolicyState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutabilityPolicyState = value ?? null; }

        /// <summary>
        /// A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability
        /// enabled by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? ImmutableStorageWithVersioningEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutableStorageWithVersioningEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutableStorageWithVersioningEnabled = value ?? default(bool); }

        /// <summary>Account HierarchicalNamespace enabled if sets to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? IsHnsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsHnsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsHnsEnabled = value ?? default(bool); }

        /// <summary>Enables local users feature, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? IsLocalUserEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsLocalUserEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsLocalUserEnabled = value ?? default(bool); }

        /// <summary>Enables Secure File Transfer Protocol, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? IsSftpEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsSftpEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsSftpEnabled = value ?? default(bool); }

        /// <summary>
        /// This property will be set to true or false on an event of ongoing migration. Default value is null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? IsSkuConversionBlocked { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsSkuConversionBlocked; }

        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? KeyCreationTimeKey1 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyCreationTimeKey1; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyCreationTimeKey1 = value ?? default(global::System.DateTime); }

        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? KeyCreationTimeKey2 { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyCreationTimeKey2; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyCreationTimeKey2 = value ?? default(global::System.DateTime); }

        /// <summary>The key expiration period in days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public int? KeyPolicyKeyExpirationPeriodInDay { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyPolicyKeyExpirationPeriodInDay; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyPolicyKeyExpirationPeriodInDay = value ?? default(int); }

        /// <summary>Backing field for <see cref="Kind" /> property.</summary>
        private string _kind;

        /// <summary>Gets the Kind.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string Kind { get => this._kind; }

        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string LargeFileSharesState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).LargeFileSharesState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).LargeFileSharesState = value ?? null; }

        /// <summary>
        /// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp
        /// is retained. This element is not returned if there has never been a failover instance. Only available if the accountType
        /// is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? LastGeoFailoverTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).LastGeoFailoverTime; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResourceInternal)__trackedResource).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResourceInternal)__trackedResource).Location = value ; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Name = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Type = value; }

        /// <summary>Internal Acessors for AccessTier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.AccessTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AccessTier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AccessTier = value; }

        /// <summary>Internal Acessors for AccountMigrationInProgress</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.AccountMigrationInProgress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AccountMigrationInProgress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AccountMigrationInProgress = value; }

        /// <summary>
        /// Internal Acessors for AzureFileIdentityBasedAuthenticationActiveDirectoryProperty
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IActiveDirectoryProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.AzureFileIdentityBasedAuthenticationActiveDirectoryProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFileIdentityBasedAuthenticationActiveDirectoryProperty; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFileIdentityBasedAuthenticationActiveDirectoryProperty = value; }

        /// <summary>Internal Acessors for AzureFilesIdentityBasedAuthentication</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IAzureFilesIdentityBasedAuthentication Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.AzureFilesIdentityBasedAuthentication { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFilesIdentityBasedAuthentication; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).AzureFilesIdentityBasedAuthentication = value; }

        /// <summary>Internal Acessors for BlobRestoreStatusFailureReason</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.BlobRestoreStatusFailureReason { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusFailureReason; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusFailureReason = value; }

        /// <summary>Internal Acessors for BlobRestoreStatusParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreParameters Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.BlobRestoreStatusParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusParameter = value; }

        /// <summary>Internal Acessors for BlobRestoreStatusRestoreId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.BlobRestoreStatusRestoreId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusRestoreId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusRestoreId = value; }

        /// <summary>Internal Acessors for CreationTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.CreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CreationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CreationTime = value; }

        /// <summary>Internal Acessors for CustomDomain</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ICustomDomain Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.CustomDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CustomDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).CustomDomain = value; }

        /// <summary>Internal Acessors for Encryption</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryption Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.Encryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).Encryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).Encryption = value; }

        /// <summary>Internal Acessors for ExtendedLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocation Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.ExtendedLocation { get => (this._extendedLocation = this._extendedLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ExtendedLocation()); set { {_extendedLocation = value;} } }

        /// <summary>Internal Acessors for FailoverInProgress</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.FailoverInProgress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).FailoverInProgress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).FailoverInProgress = value; }

        /// <summary>Internal Acessors for GeoReplicationStat</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IGeoReplicationStats Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStat { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStat; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStat = value; }

        /// <summary>Internal Acessors for GeoReplicationStatCanFailover</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStatCanFailover { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatCanFailover; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatCanFailover = value; }

        /// <summary>Internal Acessors for GeoReplicationStatCanPlannedFailover</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStatCanPlannedFailover { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatCanPlannedFailover; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatCanPlannedFailover = value; }

        /// <summary>Internal Acessors for GeoReplicationStatLastSyncTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStatLastSyncTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatLastSyncTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatLastSyncTime = value; }

        /// <summary>Internal Acessors for GeoReplicationStatPostFailoverRedundancy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStatPostFailoverRedundancy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatPostFailoverRedundancy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatPostFailoverRedundancy = value; }

        /// <summary>Internal Acessors for GeoReplicationStatPostPlannedFailoverRedundancy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStatPostPlannedFailoverRedundancy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatPostPlannedFailoverRedundancy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatPostPlannedFailoverRedundancy = value; }

        /// <summary>Internal Acessors for GeoReplicationStatStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.GeoReplicationStatStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).GeoReplicationStatStatus = value; }

        /// <summary>Internal Acessors for Identity</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentity Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.Identity { get => (this._identity = this._identity ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Identity()); set { {_identity = value;} } }

        /// <summary>Internal Acessors for IdentityPrincipalId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.IdentityPrincipalId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).PrincipalId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).PrincipalId = value; }

        /// <summary>Internal Acessors for IdentityTenantId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.IdentityTenantId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).TenantId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityInternal)Identity).TenantId = value; }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioning</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IImmutableStorageAccount Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.ImmutableStorageWithVersioning { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutableStorageWithVersioning; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutableStorageWithVersioning = value; }

        /// <summary>Internal Acessors for ImmutableStorageWithVersioningImmutabilityPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IAccountImmutabilityPolicyProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.ImmutableStorageWithVersioningImmutabilityPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutableStorageWithVersioningImmutabilityPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ImmutableStorageWithVersioningImmutabilityPolicy = value; }

        /// <summary>Internal Acessors for IsSkuConversionBlocked</summary>
        bool? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.IsSkuConversionBlocked { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsSkuConversionBlocked; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).IsSkuConversionBlocked = value; }

        /// <summary>Internal Acessors for KeyCreationTime</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IKeyCreationTime Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.KeyCreationTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyCreationTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyCreationTime = value; }

        /// <summary>Internal Acessors for KeyPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IKeyPolicy Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.KeyPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).KeyPolicy = value; }

        /// <summary>Internal Acessors for Kind</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.Kind { get => this._kind; set { {_kind = value;} } }

        /// <summary>Internal Acessors for LastGeoFailoverTime</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.LastGeoFailoverTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).LastGeoFailoverTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).LastGeoFailoverTime = value; }

        /// <summary>Internal Acessors for NetworkRuleSet</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.INetworkRuleSet Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.NetworkRuleSet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSet; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSet = value; }

        /// <summary>Internal Acessors for PrimaryEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEndpoints Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpoint = value; }

        /// <summary>Internal Acessors for PrimaryEndpointBlob</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointBlob = value; }

        /// <summary>Internal Acessors for PrimaryEndpointDf</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointDf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointDf = value; }

        /// <summary>Internal Acessors for PrimaryEndpointFile</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointFile = value; }

        /// <summary>Internal Acessors for PrimaryEndpointInternetEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternetEndpoints Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointInternetEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointInternetEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointInternetEndpoint = value; }

        /// <summary>Internal Acessors for PrimaryEndpointMicrosoftEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountMicrosoftEndpoints Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointMicrosoftEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointMicrosoftEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointMicrosoftEndpoint = value; }

        /// <summary>Internal Acessors for PrimaryEndpointQueue</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointQueue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointQueue = value; }

        /// <summary>Internal Acessors for PrimaryEndpointTable</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointTable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointTable = value; }

        /// <summary>Internal Acessors for PrimaryEndpointWeb</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointWeb; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointWeb = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsInternetEndpointsBlob</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsInternetEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsBlob = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsInternetEndpointsDf</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsInternetEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsDf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsDf = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsInternetEndpointsFile</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsInternetEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsFile = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsInternetEndpointsWeb</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsInternetEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsWeb; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsWeb = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsMicrosoftEndpointsBlob</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsMicrosoftEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsBlob = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsMicrosoftEndpointsDf</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsMicrosoftEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsDf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsDf = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsMicrosoftEndpointsFile</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsMicrosoftEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsFile = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsMicrosoftEndpointsQueue</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsMicrosoftEndpointsQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsQueue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsQueue = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsMicrosoftEndpointsTable</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsMicrosoftEndpointsTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsTable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsTable = value; }

        /// <summary>Internal Acessors for PrimaryEndpointsMicrosoftEndpointsWeb</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryEndpointsMicrosoftEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsWeb; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsWeb = value; }

        /// <summary>Internal Acessors for PrimaryLocation</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrimaryLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryLocation = value; }

        /// <summary>Internal Acessors for PrivateEndpointConnection</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPrivateEndpointConnection> Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrivateEndpointConnection; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrivateEndpointConnection = value; }

        /// <summary>Internal Acessors for PropertiesBlobRestoreStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreStatus Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PropertiesBlobRestoreStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatus = value; }

        /// <summary>Internal Acessors for PropertiesBlobRestoreStatusStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.PropertiesBlobRestoreStatusStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusStatus = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountProperties Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageAccountProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for RoutingPreference</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IRoutingPreference Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.RoutingPreference { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreference; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreference = value; }

        /// <summary>Internal Acessors for SasPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISasPolicy Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SasPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicy = value; }

        /// <summary>Internal Acessors for SasPolicyExpirationAction</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SasPolicyExpirationAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicyExpirationAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicyExpirationAction = value; }

        /// <summary>Internal Acessors for SecondaryEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEndpoints Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpoint = value; }

        /// <summary>Internal Acessors for SecondaryEndpointBlob</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointBlob = value; }

        /// <summary>Internal Acessors for SecondaryEndpointDf</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointDf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointDf = value; }

        /// <summary>Internal Acessors for SecondaryEndpointFile</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointFile = value; }

        /// <summary>Internal Acessors for SecondaryEndpointInternetEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternetEndpoints Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointInternetEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointInternetEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointInternetEndpoint = value; }

        /// <summary>Internal Acessors for SecondaryEndpointMicrosoftEndpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountMicrosoftEndpoints Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointMicrosoftEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointMicrosoftEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointMicrosoftEndpoint = value; }

        /// <summary>Internal Acessors for SecondaryEndpointQueue</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointQueue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointQueue = value; }

        /// <summary>Internal Acessors for SecondaryEndpointTable</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointTable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointTable = value; }

        /// <summary>Internal Acessors for SecondaryEndpointWeb</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointWeb; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointWeb = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsInternetEndpointsBlob</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsInternetEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsBlob = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsInternetEndpointsDf</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsInternetEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsDf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsDf = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsInternetEndpointsFile</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsInternetEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsFile = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsInternetEndpointsWeb</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsInternetEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsWeb; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsWeb = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsMicrosoftEndpointsBlob</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsMicrosoftEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsBlob; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsBlob = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsMicrosoftEndpointsDf</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsMicrosoftEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsDf; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsDf = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsMicrosoftEndpointsFile</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsMicrosoftEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsFile; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsFile = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsMicrosoftEndpointsQueue</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsMicrosoftEndpointsQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsQueue; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsQueue = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsMicrosoftEndpointsTable</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsMicrosoftEndpointsTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsTable; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsTable = value; }

        /// <summary>Internal Acessors for SecondaryEndpointsMicrosoftEndpointsWeb</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryEndpointsMicrosoftEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsWeb; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsWeb = value; }

        /// <summary>Internal Acessors for SecondaryLocation</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SecondaryLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryLocation; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryLocation = value; }

        /// <summary>Internal Acessors for Sku</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISku Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Sku()); set { {_sku = value;} } }

        /// <summary>Internal Acessors for SkuConversionStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountSkuConversionStatus Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SkuConversionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatus = value; }

        /// <summary>Internal Acessors for SkuConversionStatusEndTime</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SkuConversionStatusEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusEndTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusEndTime = value; }

        /// <summary>Internal Acessors for SkuConversionStatusSkuConversionStatus</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SkuConversionStatusSkuConversionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusSkuConversionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusSkuConversionStatus = value; }

        /// <summary>Internal Acessors for SkuConversionStatusStartTime</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SkuConversionStatusStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusStartTime = value; }

        /// <summary>Internal Acessors for SkuTier</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISkuInternal)Sku).Tier; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISkuInternal)Sku).Tier = value; }

        /// <summary>Internal Acessors for StatusOfPrimary</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.StatusOfPrimary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StatusOfPrimary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StatusOfPrimary = value; }

        /// <summary>Internal Acessors for StatusOfSecondary</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternal.StatusOfSecondary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StatusOfSecondary; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StatusOfSecondary = value; }

        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string MinimumTlsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).MinimumTlsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).MinimumTlsVersion = value ?? null; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Name; }

        /// <summary>
        /// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
        /// (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string NetworkRuleSetBypass { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetBypass; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetBypass = value ?? null; }

        /// <summary>Specifies the default action of allow or deny when no other rules match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string NetworkRuleSetDefaultAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetDefaultAction; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetDefaultAction = value ?? null; }

        /// <summary>Sets the IP ACL rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIPRule> NetworkRuleSetIPRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetIPRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetIPRule = value ?? null /* arrayOf */; }

        /// <summary>Sets the resource access rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceAccessRule> NetworkRuleSetResourceAccessRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetResourceAccessRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetResourceAccessRule = value ?? null /* arrayOf */; }

        /// <summary>Sets the virtual network rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IVirtualNetworkRule> NetworkRuleSetVirtualNetworkRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetVirtualNetworkRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).NetworkRuleSetVirtualNetworkRule = value ?? null /* arrayOf */; }

        /// <summary>Blob ranges to restore.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreRange> ParameterBlobRange { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ParameterBlobRange; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ParameterBlobRange = value ?? null /* arrayOf */; }

        /// <summary>Restore blob to the specified time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public global::System.DateTime? ParameterTimeToRestore { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ParameterTimeToRestore; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ParameterTimeToRestore = value ?? default(global::System.DateTime); }

        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointBlob; }

        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointDf; }

        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointFile; }

        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointQueue; }

        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointTable; }

        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointWeb; }

        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsInternetEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsBlob; }

        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsInternetEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsDf; }

        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsInternetEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsFile; }

        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsInternetEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsInternetEndpointsWeb; }

        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsMicrosoftEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsBlob; }

        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsMicrosoftEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsDf; }

        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsMicrosoftEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsFile; }

        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsMicrosoftEndpointsQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsQueue; }

        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsMicrosoftEndpointsTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsTable; }

        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryEndpointsMicrosoftEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryEndpointsMicrosoftEndpointsWeb; }

        /// <summary>Gets the location of the primary data center for the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PrimaryLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrimaryLocation; }

        /// <summary>
        /// List of private endpoint connection associated with the specified storage account
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPrivateEndpointConnection> PrivateEndpointConnection { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PrivateEndpointConnection; }

        /// <summary>
        /// The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete:
        /// Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PropertiesBlobRestoreStatusStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).BlobRestoreStatusStatus; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountProperties _property;

        /// <summary>Properties of the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageAccountProperties()); set => this._property = value; }

        /// <summary>Gets the status of the storage account at the time the operation was called.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).ProvisioningState; }

        /// <summary>
        /// Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string PublicNetworkAccess { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PublicNetworkAccess; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).PublicNetworkAccess = value ?? null; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// A boolean flag which indicates whether internet routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? RoutingPreferencePublishInternetEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreferencePublishInternetEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreferencePublishInternetEndpoint = value ?? default(bool); }

        /// <summary>
        /// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public bool? RoutingPreferencePublishMicrosoftEndpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreferencePublishMicrosoftEndpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreferencePublishMicrosoftEndpoint = value ?? default(bool); }

        /// <summary>Routing Choice defines the kind of network routing opted by the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string RoutingPreferenceRoutingChoice { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreferenceRoutingChoice; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).RoutingPreferenceRoutingChoice = value ?? null; }

        /// <summary>The SAS expiration action. Can only be Log.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SasPolicyExpirationAction { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicyExpirationAction; }

        /// <summary>The SAS expiration period, DD.HH:MM:SS.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SasPolicySasExpirationPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicySasExpirationPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SasPolicySasExpirationPeriod = value ?? null; }

        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointBlob; }

        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointDf; }

        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointFile; }

        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointQueue; }

        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointTable; }

        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointWeb; }

        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsInternetEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsBlob; }

        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsInternetEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsDf; }

        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsInternetEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsFile; }

        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsInternetEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsInternetEndpointsWeb; }

        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsMicrosoftEndpointsBlob { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsBlob; }

        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsMicrosoftEndpointsDf { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsDf; }

        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsMicrosoftEndpointsFile { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsFile; }

        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsMicrosoftEndpointsQueue { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsQueue; }

        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsMicrosoftEndpointsTable { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsTable; }

        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryEndpointsMicrosoftEndpointsWeb { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryEndpointsMicrosoftEndpointsWeb; }

        /// <summary>
        /// Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS
        /// or Standard_RAGRS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SecondaryLocation { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).SecondaryLocation; }

        /// <summary>Backing field for <see cref="Sku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISku _sku;

        /// <summary>Gets the SKU.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISku Sku { get => (this._sku = this._sku ?? new Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.Sku()); }

        /// <summary>This property represents the sku conversion end time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SkuConversionStatusEndTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusEndTime; }

        /// <summary>This property indicates the current sku conversion status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SkuConversionStatusSkuConversionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusSkuConversionStatus; }

        /// <summary>This property represents the sku conversion start time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SkuConversionStatusStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusStartTime; }

        /// <summary>
        /// This property represents the target sku name to which the account sku is being converted asynchronously.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SkuConversionStatusTargetSkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusTargetSkuName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StorageAccountSkuConversionStatusTargetSkuName = value ?? null; }

        /// <summary>
        /// The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SkuName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISkuInternal)Sku).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISkuInternal)Sku).Name = value ?? null; }

        /// <summary>The SKU tier. This is based on the SKU name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string SkuTier { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISkuInternal)Sku).Tier; }

        /// <summary>
        /// Gets the status indicating whether the primary location of the storage account is available or unavailable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string StatusOfPrimary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StatusOfPrimary; }

        /// <summary>
        /// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available
        /// if the SKU name is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inlined)]
        public string StatusOfSecondary { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountPropertiesInternal)Property).StatusOfSecondary; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResourceInternal)__trackedResource).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResourceInternal)__trackedResource).Tag = value ?? null /* model class */; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceInternal)__trackedResource).Type; }

        /// <summary>Creates an new <see cref="StorageAccount" /> instance.</summary>
        public StorageAccount()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResource), __trackedResource);
            await eventListener.AssertObjectIsValid(nameof(__trackedResource), __trackedResource);
        }
    }
    /// The storage account.
    public partial interface IStorageAccount :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResource
    {
        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier
        /// is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs
        /// storage account type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs storage account type.",
        SerializedName = @"accessTier",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Hot", "Cool", "Premium")]
        string AccessTier { get;  }
        /// <summary>
        /// If customer initiated account migration is in progress, the value will be true else it will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"If customer initiated account migration is in progress, the value will be true else it will be null.",
        SerializedName = @"accountMigrationInProgress",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AccountMigrationInProgress { get;  }
        /// <summary>Specifies the Active Directory account type for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the Active Directory account type for Azure Storage.",
        SerializedName = @"accountType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("User", "Computer")]
        string ActiveDirectoryPropertyAccountType { get; set; }
        /// <summary>Specifies the security identifier (SID) for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the security identifier (SID) for Azure Storage.",
        SerializedName = @"azureStorageSid",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyAzureStorageSid { get; set; }
        /// <summary>Specifies the domain GUID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the domain GUID.",
        SerializedName = @"domainGuid",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyDomainGuid { get; set; }
        /// <summary>Specifies the primary domain that the AD DNS server is authoritative for.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the primary domain that the AD DNS server is authoritative for.",
        SerializedName = @"domainName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyDomainName { get; set; }
        /// <summary>Specifies the security identifier (SID).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the security identifier (SID).",
        SerializedName = @"domainSid",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyDomainSid { get; set; }
        /// <summary>Specifies the Active Directory forest to get.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the Active Directory forest to get.",
        SerializedName = @"forestName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyForestName { get; set; }
        /// <summary>Specifies the NetBIOS domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the NetBIOS domain name.",
        SerializedName = @"netBiosDomainName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertyNetBiosDomainName { get; set; }
        /// <summary>Specifies the Active Directory SAMAccountName for Azure Storage.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the Active Directory SAMAccountName for Azure Storage.",
        SerializedName = @"samAccountName",
        PossibleTypes = new [] { typeof(string) })]
        string ActiveDirectoryPropertySamAccountName { get; set; }
        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is false
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is false for this property.",
        SerializedName = @"allowBlobPublicAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowBlobPublicAccess { get; set; }
        /// <summary>
        /// Allow or disallow cross AAD tenant object replication. Set this property to true for new or existing accounts only if
        /// object replication policies will involve storage accounts in different AAD tenants. The default interpretation is false
        /// for new accounts to follow best security practices by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow or disallow cross AAD tenant object replication. Set this property to true for new or existing accounts only if object replication policies will involve storage accounts in different AAD tenants. The default interpretation is false for new accounts to follow best security practices by default.",
        SerializedName = @"allowCrossTenantReplication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowCrossTenantReplication { get; set; }
        /// <summary>
        /// Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD).
        /// The default value is null, which is equivalent to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD). The default value is null, which is equivalent to true.",
        SerializedName = @"allowSharedKeyAccess",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AllowSharedKeyAccess { get; set; }
        /// <summary>
        /// Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.",
        SerializedName = @"allowedCopyScope",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("PrivateLink", "AAD")]
        string AllowedCopyScope { get; set; }
        /// <summary>
        /// Default share permission for users using Kerberos authentication if RBAC role is not assigned.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Default share permission for users using Kerberos authentication if RBAC role is not assigned.",
        SerializedName = @"defaultSharePermission",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "StorageFileDataSmbShareReader", "StorageFileDataSmbShareContributor", "StorageFileDataSmbShareElevatedContributor")]
        string AzureFileIdentityBasedAuthenticationDefaultSharePermission { get; set; }
        /// <summary>
        /// Indicates the directory service used. Note that this enum may be extended in the future.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates the directory service used. Note that this enum may be extended in the future.",
        SerializedName = @"directoryServiceOptions",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "AADDS", "AD", "AADKERB")]
        string AzureFileIdentityBasedAuthenticationDirectoryServiceOption { get; set; }
        /// <summary>Failure reason when blob restore is failed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Failure reason when blob restore is failed.",
        SerializedName = @"failureReason",
        PossibleTypes = new [] { typeof(string) })]
        string BlobRestoreStatusFailureReason { get;  }
        /// <summary>Id for tracking blob restore request.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Id for tracking blob restore request.",
        SerializedName = @"restoreId",
        PossibleTypes = new [] { typeof(string) })]
        string BlobRestoreStatusRestoreId { get;  }
        /// <summary>Gets the creation date and time of the storage account in UTC.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the creation date and time of the storage account in UTC.",
        SerializedName = @"creationTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? CreationTime { get;  }
        /// <summary>
        /// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string CustomDomainName { get;  }
        /// <summary>
        /// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.",
        SerializedName = @"useSubDomainName",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CustomDomainUseSubDomainName { get;  }
        /// <summary>
        /// A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false for this property.",
        SerializedName = @"defaultToOAuthAuthentication",
        PossibleTypes = new [] { typeof(bool) })]
        bool? DefaultToOAuthAuthentication { get; set; }
        /// <summary>
        /// Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.",
        SerializedName = @"dnsEndpointType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard", "AzureDnsZone")]
        string DnsEndpointType { get; set; }
        /// <summary>Allows https traffic only to storage service if sets to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allows https traffic only to storage service if sets to true.",
        SerializedName = @"supportsHttpsTrafficOnly",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableHttpsTrafficOnly { get; set; }
        /// <summary>NFS 3.0 protocol support enabled if set to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"NFS 3.0 protocol support enabled if set to true.",
        SerializedName = @"isNfsV3Enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableNfsV3 { get; set; }
        /// <summary>
        /// Encryption settings to be used for server-side encryption for the storage account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Encryption settings to be used for server-side encryption for the storage account.",
        SerializedName = @"encryption",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryption) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryption Encryption { get;  }
        /// <summary>The name of the extended location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the extended location.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ExtendedLocationName { get; set; }
        /// <summary>The type of the extended location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The type of the extended location.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("EdgeZone")]
        string ExtendedLocationType { get; set; }
        /// <summary>
        /// If the failover is in progress, the value will be true, otherwise, it will be null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"If the failover is in progress, the value will be true, otherwise, it will be null.",
        SerializedName = @"failoverInProgress",
        PossibleTypes = new [] { typeof(bool) })]
        bool? FailoverInProgress { get;  }
        /// <summary>
        /// A boolean flag which indicates whether or not account failover is supported for the account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A boolean flag which indicates whether or not account failover is supported for the account.",
        SerializedName = @"canFailover",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GeoReplicationStatCanFailover { get;  }
        /// <summary>
        /// A boolean flag which indicates whether or not planned account failover is supported for the account.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A boolean flag which indicates whether or not planned account failover is supported for the account.",
        SerializedName = @"canPlannedFailover",
        PossibleTypes = new [] { typeof(bool) })]
        bool? GeoReplicationStatCanPlannedFailover { get;  }
        /// <summary>
        /// All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes
        /// following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime
        /// is not available, this can happen if secondary is offline or we are in bootstrap.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime is not available, this can happen if secondary is offline or we are in bootstrap.",
        SerializedName = @"lastSyncTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? GeoReplicationStatLastSyncTime { get;  }
        /// <summary>The redundancy type of the account after an account failover is performed.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The redundancy type of the account after an account failover is performed.",
        SerializedName = @"postFailoverRedundancy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_LRS", "Standard_ZRS")]
        string GeoReplicationStatPostFailoverRedundancy { get;  }
        /// <summary>
        /// The redundancy type of the account after a planned account failover is performed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The redundancy type of the account after a planned account failover is performed.",
        SerializedName = @"postPlannedFailoverRedundancy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_GRS", "Standard_GZRS", "Standard_RAGRS", "Standard_RAGZRS")]
        string GeoReplicationStatPostPlannedFailoverRedundancy { get;  }
        /// <summary>
        /// The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and
        /// operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in
        /// progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location
        /// is temporarily unavailable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location is temporarily unavailable.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Live", "Bootstrap", "Unavailable")]
        string GeoReplicationStatStatus { get;  }
        /// <summary>The principal ID of resource identity.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The principal ID of resource identity.",
        SerializedName = @"principalId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityPrincipalId { get;  }
        /// <summary>The tenant ID of resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The tenant ID of resource.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        string IdentityTenantId { get;  }
        /// <summary>The identity type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The identity type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage
        /// account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.",
        SerializedName = @"userAssignedIdentities",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityUserAssignedIdentities) })]
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can
        /// be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and
        /// any existing blocks cannot be modified or deleted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and any existing blocks cannot be modified or deleted.",
        SerializedName = @"allowProtectedAppendWrites",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImmutabilityPolicyAllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The immutability period for the blobs in the container since the policy creation, in days.",
        SerializedName = @"immutabilityPeriodSinceCreationInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows
        /// increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked
        /// state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked
        /// state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which
        /// cannot be reverted.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which cannot be reverted.",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Unlocked", "Locked", "Disabled")]
        string ImmutabilityPolicyState { get; set; }
        /// <summary>
        /// A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability
        /// enabled by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability enabled by default.",
        SerializedName = @"enabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ImmutableStorageWithVersioningEnabled { get; set; }
        /// <summary>Account HierarchicalNamespace enabled if sets to true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Account HierarchicalNamespace enabled if sets to true.",
        SerializedName = @"isHnsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsHnsEnabled { get; set; }
        /// <summary>Enables local users feature, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enables local users feature, if set to true",
        SerializedName = @"isLocalUserEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsLocalUserEnabled { get; set; }
        /// <summary>Enables Secure File Transfer Protocol, if set to true</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Enables Secure File Transfer Protocol, if set to true",
        SerializedName = @"isSftpEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSftpEnabled { get; set; }
        /// <summary>
        /// This property will be set to true or false on an event of ongoing migration. Default value is null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"This property will be set to true or false on an event of ongoing migration. Default value is null.",
        SerializedName = @"isSkuConversionBlocked",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsSkuConversionBlocked { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"key1",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? KeyCreationTimeKey1 { get;  }

        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"",
        SerializedName = @"key2",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? KeyCreationTimeKey2 { get;  }
        /// <summary>The key expiration period in days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The key expiration period in days.",
        SerializedName = @"keyExpirationPeriodInDays",
        PossibleTypes = new [] { typeof(int) })]
        int? KeyPolicyKeyExpirationPeriodInDay { get;  }
        /// <summary>Gets the Kind.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the Kind.",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage")]
        string Kind { get;  }
        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.",
        SerializedName = @"largeFileSharesState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Disabled", "Enabled")]
        string LargeFileSharesState { get; set; }
        /// <summary>
        /// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp
        /// is retained. This element is not returned if there has never been a failover instance. Only available if the accountType
        /// is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp is retained. This element is not returned if there has never been a failover instance. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
        SerializedName = @"lastGeoFailoverTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? LastGeoFailoverTime { get;  }
        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("TLS1_0", "TLS1_1", "TLS1_2")]
        string MinimumTlsVersion { get; set; }
        /// <summary>
        /// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
        /// (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices (For example, ""Logging, Metrics""), or None to bypass none of those traffics.",
        SerializedName = @"bypass",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "Logging", "Metrics", "AzureServices")]
        string NetworkRuleSetBypass { get;  }
        /// <summary>Specifies the default action of allow or deny when no other rules match.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Specifies the default action of allow or deny when no other rules match.",
        SerializedName = @"defaultAction",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Allow", "Deny")]
        string NetworkRuleSetDefaultAction { get;  }
        /// <summary>Sets the IP ACL rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Sets the IP ACL rules",
        SerializedName = @"ipRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIPRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIPRule> NetworkRuleSetIPRule { get;  }
        /// <summary>Sets the resource access rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Sets the resource access rules",
        SerializedName = @"resourceAccessRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceAccessRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceAccessRule> NetworkRuleSetResourceAccessRule { get;  }
        /// <summary>Sets the virtual network rules</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Sets the virtual network rules",
        SerializedName = @"virtualNetworkRules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IVirtualNetworkRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IVirtualNetworkRule> NetworkRuleSetVirtualNetworkRule { get;  }
        /// <summary>Blob ranges to restore.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Blob ranges to restore.",
        SerializedName = @"blobRanges",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreRange) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreRange> ParameterBlobRange { get;  }
        /// <summary>Restore blob to the specified time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Restore blob to the specified time.",
        SerializedName = @"timeToRestore",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ParameterTimeToRestore { get;  }
        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the blob endpoint.",
        SerializedName = @"blob",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointBlob { get;  }
        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the dfs endpoint.",
        SerializedName = @"dfs",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointDf { get;  }
        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the file endpoint.",
        SerializedName = @"file",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointFile { get;  }
        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the queue endpoint.",
        SerializedName = @"queue",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointQueue { get;  }
        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the table endpoint.",
        SerializedName = @"table",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointTable { get;  }
        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the web endpoint.",
        SerializedName = @"web",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointWeb { get;  }
        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the blob endpoint.",
        SerializedName = @"blob",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsInternetEndpointsBlob { get;  }
        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the dfs endpoint.",
        SerializedName = @"dfs",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsInternetEndpointsDf { get;  }
        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the file endpoint.",
        SerializedName = @"file",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsInternetEndpointsFile { get;  }
        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the web endpoint.",
        SerializedName = @"web",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsInternetEndpointsWeb { get;  }
        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the blob endpoint.",
        SerializedName = @"blob",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsMicrosoftEndpointsBlob { get;  }
        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the dfs endpoint.",
        SerializedName = @"dfs",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsMicrosoftEndpointsDf { get;  }
        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the file endpoint.",
        SerializedName = @"file",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsMicrosoftEndpointsFile { get;  }
        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the queue endpoint.",
        SerializedName = @"queue",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsMicrosoftEndpointsQueue { get;  }
        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the table endpoint.",
        SerializedName = @"table",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsMicrosoftEndpointsTable { get;  }
        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the web endpoint.",
        SerializedName = @"web",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryEndpointsMicrosoftEndpointsWeb { get;  }
        /// <summary>Gets the location of the primary data center for the storage account.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the location of the primary data center for the storage account.",
        SerializedName = @"primaryLocation",
        PossibleTypes = new [] { typeof(string) })]
        string PrimaryLocation { get;  }
        /// <summary>
        /// List of private endpoint connection associated with the specified storage account
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of private endpoint connection associated with the specified storage account",
        SerializedName = @"privateEndpointConnections",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPrivateEndpointConnection) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPrivateEndpointConnection> PrivateEndpointConnection { get;  }
        /// <summary>
        /// The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete:
        /// Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete: Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.",
        SerializedName = @"status",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("InProgress", "Complete", "Failed")]
        string PropertiesBlobRestoreStatusStatus { get;  }
        /// <summary>Gets the status of the storage account at the time the operation was called.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the status of the storage account at the time the operation was called.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Creating", "ResolvingDNS", "Succeeded")]
        string ProvisioningState { get;  }
        /// <summary>
        /// Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.",
        SerializedName = @"publicNetworkAccess",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string PublicNetworkAccess { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether internet routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A boolean flag which indicates whether internet routing storage endpoints are to be published",
        SerializedName = @"publishInternetEndpoints",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RoutingPreferencePublishInternetEndpoint { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A boolean flag which indicates whether microsoft routing storage endpoints are to be published",
        SerializedName = @"publishMicrosoftEndpoints",
        PossibleTypes = new [] { typeof(bool) })]
        bool? RoutingPreferencePublishMicrosoftEndpoint { get; set; }
        /// <summary>Routing Choice defines the kind of network routing opted by the user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Routing Choice defines the kind of network routing opted by the user.",
        SerializedName = @"routingChoice",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("MicrosoftRouting", "InternetRouting")]
        string RoutingPreferenceRoutingChoice { get; set; }
        /// <summary>The SAS expiration action. Can only be Log.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The SAS expiration action. Can only be Log.",
        SerializedName = @"expirationAction",
        PossibleTypes = new [] { typeof(string) })]
        string SasPolicyExpirationAction { get;  }
        /// <summary>The SAS expiration period, DD.HH:MM:SS.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The SAS expiration period, DD.HH:MM:SS.",
        SerializedName = @"sasExpirationPeriod",
        PossibleTypes = new [] { typeof(string) })]
        string SasPolicySasExpirationPeriod { get;  }
        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the blob endpoint.",
        SerializedName = @"blob",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointBlob { get;  }
        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the dfs endpoint.",
        SerializedName = @"dfs",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointDf { get;  }
        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the file endpoint.",
        SerializedName = @"file",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointFile { get;  }
        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the queue endpoint.",
        SerializedName = @"queue",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointQueue { get;  }
        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the table endpoint.",
        SerializedName = @"table",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointTable { get;  }
        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the web endpoint.",
        SerializedName = @"web",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointWeb { get;  }
        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the blob endpoint.",
        SerializedName = @"blob",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsInternetEndpointsBlob { get;  }
        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the dfs endpoint.",
        SerializedName = @"dfs",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsInternetEndpointsDf { get;  }
        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the file endpoint.",
        SerializedName = @"file",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsInternetEndpointsFile { get;  }
        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the web endpoint.",
        SerializedName = @"web",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsInternetEndpointsWeb { get;  }
        /// <summary>Gets the blob endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the blob endpoint.",
        SerializedName = @"blob",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsMicrosoftEndpointsBlob { get;  }
        /// <summary>Gets the dfs endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the dfs endpoint.",
        SerializedName = @"dfs",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsMicrosoftEndpointsDf { get;  }
        /// <summary>Gets the file endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the file endpoint.",
        SerializedName = @"file",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsMicrosoftEndpointsFile { get;  }
        /// <summary>Gets the queue endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the queue endpoint.",
        SerializedName = @"queue",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsMicrosoftEndpointsQueue { get;  }
        /// <summary>Gets the table endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the table endpoint.",
        SerializedName = @"table",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsMicrosoftEndpointsTable { get;  }
        /// <summary>Gets the web endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the web endpoint.",
        SerializedName = @"web",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryEndpointsMicrosoftEndpointsWeb { get;  }
        /// <summary>
        /// Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS
        /// or Standard_RAGRS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS or Standard_RAGRS.",
        SerializedName = @"secondaryLocation",
        PossibleTypes = new [] { typeof(string) })]
        string SecondaryLocation { get;  }
        /// <summary>This property represents the sku conversion end time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"This property represents the sku conversion end time.",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(string) })]
        string SkuConversionStatusEndTime { get;  }
        /// <summary>This property indicates the current sku conversion status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"This property indicates the current sku conversion status.",
        SerializedName = @"skuConversionStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("InProgress", "Succeeded", "Failed")]
        string SkuConversionStatusSkuConversionStatus { get;  }
        /// <summary>This property represents the sku conversion start time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"This property represents the sku conversion start time.",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(string) })]
        string SkuConversionStatusStartTime { get;  }
        /// <summary>
        /// This property represents the target sku name to which the account sku is being converted asynchronously.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This property represents the target sku name to which the account sku is being converted asynchronously.",
        SerializedName = @"targetSkuName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_GZRS", "Standard_RAGZRS")]
        string SkuConversionStatusTargetSkuName { get; set; }
        /// <summary>
        /// The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_GZRS", "Standard_RAGZRS")]
        string SkuName { get;  }
        /// <summary>The SKU tier. This is based on the SKU name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The SKU tier. This is based on the SKU name.",
        SerializedName = @"tier",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard", "Premium")]
        string SkuTier { get;  }
        /// <summary>
        /// Gets the status indicating whether the primary location of the storage account is available or unavailable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the status indicating whether the primary location of the storage account is available or unavailable.",
        SerializedName = @"statusOfPrimary",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("available", "unavailable")]
        string StatusOfPrimary { get;  }
        /// <summary>
        /// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available
        /// if the SKU name is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available if the SKU name is Standard_GRS or Standard_RAGRS.",
        SerializedName = @"statusOfSecondary",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("available", "unavailable")]
        string StatusOfSecondary { get;  }

    }
    /// The storage account.
    internal partial interface IStorageAccountInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITrackedResourceInternal
    {
        /// <summary>
        /// Required for storage accounts where kind = BlobStorage. The access tier is used for billing. The 'Premium' access tier
        /// is the default value for premium block blobs storage account type and it cannot be changed for the premium block blobs
        /// storage account type.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Hot", "Cool", "Premium")]
        string AccessTier { get; set; }
        /// <summary>
        /// If customer initiated account migration is in progress, the value will be true else it will be null.
        /// </summary>
        bool? AccountMigrationInProgress { get; set; }
        /// <summary>Specifies the Active Directory account type for Azure Storage.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("User", "Computer")]
        string ActiveDirectoryPropertyAccountType { get; set; }
        /// <summary>Specifies the security identifier (SID) for Azure Storage.</summary>
        string ActiveDirectoryPropertyAzureStorageSid { get; set; }
        /// <summary>Specifies the domain GUID.</summary>
        string ActiveDirectoryPropertyDomainGuid { get; set; }
        /// <summary>Specifies the primary domain that the AD DNS server is authoritative for.</summary>
        string ActiveDirectoryPropertyDomainName { get; set; }
        /// <summary>Specifies the security identifier (SID).</summary>
        string ActiveDirectoryPropertyDomainSid { get; set; }
        /// <summary>Specifies the Active Directory forest to get.</summary>
        string ActiveDirectoryPropertyForestName { get; set; }
        /// <summary>Specifies the NetBIOS domain name.</summary>
        string ActiveDirectoryPropertyNetBiosDomainName { get; set; }
        /// <summary>Specifies the Active Directory SAMAccountName for Azure Storage.</summary>
        string ActiveDirectoryPropertySamAccountName { get; set; }
        /// <summary>
        /// Allow or disallow public access to all blobs or containers in the storage account. The default interpretation is false
        /// for this property.
        /// </summary>
        bool? AllowBlobPublicAccess { get; set; }
        /// <summary>
        /// Allow or disallow cross AAD tenant object replication. Set this property to true for new or existing accounts only if
        /// object replication policies will involve storage accounts in different AAD tenants. The default interpretation is false
        /// for new accounts to follow best security practices by default.
        /// </summary>
        bool? AllowCrossTenantReplication { get; set; }
        /// <summary>
        /// Indicates whether the storage account permits requests to be authorized with the account access key via Shared Key. If
        /// false, then all requests, including shared access signatures, must be authorized with Azure Active Directory (Azure AD).
        /// The default value is null, which is equivalent to true.
        /// </summary>
        bool? AllowSharedKeyAccess { get; set; }
        /// <summary>
        /// Restrict copy to and from Storage Accounts within an AAD tenant or with Private Links to the same VNet.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("PrivateLink", "AAD")]
        string AllowedCopyScope { get; set; }
        /// <summary>Required if directoryServiceOptions are AD, optional if they are AADKERB.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IActiveDirectoryProperties AzureFileIdentityBasedAuthenticationActiveDirectoryProperty { get; set; }
        /// <summary>
        /// Default share permission for users using Kerberos authentication if RBAC role is not assigned.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "StorageFileDataSmbShareReader", "StorageFileDataSmbShareContributor", "StorageFileDataSmbShareElevatedContributor")]
        string AzureFileIdentityBasedAuthenticationDefaultSharePermission { get; set; }
        /// <summary>
        /// Indicates the directory service used. Note that this enum may be extended in the future.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "AADDS", "AD", "AADKERB")]
        string AzureFileIdentityBasedAuthenticationDirectoryServiceOption { get; set; }
        /// <summary>Provides the identity based authentication settings for Azure Files.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IAzureFilesIdentityBasedAuthentication AzureFilesIdentityBasedAuthentication { get; set; }
        /// <summary>Failure reason when blob restore is failed.</summary>
        string BlobRestoreStatusFailureReason { get; set; }
        /// <summary>Blob restore request parameters.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreParameters BlobRestoreStatusParameter { get; set; }
        /// <summary>Id for tracking blob restore request.</summary>
        string BlobRestoreStatusRestoreId { get; set; }
        /// <summary>Gets the creation date and time of the storage account in UTC.</summary>
        global::System.DateTime? CreationTime { get; set; }
        /// <summary>Gets the custom domain the user assigned to this storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ICustomDomain CustomDomain { get; set; }
        /// <summary>
        /// Gets or sets the custom domain name assigned to the storage account. Name is the CNAME source.
        /// </summary>
        string CustomDomainName { get; set; }
        /// <summary>
        /// Indicates whether indirect CName validation is enabled. Default value is false. This should only be set on updates.
        /// </summary>
        bool? CustomDomainUseSubDomainName { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether the default authentication is OAuth or not. The default interpretation is false
        /// for this property.
        /// </summary>
        bool? DefaultToOAuthAuthentication { get; set; }
        /// <summary>
        /// Allows you to specify the type of endpoint. Set this to AzureDNSZone to create a large number of accounts in a single
        /// subscription, which creates accounts in an Azure DNS Zone and the endpoint URL will have an alphanumeric DNS Zone identifier.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard", "AzureDnsZone")]
        string DnsEndpointType { get; set; }
        /// <summary>Allows https traffic only to storage service if sets to true.</summary>
        bool? EnableHttpsTrafficOnly { get; set; }
        /// <summary>NFS 3.0 protocol support enabled if set to true.</summary>
        bool? EnableNfsV3 { get; set; }
        /// <summary>
        /// Encryption settings to be used for server-side encryption for the storage account.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEncryption Encryption { get; set; }
        /// <summary>The extendedLocation of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExtendedLocation ExtendedLocation { get; set; }
        /// <summary>The name of the extended location.</summary>
        string ExtendedLocationName { get; set; }
        /// <summary>The type of the extended location.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("EdgeZone")]
        string ExtendedLocationType { get; set; }
        /// <summary>
        /// If the failover is in progress, the value will be true, otherwise, it will be null.
        /// </summary>
        bool? FailoverInProgress { get; set; }
        /// <summary>Geo Replication Stats</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IGeoReplicationStats GeoReplicationStat { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether or not account failover is supported for the account.
        /// </summary>
        bool? GeoReplicationStatCanFailover { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether or not planned account failover is supported for the account.
        /// </summary>
        bool? GeoReplicationStatCanPlannedFailover { get; set; }
        /// <summary>
        /// All primary writes preceding this UTC date/time value are guaranteed to be available for read operations. Primary writes
        /// following this point in time may or may not be available for reads. Element may be default value if value of LastSyncTime
        /// is not available, this can happen if secondary is offline or we are in bootstrap.
        /// </summary>
        global::System.DateTime? GeoReplicationStatLastSyncTime { get; set; }
        /// <summary>The redundancy type of the account after an account failover is performed.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_LRS", "Standard_ZRS")]
        string GeoReplicationStatPostFailoverRedundancy { get; set; }
        /// <summary>
        /// The redundancy type of the account after a planned account failover is performed.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_GRS", "Standard_GZRS", "Standard_RAGRS", "Standard_RAGZRS")]
        string GeoReplicationStatPostPlannedFailoverRedundancy { get; set; }
        /// <summary>
        /// The status of the secondary location. Possible values are: - Live: Indicates that the secondary location is active and
        /// operational. - Bootstrap: Indicates initial synchronization from the primary location to the secondary location is in
        /// progress.This typically occurs when replication is first enabled. - Unavailable: Indicates that the secondary location
        /// is temporarily unavailable.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Live", "Bootstrap", "Unavailable")]
        string GeoReplicationStatStatus { get; set; }
        /// <summary>The identity of the resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentity Identity { get; set; }
        /// <summary>The principal ID of resource identity.</summary>
        string IdentityPrincipalId { get; set; }
        /// <summary>The tenant ID of resource.</summary>
        string IdentityTenantId { get; set; }
        /// <summary>The identity type.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "SystemAssigned", "UserAssigned", "SystemAssigned,UserAssigned")]
        string IdentityType { get; set; }
        /// <summary>
        /// Gets or sets a list of key value pairs that describe the set of User Assigned identities that will be used with this storage
        /// account. The key is the ARM resource identifier of the identity. Only 1 User Assigned identity is permitted here.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIdentityUserAssignedIdentities IdentityUserAssignedIdentity { get; set; }
        /// <summary>
        /// This property can only be changed for disabled and unlocked time-based retention policies. When enabled, new blocks can
        /// be written to an append blob while maintaining immutability protection and compliance. Only new blocks can be added and
        /// any existing blocks cannot be modified or deleted.
        /// </summary>
        bool? ImmutabilityPolicyAllowProtectedAppendWrite { get; set; }
        /// <summary>
        /// The immutability period for the blobs in the container since the policy creation, in days.
        /// </summary>
        int? ImmutabilityPolicyImmutabilityPeriodSinceCreationInDay { get; set; }
        /// <summary>
        /// The ImmutabilityPolicy state defines the mode of the policy. Disabled state disables the policy, Unlocked state allows
        /// increase and decrease of immutability retention time and also allows toggling allowProtectedAppendWrites property, Locked
        /// state only allows the increase of the immutability retention time. A policy can only be created in a Disabled or Unlocked
        /// state and can be toggled between the two states. Only a policy in an Unlocked state can transition to a Locked state which
        /// cannot be reverted.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Unlocked", "Locked", "Disabled")]
        string ImmutabilityPolicyState { get; set; }
        /// <summary>
        /// The property is immutable and can only be set to true at the account creation time. When set to true, it enables object
        /// level immutability for all the containers in the account by default.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IImmutableStorageAccount ImmutableStorageWithVersioning { get; set; }
        /// <summary>
        /// A boolean flag which enables account-level immutability. All the containers under such an account have object-level immutability
        /// enabled by default.
        /// </summary>
        bool? ImmutableStorageWithVersioningEnabled { get; set; }
        /// <summary>
        /// Specifies the default account-level immutability policy which is inherited and applied to objects that do not possess
        /// an explicit immutability policy at the object level. The object-level immutability policy has higher precedence than the
        /// container-level immutability policy, which has a higher precedence than the account-level immutability policy.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IAccountImmutabilityPolicyProperties ImmutableStorageWithVersioningImmutabilityPolicy { get; set; }
        /// <summary>Account HierarchicalNamespace enabled if sets to true.</summary>
        bool? IsHnsEnabled { get; set; }
        /// <summary>Enables local users feature, if set to true</summary>
        bool? IsLocalUserEnabled { get; set; }
        /// <summary>Enables Secure File Transfer Protocol, if set to true</summary>
        bool? IsSftpEnabled { get; set; }
        /// <summary>
        /// This property will be set to true or false on an event of ongoing migration. Default value is null.
        /// </summary>
        bool? IsSkuConversionBlocked { get; set; }
        /// <summary>Storage account keys creation time.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IKeyCreationTime KeyCreationTime { get; set; }

        global::System.DateTime? KeyCreationTimeKey1 { get; set; }

        global::System.DateTime? KeyCreationTimeKey2 { get; set; }
        /// <summary>KeyPolicy assigned to the storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IKeyPolicy KeyPolicy { get; set; }
        /// <summary>The key expiration period in days.</summary>
        int? KeyPolicyKeyExpirationPeriodInDay { get; set; }
        /// <summary>Gets the Kind.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Storage", "StorageV2", "BlobStorage", "FileStorage", "BlockBlobStorage")]
        string Kind { get; set; }
        /// <summary>
        /// Allow large file shares if sets to Enabled. It cannot be disabled once it is enabled.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Disabled", "Enabled")]
        string LargeFileSharesState { get; set; }
        /// <summary>
        /// Gets the timestamp of the most recent instance of a failover to the secondary location. Only the most recent timestamp
        /// is retained. This element is not returned if there has never been a failover instance. Only available if the accountType
        /// is Standard_GRS or Standard_RAGRS.
        /// </summary>
        global::System.DateTime? LastGeoFailoverTime { get; set; }
        /// <summary>
        /// Set the minimum TLS version to be permitted on requests to storage. The default interpretation is TLS 1.0 for this property.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("TLS1_0", "TLS1_1", "TLS1_2")]
        string MinimumTlsVersion { get; set; }
        /// <summary>Network rule set</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.INetworkRuleSet NetworkRuleSet { get; set; }
        /// <summary>
        /// Specifies whether traffic is bypassed for Logging/Metrics/AzureServices. Possible values are any combination of Logging|Metrics|AzureServices
        /// (For example, "Logging, Metrics"), or None to bypass none of those traffics.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("None", "Logging", "Metrics", "AzureServices")]
        string NetworkRuleSetBypass { get; set; }
        /// <summary>Specifies the default action of allow or deny when no other rules match.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Allow", "Deny")]
        string NetworkRuleSetDefaultAction { get; set; }
        /// <summary>Sets the IP ACL rules</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IIPRule> NetworkRuleSetIPRule { get; set; }
        /// <summary>Sets the resource access rules</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IResourceAccessRule> NetworkRuleSetResourceAccessRule { get; set; }
        /// <summary>Sets the virtual network rules</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IVirtualNetworkRule> NetworkRuleSetVirtualNetworkRule { get; set; }
        /// <summary>Blob ranges to restore.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreRange> ParameterBlobRange { get; set; }
        /// <summary>Restore blob to the specified time.</summary>
        global::System.DateTime? ParameterTimeToRestore { get; set; }
        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object. Note that Standard_ZRS and
        /// Premium_LRS accounts only return the blob endpoint.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEndpoints PrimaryEndpoint { get; set; }
        /// <summary>Gets the blob endpoint.</summary>
        string PrimaryEndpointBlob { get; set; }
        /// <summary>Gets the dfs endpoint.</summary>
        string PrimaryEndpointDf { get; set; }
        /// <summary>Gets the file endpoint.</summary>
        string PrimaryEndpointFile { get; set; }
        /// <summary>Gets the internet routing storage endpoints</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternetEndpoints PrimaryEndpointInternetEndpoint { get; set; }
        /// <summary>Gets the microsoft routing storage endpoints.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountMicrosoftEndpoints PrimaryEndpointMicrosoftEndpoint { get; set; }
        /// <summary>Gets the queue endpoint.</summary>
        string PrimaryEndpointQueue { get; set; }
        /// <summary>Gets the table endpoint.</summary>
        string PrimaryEndpointTable { get; set; }
        /// <summary>Gets the web endpoint.</summary>
        string PrimaryEndpointWeb { get; set; }
        /// <summary>Gets the blob endpoint.</summary>
        string PrimaryEndpointsInternetEndpointsBlob { get; set; }
        /// <summary>Gets the dfs endpoint.</summary>
        string PrimaryEndpointsInternetEndpointsDf { get; set; }
        /// <summary>Gets the file endpoint.</summary>
        string PrimaryEndpointsInternetEndpointsFile { get; set; }
        /// <summary>Gets the web endpoint.</summary>
        string PrimaryEndpointsInternetEndpointsWeb { get; set; }
        /// <summary>Gets the blob endpoint.</summary>
        string PrimaryEndpointsMicrosoftEndpointsBlob { get; set; }
        /// <summary>Gets the dfs endpoint.</summary>
        string PrimaryEndpointsMicrosoftEndpointsDf { get; set; }
        /// <summary>Gets the file endpoint.</summary>
        string PrimaryEndpointsMicrosoftEndpointsFile { get; set; }
        /// <summary>Gets the queue endpoint.</summary>
        string PrimaryEndpointsMicrosoftEndpointsQueue { get; set; }
        /// <summary>Gets the table endpoint.</summary>
        string PrimaryEndpointsMicrosoftEndpointsTable { get; set; }
        /// <summary>Gets the web endpoint.</summary>
        string PrimaryEndpointsMicrosoftEndpointsWeb { get; set; }
        /// <summary>Gets the location of the primary data center for the storage account.</summary>
        string PrimaryLocation { get; set; }
        /// <summary>
        /// List of private endpoint connection associated with the specified storage account
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPrivateEndpointConnection> PrivateEndpointConnection { get; set; }
        /// <summary>Blob restore status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IBlobRestoreStatus PropertiesBlobRestoreStatus { get; set; }
        /// <summary>
        /// The status of blob restore progress. Possible values are: - InProgress: Indicates that blob restore is ongoing. - Complete:
        /// Indicates that blob restore has been completed successfully. - Failed: Indicates that blob restore is failed.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("InProgress", "Complete", "Failed")]
        string PropertiesBlobRestoreStatusStatus { get; set; }
        /// <summary>Properties of the storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountProperties Property { get; set; }
        /// <summary>Gets the status of the storage account at the time the operation was called.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Creating", "ResolvingDNS", "Succeeded")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// Allow or disallow public network access to Storage Account. Value is optional but if passed in, must be 'Enabled' or 'Disabled'.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string PublicNetworkAccess { get; set; }
        /// <summary>
        /// Maintains information about the network routing choice opted by the user for data transfer
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IRoutingPreference RoutingPreference { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether internet routing storage endpoints are to be published
        /// </summary>
        bool? RoutingPreferencePublishInternetEndpoint { get; set; }
        /// <summary>
        /// A boolean flag which indicates whether microsoft routing storage endpoints are to be published
        /// </summary>
        bool? RoutingPreferencePublishMicrosoftEndpoint { get; set; }
        /// <summary>Routing Choice defines the kind of network routing opted by the user.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("MicrosoftRouting", "InternetRouting")]
        string RoutingPreferenceRoutingChoice { get; set; }
        /// <summary>SasPolicy assigned to the storage account.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISasPolicy SasPolicy { get; set; }
        /// <summary>The SAS expiration action. Can only be Log.</summary>
        string SasPolicyExpirationAction { get; set; }
        /// <summary>The SAS expiration period, DD.HH:MM:SS.</summary>
        string SasPolicySasExpirationPeriod { get; set; }
        /// <summary>
        /// Gets the URLs that are used to perform a retrieval of a public blob, queue, or table object from the secondary location
        /// of the storage account. Only available if the SKU name is Standard_RAGRS.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IEndpoints SecondaryEndpoint { get; set; }
        /// <summary>Gets the blob endpoint.</summary>
        string SecondaryEndpointBlob { get; set; }
        /// <summary>Gets the dfs endpoint.</summary>
        string SecondaryEndpointDf { get; set; }
        /// <summary>Gets the file endpoint.</summary>
        string SecondaryEndpointFile { get; set; }
        /// <summary>Gets the internet routing storage endpoints</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountInternetEndpoints SecondaryEndpointInternetEndpoint { get; set; }
        /// <summary>Gets the microsoft routing storage endpoints.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountMicrosoftEndpoints SecondaryEndpointMicrosoftEndpoint { get; set; }
        /// <summary>Gets the queue endpoint.</summary>
        string SecondaryEndpointQueue { get; set; }
        /// <summary>Gets the table endpoint.</summary>
        string SecondaryEndpointTable { get; set; }
        /// <summary>Gets the web endpoint.</summary>
        string SecondaryEndpointWeb { get; set; }
        /// <summary>Gets the blob endpoint.</summary>
        string SecondaryEndpointsInternetEndpointsBlob { get; set; }
        /// <summary>Gets the dfs endpoint.</summary>
        string SecondaryEndpointsInternetEndpointsDf { get; set; }
        /// <summary>Gets the file endpoint.</summary>
        string SecondaryEndpointsInternetEndpointsFile { get; set; }
        /// <summary>Gets the web endpoint.</summary>
        string SecondaryEndpointsInternetEndpointsWeb { get; set; }
        /// <summary>Gets the blob endpoint.</summary>
        string SecondaryEndpointsMicrosoftEndpointsBlob { get; set; }
        /// <summary>Gets the dfs endpoint.</summary>
        string SecondaryEndpointsMicrosoftEndpointsDf { get; set; }
        /// <summary>Gets the file endpoint.</summary>
        string SecondaryEndpointsMicrosoftEndpointsFile { get; set; }
        /// <summary>Gets the queue endpoint.</summary>
        string SecondaryEndpointsMicrosoftEndpointsQueue { get; set; }
        /// <summary>Gets the table endpoint.</summary>
        string SecondaryEndpointsMicrosoftEndpointsTable { get; set; }
        /// <summary>Gets the web endpoint.</summary>
        string SecondaryEndpointsMicrosoftEndpointsWeb { get; set; }
        /// <summary>
        /// Gets the location of the geo-replicated secondary for the storage account. Only available if the accountType is Standard_GRS
        /// or Standard_RAGRS.
        /// </summary>
        string SecondaryLocation { get; set; }
        /// <summary>Gets the SKU.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISku Sku { get; set; }
        /// <summary>
        /// This property is readOnly and is set by server during asynchronous storage account sku conversion operations.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageAccountSkuConversionStatus SkuConversionStatus { get; set; }
        /// <summary>This property represents the sku conversion end time.</summary>
        string SkuConversionStatusEndTime { get; set; }
        /// <summary>This property indicates the current sku conversion status.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("InProgress", "Succeeded", "Failed")]
        string SkuConversionStatusSkuConversionStatus { get; set; }
        /// <summary>This property represents the sku conversion start time.</summary>
        string SkuConversionStatusStartTime { get; set; }
        /// <summary>
        /// This property represents the target sku name to which the account sku is being converted asynchronously.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_GZRS", "Standard_RAGZRS")]
        string SkuConversionStatusTargetSkuName { get; set; }
        /// <summary>
        /// The SKU name. Required for account creation; optional for update. Note that in older versions, SKU name was called accountType.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard_LRS", "Standard_GRS", "Standard_RAGRS", "Standard_ZRS", "Premium_LRS", "Premium_ZRS", "Standard_GZRS", "Standard_RAGZRS")]
        string SkuName { get; set; }
        /// <summary>The SKU tier. This is based on the SKU name.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("Standard", "Premium")]
        string SkuTier { get; set; }
        /// <summary>
        /// Gets the status indicating whether the primary location of the storage account is available or unavailable.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("available", "unavailable")]
        string StatusOfPrimary { get; set; }
        /// <summary>
        /// Gets the status indicating whether the secondary location of the storage account is available or unavailable. Only available
        /// if the SKU name is Standard_GRS or Standard_RAGRS.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Storage.PSArgumentCompleterAttribute("available", "unavailable")]
        string StatusOfSecondary { get; set; }

    }
}