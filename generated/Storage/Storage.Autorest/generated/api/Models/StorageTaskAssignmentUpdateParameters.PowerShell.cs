// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.PowerShell;

    /// <summary>Parameters of the storage task assignment update request</summary>
    [System.ComponentModel.TypeConverter(typeof(StorageTaskAssignmentUpdateParametersTypeConverter))]
    public partial class StorageTaskAssignmentUpdateParameters
    {

        /// <summary>
        /// <c>AfterDeserializeDictionary</c> will be called after the deserialization has finished, allowing customization of the
        /// object before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>

        partial void AfterDeserializeDictionary(global::System.Collections.IDictionary content);

        /// <summary>
        /// <c>AfterDeserializePSObject</c> will be called after the deserialization has finished, allowing customization of the object
        /// before it is returned. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>

        partial void AfterDeserializePSObject(global::System.Management.Automation.PSObject content);

        /// <summary>
        /// <c>BeforeDeserializeDictionary</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializeDictionary(global::System.Collections.IDictionary content, ref bool returnNow);

        /// <summary>
        /// <c>BeforeDeserializePSObject</c> will be called before the deserialization has commenced, allowing complete customization
        /// of the object before it is deserialized.
        /// If you wish to disable the default deserialization entirely, return <c>true</c> in the <paramref name="returnNow" /> output
        /// parameter.
        /// Implement this method in a partial class to enable this behavior.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <param name="returnNow">Determines if the rest of the serialization should be processed, or if the method should return
        /// instantly.</param>

        partial void BeforeDeserializePSObject(global::System.Management.Automation.PSObject content, ref bool returnNow);

        /// <summary>
        /// <c>OverrideToString</c> will be called if it is implemented. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="stringResult">/// instance serialized to a string, normally it is a Json</param>
        /// <param name="returnNow">/// set returnNow to true if you provide a customized OverrideToString function</param>

        partial void OverrideToString(ref string stringResult, ref bool returnNow);

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateParameters"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParameters" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParameters DeserializeFromDictionary(global::System.Collections.IDictionary content)
        {
            return new StorageTaskAssignmentUpdateParameters(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateParameters"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        /// <returns>
        /// an instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParameters" />.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParameters DeserializeFromPSObject(global::System.Management.Automation.PSObject content)
        {
            return new StorageTaskAssignmentUpdateParameters(content);
        }

        /// <summary>
        /// Creates a new instance of <see cref="StorageTaskAssignmentUpdateParameters" />, deserializing the content from a json
        /// string.
        /// </summary>
        /// <param name="jsonText">a string containing a JSON serialized instance of this model.</param>
        /// <returns>
        /// an instance of the <see cref="StorageTaskAssignmentUpdateParameters" /> model class.
        /// </returns>
        public static Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParameters FromJsonString(string jsonText) => FromJson(Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Json.JsonNode.Parse(jsonText));

        /// <summary>
        /// Deserializes a <see cref="global::System.Collections.IDictionary" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateParameters"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Collections.IDictionary content that should be used.</param>
        internal StorageTaskAssignmentUpdateParameters(global::System.Collections.IDictionary content)
        {
            bool returnNow = false;
            BeforeDeserializeDictionary(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdatePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionContext"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContext = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateExecutionContext) content.GetValueForProperty("ExecutionContext",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContext, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateExecutionContextTypeConverter.ConvertFrom);
            }
            if (content.Contains("Report"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Report = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateReport) content.GetValueForProperty("Report",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Report, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateReportTypeConverter.ConvertFrom);
            }
            if (content.Contains("RunStatus"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatus = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskReportProperties) content.GetValueForProperty("RunStatus",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatus, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskReportPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TaskId = (string) content.GetValueForProperty("TaskId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TaskId, global::System.Convert.ToString);
            }
            if (content.Contains("Enabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Enabled = (bool?) content.GetValueForProperty("Enabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Enabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Description"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Description = (string) content.GetValueForProperty("Description",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Description, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusRunResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusRunResult = (string) content.GetValueForProperty("RunStatusRunResult",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusRunResult, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionContextTarget"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTarget = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExecutionTarget) content.GetValueForProperty("ExecutionContextTarget",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTarget, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ExecutionTargetTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionContextTrigger"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTrigger = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExecutionTriggerUpdate) content.GetValueForProperty("ExecutionContextTrigger",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTrigger, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ExecutionTriggerUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("TriggerType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerType = (string) content.GetValueForProperty("TriggerType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerType, global::System.Convert.ToString);
            }
            if (content.Contains("ReportPrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ReportPrefix = (string) content.GetValueForProperty("ReportPrefix",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ReportPrefix, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusTaskAssignmentId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskAssignmentId = (string) content.GetValueForProperty("RunStatusTaskAssignmentId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskAssignmentId, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusStorageAccountId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStorageAccountId = (string) content.GetValueForProperty("RunStatusStorageAccountId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStorageAccountId, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStartTime = (string) content.GetValueForProperty("RunStatusStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStartTime, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusFinishTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusFinishTime = (string) content.GetValueForProperty("RunStatusFinishTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusFinishTime, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectsTargetedCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsTargetedCount = (string) content.GetValueForProperty("RunStatusObjectsTargetedCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsTargetedCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectsOperatedOnCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsOperatedOnCount = (string) content.GetValueForProperty("RunStatusObjectsOperatedOnCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsOperatedOnCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectFailedCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectFailedCount = (string) content.GetValueForProperty("RunStatusObjectFailedCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectFailedCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectsSucceededCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsSucceededCount = (string) content.GetValueForProperty("RunStatusObjectsSucceededCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsSucceededCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusError = (string) content.GetValueForProperty("RunStatusError",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusError, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusEnum"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusEnum = (string) content.GetValueForProperty("RunStatusEnum",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusEnum, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusSummaryReportPath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusSummaryReportPath = (string) content.GetValueForProperty("RunStatusSummaryReportPath",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusSummaryReportPath, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusTaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskId = (string) content.GetValueForProperty("RunStatusTaskId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskId, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusTaskVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskVersion = (string) content.GetValueForProperty("RunStatusTaskVersion",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskVersion, global::System.Convert.ToString);
            }
            if (content.Contains("TargetPrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetPrefix = (System.Collections.Generic.List<string>) content.GetValueForProperty("TargetPrefix",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetPrefix, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("TargetExcludePrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetExcludePrefix = (System.Collections.Generic.List<string>) content.GetValueForProperty("TargetExcludePrefix",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetExcludePrefix, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("TriggerParameter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerParameter = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITriggerParametersUpdate) content.GetValueForProperty("TriggerParameter",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerParameter, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.TriggerParametersUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("IntervalUnit"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).IntervalUnit = (string) content.GetValueForProperty("IntervalUnit",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).IntervalUnit, global::System.Convert.ToString);
            }
            if (content.Contains("StartFrom"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartFrom = (global::System.DateTime?) content.GetValueForProperty("StartFrom",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartFrom, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("Interval"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Interval = (int?) content.GetValueForProperty("Interval",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Interval, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("EndBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).EndBy = (global::System.DateTime?) content.GetValueForProperty("EndBy",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).EndBy, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartOn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartOn = (global::System.DateTime?) content.GetValueForProperty("StartOn",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartOn, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            AfterDeserializeDictionary(content);
        }

        /// <summary>
        /// Deserializes a <see cref="global::System.Management.Automation.PSObject" /> into a new instance of <see cref="Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateParameters"
        /// />.
        /// </summary>
        /// <param name="content">The global::System.Management.Automation.PSObject content that should be used.</param>
        internal StorageTaskAssignmentUpdateParameters(global::System.Management.Automation.PSObject content)
        {
            bool returnNow = false;
            BeforeDeserializePSObject(content, ref returnNow);
            if (returnNow)
            {
                return;
            }
            // actually deserialize
            if (content.Contains("Property"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Property = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateProperties) content.GetValueForProperty("Property",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Property, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdatePropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("ProvisioningState"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ProvisioningState = (string) content.GetValueForProperty("ProvisioningState",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ProvisioningState, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionContext"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContext = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateExecutionContext) content.GetValueForProperty("ExecutionContext",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContext, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateExecutionContextTypeConverter.ConvertFrom);
            }
            if (content.Contains("Report"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Report = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateReport) content.GetValueForProperty("Report",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Report, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskAssignmentUpdateReportTypeConverter.ConvertFrom);
            }
            if (content.Contains("RunStatus"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatus = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskReportProperties) content.GetValueForProperty("RunStatus",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatus, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.StorageTaskReportPropertiesTypeConverter.ConvertFrom);
            }
            if (content.Contains("TaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TaskId = (string) content.GetValueForProperty("TaskId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TaskId, global::System.Convert.ToString);
            }
            if (content.Contains("Enabled"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Enabled = (bool?) content.GetValueForProperty("Enabled",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Enabled, (__y)=> (bool) global::System.Convert.ChangeType(__y, typeof(bool)));
            }
            if (content.Contains("Description"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Description = (string) content.GetValueForProperty("Description",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Description, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusRunResult"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusRunResult = (string) content.GetValueForProperty("RunStatusRunResult",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusRunResult, global::System.Convert.ToString);
            }
            if (content.Contains("ExecutionContextTarget"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTarget = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExecutionTarget) content.GetValueForProperty("ExecutionContextTarget",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTarget, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ExecutionTargetTypeConverter.ConvertFrom);
            }
            if (content.Contains("ExecutionContextTrigger"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTrigger = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IExecutionTriggerUpdate) content.GetValueForProperty("ExecutionContextTrigger",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ExecutionContextTrigger, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ExecutionTriggerUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("TriggerType"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerType = (string) content.GetValueForProperty("TriggerType",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerType, global::System.Convert.ToString);
            }
            if (content.Contains("ReportPrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ReportPrefix = (string) content.GetValueForProperty("ReportPrefix",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).ReportPrefix, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusTaskAssignmentId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskAssignmentId = (string) content.GetValueForProperty("RunStatusTaskAssignmentId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskAssignmentId, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusStorageAccountId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStorageAccountId = (string) content.GetValueForProperty("RunStatusStorageAccountId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStorageAccountId, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusStartTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStartTime = (string) content.GetValueForProperty("RunStatusStartTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusStartTime, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusFinishTime"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusFinishTime = (string) content.GetValueForProperty("RunStatusFinishTime",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusFinishTime, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectsTargetedCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsTargetedCount = (string) content.GetValueForProperty("RunStatusObjectsTargetedCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsTargetedCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectsOperatedOnCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsOperatedOnCount = (string) content.GetValueForProperty("RunStatusObjectsOperatedOnCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsOperatedOnCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectFailedCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectFailedCount = (string) content.GetValueForProperty("RunStatusObjectFailedCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectFailedCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusObjectsSucceededCount"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsSucceededCount = (string) content.GetValueForProperty("RunStatusObjectsSucceededCount",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusObjectsSucceededCount, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusError"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusError = (string) content.GetValueForProperty("RunStatusError",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusError, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusEnum"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusEnum = (string) content.GetValueForProperty("RunStatusEnum",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusEnum, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusSummaryReportPath"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusSummaryReportPath = (string) content.GetValueForProperty("RunStatusSummaryReportPath",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusSummaryReportPath, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusTaskId"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskId = (string) content.GetValueForProperty("RunStatusTaskId",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskId, global::System.Convert.ToString);
            }
            if (content.Contains("RunStatusTaskVersion"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskVersion = (string) content.GetValueForProperty("RunStatusTaskVersion",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).RunStatusTaskVersion, global::System.Convert.ToString);
            }
            if (content.Contains("TargetPrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetPrefix = (System.Collections.Generic.List<string>) content.GetValueForProperty("TargetPrefix",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetPrefix, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("TargetExcludePrefix"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetExcludePrefix = (System.Collections.Generic.List<string>) content.GetValueForProperty("TargetExcludePrefix",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TargetExcludePrefix, __y => TypeConverterExtensions.SelectToList<string>(__y, global::System.Convert.ToString));
            }
            if (content.Contains("TriggerParameter"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerParameter = (Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ITriggerParametersUpdate) content.GetValueForProperty("TriggerParameter",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).TriggerParameter, Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.TriggerParametersUpdateTypeConverter.ConvertFrom);
            }
            if (content.Contains("IntervalUnit"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).IntervalUnit = (string) content.GetValueForProperty("IntervalUnit",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).IntervalUnit, global::System.Convert.ToString);
            }
            if (content.Contains("StartFrom"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartFrom = (global::System.DateTime?) content.GetValueForProperty("StartFrom",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartFrom, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("Interval"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Interval = (int?) content.GetValueForProperty("Interval",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).Interval, (__y)=> (int) global::System.Convert.ChangeType(__y, typeof(int)));
            }
            if (content.Contains("EndBy"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).EndBy = (global::System.DateTime?) content.GetValueForProperty("EndBy",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).EndBy, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            if (content.Contains("StartOn"))
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartOn = (global::System.DateTime?) content.GetValueForProperty("StartOn",((Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IStorageTaskAssignmentUpdateParametersInternal)this).StartOn, (v) => v is global::System.DateTime _v ? _v : global::System.Xml.XmlConvert.ToDateTime( v.ToString() , global::System.Xml.XmlDateTimeSerializationMode.Unspecified));
            }
            AfterDeserializePSObject(content);
        }

        /// <summary>Serializes this instance to a json string.</summary>

        /// <returns>a <see cref="System.String" /> containing this model serialized to JSON text.</returns>
        public string ToJsonString() => ToJson(null, Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.SerializationMode.IncludeAll)?.ToString();

        public override string ToString()
        {
            var returnNow = false;
            var result = global::System.String.Empty;
            OverrideToString(ref result, ref returnNow);
            if (returnNow)
            {
                return result;
            }
            return ToJsonString();
        }
    }
    /// Parameters of the storage task assignment update request
    [System.ComponentModel.TypeConverter(typeof(StorageTaskAssignmentUpdateParametersTypeConverter))]
    public partial interface IStorageTaskAssignmentUpdateParameters

    {

    }
}