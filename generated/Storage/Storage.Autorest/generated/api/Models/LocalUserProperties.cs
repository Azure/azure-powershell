// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Storage.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Extensions;

    /// <summary>The Storage Account Local User properties.</summary>
    public partial class LocalUserProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ILocalUserProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ILocalUserPropertiesInternal
    {

        /// <summary>Backing field for <see cref="HasSharedKey" /> property.</summary>
        private bool? _hasSharedKey;

        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? HasSharedKey { get => this._hasSharedKey; set => this._hasSharedKey = value; }

        /// <summary>Backing field for <see cref="HasSshKey" /> property.</summary>
        private bool? _hasSshKey;

        /// <summary>Indicates whether ssh key exists. Set it to false to remove existing SSH key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? HasSshKey { get => this._hasSshKey; set => this._hasSshKey = value; }

        /// <summary>Backing field for <see cref="HasSshPassword" /> property.</summary>
        private bool? _hasSshPassword;

        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public bool? HasSshPassword { get => this._hasSshPassword; set => this._hasSshPassword = value; }

        /// <summary>Backing field for <see cref="HomeDirectory" /> property.</summary>
        private string _homeDirectory;

        /// <summary>Optional, local user home directory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string HomeDirectory { get => this._homeDirectory; set => this._homeDirectory = value; }

        /// <summary>Internal Acessors for Sid</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ILocalUserPropertiesInternal.Sid { get => this._sid; set { {_sid = value;} } }

        /// <summary>Backing field for <see cref="PermissionScope" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPermissionScope> _permissionScope;

        /// <summary>The permission scopes of the local user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPermissionScope> PermissionScope { get => this._permissionScope; set => this._permissionScope = value; }

        /// <summary>Backing field for <see cref="Sid" /> property.</summary>
        private string _sid;

        /// <summary>A unique Security Identifier that is generated by the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public string Sid { get => this._sid; }

        /// <summary>Backing field for <see cref="SshAuthorizedKey" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISshPublicKey> _sshAuthorizedKey;

        /// <summary>Optional, local user ssh authorized keys for SFTP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Origin(Microsoft.Azure.PowerShell.Cmdlets.Storage.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISshPublicKey> SshAuthorizedKey { get => this._sshAuthorizedKey; set => this._sshAuthorizedKey = value; }

        /// <summary>Creates an new <see cref="LocalUserProperties" /> instance.</summary>
        public LocalUserProperties()
        {

        }
    }
    /// The Storage Account Local User properties.
    public partial interface ILocalUserProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether shared key exists. Set it to false to remove existing shared key.",
        SerializedName = @"hasSharedKey",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasSharedKey { get; set; }
        /// <summary>Indicates whether ssh key exists. Set it to false to remove existing SSH key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether ssh key exists. Set it to false to remove existing SSH key.",
        SerializedName = @"hasSshKey",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasSshKey { get; set; }
        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether ssh password exists. Set it to false to remove existing SSH password.",
        SerializedName = @"hasSshPassword",
        PossibleTypes = new [] { typeof(bool) })]
        bool? HasSshPassword { get; set; }
        /// <summary>Optional, local user home directory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional, local user home directory.",
        SerializedName = @"homeDirectory",
        PossibleTypes = new [] { typeof(string) })]
        string HomeDirectory { get; set; }
        /// <summary>The permission scopes of the local user.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The permission scopes of the local user.",
        SerializedName = @"permissionScopes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPermissionScope) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPermissionScope> PermissionScope { get; set; }
        /// <summary>A unique Security Identifier that is generated by the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A unique Security Identifier that is generated by the server.",
        SerializedName = @"sid",
        PossibleTypes = new [] { typeof(string) })]
        string Sid { get;  }
        /// <summary>Optional, local user ssh authorized keys for SFTP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Storage.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Optional, local user ssh authorized keys for SFTP.",
        SerializedName = @"sshAuthorizedKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISshPublicKey) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISshPublicKey> SshAuthorizedKey { get; set; }

    }
    /// The Storage Account Local User properties.
    internal partial interface ILocalUserPropertiesInternal

    {
        /// <summary>
        /// Indicates whether shared key exists. Set it to false to remove existing shared key.
        /// </summary>
        bool? HasSharedKey { get; set; }
        /// <summary>Indicates whether ssh key exists. Set it to false to remove existing SSH key.</summary>
        bool? HasSshKey { get; set; }
        /// <summary>
        /// Indicates whether ssh password exists. Set it to false to remove existing SSH password.
        /// </summary>
        bool? HasSshPassword { get; set; }
        /// <summary>Optional, local user home directory.</summary>
        string HomeDirectory { get; set; }
        /// <summary>The permission scopes of the local user.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.IPermissionScope> PermissionScope { get; set; }
        /// <summary>A unique Security Identifier that is generated by the server.</summary>
        string Sid { get; set; }
        /// <summary>Optional, local user ssh authorized keys for SFTP.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Storage.Models.ISshPublicKey> SshAuthorizedKey { get; set; }

    }
}