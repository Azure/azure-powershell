// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Extensions;

    /// <summary>Data connector requirements status.</summary>
    public partial class DataConnectorRequirementsState :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IDataConnectorRequirementsState,
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IDataConnectorRequirementsStateInternal
    {

        /// <summary>Backing field for <see cref="AuthorizationState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorAuthorizationState? _authorizationState;

        /// <summary>Authorization state for this connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorAuthorizationState? AuthorizationState { get => this._authorizationState; set => this._authorizationState = value; }

        /// <summary>Backing field for <see cref="LicenseState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorLicenseState? _licenseState;

        /// <summary>License state for this connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorLicenseState? LicenseState { get => this._licenseState; set => this._licenseState = value; }

        /// <summary>Creates an new <see cref="DataConnectorRequirementsState" /> instance.</summary>
        public DataConnectorRequirementsState()
        {

        }
    }
    /// Data connector requirements status.
    public partial interface IDataConnectorRequirementsState :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.IJsonSerializable
    {
        /// <summary>Authorization state for this connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Authorization state for this connector",
        SerializedName = @"authorizationState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorAuthorizationState) })]
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorAuthorizationState? AuthorizationState { get; set; }
        /// <summary>License state for this connector</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"License state for this connector",
        SerializedName = @"licenseState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorLicenseState) })]
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorLicenseState? LicenseState { get; set; }

    }
    /// Data connector requirements status.
    internal partial interface IDataConnectorRequirementsStateInternal

    {
        /// <summary>Authorization state for this connector</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorAuthorizationState? AuthorizationState { get; set; }
        /// <summary>License state for this connector</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.DataConnectorLicenseState? LicenseState { get; set; }

    }
}