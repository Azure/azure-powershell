// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Extensions;

    /// <summary>The geo-location context attached to the ip entity</summary>
    public partial class GeoLocation :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocation,
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal
    {

        /// <summary>Backing field for <see cref="Asn" /> property.</summary>
        private int? _asn;

        /// <summary>Autonomous System Number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public int? Asn { get => this._asn; }

        /// <summary>Backing field for <see cref="City" /> property.</summary>
        private string _city;

        /// <summary>City name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public string City { get => this._city; }

        /// <summary>Backing field for <see cref="CountryCode" /> property.</summary>
        private string _countryCode;

        /// <summary>The country code according to ISO 3166 format</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public string CountryCode { get => this._countryCode; }

        /// <summary>Backing field for <see cref="CountryName" /> property.</summary>
        private string _countryName;

        /// <summary>
        /// Country name according to ISO 3166 Alpha 2: the lowercase of the English Short Name
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public string CountryName { get => this._countryName; }

        /// <summary>Backing field for <see cref="Latitude" /> property.</summary>
        private double? _latitude;

        /// <summary>
        /// The longitude of the identified location, expressed as a floating point number with range of -180 to 180, with positive
        /// numbers representing East and negative numbers representing West. Latitude and longitude are derived from the city or
        /// postal code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public double? Latitude { get => this._latitude; }

        /// <summary>Backing field for <see cref="Longitude" /> property.</summary>
        private double? _longitude;

        /// <summary>
        /// The latitude of the identified location, expressed as a floating point number with range of - 90 to 90, with positive
        /// numbers representing North and negative numbers representing South. Latitude and longitude are derived from the city or
        /// postal code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public double? Longitude { get => this._longitude; }

        /// <summary>Internal Acessors for Asn</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.Asn { get => this._asn; set { {_asn = value;} } }

        /// <summary>Internal Acessors for City</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.City { get => this._city; set { {_city = value;} } }

        /// <summary>Internal Acessors for CountryCode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.CountryCode { get => this._countryCode; set { {_countryCode = value;} } }

        /// <summary>Internal Acessors for CountryName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.CountryName { get => this._countryName; set { {_countryName = value;} } }

        /// <summary>Internal Acessors for Latitude</summary>
        double? Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.Latitude { get => this._latitude; set { {_latitude = value;} } }

        /// <summary>Internal Acessors for Longitude</summary>
        double? Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.Longitude { get => this._longitude; set { {_longitude = value;} } }

        /// <summary>Internal Acessors for State</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Models.Api20210901Preview.IGeoLocationInternal.State { get => this._state; set { {_state = value;} } }

        /// <summary>Backing field for <see cref="State" /> property.</summary>
        private string _state;

        /// <summary>State name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Origin(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.PropertyOrigin.Owned)]
        public string State { get => this._state; }

        /// <summary>Creates an new <see cref="GeoLocation" /> instance.</summary>
        public GeoLocation()
        {

        }
    }
    /// The geo-location context attached to the ip entity
    public partial interface IGeoLocation :
        Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.IJsonSerializable
    {
        /// <summary>Autonomous System Number</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Autonomous System Number",
        SerializedName = @"asn",
        PossibleTypes = new [] { typeof(int) })]
        int? Asn { get;  }
        /// <summary>City name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"City name",
        SerializedName = @"city",
        PossibleTypes = new [] { typeof(string) })]
        string City { get;  }
        /// <summary>The country code according to ISO 3166 format</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The country code according to ISO 3166 format",
        SerializedName = @"countryCode",
        PossibleTypes = new [] { typeof(string) })]
        string CountryCode { get;  }
        /// <summary>
        /// Country name according to ISO 3166 Alpha 2: the lowercase of the English Short Name
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Country name according to ISO 3166 Alpha 2: the lowercase of the English Short Name",
        SerializedName = @"countryName",
        PossibleTypes = new [] { typeof(string) })]
        string CountryName { get;  }
        /// <summary>
        /// The longitude of the identified location, expressed as a floating point number with range of -180 to 180, with positive
        /// numbers representing East and negative numbers representing West. Latitude and longitude are derived from the city or
        /// postal code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The longitude of the identified location, expressed as a floating point number with range of -180 to 180, with positive numbers representing East and negative numbers representing West. Latitude and longitude are derived from the city or postal code.",
        SerializedName = @"latitude",
        PossibleTypes = new [] { typeof(double) })]
        double? Latitude { get;  }
        /// <summary>
        /// The latitude of the identified location, expressed as a floating point number with range of - 90 to 90, with positive
        /// numbers representing North and negative numbers representing South. Latitude and longitude are derived from the city or
        /// postal code.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The latitude of the identified location, expressed as a floating point number with range of - 90 to 90, with positive numbers representing North and negative numbers representing South. Latitude and longitude are derived from the city or postal code.",
        SerializedName = @"longitude",
        PossibleTypes = new [] { typeof(double) })]
        double? Longitude { get;  }
        /// <summary>State name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"State name",
        SerializedName = @"state",
        PossibleTypes = new [] { typeof(string) })]
        string State { get;  }

    }
    /// The geo-location context attached to the ip entity
    internal partial interface IGeoLocationInternal

    {
        /// <summary>Autonomous System Number</summary>
        int? Asn { get; set; }
        /// <summary>City name</summary>
        string City { get; set; }
        /// <summary>The country code according to ISO 3166 format</summary>
        string CountryCode { get; set; }
        /// <summary>
        /// Country name according to ISO 3166 Alpha 2: the lowercase of the English Short Name
        /// </summary>
        string CountryName { get; set; }
        /// <summary>
        /// The longitude of the identified location, expressed as a floating point number with range of -180 to 180, with positive
        /// numbers representing East and negative numbers representing West. Latitude and longitude are derived from the city or
        /// postal code.
        /// </summary>
        double? Latitude { get; set; }
        /// <summary>
        /// The latitude of the identified location, expressed as a floating point number with range of - 90 to 90, with positive
        /// numbers representing North and negative numbers representing South. Latitude and longitude are derived from the city or
        /// postal code.
        /// </summary>
        double? Longitude { get; set; }
        /// <summary>State name</summary>
        string State { get; set; }

    }
}