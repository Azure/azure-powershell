// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support
{

    /// <summary>The kind of content the metadata is for.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.SecurityInsights.Support.KindTypeConverter))]
    public partial struct Kind :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DataConnector".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DataConnector'", "DataConnector", global::System.Management.Automation.CompletionResultType.ParameterValue, "DataConnector");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "DataType".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'DataType'", "DataType", global::System.Management.Automation.CompletionResultType.ParameterValue, "DataType");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Workbook".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Workbook'", "Workbook", global::System.Management.Automation.CompletionResultType.ParameterValue, "Workbook");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WorkbookTemplate".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WorkbookTemplate'", "WorkbookTemplate", global::System.Management.Automation.CompletionResultType.ParameterValue, "WorkbookTemplate");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Playbook".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Playbook'", "Playbook", global::System.Management.Automation.CompletionResultType.ParameterValue, "Playbook");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PlaybookTemplate".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PlaybookTemplate'", "PlaybookTemplate", global::System.Management.Automation.CompletionResultType.ParameterValue, "PlaybookTemplate");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AnalyticsRuleTemplate".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AnalyticsRuleTemplate'", "AnalyticsRuleTemplate", global::System.Management.Automation.CompletionResultType.ParameterValue, "AnalyticsRuleTemplate");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AnalyticsRule".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AnalyticsRule'", "AnalyticsRule", global::System.Management.Automation.CompletionResultType.ParameterValue, "AnalyticsRule");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "HuntingQuery".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'HuntingQuery'", "HuntingQuery", global::System.Management.Automation.CompletionResultType.ParameterValue, "HuntingQuery");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "InvestigationQuery".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'InvestigationQuery'", "InvestigationQuery", global::System.Management.Automation.CompletionResultType.ParameterValue, "InvestigationQuery");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Parser".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Parser'", "Parser", global::System.Management.Automation.CompletionResultType.ParameterValue, "Parser");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Watchlist".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Watchlist'", "Watchlist", global::System.Management.Automation.CompletionResultType.ParameterValue, "Watchlist");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "WatchlistTemplate".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'WatchlistTemplate'", "WatchlistTemplate", global::System.Management.Automation.CompletionResultType.ParameterValue, "WatchlistTemplate");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Solution".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Solution'", "Solution", global::System.Management.Automation.CompletionResultType.ParameterValue, "Solution");
            }
        }
    }
}