// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Cmdlets;
    using System;

    /// <summary>update an instance of a trigger</summary>
    /// <remarks>
    /// [OpenAPI] GetTrigger=>GET:"/datasources/{dataSourceName}/scans/{scanName}/triggers/default"
    /// [OpenAPI] CreateTrigger=>PUT:"/datasources/{dataSourceName}/scans/{scanName}/triggers/default"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzPurviewTrigger_UpdateExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Description(@"update an instance of a trigger")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Generated]
    public partial class UpdateAzPurviewTrigger_UpdateExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        private Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger _body = new Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.Trigger();

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Purviewdata Client => Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.ClientAPI;

        /// <summary>Backing field for <see cref="DataSourceName" /> property.</summary>
        private string _dataSourceName;

        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = ".")]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"dataSourceName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Path)]
        public string DataSourceName { get => this._dataSourceName; set => this._dataSourceName = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Backing field for <see cref="Endpoint" /> property.</summary>
        private string _endpoint;

        /// <summary>
        /// The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com")]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"The scanning endpoint of your purview account. Example: https://{accountName}.purview.azure.com",
        SerializedName = @"Endpoint",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Uri)]
        public string Endpoint { get => this._endpoint; set => this._endpoint = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"incrementalScanStartTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime IncrementalScanStartTime { get => _body.IncrementalScanStartTime ?? default(global::System.DateTime); set => _body.IncrementalScanStartTime = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"interval",
        PossibleTypes = new [] { typeof(int) })]
        public int Interval { get => _body.Interval ?? default(int); set => _body.Interval = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"endTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime RecurrenceEndTime { get => _body.RecurrenceEndTime ?? default(global::System.DateTime); set => _body.RecurrenceEndTime = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"frequency",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.PSArgumentCompleterAttribute("Week", "Month")]
        public string RecurrenceFrequency { get => _body.RecurrenceFrequency ?? null; set => _body.RecurrenceFrequency = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"recurrenceInterval",
        PossibleTypes = new [] { typeof(string) })]
        public string RecurrenceInterval { get => _body.RecurrenceInterval ?? null; set => _body.RecurrenceInterval = value; }

        /// <summary>Dictionary of <any></summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ExportAs(typeof(global::System.Collections.Hashtable))]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Dictionary of <any>")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Dictionary of <any>",
        SerializedName = @"additionalProperties",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleAdditionalProperties) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleAdditionalProperties RecurrenceScheduleAdditionalProperty { get => _body.RecurrenceScheduleAdditionalProperty ?? null /* object */; set => _body.RecurrenceScheduleAdditionalProperty = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"hours",
        PossibleTypes = new [] { typeof(int) })]
        public int[] RecurrenceScheduleHour { get => _body.RecurrenceScheduleHour?.ToArray() ?? null /* fixedArrayOf */; set => _body.RecurrenceScheduleHour = (value != null ? new System.Collections.Generic.List<int>(value) : null); }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"minutes",
        PossibleTypes = new [] { typeof(int) })]
        public int[] RecurrenceScheduleMinute { get => _body.RecurrenceScheduleMinute?.ToArray() ?? null /* fixedArrayOf */; set => _body.RecurrenceScheduleMinute = (value != null ? new System.Collections.Generic.List<int>(value) : null); }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"monthDays",
        PossibleTypes = new [] { typeof(int) })]
        public int[] RecurrenceScheduleMonthDay { get => _body.RecurrenceScheduleMonthDay?.ToArray() ?? null /* fixedArrayOf */; set => _body.RecurrenceScheduleMonthDay = (value != null ? new System.Collections.Generic.List<int>(value) : null); }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"monthlyOccurrences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleOccurrence) })]
        public Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleOccurrence[] RecurrenceScheduleMonthlyOccurrence { get => _body.RecurrenceScheduleMonthlyOccurrence?.ToArray() ?? null /* fixedArrayOf */; set => _body.RecurrenceScheduleMonthlyOccurrence = (value != null ? new System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleOccurrence>(value) : null); }

        /// <summary>.</summary>
        [global::System.Management.Automation.AllowEmptyCollection]
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"weekDays",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.PSArgumentCompleterAttribute("Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday")]
        public string[] RecurrenceScheduleWeekDay { get => _body.RecurrenceScheduleWeekDay?.ToArray() ?? null /* fixedArrayOf */; set => _body.RecurrenceScheduleWeekDay = (value != null ? new System.Collections.Generic.List<string>(value) : null); }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        public global::System.DateTime RecurrenceStartTime { get => _body.RecurrenceStartTime ?? default(global::System.DateTime); set => _body.RecurrenceStartTime = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"timeZone",
        PossibleTypes = new [] { typeof(string) })]
        public string RecurrenceTimeZone { get => _body.RecurrenceTimeZone ?? null; set => _body.RecurrenceTimeZone = value; }

        /// <summary>.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = ".")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @".",
        SerializedName = @"scanLevel",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.PSArgumentCompleterAttribute("Full", "Incremental")]
        public string ScanLevel { get => _body.ScanLevel ?? null; set => _body.ScanLevel = value; }

        /// <summary>Backing field for <see cref="ScanName" /> property.</summary>
        private string _scanName;

        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = ".")]
        [Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"",
        SerializedName = @"scanName",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Category(global::Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.ParameterCategory.Path)]
        public string ScanName { get => this._scanName; set => this._scanName = value; }

        /// <summary>
        /// <c>overrideOnCreated</c> will be called before the regular onCreated has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger">Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onCreated method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel">Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger">Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.Information:
                    {
                        var data = messageData();
                        WriteInformation(data.Message, new string[]{});
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'TriggersCreateTrigger' operation"))
                {
                    using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token) )
                    {
                        asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token);
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    _body = await this.Client.TriggersGetTriggerWithResult(DataSourceName, ScanName, Endpoint, this, Pipeline);
                    this.Update_body();
                    await this.Client.TriggersCreateTrigger(DataSourceName, ScanName, Endpoint, _body, onOk, onCreated, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.SerializationMode.IncludeUpdate);
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { DataSourceName=DataSourceName,Endpoint=Endpoint,ScanName=ScanName})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAzPurviewTrigger_UpdateExpanded" /> cmdlet class.
        /// </summary>
        public UpdateAzPurviewTrigger_UpdateExpanded()
        {

        }

        private void Update_body()
        {
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceInterval")))
            {
                this.RecurrenceInterval = (string)(this.MyInvocation?.BoundParameters["RecurrenceInterval"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("ScanLevel")))
            {
                this.ScanLevel = (string)(this.MyInvocation?.BoundParameters["ScanLevel"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("IncrementalScanStartTime")))
            {
                this.IncrementalScanStartTime = (global::System.DateTime)(this.MyInvocation?.BoundParameters["IncrementalScanStartTime"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceScheduleAdditionalProperty")))
            {
                this.RecurrenceScheduleAdditionalProperty = (Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleAdditionalProperties)(this.MyInvocation?.BoundParameters["RecurrenceScheduleAdditionalProperty"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceScheduleWeekDay")))
            {
                this.RecurrenceScheduleWeekDay = (string[])(this.MyInvocation?.BoundParameters["RecurrenceScheduleWeekDay"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceScheduleMonthlyOccurrence")))
            {
                this.RecurrenceScheduleMonthlyOccurrence = (Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IRecurrenceScheduleOccurrence[])(this.MyInvocation?.BoundParameters["RecurrenceScheduleMonthlyOccurrence"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceFrequency")))
            {
                this.RecurrenceFrequency = (string)(this.MyInvocation?.BoundParameters["RecurrenceFrequency"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("Interval")))
            {
                this.Interval = (int)(this.MyInvocation?.BoundParameters["Interval"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceStartTime")))
            {
                this.RecurrenceStartTime = (global::System.DateTime)(this.MyInvocation?.BoundParameters["RecurrenceStartTime"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceEndTime")))
            {
                this.RecurrenceEndTime = (global::System.DateTime)(this.MyInvocation?.BoundParameters["RecurrenceEndTime"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceTimeZone")))
            {
                this.RecurrenceTimeZone = (string)(this.MyInvocation?.BoundParameters["RecurrenceTimeZone"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceScheduleMinute")))
            {
                this.RecurrenceScheduleMinute = (int[])(this.MyInvocation?.BoundParameters["RecurrenceScheduleMinute"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceScheduleHour")))
            {
                this.RecurrenceScheduleHour = (int[])(this.MyInvocation?.BoundParameters["RecurrenceScheduleHour"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("RecurrenceScheduleMonthDay")))
            {
                this.RecurrenceScheduleMonthDay = (int[])(this.MyInvocation?.BoundParameters["RecurrenceScheduleMonthDay"]);
            }
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>a delegate that is called when the remote service returns 201 (Created).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger">Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onCreated(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnCreated(responseMessage, response, ref _returnNow);
                // if overrideOnCreated has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onCreated - response for 201 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel">Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.IErrorResponseModel>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger">Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Models.ITrigger
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}