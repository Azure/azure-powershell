// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support
{

    /// <summary>Argument completer implementation for DataSourceType.</summary>
    [System.ComponentModel.TypeConverter(typeof(Microsoft.Azure.PowerShell.Cmdlets.Purviewdata.Support.DataSourceTypeTypeConverter))]
    public partial struct DataSourceType :
        System.Management.Automation.IArgumentCompleter
    {

        /// <summary>
        /// Implementations of this function are called by PowerShell to complete arguments.
        /// </summary>
        /// <param name="commandName">The name of the command that needs argument completion.</param>
        /// <param name="parameterName">The name of the parameter that needs argument completion.</param>
        /// <param name="wordToComplete">The (possibly empty) word being completed.</param>
        /// <param name="commandAst">The command ast in case it is needed for completion.</param>
        /// <param name="fakeBoundParameters">This parameter is similar to $PSBoundParameters, except that sometimes PowerShell cannot
        /// or will not attempt to evaluate an argument, in which case you may need to use commandAst.</param>
        /// <returns>
        /// A collection of completion results, most like with ResultType set to ParameterValue.
        /// </returns>
        public global::System.Collections.Generic.IEnumerable<global::System.Management.Automation.CompletionResult> CompleteArgument(global::System.String commandName, global::System.String parameterName, global::System.String wordToComplete, global::System.Management.Automation.Language.CommandAst commandAst, global::System.Collections.IDictionary fakeBoundParameters)
        {
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "None".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'None'", "None", global::System.Management.Automation.CompletionResultType.ParameterValue, "None");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSubscription".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSubscription'", "AzureSubscription", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSubscription");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureResourceGroup".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureResourceGroup'", "AzureResourceGroup", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureResourceGroup");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSynapseWorkspace".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSynapseWorkspace'", "AzureSynapseWorkspace", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSynapseWorkspace");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSynapse".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSynapse'", "AzureSynapse", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSynapse");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen1".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen1'", "AdlsGen1", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen1");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AdlsGen2".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AdlsGen2'", "AdlsGen2", global::System.Management.Automation.CompletionResultType.ParameterValue, "AdlsGen2");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AmazonAccount".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AmazonAccount'", "AmazonAccount", global::System.Management.Automation.CompletionResultType.ParameterValue, "AmazonAccount");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AmazonS3".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AmazonS3'", "AmazonS3", global::System.Management.Automation.CompletionResultType.ParameterValue, "AmazonS3");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AmazonSql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AmazonSql'", "AmazonSql", global::System.Management.Automation.CompletionResultType.ParameterValue, "AmazonSql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureCosmosDb".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureCosmosDb'", "AzureCosmosDb", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureCosmosDb");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureDataExplorer".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureDataExplorer'", "AzureDataExplorer", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureDataExplorer");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureFileService".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureFileService'", "AzureFileService", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureFileService");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSqlDatabase".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSqlDatabase'", "AzureSqlDatabase", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSqlDatabase");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AmazonPostgreSql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AmazonPostgreSql'", "AmazonPostgreSql", global::System.Management.Automation.CompletionResultType.ParameterValue, "AmazonPostgreSql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzurePostgreSql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzurePostgreSql'", "AzurePostgreSql", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzurePostgreSql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SqlServerDatabase".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SqlServerDatabase'", "SqlServerDatabase", global::System.Management.Automation.CompletionResultType.ParameterValue, "SqlServerDatabase");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSqlDatabaseManagedInstance".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSqlDatabaseManagedInstance'", "AzureSqlDatabaseManagedInstance", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSqlDatabaseManagedInstance");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureSqlDataWarehouse".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureSqlDataWarehouse'", "AzureSqlDataWarehouse", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureSqlDataWarehouse");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureMySql".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureMySql'", "AzureMySql", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureMySql");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "AzureStorage".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'AzureStorage'", "AzureStorage", global::System.Management.Automation.CompletionResultType.ParameterValue, "AzureStorage");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Teradata".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Teradata'", "Teradata", global::System.Management.Automation.CompletionResultType.ParameterValue, "Teradata");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "Oracle".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'Oracle'", "Oracle", global::System.Management.Automation.CompletionResultType.ParameterValue, "Oracle");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SapS4Hana".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SapS4Hana'", "SapS4Hana", global::System.Management.Automation.CompletionResultType.ParameterValue, "SapS4Hana");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "SapEcc".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'SapEcc'", "SapEcc", global::System.Management.Automation.CompletionResultType.ParameterValue, "SapEcc");
            }
            if (global::System.String.IsNullOrEmpty(wordToComplete) || "PowerBI".StartsWith(wordToComplete, global::System.StringComparison.InvariantCultureIgnoreCase))
            {
                yield return new global::System.Management.Automation.CompletionResult("'PowerBI'", "PowerBI", global::System.Management.Automation.CompletionResultType.ParameterValue, "PowerBI");
            }
        }
    }
}