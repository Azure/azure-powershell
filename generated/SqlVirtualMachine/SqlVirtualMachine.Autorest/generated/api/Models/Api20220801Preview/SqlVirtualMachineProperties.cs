// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Extensions;

    /// <summary>The SQL virtual machine properties.</summary>
    public partial class SqlVirtualMachineProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachineProperties,
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal
    {

        /// <summary>Enable or disable R services (SQL 2016 onwards).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AdditionalFeatureServerConfigurationIsRServicesEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AdditionalFeatureServerConfigurationIsRServicesEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AdditionalFeatureServerConfigurationIsRServicesEnabled = value ?? default(bool); }

        /// <summary>Backing field for <see cref="AssessmentSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettings _assessmentSetting;

        /// <summary>SQL best practices Assessment Settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettings AssessmentSetting { get => (this._assessmentSetting = this._assessmentSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.AssessmentSettings()); set => this._assessmentSetting = value; }

        /// <summary>Enable or disable SQL best practices Assessment feature on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AssessmentSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).Enable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).Enable = value ?? default(bool); }

        /// <summary>Run SQL best practices Assessment immediately on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AssessmentSettingRunImmediately { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).RunImmediately; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).RunImmediately = value ?? default(bool); }

        /// <summary>Backing field for <see cref="AutoBackupSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettings _autoBackupSetting;

        /// <summary>Auto backup settings for SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettings AutoBackupSetting { get => (this._autoBackupSetting = this._autoBackupSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.AutoBackupSettings()); set => this._autoBackupSetting = value; }

        /// <summary>Backup schedule type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType? AutoBackupSettingBackupScheduleType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).BackupScheduleType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).BackupScheduleType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType)""); }

        /// <summary>Include or exclude system databases from auto backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoBackupSettingBackupSystemDb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).BackupSystemDb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).BackupSystemDb = value ?? default(bool); }

        /// <summary>Days of the week for the backups when FullBackupFrequency is set to Weekly.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[] AutoBackupSettingDaysOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).DaysOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).DaysOfWeek = value ?? null /* arrayOf */; }

        /// <summary>Enable or disable autobackup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoBackupSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).Enable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).Enable = value ?? default(bool); }

        /// <summary>Enable or disable encryption for backup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoBackupSettingEnableEncryption { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).EnableEncryption; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).EnableEncryption = value ?? default(bool); }

        /// <summary>
        /// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType? AutoBackupSettingFullBackupFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).FullBackupFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).FullBackupFrequency = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType)""); }

        /// <summary>Start time of a given day during which full backups can take place. 0-23 hours.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingFullBackupStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).FullBackupStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).FullBackupStartTime = value ?? default(int); }

        /// <summary>
        /// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingFullBackupWindowHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).FullBackupWindowHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).FullBackupWindowHour = value ?? default(int); }

        /// <summary>Frequency of log backups. 5-60 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingLogBackupFrequency { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).LogBackupFrequency; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).LogBackupFrequency = value ?? default(int); }

        /// <summary>Password for encryption on backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString AutoBackupSettingPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).Password; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).Password = value ?? null; }

        /// <summary>Retention period of backup: 1-90 days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoBackupSettingRetentionPeriod { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).RetentionPeriod; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).RetentionPeriod = value ?? default(int); }

        /// <summary>Storage account key where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AutoBackupSettingStorageAccessKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).StorageAccessKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).StorageAccessKey = value ?? null; }

        /// <summary>Storage account url where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AutoBackupSettingStorageAccountUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).StorageAccountUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).StorageAccountUrl = value ?? null; }

        /// <summary>Storage container name where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AutoBackupSettingStorageContainerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).StorageContainerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettingsInternal)AutoBackupSetting).StorageContainerName = value ?? null; }

        /// <summary>Backing field for <see cref="AutoPatchingSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettings _autoPatchingSetting;

        /// <summary>
        /// Auto patching settings for applying critical security updates to SQL virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettings AutoPatchingSetting { get => (this._autoPatchingSetting = this._autoPatchingSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.AutoPatchingSettings()); set => this._autoPatchingSetting = value; }

        /// <summary>Day of week to apply the patch on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek? AutoPatchingSettingDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).DayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).DayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek)""); }

        /// <summary>Enable or disable autopatching on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? AutoPatchingSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).Enable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).Enable = value ?? default(bool); }

        /// <summary>Duration of patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoPatchingSettingMaintenanceWindowDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).MaintenanceWindowDuration; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).MaintenanceWindowDuration = value ?? default(int); }

        /// <summary>Hour of the day when patching is initiated. Local VM time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? AutoPatchingSettingMaintenanceWindowStartingHour { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).MaintenanceWindowStartingHour; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettingsInternal)AutoPatchingSetting).MaintenanceWindowStartingHour = value ?? default(int); }

        /// <summary>
        /// The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned
        /// Managed Identity
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string AzureAdAuthenticationSettingClientId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AzureAdAuthenticationSettingClientId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AzureAdAuthenticationSettingClientId = value ?? null; }

        /// <summary>Backing field for <see cref="EnableAutomaticUpgrade" /> property.</summary>
        private bool? _enableAutomaticUpgrade;

        /// <summary>Enable automatic upgrade of Sql IaaS extension Agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public bool? EnableAutomaticUpgrade { get => this._enableAutomaticUpgrade; set => this._enableAutomaticUpgrade = value; }

        /// <summary>Backing field for <see cref="KeyVaultCredentialSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettings _keyVaultCredentialSetting;

        /// <summary>Key vault credential settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettings KeyVaultCredentialSetting { get => (this._keyVaultCredentialSetting = this._keyVaultCredentialSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.KeyVaultCredentialSettings()); set => this._keyVaultCredentialSetting = value; }

        /// <summary>Azure Key Vault url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingAzureKeyVaultUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).AzureKeyVaultUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).AzureKeyVaultUrl = value ?? null; }

        /// <summary>Credential name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingCredentialName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).CredentialName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).CredentialName = value ?? null; }

        /// <summary>Enable or disable key vault credential setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? KeyVaultCredentialSettingEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).Enable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).Enable = value ?? default(bool); }

        /// <summary>Service principal name to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingServicePrincipalName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).ServicePrincipalName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).ServicePrincipalName = value ?? null; }

        /// <summary>Service principal name secret to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string KeyVaultCredentialSettingServicePrincipalSecret { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).ServicePrincipalSecret; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettingsInternal)KeyVaultCredentialSetting).ServicePrincipalSecret = value ?? null; }

        /// <summary>Backing field for <see cref="LeastPrivilegeMode" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? _leastPrivilegeMode;

        /// <summary>SQL IaaS Agent least privilege mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? LeastPrivilegeMode { get => this._leastPrivilegeMode; set => this._leastPrivilegeMode = value; }

        /// <summary>Internal Acessors for AssessmentSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.AssessmentSetting { get => (this._assessmentSetting = this._assessmentSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.AssessmentSettings()); set { {_assessmentSetting = value;} } }

        /// <summary>Internal Acessors for AssessmentSettingSchedule</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISchedule Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.AssessmentSettingSchedule { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).Schedule; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).Schedule = value; }

        /// <summary>Internal Acessors for AutoBackupSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.AutoBackupSetting { get => (this._autoBackupSetting = this._autoBackupSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.AutoBackupSettings()); set { {_autoBackupSetting = value;} } }

        /// <summary>Internal Acessors for AutoPatchingSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.AutoPatchingSetting { get => (this._autoPatchingSetting = this._autoPatchingSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.AutoPatchingSettings()); set { {_autoPatchingSetting = value;} } }

        /// <summary>Internal Acessors for KeyVaultCredentialSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.KeyVaultCredentialSetting { get => (this._keyVaultCredentialSetting = this._keyVaultCredentialSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.KeyVaultCredentialSettings()); set { {_keyVaultCredentialSetting = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAdditionalFeaturesServerConfigurations Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AdditionalFeaturesServerConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AdditionalFeaturesServerConfiguration = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingAzureAdAuthenticationSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAadAuthenticationSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationManagementSettingAzureAdAuthenticationSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AzureAdAuthenticationSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).AzureAdAuthenticationSetting = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingSqlConnectivityUpdateSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlConnectivityUpdateSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationManagementSettingSqlConnectivityUpdateSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSetting = value; }

        /// <summary>Internal Acessors for ServerConfigurationManagementSettingSqlInstanceSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlInstanceSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationManagementSettingSqlInstanceSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSetting = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingSqlStorageUpdateSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageUpdateSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationManagementSettingSqlStorageUpdateSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSetting = value; }

        /// <summary>
        /// Internal Acessors for ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlWorkloadTypeUpdateSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlWorkloadTypeUpdateSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlWorkloadTypeUpdateSetting = value; }

        /// <summary>Internal Acessors for ServerConfigurationsManagementSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.ServerConfigurationsManagementSetting { get => (this._serverConfigurationsManagementSetting = this._serverConfigurationsManagementSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ServerConfigurationsManagementSettings()); set { {_serverConfigurationsManagementSetting = value;} } }

        /// <summary>Internal Acessors for StorageConfigurationSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.StorageConfigurationSetting { get => (this._storageConfigurationSetting = this._storageConfigurationSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.StorageConfigurationSettings()); set { {_storageConfigurationSetting = value;} } }

        /// <summary>Internal Acessors for StorageConfigurationSettingSqlDataSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.StorageConfigurationSettingSqlDataSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlDataSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlDataSetting = value; }

        /// <summary>Internal Acessors for StorageConfigurationSettingSqlLogSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.StorageConfigurationSettingSqlLogSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlLogSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlLogSetting = value; }

        /// <summary>Internal Acessors for StorageConfigurationSettingSqlTempDbSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.StorageConfigurationSettingSqlTempDbSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSetting = value; }

        /// <summary>Internal Acessors for TroubleshootingStatus</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatus Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatus { get => (this._troubleshootingStatus = this._troubleshootingStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.TroubleshootingStatus()); set { {_troubleshootingStatus = value;} } }

        /// <summary>Internal Acessors for TroubleshootingStatusEndTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatusEndTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).EndTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).EndTimeUtc = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusLastTriggerTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatusLastTriggerTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).LastTriggerTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).LastTriggerTimeUtc = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingAdditionalProperties Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatusProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).Property; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).Property = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusRootCause</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatusRootCause { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).RootCause; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).RootCause = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusStartTimeUtc</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatusStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).StartTimeUtc; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).StartTimeUtc = value; }

        /// <summary>Internal Acessors for TroubleshootingStatusTroubleshootingScenario</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.TroubleshootingStatusTroubleshootingScenario { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).TroubleshootingScenario; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).TroubleshootingScenario = value; }

        /// <summary>Internal Acessors for UnhealthyReplicaInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IUnhealthyReplicaInfo Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.UnhealthyReplicaInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).UnhealthyReplicaInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).UnhealthyReplicaInfo = value; }

        /// <summary>Internal Acessors for WsfcDomainCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentials Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlVirtualMachinePropertiesInternal.WsfcDomainCredentials { get => (this._wsfcDomainCredentials = this._wsfcDomainCredentials ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.WsfcDomainCredentials()); set { {_wsfcDomainCredentials = value;} } }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state to track the async operation status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Day of the week to run assessment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek? ScheduleDayOfWeek { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleDayOfWeek; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleDayOfWeek = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek)""); }

        /// <summary>Enable or disable assessment schedule on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? ScheduleEnable { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleEnable; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleEnable = value ?? default(bool); }

        /// <summary>
        /// Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek
        /// day of the month
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? ScheduleMonthlyOccurrence { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleMonthlyOccurrence; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleMonthlyOccurrence = value ?? default(int); }

        /// <summary>Time of the day in HH:mm format. Eg. 17:30</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string ScheduleStartTime { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleStartTime; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleStartTime = value ?? null; }

        /// <summary>Number of weeks to schedule between 2 assessment runs. Takes value from 1-6</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? ScheduleWeeklyInterval { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleWeeklyInterval; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettingsInternal)AssessmentSetting).ScheduleWeeklyInterval = value ?? default(int); }

        /// <summary>
        /// Backing field for <see cref="ServerConfigurationsManagementSetting" /> property.
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettings _serverConfigurationsManagementSetting;

        /// <summary>SQL Server configuration management settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettings ServerConfigurationsManagementSetting { get => (this._serverConfigurationsManagementSetting = this._serverConfigurationsManagementSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ServerConfigurationsManagementSettings()); set => this._serverConfigurationsManagementSetting = value; }

        /// <summary>SQL Server connectivity option.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType? SqlConnectivityUpdateSettingConnectivityType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingConnectivityType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingConnectivityType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType)""); }

        /// <summary>SQL Server port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlConnectivityUpdateSettingPort { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingPort; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingPort = value ?? default(int); }

        /// <summary>SQL Server sysadmin login password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString SqlConnectivityUpdateSettingSqlAuthUpdatePassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingSqlAuthUpdatePassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingSqlAuthUpdatePassword = value ?? null; }

        /// <summary>SQL Server sysadmin login to create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlConnectivityUpdateSettingSqlAuthUpdateUserName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingSqlAuthUpdateUserName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlConnectivityUpdateSettingSqlAuthUpdateUserName = value ?? null; }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlDataSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlDataSettingDefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlDataSettingDefaultFilePath = value ?? null; }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlDataSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlDataSettingLun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlDataSettingLun = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SqlImageOffer" /> property.</summary>
        private string _sqlImageOffer;

        /// <summary>SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public string SqlImageOffer { get => this._sqlImageOffer; set => this._sqlImageOffer = value; }

        /// <summary>Backing field for <see cref="SqlImageSku" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? _sqlImageSku;

        /// <summary>SQL Server edition type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? SqlImageSku { get => this._sqlImageSku; set => this._sqlImageSku = value; }

        /// <summary>SQL Server Collation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlInstanceSettingCollation { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingCollation; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingCollation = value ?? null; }

        /// <summary>SQL Server IFI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlInstanceSettingIsIfiEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingIsIfiEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingIsIfiEnabled = value ?? default(bool); }

        /// <summary>SQL Server LPIM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlInstanceSettingIsLpimEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingIsLpimEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingIsLpimEnabled = value ?? default(bool); }

        /// <summary>SQL Server Optimize for Adhoc workloads.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled = value ?? default(bool); }

        /// <summary>SQL Server MAXDOP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlInstanceSettingMaxDop { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingMaxDop; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingMaxDop = value ?? default(int); }

        /// <summary>SQL Server maximum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlInstanceSettingMaxServerMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingMaxServerMemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingMaxServerMemoryMb = value ?? default(int); }

        /// <summary>SQL Server minimum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlInstanceSettingMinServerMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingMinServerMemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlInstanceSettingMinServerMemoryMb = value ?? default(int); }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlLogSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlLogSettingDefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlLogSettingDefaultFilePath = value ?? null; }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlLogSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlLogSettingLun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlLogSettingLun = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SqlManagement" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? _sqlManagement;

        /// <summary>SQL Server Management type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? SqlManagement { get => this._sqlManagement; set => this._sqlManagement = value; }

        /// <summary>Backing field for <see cref="SqlServerLicenseType" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? _sqlServerLicenseType;

        /// <summary>SQL Server license type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? SqlServerLicenseType { get => this._sqlServerLicenseType; set => this._sqlServerLicenseType = value; }

        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? SqlStorageUpdateSettingDiskConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSettingDiskConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSettingDiskConfigurationType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType)""); }

        /// <summary>Virtual machine disk count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlStorageUpdateSettingDiskCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSettingDiskCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSettingDiskCount = value ?? default(int); }

        /// <summary>Device id of the first disk to be updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlStorageUpdateSettingStartingDeviceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSettingStartingDeviceId; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlStorageUpdateSettingStartingDeviceId = value ?? default(int); }

        /// <summary>SQL Server tempdb data file count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataFileCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDataFileCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDataFileCount = value ?? default(int); }

        /// <summary>SQL Server tempdb data file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataFileSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDataFileSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDataFileSize = value ?? default(int); }

        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingDataGrowth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDataGrowth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDataGrowth = value ?? default(int); }

        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlTempDbSettingDefaultFilePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDefaultFilePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingDefaultFilePath = value ?? null; }

        /// <summary>SQL Server tempdb log file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingLogFileSize { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingLogFileSize; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingLogFileSize = value ?? default(int); }

        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int? SqlTempDbSettingLogGrowth { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingLogGrowth; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingLogGrowth = value ?? default(int); }

        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public int[] SqlTempDbSettingLun { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingLun; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingLun = value ?? null /* arrayOf */; }

        /// <summary>SQL Server tempdb persist folder choice</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? SqlTempDbSettingPersistFolder { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingPersistFolder; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingPersistFolder = value ?? default(bool); }

        /// <summary>SQL Server tempdb persist folder location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string SqlTempDbSettingPersistFolderPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingPersistFolderPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlTempDbSettingPersistFolderPath = value ?? null; }

        /// <summary>Backing field for <see cref="SqlVirtualMachineGroupResourceId" /> property.</summary>
        private string _sqlVirtualMachineGroupResourceId;

        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public string SqlVirtualMachineGroupResourceId { get => this._sqlVirtualMachineGroupResourceId; set => this._sqlVirtualMachineGroupResourceId = value; }

        /// <summary>SQL Server workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType? SqlWorkloadTypeUpdateSettingSqlWorkloadType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlWorkloadTypeUpdateSettingSqlWorkloadType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettingsInternal)ServerConfigurationsManagementSetting).SqlWorkloadTypeUpdateSettingSqlWorkloadType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType)""); }

        /// <summary>Backing field for <see cref="StorageConfigurationSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings _storageConfigurationSetting;

        /// <summary>Storage Configuration Settings.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings StorageConfigurationSetting { get => (this._storageConfigurationSetting = this._storageConfigurationSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.StorageConfigurationSettings()); set => this._storageConfigurationSetting = value; }

        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? StorageConfigurationSettingDiskConfigurationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).DiskConfigurationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).DiskConfigurationType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType)""); }

        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public bool? StorageConfigurationSettingSqlSystemDbOnDataDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlSystemDbOnDataDisk; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).SqlSystemDbOnDataDisk = value ?? default(bool); }

        /// <summary>Storage workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageConfigurationSettingStorageWorkloadType { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).StorageWorkloadType; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettingsInternal)StorageConfigurationSetting).StorageWorkloadType = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType)""); }

        /// <summary>Backing field for <see cref="TroubleshootingStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatus _troubleshootingStatus;

        /// <summary>Troubleshooting status</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatus TroubleshootingStatus { get => (this._troubleshootingStatus = this._troubleshootingStatus ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.TroubleshootingStatus()); }

        /// <summary>End time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? TroubleshootingStatusEndTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).EndTimeUtc; }

        /// <summary>Last troubleshooting trigger time in UTC timezone</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? TroubleshootingStatusLastTriggerTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).LastTriggerTimeUtc; }

        /// <summary>Root cause of the issue</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string TroubleshootingStatusRootCause { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).RootCause; }

        /// <summary>Start time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? TroubleshootingStatusStartTimeUtc { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).StartTimeUtc; }

        /// <summary>SQL VM troubleshooting scenario.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? TroubleshootingStatusTroubleshootingScenario { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).TroubleshootingScenario; }

        /// <summary>The name of the availability group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public string UnhealthyReplicaInfoAvailabilityGroupName { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).UnhealthyReplicaInfoAvailabilityGroupName; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatusInternal)TroubleshootingStatus).UnhealthyReplicaInfoAvailabilityGroupName = value ?? null; }

        /// <summary>Backing field for <see cref="VirtualMachineResourceId" /> property.</summary>
        private string _virtualMachineResourceId;

        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public string VirtualMachineResourceId { get => this._virtualMachineResourceId; set => this._virtualMachineResourceId = value; }

        /// <summary>Backing field for <see cref="WsfcDomainCredentials" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentials _wsfcDomainCredentials;

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentials WsfcDomainCredentials { get => (this._wsfcDomainCredentials = this._wsfcDomainCredentials ?? new Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.WsfcDomainCredentials()); set => this._wsfcDomainCredentials = value; }

        /// <summary>Cluster bootstrap account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString WsfcDomainCredentialsClusterBootstrapAccountPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentialsInternal)WsfcDomainCredentials).ClusterBootstrapAccountPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentialsInternal)WsfcDomainCredentials).ClusterBootstrapAccountPassword = value ?? null; }

        /// <summary>Cluster operator account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString WsfcDomainCredentialsClusterOperatorAccountPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentialsInternal)WsfcDomainCredentials).ClusterOperatorAccountPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentialsInternal)WsfcDomainCredentials).ClusterOperatorAccountPassword = value ?? null; }

        /// <summary>SQL service account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Inlined)]
        public System.Security.SecureString WsfcDomainCredentialsSqlServiceAccountPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentialsInternal)WsfcDomainCredentials).SqlServiceAccountPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentialsInternal)WsfcDomainCredentials).SqlServiceAccountPassword = value ?? null; }

        /// <summary>Backing field for <see cref="WsfcStaticIP" /> property.</summary>
        private string _wsfcStaticIP;

        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.PropertyOrigin.Owned)]
        public string WsfcStaticIP { get => this._wsfcStaticIP; set => this._wsfcStaticIP = value; }

        /// <summary>Creates an new <see cref="SqlVirtualMachineProperties" /> instance.</summary>
        public SqlVirtualMachineProperties()
        {

        }
    }
    /// The SQL virtual machine properties.
    public partial interface ISqlVirtualMachineProperties :
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.IJsonSerializable
    {
        /// <summary>Enable or disable R services (SQL 2016 onwards).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable R services (SQL 2016 onwards).",
        SerializedName = @"isRServicesEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AdditionalFeatureServerConfigurationIsRServicesEnabled { get; set; }
        /// <summary>Enable or disable SQL best practices Assessment feature on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable SQL best practices Assessment feature on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AssessmentSettingEnable { get; set; }
        /// <summary>Run SQL best practices Assessment immediately on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Run SQL best practices Assessment immediately on SQL virtual machine.",
        SerializedName = @"runImmediately",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AssessmentSettingRunImmediately { get; set; }
        /// <summary>Backup schedule type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Backup schedule type.",
        SerializedName = @"backupScheduleType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType? AutoBackupSettingBackupScheduleType { get; set; }
        /// <summary>Include or exclude system databases from auto backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Include or exclude system databases from auto backup.",
        SerializedName = @"backupSystemDbs",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoBackupSettingBackupSystemDb { get; set; }
        /// <summary>Days of the week for the backups when FullBackupFrequency is set to Weekly.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Days of the week for the backups when FullBackupFrequency is set to Weekly.",
        SerializedName = @"daysOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[] AutoBackupSettingDaysOfWeek { get; set; }
        /// <summary>Enable or disable autobackup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable autobackup on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoBackupSettingEnable { get; set; }
        /// <summary>Enable or disable encryption for backup on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable encryption for backup on SQL virtual machine.",
        SerializedName = @"enableEncryption",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoBackupSettingEnableEncryption { get; set; }
        /// <summary>
        /// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Frequency of full backups. In both cases, full backups begin during the next scheduled time window.",
        SerializedName = @"fullBackupFrequency",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType? AutoBackupSettingFullBackupFrequency { get; set; }
        /// <summary>Start time of a given day during which full backups can take place. 0-23 hours.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Start time of a given day during which full backups can take place. 0-23 hours.",
        SerializedName = @"fullBackupStartTime",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingFullBackupStartTime { get; set; }
        /// <summary>
        /// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of the time window of a given day during which full backups can take place. 1-23 hours.",
        SerializedName = @"fullBackupWindowHours",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingFullBackupWindowHour { get; set; }
        /// <summary>Frequency of log backups. 5-60 minutes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Frequency of log backups. 5-60 minutes.",
        SerializedName = @"logBackupFrequency",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingLogBackupFrequency { get; set; }
        /// <summary>Password for encryption on backup.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Password for encryption on backup.",
        SerializedName = @"password",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString AutoBackupSettingPassword { get; set; }
        /// <summary>Retention period of backup: 1-90 days.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Retention period of backup: 1-90 days.",
        SerializedName = @"retentionPeriod",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoBackupSettingRetentionPeriod { get; set; }
        /// <summary>Storage account key where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage account key where backup will be taken to.",
        SerializedName = @"storageAccessKey",
        PossibleTypes = new [] { typeof(string) })]
        string AutoBackupSettingStorageAccessKey { get; set; }
        /// <summary>Storage account url where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage account url where backup will be taken to.",
        SerializedName = @"storageAccountUrl",
        PossibleTypes = new [] { typeof(string) })]
        string AutoBackupSettingStorageAccountUrl { get; set; }
        /// <summary>Storage container name where backup will be taken to.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage container name where backup will be taken to.",
        SerializedName = @"storageContainerName",
        PossibleTypes = new [] { typeof(string) })]
        string AutoBackupSettingStorageContainerName { get; set; }
        /// <summary>Day of week to apply the patch on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Day of week to apply the patch on.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek? AutoPatchingSettingDayOfWeek { get; set; }
        /// <summary>Enable or disable autopatching on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable autopatching on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? AutoPatchingSettingEnable { get; set; }
        /// <summary>Duration of patching.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Duration of patching.",
        SerializedName = @"maintenanceWindowDuration",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoPatchingSettingMaintenanceWindowDuration { get; set; }
        /// <summary>Hour of the day when patching is initiated. Local VM time.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Hour of the day when patching is initiated. Local VM time.",
        SerializedName = @"maintenanceWindowStartingHour",
        PossibleTypes = new [] { typeof(int) })]
        int? AutoPatchingSettingMaintenanceWindowStartingHour { get; set; }
        /// <summary>
        /// The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned
        /// Managed Identity
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned Managed Identity",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        string AzureAdAuthenticationSettingClientId { get; set; }
        /// <summary>Enable automatic upgrade of Sql IaaS extension Agent.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable automatic upgrade of Sql IaaS extension Agent.",
        SerializedName = @"enableAutomaticUpgrade",
        PossibleTypes = new [] { typeof(bool) })]
        bool? EnableAutomaticUpgrade { get; set; }
        /// <summary>Azure Key Vault url.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Azure Key Vault url.",
        SerializedName = @"azureKeyVaultUrl",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingAzureKeyVaultUrl { get; set; }
        /// <summary>Credential name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Credential name.",
        SerializedName = @"credentialName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingCredentialName { get; set; }
        /// <summary>Enable or disable key vault credential setting.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable key vault credential setting.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? KeyVaultCredentialSettingEnable { get; set; }
        /// <summary>Service principal name to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service principal name to access key vault.",
        SerializedName = @"servicePrincipalName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingServicePrincipalName { get; set; }
        /// <summary>Service principal name secret to access key vault.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Service principal name secret to access key vault.",
        SerializedName = @"servicePrincipalSecret",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCredentialSettingServicePrincipalSecret { get; set; }
        /// <summary>SQL IaaS Agent least privilege mode.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL IaaS Agent least privilege mode.",
        SerializedName = @"leastPrivilegeMode",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? LeastPrivilegeMode { get; set; }
        /// <summary>Provisioning state to track the async operation status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Provisioning state to track the async operation status.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        string ProvisioningState { get;  }
        /// <summary>Day of the week to run assessment.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Day of the week to run assessment.",
        SerializedName = @"dayOfWeek",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek? ScheduleDayOfWeek { get; set; }
        /// <summary>Enable or disable assessment schedule on SQL virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Enable or disable assessment schedule on SQL virtual machine.",
        SerializedName = @"enable",
        PossibleTypes = new [] { typeof(bool) })]
        bool? ScheduleEnable { get; set; }
        /// <summary>
        /// Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek
        /// day of the month
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek day of the month",
        SerializedName = @"monthlyOccurrence",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleMonthlyOccurrence { get; set; }
        /// <summary>Time of the day in HH:mm format. Eg. 17:30</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Time of the day in HH:mm format. Eg. 17:30",
        SerializedName = @"startTime",
        PossibleTypes = new [] { typeof(string) })]
        string ScheduleStartTime { get; set; }
        /// <summary>Number of weeks to schedule between 2 assessment runs. Takes value from 1-6</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Number of weeks to schedule between 2 assessment runs. Takes value from 1-6",
        SerializedName = @"weeklyInterval",
        PossibleTypes = new [] { typeof(int) })]
        int? ScheduleWeeklyInterval { get; set; }
        /// <summary>SQL Server connectivity option.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server connectivity option.",
        SerializedName = @"connectivityType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType? SqlConnectivityUpdateSettingConnectivityType { get; set; }
        /// <summary>SQL Server port.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server port.",
        SerializedName = @"port",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlConnectivityUpdateSettingPort { get; set; }
        /// <summary>SQL Server sysadmin login password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server sysadmin login password.",
        SerializedName = @"sqlAuthUpdatePassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString SqlConnectivityUpdateSettingSqlAuthUpdatePassword { get; set; }
        /// <summary>SQL Server sysadmin login to create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server sysadmin login to create.",
        SerializedName = @"sqlAuthUpdateUserName",
        PossibleTypes = new [] { typeof(string) })]
        string SqlConnectivityUpdateSettingSqlAuthUpdateUserName { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlDataSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlDataSettingLun { get; set; }
        /// <summary>SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.",
        SerializedName = @"sqlImageOffer",
        PossibleTypes = new [] { typeof(string) })]
        string SqlImageOffer { get; set; }
        /// <summary>SQL Server edition type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server edition type.",
        SerializedName = @"sqlImageSku",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? SqlImageSku { get; set; }
        /// <summary>SQL Server Collation.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server Collation.",
        SerializedName = @"collation",
        PossibleTypes = new [] { typeof(string) })]
        string SqlInstanceSettingCollation { get; set; }
        /// <summary>SQL Server IFI.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server IFI.",
        SerializedName = @"isIfiEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlInstanceSettingIsIfiEnabled { get; set; }
        /// <summary>SQL Server LPIM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server LPIM.",
        SerializedName = @"isLpimEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlInstanceSettingIsLpimEnabled { get; set; }
        /// <summary>SQL Server Optimize for Adhoc workloads.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server Optimize for Adhoc workloads.",
        SerializedName = @"isOptimizeForAdHocWorkloadsEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled { get; set; }
        /// <summary>SQL Server MAXDOP.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server MAXDOP.",
        SerializedName = @"maxDop",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlInstanceSettingMaxDop { get; set; }
        /// <summary>SQL Server maximum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server maximum memory.",
        SerializedName = @"maxServerMemoryMB",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlInstanceSettingMaxServerMemoryMb { get; set; }
        /// <summary>SQL Server minimum memory.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server minimum memory.",
        SerializedName = @"minServerMemoryMB",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlInstanceSettingMinServerMemoryMb { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlLogSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlLogSettingLun { get; set; }
        /// <summary>SQL Server Management type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server Management type.",
        SerializedName = @"sqlManagement",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? SqlManagement { get; set; }
        /// <summary>SQL Server license type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server license type.",
        SerializedName = @"sqlServerLicenseType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? SqlServerLicenseType { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk configuration to apply to SQL Server.",
        SerializedName = @"diskConfigurationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? SqlStorageUpdateSettingDiskConfigurationType { get; set; }
        /// <summary>Virtual machine disk count.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Virtual machine disk count.",
        SerializedName = @"diskCount",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlStorageUpdateSettingDiskCount { get; set; }
        /// <summary>Device id of the first disk to be updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Device id of the first disk to be updated.",
        SerializedName = @"startingDeviceId",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlStorageUpdateSettingStartingDeviceId { get; set; }
        /// <summary>SQL Server tempdb data file count</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file count",
        SerializedName = @"dataFileCount",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataFileCount { get; set; }
        /// <summary>SQL Server tempdb data file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file size",
        SerializedName = @"dataFileSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataFileSize { get; set; }
        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb data file autoGrowth size",
        SerializedName = @"dataGrowth",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingDataGrowth { get; set; }
        /// <summary>SQL Server default file path</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server default file path",
        SerializedName = @"defaultFilePath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlTempDbSettingDefaultFilePath { get; set; }
        /// <summary>SQL Server tempdb log file size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb log file size",
        SerializedName = @"logFileSize",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingLogFileSize { get; set; }
        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb log file autoGrowth size",
        SerializedName = @"logGrowth",
        PossibleTypes = new [] { typeof(int) })]
        int? SqlTempDbSettingLogGrowth { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Logical Unit Numbers for the disks.",
        SerializedName = @"luns",
        PossibleTypes = new [] { typeof(int) })]
        int[] SqlTempDbSettingLun { get; set; }
        /// <summary>SQL Server tempdb persist folder choice</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb persist folder choice",
        SerializedName = @"persistFolder",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SqlTempDbSettingPersistFolder { get; set; }
        /// <summary>SQL Server tempdb persist folder location</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server tempdb persist folder location",
        SerializedName = @"persistFolderPath",
        PossibleTypes = new [] { typeof(string) })]
        string SqlTempDbSettingPersistFolderPath { get; set; }
        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.",
        SerializedName = @"sqlVirtualMachineGroupResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string SqlVirtualMachineGroupResourceId { get; set; }
        /// <summary>SQL Server workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server workload type.",
        SerializedName = @"sqlWorkloadType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType? SqlWorkloadTypeUpdateSettingSqlWorkloadType { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Disk configuration to apply to SQL Server.",
        SerializedName = @"diskConfigurationType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? StorageConfigurationSettingDiskConfigurationType { get; set; }
        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL Server SystemDb Storage on DataPool if true.",
        SerializedName = @"sqlSystemDbOnDataDisk",
        PossibleTypes = new [] { typeof(bool) })]
        bool? StorageConfigurationSettingSqlSystemDbOnDataDisk { get; set; }
        /// <summary>Storage workload type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Storage workload type.",
        SerializedName = @"storageWorkloadType",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageConfigurationSettingStorageWorkloadType { get; set; }
        /// <summary>End time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"End time in UTC timezone.",
        SerializedName = @"endTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TroubleshootingStatusEndTimeUtc { get;  }
        /// <summary>Last troubleshooting trigger time in UTC timezone</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Last troubleshooting trigger time in UTC timezone",
        SerializedName = @"lastTriggerTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TroubleshootingStatusLastTriggerTimeUtc { get;  }
        /// <summary>Root cause of the issue</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Root cause of the issue",
        SerializedName = @"rootCause",
        PossibleTypes = new [] { typeof(string) })]
        string TroubleshootingStatusRootCause { get;  }
        /// <summary>Start time in UTC timezone.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Start time in UTC timezone.",
        SerializedName = @"startTimeUtc",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? TroubleshootingStatusStartTimeUtc { get;  }
        /// <summary>SQL VM troubleshooting scenario.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"SQL VM troubleshooting scenario.",
        SerializedName = @"troubleshootingScenario",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario) })]
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? TroubleshootingStatusTroubleshootingScenario { get;  }
        /// <summary>The name of the availability group</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The name of the availability group",
        SerializedName = @"availabilityGroupName",
        PossibleTypes = new [] { typeof(string) })]
        string UnhealthyReplicaInfoAvailabilityGroupName { get; set; }
        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"ARM Resource id of underlying virtual machine created from SQL marketplace image.",
        SerializedName = @"virtualMachineResourceId",
        PossibleTypes = new [] { typeof(string) })]
        string VirtualMachineResourceId { get; set; }
        /// <summary>Cluster bootstrap account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cluster bootstrap account password.",
        SerializedName = @"clusterBootstrapAccountPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString WsfcDomainCredentialsClusterBootstrapAccountPassword { get; set; }
        /// <summary>Cluster operator account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Cluster operator account password.",
        SerializedName = @"clusterOperatorAccountPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString WsfcDomainCredentialsClusterOperatorAccountPassword { get; set; }
        /// <summary>SQL service account password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"SQL service account password.",
        SerializedName = @"sqlServiceAccountPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString WsfcDomainCredentialsSqlServiceAccountPassword { get; set; }
        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.",
        SerializedName = @"wsfcStaticIp",
        PossibleTypes = new [] { typeof(string) })]
        string WsfcStaticIP { get; set; }

    }
    /// The SQL virtual machine properties.
    internal partial interface ISqlVirtualMachinePropertiesInternal

    {
        /// <summary>Enable or disable R services (SQL 2016 onwards).</summary>
        bool? AdditionalFeatureServerConfigurationIsRServicesEnabled { get; set; }
        /// <summary>SQL best practices Assessment Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAssessmentSettings AssessmentSetting { get; set; }
        /// <summary>Enable or disable SQL best practices Assessment feature on SQL virtual machine.</summary>
        bool? AssessmentSettingEnable { get; set; }
        /// <summary>Run SQL best practices Assessment immediately on SQL virtual machine.</summary>
        bool? AssessmentSettingRunImmediately { get; set; }
        /// <summary>Schedule for SQL best practices Assessment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISchedule AssessmentSettingSchedule { get; set; }
        /// <summary>Auto backup settings for SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoBackupSettings AutoBackupSetting { get; set; }
        /// <summary>Backup schedule type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.BackupScheduleType? AutoBackupSettingBackupScheduleType { get; set; }
        /// <summary>Include or exclude system databases from auto backup.</summary>
        bool? AutoBackupSettingBackupSystemDb { get; set; }
        /// <summary>Days of the week for the backups when FullBackupFrequency is set to Weekly.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AutoBackupDaysOfWeek[] AutoBackupSettingDaysOfWeek { get; set; }
        /// <summary>Enable or disable autobackup on SQL virtual machine.</summary>
        bool? AutoBackupSettingEnable { get; set; }
        /// <summary>Enable or disable encryption for backup on SQL virtual machine.</summary>
        bool? AutoBackupSettingEnableEncryption { get; set; }
        /// <summary>
        /// Frequency of full backups. In both cases, full backups begin during the next scheduled time window.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.FullBackupFrequencyType? AutoBackupSettingFullBackupFrequency { get; set; }
        /// <summary>Start time of a given day during which full backups can take place. 0-23 hours.</summary>
        int? AutoBackupSettingFullBackupStartTime { get; set; }
        /// <summary>
        /// Duration of the time window of a given day during which full backups can take place. 1-23 hours.
        /// </summary>
        int? AutoBackupSettingFullBackupWindowHour { get; set; }
        /// <summary>Frequency of log backups. 5-60 minutes.</summary>
        int? AutoBackupSettingLogBackupFrequency { get; set; }
        /// <summary>Password for encryption on backup.</summary>
        System.Security.SecureString AutoBackupSettingPassword { get; set; }
        /// <summary>Retention period of backup: 1-90 days.</summary>
        int? AutoBackupSettingRetentionPeriod { get; set; }
        /// <summary>Storage account key where backup will be taken to.</summary>
        string AutoBackupSettingStorageAccessKey { get; set; }
        /// <summary>Storage account url where backup will be taken to.</summary>
        string AutoBackupSettingStorageAccountUrl { get; set; }
        /// <summary>Storage container name where backup will be taken to.</summary>
        string AutoBackupSettingStorageContainerName { get; set; }
        /// <summary>
        /// Auto patching settings for applying critical security updates to SQL virtual machine.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAutoPatchingSettings AutoPatchingSetting { get; set; }
        /// <summary>Day of week to apply the patch on.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DayOfWeek? AutoPatchingSettingDayOfWeek { get; set; }
        /// <summary>Enable or disable autopatching on SQL virtual machine.</summary>
        bool? AutoPatchingSettingEnable { get; set; }
        /// <summary>Duration of patching.</summary>
        int? AutoPatchingSettingMaintenanceWindowDuration { get; set; }
        /// <summary>Hour of the day when patching is initiated. Local VM time.</summary>
        int? AutoPatchingSettingMaintenanceWindowStartingHour { get; set; }
        /// <summary>
        /// The client Id of the Managed Identity to query Microsoft Graph API. An empty string must be used for the system assigned
        /// Managed Identity
        /// </summary>
        string AzureAdAuthenticationSettingClientId { get; set; }
        /// <summary>Enable automatic upgrade of Sql IaaS extension Agent.</summary>
        bool? EnableAutomaticUpgrade { get; set; }
        /// <summary>Key vault credential settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IKeyVaultCredentialSettings KeyVaultCredentialSetting { get; set; }
        /// <summary>Azure Key Vault url.</summary>
        string KeyVaultCredentialSettingAzureKeyVaultUrl { get; set; }
        /// <summary>Credential name.</summary>
        string KeyVaultCredentialSettingCredentialName { get; set; }
        /// <summary>Enable or disable key vault credential setting.</summary>
        bool? KeyVaultCredentialSettingEnable { get; set; }
        /// <summary>Service principal name to access key vault.</summary>
        string KeyVaultCredentialSettingServicePrincipalName { get; set; }
        /// <summary>Service principal name secret to access key vault.</summary>
        string KeyVaultCredentialSettingServicePrincipalSecret { get; set; }
        /// <summary>SQL IaaS Agent least privilege mode.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.LeastPrivilegeMode? LeastPrivilegeMode { get; set; }
        /// <summary>Provisioning state to track the async operation status.</summary>
        string ProvisioningState { get; set; }
        /// <summary>Day of the week to run assessment.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.AssessmentDayOfWeek? ScheduleDayOfWeek { get; set; }
        /// <summary>Enable or disable assessment schedule on SQL virtual machine.</summary>
        bool? ScheduleEnable { get; set; }
        /// <summary>
        /// Occurrence of the DayOfWeek day within a month to schedule assessment. Takes values: 1,2,3,4 and -1. Use -1 for last DayOfWeek
        /// day of the month
        /// </summary>
        int? ScheduleMonthlyOccurrence { get; set; }
        /// <summary>Time of the day in HH:mm format. Eg. 17:30</summary>
        string ScheduleStartTime { get; set; }
        /// <summary>Number of weeks to schedule between 2 assessment runs. Takes value from 1-6</summary>
        int? ScheduleWeeklyInterval { get; set; }
        /// <summary>Additional SQL feature settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAdditionalFeaturesServerConfigurations ServerConfigurationManagementSettingAdditionalFeaturesServerConfiguration { get; set; }
        /// <summary>Azure AD authentication Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IAadAuthenticationSettings ServerConfigurationManagementSettingAzureAdAuthenticationSetting { get; set; }
        /// <summary>SQL connectivity type settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlConnectivityUpdateSettings ServerConfigurationManagementSettingSqlConnectivityUpdateSetting { get; set; }
        /// <summary>SQL Instance settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlInstanceSettings ServerConfigurationManagementSettingSqlInstanceSetting { get; set; }
        /// <summary>SQL storage update settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageUpdateSettings ServerConfigurationManagementSettingSqlStorageUpdateSetting { get; set; }
        /// <summary>SQL workload type settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlWorkloadTypeUpdateSettings ServerConfigurationManagementSettingSqlWorkloadTypeUpdateSetting { get; set; }
        /// <summary>SQL Server configuration management settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IServerConfigurationsManagementSettings ServerConfigurationsManagementSetting { get; set; }
        /// <summary>SQL Server connectivity option.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.ConnectivityType? SqlConnectivityUpdateSettingConnectivityType { get; set; }
        /// <summary>SQL Server port.</summary>
        int? SqlConnectivityUpdateSettingPort { get; set; }
        /// <summary>SQL Server sysadmin login password.</summary>
        System.Security.SecureString SqlConnectivityUpdateSettingSqlAuthUpdatePassword { get; set; }
        /// <summary>SQL Server sysadmin login to create.</summary>
        string SqlConnectivityUpdateSettingSqlAuthUpdateUserName { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlDataSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlDataSettingLun { get; set; }
        /// <summary>SQL image offer. Examples include SQL2016-WS2016, SQL2017-WS2016.</summary>
        string SqlImageOffer { get; set; }
        /// <summary>SQL Server edition type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlImageSku? SqlImageSku { get; set; }
        /// <summary>SQL Server Collation.</summary>
        string SqlInstanceSettingCollation { get; set; }
        /// <summary>SQL Server IFI.</summary>
        bool? SqlInstanceSettingIsIfiEnabled { get; set; }
        /// <summary>SQL Server LPIM.</summary>
        bool? SqlInstanceSettingIsLpimEnabled { get; set; }
        /// <summary>SQL Server Optimize for Adhoc workloads.</summary>
        bool? SqlInstanceSettingIsOptimizeForAdHocWorkloadsEnabled { get; set; }
        /// <summary>SQL Server MAXDOP.</summary>
        int? SqlInstanceSettingMaxDop { get; set; }
        /// <summary>SQL Server maximum memory.</summary>
        int? SqlInstanceSettingMaxServerMemoryMb { get; set; }
        /// <summary>SQL Server minimum memory.</summary>
        int? SqlInstanceSettingMinServerMemoryMb { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlLogSettingDefaultFilePath { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlLogSettingLun { get; set; }
        /// <summary>SQL Server Management type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlManagementMode? SqlManagement { get; set; }
        /// <summary>SQL Server license type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlServerLicenseType? SqlServerLicenseType { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? SqlStorageUpdateSettingDiskConfigurationType { get; set; }
        /// <summary>Virtual machine disk count.</summary>
        int? SqlStorageUpdateSettingDiskCount { get; set; }
        /// <summary>Device id of the first disk to be updated.</summary>
        int? SqlStorageUpdateSettingStartingDeviceId { get; set; }
        /// <summary>SQL Server tempdb data file count</summary>
        int? SqlTempDbSettingDataFileCount { get; set; }
        /// <summary>SQL Server tempdb data file size</summary>
        int? SqlTempDbSettingDataFileSize { get; set; }
        /// <summary>SQL Server tempdb data file autoGrowth size</summary>
        int? SqlTempDbSettingDataGrowth { get; set; }
        /// <summary>SQL Server default file path</summary>
        string SqlTempDbSettingDefaultFilePath { get; set; }
        /// <summary>SQL Server tempdb log file size</summary>
        int? SqlTempDbSettingLogFileSize { get; set; }
        /// <summary>SQL Server tempdb log file autoGrowth size</summary>
        int? SqlTempDbSettingLogGrowth { get; set; }
        /// <summary>Logical Unit Numbers for the disks.</summary>
        int[] SqlTempDbSettingLun { get; set; }
        /// <summary>SQL Server tempdb persist folder choice</summary>
        bool? SqlTempDbSettingPersistFolder { get; set; }
        /// <summary>SQL Server tempdb persist folder location</summary>
        string SqlTempDbSettingPersistFolderPath { get; set; }
        /// <summary>
        /// ARM resource id of the SQL virtual machine group this SQL virtual machine is or will be part of.
        /// </summary>
        string SqlVirtualMachineGroupResourceId { get; set; }
        /// <summary>SQL Server workload type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.SqlWorkloadType? SqlWorkloadTypeUpdateSettingSqlWorkloadType { get; set; }
        /// <summary>Storage Configuration Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IStorageConfigurationSettings StorageConfigurationSetting { get; set; }
        /// <summary>Disk configuration to apply to SQL Server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.DiskConfigurationType? StorageConfigurationSettingDiskConfigurationType { get; set; }
        /// <summary>SQL Server Data Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings StorageConfigurationSettingSqlDataSetting { get; set; }
        /// <summary>SQL Server Log Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlStorageSettings StorageConfigurationSettingSqlLogSetting { get; set; }
        /// <summary>SQL Server SystemDb Storage on DataPool if true.</summary>
        bool? StorageConfigurationSettingSqlSystemDbOnDataDisk { get; set; }
        /// <summary>SQL Server TempDb Storage Settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ISqlTempDbSettings StorageConfigurationSettingSqlTempDbSetting { get; set; }
        /// <summary>Storage workload type.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.StorageWorkloadType? StorageConfigurationSettingStorageWorkloadType { get; set; }
        /// <summary>Troubleshooting status</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingStatus TroubleshootingStatus { get; set; }
        /// <summary>End time in UTC timezone.</summary>
        global::System.DateTime? TroubleshootingStatusEndTimeUtc { get; set; }
        /// <summary>Last troubleshooting trigger time in UTC timezone</summary>
        global::System.DateTime? TroubleshootingStatusLastTriggerTimeUtc { get; set; }
        /// <summary>Troubleshooting properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.ITroubleshootingAdditionalProperties TroubleshootingStatusProperty { get; set; }
        /// <summary>Root cause of the issue</summary>
        string TroubleshootingStatusRootCause { get; set; }
        /// <summary>Start time in UTC timezone.</summary>
        global::System.DateTime? TroubleshootingStatusStartTimeUtc { get; set; }
        /// <summary>SQL VM troubleshooting scenario.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Support.TroubleshootingScenario? TroubleshootingStatusTroubleshootingScenario { get; set; }
        /// <summary>The unhealthy replica information</summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IUnhealthyReplicaInfo UnhealthyReplicaInfo { get; set; }
        /// <summary>The name of the availability group</summary>
        string UnhealthyReplicaInfoAvailabilityGroupName { get; set; }
        /// <summary>
        /// ARM Resource id of underlying virtual machine created from SQL marketplace image.
        /// </summary>
        string VirtualMachineResourceId { get; set; }
        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.SqlVirtualMachine.Models.Api20220801Preview.IWsfcDomainCredentials WsfcDomainCredentials { get; set; }
        /// <summary>Cluster bootstrap account password.</summary>
        System.Security.SecureString WsfcDomainCredentialsClusterBootstrapAccountPassword { get; set; }
        /// <summary>Cluster operator account password.</summary>
        System.Security.SecureString WsfcDomainCredentialsClusterOperatorAccountPassword { get; set; }
        /// <summary>SQL service account password.</summary>
        System.Security.SecureString WsfcDomainCredentialsSqlServiceAccountPassword { get; set; }
        /// <summary>
        /// Domain credentials for setting up Windows Server Failover Cluster for SQL availability group.
        /// </summary>
        string WsfcStaticIP { get; set; }

    }
}