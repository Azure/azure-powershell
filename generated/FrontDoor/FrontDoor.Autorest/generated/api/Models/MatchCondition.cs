// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>Define a match condition.</summary>
    public partial class MatchCondition :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IMatchCondition,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IMatchConditionInternal
    {

        /// <summary>Backing field for <see cref="MatchValue" /> property.</summary>
        private System.Collections.Generic.List<string> _matchValue;

        /// <summary>List of possible match values.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> MatchValue { get => this._matchValue; set => this._matchValue = value; }

        /// <summary>Backing field for <see cref="MatchVariable" /> property.</summary>
        private string _matchVariable;

        /// <summary>Request variable to compare with.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string MatchVariable { get => this._matchVariable; set => this._matchVariable = value; }

        /// <summary>Backing field for <see cref="NegateCondition" /> property.</summary>
        private bool? _negateCondition;

        /// <summary>Describes if the result of this condition should be negated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public bool? NegateCondition { get => this._negateCondition; set => this._negateCondition = value; }

        /// <summary>Backing field for <see cref="OperatorProperty" /> property.</summary>
        private string _operatorProperty;

        /// <summary>Comparison type to use for matching with the variable value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string OperatorProperty { get => this._operatorProperty; set => this._operatorProperty = value; }

        /// <summary>Backing field for <see cref="Selector" /> property.</summary>
        private string _selector;

        /// <summary>
        /// Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Selector { get => this._selector; set => this._selector = value; }

        /// <summary>Backing field for <see cref="Transform" /> property.</summary>
        private System.Collections.Generic.List<string> _transform;

        /// <summary>List of transforms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> Transform { get => this._transform; set => this._transform = value; }

        /// <summary>Creates an new <see cref="MatchCondition" /> instance.</summary>
        public MatchCondition()
        {

        }
    }
    /// Define a match condition.
    public partial interface IMatchCondition :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable
    {
        /// <summary>List of possible match values.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of possible match values.",
        SerializedName = @"matchValue",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> MatchValue { get; set; }
        /// <summary>Request variable to compare with.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Request variable to compare with.",
        SerializedName = @"matchVariable",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader", "RequestBody", "Cookies", "SocketAddr")]
        string MatchVariable { get; set; }
        /// <summary>Describes if the result of this condition should be negated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Describes if the result of this condition should be negated.",
        SerializedName = @"negateCondition",
        PossibleTypes = new [] { typeof(bool) })]
        bool? NegateCondition { get; set; }
        /// <summary>Comparison type to use for matching with the variable value.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Comparison type to use for matching with the variable value.",
        SerializedName = @"operator",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith", "RegEx")]
        string OperatorProperty { get; set; }
        /// <summary>
        /// Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.",
        SerializedName = @"selector",
        PossibleTypes = new [] { typeof(string) })]
        string Selector { get; set; }
        /// <summary>List of transforms.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of transforms.",
        SerializedName = @"transforms",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Lowercase", "Uppercase", "Trim", "UrlDecode", "UrlEncode", "RemoveNulls")]
        System.Collections.Generic.List<string> Transform { get; set; }

    }
    /// Define a match condition.
    internal partial interface IMatchConditionInternal

    {
        /// <summary>List of possible match values.</summary>
        System.Collections.Generic.List<string> MatchValue { get; set; }
        /// <summary>Request variable to compare with.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("RemoteAddr", "RequestMethod", "QueryString", "PostArgs", "RequestUri", "RequestHeader", "RequestBody", "Cookies", "SocketAddr")]
        string MatchVariable { get; set; }
        /// <summary>Describes if the result of this condition should be negated.</summary>
        bool? NegateCondition { get; set; }
        /// <summary>Comparison type to use for matching with the variable value.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Any", "IPMatch", "GeoMatch", "Equal", "Contains", "LessThan", "GreaterThan", "LessThanOrEqual", "GreaterThanOrEqual", "BeginsWith", "EndsWith", "RegEx")]
        string OperatorProperty { get; set; }
        /// <summary>
        /// Match against a specific key from the QueryString, PostArgs, RequestHeader or Cookies variables. Default is null.
        /// </summary>
        string Selector { get; set; }
        /// <summary>List of transforms.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Lowercase", "Uppercase", "Trim", "UrlDecode", "UrlEncode", "RemoveNulls")]
        System.Collections.Generic.List<string> Transform { get; set; }

    }
}