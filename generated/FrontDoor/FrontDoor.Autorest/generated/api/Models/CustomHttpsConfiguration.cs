// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>Https settings for a domain</summary>
    public partial class CustomHttpsConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal
    {

        /// <summary>Backing field for <see cref="CertificateSource" /> property.</summary>
        private string _certificateSource;

        /// <summary>Defines the source of the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string CertificateSource { get => this._certificateSource; set => this._certificateSource = value; }

        /// <summary>Backing field for <see cref="FrontDoorCertificateSourceParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters _frontDoorCertificateSourceParameter;

        /// <summary>
        /// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters FrontDoorCertificateSourceParameter { get => (this._frontDoorCertificateSourceParameter = this._frontDoorCertificateSourceParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontDoorCertificateSourceParameters()); set => this._frontDoorCertificateSourceParameter = value; }

        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string FrontDoorCertificateSourceParameterCertificateType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParametersInternal)FrontDoorCertificateSourceParameter).CertificateType; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParametersInternal)FrontDoorCertificateSourceParameter).CertificateType = value ?? null; }

        /// <summary>Backing field for <see cref="KeyVaultCertificateSourceParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters _keyVaultCertificateSourceParameter;

        /// <summary>KeyVault certificate source parameters (if certificateSource=AzureKeyVault)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters KeyVaultCertificateSourceParameter { get => (this._keyVaultCertificateSourceParameter = this._keyVaultCertificateSourceParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.KeyVaultCertificateSourceParameters()); set => this._keyVaultCertificateSourceParameter = value; }

        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string KeyVaultCertificateSourceParameterSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).SecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).SecretName = value ?? null; }

        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string KeyVaultCertificateSourceParameterSecretVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).SecretVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).SecretVersion = value ?? null; }

        /// <summary>Internal Acessors for FrontDoorCertificateSourceParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal.FrontDoorCertificateSourceParameter { get => (this._frontDoorCertificateSourceParameter = this._frontDoorCertificateSourceParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontDoorCertificateSourceParameters()); set { {_frontDoorCertificateSourceParameter = value;} } }

        /// <summary>Internal Acessors for KeyVaultCertificateSourceParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal.KeyVaultCertificateSourceParameter { get => (this._keyVaultCertificateSourceParameter = this._keyVaultCertificateSourceParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.KeyVaultCertificateSourceParameters()); set { {_keyVaultCertificateSourceParameter = value;} } }

        /// <summary>Internal Acessors for KeyVaultCertificateSourceParameterVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersVault Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal.KeyVaultCertificateSourceParameterVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).Vault; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).Vault = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ProtocolType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal.ProtocolType { get => this._protocolType; set { {_protocolType = value;} } }

        /// <summary>Backing field for <see cref="MinimumTlsVersion" /> property.</summary>
        private string _minimumTlsVersion;

        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string MinimumTlsVersion { get => this._minimumTlsVersion; set => this._minimumTlsVersion = value; }

        /// <summary>Backing field for <see cref="ProtocolType" /> property.</summary>
        private string _protocolType= @"ServerNameIndication";

        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string ProtocolType { get => this._protocolType; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string VaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).VaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersInternal)KeyVaultCertificateSourceParameter).VaultId = value ?? null; }

        /// <summary>Creates an new <see cref="CustomHttpsConfiguration" /> instance.</summary>
        public CustomHttpsConfiguration()
        {

        }
    }
    /// Https settings for a domain
    public partial interface ICustomHttpsConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable
    {
        /// <summary>Defines the source of the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the source of the SSL certificate",
        SerializedName = @"certificateSource",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        string CertificateSource { get; set; }
        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the type of the certificate used for secure connections to a frontendEndpoint",
        SerializedName = @"certificateType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        string FrontDoorCertificateSourceParameterCertificateType { get; set; }
        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the Key Vault secret representing the full certificate PFX",
        SerializedName = @"secretName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCertificateSourceParameterSecretName { get; set; }
        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the Key Vault secret representing the full certificate PFX",
        SerializedName = @"secretVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCertificateSourceParameterSecretVersion { get; set; }
        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum TLS version required from the clients to establish an SSL handshake with Front Door.",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        string MinimumTlsVersion { get; set; }
        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = true,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the TLS extension protocol that is used for secure delivery",
        SerializedName = @"protocolType",
        PossibleTypes = new [] { typeof(string) })]
        string ProtocolType { get;  }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string VaultId { get; set; }

    }
    /// Https settings for a domain
    internal partial interface ICustomHttpsConfigurationInternal

    {
        /// <summary>Defines the source of the SSL certificate</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        string CertificateSource { get; set; }
        /// <summary>
        /// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters FrontDoorCertificateSourceParameter { get; set; }
        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        string FrontDoorCertificateSourceParameterCertificateType { get; set; }
        /// <summary>KeyVault certificate source parameters (if certificateSource=AzureKeyVault)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters KeyVaultCertificateSourceParameter { get; set; }
        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        string KeyVaultCertificateSourceParameterSecretName { get; set; }
        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        string KeyVaultCertificateSourceParameterSecretVersion { get; set; }
        /// <summary>The Key Vault containing the SSL certificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersVault KeyVaultCertificateSourceParameterVault { get; set; }
        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        string MinimumTlsVersion { get; set; }
        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        string ProtocolType { get; set; }
        /// <summary>Resource ID.</summary>
        string VaultId { get; set; }

    }
}