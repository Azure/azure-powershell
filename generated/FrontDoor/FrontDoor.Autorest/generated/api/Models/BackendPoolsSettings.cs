// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>Settings that apply to all backend pools.</summary>
    public partial class BackendPoolsSettings :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolsSettings,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IBackendPoolsSettingsInternal
    {

        /// <summary>Backing field for <see cref="EnforceCertificateNameCheck" /> property.</summary>
        private string _enforceCertificateNameCheck;

        /// <summary>
        /// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string EnforceCertificateNameCheck { get => this._enforceCertificateNameCheck; set => this._enforceCertificateNameCheck = value; }

        /// <summary>Backing field for <see cref="SendRecvTimeoutInSeconds" /> property.</summary>
        private int? _sendRecvTimeoutInSeconds;

        /// <summary>
        /// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public int? SendRecvTimeoutInSeconds { get => this._sendRecvTimeoutInSeconds; set => this._sendRecvTimeoutInSeconds = value; }

        /// <summary>Creates an new <see cref="BackendPoolsSettings" /> instance.</summary>
        public BackendPoolsSettings()
        {

        }
    }
    /// Settings that apply to all backend pools.
    public partial interface IBackendPoolsSettings :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.",
        SerializedName = @"enforceCertificateNameCheck",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EnforceCertificateNameCheck { get; set; }
        /// <summary>
        /// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.",
        SerializedName = @"sendRecvTimeoutSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? SendRecvTimeoutInSeconds { get; set; }

    }
    /// Settings that apply to all backend pools.
    internal partial interface IBackendPoolsSettingsInternal

    {
        /// <summary>
        /// Whether to enforce certificate name check on HTTPS requests to all backend pools. No effect on non-HTTPS requests.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EnforceCertificateNameCheck { get; set; }
        /// <summary>
        /// Send and receive timeout on forwarding request to the backend. When timeout is reached, the request fails and returns.
        /// </summary>
        int? SendRecvTimeoutInSeconds { get; set; }

    }
}