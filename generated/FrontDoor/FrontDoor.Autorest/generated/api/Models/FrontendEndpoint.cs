// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>A frontend endpoint used for routing.</summary>
    public partial class FrontendEndpoint :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpoint,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource __subResource = new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.SubResource();

        /// <summary>Defines the source of the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CertificateSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationCertificateSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationCertificateSource = value ?? null; }

        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CertificateType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).FrontDoorCertificateSourceParameterCertificateType; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).FrontDoorCertificateSourceParameterCertificateType = value ?? null; }

        /// <summary>Provisioning status of Custom Https of the frontendEndpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CustomHttpsProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsProvisioningState; }

        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CustomHttpsProvisioningSubstate { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsProvisioningSubstate; }

        /// <summary>The host name of the frontendEndpoint. Must be a domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string HostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).HostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).HostName = value ?? null; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResourceInternal)__subResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResourceInternal)__subResource).Id = value ?? null; }

        /// <summary>Internal Acessors for CustomHttpsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.CustomHttpsConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfiguration = value ?? null /* model class */; }

        /// <summary>
        /// Internal Acessors for CustomHttpsConfigurationFrontDoorCertificateSourceParameter
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.CustomHttpsConfigurationFrontDoorCertificateSourceParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationFrontDoorCertificateSourceParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationFrontDoorCertificateSourceParameter = value ?? null /* model class */; }

        /// <summary>
        /// Internal Acessors for CustomHttpsConfigurationKeyVaultCertificateSourceParameter
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.CustomHttpsConfigurationKeyVaultCertificateSourceParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationKeyVaultCertificateSourceParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationKeyVaultCertificateSourceParameter = value ?? null /* model class */; }

        /// <summary>Internal Acessors for CustomHttpsProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.CustomHttpsProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsProvisioningState = value ?? null; }

        /// <summary>Internal Acessors for CustomHttpsProvisioningSubstate</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.CustomHttpsProvisioningSubstate { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsProvisioningSubstate; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsProvisioningSubstate = value ?? null; }

        /// <summary>Internal Acessors for KeyVaultCertificateSourceParameterVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersVault Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.KeyVaultCertificateSourceParameterVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).KeyVaultCertificateSourceParameterVault; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).KeyVaultCertificateSourceParameterVault = value ?? null /* model class */; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointProperties Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontendEndpointProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProtocolType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.ProtocolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationProtocolType; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationProtocolType = value ?? null; }

        /// <summary>Internal Acessors for ResourceState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.ResourceState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).ResourceState; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).ResourceState = value ?? null; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.Type { get => this._type; set { {_type = value;} } }

        /// <summary>Internal Acessors for WebApplicationFirewallPolicyLink</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointInternal.WebApplicationFirewallPolicyLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).WebApplicationFirewallPolicyLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).WebApplicationFirewallPolicyLink = value ?? null /* model class */; }

        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string MinimumTlsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationMinimumTlsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationMinimumTlsVersion = value ?? null; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointProperties _property;

        /// <summary>Properties of the Frontend endpoint</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontendEndpointProperties()); set => this._property = value; }

        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string ProtocolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).CustomHttpsConfigurationProtocolType; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Resource status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string ResourceState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).ResourceState; }

        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string SecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).KeyVaultCertificateSourceParameterSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).KeyVaultCertificateSourceParameterSecretName = value ?? null; }

        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string SecretVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).KeyVaultCertificateSourceParameterSecretVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).KeyVaultCertificateSourceParameterSecretVersion = value ?? null; }

        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string SessionAffinityEnabledState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).SessionAffinityEnabledState; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).SessionAffinityEnabledState = value ?? null; }

        /// <summary>
        /// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public int? SessionAffinityTtlInSeconds { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).SessionAffinityTtlSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).SessionAffinityTtlSecond = value ?? default(int); }

        /// <summary>Backing field for <see cref="Type" /> property.</summary>
        private string _type;

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string Type { get => this._type; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string Vault { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).VaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal)Property).VaultId = value ?? null; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string WebApplicationFirewallPolicyLinkId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).WebApplicationFirewallPolicyLinkId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)Property).WebApplicationFirewallPolicyLinkId = value ?? null; }

        /// <summary>Creates an new <see cref="FrontendEndpoint" /> instance.</summary>
        public FrontendEndpoint()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__subResource), __subResource);
            await eventListener.AssertObjectIsValid(nameof(__subResource), __subResource);
        }
    }
    /// A frontend endpoint used for routing.
    public partial interface IFrontendEndpoint :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResource
    {
        /// <summary>Defines the source of the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the source of the SSL certificate",
        SerializedName = @"certificateSource",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        string CertificateSource { get; set; }
        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the type of the certificate used for secure connections to a frontendEndpoint",
        SerializedName = @"certificateType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        string CertificateType { get; set; }
        /// <summary>Provisioning status of Custom Https of the frontendEndpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning status of Custom Https of the frontendEndpoint.",
        SerializedName = @"customHttpsProvisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabling", "Enabled", "Disabling", "Disabled", "Failed")]
        string CustomHttpsProvisioningState { get;  }
        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.",
        SerializedName = @"customHttpsProvisioningSubstate",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("SubmittingDomainControlValidationRequest", "PendingDomainControlValidationREquestApproval", "DomainControlValidationRequestApproved", "DomainControlValidationRequestRejected", "DomainControlValidationRequestTimedOut", "IssuingCertificate", "DeployingCertificate", "CertificateDeployed", "DeletingCertificate", "CertificateDeleted")]
        string CustomHttpsProvisioningSubstate { get;  }
        /// <summary>The host name of the frontendEndpoint. Must be a domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The host name of the frontendEndpoint. Must be a domain name.",
        SerializedName = @"hostName",
        PossibleTypes = new [] { typeof(string) })]
        string HostName { get; set; }
        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum TLS version required from the clients to establish an SSL handshake with Front Door.",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        string MinimumTlsVersion { get; set; }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string Name { get; set; }
        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the TLS extension protocol that is used for secure delivery",
        SerializedName = @"protocolType",
        PossibleTypes = new [] { typeof(string) })]
        string ProtocolType { get;  }
        /// <summary>Resource status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource status.",
        SerializedName = @"resourceState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting", "Migrating", "Migrated")]
        string ResourceState { get;  }
        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the Key Vault secret representing the full certificate PFX",
        SerializedName = @"secretName",
        PossibleTypes = new [] { typeof(string) })]
        string SecretName { get; set; }
        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the Key Vault secret representing the full certificate PFX",
        SerializedName = @"secretVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SecretVersion { get; set; }
        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'",
        SerializedName = @"sessionAffinityEnabledState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string SessionAffinityEnabledState { get; set; }
        /// <summary>
        /// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.",
        SerializedName = @"sessionAffinityTtlSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? SessionAffinityTtlInSeconds { get; set; }
        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string Type { get;  }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string Vault { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string WebApplicationFirewallPolicyLinkId { get; set; }

    }
    /// A frontend endpoint used for routing.
    internal partial interface IFrontendEndpointInternal :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ISubResourceInternal
    {
        /// <summary>Defines the source of the SSL certificate</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        string CertificateSource { get; set; }
        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        string CertificateType { get; set; }
        /// <summary>The configuration specifying how to enable HTTPS</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration CustomHttpsConfiguration { get; set; }
        /// <summary>
        /// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters CustomHttpsConfigurationFrontDoorCertificateSourceParameter { get; set; }
        /// <summary>KeyVault certificate source parameters (if certificateSource=AzureKeyVault)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters CustomHttpsConfigurationKeyVaultCertificateSourceParameter { get; set; }
        /// <summary>Provisioning status of Custom Https of the frontendEndpoint.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabling", "Enabled", "Disabling", "Disabled", "Failed")]
        string CustomHttpsProvisioningState { get; set; }
        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("SubmittingDomainControlValidationRequest", "PendingDomainControlValidationREquestApproval", "DomainControlValidationRequestApproved", "DomainControlValidationRequestRejected", "DomainControlValidationRequestTimedOut", "IssuingCertificate", "DeployingCertificate", "CertificateDeployed", "DeletingCertificate", "CertificateDeleted")]
        string CustomHttpsProvisioningSubstate { get; set; }
        /// <summary>The host name of the frontendEndpoint. Must be a domain name.</summary>
        string HostName { get; set; }
        /// <summary>The Key Vault containing the SSL certificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersVault KeyVaultCertificateSourceParameterVault { get; set; }
        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        string MinimumTlsVersion { get; set; }
        /// <summary>Resource name.</summary>
        string Name { get; set; }
        /// <summary>Properties of the Frontend endpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointProperties Property { get; set; }
        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        string ProtocolType { get; set; }
        /// <summary>Resource status.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting", "Migrating", "Migrated")]
        string ResourceState { get; set; }
        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        string SecretName { get; set; }
        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        string SecretVersion { get; set; }
        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string SessionAffinityEnabledState { get; set; }
        /// <summary>
        /// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
        /// </summary>
        int? SessionAffinityTtlInSeconds { get; set; }
        /// <summary>Resource type.</summary>
        string Type { get; set; }
        /// <summary>Resource ID.</summary>
        string Vault { get; set; }
        /// <summary>Defines the Web Application Firewall policy for each host (if applicable)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink WebApplicationFirewallPolicyLink { get; set; }
        /// <summary>Resource ID.</summary>
        string WebApplicationFirewallPolicyLinkId { get; set; }

    }
}