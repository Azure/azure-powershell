// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Extensions;

    /// <summary>
    /// The JSON object that contains the properties required to create a frontend endpoint.
    /// </summary>
    public partial class FrontendEndpointProperties :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointProperties,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParameters"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParameters __frontendEndpointUpdateParameters = new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.FrontendEndpointUpdateParameters();

        /// <summary>Backing field for <see cref="CustomHttpsConfiguration" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration _customHttpsConfiguration;

        /// <summary>The configuration specifying how to enable HTTPS</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration CustomHttpsConfiguration { get => (this._customHttpsConfiguration = this._customHttpsConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.CustomHttpsConfiguration()); set => this._customHttpsConfiguration = value; }

        /// <summary>Defines the source of the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CustomHttpsConfigurationCertificateSource { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).CertificateSource; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).CertificateSource = value ?? null; }

        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CustomHttpsConfigurationMinimumTlsVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).MinimumTlsVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).MinimumTlsVersion = value ?? null; }

        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string CustomHttpsConfigurationProtocolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).ProtocolType; }

        /// <summary>Backing field for <see cref="CustomHttpsProvisioningState" /> property.</summary>
        private string _customHttpsProvisioningState;

        /// <summary>Provisioning status of Custom Https of the frontendEndpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string CustomHttpsProvisioningState { get => this._customHttpsProvisioningState; }

        /// <summary>Backing field for <see cref="CustomHttpsProvisioningSubstate" /> property.</summary>
        private string _customHttpsProvisioningSubstate;

        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string CustomHttpsProvisioningSubstate { get => this._customHttpsProvisioningSubstate; }

        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string FrontDoorCertificateSourceParameterCertificateType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).FrontDoorCertificateSourceParameterCertificateType; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).FrontDoorCertificateSourceParameterCertificateType = value ?? null; }

        /// <summary>The host name of the frontendEndpoint. Must be a domain name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        public string HostName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).HostName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).HostName = value ?? null; }

        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string KeyVaultCertificateSourceParameterSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameterSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameterSecretName = value ?? null; }

        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string KeyVaultCertificateSourceParameterSecretVersion { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameterSecretVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameterSecretVersion = value ?? null; }

        /// <summary>Internal Acessors for CustomHttpsConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.CustomHttpsConfiguration { get => (this._customHttpsConfiguration = this._customHttpsConfiguration ?? new Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.CustomHttpsConfiguration()); set { {_customHttpsConfiguration = value;} } }

        /// <summary>
        /// Internal Acessors for CustomHttpsConfigurationFrontDoorCertificateSourceParameter
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.CustomHttpsConfigurationFrontDoorCertificateSourceParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).FrontDoorCertificateSourceParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).FrontDoorCertificateSourceParameter = value ?? null /* model class */; }

        /// <summary>
        /// Internal Acessors for CustomHttpsConfigurationKeyVaultCertificateSourceParameter
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.CustomHttpsConfigurationKeyVaultCertificateSourceParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameter = value ?? null /* model class */; }

        /// <summary>Internal Acessors for CustomHttpsConfigurationProtocolType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.CustomHttpsConfigurationProtocolType { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).ProtocolType; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).ProtocolType = value ?? null; }

        /// <summary>Internal Acessors for CustomHttpsProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.CustomHttpsProvisioningState { get => this._customHttpsProvisioningState; set { {_customHttpsProvisioningState = value;} } }

        /// <summary>Internal Acessors for CustomHttpsProvisioningSubstate</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.CustomHttpsProvisioningSubstate { get => this._customHttpsProvisioningSubstate; set { {_customHttpsProvisioningSubstate = value;} } }

        /// <summary>Internal Acessors for KeyVaultCertificateSourceParameterVault</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersVault Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.KeyVaultCertificateSourceParameterVault { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameterVault; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).KeyVaultCertificateSourceParameterVault = value ?? null /* model class */; }

        /// <summary>Internal Acessors for ResourceState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointPropertiesInternal.ResourceState { get => this._resourceState; set { {_resourceState = value;} } }

        /// <summary>Internal Acessors for WebApplicationFirewallPolicyLink</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal.WebApplicationFirewallPolicyLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).WebApplicationFirewallPolicyLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).WebApplicationFirewallPolicyLink = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="ResourceState" /> property.</summary>
        private string _resourceState;

        /// <summary>Resource status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Owned)]
        public string ResourceState { get => this._resourceState; }

        /// <summary>
        /// Whether to allow session affinity on this host. Valid options are 'Enabled' or 'Disabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        public string SessionAffinityEnabledState { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).SessionAffinityEnabledState; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).SessionAffinityEnabledState = value ?? null; }

        /// <summary>
        /// UNUSED. This field will be ignored. The TTL to use in seconds for session affinity, if applicable.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        public int? SessionAffinityTtlSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).SessionAffinityTtlSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).SessionAffinityTtlSecond = value ?? default(int); }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inlined)]
        public string VaultId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).VaultId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfigurationInternal)CustomHttpsConfiguration).VaultId = value ?? null; }

        /// <summary>Defines the Web Application Firewall policy for each host (if applicable)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersWebApplicationFirewallPolicyLink WebApplicationFirewallPolicyLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).WebApplicationFirewallPolicyLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).WebApplicationFirewallPolicyLink = value ?? null /* model class */; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Origin(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PropertyOrigin.Inherited)]
        public string WebApplicationFirewallPolicyLinkId { get => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).WebApplicationFirewallPolicyLinkId; set => ((Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal)__frontendEndpointUpdateParameters).WebApplicationFirewallPolicyLinkId = value ?? null; }

        /// <summary>Creates an new <see cref="FrontendEndpointProperties" /> instance.</summary>
        public FrontendEndpointProperties()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__frontendEndpointUpdateParameters), __frontendEndpointUpdateParameters);
            await eventListener.AssertObjectIsValid(nameof(__frontendEndpointUpdateParameters), __frontendEndpointUpdateParameters);
        }
    }
    /// The JSON object that contains the properties required to create a frontend endpoint.
    public partial interface IFrontendEndpointProperties :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParameters
    {
        /// <summary>Defines the source of the SSL certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the source of the SSL certificate",
        SerializedName = @"certificateSource",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        string CustomHttpsConfigurationCertificateSource { get; set; }
        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The minimum TLS version required from the clients to establish an SSL handshake with Front Door.",
        SerializedName = @"minimumTlsVersion",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        string CustomHttpsConfigurationMinimumTlsVersion { get; set; }
        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the TLS extension protocol that is used for secure delivery",
        SerializedName = @"protocolType",
        PossibleTypes = new [] { typeof(string) })]
        string CustomHttpsConfigurationProtocolType { get;  }
        /// <summary>Provisioning status of Custom Https of the frontendEndpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning status of Custom Https of the frontendEndpoint.",
        SerializedName = @"customHttpsProvisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabling", "Enabled", "Disabling", "Disabled", "Failed")]
        string CustomHttpsProvisioningState { get;  }
        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.",
        SerializedName = @"customHttpsProvisioningSubstate",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("SubmittingDomainControlValidationRequest", "PendingDomainControlValidationREquestApproval", "DomainControlValidationRequestApproved", "DomainControlValidationRequestRejected", "DomainControlValidationRequestTimedOut", "IssuingCertificate", "DeployingCertificate", "CertificateDeployed", "DeletingCertificate", "CertificateDeleted")]
        string CustomHttpsProvisioningSubstate { get;  }
        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the type of the certificate used for secure connections to a frontendEndpoint",
        SerializedName = @"certificateType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        string FrontDoorCertificateSourceParameterCertificateType { get; set; }
        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the Key Vault secret representing the full certificate PFX",
        SerializedName = @"secretName",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCertificateSourceParameterSecretName { get; set; }
        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The version of the Key Vault secret representing the full certificate PFX",
        SerializedName = @"secretVersion",
        PossibleTypes = new [] { typeof(string) })]
        string KeyVaultCertificateSourceParameterSecretVersion { get; set; }
        /// <summary>Resource status.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource status.",
        SerializedName = @"resourceState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting", "Migrating", "Migrated")]
        string ResourceState { get;  }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string VaultId { get; set; }

    }
    /// The JSON object that contains the properties required to create a frontend endpoint.
    internal partial interface IFrontendEndpointPropertiesInternal :
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontendEndpointUpdateParametersInternal
    {
        /// <summary>The configuration specifying how to enable HTTPS</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.ICustomHttpsConfiguration CustomHttpsConfiguration { get; set; }
        /// <summary>Defines the source of the SSL certificate</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("AzureKeyVault", "FrontDoor")]
        string CustomHttpsConfigurationCertificateSource { get; set; }
        /// <summary>
        /// Parameters required for enabling SSL with Front Door-managed certificates (if certificateSource=FrontDoor)
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IFrontDoorCertificateSourceParameters CustomHttpsConfigurationFrontDoorCertificateSourceParameter { get; set; }
        /// <summary>KeyVault certificate source parameters (if certificateSource=AzureKeyVault)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParameters CustomHttpsConfigurationKeyVaultCertificateSourceParameter { get; set; }
        /// <summary>
        /// The minimum TLS version required from the clients to establish an SSL handshake with Front Door.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("1.0", "1.2")]
        string CustomHttpsConfigurationMinimumTlsVersion { get; set; }
        /// <summary>Defines the TLS extension protocol that is used for secure delivery</summary>
        string CustomHttpsConfigurationProtocolType { get; set; }
        /// <summary>Provisioning status of Custom Https of the frontendEndpoint.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Enabling", "Enabled", "Disabling", "Disabled", "Failed")]
        string CustomHttpsProvisioningState { get; set; }
        /// <summary>
        /// Provisioning substate shows the progress of custom HTTPS enabling/disabling process step by step.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("SubmittingDomainControlValidationRequest", "PendingDomainControlValidationREquestApproval", "DomainControlValidationRequestApproved", "DomainControlValidationRequestRejected", "DomainControlValidationRequestTimedOut", "IssuingCertificate", "DeployingCertificate", "CertificateDeployed", "DeletingCertificate", "CertificateDeleted")]
        string CustomHttpsProvisioningSubstate { get; set; }
        /// <summary>
        /// Defines the type of the certificate used for secure connections to a frontendEndpoint
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Dedicated")]
        string FrontDoorCertificateSourceParameterCertificateType { get; set; }
        /// <summary>The name of the Key Vault secret representing the full certificate PFX</summary>
        string KeyVaultCertificateSourceParameterSecretName { get; set; }
        /// <summary>The version of the Key Vault secret representing the full certificate PFX</summary>
        string KeyVaultCertificateSourceParameterSecretVersion { get; set; }
        /// <summary>The Key Vault containing the SSL certificate</summary>
        Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.Models.IKeyVaultCertificateSourceParametersVault KeyVaultCertificateSourceParameterVault { get; set; }
        /// <summary>Resource status.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.FrontDoor.PSArgumentCompleterAttribute("Creating", "Enabling", "Enabled", "Disabling", "Disabled", "Deleting", "Migrating", "Migrated")]
        string ResourceState { get; set; }
        /// <summary>Resource ID.</summary>
        string VaultId { get; set; }

    }
}