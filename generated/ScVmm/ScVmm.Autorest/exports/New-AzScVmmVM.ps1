
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
The operation to create a virtual machine.
Please note some properties can be set only during virtual machine creation.
.Description
The operation to create a virtual machine.
Please note some properties can be set only during virtual machine creation.

To enable existing SCVMM virtual machine in Azure execute the command with `InventoryUuid` or `InventoryItemId`.
To create a new virtual machine execute the command with `CloudName` and `TemplateName` or equivalent Id parameters.

To enable resource in the same Resource Group as VMM Sever/Cloud/Virtual Network/VM Template resource resides execute the command with `CreateByName` or `CreateExpandedByName` Parameter Set.
To enable resource in a different Resource Group than the one where VMM Sever/Cloud/Virtual Network/VM Template resource resides execute the command with `CreateExpandedById` Parameter Set.

`InventoryUuid` can be obtained using `Get-AzScVmmInventoryItem -VmmServerName <> -ResourceGroupName <>` (check Name(UUID format) for required InventoryItemName and InventoryType).
`InventoryItemId` can be obtained using `Get-AzScVmmInventoryItem -VmmServerName <> -ResourceGroupName <> -Name <uuid>` (check for Id property in the response).
`VmmServerId` can be retrieved using `Get-AzScVmmServer` (check for `Id` property in the response).
`CloudId` can be retrieved using `Get-AzScVmmCloud` (check for `Id` property in the response).
`TemplateId` can be retrieved using `Get-AzScVmmVmTemplate` (check for `Id` property in the response).
`AvailabilitySetId` can be retrieved using `Get-AzScVmmAvailabilitySet` (check for `Id` property in the response).
`CustomLocationId` can be retrieved using `Get-AzScVmmServer` (check for `ExtendedLocationName` property in the response).
.Example
New-AzScVmmVM -Name "test-vm" -ResourceGroupName "test-rg-01" -VmmServerName "test-vmm" -InventoryUuid "00000000-1111-0000-0001-000000000000" -Location "eastus"
.Example
New-AzScVmmVM -Name "test-vm" -ResourceGroupName "test-rg-01" -VmmServerName "test-vmm" -Location 'eastus' -CloudName 'test-cloud' -TemplateName 'test-template'
.Example
$securePassword = ConvertTo-SecureString "******" -AsPlainText -Force
New-AzScVmmVM -Name "test-vm" -ResourceGroupName "test-rg-01" -VmmServerName "test-vmm" -Location 'eastus' -CloudName 'test-cloud' -TemplateName 'test-template' -CpuCount 4 -AdminPassword $securePassword -Generation 2 -Tag @{"key-1"="value-1234"}
.Example
New-AzScVmmVM -Name "test-vm" -ResourceGroupName "test-rg-01" -VmmServerId "/subscriptions/00000000-abcd-0000-abcd-000000000000/resourceGroups/test-rg-01/providers/Microsoft.ScVmm/vmmServers/test-vmm" -CustomLocationId "/subscriptions/00000000-abcd-0000-abcd-000000000000/resourceGroups/test-rg-01/providers/Microsoft.ExtendedLocation/customLocations/test-cl" -Location "eastus"
.Example
New-AzScVmmVM -Name "test-vm" -ResourceGroupName "test-rg-01" -Location "eastus" -CustomLocationId "/subscriptions/00000000-abcd-0000-abcd-000000000000/resourceGroups/test-rg-01/providers/Microsoft.ExtendedLocation/customLocations/test-cl" -VmmServerId "/subscriptions/00000000-abcd-0000-abcd-000000000000/resourceGroups/test-rg-01/providers/Microsoft.ScVmm/vmmServers/test-vmm" -CloudId "/subscriptions/00000000-abcd-0000-abcd-000000000000/resourceGroups/test-rg-01/providers/Microsoft.SCVMM/Clouds/test-cloud"  -TemplateId "/subscriptions/00000000-abcd-0000-abcd-000000000000/resourceGroups/test-rg-01/providers/Microsoft.SCVMM/VirtualMachineTemplates/test-template" 

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DISK <IVirtualDisk[]>: Gets or sets the list of virtual disks associated with the virtual machine.
  [Bus <Int32?>]: Gets or sets the disk bus.
  [BusType <String>]: Gets or sets the disk bus type.
  [CreateDiffDisk <String>]: Gets or sets a value indicating diff disk.
  [DiskId <String>]: Gets or sets the disk id.
  [DiskSizeGb <Int32?>]: Gets or sets the disk total size.
  [Lun <Int32?>]: Gets or sets the disk lun.
  [Name <String>]: Gets or sets the name of the disk.
  [StorageQoSPolicyId <String>]: The ID of the QoS policy.
  [StorageQoSPolicyName <String>]: The name of the policy.
  [TemplateDiskId <String>]: Gets or sets the disk id in the template.
  [VhdType <String>]: Gets or sets the disk vhd type.

NETWORKINTERFACE <INetworkInterface[]>: Gets or sets the list of network interfaces associated with the virtual machine.
  [Ipv4AddressType <String>]: Gets or sets the ipv4 address type.
  [Ipv6AddressType <String>]: Gets or sets the ipv6 address type.
  [MacAddress <String>]: Gets or sets the nic MAC address.
  [MacAddressType <String>]: Gets or sets the mac address type.
  [Name <String>]: Gets or sets the name of the network interface.
  [NicId <String>]: Gets or sets the nic id.
  [VirtualNetworkId <String>]: Gets or sets the ARM Id of the Microsoft.ScVmm/virtualNetwork resource to connect the nic.
.Link
https://learn.microsoft.com/powershell/module/az.scvmm/new-azscvmmvm
#>
function New-AzScVmmVM {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance])]
[CmdletBinding(DefaultParameterSetName='CreateExpandedByName', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Alias('VMName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The name of the virtual machine.
    ${Name},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # The geo-location where the resource lives.
    ${Location},

    [Parameter(ParameterSetName='CreateExpandedByName', Mandatory)]
    [Parameter(ParameterSetName='CreateByName', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Name of the vmmServer resource in which this resource resides.
    ${VmmServerName},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateByName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # UUID of the inventory virtual machine resource to enable in Azure.
    ${InventoryUuid},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateByName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # UUID of the cloud resource to use for deploying the vm.
    ${CloudName},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateByName')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Name of the template resource to use for deploying the vm.
    ${TemplateName},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String[]]
    # Availability Sets in vm.
    ${AvailabilitySetName},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Sets computer name.
    ${ComputerName},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Security.SecureString]
    # Admin password of the virtual machine.
    ${AdminPassword},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Generation for the vm.
    ${Generation},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the number of vCPUs for the vm.
    ${CpuCount},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable dynamic memory or not.
    ${DynamicMemoryEnabled},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the max dynamic memory for the vm.
    ${DynamicMemoryMaxMb},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # Gets or sets the min dynamic memory for the vm.
    ${DynamicMemoryMinMb},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Management.Automation.SwitchParameter]
    # Whether to enable processor compatibility mode for live migration of VMs.
    ${LimitCpuForMigration},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.Int32]
    # MemoryMB is the size of a virtual machine's memory, in MB.
    ${MemoryMb},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Type of checkpoint supported for the vm.
    ${CheckpointType},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface[]]
    # Gets or sets the list of network interfaces associated with the virtual machine.
    ${NetworkInterface},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk[]]
    # Gets or sets the list of virtual disks associated with the virtual machine.
    ${Disk},

    [Parameter(ParameterSetName='CreateExpandedByName')]
    [Parameter(ParameterSetName='CreateByName')]
    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceUpdateTags]))]
    [System.Collections.Hashtable]
    # Resource tags
    ${Tag},

    [Parameter(ParameterSetName='CreateExpandedById', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the vmmServer resource in which this resource resides.
    ${VmmServerId},

    [Parameter(ParameterSetName='CreateExpandedById', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the custom location.
    ${CustomLocationId},

    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the inventory virtual machine resource to enable in Azure.
    ${InventoryId},

    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the cloud resource to use for deploying the vm.
    ${CloudId},

    [Parameter(ParameterSetName='CreateExpandedById')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # ARM Id of the template resource to use for deploying the vm.
    ${TemplateId},

    [Parameter(ParameterSetName='CreateExpandedById')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String[]]
    # Availability Sets in vm.
    ${AvailabilitySetId},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpandedByName = 'Az.ScVmm.custom\New-AzScVmmVM';
            CreateByName = 'Az.ScVmm.custom\New-AzScVmmVM';
            CreateExpandedById = 'Az.ScVmm.custom\New-AzScVmmVM';
            CreateViaJsonFilePath = 'Az.ScVmm.custom\New-AzScVmmVM';
            CreateViaJsonString = 'Az.ScVmm.custom\New-AzScVmmVM';
        }
        if (('CreateExpandedByName', 'CreateByName', 'CreateExpandedById', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
