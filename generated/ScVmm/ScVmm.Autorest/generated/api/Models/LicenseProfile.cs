// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Extensions;

    /// <summary>Describes a license profile in a hybrid machine.</summary>
    public partial class LicenseProfile :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfile,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGenerated"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGenerated __trackedResourceAutoGenerated = new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.TrackedResourceAutoGenerated();

        /// <summary>The error additional info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorAdditionalInfo> AdditionalInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).AdditionalInfo; }

        /// <summary>The error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Code; }

        /// <summary>The error details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated> Detail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Detail; }

        /// <summary>The resource id of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string EsuProfileAssignedLicense { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileAssignedLicense; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileAssignedLicense = value ?? null; }

        /// <summary>The guid id of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string EsuProfileAssignedLicenseImmutableId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileAssignedLicenseImmutableId; }

        /// <summary>Indicates the eligibility state of Esu.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string EsuProfileEsuEligibility { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuEligibility; }

        /// <summary>The list of ESU keys.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IEsuKey> EsuProfileEsuKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuKey; }

        /// <summary>Indicates whether there is an ESU Key currently active for the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string EsuProfileEsuKeyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuKeyState; }

        /// <summary>The type of the Esu servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string EsuProfileServerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileServerType; }

        /// <summary>
        /// Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Id; }

        /// <summary>The geo-location where the resource lives</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Location { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Location; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Location = value ?? null; }

        /// <summary>The error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Message; }

        /// <summary>Internal Acessors for AdditionalInfo</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorAdditionalInfo> Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.AdditionalInfo { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).AdditionalInfo; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).AdditionalInfo = value; }

        /// <summary>Internal Acessors for Code</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.Code { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Code; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Code = value; }

        /// <summary>Internal Acessors for Detail</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated> Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.Detail { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Detail; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Detail = value; }

        /// <summary>Internal Acessors for EsuProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileArmEsuProperties Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.EsuProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfile = value; }

        /// <summary>Internal Acessors for EsuProfileAssignedLicenseImmutableId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.EsuProfileAssignedLicenseImmutableId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileAssignedLicenseImmutableId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileAssignedLicenseImmutableId = value; }

        /// <summary>Internal Acessors for EsuProfileEsuEligibility</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.EsuProfileEsuEligibility { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuEligibility; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuEligibility = value; }

        /// <summary>Internal Acessors for EsuProfileEsuKey</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IEsuKey> Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.EsuProfileEsuKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuKey = value; }

        /// <summary>Internal Acessors for EsuProfileEsuKeyState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.EsuProfileEsuKeyState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuKeyState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileEsuKeyState = value; }

        /// <summary>Internal Acessors for EsuProfileServerType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.EsuProfileServerType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileServerType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).EsuProfileServerType = value; }

        /// <summary>Internal Acessors for Message</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.Message { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Message; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Message = value; }

        /// <summary>Internal Acessors for ProductProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileArmProductProfileProperties Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.ProductProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfile = value; }

        /// <summary>Internal Acessors for ProductProfileBillingEndDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.ProductProfileBillingEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileBillingEndDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileBillingEndDate = value; }

        /// <summary>Internal Acessors for ProductProfileBillingStartDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.ProductProfileBillingStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileBillingStartDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileBillingStartDate = value; }

        /// <summary>Internal Acessors for ProductProfileDisenrollmentDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.ProductProfileDisenrollmentDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileDisenrollmentDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileDisenrollmentDate = value; }

        /// <summary>Internal Acessors for ProductProfileEnrollmentDate</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.ProductProfileEnrollmentDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileEnrollmentDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileEnrollmentDate = value; }

        /// <summary>Internal Acessors for ProductProfileError</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.ProductProfileError { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileError; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileError = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileProperties Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.LicenseProfileProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for SoftwareAssurance</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesSoftwareAssurance Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.SoftwareAssurance { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).SoftwareAssurance; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).SoftwareAssurance = value; }

        /// <summary>Internal Acessors for Target</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileInternal.Target { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Target; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Target = value; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemData = value; }

        /// <summary>Internal Acessors for SystemDataCreatedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedAt = value; }

        /// <summary>Internal Acessors for SystemDataCreatedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedBy = value; }

        /// <summary>Internal Acessors for SystemDataCreatedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedByType = value; }

        /// <summary>Internal Acessors for SystemDataLastModifiedAt</summary>
        global::System.DateTime? Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedAt = value; }

        /// <summary>Internal Acessors for SystemDataLastModifiedBy</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedBy = value; }

        /// <summary>Internal Acessors for SystemDataLastModifiedByType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedByType = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Type = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Name; }

        /// <summary>The timestamp in UTC when the billing ends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProductProfileBillingEndDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileBillingEndDate; }

        /// <summary>The timestamp in UTC when the billing starts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProductProfileBillingStartDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileBillingStartDate; }

        /// <summary>The timestamp in UTC when the user disenrolled the feature.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProductProfileDisenrollmentDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileDisenrollmentDate; }

        /// <summary>The timestamp in UTC when the user enrolls the feature.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public global::System.DateTime? ProductProfileEnrollmentDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileEnrollmentDate; }

        /// <summary>The list of product features.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProductFeature> ProductProfileProductFeature { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileProductFeature; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileProductFeature = value ?? null /* arrayOf */; }

        /// <summary>Indicates the product type of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string ProductProfileProductType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileProductType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileProductType = value ?? null; }

        /// <summary>Indicates the subscription status of the product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string ProductProfileSubscriptionStatus { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileSubscriptionStatus; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProductProfileSubscriptionStatus = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileProperties _property;

        /// <summary>Describe the properties of a license profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.LicenseProfileProperties()); set => this._property = value; }

        /// <summary>The provisioning state, which only appears in the response.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).ProvisioningState = value ?? null; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>
        /// Specifies if this machine is licensed as part of a Software Assurance agreement.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public bool? SoftwareAssuranceCustomer { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).SoftwareAssuranceCustomer; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).SoftwareAssuranceCustomer = value ?? default(bool); }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemData = value ?? null /* model class */; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedAt; }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedBy; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataCreatedByType; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedAt; }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedBy; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).SystemDataLastModifiedByType; }

        /// <summary>Resource tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceTags Tag { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Tag; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Tag = value ?? null /* model class */; }

        /// <summary>The error target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string Target { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesInternal)Property).Target; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceAutoGeneratedInternal)__trackedResourceAutoGenerated).Type; }

        /// <summary>Creates an new <see cref="LicenseProfile" /> instance.</summary>
        public LicenseProfile()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__trackedResourceAutoGenerated), __trackedResourceAutoGenerated);
            await eventListener.AssertObjectIsValid(nameof(__trackedResourceAutoGenerated), __trackedResourceAutoGenerated);
        }
    }
    /// Describes a license profile in a hybrid machine.
    public partial interface ILicenseProfile :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGenerated
    {
        /// <summary>The error additional info.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The error additional info.",
        SerializedName = @"additionalInfo",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorAdditionalInfo) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorAdditionalInfo> AdditionalInfo { get;  }
        /// <summary>The error code.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The error code.",
        SerializedName = @"code",
        PossibleTypes = new [] { typeof(string) })]
        string Code { get;  }
        /// <summary>The error details.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The error details.",
        SerializedName = @"details",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated> Detail { get;  }
        /// <summary>The resource id of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The resource id of the license.",
        SerializedName = @"assignedLicense",
        PossibleTypes = new [] { typeof(string) })]
        string EsuProfileAssignedLicense { get; set; }
        /// <summary>The guid id of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The guid id of the license.",
        SerializedName = @"assignedLicenseImmutableId",
        PossibleTypes = new [] { typeof(string) })]
        string EsuProfileAssignedLicenseImmutableId { get;  }
        /// <summary>Indicates the eligibility state of Esu.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Indicates the eligibility state of Esu.",
        SerializedName = @"esuEligibility",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Eligible", "Ineligible", "Unknown")]
        string EsuProfileEsuEligibility { get;  }
        /// <summary>The list of ESU keys.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The list of ESU keys.",
        SerializedName = @"esuKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IEsuKey) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IEsuKey> EsuProfileEsuKey { get;  }
        /// <summary>Indicates whether there is an ESU Key currently active for the machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Indicates whether there is an ESU Key currently active for the machine.",
        SerializedName = @"esuKeyState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Inactive", "Active")]
        string EsuProfileEsuKeyState { get;  }
        /// <summary>The type of the Esu servers.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The type of the Esu servers.",
        SerializedName = @"serverType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Standard", "Datacenter")]
        string EsuProfileServerType { get;  }
        /// <summary>The error message.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The error message.",
        SerializedName = @"message",
        PossibleTypes = new [] { typeof(string) })]
        string Message { get;  }
        /// <summary>The timestamp in UTC when the billing ends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp in UTC when the billing ends.",
        SerializedName = @"billingEndDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProductProfileBillingEndDate { get;  }
        /// <summary>The timestamp in UTC when the billing starts.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp in UTC when the billing starts.",
        SerializedName = @"billingStartDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProductProfileBillingStartDate { get;  }
        /// <summary>The timestamp in UTC when the user disenrolled the feature.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp in UTC when the user disenrolled the feature.",
        SerializedName = @"disenrollmentDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProductProfileDisenrollmentDate { get;  }
        /// <summary>The timestamp in UTC when the user enrolls the feature.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The timestamp in UTC when the user enrolls the feature.",
        SerializedName = @"enrollmentDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? ProductProfileEnrollmentDate { get;  }
        /// <summary>The list of product features.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of product features.",
        SerializedName = @"productFeatures",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProductFeature) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProductFeature> ProductProfileProductFeature { get; set; }
        /// <summary>Indicates the product type of the license.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates the product type of the license.",
        SerializedName = @"productType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("WindowsServer", "WindowsIoTEnterprise")]
        string ProductProfileProductType { get; set; }
        /// <summary>Indicates the subscription status of the product.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates the subscription status of the product.",
        SerializedName = @"subscriptionStatus",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Unknown", "Enabling", "Enabled", "Disabled", "Disabling", "Failed")]
        string ProductProfileSubscriptionStatus { get; set; }
        /// <summary>The provisioning state, which only appears in the response.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The provisioning state, which only appears in the response.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", "Created")]
        string ProvisioningState { get; set; }
        /// <summary>
        /// Specifies if this machine is licensed as part of a Software Assurance agreement.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies if this machine is licensed as part of a Software Assurance agreement.",
        SerializedName = @"softwareAssuranceCustomer",
        PossibleTypes = new [] { typeof(bool) })]
        bool? SoftwareAssuranceCustomer { get; set; }
        /// <summary>The error target.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The error target.",
        SerializedName = @"target",
        PossibleTypes = new [] { typeof(string) })]
        string Target { get;  }

    }
    /// Describes a license profile in a hybrid machine.
    internal partial interface ILicenseProfileInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ITrackedResourceAutoGeneratedInternal
    {
        /// <summary>The error additional info.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorAdditionalInfo> AdditionalInfo { get; set; }
        /// <summary>The error code.</summary>
        string Code { get; set; }
        /// <summary>The error details.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated> Detail { get; set; }
        /// <summary>Hybrid Compute ESU Profile properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileArmEsuProperties EsuProfile { get; set; }
        /// <summary>The resource id of the license.</summary>
        string EsuProfileAssignedLicense { get; set; }
        /// <summary>The guid id of the license.</summary>
        string EsuProfileAssignedLicenseImmutableId { get; set; }
        /// <summary>Indicates the eligibility state of Esu.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Eligible", "Ineligible", "Unknown")]
        string EsuProfileEsuEligibility { get; set; }
        /// <summary>The list of ESU keys.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IEsuKey> EsuProfileEsuKey { get; set; }
        /// <summary>Indicates whether there is an ESU Key currently active for the machine.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Inactive", "Active")]
        string EsuProfileEsuKeyState { get; set; }
        /// <summary>The type of the Esu servers.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Standard", "Datacenter")]
        string EsuProfileServerType { get; set; }
        /// <summary>The error message.</summary>
        string Message { get; set; }
        /// <summary>Hybrid Compute Product Profile properties</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileArmProductProfileProperties ProductProfile { get; set; }
        /// <summary>The timestamp in UTC when the billing ends.</summary>
        global::System.DateTime? ProductProfileBillingEndDate { get; set; }
        /// <summary>The timestamp in UTC when the billing starts.</summary>
        global::System.DateTime? ProductProfileBillingStartDate { get; set; }
        /// <summary>The timestamp in UTC when the user disenrolled the feature.</summary>
        global::System.DateTime? ProductProfileDisenrollmentDate { get; set; }
        /// <summary>The timestamp in UTC when the user enrolls the feature.</summary>
        global::System.DateTime? ProductProfileEnrollmentDate { get; set; }
        /// <summary>
        /// The errors that were encountered during the feature enrollment or disenrollment.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IErrorDetailAutoGenerated ProductProfileError { get; set; }
        /// <summary>The list of product features.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProductFeature> ProductProfileProductFeature { get; set; }
        /// <summary>Indicates the product type of the license.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("WindowsServer", "WindowsIoTEnterprise")]
        string ProductProfileProductType { get; set; }
        /// <summary>Indicates the subscription status of the product.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Unknown", "Enabling", "Enabled", "Disabled", "Disabling", "Failed")]
        string ProductProfileSubscriptionStatus { get; set; }
        /// <summary>Describe the properties of a license profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfileProperties Property { get; set; }
        /// <summary>The provisioning state, which only appears in the response.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", "Created")]
        string ProvisioningState { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ILicenseProfilePropertiesSoftwareAssurance SoftwareAssurance { get; set; }
        /// <summary>
        /// Specifies if this machine is licensed as part of a Software Assurance agreement.
        /// </summary>
        bool? SoftwareAssuranceCustomer { get; set; }
        /// <summary>The error target.</summary>
        string Target { get; set; }

    }
}