// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Extensions;

    /// <summary>Define the virtualMachineInstance.</summary>
    public partial class VirtualMachineInstance :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstance,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProxyResource" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProxyResource __proxyResource = new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ProxyResource();

        /// <summary>Availability Sets in vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> AvailabilitySet { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).AvailabilitySet; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).AvailabilitySet = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="ExtendedLocation" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocation _extendedLocation;

        /// <summary>Gets or sets the extended location.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocation ExtendedLocation { get => (this._extendedLocation = this._extendedLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ExtendedLocation()); set => this._extendedLocation = value; }

        /// <summary>The extended location name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string ExtendedLocationName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocationInternal)ExtendedLocation).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocationInternal)ExtendedLocation).Name = value ?? null; }

        /// <summary>The extended location type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string ExtendedLocationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocationInternal)ExtendedLocation).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocationInternal)ExtendedLocation).Type = value ?? null; }

        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileCpuCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileCpuCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileCpuCount = value ?? default(int); }

        /// <summary>Gets or sets a value indicating whether to enable dynamic memory or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string HardwareProfileDynamicMemoryEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileDynamicMemoryEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileDynamicMemoryEnabled = value ?? null; }

        /// <summary>Gets or sets the max dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileDynamicMemoryMaxMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileDynamicMemoryMaxMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileDynamicMemoryMaxMb = value ?? default(int); }

        /// <summary>Gets or sets the min dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileDynamicMemoryMinMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileDynamicMemoryMinMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileDynamicMemoryMinMb = value ?? default(int); }

        /// <summary>Gets highly available property.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string HardwareProfileIsHighlyAvailable { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileIsHighlyAvailable; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string HardwareProfileLimitCpuForMigration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileLimitCpuForMigration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileLimitCpuForMigration = value ?? null; }

        /// <summary>MemoryMB is the size of a virtual machine's memory, in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileMemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileMemoryMb = value ?? default(int); }

        /// <summary>
        /// Fully qualified resource ID for the resource. E.g. "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Id; }

        /// <summary>Gets or sets the bios guid for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileBiosGuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileBiosGuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileBiosGuid = value ?? null; }

        /// <summary>Checkpoints in the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> InfrastructureProfileCheckpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCheckpoint; }

        /// <summary>Type of checkpoint supported for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileCheckpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCheckpointType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCheckpointType = value ?? null; }

        /// <summary>ARM Id of the cloud resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileCloudId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCloudId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCloudId = value ?? null; }

        /// <summary>Gets or sets the generation for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? InfrastructureProfileGeneration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileGeneration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileGeneration = value ?? default(int); }

        /// <summary>Gets or sets the inventory Item ID for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileInventoryItemId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileInventoryItemId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileInventoryItemId = value ?? null; }

        /// <summary>ARM Id of the template resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileTemplateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileTemplateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileTemplateId = value ?? null; }

        /// <summary>Unique ID of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileUuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileUuid = value ?? null; }

        /// <summary>VMName is the name of VM on the SCVmm server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileVMName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileVMName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileVMName = value ?? null; }

        /// <summary>ARM Id of the vmmServer resource in which this resource resides.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileVmmServerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileVmmServerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileVmmServerId = value ?? null; }

        /// <summary>Gets description of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointDescription = value ?? null; }

        /// <summary>Gets ID of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointId = value ?? null; }

        /// <summary>Gets name of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointName = value ?? null; }

        /// <summary>Gets ID of parent of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointParentCheckpointId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointParentCheckpointId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).LastRestoredVMCheckpointParentCheckpointId = value ?? null; }

        /// <summary>Internal Acessors for Id</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal.Id { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Id = value; }

        /// <summary>Internal Acessors for Name</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal.Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Name = value; }

        /// <summary>Internal Acessors for SystemData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ISystemData Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal.SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemData; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemData = value; }

        /// <summary>Internal Acessors for Type</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal.Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Type = value; }

        /// <summary>Internal Acessors for ExtendedLocation</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocation Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.ExtendedLocation { get => (this._extendedLocation = this._extendedLocation ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ExtendedLocation()); set { {_extendedLocation = value;} } }

        /// <summary>Internal Acessors for HardwareProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.HardwareProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfile = value; }

        /// <summary>Internal Acessors for HardwareProfileIsHighlyAvailable</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.HardwareProfileIsHighlyAvailable { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileIsHighlyAvailable; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).HardwareProfileIsHighlyAvailable = value; }

        /// <summary>Internal Acessors for InfrastructureProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.InfrastructureProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfile = value; }

        /// <summary>Internal Acessors for InfrastructureProfileCheckpoint</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.InfrastructureProfileCheckpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCheckpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileCheckpoint = value; }

        /// <summary>Internal Acessors for InfrastructureProfileLastRestoredVMCheckpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.InfrastructureProfileLastRestoredVMCheckpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileLastRestoredVMCheckpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).InfrastructureProfileLastRestoredVMCheckpoint = value; }

        /// <summary>Internal Acessors for NetworkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.NetworkProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).NetworkProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).NetworkProfile = value; }

        /// <summary>Internal Acessors for OSProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstance Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.OSProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfile = value; }

        /// <summary>Internal Acessors for OSProfileOssku</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.OSProfileOssku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOssku; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOssku = value; }

        /// <summary>Internal Acessors for OSProfileOstype</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.OSProfileOstype { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOstype; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOstype = value; }

        /// <summary>Internal Acessors for OSProfileOsversion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.OSProfileOsversion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOsversion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOsversion = value; }

        /// <summary>Internal Acessors for PowerState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.PowerState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).PowerState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).PowerState = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceProperties Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.VirtualMachineInstanceProperties()); set { {_property = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).ProvisioningState; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).ProvisioningState = value; }

        /// <summary>Internal Acessors for StorageProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceInternal.StorageProfile { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).StorageProfile; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).StorageProfile = value; }

        /// <summary>The name of the resource</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Name { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Name; }

        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface> NetworkProfileNetworkInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).NetworkProfileNetworkInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).NetworkProfileNetworkInterface = value ?? null /* arrayOf */; }

        /// <summary>Admin password of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Security.SecureString OSProfileAdminPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileAdminPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileAdminPassword = value ?? null; }

        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileComputerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileComputerName = value ?? null; }

        /// <summary>Gets os sku.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileOssku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOssku; }

        /// <summary>Gets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileOstype { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOstype; }

        /// <summary>Gets os version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileOsversion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).OSProfileOsversion; }

        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string PowerState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).PowerState; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceProperties _property;

        /// <summary>The resource-specific properties for this resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceProperties Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.VirtualMachineInstanceProperties()); set => this._property = value; }

        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string ProvisioningState { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).ProvisioningState; }

        /// <summary>Gets the resource group name</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        public string ResourceGroupName { get => (new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Success ? new global::System.Text.RegularExpressions.Regex("^/subscriptions/(?<subscriptionId>[^/]+)/resourceGroups/(?<resourceGroupName>[^/]+)/providers/", global::System.Text.RegularExpressions.RegexOptions.IgnoreCase).Match(this.Id).Groups["resourceGroupName"].Value : null); }

        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk> StorageProfileDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).StorageProfileDisk; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal)Property).StorageProfileDisk = value ?? null /* arrayOf */; }

        /// <summary>
        /// Azure Resource Manager metadata containing createdBy and modifiedBy information.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ISystemData SystemData { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemData; }

        /// <summary>The timestamp of resource creation (UTC).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataCreatedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataCreatedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataCreatedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataCreatedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataCreatedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataCreatedBy = value ?? null; }

        /// <summary>The type of identity that created the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataCreatedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataCreatedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataCreatedByType = value ?? null; }

        /// <summary>The timestamp of resource last modification (UTC)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public global::System.DateTime? SystemDataLastModifiedAt { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedAt; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedAt = value ?? default(global::System.DateTime); }

        /// <summary>The identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedBy { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedBy; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedBy = value ?? null; }

        /// <summary>The type of identity that last modified the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string SystemDataLastModifiedByType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedByType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).SystemDataLastModifiedByType = value ?? null; }

        /// <summary>
        /// The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inherited)]
        public string Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IResourceInternal)__proxyResource).Type; }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__proxyResource), __proxyResource);
            await eventListener.AssertObjectIsValid(nameof(__proxyResource), __proxyResource);
        }

        /// <summary>Creates an new <see cref="VirtualMachineInstance" /> instance.</summary>
        public VirtualMachineInstance()
        {

        }
    }
    /// Define the virtualMachineInstance.
    public partial interface IVirtualMachineInstance :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProxyResource
    {
        /// <summary>Availability Sets in vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Availability Sets in vm.",
        SerializedName = @"availabilitySets",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> AvailabilitySet { get; set; }
        /// <summary>The extended location name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The extended location name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string ExtendedLocationName { get; set; }
        /// <summary>The extended location type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"The extended location type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string ExtendedLocationType { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the number of vCPUs for the vm.",
        SerializedName = @"cpuCount",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileCpuCount { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable dynamic memory or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets a value indicating whether to enable dynamic memory or not.",
        SerializedName = @"dynamicMemoryEnabled",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileDynamicMemoryEnabled { get; set; }
        /// <summary>Gets or sets the max dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the max dynamic memory for the vm.",
        SerializedName = @"dynamicMemoryMaxMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileDynamicMemoryMaxMb { get; set; }
        /// <summary>Gets or sets the min dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the min dynamic memory for the vm.",
        SerializedName = @"dynamicMemoryMinMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileDynamicMemoryMinMb { get; set; }
        /// <summary>Gets highly available property.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets highly available property.",
        SerializedName = @"isHighlyAvailable",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileIsHighlyAvailable { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.",
        SerializedName = @"limitCpuForMigration",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileLimitCpuForMigration { get; set; }
        /// <summary>MemoryMB is the size of a virtual machine's memory, in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MemoryMB is the size of a virtual machine's memory, in MB.",
        SerializedName = @"memoryMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileMemoryMb { get; set; }
        /// <summary>Gets or sets the bios guid for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets the bios guid for the vm.",
        SerializedName = @"biosGuid",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileBiosGuid { get; set; }
        /// <summary>Checkpoints in the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Checkpoints in the vm.",
        SerializedName = @"checkpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> InfrastructureProfileCheckpoint { get;  }
        /// <summary>Type of checkpoint supported for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of checkpoint supported for the vm.",
        SerializedName = @"checkpointType",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileCheckpointType { get; set; }
        /// <summary>ARM Id of the cloud resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"ARM Id of the cloud resource to use for deploying the vm.",
        SerializedName = @"cloudId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileCloudId { get; set; }
        /// <summary>Gets or sets the generation for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets the generation for the vm.",
        SerializedName = @"generation",
        PossibleTypes = new [] { typeof(int) })]
        int? InfrastructureProfileGeneration { get; set; }
        /// <summary>Gets or sets the inventory Item ID for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets the inventory Item ID for the resource.",
        SerializedName = @"inventoryItemId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileInventoryItemId { get; set; }
        /// <summary>ARM Id of the template resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"ARM Id of the template resource to use for deploying the vm.",
        SerializedName = @"templateId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileTemplateId { get; set; }
        /// <summary>Unique ID of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Unique ID of the virtual machine.",
        SerializedName = @"uuid",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileUuid { get; set; }
        /// <summary>VMName is the name of VM on the SCVmm server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"VMName is the name of VM on the SCVmm server.",
        SerializedName = @"vmName",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileVMName { get; set; }
        /// <summary>ARM Id of the vmmServer resource in which this resource resides.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"ARM Id of the vmmServer resource in which this resource resides.",
        SerializedName = @"vmmServerId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileVmmServerId { get; set; }
        /// <summary>Gets description of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets description of the checkpoint.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointDescription { get;  }
        /// <summary>Gets ID of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets ID of the checkpoint.",
        SerializedName = @"checkpointID",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointId { get;  }
        /// <summary>Gets name of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets name of the checkpoint.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointName { get;  }
        /// <summary>Gets ID of parent of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets ID of parent of the checkpoint.",
        SerializedName = @"parentCheckpointID",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointParentCheckpointId { get;  }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the list of network interfaces associated with the virtual machine.",
        SerializedName = @"networkInterfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface> NetworkProfileNetworkInterface { get; set; }
        /// <summary>Admin password of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"Admin password of the virtual machine.",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets computer name.",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileComputerName { get; set; }
        /// <summary>Gets os sku.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets os sku.",
        SerializedName = @"osSku",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileOssku { get;  }
        /// <summary>Gets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the type of the os.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Windows", "Linux", "Other")]
        string OSProfileOstype { get;  }
        /// <summary>Gets os version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets os version.",
        SerializedName = @"osVersion",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileOsversion { get;  }
        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the power state of the virtual machine.",
        SerializedName = @"powerState",
        PossibleTypes = new [] { typeof(string) })]
        string PowerState { get;  }
        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", "Created")]
        string ProvisioningState { get;  }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the list of virtual disks associated with the virtual machine.",
        SerializedName = @"disks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk> StorageProfileDisk { get; set; }

    }
    /// Define the virtualMachineInstance.
    internal partial interface IVirtualMachineInstanceInternal :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IProxyResourceInternal
    {
        /// <summary>Availability Sets in vm.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> AvailabilitySet { get; set; }
        /// <summary>Gets or sets the extended location.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IExtendedLocation ExtendedLocation { get; set; }
        /// <summary>The extended location name.</summary>
        string ExtendedLocationName { get; set; }
        /// <summary>The extended location type.</summary>
        string ExtendedLocationType { get; set; }
        /// <summary>Hardware properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfile HardwareProfile { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        int? HardwareProfileCpuCount { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable dynamic memory or not.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileDynamicMemoryEnabled { get; set; }
        /// <summary>Gets or sets the max dynamic memory for the vm.</summary>
        int? HardwareProfileDynamicMemoryMaxMb { get; set; }
        /// <summary>Gets or sets the min dynamic memory for the vm.</summary>
        int? HardwareProfileDynamicMemoryMinMb { get; set; }
        /// <summary>Gets highly available property.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileIsHighlyAvailable { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileLimitCpuForMigration { get; set; }
        /// <summary>MemoryMB is the size of a virtual machine's memory, in MB.</summary>
        int? HardwareProfileMemoryMb { get; set; }
        /// <summary>Gets the infrastructure profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfile InfrastructureProfile { get; set; }
        /// <summary>Gets or sets the bios guid for the vm.</summary>
        string InfrastructureProfileBiosGuid { get; set; }
        /// <summary>Checkpoints in the vm.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> InfrastructureProfileCheckpoint { get; set; }
        /// <summary>Type of checkpoint supported for the vm.</summary>
        string InfrastructureProfileCheckpointType { get; set; }
        /// <summary>ARM Id of the cloud resource to use for deploying the vm.</summary>
        string InfrastructureProfileCloudId { get; set; }
        /// <summary>Gets or sets the generation for the vm.</summary>
        int? InfrastructureProfileGeneration { get; set; }
        /// <summary>Gets or sets the inventory Item ID for the resource.</summary>
        string InfrastructureProfileInventoryItemId { get; set; }
        /// <summary>Last restored checkpoint in the vm.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint InfrastructureProfileLastRestoredVMCheckpoint { get; set; }
        /// <summary>ARM Id of the template resource to use for deploying the vm.</summary>
        string InfrastructureProfileTemplateId { get; set; }
        /// <summary>Unique ID of the virtual machine.</summary>
        string InfrastructureProfileUuid { get; set; }
        /// <summary>VMName is the name of VM on the SCVmm server.</summary>
        string InfrastructureProfileVMName { get; set; }
        /// <summary>ARM Id of the vmmServer resource in which this resource resides.</summary>
        string InfrastructureProfileVmmServerId { get; set; }
        /// <summary>Gets description of the checkpoint.</summary>
        string LastRestoredVMCheckpointDescription { get; set; }
        /// <summary>Gets ID of the checkpoint.</summary>
        string LastRestoredVMCheckpointId { get; set; }
        /// <summary>Gets name of the checkpoint.</summary>
        string LastRestoredVMCheckpointName { get; set; }
        /// <summary>Gets ID of parent of the checkpoint.</summary>
        string LastRestoredVMCheckpointParentCheckpointId { get; set; }
        /// <summary>Network properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfile NetworkProfile { get; set; }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface> NetworkProfileNetworkInterface { get; set; }
        /// <summary>OS properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstance OSProfile { get; set; }
        /// <summary>Admin password of the virtual machine.</summary>
        System.Security.SecureString OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        string OSProfileComputerName { get; set; }
        /// <summary>Gets os sku.</summary>
        string OSProfileOssku { get; set; }
        /// <summary>Gets the type of the os.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Windows", "Linux", "Other")]
        string OSProfileOstype { get; set; }
        /// <summary>Gets os version.</summary>
        string OSProfileOsversion { get; set; }
        /// <summary>Gets the power state of the virtual machine.</summary>
        string PowerState { get; set; }
        /// <summary>The resource-specific properties for this resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceProperties Property { get; set; }
        /// <summary>Provisioning state of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", "Created")]
        string ProvisioningState { get; set; }
        /// <summary>Storage properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfile StorageProfile { get; set; }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk> StorageProfileDisk { get; set; }

    }
}