// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Extensions;

    /// <summary>Defines the resource properties.</summary>
    public partial class VirtualMachineInstanceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstanceProperties,
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal
    {

        /// <summary>Backing field for <see cref="AvailabilitySet" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> _availabilitySet;

        /// <summary>Availability Sets in vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> AvailabilitySet { get => this._availabilitySet; set => this._availabilitySet = value; }

        /// <summary>Backing field for <see cref="HardwareProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfile _hardwareProfile;

        /// <summary>Hardware properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfile HardwareProfile { get => (this._hardwareProfile = this._hardwareProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.HardwareProfile()); set => this._hardwareProfile = value; }

        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileCpuCount { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).CpuCount; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).CpuCount = value ?? default(int); }

        /// <summary>Gets or sets a value indicating whether to enable dynamic memory or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string HardwareProfileDynamicMemoryEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).DynamicMemoryEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).DynamicMemoryEnabled = value ?? null; }

        /// <summary>Gets or sets the max dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileDynamicMemoryMaxMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).DynamicMemoryMaxMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).DynamicMemoryMaxMb = value ?? default(int); }

        /// <summary>Gets or sets the min dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileDynamicMemoryMinMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).DynamicMemoryMinMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).DynamicMemoryMinMb = value ?? default(int); }

        /// <summary>Gets highly available property.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string HardwareProfileIsHighlyAvailable { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).IsHighlyAvailable; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string HardwareProfileLimitCpuForMigration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).LimitCpuForMigration; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).LimitCpuForMigration = value ?? null; }

        /// <summary>MemoryMB is the size of a virtual machine's memory, in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? HardwareProfileMemoryMb { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).MemoryMb; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).MemoryMb = value ?? default(int); }

        /// <summary>Backing field for <see cref="InfrastructureProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfile _infrastructureProfile;

        /// <summary>Gets the infrastructure profile.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfile InfrastructureProfile { get => (this._infrastructureProfile = this._infrastructureProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.InfrastructureProfile()); set => this._infrastructureProfile = value; }

        /// <summary>Gets or sets the bios guid for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileBiosGuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).BiosGuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).BiosGuid = value ?? null; }

        /// <summary>Checkpoints in the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> InfrastructureProfileCheckpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Checkpoint; }

        /// <summary>Type of checkpoint supported for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileCheckpointType { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).CheckpointType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).CheckpointType = value ?? null; }

        /// <summary>ARM Id of the cloud resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileCloudId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).CloudId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).CloudId = value ?? null; }

        /// <summary>Gets or sets the generation for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public int? InfrastructureProfileGeneration { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Generation; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Generation = value ?? default(int); }

        /// <summary>Gets or sets the inventory Item ID for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileInventoryItemId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).InventoryItemId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).InventoryItemId = value ?? null; }

        /// <summary>ARM Id of the template resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileTemplateId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).TemplateId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).TemplateId = value ?? null; }

        /// <summary>Unique ID of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileUuid { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Uuid; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Uuid = value ?? null; }

        /// <summary>VMName is the name of VM on the SCVmm server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileVMName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).VMName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).VMName = value ?? null; }

        /// <summary>ARM Id of the vmmServer resource in which this resource resides.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string InfrastructureProfileVmmServerId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).VmmServerId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).VmmServerId = value ?? null; }

        /// <summary>Gets description of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointDescription = value ?? null; }

        /// <summary>Gets ID of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointId = value ?? null; }

        /// <summary>Gets name of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointName = value ?? null; }

        /// <summary>Gets ID of parent of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string LastRestoredVMCheckpointParentCheckpointId { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointParentCheckpointId; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpointParentCheckpointId = value ?? null; }

        /// <summary>Internal Acessors for HardwareProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.HardwareProfile { get => (this._hardwareProfile = this._hardwareProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.HardwareProfile()); set { {_hardwareProfile = value;} } }

        /// <summary>Internal Acessors for HardwareProfileIsHighlyAvailable</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.HardwareProfileIsHighlyAvailable { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).IsHighlyAvailable; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfileInternal)HardwareProfile).IsHighlyAvailable = value; }

        /// <summary>Internal Acessors for InfrastructureProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.InfrastructureProfile { get => (this._infrastructureProfile = this._infrastructureProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.InfrastructureProfile()); set { {_infrastructureProfile = value;} } }

        /// <summary>Internal Acessors for InfrastructureProfileCheckpoint</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileCheckpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Checkpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).Checkpoint = value; }

        /// <summary>Internal Acessors for InfrastructureProfileLastRestoredVMCheckpoint</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.InfrastructureProfileLastRestoredVMCheckpoint { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpoint; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfileInternal)InfrastructureProfile).LastRestoredVMCheckpoint = value; }

        /// <summary>Internal Acessors for NetworkProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.NetworkProfile()); set { {_networkProfile = value;} } }

        /// <summary>Internal Acessors for OSProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstance Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.OSProfile { get => (this._oSProfile = this._oSProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.OSProfileForVminstance()); set { {_oSProfile = value;} } }

        /// <summary>Internal Acessors for OSProfileOssku</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.OSProfileOssku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSSku; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSSku = value; }

        /// <summary>Internal Acessors for OSProfileOstype</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.OSProfileOstype { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSType; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSType = value; }

        /// <summary>Internal Acessors for OSProfileOsversion</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.OSProfileOsversion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSVersion; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSVersion = value; }

        /// <summary>Internal Acessors for PowerState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.PowerState { get => this._powerState; set { {_powerState = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for StorageProfile</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfile Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualMachineInstancePropertiesInternal.StorageProfile { get => (this._storageProfile = this._storageProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.StorageProfile()); set { {_storageProfile = value;} } }

        /// <summary>Backing field for <see cref="NetworkProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfile _networkProfile;

        /// <summary>Network properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfile NetworkProfile { get => (this._networkProfile = this._networkProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.NetworkProfile()); set => this._networkProfile = value; }

        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface> NetworkProfileNetworkInterface { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfileInternal)NetworkProfile).NetworkInterface; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfileInternal)NetworkProfile).NetworkInterface = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="OSProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstance _oSProfile;

        /// <summary>OS properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstance OSProfile { get => (this._oSProfile = this._oSProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.OSProfileForVminstance()); set => this._oSProfile = value; }

        /// <summary>Admin password of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Security.SecureString OSProfileAdminPassword { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).AdminPassword; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).AdminPassword = value ?? null; }

        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileComputerName { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).ComputerName; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).ComputerName = value ?? null; }

        /// <summary>Gets os sku.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileOssku { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSSku; }

        /// <summary>Gets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileOstype { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSType; }

        /// <summary>Gets os version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public string OSProfileOsversion { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstanceInternal)OSProfile).OSVersion; }

        /// <summary>Backing field for <see cref="PowerState" /> property.</summary>
        private string _powerState;

        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        public string PowerState { get => this._powerState; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private string _provisioningState;

        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        public string ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="StorageProfile" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfile _storageProfile;

        /// <summary>Storage properties.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfile StorageProfile { get => (this._storageProfile = this._storageProfile ?? new Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.StorageProfile()); set => this._storageProfile = value; }

        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Origin(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk> StorageProfileDisk { get => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfileInternal)StorageProfile).Disk; set => ((Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfileInternal)StorageProfile).Disk = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="VirtualMachineInstanceProperties" /> instance.</summary>
        public VirtualMachineInstanceProperties()
        {

        }
    }
    /// Defines the resource properties.
    public partial interface IVirtualMachineInstanceProperties :
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.IJsonSerializable
    {
        /// <summary>Availability Sets in vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Availability Sets in vm.",
        SerializedName = @"availabilitySets",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> AvailabilitySet { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the number of vCPUs for the vm.",
        SerializedName = @"cpuCount",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileCpuCount { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable dynamic memory or not.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets a value indicating whether to enable dynamic memory or not.",
        SerializedName = @"dynamicMemoryEnabled",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileDynamicMemoryEnabled { get; set; }
        /// <summary>Gets or sets the max dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the max dynamic memory for the vm.",
        SerializedName = @"dynamicMemoryMaxMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileDynamicMemoryMaxMb { get; set; }
        /// <summary>Gets or sets the min dynamic memory for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the min dynamic memory for the vm.",
        SerializedName = @"dynamicMemoryMinMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileDynamicMemoryMinMb { get; set; }
        /// <summary>Gets highly available property.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets highly available property.",
        SerializedName = @"isHighlyAvailable",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileIsHighlyAvailable { get;  }
        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.",
        SerializedName = @"limitCpuForMigration",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileLimitCpuForMigration { get; set; }
        /// <summary>MemoryMB is the size of a virtual machine's memory, in MB.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MemoryMB is the size of a virtual machine's memory, in MB.",
        SerializedName = @"memoryMB",
        PossibleTypes = new [] { typeof(int) })]
        int? HardwareProfileMemoryMb { get; set; }
        /// <summary>Gets or sets the bios guid for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets the bios guid for the vm.",
        SerializedName = @"biosGuid",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileBiosGuid { get; set; }
        /// <summary>Checkpoints in the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Checkpoints in the vm.",
        SerializedName = @"checkpoints",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> InfrastructureProfileCheckpoint { get;  }
        /// <summary>Type of checkpoint supported for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of checkpoint supported for the vm.",
        SerializedName = @"checkpointType",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileCheckpointType { get; set; }
        /// <summary>ARM Id of the cloud resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"ARM Id of the cloud resource to use for deploying the vm.",
        SerializedName = @"cloudId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileCloudId { get; set; }
        /// <summary>Gets or sets the generation for the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets the generation for the vm.",
        SerializedName = @"generation",
        PossibleTypes = new [] { typeof(int) })]
        int? InfrastructureProfileGeneration { get; set; }
        /// <summary>Gets or sets the inventory Item ID for the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets the inventory Item ID for the resource.",
        SerializedName = @"inventoryItemId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileInventoryItemId { get; set; }
        /// <summary>ARM Id of the template resource to use for deploying the vm.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"ARM Id of the template resource to use for deploying the vm.",
        SerializedName = @"templateId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileTemplateId { get; set; }
        /// <summary>Unique ID of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Unique ID of the virtual machine.",
        SerializedName = @"uuid",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileUuid { get; set; }
        /// <summary>VMName is the name of VM on the SCVmm server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"VMName is the name of VM on the SCVmm server.",
        SerializedName = @"vmName",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileVMName { get; set; }
        /// <summary>ARM Id of the vmmServer resource in which this resource resides.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"ARM Id of the vmmServer resource in which this resource resides.",
        SerializedName = @"vmmServerId",
        PossibleTypes = new [] { typeof(string) })]
        string InfrastructureProfileVmmServerId { get; set; }
        /// <summary>Gets description of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets description of the checkpoint.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointDescription { get;  }
        /// <summary>Gets ID of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets ID of the checkpoint.",
        SerializedName = @"checkpointID",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointId { get;  }
        /// <summary>Gets name of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets name of the checkpoint.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointName { get;  }
        /// <summary>Gets ID of parent of the checkpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets ID of parent of the checkpoint.",
        SerializedName = @"parentCheckpointID",
        PossibleTypes = new [] { typeof(string) })]
        string LastRestoredVMCheckpointParentCheckpointId { get;  }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the list of network interfaces associated with the virtual machine.",
        SerializedName = @"networkInterfaces",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface> NetworkProfileNetworkInterface { get; set; }
        /// <summary>Admin password of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = false,
        Create = true,
        Update = false,
        Description = @"Admin password of the virtual machine.",
        SerializedName = @"adminPassword",
        PossibleTypes = new [] { typeof(System.Security.SecureString) })]
        System.Security.SecureString OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = false,
        Description = @"Gets or sets computer name.",
        SerializedName = @"computerName",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileComputerName { get; set; }
        /// <summary>Gets os sku.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets os sku.",
        SerializedName = @"osSku",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileOssku { get;  }
        /// <summary>Gets the type of the os.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the type of the os.",
        SerializedName = @"osType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Windows", "Linux", "Other")]
        string OSProfileOstype { get;  }
        /// <summary>Gets os version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets os version.",
        SerializedName = @"osVersion",
        PossibleTypes = new [] { typeof(string) })]
        string OSProfileOsversion { get;  }
        /// <summary>Gets the power state of the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Gets the power state of the virtual machine.",
        SerializedName = @"powerState",
        PossibleTypes = new [] { typeof(string) })]
        string PowerState { get;  }
        /// <summary>Provisioning state of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Provisioning state of the resource.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", "Created")]
        string ProvisioningState { get;  }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Gets or sets the list of virtual disks associated with the virtual machine.",
        SerializedName = @"disks",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk> StorageProfileDisk { get; set; }

    }
    /// Defines the resource properties.
    internal partial interface IVirtualMachineInstancePropertiesInternal

    {
        /// <summary>Availability Sets in vm.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IAvailabilitySetListItem> AvailabilitySet { get; set; }
        /// <summary>Hardware properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IHardwareProfile HardwareProfile { get; set; }
        /// <summary>Gets or sets the number of vCPUs for the vm.</summary>
        int? HardwareProfileCpuCount { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable dynamic memory or not.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileDynamicMemoryEnabled { get; set; }
        /// <summary>Gets or sets the max dynamic memory for the vm.</summary>
        int? HardwareProfileDynamicMemoryMaxMb { get; set; }
        /// <summary>Gets or sets the min dynamic memory for the vm.</summary>
        int? HardwareProfileDynamicMemoryMinMb { get; set; }
        /// <summary>Gets highly available property.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileIsHighlyAvailable { get; set; }
        /// <summary>
        /// Gets or sets a value indicating whether to enable processor compatibility mode for live migration of VMs.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("true", "false")]
        string HardwareProfileLimitCpuForMigration { get; set; }
        /// <summary>MemoryMB is the size of a virtual machine's memory, in MB.</summary>
        int? HardwareProfileMemoryMb { get; set; }
        /// <summary>Gets the infrastructure profile.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IInfrastructureProfile InfrastructureProfile { get; set; }
        /// <summary>Gets or sets the bios guid for the vm.</summary>
        string InfrastructureProfileBiosGuid { get; set; }
        /// <summary>Checkpoints in the vm.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint> InfrastructureProfileCheckpoint { get; set; }
        /// <summary>Type of checkpoint supported for the vm.</summary>
        string InfrastructureProfileCheckpointType { get; set; }
        /// <summary>ARM Id of the cloud resource to use for deploying the vm.</summary>
        string InfrastructureProfileCloudId { get; set; }
        /// <summary>Gets or sets the generation for the vm.</summary>
        int? InfrastructureProfileGeneration { get; set; }
        /// <summary>Gets or sets the inventory Item ID for the resource.</summary>
        string InfrastructureProfileInventoryItemId { get; set; }
        /// <summary>Last restored checkpoint in the vm.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.ICheckpoint InfrastructureProfileLastRestoredVMCheckpoint { get; set; }
        /// <summary>ARM Id of the template resource to use for deploying the vm.</summary>
        string InfrastructureProfileTemplateId { get; set; }
        /// <summary>Unique ID of the virtual machine.</summary>
        string InfrastructureProfileUuid { get; set; }
        /// <summary>VMName is the name of VM on the SCVmm server.</summary>
        string InfrastructureProfileVMName { get; set; }
        /// <summary>ARM Id of the vmmServer resource in which this resource resides.</summary>
        string InfrastructureProfileVmmServerId { get; set; }
        /// <summary>Gets description of the checkpoint.</summary>
        string LastRestoredVMCheckpointDescription { get; set; }
        /// <summary>Gets ID of the checkpoint.</summary>
        string LastRestoredVMCheckpointId { get; set; }
        /// <summary>Gets name of the checkpoint.</summary>
        string LastRestoredVMCheckpointName { get; set; }
        /// <summary>Gets ID of parent of the checkpoint.</summary>
        string LastRestoredVMCheckpointParentCheckpointId { get; set; }
        /// <summary>Network properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkProfile NetworkProfile { get; set; }
        /// <summary>
        /// Gets or sets the list of network interfaces associated with the virtual machine.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.INetworkInterface> NetworkProfileNetworkInterface { get; set; }
        /// <summary>OS properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IOSProfileForVminstance OSProfile { get; set; }
        /// <summary>Admin password of the virtual machine.</summary>
        System.Security.SecureString OSProfileAdminPassword { get; set; }
        /// <summary>Gets or sets computer name.</summary>
        string OSProfileComputerName { get; set; }
        /// <summary>Gets os sku.</summary>
        string OSProfileOssku { get; set; }
        /// <summary>Gets the type of the os.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Windows", "Linux", "Other")]
        string OSProfileOstype { get; set; }
        /// <summary>Gets os version.</summary>
        string OSProfileOsversion { get; set; }
        /// <summary>Gets the power state of the virtual machine.</summary>
        string PowerState { get; set; }
        /// <summary>Provisioning state of the resource.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ScVmm.PSArgumentCompleterAttribute("Succeeded", "Failed", "Canceled", "Provisioning", "Updating", "Deleting", "Accepted", "Created")]
        string ProvisioningState { get; set; }
        /// <summary>Storage properties.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IStorageProfile StorageProfile { get; set; }
        /// <summary>Gets or sets the list of virtual disks associated with the virtual machine.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ScVmm.Models.IVirtualDisk> StorageProfileDisk { get; set; }

    }
}