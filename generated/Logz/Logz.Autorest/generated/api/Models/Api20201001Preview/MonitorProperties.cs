// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Extensions;

    /// <summary>Properties specific to the monitor resource.</summary>
    public partial class MonitorProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorProperties,
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal
    {

        /// <summary>Backing field for <see cref="LiftrResourceCategory" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.LiftrResourceCategories? _liftrResourceCategory;

        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.LiftrResourceCategories? LiftrResourceCategory { get => this._liftrResourceCategory; }

        /// <summary>Backing field for <see cref="LiftrResourcePreference" /> property.</summary>
        private int? _liftrResourcePreference;

        /// <summary>The priority of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        public int? LiftrResourcePreference { get => this._liftrResourcePreference; }

        /// <summary>Backing field for <see cref="LogzOrganizationProperty" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationProperties _logzOrganizationProperty;

        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationProperties LogzOrganizationProperty { get => (this._logzOrganizationProperty = this._logzOrganizationProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.LogzOrganizationProperties()); set => this._logzOrganizationProperty = value; }

        /// <summary>Name of the Logz organization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string LogzOrganizationPropertyCompanyName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).CompanyName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).CompanyName = value ?? null; }

        /// <summary>The Id of the Enterprise App used for Single sign on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string LogzOrganizationPropertyEnterpriseAppId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).EnterpriseAppId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).EnterpriseAppId = value ?? null; }

        /// <summary>Id of the Logz organization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string LogzOrganizationPropertyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).Id; }

        /// <summary>The login URL specific to this Logz Organization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string LogzOrganizationPropertySingleSignOnUrl { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).SingleSignOnUrl; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).SingleSignOnUrl = value ?? null; }

        /// <summary>Backing field for <see cref="MarketplaceSubscriptionStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MarketplaceSubscriptionStatus? _marketplaceSubscriptionStatus;

        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will
        /// go in Suspended state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MarketplaceSubscriptionStatus? MarketplaceSubscriptionStatus { get => this._marketplaceSubscriptionStatus; set => this._marketplaceSubscriptionStatus = value; }

        /// <summary>Internal Acessors for LiftrResourceCategory</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.LiftrResourceCategories? Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.LiftrResourceCategory { get => this._liftrResourceCategory; set { {_liftrResourceCategory = value;} } }

        /// <summary>Internal Acessors for LiftrResourcePreference</summary>
        int? Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.LiftrResourcePreference { get => this._liftrResourcePreference; set { {_liftrResourcePreference = value;} } }

        /// <summary>Internal Acessors for LogzOrganizationProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationProperties Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.LogzOrganizationProperty { get => (this._logzOrganizationProperty = this._logzOrganizationProperty ?? new Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.LogzOrganizationProperties()); set { {_logzOrganizationProperty = value;} } }

        /// <summary>Internal Acessors for LogzOrganizationPropertyId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.LogzOrganizationPropertyId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationPropertiesInternal)LogzOrganizationProperty).Id = value; }

        /// <summary>Internal Acessors for PlanData</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanData Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.PlanData { get => (this._planData = this._planData ?? new Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.PlanData()); set { {_planData = value;} } }

        /// <summary>Internal Acessors for ProvisioningState</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.ProvisioningState? Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.ProvisioningState { get => this._provisioningState; set { {_provisioningState = value;} } }

        /// <summary>Internal Acessors for UserInfo</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfo Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IMonitorPropertiesInternal.UserInfo { get => (this._userInfo = this._userInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.UserInfo()); set { {_userInfo = value;} } }

        /// <summary>Backing field for <see cref="MonitoringStatus" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MonitoringStatus? _monitoringStatus;

        /// <summary>Flag specifying if the resource monitoring is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MonitoringStatus? MonitoringStatus { get => this._monitoringStatus; set => this._monitoringStatus = value; }

        /// <summary>Backing field for <see cref="PlanData" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanData _planData;

        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanData PlanData { get => (this._planData = this._planData ?? new Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.PlanData()); set => this._planData = value; }

        /// <summary>different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string PlanDataBillingCycle { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).BillingCycle; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).BillingCycle = value ?? null; }

        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public global::System.DateTime? PlanDataEffectiveDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).EffectiveDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).EffectiveDate = value ?? default(global::System.DateTime); }

        /// <summary>plan id as published by Logz</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string PlanDataPlanDetail { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).PlanDetail; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).PlanDetail = value ?? null; }

        /// <summary>different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string PlanDataUsageType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).UsageType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanDataInternal)PlanData).UsageType = value ?? null; }

        /// <summary>Backing field for <see cref="ProvisioningState" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.ProvisioningState? _provisioningState;

        /// <summary>Flag specifying if the resource provisioning state as tracked by ARM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.ProvisioningState? ProvisioningState { get => this._provisioningState; }

        /// <summary>Backing field for <see cref="UserInfo" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfo _userInfo;

        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfo UserInfo { get => (this._userInfo = this._userInfo ?? new Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.UserInfo()); set => this._userInfo = value; }

        /// <summary>Email of the user used by Logz for contacting them if needed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string UserInfoEmailAddress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).EmailAddress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).EmailAddress = value ?? null; }

        /// <summary>First Name of the user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string UserInfoFirstName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).FirstName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).FirstName = value ?? null; }

        /// <summary>Last Name of the user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string UserInfoLastName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).LastName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).LastName = value ?? null; }

        /// <summary>Phone number of the user used by Logz for contacting them if needed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Origin(Microsoft.Azure.PowerShell.Cmdlets.Logz.PropertyOrigin.Inlined)]
        public string UserInfoPhoneNumber { get => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).PhoneNumber; set => ((Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfoInternal)UserInfo).PhoneNumber = value ?? null; }

        /// <summary>Creates an new <see cref="MonitorProperties" /> instance.</summary>
        public MonitorProperties()
        {

        }
    }
    /// Properties specific to the monitor resource.
    public partial interface IMonitorProperties :
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.IJsonSerializable
    {
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"",
        SerializedName = @"liftrResourceCategory",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.LiftrResourceCategories) })]
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.LiftrResourceCategories? LiftrResourceCategory { get;  }
        /// <summary>The priority of the resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"The priority of the resource.",
        SerializedName = @"liftrResourcePreference",
        PossibleTypes = new [] { typeof(int) })]
        int? LiftrResourcePreference { get;  }
        /// <summary>Name of the Logz organization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Name of the Logz organization.",
        SerializedName = @"companyName",
        PossibleTypes = new [] { typeof(string) })]
        string LogzOrganizationPropertyCompanyName { get; set; }
        /// <summary>The Id of the Enterprise App used for Single sign on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The Id of the Enterprise App used for Single sign on.",
        SerializedName = @"enterpriseAppId",
        PossibleTypes = new [] { typeof(string) })]
        string LogzOrganizationPropertyEnterpriseAppId { get; set; }
        /// <summary>Id of the Logz organization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Id of the Logz organization.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string LogzOrganizationPropertyId { get;  }
        /// <summary>The login URL specific to this Logz Organization.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The login URL specific to this Logz Organization.",
        SerializedName = @"singleSignOnUrl",
        PossibleTypes = new [] { typeof(string) })]
        string LogzOrganizationPropertySingleSignOnUrl { get; set; }
        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will
        /// go in Suspended state.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will go in Suspended state.",
        SerializedName = @"marketplaceSubscriptionStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MarketplaceSubscriptionStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MarketplaceSubscriptionStatus? MarketplaceSubscriptionStatus { get; set; }
        /// <summary>Flag specifying if the resource monitoring is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Flag specifying if the resource monitoring is enabled or disabled.",
        SerializedName = @"monitoringStatus",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MonitoringStatus) })]
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MonitoringStatus? MonitoringStatus { get; set; }
        /// <summary>different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"different billing cycles like MONTHLY/WEEKLY. this could be enum",
        SerializedName = @"billingCycle",
        PossibleTypes = new [] { typeof(string) })]
        string PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"date when plan was applied",
        SerializedName = @"effectiveDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by Logz</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"plan id as published by Logz",
        SerializedName = @"planDetails",
        PossibleTypes = new [] { typeof(string) })]
        string PlanDataPlanDetail { get; set; }
        /// <summary>different usage type like PAYG/COMMITTED. this could be enum</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"different usage type like PAYG/COMMITTED. this could be enum",
        SerializedName = @"usageType",
        PossibleTypes = new [] { typeof(string) })]
        string PlanDataUsageType { get; set; }
        /// <summary>Flag specifying if the resource provisioning state as tracked by ARM.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Flag specifying if the resource provisioning state as tracked by ARM.",
        SerializedName = @"provisioningState",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.ProvisioningState) })]
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.ProvisioningState? ProvisioningState { get;  }
        /// <summary>Email of the user used by Logz for contacting them if needed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Email of the user used by Logz for contacting them if needed",
        SerializedName = @"emailAddress",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoEmailAddress { get; set; }
        /// <summary>First Name of the user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"First Name of the user",
        SerializedName = @"firstName",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoFirstName { get; set; }
        /// <summary>Last Name of the user</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Last Name of the user",
        SerializedName = @"lastName",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoLastName { get; set; }
        /// <summary>Phone number of the user used by Logz for contacting them if needed</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Logz.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Phone number of the user used by Logz for contacting them if needed",
        SerializedName = @"phoneNumber",
        PossibleTypes = new [] { typeof(string) })]
        string UserInfoPhoneNumber { get; set; }

    }
    /// Properties specific to the monitor resource.
    internal partial interface IMonitorPropertiesInternal

    {
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.LiftrResourceCategories? LiftrResourceCategory { get; set; }
        /// <summary>The priority of the resource.</summary>
        int? LiftrResourcePreference { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.ILogzOrganizationProperties LogzOrganizationProperty { get; set; }
        /// <summary>Name of the Logz organization.</summary>
        string LogzOrganizationPropertyCompanyName { get; set; }
        /// <summary>The Id of the Enterprise App used for Single sign on.</summary>
        string LogzOrganizationPropertyEnterpriseAppId { get; set; }
        /// <summary>Id of the Logz organization.</summary>
        string LogzOrganizationPropertyId { get; set; }
        /// <summary>The login URL specific to this Logz Organization.</summary>
        string LogzOrganizationPropertySingleSignOnUrl { get; set; }
        /// <summary>
        /// Flag specifying the Marketplace Subscription Status of the resource. If payment is not made in time, the resource will
        /// go in Suspended state.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MarketplaceSubscriptionStatus? MarketplaceSubscriptionStatus { get; set; }
        /// <summary>Flag specifying if the resource monitoring is enabled or disabled.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.MonitoringStatus? MonitoringStatus { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IPlanData PlanData { get; set; }
        /// <summary>different billing cycles like MONTHLY/WEEKLY. this could be enum</summary>
        string PlanDataBillingCycle { get; set; }
        /// <summary>date when plan was applied</summary>
        global::System.DateTime? PlanDataEffectiveDate { get; set; }
        /// <summary>plan id as published by Logz</summary>
        string PlanDataPlanDetail { get; set; }
        /// <summary>different usage type like PAYG/COMMITTED. this could be enum</summary>
        string PlanDataUsageType { get; set; }
        /// <summary>Flag specifying if the resource provisioning state as tracked by ARM.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Logz.Support.ProvisioningState? ProvisioningState { get; set; }

        Microsoft.Azure.PowerShell.Cmdlets.Logz.Models.Api20201001Preview.IUserInfo UserInfo { get; set; }
        /// <summary>Email of the user used by Logz for contacting them if needed</summary>
        string UserInfoEmailAddress { get; set; }
        /// <summary>First Name of the user</summary>
        string UserInfoFirstName { get; set; }
        /// <summary>Last Name of the user</summary>
        string UserInfoLastName { get; set; }
        /// <summary>Phone number of the user used by Logz for contacting them if needed</summary>
        string UserInfoPhoneNumber { get; set; }

    }
}