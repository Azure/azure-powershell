// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Extensions;

    /// <summary>
    /// Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM.
    /// </summary>
    public partial class AgentConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfiguration,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal
    {

        /// <summary>Backing field for <see cref="ConfigMode" /> property.</summary>
        private string _configMode;

        /// <summary>
        /// Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and
        /// guest configuration, maintained by Microsoft.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string ConfigMode { get => this._configMode; }

        /// <summary>Backing field for <see cref="ExtensionsAllowList" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> _extensionsAllowList;

        /// <summary>Array of extensions that are allowed to be installed or updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> ExtensionsAllowList { get => this._extensionsAllowList; }

        /// <summary>Backing field for <see cref="ExtensionsBlockList" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> _extensionsBlockList;

        /// <summary>Array of extensions that are blocked (cannot be installed or updated)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> ExtensionsBlockList { get => this._extensionsBlockList; }

        /// <summary>Backing field for <see cref="ExtensionsEnabled" /> property.</summary>
        private string _extensionsEnabled;

        /// <summary>Specifies whether the extension service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string ExtensionsEnabled { get => this._extensionsEnabled; }

        /// <summary>Backing field for <see cref="GuestConfigurationEnabled" /> property.</summary>
        private string _guestConfigurationEnabled;

        /// <summary>Specified whether the guest configuration service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string GuestConfigurationEnabled { get => this._guestConfigurationEnabled; }

        /// <summary>Backing field for <see cref="IncomingConnectionsPort" /> property.</summary>
        private System.Collections.Generic.List<string> _incomingConnectionsPort;

        /// <summary>Specifies the list of ports that the agent will be able to listen on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> IncomingConnectionsPort { get => this._incomingConnectionsPort; }

        /// <summary>Internal Acessors for ConfigMode</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.ConfigMode { get => this._configMode; set { {_configMode = value;} } }

        /// <summary>Internal Acessors for ExtensionsAllowList</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.ExtensionsAllowList { get => this._extensionsAllowList; set { {_extensionsAllowList = value;} } }

        /// <summary>Internal Acessors for ExtensionsBlockList</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.ExtensionsBlockList { get => this._extensionsBlockList; set { {_extensionsBlockList = value;} } }

        /// <summary>Internal Acessors for ExtensionsEnabled</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.ExtensionsEnabled { get => this._extensionsEnabled; set { {_extensionsEnabled = value;} } }

        /// <summary>Internal Acessors for GuestConfigurationEnabled</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.GuestConfigurationEnabled { get => this._guestConfigurationEnabled; set { {_guestConfigurationEnabled = value;} } }

        /// <summary>Internal Acessors for IncomingConnectionsPort</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.IncomingConnectionsPort { get => this._incomingConnectionsPort; set { {_incomingConnectionsPort = value;} } }

        /// <summary>Internal Acessors for ProxyBypass</summary>
        System.Collections.Generic.List<string> Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.ProxyBypass { get => this._proxyBypass; set { {_proxyBypass = value;} } }

        /// <summary>Internal Acessors for ProxyUrl</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IAgentConfigurationInternal.ProxyUrl { get => this._proxyUrl; set { {_proxyUrl = value;} } }

        /// <summary>Backing field for <see cref="ProxyBypass" /> property.</summary>
        private System.Collections.Generic.List<string> _proxyBypass;

        /// <summary>List of service names which should not use the specified proxy server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> ProxyBypass { get => this._proxyBypass; }

        /// <summary>Backing field for <see cref="ProxyUrl" /> property.</summary>
        private string _proxyUrl;

        /// <summary>Specifies the URL of the proxy to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string ProxyUrl { get => this._proxyUrl; }

        /// <summary>Creates an new <see cref="AgentConfiguration" /> instance.</summary>
        public AgentConfiguration()
        {

        }
    }
    /// Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM.
    public partial interface IAgentConfiguration :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and
        /// guest configuration, maintained by Microsoft.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and guest configuration, maintained by Microsoft.",
        SerializedName = @"configMode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("full", "monitor")]
        string ConfigMode { get;  }
        /// <summary>Array of extensions that are allowed to be installed or updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Array of extensions that are allowed to be installed or updated.",
        SerializedName = @"extensionsAllowList",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> ExtensionsAllowList { get;  }
        /// <summary>Array of extensions that are blocked (cannot be installed or updated)</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Array of extensions that are blocked (cannot be installed or updated)",
        SerializedName = @"extensionsBlockList",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> ExtensionsBlockList { get;  }
        /// <summary>Specifies whether the extension service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Specifies whether the extension service is enabled or disabled.",
        SerializedName = @"extensionsEnabled",
        PossibleTypes = new [] { typeof(string) })]
        string ExtensionsEnabled { get;  }
        /// <summary>Specified whether the guest configuration service is enabled or disabled.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Specified whether the guest configuration service is enabled or disabled.",
        SerializedName = @"guestConfigurationEnabled",
        PossibleTypes = new [] { typeof(string) })]
        string GuestConfigurationEnabled { get;  }
        /// <summary>Specifies the list of ports that the agent will be able to listen on.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Specifies the list of ports that the agent will be able to listen on.",
        SerializedName = @"incomingConnectionsPorts",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> IncomingConnectionsPort { get;  }
        /// <summary>List of service names which should not use the specified proxy server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"List of service names which should not use the specified proxy server.",
        SerializedName = @"proxyBypass",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ProxyBypass { get;  }
        /// <summary>Specifies the URL of the proxy to be used.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Specifies the URL of the proxy to be used.",
        SerializedName = @"proxyUrl",
        PossibleTypes = new [] { typeof(string) })]
        string ProxyUrl { get;  }

    }
    /// Configurable properties that the user can set locally via the azcmagent config command, or remotely via ARM.
    internal partial interface IAgentConfigurationInternal

    {
        /// <summary>
        /// Name of configuration mode to use. Modes are pre-defined configurations of security controls, extension allowlists and
        /// guest configuration, maintained by Microsoft.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("full", "monitor")]
        string ConfigMode { get; set; }
        /// <summary>Array of extensions that are allowed to be installed or updated.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> ExtensionsAllowList { get; set; }
        /// <summary>Array of extensions that are blocked (cannot be installed or updated)</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IConfigurationExtension> ExtensionsBlockList { get; set; }
        /// <summary>Specifies whether the extension service is enabled or disabled.</summary>
        string ExtensionsEnabled { get; set; }
        /// <summary>Specified whether the guest configuration service is enabled or disabled.</summary>
        string GuestConfigurationEnabled { get; set; }
        /// <summary>Specifies the list of ports that the agent will be able to listen on.</summary>
        System.Collections.Generic.List<string> IncomingConnectionsPort { get; set; }
        /// <summary>List of service names which should not use the specified proxy server.</summary>
        System.Collections.Generic.List<string> ProxyBypass { get; set; }
        /// <summary>Specifies the URL of the proxy to be used.</summary>
        string ProxyUrl { get; set; }

    }
}