// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Extensions;

    /// <summary>Input for InstallPatches as directly received by the API</summary>
    public partial class MachineInstallPatchesParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IMachineInstallPatchesParameters,
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IMachineInstallPatchesParametersInternal
    {

        /// <summary>Backing field for <see cref="LinuxParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParameters _linuxParameter;

        /// <summary>Input for InstallPatches on a Linux VM, as directly received by the API</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParameters LinuxParameter { get => (this._linuxParameter = this._linuxParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LinuxParameters()); set => this._linuxParameter = value; }

        /// <summary>The update classifications to select when installing patches for Linux.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> LinuxParameterClassificationsToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParametersInternal)LinuxParameter).ClassificationsToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParametersInternal)LinuxParameter).ClassificationsToInclude = value ?? null /* arrayOf */; }

        /// <summary>packages to exclude in the patch operation. Format: packageName_packageVersion</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> LinuxParameterPackageNameMasksToExclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParametersInternal)LinuxParameter).PackageNameMasksToExclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParametersInternal)LinuxParameter).PackageNameMasksToExclude = value ?? null /* arrayOf */; }

        /// <summary>packages to include in the patch operation. Format: packageName_packageVersion</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> LinuxParameterPackageNameMasksToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParametersInternal)LinuxParameter).PackageNameMasksToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParametersInternal)LinuxParameter).PackageNameMasksToInclude = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="MaximumDuration" /> property.</summary>
        private string _maximumDuration;

        /// <summary>
        /// Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such
        /// as PT4H (4 hours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string MaximumDuration { get => this._maximumDuration; set => this._maximumDuration = value; }

        /// <summary>Internal Acessors for LinuxParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParameters Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IMachineInstallPatchesParametersInternal.LinuxParameter { get => (this._linuxParameter = this._linuxParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.LinuxParameters()); set { {_linuxParameter = value;} } }

        /// <summary>Internal Acessors for WindowsParameter</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParameters Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IMachineInstallPatchesParametersInternal.WindowsParameter { get => (this._windowsParameter = this._windowsParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.WindowsParameters()); set { {_windowsParameter = value;} } }

        /// <summary>Backing field for <see cref="RebootSetting" /> property.</summary>
        private string _rebootSetting;

        /// <summary>
        /// Defines when it is acceptable to reboot a VM during a software update operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        public string RebootSetting { get => this._rebootSetting; set => this._rebootSetting = value; }

        /// <summary>The update classifications to select when installing patches for Windows.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> WindowParameterClassificationsToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).ClassificationsToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).ClassificationsToInclude = value ?? null /* arrayOf */; }

        /// <summary>
        /// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public bool? WindowParameterExcludeKbsRequiringReboot { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).ExcludeKbsRequiringReboot; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).ExcludeKbsRequiringReboot = value ?? default(bool); }

        /// <summary>Kbs to exclude in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> WindowParameterKbNumbersToExclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).KbNumbersToExclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).KbNumbersToExclude = value ?? null /* arrayOf */; }

        /// <summary>Kbs to include in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> WindowParameterKbNumbersToInclude { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).KbNumbersToInclude; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).KbNumbersToInclude = value ?? null /* arrayOf */; }

        /// <summary>
        /// This is used to install patches that were published on or before this given max published date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Inlined)]
        public global::System.DateTime? WindowParameterMaxPatchPublishDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).MaxPatchPublishDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParametersInternal)WindowsParameter).MaxPatchPublishDate = value ?? default(global::System.DateTime); }

        /// <summary>Backing field for <see cref="WindowsParameter" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParameters _windowsParameter;

        /// <summary>Input for InstallPatches on a Windows VM, as directly received by the API</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Origin(Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParameters WindowsParameter { get => (this._windowsParameter = this._windowsParameter ?? new Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.WindowsParameters()); set => this._windowsParameter = value; }

        /// <summary>Creates an new <see cref="MachineInstallPatchesParameters" /> instance.</summary>
        public MachineInstallPatchesParameters()
        {

        }
    }
    /// Input for InstallPatches as directly received by the API
    public partial interface IMachineInstallPatchesParameters :
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.IJsonSerializable
    {
        /// <summary>The update classifications to select when installing patches for Linux.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The update classifications to select when installing patches for Linux.",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Critical", "Security", "Other")]
        System.Collections.Generic.List<string> LinuxParameterClassificationsToInclude { get; set; }
        /// <summary>packages to exclude in the patch operation. Format: packageName_packageVersion</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"packages to exclude in the patch operation. Format: packageName_packageVersion",
        SerializedName = @"packageNameMasksToExclude",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> LinuxParameterPackageNameMasksToExclude { get; set; }
        /// <summary>packages to include in the patch operation. Format: packageName_packageVersion</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"packages to include in the patch operation. Format: packageName_packageVersion",
        SerializedName = @"packageNameMasksToInclude",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> LinuxParameterPackageNameMasksToInclude { get; set; }
        /// <summary>
        /// Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such
        /// as PT4H (4 hours)
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such as PT4H (4 hours)",
        SerializedName = @"maximumDuration",
        PossibleTypes = new [] { typeof(string) })]
        string MaximumDuration { get; set; }
        /// <summary>
        /// Defines when it is acceptable to reboot a VM during a software update operation.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines when it is acceptable to reboot a VM during a software update operation.",
        SerializedName = @"rebootSetting",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("IfRequired", "Never", "Always")]
        string RebootSetting { get; set; }
        /// <summary>The update classifications to select when installing patches for Windows.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The update classifications to select when installing patches for Windows.",
        SerializedName = @"classificationsToInclude",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Critical", "Security", "UpdateRollUp", "FeaturePack", "ServicePack", "Definition", "Tools", "Updates")]
        System.Collections.Generic.List<string> WindowParameterClassificationsToInclude { get; set; }
        /// <summary>
        /// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.",
        SerializedName = @"excludeKbsRequiringReboot",
        PossibleTypes = new [] { typeof(bool) })]
        bool? WindowParameterExcludeKbsRequiringReboot { get; set; }
        /// <summary>Kbs to exclude in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kbs to exclude in the patch operation",
        SerializedName = @"kbNumbersToExclude",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> WindowParameterKbNumbersToExclude { get; set; }
        /// <summary>Kbs to include in the patch operation</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kbs to include in the patch operation",
        SerializedName = @"kbNumbersToInclude",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> WindowParameterKbNumbersToInclude { get; set; }
        /// <summary>
        /// This is used to install patches that were published on or before this given max published date.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"This is used to install patches that were published on or before this given max published date.",
        SerializedName = @"maxPatchPublishDate",
        PossibleTypes = new [] { typeof(global::System.DateTime) })]
        global::System.DateTime? WindowParameterMaxPatchPublishDate { get; set; }

    }
    /// Input for InstallPatches as directly received by the API
    internal partial interface IMachineInstallPatchesParametersInternal

    {
        /// <summary>Input for InstallPatches on a Linux VM, as directly received by the API</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.ILinuxParameters LinuxParameter { get; set; }
        /// <summary>The update classifications to select when installing patches for Linux.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Critical", "Security", "Other")]
        System.Collections.Generic.List<string> LinuxParameterClassificationsToInclude { get; set; }
        /// <summary>packages to exclude in the patch operation. Format: packageName_packageVersion</summary>
        System.Collections.Generic.List<string> LinuxParameterPackageNameMasksToExclude { get; set; }
        /// <summary>packages to include in the patch operation. Format: packageName_packageVersion</summary>
        System.Collections.Generic.List<string> LinuxParameterPackageNameMasksToInclude { get; set; }
        /// <summary>
        /// Specifies the maximum amount of time that the operation will run. It must be an ISO 8601-compliant duration string such
        /// as PT4H (4 hours)
        /// </summary>
        string MaximumDuration { get; set; }
        /// <summary>
        /// Defines when it is acceptable to reboot a VM during a software update operation.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("IfRequired", "Never", "Always")]
        string RebootSetting { get; set; }
        /// <summary>The update classifications to select when installing patches for Windows.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.PSArgumentCompleterAttribute("Critical", "Security", "UpdateRollUp", "FeaturePack", "ServicePack", "Definition", "Tools", "Updates")]
        System.Collections.Generic.List<string> WindowParameterClassificationsToInclude { get; set; }
        /// <summary>
        /// Filters out Kbs that don't have an InstallationRebootBehavior of 'NeverReboots' when this is set to true.
        /// </summary>
        bool? WindowParameterExcludeKbsRequiringReboot { get; set; }
        /// <summary>Kbs to exclude in the patch operation</summary>
        System.Collections.Generic.List<string> WindowParameterKbNumbersToExclude { get; set; }
        /// <summary>Kbs to include in the patch operation</summary>
        System.Collections.Generic.List<string> WindowParameterKbNumbersToInclude { get; set; }
        /// <summary>
        /// This is used to install patches that were published on or before this given max published date.
        /// </summary>
        global::System.DateTime? WindowParameterMaxPatchPublishDate { get; set; }
        /// <summary>Input for InstallPatches on a Windows VM, as directly received by the API</summary>
        Microsoft.Azure.PowerShell.Cmdlets.ConnectedMachine.Models.IWindowsParameters WindowsParameter { get; set; }

    }
}