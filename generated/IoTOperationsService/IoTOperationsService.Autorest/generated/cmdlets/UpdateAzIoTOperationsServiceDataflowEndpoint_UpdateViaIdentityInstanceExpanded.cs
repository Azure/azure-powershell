// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Cmdlets
{
    using static Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Extensions;
    using Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.PowerShell;
    using Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Cmdlets;
    using System;

    /// <summary>update a DataflowEndpointResource</summary>
    /// <remarks>
    /// [OpenAPI] Get=>GET:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowEndpoints/{dataflowEndpointName}"
    /// [OpenAPI] CreateOrUpdate=>PUT:"/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.IoTOperations/instances/{instanceName}/dataflowEndpoints/{dataflowEndpointName}"
    /// </remarks>
    [global::System.Management.Automation.Cmdlet(global::System.Management.Automation.VerbsData.Update, @"AzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded", SupportsShouldProcess = true)]
    [global::System.Management.Automation.OutputType(typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource))]
    [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Description(@"update a DataflowEndpointResource")]
    [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Generated]
    public partial class UpdateAzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded : global::System.Management.Automation.PSCmdlet,
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener,
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IContext
    {
        /// <summary>A unique id generatd for the this cmdlet when it is instantiated.</summary>
        private string __correlationId = System.Guid.NewGuid().ToString();

        /// <summary>A copy of the Invocation Info (necessary to allow asJob to clone this cmdlet)</summary>
        private global::System.Management.Automation.InvocationInfo __invocationInfo;

        /// <summary>A unique id generatd for the this cmdlet when ProcessRecord() is called.</summary>
        private string __processRecordId;

        /// <summary>
        /// The <see cref="global::System.Threading.CancellationTokenSource" /> for this operation.
        /// </summary>
        private global::System.Threading.CancellationTokenSource _cancellationTokenSource = new global::System.Threading.CancellationTokenSource();

        /// <summary>A dictionary to carry over additional data for pipeline.</summary>
        private global::System.Collections.Generic.Dictionary<global::System.String,global::System.Object> _extensibleParameters = new System.Collections.Generic.Dictionary<string, object>();

        /// <summary>A buffer to record first returned object in response.</summary>
        private object _firstResponse = null;

        /// <summary>Instance dataflowEndpoint resource</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource _resourceBody = new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.DataflowEndpointResource();

        /// <summary>
        /// A flag to tell whether it is the first returned object in a call. Zero means no response yet. One means 1 returned object.
        /// Two means multiple returned objects in response.
        /// </summary>
        private int _responseSize = 0;

        /// <summary>Token secret name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Token secret name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Token secret name.",
        SerializedName = @"secretRef",
        PossibleTypes = new [] { typeof(string) })]
        public string AccessTokenSettingSecretRef { get => _resourceBody.AccessTokenSettingSecretRef ?? null; set => _resourceBody.AccessTokenSettingSecretRef = value; }

        /// <summary>when specified, runs this cmdlet as a PowerShell job</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command as a job")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter AsJob { get; set; }

        /// <summary>Wait for .NET debugger to attach</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Wait for .NET debugger to attach")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter Break { get; set; }

        /// <summary>Accessor for cancellationTokenSource.</summary>
        public global::System.Threading.CancellationTokenSource CancellationTokenSource { get => _cancellationTokenSource ; set { _cancellationTokenSource = value; } }

        /// <summary>The reference to the client API class.</summary>
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.MicrosoftIoTOperationsManagementService Client => Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.ClientAPI;

        /// <summary>Database name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Database name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Database name.",
        SerializedName = @"database",
        PossibleTypes = new [] { typeof(string) })]
        public string DataExplorerSettingDatabase { get => _resourceBody.DataExplorerSettingDatabase ?? null; set => _resourceBody.DataExplorerSettingDatabase = value; }

        /// <summary>
        /// Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net .
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net .")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Host of the Azure Data Explorer in the form of <cluster>.<region>.kusto.windows.net .",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        public string DataExplorerSettingHost { get => _resourceBody.DataExplorerSettingHost ?? null; set => _resourceBody.DataExplorerSettingHost = value; }

        /// <summary>Mode of Authentication.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Mode of Authentication.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mode of Authentication.",
        SerializedName = @"method",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("SystemAssignedManagedIdentity", "UserAssignedManagedIdentity")]
        public string DataExplorerSettingsAuthenticationMethod { get => _resourceBody.DataExplorerSettingsAuthenticationMethod ?? null; set => _resourceBody.DataExplorerSettingsAuthenticationMethod = value; }

        /// <summary>
        /// Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.",
        SerializedName = @"audience",
        PossibleTypes = new [] { typeof(string) })]
        public string DataExplorerSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience { get => _resourceBody.DataExplorerSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience ?? null; set => _resourceBody.DataExplorerSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience = value; }

        /// <summary>Client ID for the user-assigned managed identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Client ID for the user-assigned managed identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client ID for the user-assigned managed identity.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        public string DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId { get => _resourceBody.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId ?? null; set => _resourceBody.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId = value; }

        /// <summary>
        /// Resource identifier (application ID URI) of the resource, affixed with the .default suffix.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource identifier (application ID URI) of the resource, affixed with the .default suffix.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource identifier (application ID URI) of the resource, affixed with the .default suffix.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        public string DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsScope { get => _resourceBody.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsScope ?? null; set => _resourceBody.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsScope = value; }

        /// <summary>Tenant ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tenant ID.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tenant ID.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId { get => _resourceBody.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId ?? null; set => _resourceBody.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId = value; }

        /// <summary>Batching latency in seconds.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Batching latency in seconds.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Batching latency in seconds.",
        SerializedName = @"latencySeconds",
        PossibleTypes = new [] { typeof(int) })]
        public int DataExplorerSettingsBatchingLatencySecond { get => _resourceBody.DataExplorerSettingsBatchingLatencySecond ?? default(int); set => _resourceBody.DataExplorerSettingsBatchingLatencySecond = value; }

        /// <summary>Maximum number of messages in a batch.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum number of messages in a batch.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of messages in a batch.",
        SerializedName = @"maxMessages",
        PossibleTypes = new [] { typeof(int) })]
        public int DataExplorerSettingsBatchingMaxMessage { get => _resourceBody.DataExplorerSettingsBatchingMaxMessage ?? default(int); set => _resourceBody.DataExplorerSettingsBatchingMaxMessage = value; }

        /// <summary>Host of the Azure Data Lake in the form of <account>.blob.core.windows.net .</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Host of the Azure Data Lake in the form of <account>.blob.core.windows.net .")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Host of the Azure Data Lake in the form of <account>.blob.core.windows.net .",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        public string DataLakeStorageSettingHost { get => _resourceBody.DataLakeStorageSettingHost ?? null; set => _resourceBody.DataLakeStorageSettingHost = value; }

        /// <summary>Mode of Authentication.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Mode of Authentication.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mode of Authentication.",
        SerializedName = @"method",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("SystemAssignedManagedIdentity", "UserAssignedManagedIdentity", "AccessToken")]
        public string DataLakeStorageSettingsAuthenticationMethod { get => _resourceBody.DataLakeStorageSettingsAuthenticationMethod ?? null; set => _resourceBody.DataLakeStorageSettingsAuthenticationMethod = value; }

        /// <summary>
        /// Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.",
        SerializedName = @"audience",
        PossibleTypes = new [] { typeof(string) })]
        public string DataLakeStorageSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience { get => _resourceBody.DataLakeStorageSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience ?? null; set => _resourceBody.DataLakeStorageSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience = value; }

        /// <summary>Client ID for the user-assigned managed identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Client ID for the user-assigned managed identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client ID for the user-assigned managed identity.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        public string DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId { get => _resourceBody.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId ?? null; set => _resourceBody.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId = value; }

        /// <summary>
        /// Resource identifier (application ID URI) of the resource, affixed with the .default suffix.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource identifier (application ID URI) of the resource, affixed with the .default suffix.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource identifier (application ID URI) of the resource, affixed with the .default suffix.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        public string DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsScope { get => _resourceBody.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsScope ?? null; set => _resourceBody.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsScope = value; }

        /// <summary>Tenant ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tenant ID.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tenant ID.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId { get => _resourceBody.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId ?? null; set => _resourceBody.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId = value; }

        /// <summary>Batching latency in seconds.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Batching latency in seconds.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Batching latency in seconds.",
        SerializedName = @"latencySeconds",
        PossibleTypes = new [] { typeof(int) })]
        public int DataLakeStorageSettingsBatchingLatencySecond { get => _resourceBody.DataLakeStorageSettingsBatchingLatencySecond ?? default(int); set => _resourceBody.DataLakeStorageSettingsBatchingLatencySecond = value; }

        /// <summary>Maximum number of messages in a batch.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum number of messages in a batch.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of messages in a batch.",
        SerializedName = @"maxMessages",
        PossibleTypes = new [] { typeof(int) })]
        public int DataLakeStorageSettingsBatchingMaxMessage { get => _resourceBody.DataLakeStorageSettingsBatchingMaxMessage ?? default(int); set => _resourceBody.DataLakeStorageSettingsBatchingMaxMessage = value; }

        /// <summary>
        /// The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet
        /// against a different subscription
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "The DefaultProfile parameter is not functional. Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::System.Management.Automation.Alias("AzureRMContext", "AzureCredential")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Azure)]
        public global::System.Management.Automation.PSObject DefaultProfile { get; set; }

        /// <summary>Endpoint Type.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Endpoint Type.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Endpoint Type.",
        SerializedName = @"endpointType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("DataExplorer", "DataLakeStorage", "FabricOneLake", "Kafka", "LocalStorage", "Mqtt")]
        public string EndpointType { get => _resourceBody.EndpointType ?? null; set => _resourceBody.EndpointType = value; }

        /// <summary>Accessor for extensibleParameters.</summary>
        public global::System.Collections.Generic.IDictionary<global::System.String,global::System.Object> ExtensibleParameters { get => _extensibleParameters ; }

        /// <summary>
        /// Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Host of the Microsoft Fabric in the form of https://<host>.fabric.microsoft.com.",
        SerializedName = @"host",
        PossibleTypes = new [] { typeof(string) })]
        public string FabricOneLakeSettingHost { get => _resourceBody.FabricOneLakeSettingHost ?? null; set => _resourceBody.FabricOneLakeSettingHost = value; }

        /// <summary>Type of location of the data in the workspace. Can be either tables or files.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Type of location of the data in the workspace. Can be either tables or files.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Type of location of the data in the workspace. Can be either tables or files.",
        SerializedName = @"oneLakePathType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Files", "Tables")]
        public string FabricOneLakeSettingOneLakePathType { get => _resourceBody.FabricOneLakeSettingOneLakePathType ?? null; set => _resourceBody.FabricOneLakeSettingOneLakePathType = value; }

        /// <summary>Mode of Authentication.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Mode of Authentication.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Mode of Authentication.",
        SerializedName = @"method",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("SystemAssignedManagedIdentity", "UserAssignedManagedIdentity")]
        public string FabricOneLakeSettingsAuthenticationMethod { get => _resourceBody.FabricOneLakeSettingsAuthenticationMethod ?? null; set => _resourceBody.FabricOneLakeSettingsAuthenticationMethod = value; }

        /// <summary>
        /// Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Audience of the service to authenticate against. Optional; defaults to the audience for Service host configuration.",
        SerializedName = @"audience",
        PossibleTypes = new [] { typeof(string) })]
        public string FabricOneLakeSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience { get => _resourceBody.FabricOneLakeSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience ?? null; set => _resourceBody.FabricOneLakeSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience = value; }

        /// <summary>Client ID for the user-assigned managed identity.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Client ID for the user-assigned managed identity.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Client ID for the user-assigned managed identity.",
        SerializedName = @"clientId",
        PossibleTypes = new [] { typeof(string) })]
        public string FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId { get => _resourceBody.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId ?? null; set => _resourceBody.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId = value; }

        /// <summary>
        /// Resource identifier (application ID URI) of the resource, affixed with the .default suffix.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Resource identifier (application ID URI) of the resource, affixed with the .default suffix.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource identifier (application ID URI) of the resource, affixed with the .default suffix.",
        SerializedName = @"scope",
        PossibleTypes = new [] { typeof(string) })]
        public string FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsScope { get => _resourceBody.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsScope ?? null; set => _resourceBody.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsScope = value; }

        /// <summary>Tenant ID.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Tenant ID.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Tenant ID.",
        SerializedName = @"tenantId",
        PossibleTypes = new [] { typeof(string) })]
        public string FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId { get => _resourceBody.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId ?? null; set => _resourceBody.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId = value; }

        /// <summary>Batching latency in seconds.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Batching latency in seconds.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Batching latency in seconds.",
        SerializedName = @"latencySeconds",
        PossibleTypes = new [] { typeof(int) })]
        public int FabricOneLakeSettingsBatchingLatencySecond { get => _resourceBody.FabricOneLakeSettingsBatchingLatencySecond ?? default(int); set => _resourceBody.FabricOneLakeSettingsBatchingLatencySecond = value; }

        /// <summary>Maximum number of messages in a batch.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Maximum number of messages in a batch.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Maximum number of messages in a batch.",
        SerializedName = @"maxMessages",
        PossibleTypes = new [] { typeof(int) })]
        public int FabricOneLakeSettingsBatchingMaxMessage { get => _resourceBody.FabricOneLakeSettingsBatchingMaxMessage ?? default(int); set => _resourceBody.FabricOneLakeSettingsBatchingMaxMessage = value; }

        /// <summary>SendAsync Pipeline Steps to be appended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be appended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.SendAsyncStep[] HttpPipelineAppend { get; set; }

        /// <summary>SendAsync Pipeline Steps to be prepended to the front of the pipeline</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "SendAsync Pipeline Steps to be prepended to the front of the pipeline")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.SendAsyncStep[] HttpPipelinePrepend { get; set; }

        /// <summary>Backing field for <see cref="InstanceInputObject" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IIoTOperationsServiceIdentity _instanceInputObject;

        /// <summary>Identity Parameter</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Identity Parameter", ValueFromPipeline = true)]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Path)]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IIoTOperationsServiceIdentity InstanceInputObject { get => this._instanceInputObject; set => this._instanceInputObject = value; }

        /// <summary>Accessor for our copy of the InvocationInfo.</summary>
        public global::System.Management.Automation.InvocationInfo InvocationInformation { get => __invocationInfo = __invocationInfo ?? this.MyInvocation ; set { __invocationInfo = value; } }

        /// <summary>Kafka endpoint.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Kafka endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Kafka endpoint.",
        SerializedName = @"kafkaSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointKafka) })]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointKafka KafkaSetting { get => _resourceBody.KafkaSetting ?? null /* object */; set => _resourceBody.KafkaSetting = value; }

        /// <summary>Persistent volume claim name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Persistent volume claim name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Persistent volume claim name.",
        SerializedName = @"persistentVolumeClaimRef",
        PossibleTypes = new [] { typeof(string) })]
        public string LocalStorageSettingPersistentVolumeClaimRef { get => _resourceBody.LocalStorageSettingPersistentVolumeClaimRef ?? null; set => _resourceBody.LocalStorageSettingPersistentVolumeClaimRef = value; }

        /// <summary>
        /// <see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener" /> cancellation delegate. Stops the cmdlet when called.
        /// </summary>
        global::System.Action Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener.Cancel => _cancellationTokenSource.Cancel;

        /// <summary><see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener" /> cancellation token.</summary>
        global::System.Threading.CancellationToken Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener.Token => _cancellationTokenSource.Token;

        /// <summary>Broker endpoint.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Broker endpoint.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Broker endpoint.",
        SerializedName = @"mqttSettings",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointMqtt) })]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointMqtt MqttSetting { get => _resourceBody.MqttSetting ?? null /* object */; set => _resourceBody.MqttSetting = value; }

        /// <summary>Backing field for <see cref="Name" /> property.</summary>
        private string _name;

        /// <summary>Name of Instance dataflowEndpoint resource</summary>
        [global::System.Management.Automation.Parameter(Mandatory = true, HelpMessage = "Name of Instance dataflowEndpoint resource")]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Description = @"Name of Instance dataflowEndpoint resource",
        SerializedName = @"dataflowEndpointName",
        PossibleTypes = new [] { typeof(string) })]
        [global::System.Management.Automation.Alias("DataflowEndpointName")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Path)]
        public string Name { get => this._name; set => this._name = value; }

        /// <summary>Lakehouse name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Lakehouse name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Lakehouse name.",
        SerializedName = @"lakehouseName",
        PossibleTypes = new [] { typeof(string) })]
        public string NameLakehouseName { get => _resourceBody.NameLakehouseName ?? null; set => _resourceBody.NameLakehouseName = value; }

        /// <summary>Workspace name.</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Workspace name.")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Body)]
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Workspace name.",
        SerializedName = @"workspaceName",
        PossibleTypes = new [] { typeof(string) })]
        public string NameWorkspaceName { get => _resourceBody.NameWorkspaceName ?? null; set => _resourceBody.NameWorkspaceName = value; }

        /// <summary>
        /// when specified, will make the remote call, and return an AsyncOperationResponse, letting the remote operation continue
        /// asynchronously.
        /// </summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, HelpMessage = "Run the command asynchronously")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter NoWait { get; set; }

        /// <summary>
        /// The instance of the <see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.HttpPipeline" /> that the remote call will use.
        /// </summary>
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.HttpPipeline Pipeline { get; set; }

        /// <summary>The URI for the proxy server to use</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "The URI for the proxy server to use")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public global::System.Uri Proxy { get; set; }

        /// <summary>Credentials for a proxy server to use for the remote call</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Credentials for a proxy server to use for the remote call")]
        [global::System.Management.Automation.ValidateNotNull]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public global::System.Management.Automation.PSCredential ProxyCredential { get; set; }

        /// <summary>Use the default credentials for the proxy</summary>
        [global::System.Management.Automation.Parameter(Mandatory = false, DontShow = true, HelpMessage = "Use the default credentials for the proxy")]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Category(global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.ParameterCategory.Runtime)]
        public global::System.Management.Automation.SwitchParameter ProxyUseDefaultCredentials { get; set; }

        /// <summary>
        /// <c>overrideOnDefault</c> will be called before the regular onDefault has been processed, allowing customization of what
        /// happens on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onDefault method should be processed, or if the method should
        /// return immediately (set to true to skip further processing )</param>

        partial void overrideOnDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// <c>overrideOnOk</c> will be called before the regular onOk has been processed, allowing customization of what happens
        /// on that response. Implement this method in a partial class to enable this behavior
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource">Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource</see>
        /// from the remote call</param>
        /// <param name="returnNow">/// Determines if the rest of the onOk method should be processed, or if the method should return
        /// immediately (set to true to skip further processing )</param>

        partial void overrideOnOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource> response, ref global::System.Threading.Tasks.Task<bool> returnNow);

        /// <summary>
        /// (overrides the default BeginProcessing method in global::System.Management.Automation.PSCmdlet)
        /// </summary>
        protected override void BeginProcessing()
        {
            var telemetryId = Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.GetTelemetryId.Invoke();
            if (telemetryId != "" && telemetryId != "internal")
            {
                __correlationId = telemetryId;
            }
            Module.Instance.SetProxyConfiguration(Proxy, ProxyCredential, ProxyUseDefaultCredentials);
            if (Break)
            {
                Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.AttachDebugger.Break();
            }
            ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletBeginProcessing).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
        }

        /// <summary>Creates a duplicate instance of this cmdlet (via JSON serialization).</summary>
        /// <returns>
        /// a duplicate instance of UpdateAzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded
        /// </returns>
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Cmdlets.UpdateAzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded Clone()
        {
            var clone = new UpdateAzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded();
            clone.__correlationId = this.__correlationId;
            clone.__processRecordId = this.__processRecordId;
            clone.DefaultProfile = this.DefaultProfile;
            clone.InvocationInformation = this.InvocationInformation;
            clone.Proxy = this.Proxy;
            clone.Pipeline = this.Pipeline;
            clone.AsJob = this.AsJob;
            clone.Break = this.Break;
            clone.ProxyCredential = this.ProxyCredential;
            clone.ProxyUseDefaultCredentials = this.ProxyUseDefaultCredentials;
            clone.HttpPipelinePrepend = this.HttpPipelinePrepend;
            clone.HttpPipelineAppend = this.HttpPipelineAppend;
            clone._resourceBody = this._resourceBody;
            clone.Name = this.Name;
            return clone;
        }

        /// <summary>Performs clean-up after the command execution</summary>
        protected override void EndProcessing()
        {
            if (1 ==_responseSize)
            {
                // Flush buffer
                WriteObject(_firstResponse);
            }
            var telemetryInfo = Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.GetTelemetryInfo?.Invoke(__correlationId);
            if (telemetryInfo != null)
            {
                telemetryInfo.TryGetValue("ShowSecretsWarning", out var showSecretsWarning);
                telemetryInfo.TryGetValue("SanitizedProperties", out var sanitizedProperties);
                telemetryInfo.TryGetValue("InvocationName", out var invocationName);
                if (showSecretsWarning == "true")
                {
                    if (string.IsNullOrEmpty(sanitizedProperties))
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing secrets. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                    else
                    {
                        WriteWarning($"The output of cmdlet {invocationName} may compromise security by showing the following secrets: {sanitizedProperties}. Learn more at https://go.microsoft.com/fwlink/?linkid=2258844");
                    }
                }
            }
        }

        /// <summary>Handles/Dispatches events during the call to the REST service.</summary>
        /// <param name="id">The message id</param>
        /// <param name="token">The message cancellation token. When this call is cancelled, this should be <c>true</c></param>
        /// <param name="messageData">Detailed message data for the message event.</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the message is completed.
        /// </returns>
         async global::System.Threading.Tasks.Task Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener.Signal(string id, global::System.Threading.CancellationToken token, global::System.Func<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.EventData> messageData)
        {
            using( NoSynchronizationContext )
            {
                if (token.IsCancellationRequested)
                {
                    return ;
                }

                switch ( id )
                {
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.Verbose:
                    {
                        WriteVerbose($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.Warning:
                    {
                        WriteWarning($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.Information:
                    {
                        // When an operation supports asjob, Information messages must go thru verbose.
                        WriteVerbose($"INFORMATION: {(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.Debug:
                    {
                        WriteDebug($"{(messageData().Message ?? global::System.String.Empty)}");
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.Error:
                    {
                        WriteError(new global::System.Management.Automation.ErrorRecord( new global::System.Exception(messageData().Message), string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null ) );
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.Progress:
                    {
                        var data = messageData();
                        int progress = (int)data.Value;
                        string activityMessage, statusDescription;
                        global::System.Management.Automation.ProgressRecordType recordType;
                        if (progress < 100)
                        {
                            activityMessage = "In progress";
                            statusDescription = "Checking operation status";
                            recordType = System.Management.Automation.ProgressRecordType.Processing;
                        }
                        else
                        {
                            activityMessage = "Completed";
                            statusDescription = "Completed";
                            recordType = System.Management.Automation.ProgressRecordType.Completed;
                        }
                        WriteProgress(new global::System.Management.Automation.ProgressRecord(1, activityMessage, statusDescription)
                        {
                            PercentComplete = progress,
                        RecordType = recordType
                        });
                        return ;
                    }
                    case Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.DelayBeforePolling:
                    {
                        var data = messageData();
                        if (true == MyInvocation?.BoundParameters?.ContainsKey("NoWait"))
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                var asyncOperation = response.GetFirstHeader(@"Azure-AsyncOperation");
                                var location = response.GetFirstHeader(@"Location");
                                var uri = global::System.String.IsNullOrEmpty(asyncOperation) ? global::System.String.IsNullOrEmpty(location) ? response.RequestMessage.RequestUri.AbsoluteUri : location : asyncOperation;
                                WriteObject(new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.PowerShell.AsyncOperationResponse { Target = uri });
                                // do nothing more.
                                data.Cancel();
                                return;
                            }
                        }
                        else
                        {
                            if (data.ResponseMessage is System.Net.Http.HttpResponseMessage response)
                            {
                                int delay = (int)(response.Headers.RetryAfter?.Delta?.TotalSeconds ?? 30);
                                WriteDebug($"Delaying {delay} seconds before polling.");
                                for (var now = 0; now < delay; ++now)
                                {
                                    WriteProgress(new global::System.Management.Automation.ProgressRecord(1, "In progress", "Checking operation status")
                                    {
                                        PercentComplete = now * 100 / delay
                                    });
                                    await global::System.Threading.Tasks.Task.Delay(1000, token);
                                }
                            }
                        }
                        break;
                    }
                }
                await Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.Signal(id, token, messageData, (i, t, m) => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(i, t, () => Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.EventDataConverter.ConvertFrom(m()) as Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.EventData), InvocationInformation, this.ParameterSetName, __correlationId, __processRecordId, null );
                if (token.IsCancellationRequested)
                {
                    return ;
                }
                WriteDebug($"{id}: {(messageData().Message ?? global::System.String.Empty)}");
            }
        }

        /// <summary>Performs execution of the command.</summary>
        protected override void ProcessRecord()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletProcessRecordStart).Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
            __processRecordId = System.Guid.NewGuid().ToString();
            try
            {
                // work
                if (ShouldProcess($"Call remote 'DataflowEndpointCreateOrUpdate' operation"))
                {
                    if (true == MyInvocation?.BoundParameters?.ContainsKey("AsJob"))
                    {
                        var instance = this.Clone();
                        var job = new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.PowerShell.AsyncJob(instance, this.MyInvocation.Line, this.MyInvocation.MyCommand.Name, this._cancellationTokenSource.Token, this._cancellationTokenSource.Cancel);
                        JobRepository.Add(job);
                        var task = instance.ProcessRecordAsync();
                        job.Monitor(task);
                        WriteObject(job);
                    }
                    else
                    {
                        using( var asyncCommandRuntime = new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.PowerShell.AsyncCommandRuntime(this, ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token) )
                        {
                            asyncCommandRuntime.Wait( ProcessRecordAsync(),((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token);
                        }
                    }
                }
            }
            catch (global::System.AggregateException aggregateException)
            {
                // unroll the inner exceptions to get the root cause
                foreach( var innerException in aggregateException.Flatten().InnerExceptions )
                {
                    ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletException, $"{innerException.GetType().Name} - {innerException.Message} : {innerException.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    // Write exception out to error channel.
                    WriteError( new global::System.Management.Automation.ErrorRecord(innerException,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
                }
            }
            catch (global::System.Exception exception) when ((exception as System.Management.Automation.PipelineStoppedException)== null || (exception as System.Management.Automation.PipelineStoppedException).InnerException != null)
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletException, $"{exception.GetType().Name} - {exception.Message} : {exception.StackTrace}").Wait(); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                // Write exception out to error channel.
                WriteError( new global::System.Management.Automation.ErrorRecord(exception,string.Empty, global::System.Management.Automation.ErrorCategory.NotSpecified, null) );
            }
            finally
            {
                ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletProcessRecordEnd).Wait();
            }
        }

        /// <summary>Performs execution of the command, working asynchronously if required.</summary>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        protected async global::System.Threading.Tasks.Task ProcessRecordAsync()
        {
            using( NoSynchronizationContext )
            {
                await ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletGetPipeline); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                Pipeline = Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.CreatePipeline(InvocationInformation, __correlationId, __processRecordId, this.ParameterSetName, this.ExtensibleParameters);
                if (null != HttpPipelinePrepend)
                {
                    Pipeline.Prepend((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelinePrepend) ?? HttpPipelinePrepend);
                }
                if (null != HttpPipelineAppend)
                {
                    Pipeline.Append((this.CommandRuntime as Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.PowerShell.IAsyncCommandRuntimeExtensions)?.Wrap(HttpPipelineAppend) ?? HttpPipelineAppend);
                }
                // get the client instance
                try
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletBeforeAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                    if (InstanceInputObject?.Id != null)
                    {
                        this.InstanceInputObject.Id += $"/dataflowEndpoints/{(global::System.Uri.EscapeDataString(this.Name.ToString()))}";
                        _resourceBody = await this.Client.DataflowEndpointGetViaIdentityWithResult(InstanceInputObject.Id, this, Pipeline);
                        this.Update_resourceBody();
                        await this.Client.DataflowEndpointCreateOrUpdateViaIdentity(InstanceInputObject.Id, _resourceBody, onOk, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.SerializationMode.IncludeUpdate);
                    }
                    else
                    {
                        // try to call with PATH parameters from Input Object
                        if (null == InstanceInputObject.SubscriptionId)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InstanceInputObject has null value for InstanceInputObject.SubscriptionId"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InstanceInputObject) );
                        }
                        if (null == InstanceInputObject.ResourceGroupName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InstanceInputObject has null value for InstanceInputObject.ResourceGroupName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InstanceInputObject) );
                        }
                        if (null == InstanceInputObject.InstanceName)
                        {
                            ThrowTerminatingError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception("InstanceInputObject has null value for InstanceInputObject.InstanceName"),string.Empty, global::System.Management.Automation.ErrorCategory.InvalidArgument, InstanceInputObject) );
                        }
                        _resourceBody = await this.Client.DataflowEndpointGetWithResult(InstanceInputObject.SubscriptionId ?? null, InstanceInputObject.ResourceGroupName ?? null, InstanceInputObject.InstanceName ?? null, Name, this, Pipeline);
                        this.Update_resourceBody();
                        await this.Client.DataflowEndpointCreateOrUpdate(InstanceInputObject.SubscriptionId ?? null, InstanceInputObject.ResourceGroupName ?? null, InstanceInputObject.InstanceName ?? null, Name, _resourceBody, onOk, onDefault, this, Pipeline, Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.SerializationMode.IncludeCreate|Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.SerializationMode.IncludeUpdate);
                    }
                    await ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletAfterAPICall); if( ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Token.IsCancellationRequested ) { return; }
                }
                catch (Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.UndeclaredResponseException urexception)
                {
                    WriteError(new global::System.Management.Automation.ErrorRecord(urexception, urexception.StatusCode.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new { Name=Name})
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(urexception.Message) { RecommendedAction = urexception.Action }
                    });
                }
                finally
                {
                    await ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Signal(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Events.CmdletProcessRecordAsyncEnd);
                }
            }
        }

        /// <summary>Interrupts currently running code within the command.</summary>
        protected override void StopProcessing()
        {
            ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IEventListener)this).Cancel();
            base.StopProcessing();
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UpdateAzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded"
        /// /> cmdlet class.
        /// </summary>
        public UpdateAzIoTOperationsServiceDataflowEndpoint_UpdateViaIdentityInstanceExpanded()
        {

        }

        private void Update_resourceBody()
        {
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("EndpointType")))
            {
                this.EndpointType = (string)(this.MyInvocation?.BoundParameters["EndpointType"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("KafkaSetting")))
            {
                this.KafkaSetting = (Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointKafka)(this.MyInvocation?.BoundParameters["KafkaSetting"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("MqttSetting")))
            {
                this.MqttSetting = (Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointMqtt)(this.MyInvocation?.BoundParameters["MqttSetting"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingDatabase")))
            {
                this.DataExplorerSettingDatabase = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingDatabase"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingHost")))
            {
                this.DataExplorerSettingHost = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingHost"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingHost")))
            {
                this.DataLakeStorageSettingHost = (string)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingHost"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingOneLakePathType")))
            {
                this.FabricOneLakeSettingOneLakePathType = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingOneLakePathType"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingHost")))
            {
                this.FabricOneLakeSettingHost = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingHost"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("LocalStorageSettingPersistentVolumeClaimRef")))
            {
                this.LocalStorageSettingPersistentVolumeClaimRef = (string)(this.MyInvocation?.BoundParameters["LocalStorageSettingPersistentVolumeClaimRef"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsAuthenticationMethod")))
            {
                this.DataExplorerSettingsAuthenticationMethod = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingsAuthenticationMethod"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsBatchingLatencySecond")))
            {
                this.DataExplorerSettingsBatchingLatencySecond = (int)(this.MyInvocation?.BoundParameters["DataExplorerSettingsBatchingLatencySecond"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsBatchingMaxMessage")))
            {
                this.DataExplorerSettingsBatchingMaxMessage = (int)(this.MyInvocation?.BoundParameters["DataExplorerSettingsBatchingMaxMessage"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsAuthenticationMethod")))
            {
                this.DataLakeStorageSettingsAuthenticationMethod = (string)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsAuthenticationMethod"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsBatchingLatencySecond")))
            {
                this.DataLakeStorageSettingsBatchingLatencySecond = (int)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsBatchingLatencySecond"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsBatchingMaxMessage")))
            {
                this.DataLakeStorageSettingsBatchingMaxMessage = (int)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsBatchingMaxMessage"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsAuthenticationMethod")))
            {
                this.FabricOneLakeSettingsAuthenticationMethod = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsAuthenticationMethod"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NameLakehouseName")))
            {
                this.NameLakehouseName = (string)(this.MyInvocation?.BoundParameters["NameLakehouseName"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("NameWorkspaceName")))
            {
                this.NameWorkspaceName = (string)(this.MyInvocation?.BoundParameters["NameWorkspaceName"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsBatchingLatencySecond")))
            {
                this.FabricOneLakeSettingsBatchingLatencySecond = (int)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsBatchingLatencySecond"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsBatchingMaxMessage")))
            {
                this.FabricOneLakeSettingsBatchingMaxMessage = (int)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsBatchingMaxMessage"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience")))
            {
                this.DataExplorerSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId")))
            {
                this.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsScope")))
            {
                this.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsScope = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsScope"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId")))
            {
                this.DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId = (string)(this.MyInvocation?.BoundParameters["DataExplorerSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("AccessTokenSettingSecretRef")))
            {
                this.AccessTokenSettingSecretRef = (string)(this.MyInvocation?.BoundParameters["AccessTokenSettingSecretRef"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience")))
            {
                this.DataLakeStorageSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience = (string)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId")))
            {
                this.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId = (string)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsScope")))
            {
                this.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsScope = (string)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsScope"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId")))
            {
                this.DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId = (string)(this.MyInvocation?.BoundParameters["DataLakeStorageSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience")))
            {
                this.FabricOneLakeSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsAuthenticationSystemAssignedManagedIdentitySettingsAudience"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId")))
            {
                this.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsClientId"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsScope")))
            {
                this.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsScope = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsScope"]);
            }
            if ((bool)(true == this.MyInvocation?.BoundParameters.ContainsKey("FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId")))
            {
                this.FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId = (string)(this.MyInvocation?.BoundParameters["FabricOneLakeSettingsAuthenticationUserAssignedManagedIdentitySettingsTenantId"]);
            }
        }

        /// <param name="sendToPipeline"></param>
        new protected void WriteObject(object sendToPipeline)
        {
            Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline);
        }

        /// <param name="sendToPipeline"></param>
        /// <param name="enumerateCollection"></param>
        new protected void WriteObject(object sendToPipeline, bool enumerateCollection)
        {
            Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Module.Instance.SanitizeOutput?.Invoke(sendToPipeline, __correlationId);
            base.WriteObject(sendToPipeline, enumerateCollection);
        }

        /// <summary>
        /// a delegate that is called when the remote service returns default (any response code not handled elsewhere).
        /// </summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse">Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onDefault(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnDefault(responseMessage, response, ref _returnNow);
                // if overrideOnDefault has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // Error Response : default
                var code = (await response)?.Code;
                var message = (await response)?.Message;
                if ((null == code || null == message))
                {
                    // Unrecognized Response. Create an error record based on what we have.
                    var ex = new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.RestException<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IErrorResponse>(responseMessage, await response);
                    WriteError( new global::System.Management.Automation.ErrorRecord(ex, ex.Code, global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(ex.Message) { RecommendedAction = ex.Action }
                    });
                }
                else
                {
                    WriteError( new global::System.Management.Automation.ErrorRecord(new global::System.Exception($"[{code}] : {message}"), code?.ToString(), global::System.Management.Automation.ErrorCategory.InvalidOperation, new {  })
                    {
                      ErrorDetails = new global::System.Management.Automation.ErrorDetails(message) { RecommendedAction = global::System.String.Empty }
                    });
                }
            }
        }

        /// <summary>a delegate that is called when the remote service returns 200 (OK).</summary>
        /// <param name="responseMessage">the raw response message as an global::System.Net.Http.HttpResponseMessage.</param>
        /// <param name="response">the body result as a <see cref="Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource">Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource</see>
        /// from the remote call</param>
        /// <returns>
        /// A <see cref="global::System.Threading.Tasks.Task" /> that will be complete when handling of the method is completed.
        /// </returns>
        private async global::System.Threading.Tasks.Task onOk(global::System.Net.Http.HttpResponseMessage responseMessage, global::System.Threading.Tasks.Task<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource> response)
        {
            using( NoSynchronizationContext )
            {
                var _returnNow = global::System.Threading.Tasks.Task<bool>.FromResult(false);
                overrideOnOk(responseMessage, response, ref _returnNow);
                // if overrideOnOk has returned true, then return right away.
                if ((null != _returnNow && await _returnNow))
                {
                    return ;
                }
                // onOk - response for 200 / application/json
                // (await response) // should be Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IDataflowEndpointResource
                var result = (await response);
                if (null != result)
                {
                    if (0 == _responseSize)
                    {
                        _firstResponse = result;
                        _responseSize = 1;
                    }
                    else
                    {
                        if (1 ==_responseSize)
                        {
                            // Flush buffer
                            WriteObject(_firstResponse.AddMultipleTypeNameIntoPSObject());
                        }
                        WriteObject(result.AddMultipleTypeNameIntoPSObject());
                        _responseSize = 2;
                    }
                }
            }
        }
    }
}