// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Extensions;

    /// <summary>
    /// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
    /// </summary>
    public partial class TlsCertMethod :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethod,
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethodInternal
    {

        /// <summary>Backing field for <see cref="CertManagerCertificateSpec" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpec _certManagerCertificateSpec;

        /// <summary>Option 1 - Automatic TLS server certificate management with cert-manager.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpec CertManagerCertificateSpec { get => (this._certManagerCertificateSpec = this._certManagerCertificateSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerCertificateSpec()); set => this._certManagerCertificateSpec = value; }

        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string CertManagerCertificateSpecDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).Duration; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).Duration = value ?? null; }

        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string CertManagerCertificateSpecRenewBefore { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).RenewBefore; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).RenewBefore = value ?? null; }

        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through
        /// an identifying name, not the secret itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string CertManagerCertificateSpecSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).SecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).SecretName = value ?? null; }

        /// <summary>group of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string IssuerRefGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRefGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRefGroup = value ?? null; }

        /// <summary>kind of issuer (Issuer or ClusterIssuer).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string IssuerRefKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRefKind; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRefKind = value ?? null; }

        /// <summary>name of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string IssuerRefName { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRefName; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRefName = value ?? null; }

        /// <summary>Backing field for <see cref="Manual" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IX509ManualCertificate _manual;

        /// <summary>Option 2 - Manual TLS server certificate management through a defined secret.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IX509ManualCertificate Manual { get => (this._manual = this._manual ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.X509ManualCertificate()); set => this._manual = value; }

        /// <summary>
        /// Kubernetes secret containing an X.509 client certificate. This is a reference to the secret through an identifying name,
        /// not the secret itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string ManualSecretRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IX509ManualCertificateInternal)Manual).SecretRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IX509ManualCertificateInternal)Manual).SecretRef = value ?? null; }

        /// <summary>Internal Acessors for CertManagerCertificateSpec</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpec Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethodInternal.CertManagerCertificateSpec { get => (this._certManagerCertificateSpec = this._certManagerCertificateSpec ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerCertificateSpec()); set { {_certManagerCertificateSpec = value;} } }

        /// <summary>Internal Acessors for CertManagerCertificateSpecIssuerRef</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRef Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethodInternal.CertManagerCertificateSpecIssuerRef { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRef; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).IssuerRef = value; }

        /// <summary>Internal Acessors for CertManagerCertificateSpecPrivateKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethodInternal.CertManagerCertificateSpecPrivateKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).PrivateKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).PrivateKey = value; }

        /// <summary>Internal Acessors for CertManagerCertificateSpecSan</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCert Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethodInternal.CertManagerCertificateSpecSan { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).San; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).San = value; }

        /// <summary>Internal Acessors for Manual</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IX509ManualCertificate Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ITlsCertMethodInternal.Manual { get => (this._manual = this._manual ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.X509ManualCertificate()); set { {_manual = value;} } }

        /// <summary>Backing field for <see cref="Mode" /> property.</summary>
        private string _mode;

        /// <summary>Mode of TLS server certificate management.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string Mode { get => this._mode; set => this._mode = value; }

        /// <summary>algorithm for private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string PrivateKeyAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).PrivateKeyAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).PrivateKeyAlgorithm = value ?? null; }

        /// <summary>cert-manager private key rotationPolicy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string PrivateKeyRotationPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).PrivateKeyRotationPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).PrivateKeyRotationPolicy = value ?? null; }

        /// <summary>DNS SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SanDns { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).SanDns; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).SanDns = value ?? null /* arrayOf */; }

        /// <summary>IP address SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SanIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).SanIP; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal)CertManagerCertificateSpec).SanIP = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="TlsCertMethod" /> instance.</summary>
        public TlsCertMethod()
        {

        }
    }
    /// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
    public partial interface ITlsCertMethod :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(string) })]
        string CertManagerCertificateSpecDuration { get; set; }
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.",
        SerializedName = @"renewBefore",
        PossibleTypes = new [] { typeof(string) })]
        string CertManagerCertificateSpecRenewBefore { get; set; }
        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through
        /// an identifying name, not the secret itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through an identifying name, not the secret itself.",
        SerializedName = @"secretName",
        PossibleTypes = new [] { typeof(string) })]
        string CertManagerCertificateSpecSecretName { get; set; }
        /// <summary>group of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"group of issuer.",
        SerializedName = @"group",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerRefGroup { get; set; }
        /// <summary>kind of issuer (Issuer or ClusterIssuer).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"kind of issuer (Issuer or ClusterIssuer).",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Issuer", "ClusterIssuer")]
        string IssuerRefKind { get; set; }
        /// <summary>name of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"name of issuer.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerRefName { get; set; }
        /// <summary>
        /// Kubernetes secret containing an X.509 client certificate. This is a reference to the secret through an identifying name,
        /// not the secret itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kubernetes secret containing an X.509 client certificate. This is a reference to the secret through an identifying name, not the secret itself.",
        SerializedName = @"secretRef",
        PossibleTypes = new [] { typeof(string) })]
        string ManualSecretRef { get; set; }
        /// <summary>Mode of TLS server certificate management.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Mode of TLS server certificate management.",
        SerializedName = @"mode",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Automatic", "Manual")]
        string Mode { get; set; }
        /// <summary>algorithm for private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"algorithm for private key.",
        SerializedName = @"algorithm",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Ec256", "Ec384", "Ec521", "Ed25519", "Rsa2048", "Rsa4096", "Rsa8192")]
        string PrivateKeyAlgorithm { get; set; }
        /// <summary>cert-manager private key rotationPolicy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"cert-manager private key rotationPolicy.",
        SerializedName = @"rotationPolicy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Always", "Never")]
        string PrivateKeyRotationPolicy { get; set; }
        /// <summary>DNS SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"DNS SANs.",
        SerializedName = @"dns",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SanDns { get; set; }
        /// <summary>IP address SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IP address SANs.",
        SerializedName = @"ip",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SanIP { get; set; }

    }
    /// Collection of different TLS types, NOTE- Enum at a time only one of them needs to be supported
    internal partial interface ITlsCertMethodInternal

    {
        /// <summary>Option 1 - Automatic TLS server certificate management with cert-manager.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpec CertManagerCertificateSpec { get; set; }
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        string CertManagerCertificateSpecDuration { get; set; }
        /// <summary>cert-manager issuerRef.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRef CertManagerCertificateSpecIssuerRef { get; set; }
        /// <summary>Type of certificate private key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey CertManagerCertificateSpecPrivateKey { get; set; }
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        string CertManagerCertificateSpecRenewBefore { get; set; }
        /// <summary>Additional Subject Alternative Names (SANs) to include in the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCert CertManagerCertificateSpecSan { get; set; }
        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through
        /// an identifying name, not the secret itself.
        /// </summary>
        string CertManagerCertificateSpecSecretName { get; set; }
        /// <summary>group of issuer.</summary>
        string IssuerRefGroup { get; set; }
        /// <summary>kind of issuer (Issuer or ClusterIssuer).</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Issuer", "ClusterIssuer")]
        string IssuerRefKind { get; set; }
        /// <summary>name of issuer.</summary>
        string IssuerRefName { get; set; }
        /// <summary>Option 2 - Manual TLS server certificate management through a defined secret.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IX509ManualCertificate Manual { get; set; }
        /// <summary>
        /// Kubernetes secret containing an X.509 client certificate. This is a reference to the secret through an identifying name,
        /// not the secret itself.
        /// </summary>
        string ManualSecretRef { get; set; }
        /// <summary>Mode of TLS server certificate management.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Automatic", "Manual")]
        string Mode { get; set; }
        /// <summary>algorithm for private key.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Ec256", "Ec384", "Ec521", "Ed25519", "Rsa2048", "Rsa4096", "Rsa8192")]
        string PrivateKeyAlgorithm { get; set; }
        /// <summary>cert-manager private key rotationPolicy.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Always", "Never")]
        string PrivateKeyRotationPolicy { get; set; }
        /// <summary>DNS SANs.</summary>
        System.Collections.Generic.List<string> SanDns { get; set; }
        /// <summary>IP address SANs.</summary>
        System.Collections.Generic.List<string> SanIP { get; set; }

    }
}