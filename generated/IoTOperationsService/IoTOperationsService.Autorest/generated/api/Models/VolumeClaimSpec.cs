// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Extensions;

    /// <summary>VolumeClaimSpec properties</summary>
    public partial class VolumeClaimSpec :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpec,
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecInternal
    {

        /// <summary>Backing field for <see cref="AccessMode" /> property.</summary>
        private System.Collections.Generic.List<string> _accessMode;

        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> AccessMode { get => this._accessMode; set => this._accessMode = value; }

        /// <summary>Backing field for <see cref="DataSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReference _dataSource;

        /// <summary>
        /// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
        /// * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data
        /// source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature
        /// gate is enabled, this field will always have the same contents as the DataSourceRef field.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReference DataSource { get => (this._dataSource = this._dataSource ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.LocalKubernetesReference()); set => this._dataSource = value; }

        /// <summary>
        /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the
        /// core API group. For any other third-party types, APIGroup is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceApiGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReferenceInternal)DataSource).ApiGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReferenceInternal)DataSource).ApiGroup = value ?? null; }

        /// <summary>Kind is the type of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReferenceInternal)DataSource).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReferenceInternal)DataSource).Kind = value ?? null; }

        /// <summary>Name is the name of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceName { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReferenceInternal)DataSource).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReferenceInternal)DataSource).Name = value ?? null; }

        /// <summary>Backing field for <see cref="DataSourceRef" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReference _dataSourceRef;

        /// <summary>
        /// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local
        /// object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume
        /// binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
        /// This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must
        /// have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value
        /// automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource
        /// and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object,
        /// as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef
        /// preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the
        /// AnyVolumeDataSource feature gate to be enabled.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReference DataSourceRef { get => (this._dataSourceRef = this._dataSourceRef ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.KubernetesReference()); set => this._dataSourceRef = value; }

        /// <summary>
        /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the
        /// core API group. For any other third-party types, APIGroup is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceRefApiGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).ApiGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).ApiGroup = value ?? null; }

        /// <summary>Kind is the type of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceRefKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).Kind = value ?? null; }

        /// <summary>Name is the name of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceRefName { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).Name = value ?? null; }

        /// <summary>
        /// Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string DataSourceRefNamespace { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).Namespace; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReferenceInternal)DataSourceRef).Namespace = value ?? null; }

        /// <summary>Internal Acessors for DataSource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReference Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecInternal.DataSource { get => (this._dataSource = this._dataSource ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.LocalKubernetesReference()); set { {_dataSource = value;} } }

        /// <summary>Internal Acessors for DataSourceRef</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReference Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecInternal.DataSourceRef { get => (this._dataSourceRef = this._dataSourceRef ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.KubernetesReference()); set { {_dataSourceRef = value;} } }

        /// <summary>Internal Acessors for Resource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirements Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecInternal.Resource { get => (this._resource = this._resource ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.VolumeClaimResourceRequirements()); set { {_resource = value;} } }

        /// <summary>Internal Acessors for Selector</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelector Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecInternal.Selector { get => (this._selector = this._selector ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.VolumeClaimSpecSelector()); set { {_selector = value;} } }

        /// <summary>Backing field for <see cref="Resource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirements _resource;

        /// <summary>
        /// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled
        /// users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity
        /// recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirements Resource { get => (this._resource = this._resource ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.VolumeClaimResourceRequirements()); set => this._resource = value; }

        /// <summary>
        /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsLimits ResourceLimit { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsInternal)Resource).Limit; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsInternal)Resource).Limit = value ?? null /* model class */; }

        /// <summary>
        /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults
        /// to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsRequests ResourceRequest { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsInternal)Resource).Request; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsInternal)Resource).Request = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="Selector" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelector _selector;

        /// <summary>A label query over volumes to consider for binding.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelector Selector { get => (this._selector = this._selector ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.VolumeClaimSpecSelector()); set => this._selector = value; }

        /// <summary>
        /// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchExpressions> SelectorMatchExpression { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorInternal)Selector).MatchExpression; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorInternal)Selector).MatchExpression = value ?? null /* arrayOf */; }

        /// <summary>
        /// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of
        /// matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements
        /// are ANDed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchLabels SelectorMatchLabel { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorInternal)Selector).MatchLabel; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorInternal)Selector).MatchLabel = value ?? null /* model class */; }

        /// <summary>Backing field for <see cref="StorageClassName" /> property.</summary>
        private string _storageClassName;

        /// <summary>
        /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string StorageClassName { get => this._storageClassName; set => this._storageClassName = value; }

        /// <summary>Backing field for <see cref="VolumeMode" /> property.</summary>
        private string _volumeMode;

        /// <summary>
        /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim
        /// spec. This is a beta feature.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string VolumeMode { get => this._volumeMode; set => this._volumeMode = value; }

        /// <summary>Backing field for <see cref="VolumeName" /> property.</summary>
        private string _volumeName;

        /// <summary>VolumeName is the binding reference to the PersistentVolume backing this claim.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string VolumeName { get => this._volumeName; set => this._volumeName = value; }

        /// <summary>Creates an new <see cref="VolumeClaimSpec" /> instance.</summary>
        public VolumeClaimSpec()
        {

        }
    }
    /// VolumeClaimSpec properties
    public partial interface IVolumeClaimSpec :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IJsonSerializable
    {
        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
        SerializedName = @"accessModes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> AccessMode { get; set; }
        /// <summary>
        /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the
        /// core API group. For any other third-party types, APIGroup is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
        SerializedName = @"apiGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceApiGroup { get; set; }
        /// <summary>Kind is the type of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kind is the type of resource being referenced",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceKind { get; set; }
        /// <summary>Name is the name of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name is the name of resource being referenced",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceName { get; set; }
        /// <summary>
        /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the
        /// core API group. For any other third-party types, APIGroup is required.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
        SerializedName = @"apiGroup",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceRefApiGroup { get; set; }
        /// <summary>Kind is the type of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Kind is the type of resource being referenced",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceRefKind { get; set; }
        /// <summary>Name is the name of resource being referenced</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name is the name of resource being referenced",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceRefName { get; set; }
        /// <summary>
        /// Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace.",
        SerializedName = @"namespace",
        PossibleTypes = new [] { typeof(string) })]
        string DataSourceRefNamespace { get; set; }
        /// <summary>
        /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
        SerializedName = @"limits",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsLimits) })]
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsLimits ResourceLimit { get; set; }
        /// <summary>
        /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults
        /// to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
        SerializedName = @"requests",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsRequests) })]
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsRequests ResourceRequest { get; set; }
        /// <summary>
        /// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MatchExpressions is a list of label selector requirements. The requirements are ANDed.",
        SerializedName = @"matchExpressions",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchExpressions) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchExpressions> SelectorMatchExpression { get; set; }
        /// <summary>
        /// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of
        /// matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements
        /// are ANDed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is ""key"", the operator is ""In"", and the values array contains only ""value"". The requirements are ANDed.",
        SerializedName = @"matchLabels",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchLabels) })]
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchLabels SelectorMatchLabel { get; set; }
        /// <summary>
        /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
        SerializedName = @"storageClassName",
        PossibleTypes = new [] { typeof(string) })]
        string StorageClassName { get; set; }
        /// <summary>
        /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim
        /// spec. This is a beta feature.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec. This is a beta feature.",
        SerializedName = @"volumeMode",
        PossibleTypes = new [] { typeof(string) })]
        string VolumeMode { get; set; }
        /// <summary>VolumeName is the binding reference to the PersistentVolume backing this claim.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"VolumeName is the binding reference to the PersistentVolume backing this claim.",
        SerializedName = @"volumeName",
        PossibleTypes = new [] { typeof(string) })]
        string VolumeName { get; set; }

    }
    /// VolumeClaimSpec properties
    internal partial interface IVolumeClaimSpecInternal

    {
        /// <summary>
        /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
        /// </summary>
        System.Collections.Generic.List<string> AccessMode { get; set; }
        /// <summary>
        /// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
        /// * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data
        /// source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature
        /// gate is enabled, this field will always have the same contents as the DataSourceRef field.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ILocalKubernetesReference DataSource { get; set; }
        /// <summary>
        /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the
        /// core API group. For any other third-party types, APIGroup is required.
        /// </summary>
        string DataSourceApiGroup { get; set; }
        /// <summary>Kind is the type of resource being referenced</summary>
        string DataSourceKind { get; set; }
        /// <summary>Name is the name of resource being referenced</summary>
        string DataSourceName { get; set; }
        /// <summary>
        /// Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local
        /// object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume
        /// binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner.
        /// This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must
        /// have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value
        /// automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource
        /// and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object,
        /// as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef
        /// preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the
        /// AnyVolumeDataSource feature gate to be enabled.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IKubernetesReference DataSourceRef { get; set; }
        /// <summary>
        /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the
        /// core API group. For any other third-party types, APIGroup is required.
        /// </summary>
        string DataSourceRefApiGroup { get; set; }
        /// <summary>Kind is the type of resource being referenced</summary>
        string DataSourceRefKind { get; set; }
        /// <summary>Name is the name of resource being referenced</summary>
        string DataSourceRefName { get; set; }
        /// <summary>
        /// Namespace is the namespace of the resource being referenced. This field is required when the resource has a namespace.
        /// </summary>
        string DataSourceRefNamespace { get; set; }
        /// <summary>
        /// Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled
        /// users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity
        /// recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirements Resource { get; set; }
        /// <summary>
        /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsLimits ResourceLimit { get; set; }
        /// <summary>
        /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults
        /// to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimResourceRequirementsRequests ResourceRequest { get; set; }
        /// <summary>A label query over volumes to consider for binding.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelector Selector { get; set; }
        /// <summary>
        /// MatchExpressions is a list of label selector requirements. The requirements are ANDed.
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchExpressions> SelectorMatchExpression { get; set; }
        /// <summary>
        /// MatchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of
        /// matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements
        /// are ANDed.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IVolumeClaimSpecSelectorMatchLabels SelectorMatchLabel { get; set; }
        /// <summary>
        /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
        /// </summary>
        string StorageClassName { get; set; }
        /// <summary>
        /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim
        /// spec. This is a beta feature.
        /// </summary>
        string VolumeMode { get; set; }
        /// <summary>VolumeName is the binding reference to the PersistentVolume backing this claim.</summary>
        string VolumeName { get; set; }

    }
}