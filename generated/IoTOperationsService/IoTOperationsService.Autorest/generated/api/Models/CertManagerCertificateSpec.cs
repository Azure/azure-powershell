// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Extensions;

    /// <summary>Automatic TLS server certificate management with cert-manager</summary>
    public partial class CertManagerCertificateSpec :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpec,
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal
    {

        /// <summary>Backing field for <see cref="Duration" /> property.</summary>
        private string _duration;

        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string Duration { get => this._duration; set => this._duration = value; }

        /// <summary>Backing field for <see cref="IssuerRef" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRef _issuerRef;

        /// <summary>cert-manager issuerRef.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRef IssuerRef { get => (this._issuerRef = this._issuerRef ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerIssuerRef()); set => this._issuerRef = value; }

        /// <summary>group of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string IssuerRefGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRefInternal)IssuerRef).Group; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRefInternal)IssuerRef).Group = value ; }

        /// <summary>kind of issuer (Issuer or ClusterIssuer).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string IssuerRefKind { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRefInternal)IssuerRef).Kind; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRefInternal)IssuerRef).Kind = value ; }

        /// <summary>name of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string IssuerRefName { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRefInternal)IssuerRef).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRefInternal)IssuerRef).Name = value ; }

        /// <summary>Internal Acessors for IssuerRef</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRef Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal.IssuerRef { get => (this._issuerRef = this._issuerRef ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerIssuerRef()); set { {_issuerRef = value;} } }

        /// <summary>Internal Acessors for PrivateKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal.PrivateKey { get => (this._privateKey = this._privateKey ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerPrivateKey()); set { {_privateKey = value;} } }

        /// <summary>Internal Acessors for San</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCert Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertificateSpecInternal.San { get => (this._san = this._san ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.SanForCert()); set { {_san = value;} } }

        /// <summary>Backing field for <see cref="PrivateKey" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey _privateKey;

        /// <summary>Type of certificate private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey PrivateKey { get => (this._privateKey = this._privateKey ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerPrivateKey()); set => this._privateKey = value; }

        /// <summary>algorithm for private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string PrivateKeyAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKeyInternal)PrivateKey).Algorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKeyInternal)PrivateKey).Algorithm = value ?? null; }

        /// <summary>cert-manager private key rotationPolicy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string PrivateKeyRotationPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKeyInternal)PrivateKey).RotationPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKeyInternal)PrivateKey).RotationPolicy = value ?? null; }

        /// <summary>Backing field for <see cref="RenewBefore" /> property.</summary>
        private string _renewBefore;

        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string RenewBefore { get => this._renewBefore; set => this._renewBefore = value; }

        /// <summary>Backing field for <see cref="San" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCert _san;

        /// <summary>Additional Subject Alternative Names (SANs) to include in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCert San { get => (this._san = this._san ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.SanForCert()); set => this._san = value; }

        /// <summary>DNS SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SanDns { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCertInternal)San).Dns; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCertInternal)San).Dns = value ?? null /* arrayOf */; }

        /// <summary>IP address SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SanIP { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCertInternal)San).IP; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCertInternal)San).IP = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="SecretName" /> property.</summary>
        private string _secretName;

        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through
        /// an identifying name, not the secret itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string SecretName { get => this._secretName; set => this._secretName = value; }

        /// <summary>Creates an new <see cref="CertManagerCertificateSpec" /> instance.</summary>
        public CertManagerCertificateSpec()
        {

        }
    }
    /// Automatic TLS server certificate management with cert-manager
    public partial interface ICertManagerCertificateSpec :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(string) })]
        string Duration { get; set; }
        /// <summary>group of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"group of issuer.",
        SerializedName = @"group",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerRefGroup { get; set; }
        /// <summary>kind of issuer (Issuer or ClusterIssuer).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"kind of issuer (Issuer or ClusterIssuer).",
        SerializedName = @"kind",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Issuer", "ClusterIssuer")]
        string IssuerRefKind { get; set; }
        /// <summary>name of issuer.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"name of issuer.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string IssuerRefName { get; set; }
        /// <summary>algorithm for private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"algorithm for private key.",
        SerializedName = @"algorithm",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Ec256", "Ec384", "Ec521", "Ed25519", "Rsa2048", "Rsa4096", "Rsa8192")]
        string PrivateKeyAlgorithm { get; set; }
        /// <summary>cert-manager private key rotationPolicy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"cert-manager private key rotationPolicy.",
        SerializedName = @"rotationPolicy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Always", "Never")]
        string PrivateKeyRotationPolicy { get; set; }
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.",
        SerializedName = @"renewBefore",
        PossibleTypes = new [] { typeof(string) })]
        string RenewBefore { get; set; }
        /// <summary>DNS SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"DNS SANs.",
        SerializedName = @"dns",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SanDns { get; set; }
        /// <summary>IP address SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IP address SANs.",
        SerializedName = @"ip",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SanIP { get; set; }
        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through
        /// an identifying name, not the secret itself.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through an identifying name, not the secret itself.",
        SerializedName = @"secretName",
        PossibleTypes = new [] { typeof(string) })]
        string SecretName { get; set; }

    }
    /// Automatic TLS server certificate management with cert-manager
    internal partial interface ICertManagerCertificateSpecInternal

    {
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        string Duration { get; set; }
        /// <summary>cert-manager issuerRef.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerIssuerRef IssuerRef { get; set; }
        /// <summary>group of issuer.</summary>
        string IssuerRefGroup { get; set; }
        /// <summary>kind of issuer (Issuer or ClusterIssuer).</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Issuer", "ClusterIssuer")]
        string IssuerRefKind { get; set; }
        /// <summary>name of issuer.</summary>
        string IssuerRefName { get; set; }
        /// <summary>Type of certificate private key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey PrivateKey { get; set; }
        /// <summary>algorithm for private key.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Ec256", "Ec384", "Ec521", "Ed25519", "Rsa2048", "Rsa4096", "Rsa8192")]
        string PrivateKeyAlgorithm { get; set; }
        /// <summary>cert-manager private key rotationPolicy.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Always", "Never")]
        string PrivateKeyRotationPolicy { get; set; }
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        string RenewBefore { get; set; }
        /// <summary>Additional Subject Alternative Names (SANs) to include in the certificate.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISanForCert San { get; set; }
        /// <summary>DNS SANs.</summary>
        System.Collections.Generic.List<string> SanDns { get; set; }
        /// <summary>IP address SANs.</summary>
        System.Collections.Generic.List<string> SanIP { get; set; }
        /// <summary>
        /// Secret for storing server certificate. Any existing data will be overwritten. This is a reference to the secret through
        /// an identifying name, not the secret itself.
        /// </summary>
        string SecretName { get; set; }

    }
}