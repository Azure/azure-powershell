// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Extensions;

    /// <summary>Broker Advanced Settings</summary>
    public partial class AdvancedSettings :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IAdvancedSettings,
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IAdvancedSettingsInternal
    {

        /// <summary>Backing field for <see cref="Client" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfig _client;

        /// <summary>Configurations related to All Clients.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfig Client { get => (this._client = this._client ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ClientConfig()); set => this._client = value; }

        /// <summary>Upper bound of a client's Keep Alive, in seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public int? ClientMaxKeepAliveSecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxKeepAliveSecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxKeepAliveSecond = value ?? default(int); }

        /// <summary>Upper bound of Message Expiry Interval, in seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public int? ClientMaxMessageExpirySecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxMessageExpirySecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxMessageExpirySecond = value ?? default(int); }

        /// <summary>Max message size for a packet in Bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public int? ClientMaxPacketSizeByte { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxPacketSizeByte; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxPacketSizeByte = value ?? default(int); }

        /// <summary>Upper bound of Receive Maximum that a client can request in the CONNECT packet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public int? ClientMaxReceiveMaximum { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxReceiveMaximum; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxReceiveMaximum = value ?? default(int); }

        /// <summary>Upper bound of Session Expiry Interval, in seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public int? ClientMaxSessionExpirySecond { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxSessionExpirySecond; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).MaxSessionExpirySecond = value ?? default(int); }

        /// <summary>Backing field for <see cref="EncryptInternalTraffic" /> property.</summary>
        private string _encryptInternalTraffic;

        /// <summary>The setting to enable or disable encryption of internal Traffic.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        public string EncryptInternalTraffic { get => this._encryptInternalTraffic; set => this._encryptInternalTraffic = value; }

        /// <summary>Backing field for <see cref="InternalCert" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptions _internalCert;

        /// <summary>Certificate rotation and private key configuration.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptions InternalCert { get => (this._internalCert = this._internalCert ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerCertOptions()); set => this._internalCert = value; }

        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string InternalCertDuration { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).Duration; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).Duration = value ?? null; }

        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string InternalCertRenewBefore { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).RenewBefore; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).RenewBefore = value ?? null; }

        /// <summary>Internal Acessors for Client</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfig Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IAdvancedSettingsInternal.Client { get => (this._client = this._client ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ClientConfig()); set { {_client = value;} } }

        /// <summary>Internal Acessors for ClientSubscriberQueueLimit</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISubscriberQueueLimit Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IAdvancedSettingsInternal.ClientSubscriberQueueLimit { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).SubscriberQueueLimit; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).SubscriberQueueLimit = value; }

        /// <summary>Internal Acessors for InternalCert</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptions Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IAdvancedSettingsInternal.InternalCert { get => (this._internalCert = this._internalCert ?? new Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.CertManagerCertOptions()); set { {_internalCert = value;} } }

        /// <summary>Internal Acessors for InternalCertPrivateKey</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IAdvancedSettingsInternal.InternalCertPrivateKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).PrivateKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).PrivateKey = value; }

        /// <summary>algorithm for private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string PrivateKeyAlgorithm { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).PrivateKeyAlgorithm; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).PrivateKeyAlgorithm = value ?? null; }

        /// <summary>cert-manager private key rotationPolicy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string PrivateKeyRotationPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).PrivateKeyRotationPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptionsInternal)InternalCert).PrivateKeyRotationPolicy = value ?? null; }

        /// <summary>The maximum length of the queue before messages start getting dropped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public long? SubscriberQueueLimitLength { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).SubscriberQueueLimitLength; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).SubscriberQueueLimitLength = value ?? default(long); }

        /// <summary>The strategy to use for dropping messages from the queue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Origin(Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PropertyOrigin.Inlined)]
        public string SubscriberQueueLimitStrategy { get => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).SubscriberQueueLimitStrategy; set => ((Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfigInternal)Client).SubscriberQueueLimitStrategy = value ?? null; }

        /// <summary>Creates an new <see cref="AdvancedSettings" /> instance.</summary>
        public AdvancedSettings()
        {

        }
    }
    /// Broker Advanced Settings
    public partial interface IAdvancedSettings :
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.IJsonSerializable
    {
        /// <summary>Upper bound of a client's Keep Alive, in seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Upper bound of a client's Keep Alive, in seconds.",
        SerializedName = @"maxKeepAliveSeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? ClientMaxKeepAliveSecond { get; set; }
        /// <summary>Upper bound of Message Expiry Interval, in seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Upper bound of Message Expiry Interval, in seconds.",
        SerializedName = @"maxMessageExpirySeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? ClientMaxMessageExpirySecond { get; set; }
        /// <summary>Max message size for a packet in Bytes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Max message size for a packet in Bytes.",
        SerializedName = @"maxPacketSizeBytes",
        PossibleTypes = new [] { typeof(int) })]
        int? ClientMaxPacketSizeByte { get; set; }
        /// <summary>Upper bound of Receive Maximum that a client can request in the CONNECT packet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Upper bound of Receive Maximum that a client can request in the CONNECT packet.",
        SerializedName = @"maxReceiveMaximum",
        PossibleTypes = new [] { typeof(int) })]
        int? ClientMaxReceiveMaximum { get; set; }
        /// <summary>Upper bound of Session Expiry Interval, in seconds.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Upper bound of Session Expiry Interval, in seconds.",
        SerializedName = @"maxSessionExpirySeconds",
        PossibleTypes = new [] { typeof(int) })]
        int? ClientMaxSessionExpirySecond { get; set; }
        /// <summary>The setting to enable or disable encryption of internal Traffic.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The setting to enable or disable encryption of internal Traffic.",
        SerializedName = @"encryptInternalTraffic",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EncryptInternalTraffic { get; set; }
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.",
        SerializedName = @"duration",
        PossibleTypes = new [] { typeof(string) })]
        string InternalCertDuration { get; set; }
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for 45 minutes.",
        SerializedName = @"renewBefore",
        PossibleTypes = new [] { typeof(string) })]
        string InternalCertRenewBefore { get; set; }
        /// <summary>algorithm for private key.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"algorithm for private key.",
        SerializedName = @"algorithm",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Ec256", "Ec384", "Ec521", "Ed25519", "Rsa2048", "Rsa4096", "Rsa8192")]
        string PrivateKeyAlgorithm { get; set; }
        /// <summary>cert-manager private key rotationPolicy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"cert-manager private key rotationPolicy.",
        SerializedName = @"rotationPolicy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Always", "Never")]
        string PrivateKeyRotationPolicy { get; set; }
        /// <summary>The maximum length of the queue before messages start getting dropped.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The maximum length of the queue before messages start getting dropped.",
        SerializedName = @"length",
        PossibleTypes = new [] { typeof(long) })]
        long? SubscriberQueueLimitLength { get; set; }
        /// <summary>The strategy to use for dropping messages from the queue.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The strategy to use for dropping messages from the queue.",
        SerializedName = @"strategy",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("None", "DropOldest")]
        string SubscriberQueueLimitStrategy { get; set; }

    }
    /// Broker Advanced Settings
    internal partial interface IAdvancedSettingsInternal

    {
        /// <summary>Configurations related to All Clients.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.IClientConfig Client { get; set; }
        /// <summary>Upper bound of a client's Keep Alive, in seconds.</summary>
        int? ClientMaxKeepAliveSecond { get; set; }
        /// <summary>Upper bound of Message Expiry Interval, in seconds.</summary>
        int? ClientMaxMessageExpirySecond { get; set; }
        /// <summary>Max message size for a packet in Bytes.</summary>
        int? ClientMaxPacketSizeByte { get; set; }
        /// <summary>Upper bound of Receive Maximum that a client can request in the CONNECT packet.</summary>
        int? ClientMaxReceiveMaximum { get; set; }
        /// <summary>Upper bound of Session Expiry Interval, in seconds.</summary>
        int? ClientMaxSessionExpirySecond { get; set; }
        /// <summary>The limit on the number of queued messages for a subscriber.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ISubscriberQueueLimit ClientSubscriberQueueLimit { get; set; }
        /// <summary>The setting to enable or disable encryption of internal Traffic.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EncryptInternalTraffic { get; set; }
        /// <summary>Certificate rotation and private key configuration.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerCertOptions InternalCert { get; set; }
        /// <summary>
        /// Lifetime of certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours and 45m for
        /// 45 minutes.
        /// </summary>
        string InternalCertDuration { get; set; }
        /// <summary>Configuration of certificate private key.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.Models.ICertManagerPrivateKey InternalCertPrivateKey { get; set; }
        /// <summary>
        /// When to begin renewing certificate. Must be specified using a Go time.Duration format (h|m|s). E.g. 240h for 240 hours
        /// and 45m for 45 minutes.
        /// </summary>
        string InternalCertRenewBefore { get; set; }
        /// <summary>algorithm for private key.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Ec256", "Ec384", "Ec521", "Ed25519", "Rsa2048", "Rsa4096", "Rsa8192")]
        string PrivateKeyAlgorithm { get; set; }
        /// <summary>cert-manager private key rotationPolicy.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("Always", "Never")]
        string PrivateKeyRotationPolicy { get; set; }
        /// <summary>The maximum length of the queue before messages start getting dropped.</summary>
        long? SubscriberQueueLimitLength { get; set; }
        /// <summary>The strategy to use for dropping messages from the queue.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.IoTOperationsService.PSArgumentCompleterAttribute("None", "DropOldest")]
        string SubscriberQueueLimitStrategy { get; set; }

    }
}