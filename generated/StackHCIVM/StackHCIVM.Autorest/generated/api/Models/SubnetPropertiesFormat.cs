// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Extensions;

    /// <summary>Properties of the subnet.</summary>
    public partial class SubnetPropertiesFormat :
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormat,
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatInternal
    {

        /// <summary>Backing field for <see cref="AddressPrefix" /> property.</summary>
        private string _addressPrefix;

        /// <summary>The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        public string AddressPrefix { get => this._addressPrefix; set => this._addressPrefix = value; }

        /// <summary>Backing field for <see cref="AddressPrefixes" /> property.</summary>
        private System.Collections.Generic.List<string> _addressPrefixes;

        /// <summary>List of address prefixes for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> AddressPrefixes { get => this._addressPrefixes; set => this._addressPrefixes = value; }

        /// <summary>Backing field for <see cref="IPAllocationMethod" /> property.</summary>
        private string _iPAllocationMethod;

        /// <summary>
        /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        public string IPAllocationMethod { get => this._iPAllocationMethod; set => this._iPAllocationMethod = value; }

        /// <summary>Backing field for <see cref="IPConfigurationReference" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatIPConfigurationReferencesItem> _iPConfigurationReference;

        /// <summary>IPConfigurationReferences - list of IPConfigurationReferences</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatIPConfigurationReferencesItem> IPConfigurationReference { get => this._iPConfigurationReference; set => this._iPConfigurationReference = value; }

        /// <summary>Backing field for <see cref="IPPool" /> property.</summary>
        private System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IIPPool> _iPPool;

        /// <summary>network associated pool of IP Addresses</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IIPPool> IPPool { get => this._iPPool; set => this._iPPool = value; }

        /// <summary>Internal Acessors for RouteTable</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTable Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatInternal.RouteTable { get => (this._routeTable = this._routeTable ?? new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.RouteTable()); set { {_routeTable = value;} } }

        /// <summary>Internal Acessors for RouteTableEtag</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatInternal.RouteTableEtag { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Etag; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Etag = value; }

        /// <summary>Internal Acessors for RouteTableName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatInternal.RouteTableName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Name; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Name = value; }

        /// <summary>Internal Acessors for RouteTableProperty</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTablePropertiesFormat Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatInternal.RouteTableProperty { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Property; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Property = value; }

        /// <summary>Internal Acessors for RouteTableType</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatInternal.RouteTableType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Type = value; }

        /// <summary>Collection of routes contained within a route table.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRoute> Route { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Route; set => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Route = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="RouteTable" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTable _routeTable;

        /// <summary>Route table resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTable RouteTable { get => (this._routeTable = this._routeTable ?? new Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.RouteTable()); set => this._routeTable = value; }

        /// <summary>A unique read-only string that changes whenever the resource is updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Inlined)]
        public string RouteTableEtag { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Etag; }

        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Inlined)]
        public string RouteTableName { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Name; }

        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Inlined)]
        public string RouteTableType { get => ((Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTableInternal)RouteTable).Type; }

        /// <summary>Backing field for <see cref="Vlan" /> property.</summary>
        private int? _vlan;

        /// <summary>Vlan to use for the subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Origin(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PropertyOrigin.Owned)]
        public int? Vlan { get => this._vlan; set => this._vlan = value; }

        /// <summary>Creates an new <see cref="SubnetPropertiesFormat" /> instance.</summary>
        public SubnetPropertiesFormat()
        {

        }
    }
    /// Properties of the subnet.
    public partial interface ISubnetPropertiesFormat :
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.IJsonSerializable
    {
        /// <summary>The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.",
        SerializedName = @"addressPrefix",
        PossibleTypes = new [] { typeof(string) })]
        string AddressPrefix { get; set; }
        /// <summary>List of address prefixes for the subnet.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of address prefixes for the subnet.",
        SerializedName = @"addressPrefixes",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> AddressPrefixes { get; set; }
        /// <summary>
        /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'",
        SerializedName = @"ipAllocationMethod",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("Dynamic", "Static")]
        string IPAllocationMethod { get; set; }
        /// <summary>IPConfigurationReferences - list of IPConfigurationReferences</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"IPConfigurationReferences - list of IPConfigurationReferences",
        SerializedName = @"ipConfigurationReferences",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatIPConfigurationReferencesItem) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatIPConfigurationReferencesItem> IPConfigurationReference { get; set; }
        /// <summary>network associated pool of IP Addresses</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"network associated pool of IP Addresses",
        SerializedName = @"ipPools",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IIPPool) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IIPPool> IPPool { get; set; }
        /// <summary>Collection of routes contained within a route table.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Collection of routes contained within a route table.",
        SerializedName = @"routes",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRoute) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRoute> Route { get; set; }
        /// <summary>A unique read-only string that changes whenever the resource is updated.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"A unique read-only string that changes whenever the resource is updated.",
        SerializedName = @"etag",
        PossibleTypes = new [] { typeof(string) })]
        string RouteTableEtag { get;  }
        /// <summary>Resource name.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource name.",
        SerializedName = @"name",
        PossibleTypes = new [] { typeof(string) })]
        string RouteTableName { get;  }
        /// <summary>Resource type.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource type.",
        SerializedName = @"type",
        PossibleTypes = new [] { typeof(string) })]
        string RouteTableType { get;  }
        /// <summary>Vlan to use for the subnet</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Vlan to use for the subnet",
        SerializedName = @"vlan",
        PossibleTypes = new [] { typeof(int) })]
        int? Vlan { get; set; }

    }
    /// Properties of the subnet.
    internal partial interface ISubnetPropertiesFormatInternal

    {
        /// <summary>The address prefix for the subnet: Cidr for this subnet - IPv4, IPv6.</summary>
        string AddressPrefix { get; set; }
        /// <summary>List of address prefixes for the subnet.</summary>
        System.Collections.Generic.List<string> AddressPrefixes { get; set; }
        /// <summary>
        /// IPAllocationMethod - The IP address allocation method. Possible values include: 'Static', 'Dynamic'
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.PSArgumentCompleterAttribute("Dynamic", "Static")]
        string IPAllocationMethod { get; set; }
        /// <summary>IPConfigurationReferences - list of IPConfigurationReferences</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.ISubnetPropertiesFormatIPConfigurationReferencesItem> IPConfigurationReference { get; set; }
        /// <summary>network associated pool of IP Addresses</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IIPPool> IPPool { get; set; }
        /// <summary>Collection of routes contained within a route table.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRoute> Route { get; set; }
        /// <summary>Route table resource.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTable RouteTable { get; set; }
        /// <summary>A unique read-only string that changes whenever the resource is updated.</summary>
        string RouteTableEtag { get; set; }
        /// <summary>Resource name.</summary>
        string RouteTableName { get; set; }
        /// <summary>Properties of the route table.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.StackHCIVM.Models.IRouteTablePropertiesFormat RouteTableProperty { get; set; }
        /// <summary>Resource type.</summary>
        string RouteTableType { get; set; }
        /// <summary>Vlan to use for the subnet</summary>
        int? Vlan { get; set; }

    }
}