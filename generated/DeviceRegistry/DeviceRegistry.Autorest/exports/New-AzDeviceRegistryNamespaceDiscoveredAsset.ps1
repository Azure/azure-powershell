
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
Create a NamespaceDiscoveredAsset
.Description
Create a NamespaceDiscoveredAsset
.Example
$eventGroups = @(
    @{
        name = "eventGroup1"
        dataSource = "nsu=http://microsoft.com/Opc/OpcPlc/EventGroup1"
        eventGroupConfiguration = '{"publishingInterval":10,"samplingInterval":15,"queueSize":20}'
        typeRef = "eventGroup1TypeRef"
        events = @(
            @{
                name = "event1"
                dataSource = "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt5"
                eventConfiguration = '{"publishingInterval":7,"samplingInterval":1,"queueSize":8}'
                destinations = @(
                    @{
                        target = "Mqtt"
                        configuration = @{
                            topic = "/contoso/testEvent1"
                            retain = "Keep"
                            qos = "Qos0"
                            ttl = 7200
                        }
                    }
                )
                typeRef = "event1Ref"
            }
        )
    },
    @{
        name = "eventGroup2"
        events = @(
            @{
                name = "event2"
                dataSource = "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt8"
                eventConfiguration = '{"publishingInterval":7,"samplingInterval":1,"queueSize":8}'
                destinations = @(
                    @{
                        target = "Storage"
                        configuration = @{
                            path = "/tmp/event2"
                        }
                    }
                )
                typeRef = "event2Ref"
            }
        )
    }
)

$managementGroups = @(
    @{
        name = "managementGroup1"
        managementGroupConfiguration = '{"retryCount":10,"retryBackoffInterval":15}'
        typeRef = "managementGroup1TypeRef"
        defaultTopic = "/contoso/managementGroup1"
        defaultTimeoutInSeconds = 100
        actions = @(
            @{
                name = "action1"
                actionConfiguration = '{"retryCount":5,"retryBackoffInterval":5}'
                targetUri = "/onvif/device_service?ONVIFProfile=Profile1"
                typeRef = "action1TypeRef"
                topic = "/contoso/managementGroup1/action1"
                actionType = "Call"
                timeoutInSeconds = 60
            },
            @{
                name = "action2"
                actionConfiguration = '{"retryCount":5,"retryBackoffInterval":5}'
                targetUri = "/onvif/device_service?ONVIFProfile=Profile2"
                typeRef = "action2TypeRef"
                topic = "/contoso/managementGroup1/action2"
                actionType = "Call"
                timeoutInSeconds = 60
            }
        )
    }
)

$datasets = @(
    @{
        name = "dataset1"
        dataSource = "nsu=http://microsoft.com/Opc/OpcPlc"
    },
    @{
        name = "dataSet2"
        dataSource = "nsu=http://microsoft.com/Opc/OpcPlc/Oven;i=5"
        typeRef = "dataset1TypeRef"
        datasetConfiguration = '{"publishingInterval":10,"samplingInterval":15,"queueSize":20}'
        destinations = @(
            @{
                target = "Mqtt"
                configuration = @{
                    topic = "/contoso/test2"
                    retain = "Keep"
                    qos = "Qos1"
                    ttl = 3600
                }
            }
        )
        dataPoints = @(
            @{
                name = "dataset1DataPoint1"
                dataSource = "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt3"
                dataPointConfiguration = '{"publishingInterval":8,"samplingInterval":8,"queueSize":4}'
                typeRef = "dataset1DataPoint1TypeRef"
            },
            @{
                name = "dataset1DataPoint2"
                dataSource = "nsu=http://microsoft.com/Opc/OpcPlc/;s=FastUInt4"
                dataPointConfiguration = '{"publishingInterval":8,"samplingInterval":8,"queueSize":4}'
                typeRef = "dataset1DataPoint2TypeRef"
            }
        )
    }
)

$streams = @(
    @{
        name = "stream1"
        streamConfiguration = '{"publishingInterval":8,"samplingInterval":8,"queueSize":4}'
        typeRef = "stream1TypeRef"
        destinations = @(
            @{
                target = "Storage"
                configuration = @{
                    path = "/tmp/stream1"
                }
            }
        )
    },
    @{
        name = "stream2"
        streamConfiguration = '{"publishingInterval":8,"samplingInterval":8,"queueSize":4}'
        typeRef = "stream2TypeRef"
        destinations = @(
            @{
                target = "Mqtt"
                configuration = @{
                    topic = "/contoso/testStream2"
                    retain = "Never"
                    qos = "Qos0"
                    ttl = 7200
                }
            }
        )
    }
)

New-AzDeviceRegistryNamespaceDiscoveredAsset -ResourceGroupName "my-resource-group" -NamespaceName "my-namespace" -DiscoveredAssetName "my-discovered-asset" -Location "eastus" -ExtendedLocationName "/subscriptions/xxxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx/resourceGroups/adr-pwsh-test-rg/providers/Microsoft.ExtendedLocation/customLocations/location-mkzkq" -ExtendedLocationType "CustomLocation" -DeviceRefDeviceName "my-device" -DeviceRefEndpointName "my-endpoint" -Manufacturer "Contoso123" -ManufacturerUri "https://www.contoso.com/manufacturerUri" -Model "ContosoModel" -ProductCode "SA34VDG" -SoftwareRevision "2.0" -SerialNumber "64-103816-519918-8" -DocumentationUri "https://www.example.com/manual/" -EventGroup $eventGroups -ManagementGroup $managementGroups -Dataset $datasets -Stream $streams
.Example
New-AzDeviceRegistryNamespaceDiscoveredAsset -ResourceGroupName "my-resource-group" -NamespaceName "my-namespace" -DiscoveredAssetName "my-discovered-asset" -JsonFilePath "C:\path\to\discovered-asset.json"
.Example
$jsonString = Get-Content -Path "C:\path\to\discovered-asset.json" -Raw
New-AzDeviceRegistryNamespaceDiscoveredAsset -ResourceGroupName "my-resource-group" -NamespaceName "my-namespace" -DiscoveredAssetName "my-discovered-asset" -JsonString $jsonString

.Outputs
Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredAsset
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

DATASET <INamespaceDiscoveredDataset[]>: Array of datasets that are part of the asset. Each dataset spec describes the data points that make up the set.
  Name <String>: Name of the dataset.
  [DataPoint <List<INamespaceDiscoveredDatasetDataPoint>>]: Array of data points that are part of the dataset. Each data point can have per-data point configuration.
    DataSource <String>: The address of the source of the data in the asset (e.g. URL) so that a client can access the data source on the asset.
    Name <String>: The name of the data point.
    [DataPointConfiguration <String>]: Stringified JSON that contains connector-specific configuration for the data point. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
    [LastUpdatedOn <DateTime?>]: UTC timestamp indicating when the data point was added or modified.
    [TypeRef <String>]: URI or type definition ID.
  [DataSource <String>]: Reference to a data source for a given dataset.
  [DatasetConfiguration <String>]: Stringified JSON that contains connector-specific properties that describes configuration for the specific dataset.
  [Destination <List<IDatasetDestination>>]: Destinations for a dataset.
    Target <String>: Target destination.
  [LastUpdatedOn <DateTime?>]: Timestamp (in UTC) indicating when the dataset was added or modified.
  [TypeRef <String>]: URI or type definition ID.

DEFAULTDATASETSDESTINATION <IDatasetDestination[]>: Default destinations for a dataset.
  Target <String>: Target destination.

DEFAULTEVENTSDESTINATION <IEventDestination[]>: Default destinations for an event.
  Target <String>: Target destination.

DEFAULTSTREAMSDESTINATION <IStreamDestination[]>: Default destinations for a stream.
  Target <String>: Target destination.

EVENTGROUP <INamespaceDiscoveredEventGroup[]>: Array of event groups that are part of the asset. Each event group can have per-event group configuration.
  Name <String>: The name of the event group.
  [DataSource <String>]: The address of the notifier of the event group in the asset (e.g. URL) so that a client can access the event group on the asset.
  [DefaultDestination <List<IEventDestination>>]: Destinations for events. Default destinations when destinations is not defined at the event level.
    Target <String>: Target destination.
  [Event <List<INamespaceDiscoveredEvent>>]: Array of events that are part of the event group.
    Name <String>: The name of the event.
    [DataSource <String>]: Reference to a data source for a given event.
    [Destination <List<IEventDestination>>]: Destinations for an event.
    [EventConfiguration <String>]: Stringified JSON that contains connector-specific configuration for the event. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
    [LastUpdatedOn <DateTime?>]: UTC timestamp indicating when the event was added or modified.
    [TypeRef <String>]: URI or type definition ID.
  [EventGroupConfiguration <String>]: Stringified JSON that contains connector-specific configuration for the event group. For OPC UA, this could include configuration like, publishingInterval, samplingInterval, and queueSize.
  [TypeRef <String>]: URI or type definition ID.

MANAGEMENTGROUP <INamespaceDiscoveredManagementGroup[]>: Array of management groups that are part of the asset. Each management group can have a per-group configuration.
  Name <String>: Name of the management group.
  [Action <List<INamespaceDiscoveredManagementAction>>]: Array of actions that are part of the management group. Each action can have an individual configuration.
    Name <String>: Name of the action.
    TargetUri <String>: The target URI on which a client can invoke the specific action.
    [ActionConfiguration <String>]: Stringified JSON that contains connector-specific configuration for the action.
    [ActionType <String>]: The type of the action.
    [LastUpdatedOn <DateTime?>]: Timestamp (in UTC) indicating when the management action was added or modified.
    [TimeoutInSecond <Int32?>]: Response timeout for the action.
    [Topic <String>]: The MQTT topic path on which a client will receive the request for the action.
    [TypeRef <String>]: URI or type definition ID.
  [DataSource <String>]: Reference to a data source for a given management group.
  [DefaultTimeoutInSecond <Int32?>]: Default response timeout for all actions that are part of the management group.
  [DefaultTopic <String>]: Default MQTT topic path on which a client will receive the request for all actions that are part of the management group.
  [LastUpdatedOn <DateTime?>]: Timestamp (in UTC) indicating when the management group was added or modified.
  [ManagementGroupConfiguration <String>]: Stringified JSON that contains connector-specific configuration for the management group.
  [TypeRef <String>]: URI or type definition ID.

STREAM <INamespaceDiscoveredStream[]>: Array of streams that are part of the asset. Each stream can have a per-stream configuration.
  Name <String>: Name of the stream definition.
  [Destination <List<IStreamDestination>>]: Destinations for a stream.
    Target <String>: Target destination.
  [LastUpdatedOn <DateTime?>]: Timestamp (in UTC) indicating when the stream was added or modified.
  [StreamConfiguration <String>]: Stringified JSON that contains connector-specific configuration for the specific stream.
  [TypeRef <String>]: URI or type definition ID.
.Link
https://learn.microsoft.com/powershell/module/az.deviceregistry/new-azdeviceregistrynamespacediscoveredasset
#>
function New-AzDeviceRegistryNamespaceDiscoveredAsset {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredAsset])]
[CmdletBinding(DefaultParameterSetName='CreateExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Path')]
    [System.String]
    # The name of the discovered asset.
    ${DiscoveredAssetName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Path')]
    [System.String]
    # The name of the namespace.
    ${NamespaceName},

    [Parameter(Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # The extended location name.
    ${ExtendedLocationName},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # The extended location type.
    ${ExtendedLocationType},

    [Parameter(ParameterSetName='CreateExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # The geo-location where the resource lives
    ${Location},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String[]]
    # URIs or type definition IDs.
    ${AssetTypeRef},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredAssetPropertiesAttributes]))]
    [System.Collections.Hashtable]
    # A set of key-value pairs that contain custom attributes.
    ${Attribute},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredDataset[]]
    # Array of datasets that are part of the asset.
    # Each dataset spec describes the data points that make up the set.
    ${Dataset},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Stringified JSON that contains connector-specific default configuration for all datasets.
    # Each dataset can have its own configuration that overrides the default settings here.
    ${DefaultDatasetsConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IDatasetDestination[]]
    # Default destinations for a dataset.
    ${DefaultDatasetsDestination},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Stringified JSON that contains connector-specific default configuration for all events.
    # Each event can have its own configuration that overrides the default settings here.
    ${DefaultEventsConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IEventDestination[]]
    # Default destinations for an event.
    ${DefaultEventsDestination},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Stringified JSON that contains connector-specific default configuration for all management groups.
    # Each management group can have its own configuration that overrides the default settings here.
    ${DefaultManagementGroupsConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Stringified JSON that contains connector-specific default configuration for all streams.
    # Each stream can have its own configuration that overrides the default settings here.
    ${DefaultStreamsConfiguration},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IStreamDestination[]]
    # Default destinations for a stream.
    ${DefaultStreamsDestination},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Human-readable description of the asset.
    ${Description},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Name of the device resource
    ${DeviceRefDeviceName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # The name of endpoint to use
    ${DeviceRefEndpointName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Identifier used to detect changes in the asset.
    ${DiscoveryId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Human-readable display name.
    ${DisplayName},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset documentation reference.
    ${DocumentationUri},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredEventGroup[]]
    # Array of event groups that are part of the asset.
    # Each event group can have per-event group configuration.
    ${EventGroup},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset ID provided by the customer.
    ${ExternalAssetId},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset hardware revision number.
    ${HardwareRevision},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredManagementGroup[]]
    # Array of management groups that are part of the asset.
    # Each management group can have a per-group configuration.
    ${ManagementGroup},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset manufacturer.
    ${Manufacturer},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset manufacturer URI.
    ${ManufacturerUri},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset model.
    ${Model},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset product code.
    ${ProductCode},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset serial number.
    ${SerialNumber},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Asset software revision number.
    ${SoftwareRevision},

    [Parameter(ParameterSetName='CreateExpanded')]
    [AllowEmptyCollection()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.INamespaceDiscoveredStream[]]
    # Array of streams that are part of the asset.
    # Each stream can have a per-stream configuration.
    ${Stream},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(PossibleTypes=([Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrackedResourceTags]))]
    [System.Collections.Hashtable]
    # Resource tags.
    ${Tag},

    [Parameter(ParameterSetName='CreateExpanded')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.Int64]
    # An integer that is incremented each time the resource is modified.
    ${Version},

    [Parameter(ParameterSetName='CreateViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Create operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='CreateViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Body')]
    [System.String]
    # Json string supplied to the Create operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            CreateExpanded = 'Az.DeviceRegistry.private\New-AzDeviceRegistryNamespaceDiscoveredAsset_CreateExpanded';
            CreateViaJsonFilePath = 'Az.DeviceRegistry.private\New-AzDeviceRegistryNamespaceDiscoveredAsset_CreateViaJsonFilePath';
            CreateViaJsonString = 'Az.DeviceRegistry.private\New-AzDeviceRegistryNamespaceDiscoveredAsset_CreateViaJsonString';
        }
        if (('CreateExpanded', 'CreateViaJsonFilePath', 'CreateViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
