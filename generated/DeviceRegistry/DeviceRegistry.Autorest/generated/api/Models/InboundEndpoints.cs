// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Extensions;

    /// <summary>An endpoint to connect to the device.</summary>
    public partial class InboundEndpoints :
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IInboundEndpoints,
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IInboundEndpointsInternal
    {

        /// <summary>Backing field for <see cref="AdditionalConfiguration" /> property.</summary>
        private string _additionalConfiguration;

        /// <summary>
        /// Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Owned)]
        public string AdditionalConfiguration { get => this._additionalConfiguration; set => this._additionalConfiguration = value; }

        /// <summary>Backing field for <see cref="Address" /> property.</summary>
        private string _address;

        /// <summary>
        /// The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN,
        /// e.g., server.example.com).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Owned)]
        public string Address { get => this._address; set => this._address = value; }

        /// <summary>Backing field for <see cref="Authentication" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthentication _authentication;

        /// <summary>Defines the client authentication mechanism to the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthentication Authentication { get => (this._authentication = this._authentication ?? new Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.HostAuthentication()); set => this._authentication = value; }

        /// <summary>Defines the method to authenticate the user of the client at the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string AuthenticationMethod { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).Method; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).Method = value ?? null; }

        /// <summary>Backing field for <see cref="EndpointType" /> property.</summary>
        private string _endpointType;

        /// <summary>Type of connection endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Owned)]
        public string EndpointType { get => this._endpointType; set => this._endpointType = value; }

        /// <summary>Internal Acessors for Authentication</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthentication Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IInboundEndpointsInternal.Authentication { get => (this._authentication = this._authentication ?? new Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.HostAuthentication()); set { {_authentication = value;} } }

        /// <summary>Internal Acessors for AuthenticationUsernamePasswordCredentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IUsernamePasswordCredentials Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IInboundEndpointsInternal.AuthenticationUsernamePasswordCredentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).UsernamePasswordCredentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).UsernamePasswordCredentials = value ?? null /* model class */; }

        /// <summary>Internal Acessors for AuthenticationX509Credentials</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IX509CertificateCredentials Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IInboundEndpointsInternal.AuthenticationX509Credentials { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509Credentials; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509Credentials = value ?? null /* model class */; }

        /// <summary>Internal Acessors for TrustSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrustSettings Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IInboundEndpointsInternal.TrustSetting { get => (this._trustSetting = this._trustSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.TrustSettings()); set { {_trustSetting = value;} } }

        /// <summary>Backing field for <see cref="TrustSetting" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrustSettings _trustSetting;

        /// <summary>Defines server trust settings for the endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrustSettings TrustSetting { get => (this._trustSetting = this._trustSetting ?? new Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.TrustSettings()); set => this._trustSetting = value; }

        /// <summary>Defines a secret reference for certificates to trust.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string TrustSettingTrustList { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrustSettingsInternal)TrustSetting).TrustList; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrustSettingsInternal)TrustSetting).TrustList = value ?? null; }

        /// <summary>The name of the secret containing the password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string UsernamePasswordCredentialsPasswordSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).UsernamePasswordCredentialsPasswordSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).UsernamePasswordCredentialsPasswordSecretName = value ?? null; }

        /// <summary>The name of the secret containing the username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string UsernamePasswordCredentialsUsernameSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).UsernamePasswordCredentialsUsernameSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).UsernamePasswordCredentialsUsernameSecretName = value ?? null; }

        /// <summary>Backing field for <see cref="Version" /> property.</summary>
        private string _version;

        /// <summary>
        /// Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType
        /// Microsoft.Mqtt etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Owned)]
        public string Version { get => this._version; set => this._version = value; }

        /// <summary>
        /// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string X509CredentialsCertificateSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509CredentialsCertificateSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509CredentialsCertificateSecretName = value ?? null; }

        /// <summary>
        /// The name of the secret containing the combined intermediate certificates in PEM format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string X509CredentialsIntermediateCertificatesSecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509CredentialsIntermediateCertificatesSecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509CredentialsIntermediateCertificatesSecretName = value ?? null; }

        /// <summary>
        /// The name of the secret containing the certificate private key in PEM or DER format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Origin(Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PropertyOrigin.Inlined)]
        public string X509CredentialsKeySecretName { get => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509CredentialsKeySecretName; set => ((Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthenticationInternal)Authentication).X509CredentialsKeySecretName = value ?? null; }

        /// <summary>Creates an new <see cref="InboundEndpoints" /> instance.</summary>
        public InboundEndpoints()
        {

        }
    }
    /// An endpoint to connect to the device.
    public partial interface IInboundEndpoints :
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.IJsonSerializable
    {
        /// <summary>
        /// Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).",
        SerializedName = @"additionalConfiguration",
        PossibleTypes = new [] { typeof(string) })]
        string AdditionalConfiguration { get; set; }
        /// <summary>
        /// The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN,
        /// e.g., server.example.com).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN, e.g., server.example.com).",
        SerializedName = @"address",
        PossibleTypes = new [] { typeof(string) })]
        string Address { get; set; }
        /// <summary>Defines the method to authenticate the user of the client at the server.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines the method to authenticate the user of the client at the server.",
        SerializedName = @"method",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PSArgumentCompleterAttribute("Anonymous", "Certificate", "UsernamePassword")]
        string AuthenticationMethod { get; set; }
        /// <summary>Type of connection endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = true,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Type of connection endpoint.",
        SerializedName = @"endpointType",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointType { get; set; }
        /// <summary>Defines a secret reference for certificates to trust.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines a secret reference for certificates to trust.",
        SerializedName = @"trustList",
        PossibleTypes = new [] { typeof(string) })]
        string TrustSettingTrustList { get; set; }
        /// <summary>The name of the secret containing the password.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the secret containing the password.",
        SerializedName = @"passwordSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string UsernamePasswordCredentialsPasswordSecretName { get; set; }
        /// <summary>The name of the secret containing the username.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the secret containing the username.",
        SerializedName = @"usernameSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string UsernamePasswordCredentialsUsernameSecretName { get; set; }
        /// <summary>
        /// Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType
        /// Microsoft.Mqtt etc.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType Microsoft.Mqtt etc.",
        SerializedName = @"version",
        PossibleTypes = new [] { typeof(string) })]
        string Version { get; set; }
        /// <summary>
        /// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).",
        SerializedName = @"certificateSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string X509CredentialsCertificateSecretName { get; set; }
        /// <summary>
        /// The name of the secret containing the combined intermediate certificates in PEM format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the secret containing the combined intermediate certificates in PEM format.",
        SerializedName = @"intermediateCertificatesSecretName",
        PossibleTypes = new [] { typeof(string) })]
        string X509CredentialsIntermediateCertificatesSecretName { get; set; }
        /// <summary>
        /// The name of the secret containing the certificate private key in PEM or DER format.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The name of the secret containing the certificate private key in PEM or DER format.",
        SerializedName = @"keySecretName",
        PossibleTypes = new [] { typeof(string) })]
        string X509CredentialsKeySecretName { get; set; }

    }
    /// An endpoint to connect to the device.
    internal partial interface IInboundEndpointsInternal

    {
        /// <summary>
        /// Stringified JSON that contains configuration to be used by the connector (e.g., OPC UA, ONVIF).
        /// </summary>
        string AdditionalConfiguration { get; set; }
        /// <summary>
        /// The endpoint address & port. This can be either an IP address (e.g., 192.168.1.1) or a fully qualified domain name (FQDN,
        /// e.g., server.example.com).
        /// </summary>
        string Address { get; set; }
        /// <summary>Defines the client authentication mechanism to the server.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IHostAuthentication Authentication { get; set; }
        /// <summary>Defines the method to authenticate the user of the client at the server.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.PSArgumentCompleterAttribute("Anonymous", "Certificate", "UsernamePassword")]
        string AuthenticationMethod { get; set; }
        /// <summary>
        /// Defines the username and password references when UsernamePassword user authentication mode is selected.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IUsernamePasswordCredentials AuthenticationUsernamePasswordCredentials { get; set; }
        /// <summary>
        /// Defines the certificate reference when Certificate user authentication mode is selected.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.IX509CertificateCredentials AuthenticationX509Credentials { get; set; }
        /// <summary>Type of connection endpoint.</summary>
        string EndpointType { get; set; }
        /// <summary>Defines server trust settings for the endpoint.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.DeviceRegistry.Models.ITrustSettings TrustSetting { get; set; }
        /// <summary>Defines a secret reference for certificates to trust.</summary>
        string TrustSettingTrustList { get; set; }
        /// <summary>The name of the secret containing the password.</summary>
        string UsernamePasswordCredentialsPasswordSecretName { get; set; }
        /// <summary>The name of the secret containing the username.</summary>
        string UsernamePasswordCredentialsUsernameSecretName { get; set; }
        /// <summary>
        /// Protocol version associated with the endpoint e.g. 1 or 2 for endpointType Microsoft.HTTP, and 3.5 or 5.0 for endpointType
        /// Microsoft.Mqtt etc.
        /// </summary>
        string Version { get; set; }
        /// <summary>
        /// The name of the secret containing the certificate and private key (e.g. stored as .der/.pem or .der/.pfx).
        /// </summary>
        string X509CredentialsCertificateSecretName { get; set; }
        /// <summary>
        /// The name of the secret containing the combined intermediate certificates in PEM format.
        /// </summary>
        string X509CredentialsIntermediateCertificatesSecretName { get; set; }
        /// <summary>
        /// The name of the secret containing the certificate private key in PEM or DER format.
        /// </summary>
        string X509CredentialsKeySecretName { get; set; }

    }
}