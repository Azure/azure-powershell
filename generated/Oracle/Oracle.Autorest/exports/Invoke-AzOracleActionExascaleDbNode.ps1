
# ----------------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Code generated by Microsoft (R) AutoRest Code Generator.Changes may cause incorrect behavior and will be lost if the code
# is regenerated.
# ----------------------------------------------------------------------------------

<#
.Synopsis
VM actions on DbNode of ExadbVmCluster by the provided filter
.Description
VM actions on DbNode of ExadbVmCluster by the provided filter
.Example
$vmClusterName = "OFake_PowerShellTestVmCluster"
$resourceGroup = "PowerShellTestRg"
$stopActionName = "Stop"
            
$dbNodeList = Get-AzOracleExascaleDbNode -Exadbvmclustername $vmClusterName -ResourceGroupName $resourceGroup
$dbNodeOcid1 = $dbNodeList[0].Name
            
Invoke-AzOracleActionExascaleDbNode -ExadbVMClusterName $vmClusterName -ExascaleDbNodeName $dbNodeOcid1 -ResourceGroupName $resourceGroup -Action $stopActionName

.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbNodeAction
.Inputs
Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IOracleIdentity
.Outputs
Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbActionResponse
.Notes
COMPLEX PARAMETER PROPERTIES

To create the parameters described below, construct a hash table containing the appropriate properties. For information on hash tables, run Get-Help about_Hash_Tables.

BODY <IDbNodeAction>: DbNode action object
  Action <String>: Db action

EXADBVMCLUSTERINPUTOBJECT <IOracleIdentity>: Identity Parameter
  [Adbbackupid <String>]: AutonomousDatabaseBackup id
  [Adbscharsetname <String>]: AutonomousDatabaseCharacterSet name
  [Adbsncharsetname <String>]: AutonomousDatabaseNationalCharacterSets name
  [Autonomousdatabasename <String>]: The database name.
  [Autonomousdbversionsname <String>]: AutonomousDbVersion name
  [Cloudexadatainfrastructurename <String>]: CloudExadataInfrastructure name
  [Cloudvmclustername <String>]: CloudVmCluster name
  [Dbnodeocid <String>]: DbNode OCID.
  [Dbserverocid <String>]: DbServer OCID.
  [Dbsystemshapename <String>]: DbSystemShape name
  [Dnsprivateviewocid <String>]: DnsPrivateView OCID
  [Dnsprivatezonename <String>]: DnsPrivateZone name
  [ExadbVMClusterName <String>]: The name of the ExadbVmCluster
  [ExascaleDbNodeName <String>]: The name of the ExascaleDbNode
  [ExascaleDbStorageVaultName <String>]: The name of the ExascaleDbStorageVault
  [FlexComponentName <String>]: The name of the FlexComponent
  [GiMinorVersionName <String>]: The name of the GiMinorVersion
  [Giversionname <String>]: GiVersion name
  [Id <String>]: Resource identity path
  [Location <String>]: The name of the Azure region.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
  [Systemversionname <String>]: SystemVersion name
  [Virtualnetworkaddressname <String>]: Virtual IP address hostname.

INPUTOBJECT <IOracleIdentity>: Identity Parameter
  [Adbbackupid <String>]: AutonomousDatabaseBackup id
  [Adbscharsetname <String>]: AutonomousDatabaseCharacterSet name
  [Adbsncharsetname <String>]: AutonomousDatabaseNationalCharacterSets name
  [Autonomousdatabasename <String>]: The database name.
  [Autonomousdbversionsname <String>]: AutonomousDbVersion name
  [Cloudexadatainfrastructurename <String>]: CloudExadataInfrastructure name
  [Cloudvmclustername <String>]: CloudVmCluster name
  [Dbnodeocid <String>]: DbNode OCID.
  [Dbserverocid <String>]: DbServer OCID.
  [Dbsystemshapename <String>]: DbSystemShape name
  [Dnsprivateviewocid <String>]: DnsPrivateView OCID
  [Dnsprivatezonename <String>]: DnsPrivateZone name
  [ExadbVMClusterName <String>]: The name of the ExadbVmCluster
  [ExascaleDbNodeName <String>]: The name of the ExascaleDbNode
  [ExascaleDbStorageVaultName <String>]: The name of the ExascaleDbStorageVault
  [FlexComponentName <String>]: The name of the FlexComponent
  [GiMinorVersionName <String>]: The name of the GiMinorVersion
  [Giversionname <String>]: GiVersion name
  [Id <String>]: Resource identity path
  [Location <String>]: The name of the Azure region.
  [ResourceGroupName <String>]: The name of the resource group. The name is case insensitive.
  [SubscriptionId <String>]: The ID of the target subscription. The value must be an UUID.
  [Systemversionname <String>]: SystemVersion name
  [Virtualnetworkaddressname <String>]: Virtual IP address hostname.
.Link
https://learn.microsoft.com/powershell/module/az.oracle/invoke-azoracleactionexascaledbnode
#>
function Invoke-AzOracleActionExascaleDbNode {
[OutputType([Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbActionResponse])]
[CmdletBinding(DefaultParameterSetName='ActionExpanded', PositionalBinding=$false, SupportsShouldProcess, ConfirmImpact='Medium')]
param(
    [Parameter(ParameterSetName='ActionExpanded', Mandatory)]
    [Parameter(ParameterSetName='ActionViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ActionViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Path')]
    [System.String]
    # The name of the ExadbVmCluster
    ${ExadbVMClusterName},

    [Parameter(ParameterSetName='ActionExpanded', Mandatory)]
    [Parameter(ParameterSetName='ActionViaIdentityExadbVMCluster', Mandatory)]
    [Parameter(ParameterSetName='ActionViaIdentityExadbVMClusterExpanded', Mandatory)]
    [Parameter(ParameterSetName='ActionViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ActionViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Path')]
    [System.String]
    # The name of the ExascaleDbNode
    ${ExascaleDbNodeName},

    [Parameter(ParameterSetName='ActionExpanded', Mandatory)]
    [Parameter(ParameterSetName='ActionViaJsonFilePath', Mandatory)]
    [Parameter(ParameterSetName='ActionViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Path')]
    [System.String]
    # The name of the resource group.
    # The name is case insensitive.
    ${ResourceGroupName},

    [Parameter(ParameterSetName='ActionExpanded')]
    [Parameter(ParameterSetName='ActionViaJsonFilePath')]
    [Parameter(ParameterSetName='ActionViaJsonString')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.DefaultInfo(Script='(Get-AzContext).Subscription.Id')]
    [System.String]
    # The ID of the target subscription.
    # The value must be an UUID.
    ${SubscriptionId},

    [Parameter(ParameterSetName='ActionViaIdentityExadbVMCluster', Mandatory, ValueFromPipeline)]
    [Parameter(ParameterSetName='ActionViaIdentityExadbVMClusterExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IOracleIdentity]
    # Identity Parameter
    ${ExadbVMClusterInputObject},

    [Parameter(ParameterSetName='ActionViaIdentityExpanded', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Path')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IOracleIdentity]
    # Identity Parameter
    ${InputObject},

    [Parameter(ParameterSetName='ActionExpanded', Mandatory)]
    [Parameter(ParameterSetName='ActionViaIdentityExadbVMClusterExpanded', Mandatory)]
    [Parameter(ParameterSetName='ActionViaIdentityExpanded', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.PSArgumentCompleterAttribute("Start", "Stop", "SoftReset", "Reset")]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Body')]
    [System.String]
    # Db action
    ${Action},

    [Parameter(ParameterSetName='ActionViaIdentityExadbVMCluster', Mandatory, ValueFromPipeline)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Body')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Models.IDbNodeAction]
    # DbNode action object
    ${Body},

    [Parameter(ParameterSetName='ActionViaJsonFilePath', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Body')]
    [System.String]
    # Path of Json file supplied to the Action operation
    ${JsonFilePath},

    [Parameter(ParameterSetName='ActionViaJsonString', Mandatory)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Body')]
    [System.String]
    # Json string supplied to the Action operation
    ${JsonString},

    [Parameter()]
    [Alias('AzureRMContext', 'AzureCredential')]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Azure')]
    [System.Management.Automation.PSObject]
    # The DefaultProfile parameter is not functional.
    # Use the SubscriptionId parameter when available if executing the cmdlet against a different subscription.
    ${DefaultProfile},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command as a job
    ${AsJob},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Wait for .NET debugger to attach
    ${Break},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be appended to the front of the pipeline
    ${HttpPipelineAppend},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.SendAsyncStep[]]
    # SendAsync Pipeline Steps to be prepended to the front of the pipeline
    ${HttpPipelinePrepend},

    [Parameter()]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Run the command asynchronously
    ${NoWait},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [System.Uri]
    # The URI for the proxy server to use
    ${Proxy},

    [Parameter(DontShow)]
    [ValidateNotNull()]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [System.Management.Automation.PSCredential]
    # Credentials for a proxy server to use for the remote call
    ${ProxyCredential},

    [Parameter(DontShow)]
    [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Category('Runtime')]
    [System.Management.Automation.SwitchParameter]
    # Use the default credentials for the proxy
    ${ProxyUseDefaultCredentials}
)

begin {
    try {
        $outBuffer = $null
        if ($PSBoundParameters.TryGetValue('OutBuffer', [ref]$outBuffer)) {
            $PSBoundParameters['OutBuffer'] = 1
        }
        $parameterSet = $PSCmdlet.ParameterSetName
        
        $testPlayback = $false
        $PSBoundParameters['HttpPipelinePrepend'] | Foreach-Object { if ($_) { $testPlayback = $testPlayback -or ('Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.PipelineMock' -eq $_.Target.GetType().FullName -and 'Playback' -eq $_.Target.Mode) } }

        $context = Get-AzContext
        if (-not $context -and -not $testPlayback) {
            Write-Error "No Azure login detected. Please run 'Connect-AzAccount' to log in."
            exit
        }

        if ($null -eq [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion) {
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PowerShellVersion = $PSVersionTable.PSVersion.ToString()
        }         
        $preTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        if ($preTelemetryId -eq '') {
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId =(New-Guid).ToString()
            [Microsoft.Azure.PowerShell.Cmdlets.Oracle.module]::Instance.Telemetry.Invoke('Create', $MyInvocation, $parameterSet, $PSCmdlet)
        } else {
            $internalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
            if ($internalCalledCmdlets -eq '') {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $MyInvocation.MyCommand.Name
            } else {
                [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets += ',' + $MyInvocation.MyCommand.Name
            }
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = 'internal'
        }

        $mapping = @{
            ActionExpanded = 'Az.Oracle.private\Invoke-AzOracleActionExascaleDbNode_ActionExpanded';
            ActionViaIdentityExadbVMCluster = 'Az.Oracle.private\Invoke-AzOracleActionExascaleDbNode_ActionViaIdentityExadbVMCluster';
            ActionViaIdentityExadbVMClusterExpanded = 'Az.Oracle.private\Invoke-AzOracleActionExascaleDbNode_ActionViaIdentityExadbVMClusterExpanded';
            ActionViaIdentityExpanded = 'Az.Oracle.private\Invoke-AzOracleActionExascaleDbNode_ActionViaIdentityExpanded';
            ActionViaJsonFilePath = 'Az.Oracle.private\Invoke-AzOracleActionExascaleDbNode_ActionViaJsonFilePath';
            ActionViaJsonString = 'Az.Oracle.private\Invoke-AzOracleActionExascaleDbNode_ActionViaJsonString';
        }
        if (('ActionExpanded', 'ActionViaJsonFilePath', 'ActionViaJsonString') -contains $parameterSet -and -not $PSBoundParameters.ContainsKey('SubscriptionId') ) {
            if ($testPlayback) {
                $PSBoundParameters['SubscriptionId'] = . (Join-Path $PSScriptRoot '..' 'utils' 'Get-SubscriptionIdTestSafe.ps1')
            } else {
                $PSBoundParameters['SubscriptionId'] = (Get-AzContext).Subscription.Id
            }
        }
        $cmdInfo = Get-Command -Name $mapping[$parameterSet]
        [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.MessageAttributeHelper]::ProcessCustomAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
        if ($null -ne $MyInvocation.MyCommand -and [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets -notcontains $MyInvocation.MyCommand.Name -and [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.MessageAttributeHelper]::ContainsPreviewAttribute($cmdInfo, $MyInvocation)){
            [Microsoft.Azure.PowerShell.Cmdlets.Oracle.Runtime.MessageAttributeHelper]::ProcessPreviewMessageAttributesAtRuntime($cmdInfo, $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Utilities.Common.AzurePSCmdlet]::PromptedPreviewMessageCmdlets.Enqueue($MyInvocation.MyCommand.Name)
        }
        $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Cmdlet)
        if ($wrappedCmd -eq $null) {
            $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand(($mapping[$parameterSet]), [System.Management.Automation.CommandTypes]::Function)
        }
        $scriptCmd = {& $wrappedCmd @PSBoundParameters}
        $steppablePipeline = $scriptCmd.GetSteppablePipeline($MyInvocation.CommandOrigin)
        $steppablePipeline.Begin($PSCmdlet)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
}

process {
    try {
        $steppablePipeline.Process($_)
    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }

    finally {
        $backupTelemetryId = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId
        $backupInternalCalledCmdlets = [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
    }

}
end {
    try {
        $steppablePipeline.End()

        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $backupTelemetryId
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::InternalCalledCmdlets = $backupInternalCalledCmdlets
        if ($preTelemetryId -eq '') {
            [Microsoft.Azure.PowerShell.Cmdlets.Oracle.module]::Instance.Telemetry.Invoke('Send', $MyInvocation, $parameterSet, $PSCmdlet)
            [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        }
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::TelemetryId = $preTelemetryId

    } catch {
        [Microsoft.WindowsAzure.Commands.Common.MetricHelper]::ClearTelemetryContext()
        throw
    }
} 
}
