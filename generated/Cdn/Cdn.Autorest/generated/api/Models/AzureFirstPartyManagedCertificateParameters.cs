// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>
    /// Azure FirstParty Managed Certificate provided by other first party resource providers to enable HTTPS.
    /// </summary>
    public partial class AzureFirstPartyManagedCertificateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ISecretParameters" />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ISecretParameters __secretParameters = new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.SecretParameters();

        /// <summary>Backing field for <see cref="CertificateAuthority" /> property.</summary>
        private string _certificateAuthority;

        /// <summary>Certificate issuing authority.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string CertificateAuthority { get => this._certificateAuthority; }

        /// <summary>Backing field for <see cref="ExpirationDate" /> property.</summary>
        private string _expirationDate;

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string ExpirationDate { get => this._expirationDate; }

        /// <summary>Internal Acessors for CertificateAuthority</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal.CertificateAuthority { get => this._certificateAuthority; set { {_certificateAuthority = value;} } }

        /// <summary>Internal Acessors for ExpirationDate</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal.ExpirationDate { get => this._expirationDate; set { {_expirationDate = value;} } }

        /// <summary>Internal Acessors for SecretSource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal.SecretSource { get => (this._secretSource = this._secretSource ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ResourceReference()); set { {_secretSource = value;} } }

        /// <summary>Internal Acessors for SecretSourceId</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal.SecretSourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReferenceInternal)SecretSource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReferenceInternal)SecretSource).Id = value; }

        /// <summary>Internal Acessors for Subject</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal.Subject { get => this._subject; set { {_subject = value;} } }

        /// <summary>Internal Acessors for Thumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAzureFirstPartyManagedCertificateParametersInternal.Thumbprint { get => this._thumbprint; set { {_thumbprint = value;} } }

        /// <summary>Backing field for <see cref="SecretSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference _secretSource;

        /// <summary>
        /// Resource reference to the Azure Key Vault certificate. Expected to be in format of /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference SecretSource { get => (this._secretSource = this._secretSource ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ResourceReference()); }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string SecretSourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReferenceInternal)SecretSource).Id; }

        /// <summary>Backing field for <see cref="Subject" /> property.</summary>
        private string _subject;

        /// <summary>Subject name in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string Subject { get => this._subject; }

        /// <summary>Backing field for <see cref="SubjectAlternativeName" /> property.</summary>
        private System.Collections.Generic.List<string> _subjectAlternativeName;

        /// <summary>The list of SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public System.Collections.Generic.List<string> SubjectAlternativeName { get => this._subjectAlternativeName; set => this._subjectAlternativeName = value; }

        /// <summary>Backing field for <see cref="Thumbprint" /> property.</summary>
        private string _thumbprint;

        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string Thumbprint { get => this._thumbprint; }

        /// <summary>The type of the secret resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Constant]
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public string Type { get => "AzureFirstPartyManagedCertificate"; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ISecretParametersInternal)__secretParameters).Type = "AzureFirstPartyManagedCertificate"; }

        /// <summary>
        /// Creates an new <see cref="AzureFirstPartyManagedCertificateParameters" /> instance.
        /// </summary>
        public AzureFirstPartyManagedCertificateParameters()
        {
            this.__secretParameters.Type = "AzureFirstPartyManagedCertificate";
        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__secretParameters), __secretParameters);
            await eventListener.AssertObjectIsValid(nameof(__secretParameters), __secretParameters);
        }
    }
    /// Azure FirstParty Managed Certificate provided by other first party resource providers to enable HTTPS.
    public partial interface IAzureFirstPartyManagedCertificateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ISecretParameters
    {
        /// <summary>Certificate issuing authority.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate issuing authority.",
        SerializedName = @"certificateAuthority",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateAuthority { get;  }
        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate expiration date.",
        SerializedName = @"expirationDate",
        PossibleTypes = new [] { typeof(string) })]
        string ExpirationDate { get;  }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SecretSourceId { get;  }
        /// <summary>Subject name in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Subject name in the certificate.",
        SerializedName = @"subject",
        PossibleTypes = new [] { typeof(string) })]
        string Subject { get;  }
        /// <summary>The list of SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The list of SANs.",
        SerializedName = @"subjectAlternativeNames",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> SubjectAlternativeName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"Certificate thumbprint.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get;  }

    }
    /// Azure FirstParty Managed Certificate provided by other first party resource providers to enable HTTPS.
    internal partial interface IAzureFirstPartyManagedCertificateParametersInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ISecretParametersInternal
    {
        /// <summary>Certificate issuing authority.</summary>
        string CertificateAuthority { get; set; }
        /// <summary>Certificate expiration date.</summary>
        string ExpirationDate { get; set; }
        /// <summary>
        /// Resource reference to the Azure Key Vault certificate. Expected to be in format of /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference SecretSource { get; set; }
        /// <summary>Resource ID.</summary>
        string SecretSourceId { get; set; }
        /// <summary>Subject name in the certificate.</summary>
        string Subject { get; set; }
        /// <summary>The list of SANs.</summary>
        System.Collections.Generic.List<string> SubjectAlternativeName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        string Thumbprint { get; set; }

    }
}