// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>Properties required to create or update an endpoint.</summary>
    public partial class EndpointUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersInternal
    {

        /// <summary>
        /// List of content types on which compression applies. The value should be a valid MIME type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> ContentTypesToCompress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).ContentTypesToCompress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).ContentTypesToCompress = value ?? null /* arrayOf */; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string DefaultOriginGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DefaultOriginGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DefaultOriginGroupId = value ?? null; }

        /// <summary>User-friendly description of the policy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string DeliveryPolicyDescription { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DeliveryPolicyDescription; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DeliveryPolicyDescription = value ?? null; }

        /// <summary>A list of the delivery rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IDeliveryRule> DeliveryPolicyRule { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DeliveryPolicyRule; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DeliveryPolicyRule = value ?? null /* arrayOf */; }

        /// <summary>
        /// List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified
        /// path or content, e.g. block APAC for path /pictures/
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IGeoFilter> GeoFilter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).GeoFilter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).GeoFilter = value ?? null /* arrayOf */; }

        /// <summary>
        /// Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will
        /// be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content
        /// is smaller than 1 byte or larger than 1 MB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public bool? IsCompressionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).IsCompressionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).IsCompressionEnabled = value ?? default(bool); }

        /// <summary>
        /// Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS)
        /// must be allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public bool? IsHttpAllowed { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).IsHttpAllowed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).IsHttpAllowed = value ?? default(bool); }

        /// <summary>
        /// Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS)
        /// must be allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public bool? IsHttpsAllowed { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).IsHttpsAllowed; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).IsHttpsAllowed = value ?? default(bool); }

        /// <summary>Internal Acessors for DefaultOriginGroup</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersInternal.DefaultOriginGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DefaultOriginGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DefaultOriginGroup = value; }

        /// <summary>Internal Acessors for DeliveryPolicy</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersDeliveryPolicy Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersInternal.DeliveryPolicy { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DeliveryPolicy; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).DeliveryPolicy = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParameters Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.EndpointPropertiesUpdateParameters()); set { {_property = value;} } }

        /// <summary>Internal Acessors for WebApplicationFirewallPolicyLink</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersInternal.WebApplicationFirewallPolicyLink { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).WebApplicationFirewallPolicyLink; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).WebApplicationFirewallPolicyLink = value; }

        /// <summary>
        /// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this
        /// information, CDN can apply scenario driven optimization.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string OptimizationType { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).OptimizationType; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).OptimizationType = value ?? null; }

        /// <summary>
        /// The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses
        /// single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname
        /// determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header
        /// value to match the origin hostname by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string OriginHostHeader { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).OriginHostHeader; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).OriginHostHeader = value ?? null; }

        /// <summary>
        /// A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string OriginPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).OriginPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).OriginPath = value ?? null; }

        /// <summary>
        /// Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal
        /// routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string ProbePath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).ProbePath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).ProbePath = value ?? null; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParameters _property;

        /// <summary>The JSON object containing endpoint update parameters.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParameters Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.EndpointPropertiesUpdateParameters()); set => this._property = value; }

        /// <summary>
        /// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching
        /// to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string QueryStringCachingBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).QueryStringCachingBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).QueryStringCachingBehavior = value ?? null; }

        /// <summary>Backing field for <see cref="Tag" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersTags _tag;

        /// <summary>Endpoint tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersTags Tag { get => (this._tag = this._tag ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.EndpointUpdateParametersTags()); set => this._tag = value; }

        /// <summary>List of keys used to validate the signed URL hashes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IUrlSigningKey> UrlSigningKey { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).UrlSigningKey; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).UrlSigningKey = value ?? null /* arrayOf */; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string WebApplicationFirewallPolicyLinkId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).WebApplicationFirewallPolicyLinkId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersInternal)Property).WebApplicationFirewallPolicyLinkId = value ?? null; }

        /// <summary>Creates an new <see cref="EndpointUpdateParameters" /> instance.</summary>
        public EndpointUpdateParameters()
        {

        }
    }
    /// Properties required to create or update an endpoint.
    public partial interface IEndpointUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable
    {
        /// <summary>
        /// List of content types on which compression applies. The value should be a valid MIME type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of content types on which compression applies. The value should be a valid MIME type.",
        SerializedName = @"contentTypesToCompress",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> ContentTypesToCompress { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string DefaultOriginGroupId { get; set; }
        /// <summary>User-friendly description of the policy.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"User-friendly description of the policy.",
        SerializedName = @"description",
        PossibleTypes = new [] { typeof(string) })]
        string DeliveryPolicyDescription { get; set; }
        /// <summary>A list of the delivery rules.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A list of the delivery rules.",
        SerializedName = @"rules",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IDeliveryRule) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IDeliveryRule> DeliveryPolicyRule { get; set; }
        /// <summary>
        /// List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified
        /// path or content, e.g. block APAC for path /pictures/
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified path or content, e.g. block APAC for path /pictures/",
        SerializedName = @"geoFilters",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IGeoFilter) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IGeoFilter> GeoFilter { get; set; }
        /// <summary>
        /// Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will
        /// be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content
        /// is smaller than 1 byte or larger than 1 MB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content is smaller than 1 byte or larger than 1 MB.",
        SerializedName = @"isCompressionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsCompressionEnabled { get; set; }
        /// <summary>
        /// Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS)
        /// must be allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.",
        SerializedName = @"isHttpAllowed",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsHttpAllowed { get; set; }
        /// <summary>
        /// Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS)
        /// must be allowed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS) must be allowed.",
        SerializedName = @"isHttpsAllowed",
        PossibleTypes = new [] { typeof(bool) })]
        bool? IsHttpsAllowed { get; set; }
        /// <summary>
        /// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this
        /// information, CDN can apply scenario driven optimization.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this information, CDN can apply scenario driven optimization.",
        SerializedName = @"optimizationType",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("GeneralWebDelivery", "GeneralMediaStreaming", "VideoOnDemandMediaStreaming", "LargeFileDownload", "DynamicSiteAcceleration")]
        string OptimizationType { get; set; }
        /// <summary>
        /// The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses
        /// single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname
        /// determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header
        /// value to match the origin hostname by default.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header value to match the origin hostname by default.",
        SerializedName = @"originHostHeader",
        PossibleTypes = new [] { typeof(string) })]
        string OriginHostHeader { get; set; }
        /// <summary>
        /// A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.",
        SerializedName = @"originPath",
        PossibleTypes = new [] { typeof(string) })]
        string OriginPath { get; set; }
        /// <summary>
        /// Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal
        /// routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.",
        SerializedName = @"probePath",
        PossibleTypes = new [] { typeof(string) })]
        string ProbePath { get; set; }
        /// <summary>
        /// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching
        /// to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching to prevent requests that contain query strings from being cached, or cache every request with a unique URL.",
        SerializedName = @"queryStringCachingBehavior",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("IgnoreQueryString", "BypassCaching", "UseQueryString", "NotSet")]
        string QueryStringCachingBehavior { get; set; }
        /// <summary>Endpoint tags.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Endpoint tags.",
        SerializedName = @"tags",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersTags) })]
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersTags Tag { get; set; }
        /// <summary>List of keys used to validate the signed URL hashes.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of keys used to validate the signed URL hashes.",
        SerializedName = @"urlSigningKeys",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IUrlSigningKey) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IUrlSigningKey> UrlSigningKey { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string WebApplicationFirewallPolicyLinkId { get; set; }

    }
    /// Properties required to create or update an endpoint.
    internal partial interface IEndpointUpdateParametersInternal

    {
        /// <summary>
        /// List of content types on which compression applies. The value should be a valid MIME type.
        /// </summary>
        System.Collections.Generic.List<string> ContentTypesToCompress { get; set; }
        /// <summary>A reference to the origin group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference DefaultOriginGroup { get; set; }
        /// <summary>Resource ID.</summary>
        string DefaultOriginGroupId { get; set; }
        /// <summary>A policy that specifies the delivery rules to be used for an endpoint.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersDeliveryPolicy DeliveryPolicy { get; set; }
        /// <summary>User-friendly description of the policy.</summary>
        string DeliveryPolicyDescription { get; set; }
        /// <summary>A list of the delivery rules.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IDeliveryRule> DeliveryPolicyRule { get; set; }
        /// <summary>
        /// List of rules defining the user's geo access within a CDN endpoint. Each geo filter defines an access rule to a specified
        /// path or content, e.g. block APAC for path /pictures/
        /// </summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IGeoFilter> GeoFilter { get; set; }
        /// <summary>
        /// Indicates whether content compression is enabled on CDN. Default value is false. If compression is enabled, content will
        /// be served as compressed if user requests for a compressed version. Content won't be compressed on CDN when requested content
        /// is smaller than 1 byte or larger than 1 MB.
        /// </summary>
        bool? IsCompressionEnabled { get; set; }
        /// <summary>
        /// Indicates whether HTTP traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS)
        /// must be allowed.
        /// </summary>
        bool? IsHttpAllowed { get; set; }
        /// <summary>
        /// Indicates whether HTTPS traffic is allowed on the endpoint. Default value is true. At least one protocol (HTTP or HTTPS)
        /// must be allowed.
        /// </summary>
        bool? IsHttpsAllowed { get; set; }
        /// <summary>
        /// Specifies what scenario the customer wants this CDN endpoint to optimize for, e.g. Download, Media services. With this
        /// information, CDN can apply scenario driven optimization.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("GeneralWebDelivery", "GeneralMediaStreaming", "VideoOnDemandMediaStreaming", "LargeFileDownload", "DynamicSiteAcceleration")]
        string OptimizationType { get; set; }
        /// <summary>
        /// The host header value sent to the origin with each request. This property at Endpoint is only allowed when endpoint uses
        /// single origin and can be overridden by the same property specified at origin.If you leave this blank, the request hostname
        /// determines this value. Azure CDN origins, such as Web Apps, Blob Storage, and Cloud Services require this host header
        /// value to match the origin hostname by default.
        /// </summary>
        string OriginHostHeader { get; set; }
        /// <summary>
        /// A directory path on the origin that CDN can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        string OriginPath { get; set; }
        /// <summary>
        /// Path to a file hosted on the origin which helps accelerate delivery of the dynamic content and calculate the most optimal
        /// routes for the CDN. This is relative to the origin path. This property is only relevant when using a single origin.
        /// </summary>
        string ProbePath { get; set; }
        /// <summary>The JSON object containing endpoint update parameters.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParameters Property { get; set; }
        /// <summary>
        /// Defines how CDN caches requests that include query strings. You can ignore any query strings when caching, bypass caching
        /// to prevent requests that contain query strings from being cached, or cache every request with a unique URL.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("IgnoreQueryString", "BypassCaching", "UseQueryString", "NotSet")]
        string QueryStringCachingBehavior { get; set; }
        /// <summary>Endpoint tags.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointUpdateParametersTags Tag { get; set; }
        /// <summary>List of keys used to validate the signed URL hashes.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IUrlSigningKey> UrlSigningKey { get; set; }
        /// <summary>Defines the Web Application Firewall policy for the endpoint (if applicable)</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IEndpointPropertiesUpdateParametersWebApplicationFirewallPolicyLink WebApplicationFirewallPolicyLink { get; set; }
        /// <summary>Resource ID.</summary>
        string WebApplicationFirewallPolicyLinkId { get; set; }

    }
}