// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>Customer Certificate used for https</summary>
    public partial class CustomerCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICustomerCertificate,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICustomerCertificateInternal,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IValidates
    {
        /// <summary>
        /// Backing field for Inherited model <see cref= "Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificate"
        /// />
        /// </summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificate __certificate = new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.Certificate();

        /// <summary>Backing field for <see cref="CertificateAuthority" /> property.</summary>
        private string _certificateAuthority;

        /// <summary>Certificate issuing authority.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string CertificateAuthority { get => this._certificateAuthority; }

        /// <summary>Certificate expiration date.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public string ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).ExpirationDate; }

        /// <summary>Internal Acessors for ExpirationDate</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal.ExpirationDate { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).ExpirationDate; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).ExpirationDate = value; }

        /// <summary>Internal Acessors for Subject</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal.Subject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).Subject; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).Subject = value; }

        /// <summary>Internal Acessors for CertificateAuthority</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICustomerCertificateInternal.CertificateAuthority { get => this._certificateAuthority; set { {_certificateAuthority = value;} } }

        /// <summary>Internal Acessors for SecretSource</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICustomerCertificateInternal.SecretSource { get => (this._secretSource = this._secretSource ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ResourceReference()); set { {_secretSource = value;} } }

        /// <summary>Internal Acessors for Thumbprint</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICustomerCertificateInternal.Thumbprint { get => this._thumbprint; set { {_thumbprint = value;} } }

        /// <summary>Backing field for <see cref="SecretSource" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.IResourceReference _secretSource;

        /// <summary>
        /// Resource reference to the Azure Key Vault certificate. Expected to be in format of /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.IResourceReference SecretSource { get => (this._secretSource = this._secretSource ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ResourceReference()); set => this._secretSource = value; }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string SecretSourceId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.IResourceReferenceInternal)SecretSource).Id; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.IResourceReferenceInternal)SecretSource).Id = value ?? null; }

        /// <summary>Backing field for <see cref="SecretVersion" /> property.</summary>
        private string _secretVersion;

        /// <summary>Certificate version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string SecretVersion { get => this._secretVersion; set => this._secretVersion = value; }

        /// <summary>Subject name in the certificate.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public string Subject { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).Subject; }

        /// <summary>Backing field for <see cref="SubjectAlternativeName" /> property.</summary>
        private string[] _subjectAlternativeName;

        /// <summary>The list of SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string[] SubjectAlternativeName { get => this._subjectAlternativeName; set => this._subjectAlternativeName = value; }

        /// <summary>Backing field for <see cref="Thumbprint" /> property.</summary>
        private string _thumbprint;

        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public string Thumbprint { get => this._thumbprint; }

        /// <summary>The type of the secret resource.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inherited)]
        public Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.SecretType? Type { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).Type; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal)__certificate).Type = value ?? ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Support.SecretType)""); }

        /// <summary>Backing field for <see cref="UseLatestVersion" /> property.</summary>
        private bool? _useLatestVersion;

        /// <summary>Whether to use the latest version for the certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        public bool? UseLatestVersion { get => this._useLatestVersion; set => this._useLatestVersion = value; }

        /// <summary>Creates an new <see cref="CustomerCertificate" /> instance.</summary>
        public CustomerCertificate()
        {

        }

        /// <summary>Validates that this object meets the validation criteria.</summary>
        /// <param name="eventListener">an <see cref="Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener" /> instance that will receive validation
        /// events.</param>
        /// <returns>
        /// A <see cref = "global::System.Threading.Tasks.Task" /> that will be complete when validation is completed.
        /// </returns>
        public async global::System.Threading.Tasks.Task Validate(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IEventListener eventListener)
        {
            await eventListener.AssertNotNull(nameof(__certificate), __certificate);
            await eventListener.AssertObjectIsValid(nameof(__certificate), __certificate);
        }
    }
    /// Customer Certificate used for https
    public partial interface ICustomerCertificate :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificate
    {
        /// <summary>Certificate issuing authority.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate issuing authority.",
        SerializedName = @"certificateAuthority",
        PossibleTypes = new [] { typeof(string) })]
        string CertificateAuthority { get;  }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string SecretSourceId { get; set; }
        /// <summary>Certificate version.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Certificate version.",
        SerializedName = @"secretVersion",
        PossibleTypes = new [] { typeof(string) })]
        string SecretVersion { get; set; }
        /// <summary>The list of SANs.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"The list of SANs.",
        SerializedName = @"subjectAlternativeNames",
        PossibleTypes = new [] { typeof(string) })]
        string[] SubjectAlternativeName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Description = @"Certificate thumbprint.",
        SerializedName = @"thumbprint",
        PossibleTypes = new [] { typeof(string) })]
        string Thumbprint { get;  }
        /// <summary>Whether to use the latest version for the certificate</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Description = @"Whether to use the latest version for the certificate",
        SerializedName = @"useLatestVersion",
        PossibleTypes = new [] { typeof(bool) })]
        bool? UseLatestVersion { get; set; }

    }
    /// Customer Certificate used for https
    internal partial interface ICustomerCertificateInternal :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.ICertificateInternal
    {
        /// <summary>Certificate issuing authority.</summary>
        string CertificateAuthority { get; set; }
        /// <summary>
        /// Resource reference to the Azure Key Vault certificate. Expected to be in format of /subscriptions/{​​​​​​​​​subscriptionId}​​​​​​​​​/resourceGroups/{​​​​​​​​​resourceGroupName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/providers/Microsoft.KeyVault/vaults/{vaultName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​/secrets/{certificateName}​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​​
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.Api20240201.IResourceReference SecretSource { get; set; }
        /// <summary>Resource ID.</summary>
        string SecretSourceId { get; set; }
        /// <summary>Certificate version.</summary>
        string SecretVersion { get; set; }
        /// <summary>The list of SANs.</summary>
        string[] SubjectAlternativeName { get; set; }
        /// <summary>Certificate thumbprint.</summary>
        string Thumbprint { get; set; }
        /// <summary>Whether to use the latest version for the certificate</summary>
        bool? UseLatestVersion { get; set; }

    }
}