// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

namespace Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models
{
    using static Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Extensions;

    /// <summary>The domain JSON object required for domain creation or update.</summary>
    public partial class RouteUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParameters,
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParametersInternal
    {

        /// <summary>query parameters to include or exclude (comma separated).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CacheConfigurationQueryParameter { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfigurationQueryParameter; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfigurationQueryParameter = value ?? null; }

        /// <summary>
        /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore
        /// specific query strings, cache every request with a unique URL, or cache specific query strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string CacheConfigurationQueryStringCachingBehavior { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfigurationQueryStringCachingBehavior; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfigurationQueryStringCachingBehavior = value ?? null; }

        /// <summary>
        /// List of content types on which compression applies. The value should be a valid MIME type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> CompressionSettingContentTypesToCompress { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CompressionSettingContentTypesToCompress; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CompressionSettingContentTypesToCompress = value ?? null /* arrayOf */; }

        /// <summary>
        /// Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled,
        /// content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor
        /// when requested content is smaller than 1 byte or larger than 1 MB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public bool? CompressionSettingIsCompressionEnabled { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CompressionSettingIsCompressionEnabled; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CompressionSettingIsCompressionEnabled = value ?? default(bool); }

        /// <summary>Domains referenced by this endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IActivatedResourceReference> CustomDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CustomDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CustomDomain = value ?? null /* arrayOf */; }

        /// <summary>
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string EnabledState { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).EnabledState; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).EnabledState = value ?? null; }

        /// <summary>The name of the endpoint which holds the route.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string EndpointName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).EndpointName; }

        /// <summary>Protocol this rule will use when forwarding traffic to backends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string ForwardingProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).ForwardingProtocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).ForwardingProtocol = value ?? null; }

        /// <summary>
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and
        /// it will be the first rule that gets executed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string HttpsRedirect { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).HttpsRedirect; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).HttpsRedirect = value ?? null; }

        /// <summary>whether this route will be linked to the default endpoint domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string LinkToDefaultDomain { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).LinkToDefaultDomain; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).LinkToDefaultDomain = value ?? null; }

        /// <summary>Internal Acessors for CacheConfiguration</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAfdRouteCacheConfiguration Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParametersInternal.CacheConfiguration { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfiguration; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfiguration = value; }

        /// <summary>Internal Acessors for CacheConfigurationCompressionSetting</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ICompressionSettings Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParametersInternal.CacheConfigurationCompressionSetting { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfigurationCompressionSetting; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).CacheConfigurationCompressionSetting = value; }

        /// <summary>Internal Acessors for EndpointName</summary>
        string Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParametersInternal.EndpointName { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).EndpointName; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).EndpointName = value; }

        /// <summary>Internal Acessors for OriginGroup</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParametersInternal.OriginGroup { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).OriginGroup; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).OriginGroup = value; }

        /// <summary>Internal Acessors for Property</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParameters Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdateParametersInternal.Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.RouteUpdatePropertiesParameters()); set { {_property = value;} } }

        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string OriginGroupId { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).OriginGroupId; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).OriginGroupId = value ?? null; }

        /// <summary>
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public string OriginPath { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).OriginPath; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).OriginPath = value ?? null; }

        /// <summary>The route patterns of the rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> PatternsToMatch { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).PatternsToMatch; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).PatternsToMatch = value ?? null /* arrayOf */; }

        /// <summary>Backing field for <see cref="Property" /> property.</summary>
        private Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParameters _property;

        /// <summary>The JSON object that contains the properties of the domain to create.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Owned)]
        internal Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParameters Property { get => (this._property = this._property ?? new Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.RouteUpdatePropertiesParameters()); set => this._property = value; }

        /// <summary>rule sets referenced by this endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference> RuleSet { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).RuleSet; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).RuleSet = value ?? null /* arrayOf */; }

        /// <summary>List of supported protocols for this route.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Origin(Microsoft.Azure.PowerShell.Cmdlets.Cdn.PropertyOrigin.Inlined)]
        public System.Collections.Generic.List<string> SupportedProtocol { get => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).SupportedProtocol; set => ((Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParametersInternal)Property).SupportedProtocol = value ?? null /* arrayOf */; }

        /// <summary>Creates an new <see cref="RouteUpdateParameters" /> instance.</summary>
        public RouteUpdateParameters()
        {

        }
    }
    /// The domain JSON object required for domain creation or update.
    public partial interface IRouteUpdateParameters :
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.IJsonSerializable
    {
        /// <summary>query parameters to include or exclude (comma separated).</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"query parameters to include or exclude (comma separated).",
        SerializedName = @"queryParameters",
        PossibleTypes = new [] { typeof(string) })]
        string CacheConfigurationQueryParameter { get; set; }
        /// <summary>
        /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore
        /// specific query strings, cache every request with a unique URL, or cache specific query strings.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore specific query strings, cache every request with a unique URL, or cache specific query strings.",
        SerializedName = @"queryStringCachingBehavior",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("IgnoreQueryString", "UseQueryString", "IgnoreSpecifiedQueryStrings", "IncludeSpecifiedQueryStrings")]
        string CacheConfigurationQueryStringCachingBehavior { get; set; }
        /// <summary>
        /// List of content types on which compression applies. The value should be a valid MIME type.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of content types on which compression applies. The value should be a valid MIME type.",
        SerializedName = @"contentTypesToCompress",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> CompressionSettingContentTypesToCompress { get; set; }
        /// <summary>
        /// Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled,
        /// content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor
        /// when requested content is smaller than 1 byte or larger than 1 MB.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled, content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor when requested content is smaller than 1 byte or larger than 1 MB.",
        SerializedName = @"isCompressionEnabled",
        PossibleTypes = new [] { typeof(bool) })]
        bool? CompressionSettingIsCompressionEnabled { get; set; }
        /// <summary>Domains referenced by this endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Domains referenced by this endpoint.",
        SerializedName = @"customDomains",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IActivatedResourceReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IActivatedResourceReference> CustomDomain { get; set; }
        /// <summary>
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'",
        SerializedName = @"enabledState",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EnabledState { get; set; }
        /// <summary>The name of the endpoint which holds the route.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = true,
        Read = true,
        Create = false,
        Update = false,
        Description = @"The name of the endpoint which holds the route.",
        SerializedName = @"endpointName",
        PossibleTypes = new [] { typeof(string) })]
        string EndpointName { get;  }
        /// <summary>Protocol this rule will use when forwarding traffic to backends.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Protocol this rule will use when forwarding traffic to backends.",
        SerializedName = @"forwardingProtocol",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("HttpOnly", "HttpsOnly", "MatchRequest")]
        string ForwardingProtocol { get; set; }
        /// <summary>
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and
        /// it will be the first rule that gets executed.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and it will be the first rule that gets executed.",
        SerializedName = @"httpsRedirect",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string HttpsRedirect { get; set; }
        /// <summary>whether this route will be linked to the default endpoint domain.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"whether this route will be linked to the default endpoint domain.",
        SerializedName = @"linkToDefaultDomain",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LinkToDefaultDomain { get; set; }
        /// <summary>Resource ID.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"Resource ID.",
        SerializedName = @"id",
        PossibleTypes = new [] { typeof(string) })]
        string OriginGroupId { get; set; }
        /// <summary>
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.",
        SerializedName = @"originPath",
        PossibleTypes = new [] { typeof(string) })]
        string OriginPath { get; set; }
        /// <summary>The route patterns of the rule.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"The route patterns of the rule.",
        SerializedName = @"patternsToMatch",
        PossibleTypes = new [] { typeof(string) })]
        System.Collections.Generic.List<string> PatternsToMatch { get; set; }
        /// <summary>rule sets referenced by this endpoint.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"rule sets referenced by this endpoint.",
        SerializedName = @"ruleSets",
        PossibleTypes = new [] { typeof(Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference) })]
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference> RuleSet { get; set; }
        /// <summary>List of supported protocols for this route.</summary>
        [Microsoft.Azure.PowerShell.Cmdlets.Cdn.Runtime.Info(
        Required = false,
        ReadOnly = false,
        Read = true,
        Create = true,
        Update = true,
        Description = @"List of supported protocols for this route.",
        SerializedName = @"supportedProtocols",
        PossibleTypes = new [] { typeof(string) })]
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Http", "Https")]
        System.Collections.Generic.List<string> SupportedProtocol { get; set; }

    }
    /// The domain JSON object required for domain creation or update.
    internal partial interface IRouteUpdateParametersInternal

    {
        /// <summary>
        /// The caching configuration for this route. To disable caching, do not provide a cacheConfiguration object.
        /// </summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IAfdRouteCacheConfiguration CacheConfiguration { get; set; }
        /// <summary>compression settings.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.ICompressionSettings CacheConfigurationCompressionSetting { get; set; }
        /// <summary>query parameters to include or exclude (comma separated).</summary>
        string CacheConfigurationQueryParameter { get; set; }
        /// <summary>
        /// Defines how Frontdoor caches requests that include query strings. You can ignore any query strings when caching, ignore
        /// specific query strings, cache every request with a unique URL, or cache specific query strings.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("IgnoreQueryString", "UseQueryString", "IgnoreSpecifiedQueryStrings", "IncludeSpecifiedQueryStrings")]
        string CacheConfigurationQueryStringCachingBehavior { get; set; }
        /// <summary>
        /// List of content types on which compression applies. The value should be a valid MIME type.
        /// </summary>
        System.Collections.Generic.List<string> CompressionSettingContentTypesToCompress { get; set; }
        /// <summary>
        /// Indicates whether content compression is enabled on AzureFrontDoor. Default value is false. If compression is enabled,
        /// content will be served as compressed if user requests for a compressed version. Content won't be compressed on AzureFrontDoor
        /// when requested content is smaller than 1 byte or larger than 1 MB.
        /// </summary>
        bool? CompressionSettingIsCompressionEnabled { get; set; }
        /// <summary>Domains referenced by this endpoint.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IActivatedResourceReference> CustomDomain { get; set; }
        /// <summary>
        /// Whether to enable use of this rule. Permitted values are 'Enabled' or 'Disabled'
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string EnabledState { get; set; }
        /// <summary>The name of the endpoint which holds the route.</summary>
        string EndpointName { get; set; }
        /// <summary>Protocol this rule will use when forwarding traffic to backends.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("HttpOnly", "HttpsOnly", "MatchRequest")]
        string ForwardingProtocol { get; set; }
        /// <summary>
        /// Whether to automatically redirect HTTP traffic to HTTPS traffic. Note that this is a easy way to set up this rule and
        /// it will be the first rule that gets executed.
        /// </summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string HttpsRedirect { get; set; }
        /// <summary>whether this route will be linked to the default endpoint domain.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Enabled", "Disabled")]
        string LinkToDefaultDomain { get; set; }
        /// <summary>A reference to the origin group.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference OriginGroup { get; set; }
        /// <summary>Resource ID.</summary>
        string OriginGroupId { get; set; }
        /// <summary>
        /// A directory path on the origin that AzureFrontDoor can use to retrieve content from, e.g. contoso.cloudapp.net/originpath.
        /// </summary>
        string OriginPath { get; set; }
        /// <summary>The route patterns of the rule.</summary>
        System.Collections.Generic.List<string> PatternsToMatch { get; set; }
        /// <summary>The JSON object that contains the properties of the domain to create.</summary>
        Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IRouteUpdatePropertiesParameters Property { get; set; }
        /// <summary>rule sets referenced by this endpoint.</summary>
        System.Collections.Generic.List<Microsoft.Azure.PowerShell.Cmdlets.Cdn.Models.IResourceReference> RuleSet { get; set; }
        /// <summary>List of supported protocols for this route.</summary>
        [global::Microsoft.Azure.PowerShell.Cmdlets.Cdn.PSArgumentCompleterAttribute("Http", "Https")]
        System.Collections.Generic.List<string> SupportedProtocol { get; set; }

    }
}