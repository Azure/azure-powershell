variables:
  IntermediateStepTimeoutInMinutes: 30
  BuildTimeoutInMinutes: 120
  AnalysisTimeoutInMinutes: 120
  TestTimeoutInMinutes: 180
  MaxParalleBuildJobs: 3
  MaxParalleAnalyzeJobs: 4
  MaxParalleTestWindowsJobs: 1
  MaxParalleTestLinuxJobs: 2
  MaxParalleTestMacJobs: 3
  WindowsAgentPoolName: pool-windows-2019
  LinuxAgentPoolName: pool-ubuntu-2004
  MacOSAgentPoolName: 'Azure Pipelines'
  MacOSAgentPoolVMImage: macOS-latest
  GenerationBranch: batch-generation/branch-$(Build.BuildId)

trigger: none

jobs:
- job: prepare
  displayName: Generate Build Targets Matrix
  timeoutInMinutes: ${{ variables.IntermediateStepTimeoutInMinutes }}
  pool: ${{ variables.WindowsAgentPoolName }}
  steps:

  # TODO: (Bernard) Uncomment the no checkout step after automatically install repo into agnets 
  # - checkout: none

  - template: util/get-github-pat-steps.yml

  - task: PowerShell@2
    displayName: 'Create Batch Generation Branch'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $newBranch = "$(GenerationBranch)"
        $token = "$(GitHubToken)"

        $createBranchPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'create-branch.ps1'
        # TODO: (Bernard) Change BaseBranch to main after test
        & $createBranchPath -Owner 'Azure' -Repo 'azure-powershell' -BaseBranch 'bernard-pipeline-generation' -NewBranch $newBranch -Token $token

  - task: PowerShell@2
    name: mtrx
    displayName: 'Generate Build Targets Matrix'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $prepareModulesPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'prepare.ps1'
        & $prepareModulesPath -RepoRoot "$(Build.SourcesDirectory)" -MaxParallelJobs "${{ variables.MaxParalleBuildJobs }}"
  
- job: build
  displayName: "Build:"
  dependsOn: prepare
  timeoutInMinutes: ${{ variables.BuildTimeoutInMinutes }}
  pool: ${{ variables.WindowsAgentPoolName }}
  strategy:
    matrix: $[ dependencies.prepare.outputs['mtrx.buildTargets'] ]
    maxParallel: ${{ variables.MaxParalleBuildJobs }}

  steps:
  - checkout: self
    persistCredentials: true
    fetchTags: false
    
  # - checkout: azure-powershell-devops
  #   path: "azure-powershell-devops"

  # - template: util/get-github-pat-steps.yml

  - task: PowerShell@2
    name: build
    displayName: 'Build Targets'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        git fetch origin "${{ variables.GenerationBranch }}"
        git checkout "${{ variables.GenerationBranch }}"

        $batchGenerateModulesPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'batch-generate-modules.ps1'
        & $batchGenerateModulesPath -MatrixKey "$(MatrixKey)" -Target "$(Target)" -RepoRoot "$(Build.SourcesDirectory)" -ArtifactRoot "$(Build.ArtifactStagingDirectory)"

      workingDirectory: $(Build.SourcesDirectory)

  - task: PublishPipelineArtifact@1
    displayName: 'Save patch'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)'
      artifact: 'build-$(MatrixKey)'
    condition: always()

- job: filter
  displayName: 'Filter Changed Modules'
  dependsOn: build 
  condition: always()
  timeoutInMinutes: ${{ variables.IntermediateStepTimeoutInMinutes }}
  pool: ${{ variables.WindowsAgentPoolName }}
  steps:
  - checkout: self
    persistCredentials: true
    fetchTags: false
  
  - task: PowerShell@2
    name: checkout
    displayName: 'Checkout Generation Branch'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        git fetch origin "${{ variables.GenerationBranch }}"
        git checkout "${{ variables.GenerationBranch }}"

  - download: current
    patterns: '**/*.patch'
    displayName: 'Download all .patch artifacts'

  - task: PowerShell@2
    name: apply
    displayName: 'Apply all patches'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        git config user.email "65331932+azure-powershell-bot@users.noreply.github.com"
        git config user.name "azure-powershell-bot"

        Write-Host "Applying all .patch files to ${{ variables.GenerationBranch }}..."
        $patchFiles = Get-ChildItem -Path "$env:PIPELINE_WORKSPACE" -Recurse -Filter *.patch

        # $patchFiles = Get-ChildItem -Path "$env:PIPELINE_WORKSPACE" -Recurse -Filter *.patch |
        #   Where-Object { $_.Directory.Parent.FullName -eq $env:PIPELINE_WORKSPACE }

        foreach ($patch in $patchFiles) {
          Write-Host "Applying patch: $($patch.FullName)"
          git apply --whitespace=fix "$($patch.FullName)"
        }
        
        git add .
        git commit -m "Apply matrix job patches to ${{ variables.GenerationBranch }}"
        git push origin "${{ variables.GenerationBranch }}"

  - task: PowerShell@2
    name: mtrx
    displayName: 'Generate Test Targets Matrix'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $base = git merge-base HEAD origin/main
        $changedFiles = git diff --name-only $base HEAD

        $sourceBranchName = "$(Build.SourceBranch)".Replace('refs/heads/', '')
        git checkout $sourceBranchName

        $filterModulesPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'filter.ps1'
        & $filterModulesPath -MaxParalleAnalyzeJobs "${{ variables.MaxParalleAnalyzeJobs }}" -MaxParalleTestWindowsJobs "${{ variables.MaxParalleTestWindowsJobs }}" -MaxParalleTestLinuxJobs "${{ variables.MaxParalleTestLinuxJobs }}" -MaxParalleTestMacJobs "${{ variables.MaxParalleTestMacJobs }}" -ChangedFiles $changedFiles

  # - checkout: none

  # - script: |
  #     git init
  #     git remote add origin https://github.com/Azure/azure-powershell.git
  #     git fetch origin main --depth=1
  #     git checkout FETCH_HEAD -- .azure-pipelines/
      
  #   displayName: 'Checkout Pipeline Templates'

  # - template: util/get-github-pat-steps.yml

  # - script: |
  #     $token = "$(GitHubToken)"
  #     changedModules=$(curl -s -H "Authorization: Bearer $token" \
  #       https://api.github.com/repos/Azure/azure-powershell/compare/main...${{ variables.GenerationBranch }} \
  #       | jq -r '.files[].filename' \
  #       | grep -E '^(src|generated)/[^/]+/[^/]+\.autorest/' \
  #       | sed -E 's#^(src|generated)/##' \
  #       | awk -F/ '{print $1 "/" $2}' \
  #       | sort -u)

  #     IFS=$'\n' read -r -d '' -a changedModulePath <<< "$changedModules"

  #     for path in "${changedModulePath[@]}"; do
  #       echo "$path"
  #     done

- job: analyze
  displayName: "Analyze:"
  dependsOn: filter
  condition: and(succeeded(), not(eq(variables['MatrixKey'], null)), ne(variables['MatrixKey'], ''))
  timeoutInMinutes: ${{ variables.AnalysisTimeoutInMinutes }}
  pool: ${{ variables.WindowsAgentPoolName }}
  strategy:
    matrix: $[ dependencies.filter.outputs['mtrx.AnalyzeTargets'] ]
    maxParallel: ${{ variables.MaxParalleAnalyzeJobs }}

  steps:
  - checkout: none
  
  - task: PowerShell@2
    name: analyze
    displayName: 'Analyze modules'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        Write-Host "Matrix Key: $(MatrixKey)"
        Write-Host "Analyze Targets: $(Target)"

- job: test_windows
  displayName: "Test Windows:"
  dependsOn: filter
  condition: and(succeeded(), not(eq(variables['MatrixKey'], null)), ne(variables['MatrixKey'], ''))
  timeoutInMinutes: ${{ variables.TestTimeoutInMinutes }}
  pool: ${{ variables.WindowsAgentPoolName }}
  strategy:
    matrix: $[ dependencies.filter.outputs['mtrx.TestWindowsTargets'] ]
    maxParallel: ${{ variables.MaxParalleTestWindowsJobs }}

  steps:
  - checkout: none
  
  - task: PowerShell@2
    name: test
    displayName: 'Test Windows'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $testModulesPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'test-module.ps1'
        & $testModulesPath -MatrixKey "$(MatrixKey)" -Target "$(Target)" -TestEnvName 'Windows' -RepoRoot "$(Build.SourcesDirectory)" -ArtifactRoot "$(Build.ArtifactStagingDirectory)"


- job: test_linux
  displayName: "Test Linux:"
  dependsOn: filter
  condition: and(succeeded(), not(eq(variables['MatrixKey'], null)), ne(variables['MatrixKey'], ''))
  timeoutInMinutes: ${{ variables.TestTimeoutInMinutes }}
  pool: ${{ variables.LinuxAgentPoolName }}
  strategy:
    matrix: $[ dependencies.filter.outputs['mtrx.TestLinuxTargets'] ]
    maxParallel: ${{ variables.MaxParalleTestLinuxJobs }}

  steps:
  - checkout: none
  
  - task: PowerShell@2
    name: test
    displayName: 'Test Linux'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $testModulesPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'test-module.ps1'
        & $testModulesPath -MatrixKey "$(MatrixKey)" -Target "$(Target)" -TestEnvName 'Linux' -RepoRoot "$(Build.SourcesDirectory)" -ArtifactRoot "$(Build.ArtifactStagingDirectory)"

- job: test_mac
  displayName: "Test Mac:"
  dependsOn: filter
  condition: and(succeeded(), not(eq(variables['MatrixKey'], null)), ne(variables['MatrixKey'], ''))
  timeoutInMinutes: ${{ variables.TestTimeoutInMinutes }}
  pool:
    name: ${{ variables.MacOSAgentPoolName }}
    vmImage: ${{ variables.MacOSAgentPoolVMImage }}
  strategy:
    matrix: $[ dependencies.filter.outputs['mtrx.TestMacTargets'] ]
    maxParallel: ${{ variables.MaxParalleTestMacJobs }}

  steps:
  - checkout: none
  
  - task: PowerShell@2
    name: test
    displayName: 'Test Mac'
    inputs:
      targetType: inline
      pwsh: true
      script: |
        $testModulesPath = Join-Path "$(Build.SourcesDirectory)" '.azure-pipelines' 'PipelineSteps' 'BatchGeneration' 'test-module.ps1'
        & $testModulesPath -MatrixKey "$(MatrixKey)" -Target "$(Target)" -TestEnvName 'Mac' -RepoRoot "$(Build.SourcesDirectory)" -ArtifactRoot "$(Build.ArtifactStagingDirectory)"

