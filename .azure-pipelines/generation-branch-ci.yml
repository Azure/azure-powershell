variables:
  WindowsName: windows
  WindowsImage: vs2017-win2016
  LinuxName: linux
  LinuxImage: ubuntu-20.04
  MacOSName: macOS
  MacOSImage: macOS-10.14
  TestFramework: netcoreapp2.1
  TestTarget: Test
  Configuration: Debug
  DebugLocalBuildTasks: true
  IsGenerateBased: true

trigger: none

pr:
  branches:
    include:
      - generation

jobs:
- job: Build
  displayName: Build
  condition: succeeded()
  strategy:
    matrix:
      windows:
        OSName: ${{ variables.WindowsName }}
        ImageName: ${{ variables.WindowsImage }}
      linux:
        OSName: ${{ variables.LinuxName }}
        ImageName: ${{ variables.LinuxImage }}
      macOS:	
        OSName: ${{ variables.MacOSName }}	
        ImageName: ${{ variables.MacOSImage }}
  pool:
    vmImage: $(ImageName)

  steps:
  - task: Npm@1
    displayName: Install autorest
    inputs:
      command: custom
      verbose: false
      customCommand: install -g autorest@latest
  - task: PowerShell@2
    displayName: Setup environment for autorest
    inputs:
      targetType: inline
      script: "$env:NODE_OPTIONS=\"--max-old-space-size=65536\"\n\n$currentModule = [System.IO.Path]::GetFileName((Get-Location).Path)\n\nif (@(\"ConnectedMachine\").Contains($currentModule)) {\n    Write-Host \"Generating $currentModule with m3\"\n    autorest --use:@autorest/powershell@2.1.401 --max-memory-size=8192 \n} else {\n    Write-Host \"Generating $currentModule with m4\"\n    autorest --max-memory-size=8192\n}"
      pwsh: true
  - template: util/build-steps.yml
    parameters:
      osName: $(OSName)
      testFramework: ${{ variables.TestFramework }}
      configuration: ${{ variables.Configuration }}

- job: Analyze
  displayName: Analyze
  dependsOn: Build
  condition: succeeded()
  timeoutInMinutes: 90
  strategy:
    matrix:
      windows:
        OSName: ${{ variables.WindowsName }}
        ImageName: ${{ variables.WindowsImage }}
      linux:
        OSName: ${{ variables.LinuxName }}
        ImageName: ${{ variables.LinuxImage }}
      macOS:	
        OSName: ${{ variables.MacOSName }}	
        ImageName: ${{ variables.MacOSImage }}
  pool:
    vmImage: $(ImageName)

  steps:
  - template: util/analyze-steps.yml
    parameters:
      osName: $(OSName)
      configuration: ${{ variables.Configuration }}

- job: Test
  displayName: Test
  dependsOn: Build
  condition: succeeded()
  timeoutInMinutes: 180
  strategy:
    matrix:
      windows:
        OSName: ${{ variables.WindowsName }}
        ImageName: ${{ variables.WindowsImage }}
      linux:
        OSName: ${{ variables.LinuxName }}
        ImageName: ${{ variables.LinuxImage }}
      macOS:	
        OSName: ${{ variables.MacOSName }}	
        ImageName: ${{ variables.MacOSImage }}
  pool:
    vmImage: $(ImageName)

  steps:
  - template: util/test-steps.yml
    parameters:
      osName: $(OSName)
      testFramework: ${{ variables.TestFramework }}
      testTarget: ${{ variables.TestTarget }}
      configuration: ${{ variables.Configuration }}
