parameters:
- name: name
- name: vmImage
- name: osType
- name: psVersion
- name: dotnetVersion

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 600
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UseDotNet@2
    displayName: Install desired .NET version ${{ parameters.dotnetVersion }}
    condition: ne('${{ parameters.dotnetVersion }}', '')
    inputs:
      packageType: sdk
      version: ${{ parameters.dotnetVersion }}

  - task: PowerShell@2
    displayName: Install desired Powershell version ${{ parameters.psVersion }}
    condition: ne('${{ parameters.psVersion }}', '')
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InitializeLiveTestEnvironment.ps1
      arguments: -DesiredVersion ${{ parameters.psVersion }}

  - task: PowerShell@2
    displayName: Create live test data location directory
    condition: ne(variables['skipLatest'], 'true')
    inputs:
      pwsh: true
      targetType: inline
      script:
        New-Item -Name $(ArtifactsName) -Path $(Pipeline.Workspace) -ItemType Directory -Force

  - task: DownloadPipelineArtifact@2
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'), eq(variables['GalleryName'], 'DailyBuild'), eq(variables['PipelineBuildId'], ''))
    displayName: Download latest artifacts from daily build pipeline main branch
    inputs:
      buildType: 'specific'
      project: $(BuildPipelineProject)
      definition: $(BuildPipelineDefinitionId)
      buildVersionToDownload: 'latestFromBranch'
      branchName: 'refs/heads/main'
      artifactName: 'artifacts'
      targetPath: $(Pipeline.Workspace)

  - task: DownloadPipelineArtifact@2
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'), eq(variables['GalleryName'], 'DailyBuild'), ne(variables['PipelineBuildId'], ''))
    displayName: Download specific artifacts from daily build pipeline
    inputs:
      buildType: 'specific'
      project: $(BuildPipelineProject)
      definition: $(BuildPipelineDefinitionId)
      buildVersionToDownload: 'specific'
      pipelineId: $(PipelineBuildId)
      artifactName: 'artifacts'
      targetPath: $(Pipeline.Workspace)

  - task: DownloadPipelineArtifact@2
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'), eq(variables['GalleryName'], 'Sign'), eq(variables['PipelineBuildId'], ''))
    displayName: Download latest artifacts from sign pipeline internal/release branch
    inputs:
      buildType: 'specific'
      project: $(SignPipelineProject)
      definition: $(SignPipelineDefinitionId)
      buildVersionToDownload: 'latestFromBranch'
      branchName: 'refs/heads/internal/release'
      artifactName: 'artifacts'
      targetPath: $(Pipeline.Workspace)

  - task: DownloadPipelineArtifact@2
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'), eq(variables['GalleryName'], 'Sign'), ne(variables['PipelineBuildId'], ''))
    displayName: Download specific artifacts from sign pipeline
    inputs:
      buildType: 'specific'
      project: $(SignPipelineProject)
      definition: $(SignPipelineDefinitionId)
      buildVersionToDownload: 'specific'
      pipelineId: $(PipelineBuildId)
      artifactName: 'artifacts'
      targetPath: $(Pipeline.Workspace)

  - task: PowerShell@2
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'), ne(variables['GalleryName'], 'PSGallery'))
    displayName: Copy artifacts to local repository
    inputs:
      pwsh: true
      targetType: inline
      script: |
        $azPackagesDir = New-Item -Name AzPreviewPackages -Path $(DataLocation) -ItemType Directory -Force
        $azPackagesFiles = Join-Path -Path $(Pipeline.Workspace) -ChildPath *.nupkg
        Move-Item -Path $azPackagesFiles -Destination $azPackagesDir
        Get-ChildItem -LiteralPath $azPackagesDir

  - task: PowerShell@2
    displayName: Install desired Az module from $(GalleryName)
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'))
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/InstallLiveTestAzModules.ps1 -Source $(GalleryName) -AzPackagesLocation (Join-Path -Path $(DataLocation) -ChildPath AzPreviewPackages)'

  - task: PowerShell@2
    displayName: Connect Azure with live test service principal
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'))
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/ConnectLiveTestServicePrincipal.ps1 $(LiveTestSubscriptionId) $(LiveTestTenantId) $(LiveTestServicePrincipalId) $(LiveTestServicePrincipalSecret)'
      failOnStderr: true
    retryCountOnTaskFailure: 3

  - task: PowerShell@2
    displayName: Run end-to-end live scenarios
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'))
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/InvokeLiveTestScenarios.ps1 -OSVersion ${{ parameters.vmImage }} -RunPlatform ${{ parameters.osType }} -RunPowerShell ${{ parameters.psVersion }}'

  - task: PowerShell@2
    displayName: Save live test results to Kusto
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'), or(eq(variables['Build.Reason'], 'Schedule'), eq(variables['Build.SourceBranch'], 'refs/heads/internal/release')))
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/SaveLiveTestResult.ps1
      arguments: $(LiveTestTenantId) $(KustoServicePrincipalId) $(KustoServicePrincipalSecret) $(KustoClusterName) $(KustoClusterRegion)

  - task: PublishPipelineArtifact@1
    displayName: Publish live test results to pipeline artifact
    condition: and(succeeded(), ne(variables['skipLatest'], 'true'))
    inputs:
      artifact: livetest-os-${{ parameters.vmImage }}-ps-${{ replace(parameters.psVersion, '*', 'x') }}
      targetPath: $(DataLocation)
