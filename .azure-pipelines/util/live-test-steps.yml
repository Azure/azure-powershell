parameters:
- name: name
  type: string
- name: vmImage
  type: string
- name: psVersion
  type: string
- name: dotnetVersion
  type: string

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 600
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UseDotNet@2
    displayName: Install .NET SDK ${{ parameters.dotnetVersion }}
    inputs:
      packageType: sdk
      version: ${{ parameters.dotnetVersion }}

  - task: PowerShell@2
    displayName: Install Powershell ${{ parameters.psVersion }}
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InitializeLiveTestEnvironment.ps1
      arguments: -DesiredVersion ${{ parameters.psVersion }}

  - task: PowerShell@2
    displayName: Install desired Az module from PSGallery
    inputs:
      pwsh: true
      targetType: inline
      script: |
        Install-Module -Name Az -Repository PSGallery -Scope CurrentUser -AllowClobber -Force

  - template: get-keyvault-secret-steps.yml
    parameters:
      serviceConnectionName: $(LiveTestServiceConnectionName)
      keyVaultName: $(LiveTestServicePrincipalKeyVaultName)
      secretName: $(LiveTestServicePrincipalSecretName)
      outVar: 'LiveTestServicePrincipalSecret'

  - task: PowerShell@2
    displayName: Connect Azure with live test service principal
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/ConnectLiveTestServicePrincipal.ps1 $(LiveTestSubscriptionId) $(LiveTestTenantId) $(LiveTestServicePrincipalId) $(LiveTestServicePrincipalSecret)'

  - task: PowerShell@2
    displayName: Run end-to-end live scenarios
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Live/InvokeLiveTestCITask.ps1
      arguments: -UseWindowsPowerShell ('${{ parameters.psVersion }}' -eq '5.1') -ScriptFile './tools/TestFx/Live/InvokeLiveTestScenarios.ps1 -OSVersion ${{ parameters.vmImage }} -RunPlatform Linux -RunPowerShell ${{ parameters.psVersion }}'
