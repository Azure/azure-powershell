parameters:
  osName: ''
  testFramework: ''
  testTarget: ''
  configuration: ''
  powerShellPlatform: ''

steps:
- template: download-build-steps.yml
  parameters:
    artifactName: build-${{ parameters.testFramework }}

- task: UseDotNet@2
  displayName: 'Use .NET SDK'
  inputs:
    packageType: sdk
    version: 8.0.x

- task: PowerShell@2
  displayName: Remove pre-installed Az modules
  inputs:
    pwsh: true
    targetType: filePath
    filePath: ./tools/TestFx/Utilities/CommonUtility.ps1

- task: DotNetCoreCLI@2
  displayName: Test
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:${{ parameters.testTarget }} /p:Configuration=${{ parameters.configuration }};TestFramework=${{ parameters.testFramework }};PullRequestNumber=$(System.PullRequest.PullRequestNumber)'
  env:
    PowerShellPlatform: ${{ parameters.powerShellPlatform }}
  continueOnError: true

- pwsh: |
   Install-Module -Name Pester -RequiredVersion 4.10.1 -Force
   if ($IsWindows) { $sp = ";" } else { $sp = ":" }
   $env:PSModulePath = $env:PSModulePath + $sp + (pwd).Path
   $rootFolder = (Get-item $PWD).Parent.Parent
   Get-ChildItem -File -Recurse test-module.ps1 | ForEach-Object {
    Write-Host $_.Directory.FullName
    cd $rootFolder
    .\tools\ExecuteCIStep.ps1 -TestAutorest -AutorestDirectory $_.Directory.FullName
   }
  workingDirectory: 'artifacts/Debug'
  displayName: 'Test for AutoGen Modules With PowerShell Core'
  condition: and(succeeded(), eq('${{ parameters.testTarget }}', 'Test'))
  continueOnError: true
  env:
    PowerShellPlatform: ${{ parameters.powerShellPlatform }}

- task: PowerShell@2
  displayName: Analyze Test Coverage
  inputs:
    pwsh: true
    targetType: filePath
    filePath: ./tools/TestFx/Coverage/ValidateTestCoverage.ps1

- pwsh: |
    $PipelineResult = Get-Content PipelineResult.json | ConvertFrom-Json
    $FailedModuleList = $PipelineResult.test.Details[0].Modules | Where-Object { $_.Status -eq "Failed" } | ForEach-Object { $_.Module }
    if ($FailedModuleList.Length -ne 0)
    {
        throw "test fails in module: $FailedModuleList"
    }
  workingDirectory: 'artifacts/PipelineResult'
  displayName: 'Check Test Status'


- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'

- template: publish-artifacts-steps.yml
  parameters:
    artifactName: test-${{ parameters.testFramework }}-${{ parameters.osName }}-$(System.JobAttempt)
