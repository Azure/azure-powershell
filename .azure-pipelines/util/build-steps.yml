parameters:
  testFramework: ''
  configuration: ''
  powerShellPlatform: ''
  TargetModule: ''
  ForceRegenerate: false

steps:
- checkout: self
  persistCredentials: true
- template: get-github-token-steps.yml
- task: PowerShell@2
  displayName: 'Check Ignored File'
  inputs:
    filePath: tools/CheckIgnoredFile.ps1
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6.0.x'
  inputs:
    packageType: sdk
    version: 6.0.x
- task: PowerShell@2
  displayName: 'Set files changed trigger'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $subTasksFilePath = Join-Path "$(Build.SourcesDirectory)" 'artifacts' 'SubTasksFile.txt'
      Write-Host "##vso[task.setvariable variable=SubTasksFilePath]$subTasksFilePath"

      $filesChangedOutputPath = Join-Path "$(Build.SourcesDirectory)" 'artifacts' 'FilesChanged.txt'
      Write-Host "##vso[task.setvariable variable=FilesChangedOutputPath]$filesChangedOutputPath"

      $reason = "$(Build.Reason)"
      switch ($reason) {
        { $reason -in @('IndividualCI', 'BatchedCI') } {
          $trigger = "$(Build.SourceVersion)"
          $triggerType = 'Commit'
          break
        }
        'PullRequest' {
          $trigger = "$(System.PullRequest.PullRequestNumber)"
          $triggerType = 'PullRequest'
          break
        }
        { $reason -in @('Manual', 'Schedule') } {
          $targetModule = "${{ parameters.TargetModule }}"
          if ('' -eq $targetModule) {
            $notModules = @('lib', 'shared')
            $src = Join-Path "$(Build.SourcesDirectory)" 'src'
            $trigger = Get-Childitem -Path $src -Directory | ForEach-Object {
              if ($_.Name -in $notModules) {
                return
              }
              return Join-Path $_.Parent.Name $_.Name
            } | Join-String -Separator ','
          } else {
            $trigger = $targetModule.Split(',') | ForEach-Object { Join-Path 'src' $_ } | Join-String -Separator ','
          }
          $triggerType = 'TargetModule'
          break
        }
        default {
          $triggerType = Null
          break
        }
      }
      Write-Host "##vso[task.setvariable variable=TriggerType]$triggerType"
      Write-Host "##vso[task.setvariable variable=Trigger]$trigger"
      Write-Host "##[section]Filter files triggered by ${reason}: ${trigger}" -ForegroundColor DarkYellow
- task: PowerShell@2
  displayName: 'Create branch for CI/Manual/Schedule triggered pipeline'
  condition: or(eq(variables.TriggerType, 'Commit'), eq(variables.TriggerType, 'TargetModule'))
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $baseBranchName = "origin/$(Build.SourceBranchName)"
      $tmpBranchName = "archive/$(Build.SourceBranchName)/$(Build.Reason)"
      if ('Commit' -eq "$(TriggerType)") {
        $tmpBranchName += "/$(Trigger)"
      }
      Write-Host "##vso[task.setvariable variable=TmpBranchName]$tmpBranchName"
      Write-Host "##vso[task.setvariable variable=BaseBranchName]$baseBranchName"
      Write-Host "##[section]Switch from $baseBranchName to $tmpBranchName"
      git fetch origin $(Build.SourceBranchName)
      git checkout -b $tmpBranchName $baseBranchName
- task: DotNetCoreCLI@2
  displayName: Filter changed files
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:FilterBuild /p:TriggerType=$(TriggerType);Trigger=$(Trigger);FilesChangedOutputPath=$(FilesChangedOutputPath);SubTasksFilePath=$(SubTasksFilePath)'
  env:
      OCTOKITPAT: $(GithubToken)
      PowerShellPlatform: ${{ parameters.PowerShellPlatform }}
- task: PowerShell@2
  displayName: 'Set subtasks if any'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      if (Test-Path $(SubTasksFilePath)) {
        Get-Content $(SubTasksFilePath) | ForEach-Object {
          if ($_ && 'Predictor' -eq $_) {
            Write-Host "##vso[task.setvariable variable=SubTaskPredictor]true"
          } elseif ($_ && 'Installer' -eq $_) {
            Write-Host "##vso[task.setvariable variable=SubTaskInstaller]true"
          } elseif ($_ && 'all' -eq $_) {
            Write-Host "##vso[task.setvariable variable=SubTaskAll]true"
          }
        }
      }
- task: PowerShell@2
  displayName: 'Analyze Pull Request'
  condition: eq(variables.TriggerType, 'PullRequest')
  inputs:
    targetType: inline
    pwsh: true
    script: |
      Write-Host "##[group]#1. Check generate-info.json for autorest generated modules"
      $noGenerateInfo = @()
      $modules=Get-Content $(FilesChangedOutputPath) -OutVariable paths | Foreach-Object { if($_ -match "^src.*\.Autorest"){ Write-Output $Matches[0] } } | Select-Object -Unique
      foreach ($module in $modules) {
        $hasGenerateInfo = $false
        $pattern = "^$module/generate-info.json"
        foreach ($path in $paths) {
          if ($path -match $pattern) {
            $hasGenerateInfo = $true
          }
        }
        if (-not $hasGenerateInfo) {
          $noGenerateInfo += $module
        }
      }
      if ($noGenerateInfo -and $noGenerateInfo.Count -gt 0) {
        $noGenerateInfo | Foreach-Object { Write-Error "No generate-info.json detected for $_" }
        exit 1
      }
      Write-Host "##[endgroup]"

      Write-Host "##[group]#2. PR should contain changes from either /src or /generated only"
      $srcFiles = Get-Content $(FilesChangedOutputPath) | Where-Object { $_ -match "^src.*" }
      $generatedFiles = Get-Content $(FilesChangedOutputPath) | Where-Object { $_ -match "^generated.*" }
      if ($srcFiles -and $srcFiles.Count -gt 0  -and $generatedFiles -and $generatedFiles.Count -gt 0) {
        Write-Error "PR should contain changes from either /src or /generated only"
        exit 1
      }
      Write-Host "##[endgroup]"
- task: NodeTool@0
  displayName: Install Autorest
  inputs:
    versionSpec: '14.17.1'
    command: custom
    verbose: false
    customCommand: install autorest@latest
- task: PowerShell@2
  displayName: Setup environment for Autorest
  inputs:
    targetType: inline
    script: "$env:NODE_OPTIONS=\"--max-old-space-size=65536\""
    pwsh: true
- task: PowerShell@2
  displayName: 'Check Ignored File'
  inputs:
    filePath: tools/CheckIgnoredFile.ps1
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6.0.x'
  inputs:
    packageType: sdk
    version: 6.0.x
- task: PowerShell@2
  displayName: 'Build'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $buildScript = Join-Path "$(Build.SourcesDirectory)" 'tools' 'BuildScripts' 'BuildModules.ps1'
      if ('Manual' -eq "$(Build.Reason)" -and ('true' -eq '${{ parameters.ForceRegenerate }}')) {
        . $buildScript -CIPlan -RepoRoot "$(Build.SourcesDirectory)" -Configuration ${{ parameters.configuration }} -ForceRegenerate -InvokedByPipeline
      } else {
        . $buildScript -CIPlan -RepoRoot "$(Build.SourcesDirectory)" -Configuration ${{ parameters.configuration }} -InvokedByPipeline
      }
- task: PowerShell@2
  displayName: 'Write pipeline result'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $pipelineScript = Join-Path "$(Build.SourcesDirectory)" 'tools' 'ExecuteCIStep.ps1'
      $repoArtifact = Join-Path "$(Build.SourcesDirectory)" 'artifacts'
      . $pipelineScript -Build -TriggerType "$(Build.Reason)" -Trigger "$(Trigger)" -RepoArtifacts $repoArtifact -Configuration ${{ parameters.configuration }}
- task: DotNetCoreCLI@2
  displayName: 'SubTask Predictor'
  condition: or(eq(variables.SubTaskPredictor, true), eq(variables.SubTaskAll, true))
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:AzToolsPredictor'
- task: DotNetCoreCLI@2
  displayName: 'SubTask Installer'
  condition: or(eq(variables.SubTaskInstaller, true), eq(variables.SubTaskAll, true))
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:AzToolsInstaller'
- task: PowerShell@2
  displayName: 'Update branch for CI/Manual/Schedule triggered pipeline'
  condition: or(eq(variables.TriggerType, 'Commit'), eq(variables.TriggerType, 'TargetModule'))
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $tmpBranchName = "$(TmpBranchName)"
      $baseBranchName = "$(BaseBranchName)"
      $generatedPath = Join-Path "$(Build.SourcesDirectory)" 'generated'
      $diff = ( git status --short --untracked-files $generatedPath)
      if ((-not $diff) -or ($null -eq $diff) -or (0 -eq $diff.Count)) {
        return
      }

      $prTitle = "[skip ci] Archive generated assets to $baseBranchName"
      $prDescription = "triggered by: $(TriggerType) ($(Trigger))"
      $prScriptPath = Join-Path "$(Build.SourcesDirectory)" 'tools' 'Github' 'CreatePR.ps1'

      git config user.email "65331932+azure-powershell-bot@users.noreply.github.com";
      git config user.name "azure-powershell-bot";
      git remote set-url origin https://azure-powershell-bot:$(GithubToken)@github.com/Azure/azure-powershell.git;
      git add $generatedPath
      git commit -m $prTitle
      git push origin $tmpBranchName --force
      
      . $prScriptPath -Title $prTitle -HeadBranch $tmpBranchName -BaseBranch "$(Build.SourceBranchName)" -BotAccessToken $(GithubToken) -Description $prDescription

      <#
        this commidId will be useful when we push directly to target branch in the future
        $commitId = (git rev-parse HEAD)
      #>
- template: publish-artifacts-steps.yml
  parameters:
    artifactName: build-${{ parameters.testFramework }}