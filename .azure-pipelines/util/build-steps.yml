parameters:
  testFramework: ''
  configuration: ''
  powerShellPlatform: ''
  TargetModule: ''
  ForceRegenerate: false

steps:
- checkout: self
  persistCredentials: true
- template: get-github-token-steps.yml
- task: NodeTool@0
  displayName: Install Autorest
  inputs:
    versionSpec: '14.17.1'
    command: custom
    verbose: false
    customCommand: install autorest@latest
- task: PowerShell@2
  displayName: Setup environment for Autorest
  inputs:
    targetType: inline
    script: "$env:NODE_OPTIONS=\"--max-old-space-size=65536\""
    pwsh: true
- task: PowerShell@2
  displayName: 'Check Ignored File'
  inputs:
    filePath: tools/CheckIgnoredFile.ps1
- task: UseDotNet@2
  displayName: 'Use .NET Core sdk 6.0.x'
  inputs:
    packageType: sdk
    version: 6.0.x
- task: PowerShell@2
  displayName: 'Build'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $buildScript = Join-Path "$(Build.SourcesDirectory)" 'tools' 'BuildScripts' 'BuildModules.ps1'
      if ('Manual' -eq "$(Build.Reason)" -and ('true' -eq '${{ parameters.ForceRegenerate }}')) {
        . $buildScript -CIPlan -RepoRoot "$(Build.SourcesDirectory)" -Configuration ${{ parameters.configuration }} -ForceRegenerate -InvokedByPipeline
      } else {
        . $buildScript -CIPlan -RepoRoot "$(Build.SourcesDirectory)" -Configuration ${{ parameters.configuration }} -InvokedByPipeline
      }
- task: PowerShell@2
  displayName: 'Write pipeline result'
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $pipelineScript = Join-Path "$(Build.SourcesDirectory)" 'tools' 'ExecuteCIStep.ps1'
      $repoArtifact = Join-Path "$(Build.SourcesDirectory)" 'artifacts'
      . $pipelineScript -Build -TriggerType "$(Build.Reason)" -Trigger $(Trigger) -RepoArtifacts $repoArtifact -Configuration ${{ parameters.configuration }}
- task: DotNetCoreCLI@2
  displayName: 'SubTask Predictor'
  condition: or(eq(variables.SubTaskPredictor, true), eq(variables.SubTaskAll, true))
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:AzToolsPredictor'
- task: DotNetCoreCLI@2
  displayName: 'SubTask Installer'
  condition: or(eq(variables.SubTaskInstaller, true), eq(variables.SubTaskAll, true))
  inputs:
    command: custom
    custom: msbuild
    arguments: 'build.proj /t:AzToolsInstaller'
- task: PowerShell@2
  displayName: 'Update branch for CI/Manual/Schedule triggered pipeline'
  condition: or(eq(variables.TriggerType, 'Commit'), eq(variables.TriggerType, 'TargetModule'))
  inputs:
    targetType: inline
    pwsh: true
    script: |
      $tmpBranchName = "$(TmpBranchName)"
      $baseBranchName = "$(BaseBranchName)"
      $generatedPath = Join-Path "$(Build.SourcesDirectory)" 'generated'
      $diff = (git diff --numstat $generatedPath)
      if ((-not $diff) -or ($null -eq $diff) -or (0 -eq $diff.Count)) {
        return
      }

      $prTitle = "[skip ci] Archive generated assets to $baseBranchName"
      $prDescription = "triggered by: $(TriggerType) ($(Trigger))"
      $prScriptPath = Join-Path "$(Build.SourcesDirectory)" 'tools' 'Github' 'CreatePR.ps1'

      git config user.email "65331932+azure-powershell-bot@users.noreply.github.com";
      git config user.name "azure-powershell-bot";
      git remote set-url origin https://azure-powershell-bot:$(GithubToken)@github.com/Azure/azure-powershell.git;
      git add $generatedPath
      git commit -m $prTitle
      git push origin $tmpBranchName --force
      
      . $prScriptPath -Title $prTitle -HeadBranch $tmpBranchName -BaseBranch "$(Build.SourceBranchName)" -BotAccessToken $(GithubToken) -Description $prDescription

      <#
        this commidId will be useful when we push directly to target branch in the future
        $commitId = (git rev-parse HEAD)
      #>
- template: publish-artifacts-steps.yml
  parameters:
    artifactName: build-${{ parameters.testFramework }}