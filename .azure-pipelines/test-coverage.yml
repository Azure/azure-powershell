parameters:
- name: dotnet_sdk_6
  displayName: .NET 6
  type: string
  default: 6.0.x
- name: dotnet_sdk_7
  displayName: .NET 7
  type: string
  default: 7.0.x
- name: testFramework
  displayName: Test Framework
  type: string
  default: net6.0
- name: testPoolName
  displayName: Test Pool Name
  type: string
  default: pool-windows-2019
- name: testPoolVMImage
  displayName: Test Pool VM Image
  type: string
  default: ' '

variables:
  EnableTestCoverage: true
  TestCoverageLocation: $(Pipeline.Workspace)/artifacts
  AZURE_CORE_SHOW_SECRETS_WARNING: true

pr: none
trigger: none

jobs:
- job: Build
  displayName: Build
  pool: pool-windows-2019

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET 6 SDK'
    inputs:
      packageType: sdk
      version: ${{ parameters.dotnet_sdk_6 }}

  - task: DotNetCoreCLI@2
    displayName: Build Azure PowerShell Modules
    inputs:
      command: custom
      custom: msbuild
      arguments: 'build.proj -t:"Clean;Build" -p:"Configuration=Debug"'

  - task: PublishPipelineArtifact@1
    displayName: Publish Build Artifacts
    inputs:
      targetPath: artifacts
      artifact: BuildArtifacts

- job: TestCoverage
  dependsOn: Build
  timeoutInMinutes: 600
  pool:
    name: ${{ parameters.testPoolName }}
    vmImage: ${{ parameters.testPoolVMImage }}

  steps:
  - task: UseDotNet@2
    displayName: 'Install .NET 6.0 SDK'
    inputs:
      packageType: sdk
      version: ${{ parameters.dotnet_sdk_6 }}

  - task: PowerShell@2
    displayName: Initialize Environment
    inputs:
      pwsh: true
      targetType: filePath
      filePath: ./tools/TestFx/Utilities/CommonUtility.ps1

  - task: DownloadPipelineArtifact@2
    displayName: Download pipeline artifacts
    inputs:
      targetPath: artifacts
      artifactName: BuildArtifacts

  - task: DotNetCoreCLI@2
    displayName: Test SDK-Based Cmdlets
    condition: succeeded()
    inputs:
      command: custom
      custom: msbuild
      arguments: 'build.proj -t:"Test" -p:"Configuration=Debug;TestFramework=${{ parameters.testFramework }}"'

  - task: PublishPipelineArtifact@1
    displayName: Publish Test Coverage Result
    condition: always()
    inputs:
      artifact: testcoverage
      targetPath: $(TestCoverageLocation)
