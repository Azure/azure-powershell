variables:
  WindowsName: windows
  WindowsAgentPoolName: pool-windows-2019
  WindowsAgentPoolVMImage: ''
  LinuxName: linux
  LinuxAgentPoolName: pool-ubuntu-2004
  LinuxAgentPoolVMImage: ''
  MacOSName: macOS
  MacOSAgentPoolName: 'Azure Pipelines'
  MacOSAgentPoolVMImage: macOS-11
  TestFramework: net6.0
  TestTarget: Test
  Configuration: Debug
  DebugLocalBuildTasks: true
  IsGenerateBased: $[startsWith(variables['system.pullRequest.targetBranch'], 'generation')]
  BuildTimeoutInMinutes: 120
  AnalysisTimeoutInMinutes: 120
  TestTimeoutInMinutes: 180
  BuildAzPredictor: false
  EnableTestCoverage: true
  TestCoverageLocation: $(Build.SourcesDirectory)/artifacts
  PowerShellPlatform: PowerShell Core
  AZURE_CLIENTS_SHOW_SECRETS_WARNING: true

trigger: none

pr:
  branches:
    include:
      - '*'
    exclude:
      - Azs-tzl

jobs:
- job: Build
  displayName: Build
  condition: succeeded()
  timeoutInMinutes: ${{ variables.BuildTimeoutInMinutes }}
  pool: pool-windows-2019

  steps:
  - template: util/build-steps.yml
    parameters:
      configuration: ${{ variables.Configuration }}
      testFramework: ${{ variables.TestFramework }}
      powerShellPlatform: ${{ variables.PowerShellPlatform }}

- job: Analyze
  displayName: Analyze
  dependsOn: Build
  condition: succeeded()
  timeoutInMinutes: ${{ variables.AnalysisTimeoutInMinutes }}
  pool: pool-windows-2019

  steps:
  - template: util/analyze-steps.yml
    parameters:
      configuration: ${{ variables.Configuration }}
      testFramework: ${{ variables.TestFramework }}
      powerShellPlatform: ${{ variables.PowerShellPlatform }}
      IsGenerateBased: ${{ variables.IsGenerateBased }}

- job: Test
  displayName: Test
  dependsOn: Build
  condition: succeeded()
  timeoutInMinutes: ${{ variables.TestTimeoutInMinutes }}
  strategy:
    matrix:
      windows:
        OSName: ${{ variables.WindowsName }}
        agentPoolName: ${{ variables.WindowsAgentPoolName }}
        agentPoolVMImage: ${{ variables.WindowsAgentPoolVMImage }}
      linux:
        OSName: ${{ variables.LinuxName }}
        agentPoolName: ${{ variables.LinuxAgentPoolName }}
        agentPoolVMImage: ${{ variables.LinuxAgentPoolVMImage }}
      macOS:
        OSName: ${{ variables.MacOSName }}
        agentPoolName: ${{ variables.MacOSAgentPoolName }}
        agentPoolVMImage: ${{ variables.MacOSAgentPoolVMImage }}
  pool:
    name: $(agentPoolName)
    vmImage: $(agentPoolVMImage)

  steps:
  - template: util/test-steps.yml
    parameters:
      osName: $(OSName)
      testFramework: ${{ variables.TestFramework }}
      testTarget: ${{ variables.TestTarget }}
      configuration: ${{ variables.Configuration }}
      powerShellPlatform: ${{ variables.PowerShellPlatform }}
