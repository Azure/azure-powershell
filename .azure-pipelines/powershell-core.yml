variables:
  WindowsName: windows
  WindowsImage: windows-2019
  LinuxName: linux
  LinuxImage: ubuntu-20.04
  MacOSName: macOS
  MacOSImage: macOS-11
  TestFramework: netcoreapp2.1
  TestTarget: Test
  Configuration: Debug
  DebugLocalBuildTasks: true
  IsGenerateBased: $[eq(variables['system.pullRequest.targetBranch'], 'generation')]
  BuildTimeoutInMinutes: 120
  AnalysisTimeoutInMinutes: 120

trigger: none

pr:
  branches:
    include:
      - '*'
    exclude:
      - Azs-tzl

stages:
- stage: "Build"
  jobs:
  - job: Build
    displayName: Build
    condition: succeeded()
    timeoutInMinutes: ${{ variables.BuildTimeoutInMinutes }}
    # strategy:
    #   matrix:
    #     # windows:
    #       # OSName: ${{ variables.WindowsName }}
    #       # ImageName: ${{ variables.WindowsImage }}
    #     linux:
    #       OSName: ${{ variables.LinuxName }}
    #       ImageName: ${{ variables.LinuxImage }}
    #     # macOS:
    #     #   OSName: ${{ variables.MacOSName }}
    #     #   ImageName: ${{ variables.MacOSImage }}
    pool:
      vmImage: ${{ variables.LinuxImage }}
    steps:
    - powershell: |
        $moduleArray = Get-ChildItem -File -Recurse -Path src test-module.ps1 | % { @{module_name = $_.Directory.BaseName; path = $_.FullName} }
        $moduleHashTable = @{}
        foreach($module in $moduleArray)
        {
          $moduleHashTable.Add($module['module_name'], $module)
        }
        $var = $moduleHashTable | ConvertTo-Json -Compress
        Write-Host "##vso[task.setvariable variable=autorestModuleList;isOutput=true]$var"
      name: autorestModuleList
      
  - job: Runner
    dependsOn: Build
    pool:
      vmImage: ${{ variables.LinuxImage }}
    strategy:
      maxParallel: 2
      matrix: $[ dependencies.Build.outputs['autorestModuleList.autorestModuleList'] ]
    steps:
    - checkout: none
    - powershell: |
        Write-Host "--------------------------------------------------"
        Write-Host "--------------------------------------------------"
      name: print
