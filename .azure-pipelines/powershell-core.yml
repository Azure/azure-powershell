variables:
  WindowsName: windows
  WindowsImage: windows-2019
  LinuxName: linux
  LinuxImage: ubuntu-20.04
  MacOSName: macOS
  MacOSImage: macOS-11
  TestFramework: netcoreapp2.1
  TestTarget: Test
  Configuration: Debug
  DebugLocalBuildTasks: true
  IsGenerateBased: $[eq(variables['system.pullRequest.targetBranch'], 'generation')]
  BuildTimeoutInMinutes: 120
  AnalysisTimeoutInMinutes: 120

trigger: none

pr:
  branches:
    include:
      - '*'
    exclude:
      - Azs-tzl

stages:
- stage: "Build"
  jobs:
  - job: Build
    displayName: Build
    condition: succeeded()
    timeoutInMinutes: ${{ variables.BuildTimeoutInMinutes }}
    strategy:
      matrix:
        # windows:
          # OSName: ${{ variables.WindowsName }}
          # ImageName: ${{ variables.WindowsImage }}
        linux:
          OSName: ${{ variables.LinuxName }}
          ImageName: ${{ variables.LinuxImage }}
        # macOS:
        #   OSName: ${{ variables.MacOSName }}
        #   ImageName: ${{ variables.MacOSImage }}
    pool:
      vmImage: $(ImageName)
    steps:
    - powershell: |
        $var = Get-ChildItem -File -Recurse -Depth 4 -Path src test-module.ps1 | % { @{module_name = $_.Directory.BaseName; path = $_.FullName} } | ConvertTo-Json
        Write-Host "##vso[task.setvariable variable=autorestModuleList;isoutput=true]$var"
      name: passOutput
  - job: Runner
    dependsOn: Build
    strategy:
      matrix: $[ dependencies.Build.outputs['passOutput.autorestModuleList'] ]
    steps:
      - powershell: |
          Write-Host "--------------------------------------------------"
          Write-Host $(module_name)
          Write-Host $(path)
          Write-Host "--------------------------------------------------"
