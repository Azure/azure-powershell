# Please don't use ADO UI defined scheduled triggers because it takes precedence over YAML scheduled triggers.
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/scheduled-triggers
schedules:
- cron: "0 0 * * *"
  displayName: Daily Midnight Build
  branches:
    include:
    - master

pr: none
trigger: none

strategy:
  matrix:
    Windows PS 5.1.14:
      Image_Name: 'vs2017-win2016'
      PSVersion: 5.1.14
  
    Windows PS 6.2.4:
      Image_Name: 'vs2017-win2016'
      PSVersion: 6.2.4
     
    Windows PS 7.0.2:
      Image_Name: 'vs2017-win2016'
      PSVersion: 7.0.2

    Linux PS 7.0.3:
      Image_Name: 'ubuntu-18.04'
      PSVersion: '7.0.3'

    Linux PS 6.2.4:
      Image_Name: 'ubuntu-18.04'
      PSVersion: '6.2.4'
  
    # MacOS PS 7.0.3:
    #   Image_Name: 'macOS-10.14'
    #   PSVersion: '7.0.3'

  maxParallel: 4

pool:
  vmImage: $(Image_Name)

steps:
- task: PowerShell@2
  displayName: Prepare Powershell $(PSVersion) 
  inputs:
    targetType: 'inline'
    script: |
      # Remove Az.* modules
      $modules = Get-Module -Name Az.* -ListAvailable
      if($modules){
        Write-Host "Removing Az modules..."
        $modules.Path | ForEach-Object { 
          $dirctory = $_ | Split-Path | Split-Path
          if(Test-Path $dirctory ){
            Remove-Item –path $dirctory –recurse -force
          }
        }
        Write-Host "Az modules removed."
      }

      # Check Az
      Get-Module -Name Az.* -ListAvailable

      # Remove AzureRM.* modules
      $modules = Get-Module -Name AzureRM.* -ListAvailable
      if($modules){
        Write-Host "Removing AzureRM modules..."
        $modules.Path | ForEach-Object { 
          $dirctory = $_ | Split-Path | Split-Path
          if(Test-Path $dirctory ){
            Remove-Item –path $dirctory –recurse -force
          }
        }
        Write-Host "AzureRM modules removed."
      }
      # Check AzureRM
      Get-Module -Name AzureRM.* -ListAvailable

      $psVersion = "$(PSVersion)"
      Write-Host "Installing PS $psVersion..."  
      if($psVersion -ne "5.1.14"){
          dotnet new tool-manifest
          dotnet tool install PowerShell --version $(PSVersion)
          dotnet tool list
      }
   
- task: PowerShell@2
  displayName: Install Az Modules from $(GALLERY_NAME)
  inputs:
    targetType: 'inline'
    script: |    
      $command = "`$PSVersionTable`
      ./tools/Test/SmokeTest/InstallAzModules.ps1 $(GALLERY_NAME) `
      Exit "
      $psVersion = "$(PSVersion)"
      if($psVersion -ne "5.1.14"){
          dotnet tool run pwsh -c $command
      }else{
        Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
      }
      
- task: PowerShell@2
  displayName: Connect AzAccount 
  inputs:
    targetType: 'inline'
    script: |
      $command = "`$PSVersionTable`
      ./tools/Test/SmokeTest/ConnectAzAccount.ps1 -pwd $(password) -servicePrincipal $(servicePrincipal) -tenantId $(tenantId) `
      Exit"
      $psVersion = "$(PSVersion)"
      if($psVersion -ne "5.1.14"){
          dotnet tool run pwsh -c $command
      }else{
        Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
      }

- task: PowerShell@2
  displayName: Run Smoke Test 
  inputs:
    targetType: 'inline'
    script: |
      $command = "`$PSVersionTable`
      ./tools/Test/SmokeTest/RmCoreSmokeTests.ps1 `
      Exit"
      $psVersion = "$(PSVersion)"
      if($psVersion -ne "5.1.14"){
          dotnet tool run pwsh -c $command
      }else{
        Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
      }

- task: PowerShell@2
  displayName: 'Run Smoke Test Reversely'
  inputs:
    targetType: 'inline'
    script: |
      $command = "`$PSVersionTable `
      ./tools/Test/SmokeTest/RmCoreSmokeTests.ps1 -Reverse `
      Exit"
      $psVersion = "$(PSVersion)"
      if($psVersion -ne "5.1.14"){
          dotnet tool run pwsh -c $command
      }else{
        Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
      }

- task: PowerShell@2
  displayName: Clean Az Modules
  inputs:
    targetType: 'inline'
    script: |   
      $command = "`$PSVersionTable `
      ./tools/Test/SmokeTest/CleanAzModules.ps1 `
      Exit"
      $psVersion = "$(PSVersion)"
      if($psVersion -ne "5.1.14"){
          dotnet tool run pwsh -c $command
      }else{
        Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
      }

- task: PowerShell@2
  displayName: Update Az Modules
  inputs:
    targetType: 'inline'
    script: |
      $command = "`$PSVersionTable `
      ./tools/Test/SmokeTest/UpdateAzModules.ps1 $(GALLERY_NAME) `
      Exit"
      $OSSystem = "$(Platform_Name)"
      $psVersion = "$(PSVersion)"
      if($psVersion -ne "5.1.14"){
          dotnet tool run pwsh -c $command
      }else{
        Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
      }


# - task: PowerShell@2
#   displayName: Run Smoke Test 
#   inputs:
#     targetType: 'inline'
#     script: |
#       $command = "`$PSVersionTable`
#       ./tools/Test/SmokeTest/RmCoreSmokeTests.ps1 `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: 'Run Smoke Test Reversely'
#   inputs:
#     targetType: 'inline'
#     script: |
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/RmCoreSmokeTests.ps1 -Reverse `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Clean Az Modules
#   inputs:
#     targetType: 'inline'
#     script: |   
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/CleanAzModules.ps1 `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }
    
# - task: PowerShell@2
#   displayName: Install an individual module
#   inputs:
#     targetType: 'inline'
#     script: |
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/InstallAnIndividualModule.ps1 $(GALLERY_NAME) `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Clean Az Modules
#   inputs:
#     targetType: 'inline'
#     script: |   
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/CleanAzModules.ps1 `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Update an individual module
#   inputs:
#     targetType: 'inline'
#     script: |
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/UpdateAnIndividualModule.ps1 $(GALLERY_NAME) `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Clean Az Modules
#   inputs:
#     targetType: 'inline'
#     script: |   
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/CleanAzModules.ps1 `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Install Az on top of an individual module
#   inputs:
#     targetType: 'inline'
#     script: |
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/InstallAzOnTopOfAnIndividualModule.ps1 $(GALLERY_NAME) `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Clean Az Modules
#   inputs:
#     targetType: 'inline'
#     script: |   
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/CleanAzModules.ps1 `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }

# - task: PowerShell@2
#   displayName: Install an individual module on top of Az
#   inputs:
#     targetType: 'inline'
#     script: |
#       $command = "`$PSVersionTable `
#       ./tools/Test/SmokeTest/InstallAnIndividualModuleOnTopOfAz.ps1 $(GALLERY_NAME) `
#       Exit"
#       $psVersion = "$(PSVersion)"
#       if($psVersion -ne "5.1.14"){
#           dotnet tool run pwsh -c $command
#       }else{
#         Invoke-Command -ScriptBlock { param ($command) & "powershell.exe" -Command $command } -ArgumentList $command
#       }